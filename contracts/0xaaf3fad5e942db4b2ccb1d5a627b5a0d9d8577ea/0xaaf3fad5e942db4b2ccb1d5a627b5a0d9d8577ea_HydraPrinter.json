{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"HydraPrinter.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT                                                                               \\n/*\\n\\nhttps://t.me/hydraprinter\\nhttps://twitter.com/HydraPrinter\\n\\n*/\\npragma solidity 0.8.21;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _createInitialSupply(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\\ninterface DividendPayingTokenOptionalInterface {\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableDividendOf(address _owner, address _rewardToken) external view returns(uint256);\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnDividendOf(address _owner, address _rewardToken) external view returns(uint256);\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeDividendOf(address _owner, address _rewardToken) external view returns(uint256);\\n}\\n\\ninterface DividendPayingTokenInterface {\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner, address _rewardToken) external view returns(uint256);\\n\\n  /// @notice Distributes ether to token holders as dividends.\\n  /// @dev SHOULD distribute the paid ether to token holders as dividends.\\n  ///  SHOULD NOT directly transfer ether to token holders in this function.\\n  ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\\n  function distributeDividends() external payable;\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\n  function withdrawDividend(address _rewardToken) external;\\n\\n  /// @dev This event MUST emit when ether is distributed to token holders.\\n  /// @param from The address which sends ether to this contract.\\n  /// @param weiAmount The amount of distributed ether in wei.\\n  event DividendsDistributed(\\n    address indexed from,\\n    uint256 weiAmount\\n  );\\n\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\n  /// @param to The address which withdraws ether from this contract.\\n  /// @param weiAmount The amount of withdrawn ether in wei.\\n  event DividendWithdrawn(\\n    address indexed to,\\n    uint256 weiAmount\\n  );\\n}\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    \\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0);\\n    return b;\\n  }\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ncontract DividendPayingToken is DividendPayingTokenInterface, DividendPayingTokenOptionalInterface, Ownable {\\n  using SafeMath for uint256;\\n  using SafeMathUint for uint256;\\n  using SafeMathInt for int256;\\n\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n  // For more discussion about choosing the value of `magnitude`,\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n  uint256 constant internal magnitude = 2**128;\\n\\n  mapping(address => uint256) internal magnifiedDividendPerShare;\\n  address[] public rewardTokens;\\n  address public nextRewardToken;\\n  uint256 public rewardTokenCounter;\\n  \\n  IUniswapV2Router02 public immutable uniswapV2Router;\\n  \\n  \\n  // About dividendCorrection:\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n  //   `dividendOf(_user)` should not be changed,\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n  mapping(address => mapping(address => int256)) internal magnifiedDividendCorrections;\\n  mapping(address => mapping(address => uint256)) internal withdrawnDividends;\\n  \\n  mapping (address => uint256) public holderBalance;\\n  uint256 public totalBalance;\\n\\n  mapping(address => uint256) public totalDividendsDistributed;\\n  \\n  constructor(){\\n      IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // router 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n      uniswapV2Router = _uniswapV2Router; \\n      \\n      // Mainnet\\n      rewardTokens.push(address(0x4501A82790eF2587dfEb93Dc038541228E516597)); // HYDRA - Mainnet  \\n      nextRewardToken = rewardTokens[0];\\n  }\\n\\n  \\n\\n  /// @dev Distributes dividends whenever ether is paid to this contract.\\n  receive() external payable {\\n    distributeDividends();\\n  }\\n\\n  /// @notice Distributes ether to token holders as dividends.\\n  /// @dev It reverts if the total supply of tokens is 0.\\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\n  /// About undistributed ether:\\n  ///   In each distribution, there is a small amount of ether not distributed,\\n  ///     the magnified amount of which is\\n  ///     `(msg.value * magnitude) % totalSupply()`.\\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\n  ///   We can actually keep track of the undistributed ether in a distribution\\n  ///     and try to distribute it in the next distribution,\\n  ///     but keeping track of such data on-chain costs much more than\\n  ///     the saved ether, so we don't do that.\\n    \\n  function distributeDividends() public override payable { \\n    require(totalBalance > 0);\\n    uint256 initialBalance = IERC20(nextRewardToken).balanceOf(address(this));\\n    buyTokens(msg.value, nextRewardToken);\\n    uint256 newBalance = IERC20(nextRewardToken).balanceOf(address(this)).sub(initialBalance);\\n    if (newBalance > 0) {\\n      magnifiedDividendPerShare[nextRewardToken] = magnifiedDividendPerShare[nextRewardToken].add(\\n        (newBalance).mul(magnitude) / totalBalance\\n      );\\n      emit DividendsDistributed(msg.sender, newBalance);\\n\\n      totalDividendsDistributed[nextRewardToken] = totalDividendsDistributed[nextRewardToken].add(newBalance);\\n    }\\n    rewardTokenCounter = rewardTokenCounter == rewardTokens.length - 1 ? 0 : rewardTokenCounter + 1;\\n    nextRewardToken = rewardTokens[rewardTokenCounter];\\n  }\\n  \\n  // useful for buybacks or to reclaim any BNB on the contract in a way that helps holders.\\n    function buyTokens(uint256 bnbAmountInWei, address rewardToken) internal {\\n        // generate the uniswap pair path of weth -> eth\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = rewardToken;\\n\\n        // make the swap\\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbAmountInWei}(\\n            0, // accept any amount of Ethereum\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n  \\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function withdrawDividend(address _rewardToken) external virtual override {\\n    _withdrawDividendOfUser(payable(msg.sender), _rewardToken);\\n  }\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function _withdrawDividendOfUser(address payable user, address _rewardToken) internal returns (uint256) {\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user, _rewardToken);\\n    if (_withdrawableDividend > 0) {\\n      withdrawnDividends[user][_rewardToken] = withdrawnDividends[user][_rewardToken].add(_withdrawableDividend);\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\n      IERC20(_rewardToken).transfer(user, _withdrawableDividend);\\n      return _withdrawableDividend;\\n    }\\n\\n    return 0;\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner, address _rewardToken) external view override returns(uint256) {\\n    return withdrawableDividendOf(_owner, _rewardToken);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableDividendOf(address _owner, address _rewardToken) public view override returns(uint256) {\\n    return accumulativeDividendOf(_owner,_rewardToken).sub(withdrawnDividends[_owner][_rewardToken]);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnDividendOf(address _owner, address _rewardToken) external view override returns(uint256) {\\n    return withdrawnDividends[_owner][_rewardToken];\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeDividendOf(address _owner, address _rewardToken) public view override returns(uint256) {\\n    return magnifiedDividendPerShare[_rewardToken].mul(holderBalance[_owner]).toInt256Safe()\\n      .add(magnifiedDividendCorrections[_rewardToken][_owner]).toUint256Safe() / magnitude;\\n  }\\n\\n  /// @dev Internal function that increases tokens to an account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account that will receive the created tokens.\\n  /// @param value The amount that will be created.\\n  function _increase(address account, uint256 value) internal {\\n    for (uint256 i; i < rewardTokens.length; i++){\\n        magnifiedDividendCorrections[rewardTokens[i]][account] = magnifiedDividendCorrections[rewardTokens[i]][account]\\n          .sub((magnifiedDividendPerShare[rewardTokens[i]].mul(value)).toInt256Safe());\\n    }\\n  }\\n\\n  /// @dev Internal function that reduces an amount of the token of a given account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account whose tokens will be burnt.\\n  /// @param value The amount that will be burnt.\\n  function _reduce(address account, uint256 value) internal {\\n      for (uint256 i; i < rewardTokens.length; i++){\\n        magnifiedDividendCorrections[rewardTokens[i]][account] = magnifiedDividendCorrections[rewardTokens[i]][account]\\n          .add( (magnifiedDividendPerShare[rewardTokens[i]].mul(value)).toInt256Safe() );\\n      }\\n  }\\n\\n  function _setBalance(address account, uint256 newBalance) internal {\\n    uint256 currentBalance = holderBalance[account];\\n    holderBalance[account] = newBalance;\\n    if(newBalance > currentBalance) {\\n      uint256 increaseAmount = newBalance.sub(currentBalance);\\n      _increase(account, increaseAmount);\\n      totalBalance += increaseAmount;\\n    } else if(newBalance < currentBalance) {\\n      uint256 reduceAmount = currentBalance.sub(newBalance);\\n      _reduce(account, reduceAmount);\\n      totalBalance -= reduceAmount;\\n    }\\n  }\\n}\\n\\ncontract DividendTracker is DividendPayingToken {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    struct Map {\\n        address[] keys;\\n        mapping(address => uint) values;\\n        mapping(address => uint) indexOf;\\n        mapping(address => bool) inserted;\\n    }\\n\\n    function get(address key) private view returns (uint) {\\n        return tokenHoldersMap.values[key];\\n    }\\n\\n    function getIndexOfKey(address key) private view returns (int) {\\n        if(!tokenHoldersMap.inserted[key]) {\\n            return -1;\\n        }\\n        return int(tokenHoldersMap.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(uint index) private view returns (address) {\\n        return tokenHoldersMap.keys[index];\\n    }\\n\\n\\n\\n    function size() private view returns (uint) {\\n        return tokenHoldersMap.keys.length;\\n    }\\n\\n    function set(address key, uint val) private {\\n        if (tokenHoldersMap.inserted[key]) {\\n            tokenHoldersMap.values[key] = val;\\n        } else {\\n            tokenHoldersMap.inserted[key] = true;\\n            tokenHoldersMap.values[key] = val;\\n            tokenHoldersMap.indexOf[key] = tokenHoldersMap.keys.length;\\n            tokenHoldersMap.keys.push(key);\\n        }\\n    }\\n\\n    function remove(address key) private {\\n        if (!tokenHoldersMap.inserted[key]) {\\n            return;\\n        }\\n\\n        delete tokenHoldersMap.inserted[key];\\n        delete tokenHoldersMap.values[key];\\n\\n        uint index = tokenHoldersMap.indexOf[key];\\n        uint lastIndex = tokenHoldersMap.keys.length - 1;\\n        address lastKey = tokenHoldersMap.keys[lastIndex];\\n\\n        tokenHoldersMap.indexOf[lastKey] = index;\\n        delete tokenHoldersMap.indexOf[key];\\n\\n        tokenHoldersMap.keys[index] = lastKey;\\n        tokenHoldersMap.keys.pop();\\n    }\\n\\n    Map private tokenHoldersMap;\\n    uint256 public lastProcessedIndex;\\n\\n    mapping (address => bool) public excludedFromDividends;\\n\\n    mapping (address => uint256) public lastClaimTimes;\\n\\n    uint256 public claimWait;\\n    uint256 public immutable minimumTokenBalanceForDividends;\\n\\n    event ExcludeFromDividends(address indexed account);\\n    event IncludeInDividends(address indexed account);\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\n\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\n\\n    constructor() {\\n    \\tclaimWait = 1200;\\n        minimumTokenBalanceForDividends = 5 * (10**18);\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n    \\texcludedFromDividends[account] = true;\\n\\n    \\t_setBalance(account, 0);\\n    \\tremove(account);\\n\\n    \\temit ExcludeFromDividends(account);\\n    }\\n    \\n    function includeInDividends(address account) external onlyOwner {\\n    \\trequire(excludedFromDividends[account]);\\n    \\texcludedFromDividends[account] = false;\\n\\n    \\temit IncludeInDividends(account);\\n    }\\n\\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\n        require(newClaimWait >= 1200 && newClaimWait <= 86400, \\\"Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\\\");\\n        require(newClaimWait != claimWait, \\\"Dividend_Tracker: Cannot update claimWait to same value\\\");\\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\\n        claimWait = newClaimWait;\\n    }\\n\\n    function getLastProcessedIndex() external view returns(uint256) {\\n    \\treturn lastProcessedIndex;\\n    }\\n\\n    function getNumberOfTokenHolders() external view returns(uint256) {\\n        return tokenHoldersMap.keys.length;\\n    }\\n\\n    function getAccount(address _account, address _rewardToken)\\n        public view returns (\\n            address account,\\n            int256 index,\\n            int256 iterationsUntilProcessed,\\n            uint256 withdrawableDividends,\\n            uint256 totalDividends,\\n            uint256 lastClaimTime,\\n            uint256 nextClaimTime,\\n            uint256 secondsUntilAutoClaimAvailable) {\\n        account = _account;\\n\\n        index = getIndexOfKey(account);\\n\\n        iterationsUntilProcessed = -1;\\n\\n        if(index >= 0) {\\n            if(uint256(index) > lastProcessedIndex) {\\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\\n            }\\n            else {\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\\n                                                        0;\\n\\n\\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\\n            }\\n        }\\n\\n\\n        withdrawableDividends = withdrawableDividendOf(account, _rewardToken);\\n        totalDividends = accumulativeDividendOf(account, _rewardToken);\\n\\n        lastClaimTime = lastClaimTimes[account];\\n\\n        nextClaimTime = lastClaimTime > 0 ?\\n                                    lastClaimTime.add(claimWait) :\\n                                    0;\\n\\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\\n                                                    nextClaimTime.sub(block.timestamp) :\\n                                                    0;\\n    }\\n\\n    function getAccountAtIndex(uint256 index, address _rewardToken)\\n        external view returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256) {\\n    \\tif(index >= size()) {\\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\\n        }\\n\\n        address account = getKeyAtIndex(index);\\n\\n        return getAccount(account, _rewardToken);\\n    }\\n\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\n    \\tif(lastClaimTime > block.timestamp)  {\\n    \\t\\treturn false;\\n    \\t}\\n\\n    \\treturn block.timestamp.sub(lastClaimTime) >= claimWait;\\n    }\\n\\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\\n    \\tif(excludedFromDividends[account]) {\\n    \\t\\treturn;\\n    \\t}\\n\\n    \\tif(newBalance >= minimumTokenBalanceForDividends) {\\n            _setBalance(account, newBalance);\\n    \\t\\tset(account, newBalance);\\n    \\t}\\n    \\telse {\\n            _setBalance(account, 0);\\n    \\t\\tremove(account);\\n    \\t}\\n\\n    \\tprocessAccount(account, true);\\n    }\\n    \\n    function process(uint256 gas) external returns (uint256, uint256, uint256) {\\n    \\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\n\\n    \\tif(numberOfTokenHolders == 0) {\\n    \\t\\treturn (0, 0, lastProcessedIndex);\\n    \\t}\\n\\n    \\tuint256 _lastProcessedIndex = lastProcessedIndex;\\n\\n    \\tuint256 gasUsed = 0;\\n\\n    \\tuint256 gasLeft = gasleft();\\n\\n    \\tuint256 iterations = 0;\\n    \\tuint256 claims = 0;\\n\\n    \\twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\\n    \\t\\t_lastProcessedIndex++;\\n\\n    \\t\\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\\n    \\t\\t\\t_lastProcessedIndex = 0;\\n    \\t\\t}\\n\\n    \\t\\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\\n\\n    \\t\\tif(canAutoClaim(lastClaimTimes[account])) {\\n    \\t\\t\\tif(processAccount(payable(account), true)) {\\n    \\t\\t\\t\\tclaims++;\\n    \\t\\t\\t}\\n    \\t\\t}\\n\\n    \\t\\titerations++;\\n\\n    \\t\\tuint256 newGasLeft = gasleft();\\n\\n    \\t\\tif(gasLeft > newGasLeft) {\\n    \\t\\t\\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\n    \\t\\t}\\n    \\t\\tgasLeft = newGasLeft;\\n    \\t}\\n\\n    \\tlastProcessedIndex = _lastProcessedIndex;\\n\\n    \\treturn (iterations, claims, lastProcessedIndex);\\n    }\\n\\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\n        uint256 amount;\\n        bool paid;\\n        for (uint256 i; i < rewardTokens.length; i++){\\n            amount = _withdrawDividendOfUser(account, rewardTokens[i]);\\n            if(amount > 0) {\\n        \\t\\tlastClaimTimes[account] = block.timestamp;\\n                emit Claim(account, amount, automatic);\\n                paid = true;\\n    \\t    }\\n        }\\n        return paid;\\n    }\\n}\\n\\ncontract HydraPrinter is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    address public immutable uniswapV2Pair;\\n\\n    bool private swapping;\\n\\n    DividendTracker public dividendTracker;\\n\\n    address public operationsWallet;\\n    \\n    uint256 public maxTransactionAmount;\\n    uint256 public swapTokensAtAmount;\\n    uint256 public maxWallet;\\n    \\n    uint256 public liquidityActiveBlock = 0; // 0 means liquidity is not active yet\\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\\n    uint256 public earlyBuyPenaltyEnd; // determines when snipers/bots can sell without extra penalty\\n    \\n    bool public limitsInEffect = true;\\n    bool public tradingActive = false;\\n    bool public swapEnabled = false;\\n    \\n    // Anti-bot and anti-whale mappings and variables\\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\\n    bool public transferDelayEnabled = true;\\n    \\n    uint256 public constant feeDivisor = 1000;\\n\\n    uint256 public totalSellFees;\\n    uint256 public rewardsSellFee;\\n    uint256 public operationsSellFee;\\n    uint256 public liquiditySellFee;\\n    \\n    uint256 public totalBuyFees;\\n    uint256 public rewardsBuyFee;\\n    uint256 public operationsBuyFee;\\n    uint256 public liquidityBuyFee;\\n    \\n    uint256 public tokensForRewards;\\n    uint256 public tokensForOperations;\\n    uint256 public tokensForLiquidity;\\n    \\n    uint256 public gasForProcessing = 200000;\\n\\n    uint256 public lpWithdrawRequestTimestamp;\\n    uint256 public lpWithdrawRequestDuration = 3 days;\\n    bool public lpWithdrawRequestPending;\\n    uint256 public lpPercToWithDraw;\\n\\n    /******************/\\n\\n    // exlcude from fees and max transaction amount\\n    mapping (address => bool) private _isExcludedFromFees;\\n\\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\\n    mapping (address => bool) private _isblacklisted;\\n    mapping (address => uint256) private _transferDelay;\\n    mapping (address => bool) private _holderDelay;\\n\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\n    // could be subject to a maximum transfer amount\\n    mapping (address => bool) public automatedMarketMakerPairs;\\n\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\n    event ExcludedMaxTransactionAmount(address indexed account, bool isExcluded);\\n\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n    event OperationsWalletUpdated(address indexed newWallet, address indexed oldWallet);\\n\\n    event DevWalletUpdated(address indexed newWallet, address indexed oldWallet);\\n\\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\n    \\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event SendDividends(\\n    \\tuint256 tokensSwapped,\\n    \\tuint256 amount\\n    );\\n\\n    event ProcessedDividendTracker(\\n    \\tuint256 iterations,\\n    \\tuint256 claims,\\n        uint256 lastProcessedIndex,\\n    \\tbool indexed automatic,\\n    \\tuint256 gas,\\n    \\taddress indexed processor\\n    );\\n\\n    event RequestedLPWithdraw();\\n    \\n    event WithdrewLPForMigration();\\n\\n    event CanceledLpWithdrawRequest();\\n\\n    constructor() ERC20(\\\"HYDRA Printer\\\", \\\"HYDRAP\\\") {\\n\\n        uint256 totalSupply = 8888888888 * 1e18;\\n        \\n        maxTransactionAmount = totalSupply * 3 / 1000; // 0.3% maxTransactionAmountTxn\\n        swapTokensAtAmount = totalSupply * 5 / 10000; // 0.05% swap tokens amount\\n        maxWallet = totalSupply * 15 / 1000; // 1.5% Max wallet\\n\\n        rewardsBuyFee = 40;\\n        operationsBuyFee = 150; //all fees will be reduced after launch\\n        liquidityBuyFee = 10;\\n        totalBuyFees = rewardsBuyFee + operationsBuyFee + liquidityBuyFee;\\n        \\n        rewardsSellFee = 40;\\n        operationsSellFee = 150; //all fees will be reduced after launch\\n        liquiditySellFee = 10;\\n        totalSellFees = rewardsSellFee + operationsSellFee + liquiditySellFee;\\n\\n    \\tdividendTracker = new DividendTracker();\\n    \\toperationsWallet = address(0x1d06171bF9284e24BB5426898cCF5Dc474d2c65b); // set as operations wallet\\n\\n    \\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);//0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n    \\t\\n         // Create a uniswap pair for this new token\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = _uniswapV2Pair;\\n\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n        // exclude from receiving dividends\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\n        dividendTracker.excludeFromDividends(address(this));\\n        dividendTracker.excludeFromDividends(owner());\\n        dividendTracker.excludeFromDividends(address(_uniswapV2Router));\\n        dividendTracker.excludeFromDividends(address(0xdead));\\n        \\n        // exclude from paying fees or having max transaction amount\\n        excludeFromFees(owner(), true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(address(0xdead), true);\\n        excludeFromMaxTransaction(owner(), true);\\n        excludeFromMaxTransaction(address(this), true);\\n        excludeFromMaxTransaction(address(dividendTracker), true);\\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\\n        excludeFromMaxTransaction(address(0xdead), true);\\n      \\n        _createInitialSupply(address(owner()), totalSupply);\\n    }\\n\\n    receive() external payable {\\n\\n  \\t}\\n\\n     // disable Transfer delay - cannot be reenabled\\n    function disableTransferDelay() external onlyOwner returns (bool){\\n        transferDelayEnabled = false;\\n        return true;\\n    }\\n\\n    // excludes wallets and contracts from dividends (such as CEX hotwallets, etc.)\\n    function excludeFromDividends(address account) external onlyOwner {\\n        dividendTracker.excludeFromDividends(account);\\n    }\\n\\n    // removes exclusion on wallets and contracts from dividends (such as CEX hotwallets, etc.)\\n    function includeInDividends(address account) external onlyOwner {\\n        dividendTracker.includeInDividends(account);\\n    }\\n    \\n    // once enabled, can never be turned off\\n    function enableTrading() external onlyOwner {\\n        require(!tradingActive, \\\"Cannot re-enable trading\\\");\\n        tradingActive = true;\\n        swapEnabled = true;\\n        tradingActiveBlock = block.number;\\n    }\\n    \\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\n    function updateSwapEnabled(bool enabled) external onlyOwner(){\\n        swapEnabled = enabled;\\n    }\\n\\n    function updateMaxAmount(uint256 newNum) external onlyOwner {\\n        require(newNum > (totalSupply() * 1 / 1000)/1e18, \\\"Cannot set maxTransactionAmount lower than 0.1%\\\");\\n        maxTransactionAmount = newNum * (10**18);\\n    }\\n    \\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\\n        require(newNum > (totalSupply() * 1 / 100)/1e18, \\\"Cannot set maxWallet lower than 1%\\\");\\n        maxWallet = newNum * (10**18);\\n    }\\n    \\n    function updateBuyFees(uint256 _operationsFee, uint256 _rewardsFee, uint256 _liquidityFee) external onlyOwner {\\n        operationsBuyFee = _operationsFee;\\n        rewardsBuyFee = _rewardsFee;\\n        liquidityBuyFee = _liquidityFee;\\n        totalBuyFees = operationsBuyFee + rewardsBuyFee + liquidityBuyFee;\\n        require(totalBuyFees <= 210, \\\"Must keep fees at 21% or less\\\");\\n    }\\n    \\n    function updateSellFees(uint256 _operationsFee, uint256 _rewardsFee, uint256 _liquidityFee) external onlyOwner {\\n        operationsSellFee = _operationsFee;\\n        rewardsSellFee = _rewardsFee;\\n        liquiditySellFee = _liquidityFee;\\n        totalSellFees = operationsSellFee + rewardsSellFee + liquiditySellFee;\\n    }\\n\\n    function airdropHolders(address[] memory wallets, uint256[] memory amountsInTokens) external onlyOwner {\\n        require(wallets.length == amountsInTokens.length, \\\"arrays must be the same length\\\");\\n        require(wallets.length < 200, \\\"Can only airdrop 200 wallets per txn due to gas limits\\\"); // allows for airdrop + launch at the same exact time, reducing delays and reducing sniper input.\\n        for(uint256 i = 0; i < wallets.length; i++){\\n            address wallet = wallets[i];\\n            uint256 amount = amountsInTokens[i]*1e18;\\n            _transfer(msg.sender, wallet, amount);\\n        }\\n    }\\n\\n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\n        emit ExcludedMaxTransactionAmount(updAds, isEx);\\n    }\\n\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        _isExcludedFromFees[account] = excluded;\\n\\n        emit ExcludeFromFees(account, excluded);\\n    }\\n\\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external onlyOwner {\\n        for(uint256 i = 0; i < accounts.length; i++) {\\n            _isExcludedFromFees[accounts[i]] = excluded;\\n        }\\n\\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\n        require(pair != uniswapV2Pair, \\\"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\n\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        automatedMarketMakerPairs[pair] = value;\\n\\n        excludeFromMaxTransaction(pair, value);\\n        \\n        if(value) {\\n            dividendTracker.excludeFromDividends(pair);\\n        }\\n\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function updateOperationsWallet(address newOperationsWallet) external onlyOwner {\\n        require(newOperationsWallet != address(0), \\\"may not set to 0 address\\\");\\n        excludeFromFees(newOperationsWallet, true);\\n        emit OperationsWalletUpdated(newOperationsWallet, operationsWallet);\\n        operationsWallet = newOperationsWallet;\\n    }\\n\\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\\n        require(newValue != gasForProcessing, \\\"Cannot update gasForProcessing to same value\\\");\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\n        gasForProcessing = newValue;\\n    }\\n\\n    function updateSwapThreshold(uint256 amount) external onlyOwner {\\n        swapTokensAtAmount = amount; \\n    }\\n\\n\\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\\n        dividendTracker.updateClaimWait(claimWait);\\n    }\\n\\n    function getClaimWait() external view returns(uint256) {\\n        return dividendTracker.claimWait();\\n    }\\n\\n    function getTotalDividendsDistributed(address rewardToken) external view returns (uint256) {\\n        return dividendTracker.totalDividendsDistributed(rewardToken);\\n    }\\n\\n    function isExcludedFromFees(address account) external view returns(bool) {\\n        return _isExcludedFromFees[account];\\n    }\\n\\n    function withdrawableDividendOf(address account, address rewardToken) external view returns(uint256) {\\n    \\treturn dividendTracker.withdrawableDividendOf(account, rewardToken);\\n  \\t}\\n\\n\\tfunction dividendTokenBalanceOf(address account) external view returns (uint256) {\\n\\t\\treturn dividendTracker.holderBalance(account);\\n\\t}\\n\\n    function getAccountDividendsInfo(address account, address rewardToken)\\n        external view returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256) {\\n        return dividendTracker.getAccount(account, rewardToken);\\n    }\\n\\n\\tfunction getAccountDividendsInfoAtIndex(uint256 index, address rewardToken)\\n        external view returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256) {\\n    \\treturn dividendTracker.getAccountAtIndex(index, rewardToken);\\n    }\\n\\n\\tfunction processDividendTracker(uint256 gas) external {\\n\\t\\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\\n\\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\\n    }\\n\\n    function claim() external {\\n\\t\\tdividendTracker.processAccount(payable(msg.sender), false);\\n    }\\n\\n    function getLastProcessedIndex() external view returns(uint256) {\\n    \\treturn dividendTracker.getLastProcessedIndex();\\n    }\\n\\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\\n        return dividendTracker.getNumberOfTokenHolders();\\n    }\\n    \\n    function getNumberOfDividends() external view returns(uint256) {\\n        return dividendTracker.totalBalance();\\n    }\\n    \\n    // remove limits after token is stable\\n    function removeLimits() external onlyOwner returns (bool){\\n        limitsInEffect = false;\\n        transferDelayEnabled = false;\\n        return true;\\n    }\\n\\n    function setBlacklist(address[] memory blacklisted_, bool status_) public onlyOwner {\\n        if (status_ == true) {\\n            require(block.number < tradingActiveBlock + 300, \\\"too late to blacklist\\\");\\n        }\\n        for (uint i = 0; i < blacklisted_.length; i++) {\\n            if (blacklisted_[i] != address(uniswapV2Pair) && blacklisted_[i] != address(uniswapV2Router)) {\\n                _isblacklisted[blacklisted_[i]] = status_;\\n            }\\n        }\\n    }\\n\\n    \\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(!_isblacklisted[to] && !_isblacklisted[from],\\\"unable to trade\\\");\\n\\n         if(amount == 0) {\\n            super._transfer(from, to, 0);\\n            return;\\n        }\\n        \\n        if(!tradingActive){\\n            require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \\\"Trading is not active yet.\\\");\\n        }\\n        \\n        if(limitsInEffect){\\n            if (\\n                from != owner() &&\\n                to != owner() &&\\n                to != address(0) &&\\n                to != address(0xdead) &&\\n                !swapping\\n            ){\\n\\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \\n                if (transferDelayEnabled){\\n                    if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)){\\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\");\\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\\n                    }\\n                }\\n                \\n                //when buy\\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\\n                    require(amount <= maxTransactionAmount, \\\"Buy transfer amount exceeds the maxTransactionAmount.\\\");\\n                    require(amount + balanceOf(to) <= maxWallet, \\\"Unable to exceed Max Wallet\\\");\\n                } \\n                //when sell\\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\\n                    require(amount <= maxTransactionAmount, \\\"Sell transfer amount exceeds the maxTransactionAmount.\\\");\\n                }\\n                else if(!_isExcludedMaxTransactionAmount[to]) {\\n                    require(amount + balanceOf(to) <= maxWallet, \\\"Unable to exceed Max Wallet\\\");\\n                }\\n            }\\n        }\\n\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\n        \\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\n\\n        if( \\n            canSwap &&\\n            swapEnabled &&\\n            !swapping &&\\n            !automatedMarketMakerPairs[from] &&\\n            !_isExcludedFromFees[from] &&\\n            !_isExcludedFromFees[to]\\n        ) {\\n            swapping = true;\\n            swapBack();\\n            swapping = false;\\n        }\\n\\n        bool takeFee = !swapping;\\n\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n            takeFee = false;\\n        }\\n        \\n        uint256 fees = 0;\\n        \\n        // no taxes on transfers (non buys/sells)\\n        if(takeFee){\\n            if(tradingActiveBlock >= block.number && (automatedMarketMakerPairs[to] || automatedMarketMakerPairs[from])){\\n                fees = amount.mul(99).div(100);\\n                tokensForOperations += fees;\\n            }\\n\\n            // on sell\\n            else if (automatedMarketMakerPairs[to] && totalSellFees > 0){\\n                fees = amount.mul(totalSellFees).div(feeDivisor);\\n                tokensForRewards += fees * rewardsSellFee / totalSellFees;\\n                tokensForLiquidity += fees * liquiditySellFee / totalSellFees;\\n                tokensForOperations += fees * operationsSellFee / totalSellFees;\\n            }\\n            \\n            // on buy\\n            else if(automatedMarketMakerPairs[from] && totalBuyFees > 0) {\\n        \\t    fees = amount.mul(totalBuyFees).div(feeDivisor);\\n        \\t    tokensForRewards += fees * rewardsBuyFee / totalBuyFees;\\n                tokensForLiquidity += fees * liquidityBuyFee / totalBuyFees;\\n                tokensForOperations += fees * operationsBuyFee / totalBuyFees;\\n            }\\n\\n            if(fees > 0){    \\n                super._transfer(from, address(this), fees);\\n            }\\n        \\t\\n        \\tamount -= fees;\\n        }\\n\\n        super._transfer(from, to, amount);\\n\\n        dividendTracker.setBalance(payable(from), balanceOf(from));\\n        dividendTracker.setBalance(payable(to), balanceOf(to));\\n\\n        if(!swapping && gasForProcessing > 0) {\\n\\t    \\tuint256 gas = gasForProcessing;\\n\\n\\t    \\ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\n\\t    \\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\\n\\t    \\t}\\n\\t    \\tcatch {}\\n        }\\n    }\\n    \\n    function swapTokensForEth(uint256 tokenAmount) private {\\n\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        \\n    }\\n    \\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(0x1d06171bF9284e24BB5426898cCF5Dc474d2c65b),\\n            block.timestamp\\n        );\\n\\n    }\\n    \\n    function swapBack() private {\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForOperations + tokensForRewards;\\n        \\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\n        \\n        // Halve the amount of liquidity tokens\\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\\n        \\n        uint256 initialETHBalance = address(this).balance;\\n\\n        swapTokensForEth(amountToSwapForETH); \\n        \\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\\n        \\n        uint256 ethForOperations = ethBalance.mul(tokensForOperations).div(totalTokensToSwap - (tokensForLiquidity/2));\\n        uint256 ethForRewards = ethBalance.mul(tokensForRewards).div(totalTokensToSwap - (tokensForLiquidity/2));\\n        \\n        uint256 ethForLiquidity = ethBalance - ethForOperations - ethForRewards;\\n        \\n        tokensForLiquidity = 0;\\n        tokensForOperations = 0;\\n        tokensForRewards = 0;\\n        \\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\\n        }\\n        \\n        // call twice to force buy of both reward tokens.\\n        (bool success,) = address(dividendTracker).call{value: ethForRewards}(\\\"\\\");\\n\\n        (success,) = address(operationsWallet).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    function withdrawStuckEth() external onlyOwner {\\n        (bool success,) = address(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"failed to withdraw\\\");\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CanceledLpWithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"DevWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludedMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"OperationsWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RequestedLPWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrewLPForMigration\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInTokens\",\"type\":\"uint256[]\"}],\"name\":\"airdropHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBuyPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPercToWithDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWithdrawRequestDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWithdrawRequestPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWithdrawRequestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"blacklisted_\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperationsWallet\",\"type\":\"address\"}],\"name\":\"updateOperationsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operationsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HydraPrinter", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}