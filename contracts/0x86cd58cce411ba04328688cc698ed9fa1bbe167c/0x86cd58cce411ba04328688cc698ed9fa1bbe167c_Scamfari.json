{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Scamfari.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Scamfari is OwnableUpgradeable {\\n    modifier onlyInvestigator() {\\n        require(investigators[_msgSender()], \\\"Caller is not an investigator\\\");\\n        _;\\n    }\\n\\n    /// Initializes the contract\\n    function initialize() public initializer {\\n        __Ownable_init();\\n    }\\n\\n    struct Configuration {\\n        address reward_token;\\n        uint256 reward_amount;\\n    }\\n\\n    enum Network {\\n        NEAR,\\n        Aurora,\\n        Solana,\\n        Ethereum,\\n        BNBChain,\\n        Bitcoin,\\n        Polygon,\\n        OKTC,\\n        Tron,\\n        Linea,\\n        Arbitrum,\\n        Optimism,\\n        Avalanche,\\n        Cronos\\n    }\\n\\n    enum Category {\\n        SocialMediaScammer,\\n        FraudulentWebsite,\\n        ScamProject,\\n        TerroristFinancing,\\n        FinancialFraud,\\n        RugPull,\\n        PumpAndDumpSchemes,\\n        PonziSchemes,\\n        Honeypots,\\n        MoneyLaundering,\\n        TradeBasedLaundering,\\n        MixingServices,\\n        Crime,\\n        Counterfeiting,\\n        OrganizedCrime,\\n        GangOperations,\\n        MafiaActivities,\\n        CyberCrime,\\n        APTGroup,\\n        PhishingAttacks,\\n        HackingTool,\\n        Hackers,\\n        DataBreaches,\\n        Drug,\\n        Trafficking,\\n        Distribution,\\n        Manufacturing,\\n        WeaponsTrade,\\n        HumanTrafficking,\\n        SocialScam,\\n        Blackmail,\\n        InvestmentScam,\\n        LotteryScam,\\n        DataTheft,\\n        NFTScam,\\n        IllegalActivity,\\n        TerroristFinance,\\n        Sanction,\\n        DarknetMarkets,\\n        WarDonations // NOTE: update getCategoryRewards() if you add a new category\\n    }\\n\\n    enum ReportStatus {\\n        Pending,\\n        Accepted,\\n        Rejected,\\n        Claimed\\n    }\\n\\n    struct Report {\\n        uint id;\\n        address reporter;\\n        Network network;\\n        Category category;\\n        string addr;\\n        string url;\\n        ReportStatus status;\\n        string reject_reason;\\n        string[] proof;\\n        string description;\\n        string country;\\n    }\\n\\n    enum ReporterStatus {\\n        None,\\n        Blocked,\\n        Active\\n    }\\n\\n    struct Reporter {\\n        uint[] reports;\\n        uint256 reward;\\n        ReporterStatus status;\\n        string username;\\n        uint accepted_reports;\\n    }\\n\\n    Configuration public configuration;\\n    mapping(address => bool) private investigators;\\n    mapping(uint => Report) private reports;\\n    uint public report_count;\\n\\n    uint private constant TOP_REPORTER_COUNT = 10;\\n    struct TopReporter {\\n        address reporter;\\n        uint accepted_reports;\\n    }\\n\\n    mapping(address => Reporter) private reporters;\\n    mapping(string => bool) private reported_address;\\n\\n    event ConfigurationUpdated(address reward_token, uint256 reward_amount);\\n\\n    /**\\n     * @param reward_token_ The address of the reward token contract\\n     * @param reward_amount_ The amount of reward tokens to give to reporters\\n     * @dev Throws if called by any account other than the contract owner\\n     */\\n    function updateConfiguration(\\n        address reward_token_,\\n        uint256 reward_amount_\\n    ) public onlyOwner {\\n        configuration.reward_token = reward_token_;\\n        configuration.reward_amount = reward_amount_;\\n\\n        emit ConfigurationUpdated(reward_token_, reward_amount_);\\n    }\\n\\n    event ReportCreated(uint indexed id, address reporter, string addr);\\n\\n    /**\\n     * @param network_ The network (blockchain) of the report\\n     * @param category_ The category of the report\\n     * @param addr_ The address of the scammer\\n     * @param url_ The URL associated with the illicit activity\\n     * @param proof_ The proof of the illicit activity (e.g. links to screenshots)\\n     * @dev Throws if the reward token is not set\\n     * @dev Throws if the reward amount is not set\\n     * @dev Throws if the reporter is blocked\\n     */\\n    function createReport(\\n        Network network_,\\n        Category category_,\\n        string memory addr_,\\n        string memory url_,\\n        string[] memory proof_,\\n        string memory description_,\\n        string memory country_\\n    ) public {\\n        require(\\n            configuration.reward_token != address(0),\\n            \\\"Reward token not set\\\"\\n        );\\n        require(configuration.reward_amount > 0, \\\"Reward amount not set\\\");\\n\\n        require(\\n            reporters[_msgSender()].status != ReporterStatus.Blocked,\\n            \\\"Reporter is blocked\\\"\\n        );\\n\\n        require(!reported_address[addr_], \\\"Address is already reported\\\");\\n\\n        // Increment report count\\n        report_count += 1;\\n\\n        uint id = report_count;\\n\\n        // Add report ID to reporter's list of reports\\n        reporters[_msgSender()].reports.push(report_count);\\n\\n        // If reporter is new, set status to active\\n        if (reporters[_msgSender()].status == ReporterStatus.None) {\\n            reporters[_msgSender()].status = ReporterStatus.Active;\\n            reporters_count += 1;\\n        }\\n\\n        // Add report record to list of reports\\n        reports[id] = Report({\\n            id: id,\\n            reporter: _msgSender(),\\n            network: network_,\\n            category: category_,\\n            addr: addr_,\\n            url: url_,\\n            status: ReportStatus.Pending,\\n            reject_reason: \\\"\\\",\\n            proof: proof_,\\n            description: description_,\\n            country: country_\\n        });\\n\\n        // Mark address as reported\\n        reported_address[addr_] = true;\\n\\n        emit ReportCreated(id, _msgSender(), addr_);\\n    }\\n\\n    event ReportAccepted(uint indexed id);\\n\\n    /**\\n     * @param id_ The ID of the report to accept\\n     * @dev Throws if called by any account other than an investigator\\n     * @dev Throws if the report does not exist\\n     * @dev Throws if the report is not pending\\n     */\\n    function accept(uint id_) public onlyInvestigator {\\n        require(reports[id_].id == id_, \\\"Report does not exist\\\");\\n        require(\\n            reports[id_].status == ReportStatus.Pending,\\n            \\\"Report is not pending\\\"\\n        );\\n\\n        // Set report status to Accepted\\n        reports[id_].status = ReportStatus.Accepted;\\n\\n        // Get reward amount for the category, if category is not set, use default reward amount\\n        uint256 reward_amount = category_rewards[reports[id_].category];\\n        if (reward_amount == 0) {\\n            reward_amount = configuration.reward_amount;\\n        }\\n\\n        // Add the reward amount to the reporter's balance\\n        reporters[reports[id_].reporter].reward += reward_amount;\\n        reporters[reports[id_].reporter].accepted_reports += 1;\\n\\n        uint accepted_reports = reporters[reports[id_].reporter]\\n            .accepted_reports;\\n\\n        updateTopReporters(reports[id_].reporter, accepted_reports);\\n\\n        accepted_reports_count += 1;\\n\\n        emit ReportAccepted(id_);\\n    }\\n\\n    /**\\n     * @param reporter The address of the reporter that should be checked for the top list\\n     * @param accepted_reports The number of accepted reports of the reporter\\n     **/\\n    function updateTopReporters(\\n        address reporter,\\n        uint accepted_reports\\n    ) private {\\n        // Be the first to make the list\\n        if (top_reporters.length == 0) {\\n            top_reporters.push(\\n                TopReporter({\\n                    reporter: reporter,\\n                    accepted_reports: accepted_reports\\n                })\\n            );\\n            return;\\n        }\\n\\n        // Check whether the reporter belongs to the list of top men\\n        uint threshold = top_reporters[top_reporters.length - 1]\\n            .accepted_reports;\\n\\n        // The barrier of entry is zero if the list is not full yet\\n        if (top_reporters.length < TOP_REPORTER_COUNT) {\\n            threshold = 0;\\n        }\\n\\n        if (accepted_reports > threshold) {\\n            // Update the new value of accepted reports for the reporter\\n            bool found = false;\\n            uint pos = 0;\\n            for (uint i = 0; i < top_reporters.length; i++) {\\n                pos = i;\\n                if (top_reporters[i].reporter == reporter) {\\n                    top_reporters[i].accepted_reports = accepted_reports;\\n                    found = true;\\n                    break;\\n                }\\n            }\\n\\n            // It seems that our guy has pushed someone else off the chart\\n            if (!found) {\\n                // Another one bites the dust\\n                if (top_reporters.length == TOP_REPORTER_COUNT) {\\n                    top_reporters.pop();\\n                }\\n\\n                // There's a new contender in town\\n                top_reporters.push(\\n                    TopReporter({\\n                        reporter: reporter,\\n                        accepted_reports: accepted_reports\\n                    })\\n                );\\n            }\\n\\n            // Move the reporter up the chart until it reaches its rightful place\\n            for (uint i = pos; i > 0; i--) {\\n                if (\\n                    top_reporters[i].accepted_reports >\\n                    top_reporters[i - 1].accepted_reports\\n                ) {\\n                    TopReporter memory temp = top_reporters[i - 1];\\n                    top_reporters[i - 1] = top_reporters[i];\\n                    top_reporters[i] = temp;\\n                } else {\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    event ReportRejected(uint indexed id);\\n\\n    /**\\n     * @param id_ The ID of the report to reject\\n     * @param reason The reason for rejecting the report\\n     * @dev Throws if called by any account other than an investigator\\n     * @dev Throws if the report does not exist\\n     * @dev Throws if the report is not pending\\n     */\\n    function reject(uint id_, string memory reason) public onlyInvestigator {\\n        require(reports[id_].id == id_, \\\"Report does not exist\\\");\\n        require(\\n            reports[id_].status == ReportStatus.Pending,\\n            \\\"Report is not pending\\\"\\n        );\\n\\n        // Set report status to Rejected\\n        reports[id_].status = ReportStatus.Rejected;\\n\\n        // Set reject reason\\n        reports[id_].reject_reason = reason;\\n\\n        // Make address reportable again\\n        reported_address[reports[id_].addr] = false;\\n\\n        emit ReportRejected(id_);\\n    }\\n\\n    /**\\n     * @param id_ The ID of the report to get\\n     * @return report The report\\n     */\\n    function getReport(uint id_) public view returns (Report memory) {\\n        return reports[id_];\\n    }\\n\\n    /**\\n     * @param addr_ The address of the reporter\\n     * @param skip The number of reports to skip\\n     * @param take The number of reports to take\\n     * @return result The list of reports\\n     */\\n    function getReportsByReporter(\\n        address addr_,\\n        uint skip,\\n        uint take\\n    ) public view returns (Report[] memory) {\\n        uint[] memory report_ids = reporters[addr_].reports;\\n        uint total_count = report_ids.length;\\n\\n        if (total_count == 0) {\\n            return new Report[](0);\\n        }\\n\\n        uint count = take;\\n        if (count > total_count - skip) {\\n            count = total_count - skip;\\n        }\\n\\n        Report[] memory result = new Report[](count);\\n\\n        for (uint i = 0; i < count; i++) {\\n            result[i] = reports[report_ids[skip + i]];\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @param skip The number of reports to skip\\n     * @param take The number of reports to take\\n     * @return result The list of reports\\n     */\\n    function getReports(\\n        uint skip,\\n        uint take\\n    ) public view returns (Report[] memory) {\\n        uint total_count = report_count;\\n\\n        if (total_count == 0) {\\n            return new Report[](0);\\n        }\\n\\n        uint count = take;\\n        if (count > total_count - skip) {\\n            count = total_count - skip;\\n        }\\n\\n        Report[] memory result = new Report[](count);\\n\\n        for (uint i = 0; i < count; i++) {\\n            result[i] = reports[skip + i + 1];\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @return status_ Reporter status\\n     * @return reward_ Reporter reward balance\\n     * @return report_count_ Number of reports submitted by the reporter\\n     * @return is_investigator_ Whether the reporter is an investigator\\n     * @return username_ Reporter username\\n     */\\n    function getMyStatus()\\n        public\\n        view\\n        returns (\\n            ReporterStatus status_,\\n            uint256 reward_,\\n            uint report_count_,\\n            bool is_investigator_,\\n            string memory username_\\n        )\\n    {\\n        Reporter memory reporter = reporters[_msgSender()];\\n        return (\\n            reporter.status,\\n            reporter.reward,\\n            reporter.reports.length,\\n            investigators[_msgSender()],\\n            reporter.username\\n        );\\n    }\\n\\n    event RewardClaimed(address indexed reporter, uint256 amount);\\n\\n    /**\\n     * @param amount_ The amount of reward tokens to claim\\n     * @dev Throws if the reporter does not have enough reward balance\\n     * @dev Throws if the transfer fails\\n     */\\n    function claim(uint256 amount_) public {\\n        require(\\n            reporters[_msgSender()].reward >= amount_,\\n            \\\"Insufficient balance\\\"\\n        );\\n        require(\\n            IERC20(configuration.reward_token).transfer(_msgSender(), amount_),\\n            \\\"Transfer failed\\\"\\n        );\\n        require(\\n            reporters[_msgSender()].status == ReporterStatus.Active,\\n            \\\"Reporter is not active\\\"\\n        );\\n\\n        checkDailyLimit(amount_);\\n\\n        reporters[_msgSender()].reward -= amount_;\\n\\n        applyDailyLimit(amount_);\\n\\n        emit RewardClaimed(_msgSender(), amount_);\\n    }\\n\\n    event ReporterBlocked(address indexed reporter);\\n\\n    /**\\n     * @param addr_ The address of the reporter to block\\n     * @dev Throws if called by any account other than the contract owner\\n     * @dev Throws if the reporter is not active\\n     */\\n    function blockReporter(address addr_) public onlyOwner {\\n        require(\\n            reporters[addr_].status == ReporterStatus.Active,\\n            \\\"Reporter is not active\\\"\\n        );\\n\\n        reporters[addr_].status = ReporterStatus.Blocked;\\n\\n        emit ReporterBlocked(addr_);\\n    }\\n\\n    event ReporterUnblocked(address indexed reporter);\\n\\n    /**\\n     * @param addr_ The address of the reporter to unblock\\n     * @dev Throws if called by any account other than the contract owner\\n     * @dev Throws if the reporter is not blocked\\n     */\\n    function unblockReporter(address addr_) public onlyOwner {\\n        require(\\n            reporters[addr_].status == ReporterStatus.Blocked,\\n            \\\"Reporter is not blocked\\\"\\n        );\\n\\n        reporters[addr_].status = ReporterStatus.Active;\\n\\n        emit ReporterUnblocked(addr_);\\n    }\\n\\n    event InvestigatorAdded(address indexed investigator);\\n\\n    /**\\n     * @param addr_ The address of the investigator to add\\n     */\\n    function addInvestigator(address addr_) public onlyOwner {\\n        require(!investigators[addr_], \\\"Account is already an investigator\\\");\\n\\n        investigators[addr_] = true;\\n\\n        emit InvestigatorAdded(addr_);\\n    }\\n\\n    event InvestigatorRemoved(address indexed investigator);\\n\\n    /**\\n     * @param addr_ The address of the investigator to remove\\n     */\\n    function removeInvestigator(address addr_) public onlyOwner {\\n        require(investigators[addr_], \\\"Account is not an investigator\\\");\\n\\n        investigators[addr_] = false;\\n\\n        emit InvestigatorRemoved(addr_);\\n    }\\n\\n    /**\\n     * @param addr_ The address to check\\n     * @return result Whether the address is already reported\\n     */\\n    function checkAddress(string memory addr_) public view returns (bool) {\\n        return reported_address[addr_];\\n    }\\n\\n    event ReporterProfileUpdated(address indexed reporter, string username);\\n\\n    /**\\n     * @param username_ The username to set\\n     */\\n    function setReporterProfile(string memory username_) public {\\n        require(\\n            reporters[_msgSender()].status != ReporterStatus.Blocked,\\n            \\\"Reporter is blocked\\\"\\n        );\\n\\n        // If reporter is new, set status to active\\n        if (reporters[_msgSender()].status == ReporterStatus.None) {\\n            reporters[_msgSender()].status = ReporterStatus.Active;\\n        }\\n\\n        reporters[_msgSender()].username = username_;\\n\\n        emit ReporterProfileUpdated(_msgSender(), username_);\\n    }\\n\\n    struct TopReporterRecord {\\n        address addr;\\n        string username;\\n        uint score;\\n    }\\n    TopReporter[] private top_reporters;\\n\\n    /**\\n     * @return result The list of top reporters\\n     */\\n    function getTopReporters()\\n        public\\n        view\\n        returns (TopReporterRecord[] memory)\\n    {\\n        uint count = top_reporters.length;\\n\\n        if (count == 0) {\\n            return new TopReporterRecord[](0);\\n        }\\n\\n        TopReporterRecord[] memory result = new TopReporterRecord[](count);\\n\\n        for (uint i = 0; i < count; i++) {\\n            result[i] = TopReporterRecord({\\n                addr: top_reporters[i].reporter,\\n                username: reporters[top_reporters[i].reporter].username,\\n                score: top_reporters[i].accepted_reports\\n            });\\n        }\\n\\n        return result;\\n    }\\n\\n    uint public reporters_count;\\n    uint public accepted_reports_count;\\n\\n    /**\\n     * @return result The last 10 reports\\n     */\\n    function getLastReports() public view returns (Report[] memory) {\\n        uint count = 10;\\n\\n        if (report_count == 0) {\\n            return new Report[](0);\\n        }\\n\\n        if (report_count < 10) {\\n            count = report_count;\\n        }\\n\\n        Report[] memory result = new Report[](count);\\n\\n        for (uint i = 0; i < count; i++) {\\n            result[i] = reports[report_count - i];\\n        }\\n\\n        return result;\\n    }\\n\\n    mapping(Category => uint256) public category_rewards;\\n\\n    /**\\n     * @param category_ The category to get the reward for\\n     * @param reward_amount_ The reward amount\\n     * @dev Throws if called by any account other than the contract owner\\n     */\\n    function setCategoryReward(\\n        Category category_,\\n        uint256 reward_amount_\\n    ) public onlyOwner {\\n        category_rewards[category_] = reward_amount_;\\n    }\\n\\n    uint256 private _daily_claim_limit; // 0 = no limit\\n\\n    struct DailyClaim {\\n        uint256 claimed_today; // amount claimed today\\n        uint256 today_started; // timestamp of \\\"today's\\\" start\\n    }\\n\\n    mapping(address => DailyClaim) private _daily_claims;\\n\\n    event DailyClaimLimitUpdated(uint256 daily_claim_limit_);\\n\\n    /**\\n     * @param daily_claim_limit The daily claim limit\\n     * @dev Throws if called by any account other than the contract owner\\n     */\\n    function setDailyClaimLimit(uint256 daily_claim_limit) public onlyOwner {\\n        _daily_claim_limit = daily_claim_limit;\\n        emit DailyClaimLimitUpdated(daily_claim_limit);\\n    }\\n\\n    /**\\n     * @return claimed_today The amount of tokens that were claimed today\\n     * @return today_started The timestamp of the today's start\\n     * @return daily_limit The daily claim limit\\n     */\\n    function getMyDailyLimit()\\n        public\\n        view\\n        returns (uint256 claimed_today, uint today_started, uint256 daily_limit)\\n    {\\n        DailyClaim storage daily_claim = _daily_claims[_msgSender()];\\n        if (block.timestamp - daily_claim.today_started > 24 hours) {\\n            // Reset daily claim amount if the timestamp has expired\\n            return (0, 0, _daily_claim_limit);\\n        } else {\\n            return (\\n                daily_claim.claimed_today,\\n                daily_claim.today_started,\\n                _daily_claim_limit\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @param amount_ The amount of tokens to check\\n     * @dev Throws if the amount exceeds the daily claim limit\\n     */\\n    function checkDailyLimit(uint256 amount_) internal {\\n        if (_daily_claim_limit == 0) {\\n            return;\\n        }\\n\\n        (uint256 claimed_today, , ) = getMyDailyLimit();\\n        require(\\n            claimed_today + amount_ <= _daily_claim_limit,\\n            \\\"Daily limit exceeded\\\"\\n        );\\n\\n        DailyClaim storage daily_claim = _daily_claims[_msgSender()];\\n        if (block.timestamp - daily_claim.today_started > 24 hours) {\\n            daily_claim.today_started = block.timestamp;\\n            daily_claim.claimed_today = 0;\\n        }\\n    }\\n\\n    /**\\n     * @param amount_ The amount of tokens to apply\\n     * @dev Applies the daily claim limit\\n     */\\n    function applyDailyLimit(uint256 amount_) internal {\\n        if (_daily_claim_limit == 0) {\\n            return;\\n        }\\n\\n        DailyClaim storage daily_claim = _daily_claims[_msgSender()];\\n        daily_claim.today_started = block.timestamp;\\n        if (daily_claim.claimed_today == 0) {\\n            daily_claim.claimed_today = amount_;\\n        } else {\\n            daily_claim.claimed_today += amount_;\\n        }\\n    }\\n\\n    struct CategoryReward {\\n        Category category;\\n        uint256 reward_amount;\\n    }\\n\\n    event CategoriesRewardsUpdated(CategoryReward[] categories_reward_);\\n\\n    /**\\n     * @param categories_reward_ The list of categories and reward amounts\\n     * @dev Throws if called by any account other than the contract owner\\n     */\\n    function setCategoriesRewards(CategoryReward[] memory categories_reward_)\\n        public\\n        onlyOwner\\n    {\\n        for (uint i = 0; i < categories_reward_.length; i++) {\\n            category_rewards[categories_reward_[i].category] = categories_reward_[i].reward_amount;\\n        }\\n\\n        emit CategoriesRewardsUpdated(categories_reward_);\\n    }\\n\\n    function getCategoryRewards()\\n        public\\n        view\\n        returns (CategoryReward[] memory)\\n    {\\n        CategoryReward[] memory result = new CategoryReward[](\\n            uint(Category.WarDonations) + 1\\n        );\\n\\n        for (uint i = 0; i < result.length; i++) {\\n            result[i] = CategoryReward({\\n                category: Category(i),\\n                reward_amount: category_rewards[Category(i)]\\n            });\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Scamfari.CategoryReward[]\",\"name\":\"categories_reward_\",\"type\":\"tuple[]\"}],\"name\":\"CategoriesRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"name\":\"ConfigurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daily_claim_limit_\",\"type\":\"uint256\"}],\"name\":\"DailyClaimLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investigator\",\"type\":\"address\"}],\"name\":\"InvestigatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investigator\",\"type\":\"address\"}],\"name\":\"InvestigatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ReportAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"ReportCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ReportRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"ReporterProfileUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterUnblocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"accept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accepted_reports_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"addInvestigator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"blockReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Scamfari.Category\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"category_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"addr_\",\"type\":\"string\"}],\"name\":\"checkAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Scamfari.Network\",\"name\":\"network_\",\"type\":\"uint8\"},{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category_\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"addr_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url_\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"proof_\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country_\",\"type\":\"string\"}],\"name\":\"createReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCategoryRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Scamfari.CategoryReward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReports\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"enum Scamfari.Network\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum Scamfari.ReportStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reject_reason\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"proof\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"}],\"internalType\":\"struct Scamfari.Report[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyDailyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed_today\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"today_started\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily_limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyStatus\",\"outputs\":[{\"internalType\":\"enum Scamfari.ReporterStatus\",\"name\":\"status_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"report_count_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_investigator_\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"username_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"getReport\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"enum Scamfari.Network\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum Scamfari.ReportStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reject_reason\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"proof\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"}],\"internalType\":\"struct Scamfari.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"take\",\"type\":\"uint256\"}],\"name\":\"getReports\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"enum Scamfari.Network\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum Scamfari.ReportStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reject_reason\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"proof\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"}],\"internalType\":\"struct Scamfari.Report[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"skip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"take\",\"type\":\"uint256\"}],\"name\":\"getReportsByReporter\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"enum Scamfari.Network\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"enum Scamfari.ReportStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reject_reason\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"proof\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"}],\"internalType\":\"struct Scamfari.Report[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopReporters\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"internalType\":\"struct Scamfari.TopReporterRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"reject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"removeInvestigator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"report_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporters_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Scamfari.CategoryReward[]\",\"name\":\"categories_reward_\",\"type\":\"tuple[]\"}],\"name\":\"setCategoriesRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Scamfari.Category\",\"name\":\"category_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount_\",\"type\":\"uint256\"}],\"name\":\"setCategoryReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daily_claim_limit\",\"type\":\"uint256\"}],\"name\":\"setDailyClaimLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"username_\",\"type\":\"string\"}],\"name\":\"setReporterProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_\",\"type\":\"address\"}],\"name\":\"unblockReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward_amount_\",\"type\":\"uint256\"}],\"name\":\"updateConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Scamfari", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}