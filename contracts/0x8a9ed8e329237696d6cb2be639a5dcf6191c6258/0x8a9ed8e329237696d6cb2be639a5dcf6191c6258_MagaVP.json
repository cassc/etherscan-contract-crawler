{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function withdrawnDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function accumulativeDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n    function dividendOf(address _owner) external view returns (uint256);\r\n\r\n    function distributeDividends() external payable;\r\n\r\n    function withdrawDividend() external;\r\n\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract DividendPayingToken is\r\n    ERC20,\r\n    DividendPayingTokenInterface,\r\n    DividendPayingTokenOptionalInterface\r\n{\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 internal constant magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol)\r\n        ERC20(_name, _symbol)\r\n    {}\r\n\r\n    receive() external payable {\r\n        distributeDividends();\r\n    }\r\n\r\n    function distributeDividends() public payable override {\r\n        require(totalSupply() > 0);\r\n\r\n        if (msg.value > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (msg.value).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(\r\n                msg.value\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            (bool success, ) = user.call{\r\n                value: _withdrawableDividend,\r\n                gas: 3000\r\n            }(\"\");\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) public view override returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256Safe()\r\n                .add(magnifiedDividendCorrections[_owner])\r\n                .toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual override {\r\n        require(false);\r\n\r\n        int256 _magCorrection = magnifiedDividendPerShare\r\n            .mul(value)\r\n            .toInt256Safe();\r\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\r\n            .add(_magCorrection);\r\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\r\n            _magCorrection\r\n        );\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if (newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if (newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITrueDefiSwap {\r\n    function triggeredTokenSent(uint256, address) external;\r\n}\r\n\r\ncontract MagaVP is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    bool private swapping;\r\n    bool public tradingEnabled = false;\r\n\r\n    uint256 public sellAmount = 1;\r\n    uint256 public buyAmount = 1;\r\n\r\n    uint256 private totalSellFees;\r\n    uint256 private totalBuyFees;\r\n\r\n    MagaVPDividendTracker public dividendTracker;\r\n\r\n    address payable public marketingWallet;\r\n    address payable public buybackWallet;\r\n\r\n    // Max tx, dividend threshold and tax variables\r\n    uint256 public maxWallet;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public sellRewardsFee;\r\n    uint256 public sellMarketingFees;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public buyMarketingFees;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyRewardsFee;\r\n    uint256 public buyBuyBackFee;\r\n    uint256 public sellBuyBackFee;\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    // gas for processing auto claim dividends \r\n    uint256 public gasForProcessing = 300000;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    //for allowing specific address to trade while trading has not been enabled yet \r\n    mapping(address => bool) private canTransferBeforeTradingIsEnabled;\r\n\r\n    bool public enabledPublicTrading;\r\n    address tefiRouter;\r\n    mapping(address => bool) public whitelistForPublicTrade;    \r\n    \r\n    event updateMarketingWallet(address wallet);\r\n    event updatebuybackWallet(address wallet);\r\n    event EnableSwapAndLiquify(bool enabled);\r\n\r\n    event SetPreSaleWallet(address wallet);\r\n\r\n    event UpdateDividendTracker(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event TradingEnabled();\r\n\r\n    event UpdateFees(\r\n        uint256 sellMarketingFees,\r\n        uint256 sellLiquidityFee,\r\n        uint256 sellRewardsFee,\r\n        uint256 buyMarketingFees,\r\n        uint256 buyLiquidityFee,\r\n        uint256 buyRewardsFee,\r\n        uint256 buyBuyBackFee,\r\n        uint256 sellBuyBackFee\r\n    );\r\n\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event GasForProcessingUpdated(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SendDividends(uint256 amount, uint256 opAmount, bool success);\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    event UpdatePayoutToken(address token);\r\n\r\n    constructor() ERC20(\"Maga VP\", \"$MVP\") {\r\n        marketingWallet = payable(0x2b486FE86f88EA5a29Ab9c53dD70Da38b043B137);\r\n        buybackWallet = payable(0xD53cF51AF3280BEaa3eb95BE6Ba983B6B6982b5c);\r\n        address router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n        buyMarketingFees = 50;\r\n        sellMarketingFees = 50;\r\n        buyLiquidityFee = 25;\r\n        sellLiquidityFee = 25;\r\n        buyRewardsFee = 100;\r\n        sellRewardsFee = 100;\r\n        buyBuyBackFee = 25;\r\n        sellBuyBackFee = 25;\r\n\r\n        totalBuyFees = buyRewardsFee\r\n            .add(buyLiquidityFee)\r\n            .add(buyMarketingFees)\r\n            .add(buyBuyBackFee);\r\n        totalSellFees = sellRewardsFee\r\n            .add(sellLiquidityFee)\r\n            .add(sellMarketingFees)\r\n            .add(sellBuyBackFee);\r\n\r\n        dividendTracker = new MagaVPDividendTracker(\r\n            payable(this),\r\n            router,\r\n            0x576e2BeD8F7b46D34016198911Cdf9886f78bea7,\r\n            \"MagaVPTRACKER\",\r\n            \"MVPTTRACKER\"\r\n        );\r\n\r\n        uniswapV2Router = IUniswapV2Router02(router);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                uniswapV2Router.WETH()\r\n            );\r\n\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n\r\n        // exclude from receiving dividends\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(DEAD);\r\n        dividendTracker.excludedFromDividends(address(0));\r\n        dividendTracker.excludeFromDividends(router);\r\n        dividendTracker.excludeFromDividends(marketingWallet);\r\n        dividendTracker.excludeFromDividends(owner());\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(dividendTracker)] = true;\r\n        _isExcludedFromFees[address(marketingWallet)] = true;\r\n        _isExcludedFromFees[address(buybackWallet)] = true;\r\n        _isExcludedFromFees[msg.sender] = true;\r\n\r\n        uint256 totalTokenSupply = (50_000_000) * (10**18);\r\n        _mint(owner(), totalTokenSupply); // only time internal mint function is ever called is to create supply\r\n        maxWallet = totalTokenSupply / 50; // 2%\r\n        swapTokensAtAmount = totalTokenSupply / 1000; // 0.1%;\r\n        canTransferBeforeTradingIsEnabled[owner()] = true;\r\n        canTransferBeforeTradingIsEnabled[address(this)] = true;\r\n        whitelistForPublicTrade[msg.sender] = true;   \r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isTrading(address _sender, address _recipient)\r\n        internal view\r\n        returns (uint)\r\n    {\r\n        if (automatedMarketMakerPairs[_sender] && _recipient != address(uniswapV2Router)) return 1; // Buy Case\r\n\r\n        if (automatedMarketMakerPairs[_recipient]) return 2; // Sell Case\r\n\r\n        return 0;\r\n    }    \r\n    \r\n    function setWhitelistForPublicTrade(address _addr, bool _flag) external onlyOwner {\r\n        whitelistForPublicTrade[_addr] = _flag;    \r\n    }    \r\n    \r\n    function setPublicTrading() external onlyOwner {\r\n        require(!enabledPublicTrading);        \r\n        enabledPublicTrading = true;    \r\n    }    \r\n    \r\n    function setTrueDefiRouter(address _router) external onlyOwner {\r\n        tefiRouter = _router;\r\n        if (_router != address(0)) {\r\n            whitelistForPublicTrade[_router] = true;\r\n            _isExcludedFromFees[_router] = true;\r\n            dividendTracker.excludeFromDividends(_router);\r\n        }\r\n        tradingEnabled = true;\r\n        emit TradingEnabled();    \r\n    }\r\n    \r\n    // use for pre sale wallet, adds all exclusions to it\r\n    function setPresaleWallet(address wallet) external onlyOwner {\r\n        canTransferBeforeTradingIsEnabled[wallet] = true;\r\n        _isExcludedFromFees[wallet] = true;\r\n        dividendTracker.excludeFromDividends(wallet);\r\n        emit SetPreSaleWallet(wallet);\r\n    }\r\n    \r\n    // set new marketing wallet\r\n    function setMarketingWallet(address wallet) external onlyOwner {\r\n        _isExcludedFromFees[wallet] = true;\r\n        marketingWallet = payable(wallet);\r\n        emit updateMarketingWallet(wallet);\r\n    }\r\n\r\n    //set new treasury wallet\r\n    function setBuybackWallet(address wallet) external onlyOwner {\r\n        _isExcludedFromFees[wallet] = true;\r\n        buybackWallet = payable(wallet);\r\n        emit updatebuybackWallet(wallet);\r\n    }    \r\n    \r\n    // exclude a wallet from fees \r\n    function setExcludeFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    // exclude from dividends (rewards)\r\n    function setExcludeDividends(address account) public onlyOwner {\r\n        dividendTracker.excludeFromDividends(account);\r\n    }\r\n\r\n    // include in dividends \r\n    function setIncludeDividends(address account) public onlyOwner {\r\n        dividendTracker.includeFromDividends(account);\r\n        dividendTracker.setBalance(account, 0);\r\n    }\r\n\r\n    //allow a wallet to trade before trading enabled\r\n    function setCanTransferBefore(address wallet, bool enable)\r\n        external\r\n        onlyOwner\r\n    {\r\n        canTransferBeforeTradingIsEnabled[wallet] = enable;\r\n    }\r\n\r\n    // set max wallet, can not be lower than 0.05% of supply\r\n    function setmaxWallet(uint256 value) external onlyOwner {\r\n        value = value * (10**18);\r\n        require(value >= _totalSupply / 1000, \"max wallet cannot be set to less than 0.1%\");\r\n        maxWallet = value;\r\n    }\r\n\r\n    // rewards threshold\r\n    function setSwapTriggerAmount(uint256 amount) public onlyOwner {\r\n        swapTokensAtAmount = amount * (10**18);\r\n    }\r\n\r\n    function enableSwapAndLiquify(bool enabled) public onlyOwner {\r\n        require(swapAndLiquifyEnabled != enabled);\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit EnableSwapAndLiquify(enabled);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function setAllowCustomTokens(bool allow) public onlyOwner {\r\n        dividendTracker.setAllowCustomTokens(allow);\r\n    }\r\n\r\n    function setAllowAutoReinvest(bool allow) public onlyOwner {\r\n        dividendTracker.setAllowAutoReinvest(allow);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if (value) {\r\n            dividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 200000 && newValue <= 1000000);\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function transferAdmin(address newOwner) public onlyOwner {\r\n        dividendTracker.excludeFromDividends(newOwner);\r\n        _isExcludedFromFees[newOwner] = true;\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    function updateFees(\r\n        uint256 marketingBuy,\r\n        uint256 marketingSell,\r\n        uint256 liquidityBuy,\r\n        uint256 liquiditySell,\r\n        uint256 RewardsBuy,\r\n        uint256 RewardsSell,\r\n        uint256 buybackBuy,\r\n        uint256 buybackSell\r\n    ) public onlyOwner {\r\n        buyMarketingFees = marketingBuy;\r\n        buyLiquidityFee = liquidityBuy;\r\n        buyRewardsFee = RewardsBuy;\r\n        sellMarketingFees = marketingSell;\r\n        sellLiquidityFee = liquiditySell;\r\n        sellRewardsFee = RewardsSell;\r\n        buyBuyBackFee = buybackBuy;\r\n        sellBuyBackFee = buybackSell;\r\n\r\n        totalSellFees = sellRewardsFee\r\n            .add(sellLiquidityFee)\r\n            .add(sellMarketingFees)\r\n            .add(sellBuyBackFee);\r\n\r\n        totalBuyFees = buyRewardsFee\r\n            .add(buyLiquidityFee)\r\n            .add(buyMarketingFees)\r\n            .add(buyBuyBackFee);\r\n\r\n        require(totalSellFees <= 5 && totalBuyFees <= 5, \"total fees cannot exceed 5% sell or buy\");\r\n\r\n        emit UpdateFees(\r\n            sellMarketingFees,\r\n            sellLiquidityFee,\r\n            sellRewardsFee,\r\n            buyMarketingFees,\r\n            buyLiquidityFee,\r\n            buyRewardsFee,\r\n            buyBuyBackFee,\r\n            sellBuyBackFee\r\n        );\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return dividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return dividendTracker.balanceOf(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address account)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return dividendTracker.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return dividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        (\r\n            uint256 iterations,\r\n            uint256 claims,\r\n            uint256 lastProcessedIndex\r\n        ) = dividendTracker.process(gas);\r\n        emit ProcessedDividendTracker(\r\n            iterations,\r\n            claims,\r\n            lastProcessedIndex,\r\n            false,\r\n            gas,\r\n            tx.origin\r\n        );\r\n    }\r\n\r\n    function claim() external {\r\n        dividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return dividendTracker.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return dividendTracker.getNumberOfTokenHolders();\r\n    }\r\n\r\n    function setAutoClaim(bool value) external {\r\n        dividendTracker.setAutoClaim(msg.sender, value);\r\n    }\r\n\r\n    function setReinvest(bool value) external {\r\n        dividendTracker.setReinvest(msg.sender, value);\r\n    }\r\n\r\n    function setDividendsPaused(bool value) external onlyOwner {\r\n        dividendTracker.setDividendsPaused(value);\r\n    }\r\n\r\n    function isExcludedFromAutoClaim(address account)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return dividendTracker.isExcludedFromAutoClaim(account);\r\n    }\r\n\r\n    function isReinvest(address account) external view returns (bool) {\r\n        return dividendTracker.isReinvest(account);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 RewardsFee;\r\n        uint256 marketingFees;\r\n        uint256 liquidityFee;\r\n        uint256 buybackFee;\r\n\r\n        if (!canTransferBeforeTradingIsEnabled[from]) {\r\n            require(tradingEnabled, \"Trading has not yet been enabled\");\r\n        }\r\n        \r\n        if (enabledPublicTrading == false && tefiRouter != address(0)) {\r\n            require(isTrading(from, to) == 0 || whitelistForPublicTrade[from] || whitelistForPublicTrade[to], \"!available trading\");\r\n        }        \r\n        \r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        } \r\n        \r\n        if (to == DEAD) {\r\n            _burn(from, amount);\r\n            return;\r\n        }\r\n\r\n        else if (\r\n            !swapping && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]\r\n        ) {\r\n            bool isSelling = automatedMarketMakerPairs[to];\r\n            bool isBuying = automatedMarketMakerPairs[from];\r\n            \r\n            if (!isBuying && !isSelling) {\r\n                super._transfer(from, to, amount);\r\n                dividendTracker.setBalance(from, balanceOf(from));\r\n                dividendTracker.setBalance(to, balanceOf(to));\r\n\r\n            }\r\n\r\n            else if (isSelling) {\r\n                RewardsFee = sellRewardsFee;\r\n                marketingFees = sellMarketingFees;\r\n                liquidityFee = sellLiquidityFee;\r\n                buybackFee = sellBuyBackFee;\r\n\r\n            } else if (isBuying) {\r\n                RewardsFee = buyRewardsFee;\r\n                marketingFees = buyMarketingFees;\r\n                liquidityFee = buyLiquidityFee;\r\n                buybackFee = buyBuyBackFee;\r\n\r\n                uint256 contractBalanceRecipient = balanceOf(to);\r\n                require(contractBalanceRecipient + amount <= maxWallet,\"Exceeds maximum wallet token amount.\" );\r\n            }\r\n            uint256 totalFees = RewardsFee\r\n                .add(liquidityFee + marketingFees + buybackFee);\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\r\n            if (canSwap && !automatedMarketMakerPairs[from]) {\r\n                swapping = true;\r\n\r\n                if (swapAndLiquifyEnabled && liquidityFee > 0 && totalBuyFees > 0) {\r\n                    uint256 totalBuySell = buyAmount.add(sellAmount);\r\n                    uint256 swapAmountBought = contractTokenBalance\r\n                        .mul(buyAmount)\r\n                        .div(totalBuySell);\r\n                    uint256 swapAmountSold = contractTokenBalance\r\n                        .mul(sellAmount)\r\n                        .div(totalBuySell);\r\n\r\n                    uint256 swapBuyTokens = swapAmountBought\r\n                        .mul(liquidityFee)\r\n                        .div(totalBuyFees);\r\n\r\n                    uint256 swapSellTokens = swapAmountSold\r\n                        .mul(liquidityFee)\r\n                        .div(totalSellFees);\r\n\r\n                    uint256 swapTokens = swapSellTokens.add(swapBuyTokens);\r\n\r\n                    swapAndLiquify(swapTokens);\r\n                }\r\n\r\n                uint256 remainingBalance = balanceOf(address(this));\r\n                swapAndSendDividends(remainingBalance);\r\n                buyAmount = 1;\r\n                sellAmount = 1;\r\n                swapping = false;\r\n            }\r\n\r\n            uint256 fees = amount.mul(totalFees).div(10000);\r\n\r\n            amount = amount.sub(fees);\r\n\r\n            if (isSelling) {\r\n                sellAmount = sellAmount.add(fees);\r\n            } else {\r\n                buyAmount = buyAmount.add(fees);\r\n            }\r\n\r\n            super._transfer(from, address(this), fees);\r\n\r\n            uint256 gas = gasForProcessing;\r\n\r\n            try dividendTracker.process(gas) returns (\r\n                uint256 iterations,\r\n                uint256 claims,\r\n                uint256 lastProcessedIndex\r\n            ) {\r\n                emit ProcessedDividendTracker(\r\n                    iterations,\r\n                    claims,\r\n                    lastProcessedIndex,\r\n                    true,\r\n                    gas,\r\n                    tx.origin\r\n                );\r\n            } catch {}\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n        dividendTracker.setBalance(from, balanceOf(from));\r\n        dividendTracker.setBalance(to, balanceOf(to));\r\n    \r\n        if (from != address(uniswapV2Router) && !automatedMarketMakerPairs[from] && to == tefiRouter) {\r\n            ITrueDefiSwap(tefiRouter).triggeredTokenSent(amount, from);\r\n        }    \r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updatePayoutToken(address token) public onlyOwner {\r\n        dividendTracker.updatePayoutToken(token);\r\n        emit UpdatePayoutToken(token);\r\n    }\r\n\r\n    function getPayoutToken() public view returns (address) {\r\n        return dividendTracker.getPayoutToken();\r\n    }\r\n\r\n    function setMinimumTokenBalanceForAutoDividends(uint256 value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dividendTracker.setMinimumTokenBalanceForAutoDividends(value);\r\n    }\r\n\r\n    function setMinimumTokenBalanceForDividends(uint256 value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        dividendTracker.setMinimumTokenBalanceForDividends(value);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(DEAD),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function forceSwapAndSendDividends(uint256 tokens) public onlyOwner {\r\n        tokens = tokens * (10**18);\r\n        uint256 totalAmount = buyAmount.add(sellAmount);\r\n        uint256 fromBuy = tokens.mul(buyAmount).div(totalAmount);\r\n        uint256 fromSell = tokens.mul(sellAmount).div(totalAmount);\r\n\r\n        swapAndSendDividends(tokens);\r\n\r\n        buyAmount = buyAmount.sub(fromBuy);\r\n        sellAmount = sellAmount.sub(fromSell);\r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        if (tokens == 0) {\r\n            return;\r\n        }\r\n        swapTokensForEth(tokens);\r\n        uint256 totalAmount = buyAmount.add(sellAmount);\r\n\r\n        bool success = true;\r\n        bool successOp1 = true;\r\n        bool successOp2 = true;\r\n\r\n        uint256 dividends;\r\n        uint256 dividendsFromBuy;\r\n        uint256 dividendsFromSell;\r\n\r\n        if (buyRewardsFee > 0) {\r\n            dividendsFromBuy = address(this)\r\n            .balance\r\n            .mul(buyAmount)\r\n            .div(totalAmount)\r\n            .mul(buyRewardsFee)\r\n            .div(buyRewardsFee + buyMarketingFees + buyBuyBackFee);\r\n        }\r\n        if (sellRewardsFee > 0) {\r\n            dividendsFromSell = address(this)\r\n            .balance\r\n            .mul(sellAmount)\r\n            .div(totalAmount)\r\n            .mul(sellRewardsFee)\r\n            .div(sellRewardsFee + sellMarketingFees + sellBuyBackFee);\r\n        }\r\n        dividends = dividendsFromBuy.add(dividendsFromSell);\r\n\r\n        if (dividends > 0) {\r\n            (success, ) = address(dividendTracker).call{value: dividends}(\"\");\r\n        }\r\n        \r\n        uint256 _completeFees = sellMarketingFees.add(sellBuyBackFee) +\r\n            buyMarketingFees.add(buyBuyBackFee);\r\n\r\n        uint256 feePortions;\r\n        if (_completeFees > 0) {\r\n            feePortions = address(this).balance.div(_completeFees);\r\n        }\r\n        uint256 marketingPayout = buyMarketingFees.add(sellMarketingFees) * feePortions;\r\n        uint256 buybackPayout = buyBuyBackFee.add(sellBuyBackFee) * feePortions;\r\n\r\n        if (marketingPayout > 0) {\r\n            (successOp1, ) = address(marketingWallet).call{value: marketingPayout}(\"\");\r\n        }\r\n        if (buybackPayout > 0) {\r\n            (successOp2, ) = address(buybackWallet).call{value: buybackPayout}(\"\");\r\n        }\r\n\r\n        emit SendDividends(\r\n            dividends,\r\n            marketingPayout + buybackPayout,\r\n            success && successOp1 && successOp2\r\n        );\r\n    }\r\n\r\n    function airdropToWallets(\r\n        address[] memory airdropWallets,\r\n        uint256[] memory amount\r\n    ) external onlyOwner {\r\n        require(airdropWallets.length == amount.length,\"Arrays must be the same length\");\r\n        require(airdropWallets.length <= 200, \"Wallets list length must be <= 200\");\r\n        for (uint256 i = 0; i < airdropWallets.length; i++) {\r\n            address wallet = airdropWallets[i];\r\n            uint256 airdropAmount = amount[i] * (10**18);\r\n            super._transfer(msg.sender, wallet, airdropAmount);\r\n            dividendTracker.setBalance(payable(wallet), balanceOf(wallet));\r\n        }\r\n    }\r\n}\r\n\r\ncontract MagaVPDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n    mapping(address => bool) public excludedFromAutoClaim;\r\n    mapping(address => bool) public autoReinvest;\r\n    address public defaultToken; // BUSD\r\n    bool public allowCustomTokens;\r\n    bool public allowAutoReinvest;\r\n    bool public dividendsPaused = false;\r\n\r\n    string private trackerName;\r\n    string private trackerTicker;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    MagaVP public MagaVPContract;\r\n\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    uint256 private minimumTokenBalanceForAutoDividends;\r\n    uint256 private minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event DividendReinvested(\r\n        address indexed acount,\r\n        uint256 value,\r\n        bool indexed automatic\r\n    );\r\n    event Claim(\r\n        address indexed account,\r\n        uint256 amount,\r\n        bool indexed automatic\r\n    );\r\n    event DividendsPaused(bool paused);\r\n    event SetAllowCustomTokens(bool allow);\r\n    event SetAllowAutoReinvest(bool allow);\r\n\r\n    constructor(\r\n        address payable mainContract,\r\n        address router,\r\n        address token,\r\n        string memory _name,\r\n        string memory _ticker\r\n    ) DividendPayingToken(_name, _ticker) {\r\n        trackerName = _name;\r\n        trackerTicker = _ticker;\r\n        defaultToken = token;\r\n        MagaVPContract = MagaVP(mainContract);\r\n        minimumTokenBalanceForAutoDividends = 100_000000000000000000; // 100 tokens\r\n        minimumTokenBalanceForDividends = minimumTokenBalanceForAutoDividends;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(router);\r\n        allowCustomTokens = true;\r\n        allowAutoReinvest = false;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return trackerName;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return trackerTicker;\r\n    }\r\n\r\n    function _transfer(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) internal pure override {\r\n        require(false, \"MagaVP_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(\r\n            false,\r\n            \"MagaVP_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main MagaVP contract.\"\r\n        );\r\n    }\r\n\r\n    function isExcludedFromAutoClaim(address account)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return excludedFromAutoClaim[account];\r\n    }\r\n\r\n    function isReinvest(address account)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return autoReinvest[account];\r\n    }\r\n\r\n    function setAllowCustomTokens(bool allow) external onlyOwner {\r\n        require(allowCustomTokens != allow);\r\n        allowCustomTokens = allow;\r\n        emit SetAllowCustomTokens(allow);\r\n    }\r\n\r\n    function setAllowAutoReinvest(bool allow) external onlyOwner {\r\n        require(allowAutoReinvest != allow);\r\n        allowAutoReinvest = allow;\r\n        emit SetAllowAutoReinvest(allow);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        //require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function includeFromDividends(address account) external onlyOwner {\r\n        excludedFromDividends[account] = false;\r\n    }\r\n\r\n    function setAutoClaim(address account, bool value) external onlyOwner {\r\n        excludedFromAutoClaim[account] = value;\r\n    }\r\n\r\n    function setReinvest(address account, bool value) external onlyOwner {\r\n        autoReinvest[account] = value;\r\n    }\r\n\r\n    function setMinimumTokenBalanceForAutoDividends(uint256 value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        minimumTokenBalanceForAutoDividends = value * (10**18);\r\n    }\r\n\r\n    function setMinimumTokenBalanceForDividends(uint256 value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        minimumTokenBalanceForDividends = value * (10**18);\r\n    }\r\n\r\n    function setDividendsPaused(bool value) external onlyOwner {\r\n        require(dividendsPaused != value);\r\n        dividendsPaused = value;\r\n        emit DividendsPaused(value);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n        public\r\n        view\r\n        returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime\r\n        )\r\n    {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(\r\n                    int256(lastProcessedIndex)\r\n                );\r\n            } else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\r\n                    lastProcessedIndex\r\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\r\n                    : 0;\r\n\r\n                iterationsUntilProcessed = index.add(\r\n                    int256(processesUntilEndOfArray)\r\n                );\r\n            }\r\n        }\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        if (index >= tokenHoldersMap.size()) {\r\n            return (\r\n                0x0000000000000000000000000000000000000000,\r\n                -1,\r\n                -1,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function setBalance(address account, uint256 newBalance)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if (newBalance < minimumTokenBalanceForDividends) {\r\n            tokenHoldersMap.remove(account);\r\n            _setBalance(account, 0);\r\n\r\n            return;\r\n        }\r\n\r\n        _setBalance(account, newBalance);\r\n\r\n        if (newBalance >= minimumTokenBalanceForAutoDividends) {\r\n            tokenHoldersMap.set(account, newBalance);\r\n        } else {\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas)\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if (numberOfTokenHolders == 0 || dividendsPaused) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if (_lastProcessedIndex >= numberOfTokenHolders) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if (!excludedFromAutoClaim[account]) {\r\n                if (processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        if (dividendsPaused) {\r\n            return false;\r\n        }\r\n\r\n        bool reinvest = autoReinvest[account];\r\n\r\n        if (automatic && reinvest && !allowAutoReinvest) {\r\n            return false;\r\n        }\r\n\r\n        uint256 amount = reinvest\r\n            ? _reinvestDividendOfUser(account)\r\n            : _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            if (reinvest) {\r\n                emit DividendReinvested(account, amount, automatic);\r\n            } else {\r\n                emit Claim(account, amount, automatic);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n\r\n    function updatePayoutToken(address token) public onlyOwner {\r\n        defaultToken = token;\r\n    }\r\n\r\n    function getPayoutToken() public view returns (address) {\r\n        return defaultToken;\r\n    }\r\n\r\n    function _reinvestDividendOfUser(address account)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(account);\r\n        if (_withdrawableDividend > 0) {\r\n            bool success;\r\n\r\n            withdrawnDividends[account] = withdrawnDividends[account].add(\r\n                _withdrawableDividend\r\n            );\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = uniswapV2Router.WETH();\r\n            path[1] = address(MagaVPContract);\r\n\r\n            uint256 prevBalance = MagaVPContract.balanceOf(address(this));\r\n\r\n            // make the swap\r\n            try\r\n                uniswapV2Router\r\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                    value: _withdrawableDividend\r\n                }(\r\n                    0, // accept any amount of Tokens\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                )\r\n            {\r\n                uint256 received = MagaVPContract\r\n                    .balanceOf(address(this))\r\n                    .sub(prevBalance);\r\n                if (received > 0) {\r\n                    success = true;\r\n                    MagaVPContract.transfer(account, received);\r\n                } else {\r\n                    success = false;\r\n                }\r\n            } catch {\r\n                success = false;\r\n            }\r\n\r\n            if (!success) {\r\n                withdrawnDividends[account] = withdrawnDividends[account].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user)\r\n        internal\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n\r\n            address tokenAddress = defaultToken;\r\n            bool success;\r\n\r\n            if (tokenAddress == address(0)) {\r\n                (success, ) = user.call{\r\n                    value: _withdrawableDividend,\r\n                    gas: 3000\r\n                }(\"\");\r\n            } else {\r\n                address[] memory path = new address[](2);\r\n                path[0] = uniswapV2Router.WETH();\r\n                path[1] = tokenAddress;\r\n                try\r\n                    uniswapV2Router\r\n                        .swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                        value: _withdrawableDividend\r\n                    }(\r\n                        0, // accept any amount of Tokens\r\n                        path,\r\n                        user,\r\n                        block.timestamp\r\n                    )\r\n                {\r\n                    success = true;\r\n                } catch {\r\n                    success = false;\r\n                }\r\n            }\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            } else {\r\n                emit DividendWithdrawn(user, _withdrawableDividend);\r\n            }\r\n            return _withdrawableDividend;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) internal view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key)\r\n        internal\r\n        view\r\n        returns (int256)\r\n    {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) internal view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(\r\n        Map storage map,\r\n        address key,\r\n        uint256 val\r\n    ) internal {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) internal {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        uint256 lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"opAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SetPreSaleWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellMarketingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellRewardsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyMarketingFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyRewardsFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyBuyBackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellBuyBackFee\",\"type\":\"uint256\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UpdatePayoutToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updatebuybackWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropWallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBuyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract MagaVPDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabledPublicTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"forceSwapAndSendDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayoutToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromAutoClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowAutoReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"setAllowCustomTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutoClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setBuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCanTransferBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setDividendsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setExcludeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setIncludeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForAutoDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setPresaleWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPublicTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTriggerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setTrueDefiRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setWhitelistForPublicTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setmaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardsBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RewardsSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackSell\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updatePayoutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistForPublicTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MagaVP", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc5316a2ebbac12df20c0e7ffb027c4da9094d1092a6e27730b596a169fbc3a9"}