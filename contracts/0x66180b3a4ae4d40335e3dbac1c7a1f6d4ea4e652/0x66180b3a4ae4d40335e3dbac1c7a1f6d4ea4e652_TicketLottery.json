{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ncontract TicketLottery is ReentrancyGuard {\r\n    address public owner;\r\n    address[] public players;\r\n    address public winner;\r\n    uint public poolAmount;\r\n    uint public queueSize = 10;\r\n    uint256 public entryAmount = 0.01 ether;\r\n\r\n    uint public totalLotteries;\r\n    uint public totalWinnings;\r\n    uint public totalHouseFees;\r\n    address public houseFeeReciever = address(0xfB1b1C0eeDDB71bc46cD7A860B7A74F63119A2f8);\r\n    uint public houseFeePercent = 10;\r\n    \r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event LotteryConcluded(\r\n        address[] players,\r\n        address winner,\r\n        uint256 prize,\r\n        uint256 outcome\r\n    );\r\n\r\n    event LotteryStarted(address indexed starter, uint256 entryAmount, uint256 queueSize);\r\n\r\n    function enterLottery() public payable nonReentrant {\r\n        require(msg.value == entryAmount, \"You must send the correct amount to enter\");\r\n        require(players.length < queueSize, \"Queue is full, wait for the next round.\");\r\n\r\n\r\n    // Check if the lottery is starting (i.e., no players yet for this round)\r\n        bool isNewRoundStarting = players.length == 0;\r\n\r\n        players.push(msg.sender);\r\n        poolAmount += msg.value;\r\n\r\n    // Emit the LotteryStarted event if this is the start of a new round\r\n        if (isNewRoundStarting) {\r\n            emit LotteryStarted(msg.sender, entryAmount, queueSize);\r\n        }\r\n\r\n        if (players.length == queueSize) {\r\n            selectWinner();\r\n        }\r\n    }\r\n\r\n    function selectWinner() internal {\r\n        uint randNumber = rand();\r\n        uint index = randNumber % players.length;\r\n        winner = players[index];\r\n\r\n        uint houseFee = (poolAmount * houseFeePercent) / 100;\r\n        uint winnings = poolAmount - houseFee;\r\n\r\n        payable(winner).transfer(winnings);\r\n        payable(houseFeeReciever).transfer(houseFee);\r\n\r\n        totalWinnings += winnings;\r\n        totalHouseFees += houseFee;\r\n        totalLotteries++;\r\n\r\n        emit LotteryConcluded(players, winner, winnings, index);\r\n\r\n        reset();\r\n    }\r\n\r\n    function reset() private {\r\n        delete players;\r\n        poolAmount = 0;\r\n        winner = address(0);\r\n    }\r\n\r\n\r\n    // This function is just a placeholder for generating a random number.\r\n    function rand() private view returns (uint256) {\r\n\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            block.timestamp + block.prevrandao +\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\r\n            block.gaslimit + \r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\r\n            block.number\r\n        )));\r\n\r\n        return seed;\r\n    }\r\n\r\n    function getPlayers() public view returns (address[] memory) {\r\n        return players;\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    // Allow the owner to withdraw any excess funds (if any).\r\n    function withdrawExcess() public onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function setHouseFeeReceiver(address newReceiver) external onlyOwner {\r\n        require(newReceiver != address(0), \"New receiver cannot be the zero address\");\r\n        houseFeeReciever = newReceiver;\r\n    }\r\n\r\n\r\n    function setHouseFeePercent(uint8 newPercent) external onlyOwner {\r\n        require(newPercent != houseFeePercent, \"This is already the house fee percent\");\r\n        require(newPercent <= 10, \"Cannot set house fee percentage higher than 10 percent\");\r\n\r\n        houseFeePercent = newPercent;\r\n    }\r\n\r\n    function setQueueSize(uint8 newSize) external onlyOwner {\r\n        require(newSize != queueSize, \"This is already the queue size!\");\r\n        require(newSize > 0, \"Cannot set queue size to 0!\");\r\n\r\n        queueSize = newSize;\r\n    }\r\n\r\n    function setEntryAmount(uint256 newAmount) external onlyOwner {\r\n        require(newAmount != entryAmount, \"This is already the entry amount!\");\r\n        require(newAmount > 0, \"Cannot set entry amount to 0!\");\r\n\r\n\r\n        entryAmount = newAmount;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value == entryAmount, \"You must send the correct amount to enter\");\r\n        enterLottery();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"LotteryConcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"starter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueSize\",\"type\":\"uint256\"}],\"name\":\"LotteryStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"houseFeeReciever\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setEntryAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newPercent\",\"type\":\"uint8\"}],\"name\":\"setHouseFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"setHouseFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newSize\",\"type\":\"uint8\"}],\"name\":\"setQueueSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHouseFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLotteries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TicketLottery", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://242048f8ad9692a1da78dd0192cd0dcb9d0d09d5793092ff5ad3441685aadd57"}