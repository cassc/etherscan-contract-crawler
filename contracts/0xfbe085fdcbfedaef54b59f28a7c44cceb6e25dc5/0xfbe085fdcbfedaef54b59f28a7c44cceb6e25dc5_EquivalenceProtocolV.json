{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/EquivalenceTokenV2.sol\r\n\r\n\r\npragma solidity ^0.8.21;\r\n\r\n\r\n\r\n// following code comes from import \"@openzeppelin/contracts/access/Ownable.sol\"; (version from February 22, 2023)\r\n// original comments are removed and where possible code is made more compact, any changes except visual ones are commented\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {_transferOwnership(_msgSender());}\r\n    modifier onlyOwner() {_checkOwner(); _;}\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n    function _checkOwner() internal view virtual {require(owner() == _msgSender(), \"Ownable: caller is not the owner\");}\r\n// added bool confirm to avoid theoretical chance of renouncing ownership by mistake or accident\r\n    function renounceOwnership(bool confirm) public virtual onlyOwner {require(confirm, \"Not confirmed\"); _transferOwnership(address(0));}\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {require(newOwner != address(0), \"Ownable: new owner is the zero address\"); _transferOwnership(newOwner);}\r\n    function _transferOwnership(address newOwner) internal virtual {address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner);}\r\n}\r\n\r\n// interface to get the data from PriceOracle (another smart-contract providing price data)\r\ninterface EQTpriceOracle {\r\n    function getEQTprice() external view returns (uint256);\r\n    function getEQTprice_Token1() external view returns (uint256);\r\n    function getEQTprice_Token2() external view returns (uint256);\r\n    function getEQTprice_Token3() external view returns (uint256);\r\n    function getEQTprice_Token4() external view returns (uint256);\r\n    }\r\n\r\n\r\n\r\n\r\n//********************************************************************************************\r\n//***********************      HERE STARTS THE CODE OF CONTRACT     **************************\r\n//********************************************************************************************\r\n\r\ncontract EquivalenceProtocolV2 is ERC20, Ownable {\r\n\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => uint256) internal rewardBalances;\r\n    mapping(address => uint256) internal rewardTimestamps;\r\n    IERC20 internal WrappedNativeToken = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IERC20 internal Token1 = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20 internal Token2 = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IERC20 internal Token3 = IERC20(0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6);\r\n    IERC20 internal Token4 = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n    IERC20Metadata public NativeMetadata = IERC20Metadata(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IERC20Metadata public Metadata1 = IERC20Metadata(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    IERC20Metadata public Metadata2 = IERC20Metadata(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    IERC20Metadata public Metadata3 = IERC20Metadata(0x455e53CBB86018Ac2B8092FdCd39d8444aFFC3F6);\r\n    IERC20Metadata public Metadata4 = IERC20Metadata(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\r\n    address public PaymentSplitter;\r\n    bool public PartnershipEnabled = false;\r\n    bool public Token1isUSD = true;\r\n    bool public Token2isUSD = true;\r\n    bool public Token3isUSD = false;\r\n    bool public Token4isUSD = false;\r\n    bool public Token1isEUR = false;\r\n    bool public Token2isEUR = false;\r\n    bool public Token3isEUR = false;\r\n    bool public Token4isEUR = false;\r\n    bool public Token1isETH = false;\r\n    bool public Token2isETH = false;\r\n    bool public Token3isETH = false;\r\n    bool public Token4isETH = false;\r\n    bool public Token1isBTC = false;\r\n    bool public Token2isBTC = false;\r\n    bool public Token3isBTC = false;\r\n    bool public Token4isBTC = true;\r\n    uint256 internal constant IntendedSupply = 10 ** 26;\r\n    uint256 internal constant MaxSupply = 10 ** 27;\r\n    address public LiquidityPoolWallet = 0x79C08ce94676106f3a11c561D893F9fb26dd007C;\r\n    address private TeamWallet;\r\n    EQTpriceOracle public PriceOracle;\r\n    uint256 public mintMode = 3;\r\n    uint256 public whitelistUsageCounter;\r\n    bool public BlockSpecialFunctionOnPoolSetup = true;\r\n    error Minting_paused();\r\n    error Incorrect_PaymentToken();\r\n    error Minting_above_intended_supply();\r\n    error Minting_above_maximal_supply();\r\n    error Not_whitelisted();\r\n    error Already_registered();\r\n    error Supply_above_intended();\r\n    error Not_registered();\r\n    error Ivalid_timestamp();\r\n    error Temporarily_Blocked();\r\n    error Amount_Too_Low();\r\n\r\n    constructor() ERC20(\"Equivalence Token V2\", \"EQT\") {_mint(msg.sender, 85 * 10 ** 24);}\r\n\r\n    function addToWhitelist(address _address) external onlyOwner {whitelist[_address] = true; whitelistUsageCounter++;}\r\n    function removeFromWhitelist(address _address) external onlyOwner {delete whitelist[_address];}\r\n    function setOracleAddress(EQTpriceOracle _addr) external onlyOwner {PriceOracle = _addr;}\r\n    function setTeamWallet(address _address) external onlyOwner {TeamWallet = _address;}\r\n    function setBlock(bool blockOnSetup) external onlyOwner {BlockSpecialFunctionOnPoolSetup = blockOnSetup;}\r\n    function setPartnership(bool enabled) external onlyOwner {PartnershipEnabled = enabled;}\r\n    function setWrappedNativeToken(address _addr) external onlyOwner {WrappedNativeToken = IERC20(_addr); NativeMetadata = IERC20Metadata(_addr);}\r\n    function setPaymentSplitter(address _addr) external onlyOwner {PaymentSplitter = _addr;}\r\n    function setToken1(address _addr, bool USD, bool EUR, bool ETH, bool BTC) external onlyOwner {Token1 = IERC20(_addr); Metadata1 = IERC20Metadata(_addr); Token1isUSD = USD; Token1isEUR = EUR; Token1isETH = ETH; Token1isBTC = BTC;}\r\n    function setToken2(address _addr, bool USD, bool EUR, bool ETH, bool BTC) external onlyOwner {Token2 = IERC20(_addr); Metadata2 = IERC20Metadata(_addr); Token2isUSD = USD; Token2isEUR = EUR; Token2isETH = ETH; Token2isBTC = BTC;}\r\n    function setToken3(address _addr, bool USD, bool EUR, bool ETH, bool BTC) external onlyOwner {Token3 = IERC20(_addr); Metadata3 = IERC20Metadata(_addr); Token3isUSD = USD; Token3isEUR = EUR; Token3isETH = ETH; Token3isBTC = BTC;}\r\n    function setToken4(address _addr, bool USD, bool EUR, bool ETH, bool BTC) external onlyOwner {Token4 = IERC20(_addr); Metadata4 = IERC20Metadata(_addr); Token4isUSD = USD; Token4isEUR = EUR; Token4isETH = ETH; Token4isBTC = BTC;}\r\n    function withdraw () external onlyOwner {\r\n        if (address(this).balance >= 1) {payable(msg.sender).transfer(address(this).balance);}\r\n        if (balanceOf(address(this)) >= 1) {_transfer(address(this), msg.sender, balanceOf(address(this)));}\r\n    }\r\n    function withdrawERC20 (IERC20 token) external onlyOwner {if (token.balanceOf(address(this)) >= 1) {token.transfer(msg.sender, token.balanceOf(address(this)));}}\r\n\r\n// mintMode: 0 = minting fully available, 1 = minting only with the native tokens of the blockchain, 2 = minting only with ERC-20 tokens, 3+ minting paused\r\n    function setMintMode(uint256 _mintMode) external onlyOwner {mintMode = _mintMode;}\r\n\r\n// calculation of \"Liquidity\"can't underflow because \"ProjectAndTeam\" is 40x less than msg.value\r\n    function mint() external payable {\r\n        if (mintMode >= 2) {revert Minting_paused();}\r\n        uint256 decimals = NativeMetadata.decimals();\r\n        uint256 ProjectAndTeam;\r\n        uint256 Liquidity;\r\n        uint256 TokensToMint;\r\n        if (decimals >= 36){TokensToMint = (msg.value / (10**(decimals-36))) / PriceOracle.getEQTprice();}\r\n        else {TokensToMint = ((10**(36-decimals)) * msg.value) / PriceOracle.getEQTprice();}\r\n        if (IntendedSupply < TokensToMint + totalSupply()) {revert Minting_above_intended_supply();}\r\n        if(PartnershipEnabled) { unchecked {\r\n            uint256 Partners = msg.value / 50;                      // 2% to our partners\r\n            ProjectAndTeam = msg.value / 66;                        // 2x 1.5% to the project and team wallets\r\n            Liquidity = msg.value - Partners - (2*ProjectAndTeam);  // 95% to the liquidity wallet\r\n            payable(PaymentSplitter).transfer(Partners);\r\n            }}\r\n        else { unchecked {\r\n            ProjectAndTeam = msg.value / 40;                        // 2x 2.5% to the project and team wallets\r\n            Liquidity = msg.value - (2*ProjectAndTeam);             // 95% to the liquidity wallet\r\n            }}\r\n        payable(owner()).transfer(ProjectAndTeam);\r\n        payable(TeamWallet).transfer(ProjectAndTeam);\r\n        payable(LiquidityPoolWallet).transfer(Liquidity);\r\n        _mint(msg.sender, TokensToMint);\r\n        updateRewards(msg.sender);\r\n    }\r\n\r\n// calculation of \"Liquidity\" and \"ProjectAndTeam\" can't overflow or underflow because both are less than \"MintTotal\"\r\n    function mintWithERC20(uint256 TokensToMint, uint256 PaymentToken) external {\r\n        if (mintMode == 1 || mintMode >= 3) {revert Minting_paused();}\r\n        if (IntendedSupply < TokensToMint + totalSupply()) {revert Minting_above_intended_supply();}\r\n        if (PaymentToken == 0 || PaymentToken >= 5) {revert Incorrect_PaymentToken();}\r\n        uint256 Liquidity;\r\n        uint256 MintTotal;\r\n        uint256 ProjectAndTeam;\r\n        if (PaymentToken == 1) {\r\n            if (Metadata1.decimals() >= 36){MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token1()) * (10 ** (Metadata1.decimals() - 36));}\r\n            else {MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token1()) / (10 ** (36-Metadata1.decimals()));}\r\n            if (MintTotal <= 66) {revert Amount_Too_Low();}\r\n            if(PartnershipEnabled) { unchecked {\r\n                uint256 Partners = MintTotal / 50;                          // 2% to our partners\r\n                ProjectAndTeam = MintTotal / 66;                            // 2x 1.5% to the project and team wallets\r\n                Liquidity = MintTotal - Partners - (2*ProjectAndTeam);      // 95% to the liquidity wallet\r\n                Token1.transferFrom(msg.sender, PaymentSplitter, Partners);\r\n            }}\r\n            else { unchecked {\r\n                ProjectAndTeam = MintTotal / 40;                            // 2x 2.5% to the project and team wallets\r\n                Liquidity = MintTotal - (2*ProjectAndTeam);                 // 95% to the liquidity wallet\r\n            }}\r\n            Token1.transferFrom(msg.sender, owner(), ProjectAndTeam);\r\n            Token1.transferFrom(msg.sender, TeamWallet, ProjectAndTeam);\r\n            Token1.transferFrom(msg.sender, LiquidityPoolWallet, Liquidity);\r\n            } else {\r\n        if (PaymentToken == 2) {\r\n            if (Metadata2.decimals() >= 36){MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token2()) * (10 ** (Metadata2.decimals() - 36));}\r\n            else {MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token2()) / (10 ** (36-Metadata2.decimals()));}\r\n            if (MintTotal <= 66) {revert Amount_Too_Low();}\r\n            if(PartnershipEnabled) { unchecked {\r\n                uint256 Partners = MintTotal / 50;                          // 2% to our partners\r\n                ProjectAndTeam = MintTotal / 66;                            // 2x 1.5% to the project and team wallets\r\n                Liquidity = MintTotal - Partners - (2*ProjectAndTeam);      // 95% to the liquidity wallet\r\n                Token2.transferFrom(msg.sender, PaymentSplitter, Partners);\r\n            }}\r\n            else { unchecked {\r\n                ProjectAndTeam = MintTotal / 40;                            // 2x 2.5% to the project and team wallets\r\n                Liquidity = MintTotal - (2*ProjectAndTeam);                 // 95% to the liquidity wallet\r\n            }}\r\n            Token2.transferFrom(msg.sender, owner(), ProjectAndTeam);\r\n            Token2.transferFrom(msg.sender, TeamWallet, ProjectAndTeam);\r\n            Token2.transferFrom(msg.sender, LiquidityPoolWallet, Liquidity);\r\n            } else {\r\n        if (PaymentToken == 3) {\r\n            if (Metadata3.decimals() >= 36){MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token3()) * (10 ** (Metadata3.decimals() - 36));}\r\n            else {MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token3()) / (10 ** (36-Metadata3.decimals()));}\r\n            if (MintTotal <= 66) {revert Amount_Too_Low();}\r\n            if(PartnershipEnabled) { unchecked {\r\n                uint256 Partners = MintTotal / 50;                          // 2% to our partners\r\n                ProjectAndTeam = MintTotal / 66;                            // 2x 1.5% to the project and team wallets\r\n                Liquidity = MintTotal - Partners - (2*ProjectAndTeam);      // 95% to the liquidity wallet\r\n                Token3.transferFrom(msg.sender, PaymentSplitter, Partners);\r\n            }}\r\n            else { unchecked {\r\n                ProjectAndTeam = MintTotal / 40;                            // 2x 2.5% to the project and team wallets\r\n                Liquidity = MintTotal - (2*ProjectAndTeam);                 // 95% to the liquidity wallet\r\n            }}\r\n            Token3.transferFrom(msg.sender, owner(), ProjectAndTeam);\r\n            Token3.transferFrom(msg.sender, TeamWallet, ProjectAndTeam);\r\n            Token3.transferFrom(msg.sender, LiquidityPoolWallet, Liquidity);\r\n            } else {\r\n            if (Metadata4.decimals() >= 36){MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token4()) * (10 ** (Metadata4.decimals() - 36));}\r\n            else {MintTotal = (TokensToMint * PriceOracle.getEQTprice_Token4()) / (10 ** (36-Metadata4.decimals()));}\r\n            if (MintTotal <= 66) {revert Amount_Too_Low();}\r\n            if(PartnershipEnabled) { unchecked {\r\n                uint256 Partners = MintTotal / 50;                          // 2% to our partners\r\n                ProjectAndTeam = MintTotal / 66;                            // 2x 1.5% to the project and team wallets\r\n                Liquidity = MintTotal - Partners - (2*ProjectAndTeam);      // 95% to the liquidity wallet\r\n                Token4.transferFrom(msg.sender, PaymentSplitter, Partners);\r\n            }}\r\n            else { unchecked {\r\n                ProjectAndTeam = MintTotal / 40;                            // 2x 2.5% to the project and team wallets\r\n                Liquidity = MintTotal - (2*ProjectAndTeam);                 // 95% to the liquidity wallet\r\n            }}\r\n            Token4.transferFrom(msg.sender, owner(), ProjectAndTeam);\r\n            Token4.transferFrom(msg.sender, TeamWallet, ProjectAndTeam);\r\n            Token4.transferFrom(msg.sender, LiquidityPoolWallet, Liquidity);\r\n            }}\r\n        }\r\n        _mint(msg.sender, TokensToMint);\r\n        updateRewards(msg.sender);\r\n    }\r\n\r\n// calculation can be unchecked, \"amount\" can't be more than \"MaxSupply\", which mean \"totalSupply() + amount\" can't overflow and \"amount * (totalSupply() - IntendedSupply)\" also can't overflow\r\n    function externalMint(address _addr, uint256 amount) external {\r\n        if(BlockSpecialFunctionOnPoolSetup) {revert Temporarily_Blocked();}\r\n        if(whitelist[msg.sender]) {} else {revert Not_whitelisted();}\r\n        unchecked {\r\n            if (amount >= MaxSupply || totalSupply() + amount >= MaxSupply) {revert Minting_above_maximal_supply();}\r\n            if (totalSupply() > IntendedSupply) {amount = amount - (amount * (totalSupply() - IntendedSupply) / ((99*IntendedSupply)-(9*totalSupply())));}\r\n            }\r\n        _mint(_addr, amount);\r\n        updateRewards(_addr);\r\n    }\r\n    function burnFrom(address account, uint256 amount) external {\r\n        if(BlockSpecialFunctionOnPoolSetup) {revert Temporarily_Blocked();}\r\n        _spendAllowance(account, msg.sender, amount);\r\n        _burn(account, amount);\r\n        updateRewards(account);\r\n    }\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n        updateRewards(msg.sender);\r\n    }\r\n    function registerForRewards() external {\r\n        if (rewardTimestamps[msg.sender] != 0) {revert Already_registered();}\r\n        rewardBalances[msg.sender] = balanceOf(msg.sender);\r\n        rewardTimestamps[msg.sender] = block.timestamp;\r\n    }\r\n    function updateRewardsManually() external {\r\n        if (totalSupply() >= IntendedSupply) {revert Supply_above_intended();}\r\n        if (rewardTimestamps[msg.sender] == 0) {revert Not_registered();}\r\n        updateRewards(msg.sender);\r\n    }\r\n\r\n// (block.timestamp - rewardTimestamps[_addr]) is time interval in seconds, 31557600 is number of seconds per year (365.25 days), together it makes time multiplier\r\n// 10**16 comes from ((IntendedSupply / 10 ** 18) ** 2), since the result is a constant, I've put there the result directly to save gas\r\n// (10**16 - ((totalSupply() / 10 ** 18) ** 2))) / (665 * 10 ** 14) is calculation of reward per year multiplier, for totalSupply() = 0 it is 0.15037594\r\n// calculation can be unchecked, reasons:\r\n// totalSupply() < IntendedSupply and block.timestamp > rewardTimestamps[], this prevent underflow\r\n// rewardBalances[] can't be more than MaxSupply (10 ** 27), overflow within the first part of calculation \"rewardBalances[_addr] * (block.timestamp - rewardTimestamps[])\" would take about 3*10**42 years, so I consider it impossible\r\n// Multiplication in second part can increase the number by at most 10**16, in total: 10 ** 27 * 10**16 = 10**43, so there is still 10**34 years till overflow, which is less than in previous calculation, but still most likely past the end of our universe... I consider that also impossible\r\n    function updateRewards(address _addr) internal {if (rewardTimestamps[_addr] >= 1) {\r\n        if(totalSupply() < IntendedSupply){\r\n            if (block.timestamp <= rewardTimestamps[_addr]) {revert Ivalid_timestamp();}\r\n            unchecked {_mint(_addr, ((((rewardBalances[_addr] * (block.timestamp - rewardTimestamps[_addr])) / 31557600) * (10**16 - ((totalSupply() / 10 ** 18) ** 2))) / (665 * 10 ** 14)));}\r\n            rewardBalances[_addr] = balanceOf(_addr);\r\n            rewardTimestamps[_addr] = block.timestamp;\r\n        } else {\r\n            rewardBalances[_addr] = balanceOf(_addr);\r\n            rewardTimestamps[_addr] = block.timestamp;\r\n        }\r\n    }}\r\n    function pauseRewards() external {\r\n        if (rewardTimestamps[msg.sender] == 0) {revert Not_registered();}\r\n        if ((totalSupply() < IntendedSupply) && (rewardBalances[msg.sender] >= 1)) {\r\n            if (block.timestamp <= rewardTimestamps[msg.sender]) {revert Ivalid_timestamp();}\r\n            unchecked {_mint(msg.sender, ((((rewardBalances[msg.sender] * (block.timestamp - rewardTimestamps[msg.sender])) / 31557600) * (10**16 - ((totalSupply() / 10 ** 18) ** 2))) / (665 * 10 ** 14)));}\r\n            }\r\n        rewardTimestamps[msg.sender] = 0;\r\n        rewardBalances[msg.sender] = 0;\r\n    }\r\n\r\n// overrides to include the update of rewards\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        updateRewards(msg.sender);\r\n        updateRewards(to);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        updateRewards(from);\r\n        updateRewards(to);\r\n        return true;\r\n    }\r\n\r\n// view only functions\r\n    function NativeTokenName() external view returns (string memory) {return NativeMetadata.name();}\r\n    function Token1Name() external view returns (string memory) {return Metadata1.name();}\r\n    function Token2Name() external view returns (string memory) {return Metadata2.name();}\r\n    function Token3Name() external view returns (string memory) {return Metadata3.name();}\r\n    function Token4Name() external view returns (string memory) {return Metadata4.name();}\r\n    function EQTprice() external view returns (uint256 price, uint8 tokenDecimals) {return (PriceOracle.getEQTprice(), NativeMetadata.decimals());}\r\n    function EQTprice_Token1() external view returns (uint256 price, uint8 tokenDecimals) {return (PriceOracle.getEQTprice_Token1(), Metadata1.decimals());}\r\n    function EQTprice_Token2() external view returns (uint256 price, uint8 tokenDecimals) {return (PriceOracle.getEQTprice_Token2(), Metadata2.decimals());}\r\n    function EQTprice_Token3() external view returns (uint256 price, uint8 tokenDecimals) {return (PriceOracle.getEQTprice_Token3(), Metadata3.decimals());}\r\n    function EQTprice_Token4() external view returns (uint256 price, uint8 tokenDecimals) {return (PriceOracle.getEQTprice_Token4(), Metadata4.decimals());}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Already_registered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Amount_Too_Low\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Incorrect_PaymentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ivalid_timestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Minting_above_intended_supply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Minting_above_maximal_supply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Minting_paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_registered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Not_whitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Supply_above_intended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Temporarily_Blocked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BlockSpecialFunctionOnPoolSetup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQTprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQTprice_Token1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQTprice_Token2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQTprice_Token3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EQTprice_Token4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityPoolWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Metadata1\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Metadata2\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Metadata3\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Metadata4\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NativeMetadata\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NativeTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PartnershipEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PaymentSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PriceOracle\",\"outputs\":[{\"internalType\":\"contract EQTpriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1isBTC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1isETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1isEUR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token1isUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token2Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token2isBTC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token2isETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token2isEUR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token2isUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token3Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token3isBTC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token3isETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token3isEUR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token3isUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token4Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token4isBTC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token4isETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token4isEUR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token4isUSD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"externalMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokensToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PaymentToken\",\"type\":\"uint256\"}],\"name\":\"mintWithERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"confirm\",\"type\":\"bool\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"blockOnSetup\",\"type\":\"bool\"}],\"name\":\"setBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintMode\",\"type\":\"uint256\"}],\"name\":\"setMintMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract EQTpriceOracle\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPartnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPaymentSplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"USD\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"EUR\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"BTC\",\"type\":\"bool\"}],\"name\":\"setToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"USD\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"EUR\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"BTC\",\"type\":\"bool\"}],\"name\":\"setToken2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"USD\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"EUR\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"BTC\",\"type\":\"bool\"}],\"name\":\"setToken3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"USD\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"EUR\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"BTC\",\"type\":\"bool\"}],\"name\":\"setToken4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardsManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistUsageCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EquivalenceProtocolV2", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://235907dc170742b061992e55a39932f18c39bf87b3cf05e334d9c2e14d1c9423"}