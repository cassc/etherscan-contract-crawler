{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Oracles/ChainlinkPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Fixed256x18 } from \\\"@tempusfinance/tempus-utils/contracts/math/Fixed256x18.sol\\\";\\nimport { AggregatorV3Interface, IChainlinkPriceOracle } from \\\"./Interfaces/IChainlinkPriceOracle.sol\\\";\\nimport { BasePriceOracle } from \\\"./BasePriceOracle.sol\\\";\\n\\ncontract ChainlinkPriceOracle is BasePriceOracle, IChainlinkPriceOracle {\\n    // --- Types ---\\n\\n    using Fixed256x18 for uint256;\\n\\n    // --- Constants & immutables ---\\n\\n    AggregatorV3Interface public immutable override priceAggregator;\\n\\n    uint256 public immutable override DEVIATION;\\n\\n    uint256 public immutable override MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND;\\n\\n    // --- Constructor ---\\n\\n    constructor(\\n        AggregatorV3Interface _priceAggregatorAddress,\\n        uint256 _deviation,\\n        uint256 timeout_,\\n        uint256 targetDigits_,\\n        uint256 maxPriceDeviationFromPreviousRound_\\n    )\\n        BasePriceOracle(timeout_, targetDigits_)\\n    {\\n        if (address(_priceAggregatorAddress) == address(0)) {\\n            revert InvalidPriceAggregatorAddress();\\n        }\\n        if (_deviation >= 1e18) {\\n            revert InvalidDeviation();\\n        }\\n        priceAggregator = _priceAggregatorAddress;\\n        DEVIATION = _deviation;\\n        MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND = maxPriceDeviationFromPreviousRound_;\\n    }\\n\\n    // --- Functions ---\\n\\n    function getPriceOracleResponse() external override returns (PriceOracleResponse memory) {\\n        ChainlinkResponse memory chainlinkResponse = _getCurrentChainlinkResponse();\\n        ChainlinkResponse memory prevChainlinkResponse =\\n            _getPrevChainlinkResponse(chainlinkResponse.roundId, chainlinkResponse.decimals);\\n\\n        if (\\n            _chainlinkIsBroken(chainlinkResponse, prevChainlinkResponse)\\n                || _oracleIsFrozen(chainlinkResponse.timestamp)\\n        ) {\\n            return (PriceOracleResponse(true, false, 0));\\n        }\\n        return (\\n            PriceOracleResponse(\\n                false,\\n                _chainlinkPriceChangeAboveMax(chainlinkResponse, prevChainlinkResponse),\\n                _formatPrice(uint256(chainlinkResponse.answer), chainlinkResponse.decimals)\\n            )\\n        );\\n    }\\n\\n    function getPriceOracleResponseStatus() external view override returns (bool, bool) {\\n        ChainlinkResponse memory chainlinkResponse = _getCurrentChainlinkResponse();\\n        ChainlinkResponse memory prevChainlinkResponse =\\n            _getPrevChainlinkResponse(chainlinkResponse.roundId, chainlinkResponse.decimals);\\n\\n        if (\\n            _chainlinkIsBroken(chainlinkResponse, prevChainlinkResponse)\\n                || _oracleIsFrozen(chainlinkResponse.timestamp)\\n        ) {\\n            return (true, false);\\n        }\\n        return (false, _chainlinkPriceChangeAboveMax(chainlinkResponse, prevChainlinkResponse));\\n    }\\n\\n    function _getCurrentChainlinkResponse() internal view returns (ChainlinkResponse memory chainlinkResponse) {\\n        // First, try to get current decimal precision:\\n        try priceAggregator.decimals() returns (uint8 decimals) {\\n            // If call to Chainlink succeeds, record the current decimal precision\\n            chainlinkResponse.decimals = decimals;\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\\n            return chainlinkResponse;\\n        }\\n\\n        // Secondly, try to get latest price data:\\n        try priceAggregator.latestRoundData() returns (\\n            uint80 roundId, int256 answer, uint256, /* startedAt */ uint256 timestamp, uint80 answeredInRound\\n        ) {\\n            // If call to Chainlink succeeds, return the response and success = true\\n            chainlinkResponse.roundId = roundId;\\n            chainlinkResponse.answer = answer;\\n            chainlinkResponse.timestamp = timestamp;\\n            chainlinkResponse.answeredInRound = answeredInRound;\\n            chainlinkResponse.success = true;\\n            return chainlinkResponse;\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\\n            return chainlinkResponse;\\n        }\\n    }\\n\\n    function _getPrevChainlinkResponse(\\n        uint80 currentRoundID,\\n        uint8 currentDecimals\\n    )\\n        internal\\n        view\\n        returns (ChainlinkResponse memory prevChainlinkResponse)\\n    {\\n        /*\\n        * NOTE: Chainlink only offers a current decimals() value - there is no way to obtain the decimal precision used\\n        * in a previous round.  We assume the decimals used in the previous round are the same as the current round.\\n        */\\n\\n        if (currentRoundID == 0) {\\n            return prevChainlinkResponse;\\n        }\\n\\n        // Try to get the price data from the previous round:\\n        try priceAggregator.getRoundData(currentRoundID - 1) returns (\\n            uint80 roundId, int256 answer, uint256, /* startedAt */ uint256 timestamp, uint80 answeredInRound\\n        ) {\\n            // If call to Chainlink succeeds, return the response and success = true\\n            prevChainlinkResponse.roundId = roundId;\\n            prevChainlinkResponse.answer = answer;\\n            prevChainlinkResponse.timestamp = timestamp;\\n            prevChainlinkResponse.decimals = currentDecimals;\\n            prevChainlinkResponse.answeredInRound = answeredInRound;\\n            prevChainlinkResponse.success = true;\\n            return prevChainlinkResponse;\\n        } catch {\\n            // If call to Chainlink aggregator reverts, return a zero response with success = false\\n            return prevChainlinkResponse;\\n        }\\n    }\\n\\n    /* Chainlink is considered broken if its current or previous round data is in any way bad. We check the previous\\n    * round for two reasons:\\n    *\\n    * 1) It is necessary data for the price deviation check in case 1.\\n    * 2) Chainlink is the PriceFeed's preferred primary oracle - having two consecutive valid round responses adds\\n    * peace of mind when using or returning to Chainlink.\\n    */\\n    function _chainlinkIsBroken(\\n        ChainlinkResponse memory currentResponse,\\n        ChainlinkResponse memory prevResponse\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _badChainlinkResponse(currentResponse) || _badChainlinkResponse(prevResponse)\\n            || currentResponse.timestamp <= prevResponse.timestamp;\\n    }\\n\\n    function _badChainlinkResponse(ChainlinkResponse memory response) internal view returns (bool) {\\n        return !response.success || response.roundId == 0 || response.timestamp == 0 || response.answer <= 0\\n            || response.answeredInRound != response.roundId || response.timestamp > block.timestamp;\\n    }\\n\\n    function _chainlinkPriceChangeAboveMax(\\n        ChainlinkResponse memory currentResponse,\\n        ChainlinkResponse memory prevResponse\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // Not needed to be converted to WstETH price, as we are only checking for a percentage change.\\n        // Also, not needed to be converted by decimals, because aggregator decimals are the same for both responses.\\n        uint256 currentScaledPrice = uint256(currentResponse.answer);\\n        uint256 prevScaledPrice = uint256(prevResponse.answer);\\n\\n        uint256 minPrice = Math.min(currentScaledPrice, prevScaledPrice);\\n        uint256 maxPrice = Math.max(currentScaledPrice, prevScaledPrice);\\n\\n        // Use the previous round price as the denominator\\n        uint256 percentDeviation = (maxPrice - minPrice).divDown(prevScaledPrice);\\n\\n        // Return true if price has more than doubled, or more than halved.\\n        return percentDeviation > MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tempus-utils/contracts/math/Fixed256x18.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Fixed256x18 {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return (((a * ONE) - 1) / b) + 1;\\n        }\\n    }\\n\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Oracles/Interfaces/IChainlinkPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { AggregatorV3Interface } from \\\"@smartcontractkit/chainlink/interfaces/AggregatorV3Interface.sol\\\";\\nimport { IPriceOracle } from \\\"./IPriceOracle.sol\\\";\\n\\ninterface IChainlinkPriceOracle is IPriceOracle {\\n    // --- Types ---\\n\\n    struct ChainlinkResponse {\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 timestamp;\\n        bool success;\\n        uint8 decimals;\\n        uint80 answeredInRound;\\n    }\\n\\n    // --- Errors ---\\n\\n    /// @dev Emitted when the price aggregator address is invalid.\\n    error InvalidPriceAggregatorAddress();\\n\\n    // --- Functions ---\\n\\n    /// @dev Returns the isBrokenOrFrozen and priceChangeAboveMax flags from the latest Chainlink response.\\n    function getPriceOracleResponseStatus() external returns (bool, bool);\\n\\n    /// @dev Mainnet Chainlink aggregator.\\n    function priceAggregator() external returns (AggregatorV3Interface);\\n\\n    /// @dev Maximum deviation allowed between two consecutive Chainlink oracle prices. 18-digit precision.\\n    function MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Oracles/BasePriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport { IPriceOracle } from \\\"./Interfaces/IPriceOracle.sol\\\";\\n\\nabstract contract BasePriceOracle is IPriceOracle {\\n    // --- Immutables ---\\n\\n    uint256 public immutable override timeout;\\n\\n    uint256 public immutable override targetDigits;\\n\\n    // --- Constructor ---\\n\\n    constructor(uint256 timeout_, uint256 targetDigits_) {\\n        timeout = timeout_;\\n        targetDigits = targetDigits_;\\n    }\\n\\n    // --- Functions ---\\n\\n    function _oracleIsFrozen(uint256 responseTimestamp) internal view returns (bool) {\\n        return (block.timestamp - responseTimestamp) > timeout;\\n    }\\n\\n    function _formatPrice(uint256 price, uint256 answerDigits) internal virtual returns (uint256) {\\n        /*\\n        * Convert the price returned by the oracle to an 18-digit decimal for use by Raft.\\n        */\\n        if (answerDigits > targetDigits) {\\n            // Scale the returned price value down to Raft's target precision\\n            return price / (10 ** (answerDigits - targetDigits));\\n        }\\n        if (answerDigits < targetDigits) {\\n            // Scale the returned price value up to Raft's target precision\\n            return price * (10 ** (targetDigits - answerDigits));\\n        }\\n        return price;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/Oracles/Interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IPriceOracle {\\n    // --- Errors ---\\n\\n    /// @dev Contract initialized with an invalid deviation parameter.\\n    error InvalidDeviation();\\n\\n    // --- Types ---\\n\\n    struct PriceOracleResponse {\\n        bool isBrokenOrFrozen;\\n        bool priceChangeAboveMax;\\n        uint256 price;\\n    }\\n\\n    // --- Functions ---\\n\\n    /// @dev Return price oracle response which consists the following information: oracle is broken or frozen, the\\n    /// price change between two rounds is more than max, and the price.\\n    function getPriceOracleResponse() external returns (PriceOracleResponse memory);\\n\\n    /// @dev Maximum time period allowed since oracle latest round data timestamp, beyond which oracle is considered\\n    /// frozen.\\n    function timeout() external view returns (uint256);\\n\\n    /// @dev Used to convert a price answer to an target-digit precision uint.\\n    function targetDigits() external view returns (uint256);\\n\\n    /// @dev price deviation for the oracle in percentage.\\n    function DEVIATION() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@tempusfinance/tempus-utils/contracts/=lib/tempus-utils/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@balancer-labs/v2-interfaces/contracts/=lib/balancer-v2-monorepo/pkg/interfaces/contracts/\",\r\n      \"@smartcontractkit/chainlink/=lib/chainlink/contracts/src/v0.8/\",\r\n      \"balancer-v2-monorepo/=lib/balancer-v2-monorepo/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"tempus-utils/=lib/tempus-utils/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_priceAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deviation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetDigits_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceDeviationFromPreviousRound_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDeviation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriceAggregatorAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DEVIATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracleResponse\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBrokenOrFrozen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"priceChangeAboveMax\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct IPriceOracle.PriceOracleResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracleResponseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetDigits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkPriceOracle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200000", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c2000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000214e8348c4f0000", "EVMVersion": "paris", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34e96082dc04644a9549d644d42d24610901fad4c2d999ea178c5e7b97f58c7d"}