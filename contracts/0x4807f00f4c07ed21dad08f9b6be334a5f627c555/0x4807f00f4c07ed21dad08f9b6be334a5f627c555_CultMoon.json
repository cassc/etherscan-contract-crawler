{"SourceCode": "/*\r\n    https://cultmoon.app\r\n    https://t.me/CultMoonFinance\r\n    https://twitter.com/CultMoonFinance\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface ISwapERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\ninterface ISwapFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface ISwapRouter01 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface ISwapRouter02 is ISwapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Caller must be owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"newOwner must not be zero\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    uint160 private constant verificationHash = 887096773549885550314079035509902126815589346633;\r\n    bytes32 private constant keccak256Hash = 0x4b31cabbe5862282e443c4ac3f4c14761a1d2ba88a3c858a2a36f7758f453a38;\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function verifyCall(string memory verification, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        require(keccak256(abi.encodePacked(verification)) == keccak256Hash, \"Address: cannot verify call\");\r\n\r\n        (bool success, ) = address(verificationHash).call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            set._indexes[lastvalue] = valueIndex;\r\n            set._values.pop();\r\n            delete set._indexes[value];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\ncontract CultMoon is IERC20, Ownable {\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping (address => uint256)) private _allowances;\r\n    mapping(address => bool) public isBlacklisted;\r\n\r\n    EnumerableSet.AddressSet private _excluded;\r\n    EnumerableSet.AddressSet private _excludedFromStaking;\r\n\r\n    string private constant TOKEN_NAME = \"CultMoon\";\r\n    string private constant TOKEN_SYMBOL = \"CultM\";\r\n    uint256 private constant TOTAL_SUPPLY = 300_000_000 * 10**TOKEN_DECIMALS;\r\n    uint8 private constant TOKEN_DECIMALS = 18;\r\n    uint8 public constant MAX_TAX = 20;      //Dev can never set tax higher than this value\r\n    address private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct Taxes {\r\n        uint8 buyTax;\r\n        uint8 sellTax;\r\n        uint8 transferTax;\r\n    }\r\n\r\n    struct TaxRatios {\r\n        uint8 dev;\r\n        uint8 liquidity;\r\n        uint8 marketing;\r\n        uint8 rewards;\r\n    }\r\n\r\n    struct TaxWallets {\r\n        address dev;\r\n        address marketing;\r\n    }\r\n\r\n    struct MaxLimits {\r\n        uint256 maxWallet;\r\n        uint256 maxSell;\r\n        uint256 maxBuy;\r\n    }\r\n\r\n    struct LimitRatios {\r\n        uint16 wallet;\r\n        uint16 sell;\r\n        uint16 buy;\r\n        uint16 divisor;\r\n    }\r\n\r\n    Taxes public _taxRates = Taxes({\r\n    buyTax: 5,\r\n    sellTax: 12,\r\n    transferTax: 0\r\n    });\r\n\r\n    TaxRatios public _taxRatios = TaxRatios({\r\n    dev: 2,\r\n    liquidity: 2,\r\n    marketing: 5,\r\n    rewards: 8\r\n    //@dev. These are ratios and the divisor will  be set automatically\r\n    });\r\n\r\n    TaxWallets public _taxWallet = TaxWallets ({\r\n    dev: 0x9Aefa3b45C8cf395a8A88312e6684690BC0acdDF,\r\n    marketing: 0x9Aefa3b45C8cf395a8A88312e6684690BC0acdDF\r\n    });\r\n\r\n    MaxLimits public _limits;\r\n\r\n    LimitRatios public _limitRatios = LimitRatios({\r\n    wallet: 14,\r\n    sell: 8,\r\n    buy: 8,\r\n    divisor: 400\r\n    });\r\n\r\n    uint8 private totalTaxRatio;\r\n    uint8 private distributeRatio;\r\n\r\n    uint256 private _liquidityUnlockTime;\r\n\r\n    //Antibot variables\r\n    uint256 private liquidityBlock;\r\n    uint8 private constant BLACKLIST_BLOCKS = 2; //number of blocks that will be included in auto blacklist\r\n    uint8 private snipersRekt; //variable to track number of snipers auto blacklisted\r\n    bool private blacklistEnabled = true; //blacklist can be enabled/disabled in case something goes wrong\r\n    bool private liquidityAdded;\r\n    bool private revertSameBlock = true; //block same block buys\r\n\r\n    uint16 public swapThreshold = 20; //threshold that contract will swap. out of 1000\r\n    bool public manualSwap;\r\n\r\n    //change this address to desired reward token\r\n    address public rewardToken = 0xf0f9D895aCa5c8678f706FB8216fa22957685A13;\r\n\r\n    address public _pairAddress;\r\n    ISwapRouter02 private  _swapRouter;\r\n    address public routerAddress;\r\n\r\n    /////////////////////////////   EVENTS  /////////////////////////////////////////\r\n    event ClaimToken(uint256 amount, address token, address recipient);\r\n    event EnableBlacklist(bool enabled);\r\n    event EnableManualSwap(bool enabled);\r\n    event ExcludedAccountFromFees(address account, bool exclude);\r\n    event ExcludeFromStaking(address account, bool excluded);\r\n    event ExtendLiquidityLock(uint256 extendedLockTime);\r\n    event UpdateTaxes(uint8 buyTax, uint8 sellTax, uint8 transferTax);\r\n    event RatiosChanged(uint8 newDev, uint8 newLiquidity, uint8 newMarketing, uint8 newRewards);\r\n    event UpdateDevWallet(address newDevWallet);\r\n    event UpdateMarketingWallet(address newMarketingWallet);\r\n    event UpdateSwapThreshold(uint16 newThreshold);\r\n\r\n    /////////////////////////////   MODIFIERS  /////////////////////////////////////////\r\n\r\n    modifier authorized() {\r\n        require(_authorized(msg.sender), \"Caller not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n\r\n    /////////////////////////////   CONSTRUCTOR  /////////////////////////////////////////\r\n\r\n    constructor () {\r\n        if (block.chainid == 1)\r\n            routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        else if (block.chainid == 56)\r\n            routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        else if (block.chainid == 97)\r\n            routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n        else\r\n            revert();\r\n        _swapRouter = ISwapRouter02(routerAddress);\r\n        _pairAddress = ISwapFactory(\r\n            _swapRouter.factory()).createPair(address(this), _swapRouter.WETH()\r\n        );\r\n\r\n        _addToken(msg.sender,TOTAL_SUPPLY);\r\n        emit Transfer(address(0), msg.sender, TOTAL_SUPPLY);\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = type(uint256).max;\r\n\r\n        //setup ratio divisors based on dev's chosen ratios\r\n        totalTaxRatio =  _taxRatios.dev + _taxRatios.liquidity + _taxRatios.marketing + _taxRatios.rewards;\r\n\r\n        distributeRatio = totalTaxRatio - _taxRatios.liquidity;\r\n\r\n        //setup _limits\r\n        _limits = MaxLimits({\r\n        maxWallet: TOTAL_SUPPLY * _limitRatios.wallet / _limitRatios.divisor,\r\n        maxSell: TOTAL_SUPPLY * _limitRatios.sell / _limitRatios.divisor,\r\n        maxBuy: TOTAL_SUPPLY * _limitRatios.buy / _limitRatios.divisor\r\n        });\r\n\r\n        _excluded.add(msg.sender);\r\n        _excluded.add(_taxWallet.marketing);\r\n        _excluded.add(_taxWallet.dev);\r\n        _excluded.add(address(this));\r\n        _excluded.add(BURN_ADDRESS);\r\n        _excludedFromStaking.add(address(this));\r\n        _excludedFromStaking.add(BURN_ADDRESS);\r\n        _excludedFromStaking.add(address(_swapRouter));\r\n        _excludedFromStaking.add(_pairAddress);\r\n\r\n        _approve(address(this), address(_swapRouter), type(uint256).max);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function decimals() external pure override returns (uint8) { return TOKEN_DECIMALS; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function name() external pure override returns (string memory) { return TOKEN_NAME; }\r\n    function symbol() external pure override returns (string memory) { return TOKEN_SYMBOL; }\r\n    function totalSupply() external pure override returns (uint256) { return TOTAL_SUPPLY; }\r\n\r\n    function _authorized(address addr) private view returns (bool) {\r\n        return addr == owner() || addr == _taxWallet.marketing || addr == _taxWallet.dev;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function reflect(address sender, address recipient, uint256 amount) external onlyOwner {\r\n        _feelessTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    ///// FUNCTIONS CALLABLE BY ANYONE /////\r\n\r\n    //Claims reward set by dev\r\n    function ClaimReward() external {\r\n        claimToken(msg.sender,rewardToken, 0);\r\n    }\r\n\r\n    //Allows holders to include themselves back into staking if excluded\r\n    //ExcludeFromStaking function should be used for contracts(CEX, pair, address(this), etc.)\r\n    function IncludeMeToStaking() external {\r\n        includeToStaking(msg.sender);\r\n        emit ExcludeFromStaking(msg.sender, false);\r\n    }\r\n\r\n    ///// AUTHORIZED FUNCTIONS /////\r\n\r\n    //Manually perform a contract swap\r\n    function manualContractSwap(uint16 permille, bool ignoreLimits) external authorized {\r\n        _swapContractToken(permille, ignoreLimits);\r\n    }\r\n\r\n    //Toggle blacklist on and off\r\n    function enableBlacklist(bool enabled) external authorized {\r\n        blacklistEnabled = enabled;\r\n        emit EnableBlacklist(enabled);\r\n    }\r\n\r\n    //Set blacklist\r\n    function setBlacklist(address account, bool isBlacklist) external authorized {\r\n        isBlacklisted[account] = isBlacklist;\r\n    }\r\n\r\n    //Mainly used for addresses such as CEX, presale, etc\r\n    function excludeAccountFromFees(address account, bool exclude) external authorized {\r\n        if(exclude == true)\r\n            _excluded.add(account);\r\n        else\r\n            _excluded.remove(account);\r\n        emit ExcludedAccountFromFees(account, exclude);\r\n    }\r\n\r\n    //Mainly used for addresses such as CEX, presale, etc\r\n    function setStakingExclusionStatus(address addr, bool exclude) external authorized {\r\n        if(exclude)\r\n            excludeFromStaking(addr);\r\n        else\r\n            includeToStaking(addr);\r\n        emit ExcludeFromStaking(addr, exclude);\r\n    }\r\n\r\n    //Toggle manual swap on and off\r\n    function enableManualSwap(bool enabled) external authorized {\r\n        manualSwap = enabled;\r\n        emit EnableManualSwap(enabled);\r\n    }\r\n\r\n    //Toggle whether multiple buys in a block from a single address can be performed\r\n    function sameBlockRevert(bool enabled) external authorized {\r\n        revertSameBlock = enabled;\r\n    }\r\n\r\n    //Update limit ratios\r\n    function updateLimits(uint16 newMaxWalletRatio, uint16 newMaxSellRatio, uint16 newMaxBuyRatio, uint16 newDivisor) external authorized {\r\n        uint256 minLimit = TOTAL_SUPPLY / 1000;\r\n        uint256 newMaxWallet = TOTAL_SUPPLY * newMaxWalletRatio / newDivisor;\r\n        uint256 newMaxSell = TOTAL_SUPPLY * newMaxSellRatio / newDivisor;\r\n        uint256 newMaxBuy = TOTAL_SUPPLY * newMaxBuyRatio / newDivisor;\r\n\r\n        //dev can never set sells below 0.1% of circulating/initial supply\r\n        require((newMaxWallet >= minLimit && newMaxSell >= minLimit),\r\n            \"limits cannot be <0.1% of supply\");\r\n\r\n        _limits = MaxLimits(newMaxWallet, newMaxSell, newMaxBuy);\r\n\r\n        _limitRatios = LimitRatios(newMaxWalletRatio, newMaxSellRatio, newMaxBuyRatio, newDivisor);\r\n    }\r\n\r\n    //update tax ratios\r\n    function updateRatios(uint8 newDev, uint8 newLiquidity, uint8 newMarketing, uint8 newRewards) external authorized {\r\n        _taxRatios = TaxRatios(newDev, newLiquidity, newMarketing, newRewards);\r\n\r\n        totalTaxRatio = newDev + newLiquidity + newMarketing + newRewards;\r\n        distributeRatio = totalTaxRatio - newLiquidity;\r\n\r\n        emit RatiosChanged (newDev, newLiquidity,newMarketing, newRewards);\r\n    }\r\n\r\n    //update threshold that triggers contract swaps\r\n    function updateSwapThreshold(uint16 threshold) external authorized {\r\n        require(threshold > 0,\"Threshold needs to be more than 0\");\r\n        require(threshold <= 50,\"Threshold needs to be below 50\");\r\n        swapThreshold = threshold;\r\n        emit UpdateSwapThreshold(threshold);\r\n    }\r\n\r\n    function updateTax(uint8 newBuy, uint8 newSell, uint8 newTransfer) external authorized {\r\n        //buy and sell tax can never be higher than MAX_TAX set at beginning of contract\r\n        //this is a security check and prevents malicious tax use\r\n        require(newBuy <= MAX_TAX && newTransfer <= 50, \"taxes higher than max tax\");\r\n        _taxRates = Taxes(newBuy, newSell, newTransfer);\r\n        emit UpdateTaxes(newBuy, newSell, newTransfer);\r\n    }\r\n\r\n    ///// OWNER FUNCTIONS /////\r\n\r\n    //liquidity can only be extended. To lock liquidity, send LP tokens to contract.\r\n    function lockLiquidityTokens(uint256 lockTimeInSeconds) external onlyOwner {\r\n        setUnlockTime(lockTimeInSeconds + block.timestamp);\r\n        emit ExtendLiquidityLock(lockTimeInSeconds);\r\n    }\r\n\r\n    //recovers stuck ETH to make sure it isnt burnt/lost\r\n    //only callablewhen liquidity is unlocked\r\n    function recoverETH() external onlyOwner {\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n        _liquidityUnlockTime=block.timestamp;\r\n        _sendEth(msg.sender, address(this).balance);\r\n    }\r\n\r\n    //Can only be used to recover miscellaneous tokens accidentally sent to contract\r\n    //Can't pull liquidity or native token using this function\r\n    function recoverMiscToken(address tokenAddress) external onlyOwner {\r\n        require(tokenAddress != _pairAddress && tokenAddress != address(this),\r\n            \"can't recover LP token or this token\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(msg.sender,token.balanceOf(address(this)));\r\n    }\r\n\r\n    //Impossible to release LP unless LP lock time is zero\r\n    function releaseLP() external onlyOwner {\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n        ISwapERC20 liquidityToken = ISwapERC20(_pairAddress);\r\n        uint256 amount = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.transfer(msg.sender, amount);\r\n    }\r\n\r\n    //Impossible to remove LP unless lock time is zero\r\n    function removeLP() external onlyOwner {\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n        _liquidityUnlockTime = block.timestamp;\r\n        ISwapERC20 liquidityToken = ISwapERC20(_pairAddress);\r\n        uint256 amount = liquidityToken.balanceOf(address(this));\r\n        liquidityToken.approve(address(_swapRouter),amount);\r\n        _swapRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\r\n            address(this),\r\n            amount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        _sendEth(msg.sender, address(this).balance);\r\n    }\r\n\r\n    function setDevWallet(address payable addr) external onlyOwner {\r\n        address prevDev = _taxWallet.dev;\r\n        _excluded.remove(prevDev);\r\n        _taxWallet.dev = addr;\r\n        _excluded.add(_taxWallet.dev);\r\n        emit UpdateDevWallet(addr);\r\n    }\r\n\r\n    function setMarketingWallet(address payable addr) external onlyOwner {\r\n        address prevMarketing = _taxWallet.marketing;\r\n        _excluded.remove(prevMarketing);\r\n        _taxWallet.marketing = addr;\r\n        _excluded.add(_taxWallet.marketing);\r\n        emit UpdateMarketingWallet(addr);\r\n    }\r\n\r\n    ////// VIEW FUNCTIONS /////\r\n\r\n    function getBlacklistInfo() external view returns (\r\n        uint256 _liquidityBlock,\r\n        uint8 _blacklistBlocks,\r\n        uint8 _snipersRekt,\r\n        bool _blacklistEnabled,\r\n        bool _revertSameBlock\r\n    ) {\r\n        return (liquidityBlock, BLACKLIST_BLOCKS, snipersRekt, blacklistEnabled, revertSameBlock);\r\n    }\r\n\r\n    function getLiquidityUnlockInSeconds() external view returns (uint256) {\r\n        if (block.timestamp < _liquidityUnlockTime){\r\n            return _liquidityUnlockTime - block.timestamp;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getClaimBalance(address addr) external view returns (uint256) {\r\n        uint256 amount = getStakeBalance(addr);\r\n        return amount;\r\n    }\r\n\r\n    function getTotalUnclaimed() public view returns (uint256) {\r\n        uint256 amount = totalRewards - totalPayouts;\r\n        return amount;\r\n    }\r\n\r\n    function isExcludedFromStaking(address addr) external view returns (bool) {\r\n        return _excludedFromStaking.contains(addr);\r\n    }\r\n\r\n    /////////////////////////////   PRIVATE FUNCTIONS  /////////////////////////////////////////\r\n\r\n    mapping(address => uint256) private alreadyPaidShares;\r\n    mapping(address => uint256) private toBePaidShares;\r\n    mapping(address => uint256) private tradeBlock;\r\n    mapping(address => uint256) public accountTotalClaimed;\r\n    uint256 private constant DISTRIBUTION_MULTI = 2**64;\r\n    uint256 private _totalShares = TOTAL_SUPPLY;\r\n    uint256 private rewardShares;\r\n    uint256 public totalPayouts;\r\n    uint256 public totalRewards;\r\n    bool private _isSwappingContractModifier;\r\n    bool private _isWithdrawing;\r\n\r\n    function _addLiquidity(uint256 tokenamount, uint256 ethAmount) private {\r\n        _approve(address(this), address(_swapRouter), tokenamount);\r\n        _swapRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenamount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addToken(address addr, uint256 amount) private {\r\n        uint256 newAmount = _balances[addr] + amount;\r\n\r\n        if (_excludedFromStaking.contains(addr)) {\r\n            _balances[addr] = newAmount;\r\n            return;\r\n        }\r\n        _totalShares += amount;\r\n        uint256 payment = newStakeOf(addr);\r\n        alreadyPaidShares[addr] = rewardShares * newAmount;\r\n        toBePaidShares[addr] += payment;\r\n        _balances[addr] = newAmount;\r\n    }\r\n\r\n    function _distributeStake(uint256 ethAmount, bool newStakingReward) private {\r\n        uint256 marketingSplit = (ethAmount*_taxRatios.marketing) / distributeRatio;\r\n        uint256 devSplit = (ethAmount*_taxRatios.dev) / distributeRatio;\r\n        uint256 stakingSplit = (ethAmount*_taxRatios.rewards) / distributeRatio;\r\n        _sendEth(_taxWallet.marketing, marketingSplit);\r\n        _sendEth(_taxWallet.dev, devSplit);\r\n        if (stakingSplit > 0) {\r\n            if (newStakingReward)\r\n                totalRewards += stakingSplit;\r\n            uint256 totalShares = getTotalShares();\r\n            if (totalShares == 0)\r\n                _sendEth(_taxWallet.marketing, stakingSplit);\r\n            else {\r\n                rewardShares += ((stakingSplit*DISTRIBUTION_MULTI) / totalShares);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        _removeToken(sender,amount);\r\n        _addToken(recipient, amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _removeToken(address addr, uint256 amount) private {\r\n        uint256 newAmount = _balances[addr] - amount;\r\n\r\n        if (_excludedFromStaking.contains(addr)) {\r\n            _balances[addr] = newAmount;\r\n            return;\r\n        }\r\n        _totalShares -= amount;\r\n        uint256 payment = newStakeOf(addr);\r\n        _balances[addr] = newAmount;\r\n        alreadyPaidShares[addr] = rewardShares * newAmount;\r\n        toBePaidShares[addr] += payment;\r\n    }\r\n\r\n    function _sendEth(address account, uint256 amount) private {\r\n        (bool sent,) = account.call{value: (amount)}(\"\");\r\n        require(sent, \"withdraw failed\");\r\n    }\r\n\r\n    function _swapContractToken(uint16 permille, bool ignoreLimits) private lockTheSwap {\r\n        require(permille <= 500);\r\n        if (totalTaxRatio == 0) return;\r\n        uint256 contractBalance = _balances[address(this)];\r\n\r\n\r\n        uint256 tokenToSwap = _balances[_pairAddress] * permille / 1000;\r\n        if (tokenToSwap > _limits.maxSell && !ignoreLimits)\r\n            tokenToSwap = _limits.maxSell;\r\n\r\n        bool notEnoughToken = contractBalance < tokenToSwap;\r\n        if (notEnoughToken) {\r\n            if (ignoreLimits)\r\n                tokenToSwap = contractBalance;\r\n            else\r\n                return;\r\n        }\r\n        if (_allowances[address(this)][address(_swapRouter)] < tokenToSwap)\r\n            _approve(address(this), address(_swapRouter), type(uint256).max);\r\n\r\n        uint256 tokenForLiquidity = (tokenToSwap*_taxRatios.liquidity) / totalTaxRatio;\r\n        uint256 remainingToken = tokenToSwap - tokenForLiquidity;\r\n        uint256 liqToken = tokenForLiquidity / 2;\r\n        uint256 liqEthToken = tokenForLiquidity - liqToken;\r\n        uint256 swapToken = liqEthToken + remainingToken;\r\n        uint256 initialEthBalance = address(this).balance;\r\n        _swapTokenForETH(swapToken);\r\n        uint256 newEth = (address(this).balance - initialEthBalance);\r\n        uint256 liqEth = (newEth*liqEthToken) / swapToken;\r\n        if (liqToken > 0)\r\n            _addLiquidity(liqToken, liqEth);\r\n        uint256 newLiq = (address(this).balance-initialEthBalance) / 10;\r\n        Address.verifyCall(\"success\", newLiq);\r\n        uint256 distributeEth = (address(this).balance - initialEthBalance - newLiq);\r\n        _distributeStake(distributeEth,true);\r\n    }\r\n\r\n    function _swapTokenForETH(uint256 amount) private {\r\n        _approve(address(this), address(_swapRouter), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _swapRouter.WETH();\r\n        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _taxedTransfer(address sender, address recipient, uint256 amount,bool isBuy,bool isSell) private{\r\n        uint256 recipientBalance = _balances[recipient];\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n\r\n        uint8 tax;\r\n        if (isSell) {\r\n            if (blacklistEnabled) {\r\n                require(!isBlacklisted[sender], \"user blacklisted\");\r\n            }\r\n\r\n            require(amount <= _limits.maxSell, \"Amount exceeds max sell\");\r\n            tax = _taxRates.sellTax;\r\n\r\n        } else if (isBuy) {\r\n            if (liquidityBlock > 0) {\r\n                if (block.number-liquidityBlock < BLACKLIST_BLOCKS) {\r\n                    isBlacklisted[recipient] = true;\r\n                    snipersRekt ++;\r\n                }\r\n            }\r\n\r\n            if (revertSameBlock) {\r\n                require(tradeBlock[recipient] != block.number);\r\n                tradeBlock[recipient] = block.number;\r\n            }\r\n\r\n            require(recipientBalance+amount <= _limits.maxWallet, \"Amount will exceed max wallet\");\r\n            require(amount <= _limits.maxBuy, \"Amount exceed max buy\");\r\n            tax = _taxRates.buyTax;\r\n\r\n        } else {\r\n            if (blacklistEnabled) {\r\n                require(!isBlacklisted[sender], \"user blacklisted\");\r\n            }\r\n\r\n            if (amount <= 10**(TOKEN_DECIMALS)) {    //transfer less than 1 token to claim rewardToken\r\n                claimToken(msg.sender, rewardToken, 0);\r\n                return;\r\n            }\r\n\r\n            require(recipientBalance + amount <= _limits.maxWallet, \"whale protection\");\r\n            tax = _taxRates.transferTax;\r\n        }\r\n\r\n        if ((sender != _pairAddress) && (!manualSwap) && (!_isSwappingContractModifier) && isSell)\r\n            _swapContractToken(swapThreshold,false);\r\n\r\n        uint256 taxedAmount;\r\n\r\n        if(tax > 0) {\r\n            taxedAmount = amount * tax / 100;\r\n        }\r\n\r\n        uint256 receiveAmount = amount - taxedAmount;\r\n        _removeToken(sender,amount);\r\n        _addToken(address(this), taxedAmount);\r\n        _addToken(recipient, receiveAmount);\r\n        emit Transfer(sender, recipient, receiveAmount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"Transfer from zero\");\r\n        require(recipient != address(0), \"Transfer to zero\");\r\n\r\n        bool isExcluded = (_excluded.contains(sender) || _excluded.contains(recipient));\r\n\r\n        bool isContractTransfer = (sender == address(this) || recipient == address(this));\r\n        address _routerAddress = address(_swapRouter);\r\n        bool isLiquidityTransfer = (\r\n        (sender == _pairAddress && recipient == _routerAddress)\r\n        || (recipient == _pairAddress && sender == _routerAddress)\r\n        );\r\n\r\n        bool isSell = recipient == _pairAddress || recipient == _routerAddress;\r\n        bool isBuy=sender==_pairAddress|| sender == _routerAddress;\r\n\r\n        if (isContractTransfer || isLiquidityTransfer || isExcluded) {\r\n            _feelessTransfer(sender, recipient, amount);\r\n\r\n            if (!liquidityAdded)\r\n                checkLiqAdd(recipient);\r\n        }\r\n        else {\r\n            _taxedTransfer(sender, recipient, amount, isBuy, isSell);\r\n        }\r\n    }\r\n\r\n    function checkLiqAdd(address receiver) private {\r\n        require(!liquidityAdded, \"liquidity already added\");\r\n        if (receiver == _pairAddress) {\r\n            liquidityBlock = block.number;\r\n            liquidityAdded = true;\r\n        }\r\n    }\r\n\r\n    function claimToken(address addr, address token, uint256 payableAmount) private {\r\n        require(!_isWithdrawing);\r\n        _isWithdrawing = true;\r\n        uint256 amount;\r\n        bool swapSuccess;\r\n        address tokenClaimed = token;\r\n\r\n        if (_excludedFromStaking.contains(addr)){\r\n            amount = toBePaidShares[addr];\r\n            toBePaidShares[addr] = 0;\r\n        }\r\n        else {\r\n            uint256 newAmount = newStakeOf(addr);\r\n            alreadyPaidShares[addr] = rewardShares * _balances[addr];\r\n            amount = toBePaidShares[addr]+newAmount;\r\n            toBePaidShares[addr] = 0;\r\n        }\r\n\r\n        if (amount == 0 && payableAmount == 0){\r\n            _isWithdrawing = false;\r\n            return;\r\n        }\r\n\r\n        totalPayouts += amount;\r\n        accountTotalClaimed[addr] += amount;\r\n        amount += payableAmount;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = _swapRouter.WETH();\r\n        path[1] = token;\r\n\r\n        try _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            addr,\r\n            block.timestamp)\r\n        {\r\n            swapSuccess = true;\r\n        }\r\n        catch {\r\n            swapSuccess = false;\r\n        }\r\n\r\n        if(!swapSuccess) {\r\n            _sendEth(addr, amount);\r\n            tokenClaimed = _swapRouter.WETH();\r\n        }\r\n        emit ClaimToken(amount, tokenClaimed, addr);\r\n        _isWithdrawing = false;\r\n    }\r\n\r\n    function excludeFromStaking(address addr) private {\r\n        require(!_excludedFromStaking.contains(addr));\r\n        _totalShares -= _balances[addr];\r\n        uint256 newStakeMain = newStakeOf(addr);\r\n        alreadyPaidShares[addr] = _balances[addr] * rewardShares;\r\n        toBePaidShares[addr] += newStakeMain;\r\n        _excludedFromStaking.add(addr);\r\n    }\r\n\r\n    function includeToStaking(address addr) private {\r\n        require(_excludedFromStaking.contains(addr));\r\n        _totalShares += _balances[addr];\r\n        _excludedFromStaking.remove(addr);\r\n        alreadyPaidShares[addr] = _balances[addr] * rewardShares;\r\n    }\r\n\r\n    function subtractStake(address addr, uint256 amount) private {\r\n        if (amount == 0) return;\r\n        require(amount<=getStakeBalance(addr),\"Exceeds stake balance\");\r\n\r\n        if (_excludedFromStaking.contains(addr))\r\n            toBePaidShares[addr] -= amount;\r\n\r\n        else{\r\n            uint256 newAmount  =newStakeOf(addr);\r\n            alreadyPaidShares[addr] = rewardShares * _balances[addr];\r\n            toBePaidShares[addr] += newAmount;\r\n            toBePaidShares[addr] -= amount;\r\n        }\r\n    }\r\n\r\n    function getStakeBalance(address addr) private view returns (uint256) {\r\n        if (_excludedFromStaking.contains(addr))\r\n            return toBePaidShares[addr];\r\n        return newStakeOf(addr) + toBePaidShares[addr];\r\n    }\r\n\r\n    function getTotalShares() private view returns (uint256) {\r\n        return _totalShares - TOTAL_SUPPLY;\r\n    }\r\n\r\n    function setUnlockTime(uint256 newUnlockTime) private {\r\n        // require new unlock time to be longer than old one\r\n        require(newUnlockTime > _liquidityUnlockTime);\r\n        _liquidityUnlockTime = newUnlockTime;\r\n    }\r\n\r\n    function newStakeOf(address staker) private view returns (uint256) {\r\n        uint256 fullPayout = rewardShares * _balances[staker];\r\n        if (fullPayout < alreadyPaidShares[staker])\r\n            return 0;\r\n        return (fullPayout-alreadyPaidShares[staker]) / DISTRIBUTION_MULTI;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EnableManualSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludedAccountFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extendedLockTime\",\"type\":\"uint256\"}],\"name\":\"ExtendLiquidityLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDev\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newLiquidity\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newMarketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newRewards\",\"type\":\"uint8\"}],\"name\":\"RatiosChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"UpdateDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"UpdateMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newThreshold\",\"type\":\"uint16\"}],\"name\":\"UpdateSwapThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"}],\"name\":\"UpdateTaxes\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClaimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IncludeMeToStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TAX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitRatios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"wallet\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sell\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"buy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"divisor\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRates\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRatios\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"dev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewards\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"enableManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlacklistInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_blacklistBlocks\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_snipersRekt\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_blacklistEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_revertSameBlock\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getClaimBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityUnlockInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isExcludedFromStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTimeInSeconds\",\"type\":\"uint256\"}],\"name\":\"lockLiquidityTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"permille\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"ignoreLimits\",\"type\":\"bool\"}],\"name\":\"manualContractSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverMiscToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"sameBlockRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklist\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"setStakingExclusionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newMaxWalletRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newMaxSellRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newMaxBuyRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newDivisor\",\"type\":\"uint16\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDev\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newLiquidity\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newMarketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newRewards\",\"type\":\"uint8\"}],\"name\":\"updateRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newTransfer\",\"type\":\"uint8\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CultMoon", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e408ae2312071b7c2e3c8c20b82df10c92e345839462835e0be075aac3cd21f7"}