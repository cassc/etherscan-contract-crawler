{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Space.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC4824 } from \\\"src/interfaces/IERC4824.sol\\\";\\nimport { ISpace, ISpaceActions, ISpaceState, ISpaceOwnerActions } from \\\"src/interfaces/ISpace.sol\\\";\\nimport {\\n    Choice,\\n    FinalizationStatus,\\n    IndexedStrategy,\\n    Proposal,\\n    ProposalStatus,\\n    Strategy,\\n    UpdateSettingsCalldata,\\n    InitializeCalldata,\\n    TRUE,\\n    FALSE\\n} from \\\"src/types.sol\\\";\\nimport { IVotingStrategy } from \\\"src/interfaces/IVotingStrategy.sol\\\";\\nimport { IExecutionStrategy } from \\\"src/interfaces/IExecutionStrategy.sol\\\";\\nimport { IProposalValidationStrategy } from \\\"src/interfaces/IProposalValidationStrategy.sol\\\";\\nimport { SXUtils } from \\\"./utils/SXUtils.sol\\\";\\nimport { BitPacker } from \\\"./utils/BitPacker.sol\\\";\\n\\n/// @title Space Contract\\n/// @notice The core contract for Verifi.\\n///         A proxy of this contract should be deployed with the Proxy Factory.\\ncontract Space is ISpace, Initializable, IERC4824, UUPSUpgradeable, OwnableUpgradeable, ReentrancyGuard {\\n    using BitPacker for uint256;\\n    using SXUtils for IndexedStrategy[];\\n\\n    /// @dev Placeholder value to indicate the user does not want to update a string.\\n    /// @dev Evaluates to: `0xf2cda9b13ed04e585461605c0d6e804933ca828111bd94d4e6a96c75e8b048ba`.\\n    bytes32 private constant NO_UPDATE_HASH = keccak256(abi.encodePacked(\\\"No update\\\"));\\n\\n    /// @dev Placeholder value to indicate the user does not want to update an address.\\n    /// @dev Evaluates to: `0xf2cda9b13ed04e585461605c0d6e804933ca8281`.\\n    address private constant NO_UPDATE_ADDRESS = address(bytes20(keccak256(abi.encodePacked(\\\"No update\\\"))));\\n\\n    /// @dev Placeholder value to indicate the user does not want to update a uint32.\\n    /// @dev Evaluates to: `0xf2cda9b1`.\\n    uint32 private constant NO_UPDATE_UINT32 = uint32(bytes4(keccak256(abi.encodePacked(\\\"No update\\\"))));\\n\\n    /// @inheritdoc IERC4824\\n    string public daoURI;\\n    /// @inheritdoc ISpaceState\\n    uint32 public override maxVotingDuration;\\n    /// @inheritdoc ISpaceState\\n    uint32 public override minVotingDuration;\\n    /// @inheritdoc ISpaceState\\n    uint256 public override nextProposalId;\\n    /// @inheritdoc ISpaceState\\n    uint32 public override votingDelay;\\n    /// @inheritdoc ISpaceState\\n    uint256 public override activeVotingStrategies;\\n    /// @inheritdoc ISpaceState\\n    mapping(uint8 strategyIndex => Strategy strategy) public override votingStrategies;\\n    /// @inheritdoc ISpaceState\\n    uint8 public override nextVotingStrategyIndex;\\n    /// @inheritdoc ISpaceState\\n    Strategy public override proposalValidationStrategy;\\n    /// @inheritdoc ISpaceState\\n    mapping(address auth => uint256 allowed) public override authenticators;\\n    /// @inheritdoc ISpaceState\\n    mapping(uint256 proposalId => Proposal proposal) public override proposals;\\n    // @inheritdoc ISpaceState\\n    mapping(uint256 proposalId => mapping(Choice choice => uint256 votePower)) public override votePower;\\n    /// @inheritdoc ISpaceState\\n    mapping(uint256 proposalId => mapping(address voter => uint256 hasVoted)) public override voteRegistry;\\n\\n    /// @inheritdoc ISpaceActions\\n    function initialize(InitializeCalldata calldata input) external override initializer {\\n        if (input.votingStrategies.length == 0) revert EmptyArray();\\n        if (input.authenticators.length == 0) revert EmptyArray();\\n        if (input.votingStrategies.length != input.votingStrategyMetadataURIs.length) revert ArrayLengthMismatch();\\n\\n        __Ownable_init();\\n        transferOwnership(input.owner);\\n        _setDaoURI(input.daoURI);\\n        _setMaxVotingDuration(input.maxVotingDuration);\\n        _setMinVotingDuration(input.minVotingDuration);\\n        _setProposalValidationStrategy(input.proposalValidationStrategy);\\n        _setVotingDelay(input.votingDelay);\\n        _addVotingStrategies(input.votingStrategies);\\n        _addAuthenticators(input.authenticators);\\n\\n        nextProposalId = 1;\\n\\n        emit SpaceCreated(address(this), input);\\n    }\\n\\n    // ------------------------------------\\n    // |                                  |\\n    // |             SETTERS              |\\n    // |                                  |\\n    // ------------------------------------\\n\\n    /// @inheritdoc ISpaceOwnerActions\\n    // solhint-disable-next-line code-complexity\\n    function updateSettings(UpdateSettingsCalldata calldata input) external override onlyOwner {\\n        if ((input.minVotingDuration != NO_UPDATE_UINT32) && (input.maxVotingDuration != NO_UPDATE_UINT32)) {\\n            // Check that min and max VotingDuration are valid\\n            // We don't use the internal `_setMinVotingDuration` and `_setMaxVotingDuration` functions because\\n            // it would revert when `_minVotingDuration > maxVotingDuration` (when the new `_min` is\\n            // bigger than the current `max`).\\n            if (input.minVotingDuration > input.maxVotingDuration)\\n                revert InvalidDuration(input.minVotingDuration, input.maxVotingDuration);\\n\\n            minVotingDuration = input.minVotingDuration;\\n            emit MinVotingDurationUpdated(input.minVotingDuration);\\n\\n            maxVotingDuration = input.maxVotingDuration;\\n            emit MaxVotingDurationUpdated(input.maxVotingDuration);\\n        } else if (input.minVotingDuration != NO_UPDATE_UINT32) {\\n            _setMinVotingDuration(input.minVotingDuration);\\n            emit MinVotingDurationUpdated(input.minVotingDuration);\\n        } else if (input.maxVotingDuration != NO_UPDATE_UINT32) {\\n            _setMaxVotingDuration(input.maxVotingDuration);\\n            emit MaxVotingDurationUpdated(input.maxVotingDuration);\\n        }\\n\\n        if (input.votingDelay != NO_UPDATE_UINT32) {\\n            _setVotingDelay(input.votingDelay);\\n            emit VotingDelayUpdated(input.votingDelay);\\n        }\\n\\n        if (keccak256(abi.encodePacked(input.metadataURI)) != NO_UPDATE_HASH) {\\n            emit MetadataURIUpdated(input.metadataURI);\\n        }\\n\\n        if (keccak256(abi.encodePacked(input.daoURI)) != NO_UPDATE_HASH) {\\n            _setDaoURI(input.daoURI);\\n            emit DaoURIUpdated(input.daoURI);\\n        }\\n\\n        if (input.proposalValidationStrategy.addr != NO_UPDATE_ADDRESS) {\\n            _setProposalValidationStrategy(input.proposalValidationStrategy);\\n            emit ProposalValidationStrategyUpdated(\\n                input.proposalValidationStrategy,\\n                input.proposalValidationStrategyMetadataURI\\n            );\\n        }\\n\\n        if (input.authenticatorsToAdd.length > 0) {\\n            _addAuthenticators(input.authenticatorsToAdd);\\n            emit AuthenticatorsAdded(input.authenticatorsToAdd);\\n        }\\n\\n        if (input.authenticatorsToRemove.length > 0) {\\n            _removeAuthenticators(input.authenticatorsToRemove);\\n            emit AuthenticatorsRemoved(input.authenticatorsToRemove);\\n        }\\n\\n        if (input.votingStrategiesToAdd.length > 0) {\\n            if (input.votingStrategiesToAdd.length != input.votingStrategyMetadataURIsToAdd.length)\\n                revert ArrayLengthMismatch();\\n            _addVotingStrategies(input.votingStrategiesToAdd);\\n            emit VotingStrategiesAdded(input.votingStrategiesToAdd, input.votingStrategyMetadataURIsToAdd);\\n        }\\n\\n        if (input.votingStrategiesToRemove.length > 0) {\\n            _removeVotingStrategies(input.votingStrategiesToRemove);\\n            emit VotingStrategiesRemoved(input.votingStrategiesToRemove);\\n        }\\n    }\\n\\n    /// @dev Gates access to whitelisted authenticators only.\\n    modifier onlyAuthenticator() {\\n        if (authenticators[msg.sender] == FALSE) revert AuthenticatorNotWhitelisted();\\n        _;\\n    }\\n\\n    // ------------------------------------\\n    // |                                  |\\n    // |             GETTERS              |\\n    // |                                  |\\n    // ------------------------------------\\n\\n    /// @inheritdoc ISpaceState\\n    function getProposalStatus(uint256 proposalId) external view override returns (ProposalStatus) {\\n        Proposal memory proposal = proposals[proposalId];\\n        _assertProposalExists(proposal);\\n        return\\n            proposal.executionStrategy.getProposalStatus(\\n                proposal,\\n                votePower[proposalId][Choice.For],\\n                votePower[proposalId][Choice.Against],\\n                votePower[proposalId][Choice.Abstain]\\n            );\\n    }\\n\\n    // ------------------------------------\\n    // |                                  |\\n    // |             CORE                 |\\n    // |                                  |\\n    // ------------------------------------\\n\\n    /// @inheritdoc ISpaceActions\\n    function propose(\\n        address author,\\n        string calldata metadataURI,\\n        Strategy calldata executionStrategy,\\n        bytes calldata userProposalValidationParams\\n    ) external override onlyAuthenticator {\\n        if (\\n            !IProposalValidationStrategy(proposalValidationStrategy.addr).validate(\\n                author,\\n                proposalValidationStrategy.params,\\n                userProposalValidationParams\\n            )\\n        ) revert FailedToPassProposalValidation();\\n\\n        // Max block number of 2^32 - 1 = 4,294,967,295\\n        uint32 startBlockNumber = uint32(block.number) + votingDelay;\\n        uint32 minEndBlockNumber = startBlockNumber + minVotingDuration;\\n        uint32 maxEndBlockNumber = startBlockNumber + maxVotingDuration;\\n\\n        // The execution payload is the params of the supplied execution strategy struct.\\n        bytes32 executionPayloadHash = keccak256(executionStrategy.params);\\n\\n        Proposal memory proposal = Proposal(\\n            author,\\n            startBlockNumber,\\n            IExecutionStrategy(executionStrategy.addr),\\n            minEndBlockNumber,\\n            maxEndBlockNumber,\\n            FinalizationStatus.Pending,\\n            executionPayloadHash,\\n            activeVotingStrategies\\n        );\\n\\n        proposals[nextProposalId] = proposal;\\n        emit ProposalCreated(nextProposalId, author, proposal, metadataURI, executionStrategy.params);\\n\\n        nextProposalId++;\\n    }\\n\\n    /// @inheritdoc ISpaceActions\\n    function vote(\\n        address voter,\\n        uint256 proposalId,\\n        Choice choice,\\n        IndexedStrategy[] calldata userVotingStrategies,\\n        string calldata metadataURI\\n    ) external override onlyAuthenticator {\\n        Proposal memory proposal = proposals[proposalId];\\n        _assertProposalExists(proposal);\\n        if (block.number >= proposal.maxEndBlockNumber) revert VotingPeriodHasEnded();\\n        if (block.number < proposal.startBlockNumber) revert VotingPeriodHasNotStarted();\\n        if (proposal.finalizationStatus != FinalizationStatus.Pending) revert ProposalFinalized();\\n        if (voteRegistry[proposalId][voter] != FALSE) revert UserAlreadyVoted();\\n\\n        voteRegistry[proposalId][voter] = TRUE;\\n\\n        uint256 votingPower = _getCumulativePower(\\n            voter,\\n            proposal.startBlockNumber,\\n            userVotingStrategies,\\n            proposal.activeVotingStrategies\\n        );\\n        if (votingPower == 0) revert UserHasNoVotingPower();\\n        votePower[proposalId][choice] += votingPower;\\n\\n        if (bytes(metadataURI).length == 0) {\\n            emit VoteCast(proposalId, voter, choice, votingPower);\\n        } else {\\n            emit VoteCastWithMetadata(proposalId, voter, choice, votingPower, metadataURI);\\n        }\\n    }\\n\\n    /// @inheritdoc ISpaceActions\\n    function execute(uint256 proposalId, bytes calldata executionPayload) external override nonReentrant {\\n        Proposal storage proposal = proposals[proposalId];\\n        _assertProposalExists(proposal);\\n        Proposal memory cachedProposal = proposal;\\n        if (cachedProposal.executionPayloadHash != keccak256(executionPayload)) revert InvalidPayload();\\n        if (cachedProposal.finalizationStatus != FinalizationStatus.Pending) revert ProposalFinalized();\\n\\n        // We update the finalization status of the proposal in the space before calling the execution strategy\\n        // to avoid reentrancy issues.\\n        proposal.finalizationStatus = FinalizationStatus.Executed;\\n\\n        proposal.executionStrategy.execute(\\n            proposalId,\\n            cachedProposal,\\n            votePower[proposalId][Choice.For],\\n            votePower[proposalId][Choice.Against],\\n            votePower[proposalId][Choice.Abstain],\\n            executionPayload\\n        );\\n\\n        emit ProposalExecuted(proposalId);\\n    }\\n\\n    /// @inheritdoc ISpaceOwnerActions\\n    function cancel(uint256 proposalId) external override onlyOwner {\\n        Proposal storage proposal = proposals[proposalId];\\n        _assertProposalExists(proposal);\\n        if (proposal.finalizationStatus != FinalizationStatus.Pending) revert ProposalFinalized();\\n        proposal.finalizationStatus = FinalizationStatus.Cancelled;\\n        emit ProposalCancelled(proposalId);\\n    }\\n\\n    /// @inheritdoc ISpaceActions\\n    function updateProposal(\\n        address author,\\n        uint256 proposalId,\\n        Strategy calldata executionStrategy,\\n        string calldata metadataURI\\n    ) external override onlyAuthenticator {\\n        Proposal storage proposal = proposals[proposalId];\\n        _assertProposalExists(proposal);\\n        if (proposal.finalizationStatus != FinalizationStatus.Pending) revert ProposalFinalized();\\n        if (author != proposal.author) revert InvalidCaller();\\n        if (block.number >= proposal.startBlockNumber) revert VotingDelayHasPassed();\\n\\n        proposal.executionPayloadHash = keccak256(executionStrategy.params);\\n        proposal.executionStrategy = IExecutionStrategy(executionStrategy.addr);\\n\\n        emit ProposalUpdated(proposalId, executionStrategy, metadataURI);\\n    }\\n\\n    // ------------------------------------\\n    // |                                  |\\n    // |            INTERNAL              |\\n    // |                                  |\\n    // ------------------------------------\\n\\n    /// @dev Only the Space owner can authorize an upgrade to this contract.\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /// @dev Sets the maximum voting duration.\\n    function _setMaxVotingDuration(uint32 _maxVotingDuration) internal {\\n        if (_maxVotingDuration < minVotingDuration) revert InvalidDuration(minVotingDuration, _maxVotingDuration);\\n        maxVotingDuration = _maxVotingDuration;\\n    }\\n\\n    /// @dev Sets the minimum voting duration.\\n    function _setMinVotingDuration(uint32 _minVotingDuration) internal {\\n        if (_minVotingDuration > maxVotingDuration) revert InvalidDuration(_minVotingDuration, maxVotingDuration);\\n        minVotingDuration = _minVotingDuration;\\n    }\\n\\n    /// @dev Sets the proposal validation strategy.\\n    function _setProposalValidationStrategy(Strategy calldata _proposalValidationStrategy) internal {\\n        proposalValidationStrategy = _proposalValidationStrategy;\\n    }\\n\\n    /// @dev Sets the voting delay.\\n    function _setVotingDelay(uint32 _votingDelay) internal {\\n        votingDelay = _votingDelay;\\n    }\\n\\n    /// @dev Sets the DAO URI.\\n    function _setDaoURI(string calldata _daoURI) internal {\\n        daoURI = _daoURI;\\n    }\\n\\n    /// @dev Adds an array of voting strategies.\\n    function _addVotingStrategies(Strategy[] calldata _votingStrategies) internal {\\n        uint256 cachedActiveVotingStrategies = activeVotingStrategies;\\n        uint8 cachedNextVotingStrategyIndex = nextVotingStrategyIndex;\\n        if (cachedNextVotingStrategyIndex >= 256 - _votingStrategies.length) revert ExceedsStrategyLimit();\\n        for (uint256 i = 0; i < _votingStrategies.length; i++) {\\n            if (_votingStrategies[i].addr == address(0)) revert ZeroAddress();\\n            cachedActiveVotingStrategies = cachedActiveVotingStrategies.setBit(cachedNextVotingStrategyIndex, true);\\n            votingStrategies[cachedNextVotingStrategyIndex] = _votingStrategies[i];\\n            cachedNextVotingStrategyIndex++;\\n        }\\n        activeVotingStrategies = cachedActiveVotingStrategies;\\n        nextVotingStrategyIndex = cachedNextVotingStrategyIndex;\\n    }\\n\\n    /// @dev Removes an array of voting strategies, specified by their indices.\\n    function _removeVotingStrategies(uint8[] calldata _votingStrategyIndices) internal {\\n        for (uint8 i = 0; i < _votingStrategyIndices.length; i++) {\\n            activeVotingStrategies = activeVotingStrategies.setBit(_votingStrategyIndices[i], false);\\n        }\\n        // There must always be at least one active voting strategy.\\n        if (activeVotingStrategies == 0) revert NoActiveVotingStrategies();\\n    }\\n\\n    /// @dev Adds an array of authenticators.\\n    function _addAuthenticators(address[] calldata _authenticators) internal {\\n        for (uint256 i = 0; i < _authenticators.length; i++) {\\n            authenticators[_authenticators[i]] = TRUE;\\n        }\\n    }\\n\\n    /// @dev Removes an array of authenticators.\\n    function _removeAuthenticators(address[] calldata _authenticators) internal {\\n        for (uint256 i = 0; i < _authenticators.length; i++) {\\n            authenticators[_authenticators[i]] = FALSE;\\n        }\\n        // TODO: should we check that there are still authenticators left? same for other setters..\\n    }\\n\\n    /// @dev Reverts if a specified proposal does not exist.\\n    function _assertProposalExists(Proposal memory proposal) internal pure {\\n        // If a proposal exists, then its execution payload hash will be non-zero.\\n        if (proposal.executionPayloadHash == 0) revert InvalidProposal();\\n    }\\n\\n    /// @dev Returns the cumulative voting power of a user over a set of voting strategies.\\n    function _getCumulativePower(\\n        address userAddress,\\n        uint32 blockNumber,\\n        IndexedStrategy[] calldata userStrategies,\\n        uint256 allowedStrategies\\n    ) internal returns (uint256) {\\n        // Ensure there are no duplicates to avoid an attack where people double count a strategy.\\n        userStrategies.assertNoDuplicateIndicesCalldata();\\n\\n        uint256 totalVotingPower;\\n        for (uint256 i = 0; i < userStrategies.length; ++i) {\\n            uint8 strategyIndex = userStrategies[i].index;\\n\\n            // Check that the strategy is allowed for this proposal.\\n            if (!allowedStrategies.isBitSet(strategyIndex)) {\\n                revert InvalidStrategyIndex(strategyIndex);\\n            }\\n\\n            Strategy memory strategy = votingStrategies[strategyIndex];\\n\\n            totalVotingPower += IVotingStrategy(strategy.addr).getVotingPower(\\n                blockNumber,\\n                userAddress,\\n                strategy.params,\\n                userStrategies[i].params\\n            );\\n        }\\n        return totalVotingPower;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC4824.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\n/// @title EIP-4824 Common Interfaces for DAOs\\n/// @notice See https://eips.ethereum.org/EIPS/eip-4824\\ninterface IERC4824 {\\n    /// @notice A distinct Uniform Resource Identifier (URI) pointing to a JSON object following\\n    ///         the \\\"EIP-4824 DAO JSON-LD Schema\\\". This JSON file splits into four URIs: membersURI,\\n    ///         proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a\\n    ///         JSON file that conforms to the \\\"EIP-4824 Members JSON-LD Schema\\\". The proposalsURI\\n    ///         should point to a JSON file that conforms to the \\\"EIP-4824 Proposals JSON-LD Schema\\\".\\n    ///         The activityLogURI should point to a JSON file that conforms to the \\\"EIP-4824 Activity\\n    ///         Log JSON-LD Schema\\\". The governanceURI should point to a flatfile, normatively a .md file.\\n    ///         Each of the JSON files named above can be statically hosted or dynamically-generated.\\n    /// @return _daoURI The DAO URI.\\n    function daoURI() external view returns (string memory _daoURI);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISpace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { ISpaceState } from \\\"./space/ISpaceState.sol\\\";\\nimport { ISpaceActions } from \\\"./space/ISpaceActions.sol\\\";\\nimport { ISpaceOwnerActions } from \\\"./space/ISpaceOwnerActions.sol\\\";\\nimport { ISpaceEvents } from \\\"./space/ISpaceEvents.sol\\\";\\nimport { ISpaceErrors } from \\\"./space/ISpaceErrors.sol\\\";\\n\\n/// @title Space Interface\\n// solhint-disable-next-line no-empty-blocks\\ninterface ISpace is ISpaceState, ISpaceActions, ISpaceOwnerActions, ISpaceEvents, ISpaceErrors {\\n\\n}\\n\"\r\n    },\r\n    \"src/types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { Enum } from \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport { IExecutionStrategy } from \\\"src/interfaces/IExecutionStrategy.sol\\\";\\n\\n/// @dev Constants used to replace the `bool` type in mappings for gas efficiency.\\nuint256 constant TRUE = 1;\\nuint256 constant FALSE = 0;\\n\\n/// @notice The data stored for each proposal when it is created.\\n/// @dev Packed into 4 256-bit slots.\\nstruct Proposal {\\n    // SLOT 1:\\n    // The address of the proposal creator.\\n    address author;\\n    // The block number at which the voting period starts.\\n    // This is also the snapshot block number where voting power is calculated at.\\n    uint32 startBlockNumber;\\n    //\\n    // SLOT 2:\\n    // The address of execution strategy used for the proposal.\\n    IExecutionStrategy executionStrategy;\\n    // The minimum block number at which the proposal can be finalized.\\n    uint32 minEndBlockNumber;\\n    // The maximum block number at which the proposal can be finalized.\\n    uint32 maxEndBlockNumber;\\n    // An enum that stores whether a proposal is pending, executed, or cancelled.\\n    FinalizationStatus finalizationStatus;\\n    //\\n    // SLOT 3:\\n    // The hash of the execution payload. We do not store the payload itself to save gas.\\n    bytes32 executionPayloadHash;\\n    //\\n    // SLOT 4:\\n    // Bit array where the index of each each bit corresponds to whether the voting strategy.\\n    // at that index is active at the time of proposal creation.\\n    uint256 activeVotingStrategies;\\n}\\n\\n/// @notice The data stored for each strategy.\\nstruct Strategy {\\n    // The address of the strategy contract.\\n    address addr;\\n    // The parameters of the strategy.\\n    bytes params;\\n}\\n\\n/// @notice The data stored for each indexed strategy.\\nstruct IndexedStrategy {\\n    uint8 index;\\n    bytes params;\\n}\\n\\n/// @notice The set of possible finalization statuses for a proposal.\\n///         This is stored inside each Proposal struct.\\nenum FinalizationStatus {\\n    Pending,\\n    Executed,\\n    Cancelled\\n}\\n\\n/// @notice The set of possible statuses for a proposal.\\nenum ProposalStatus {\\n    VotingDelay,\\n    VotingPeriod,\\n    VotingPeriodAccepted,\\n    Accepted,\\n    Executed,\\n    Rejected,\\n    Cancelled\\n}\\n\\n/// @notice The set of possible choices for a vote.\\nenum Choice {\\n    Against,\\n    For,\\n    Abstain\\n}\\n\\n/// @notice Transaction struct that can be used to represent transactions inside a proposal.\\nstruct MetaTransaction {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    Enum.Operation operation;\\n    // We require a salt so that the struct can always be unique and we can use its hash as a unique identifier.\\n    uint256 salt;\\n}\\n\\n/// @dev    Structure used for the function `initialize` of the Space contract because of solidity's stack constraints.\\n///         For more information, see `ISpaceActions.sol`.\\nstruct InitializeCalldata {\\n    address owner;\\n    uint32 votingDelay;\\n    uint32 minVotingDuration;\\n    uint32 maxVotingDuration;\\n    Strategy proposalValidationStrategy;\\n    string proposalValidationStrategyMetadataURI;\\n    string daoURI;\\n    string metadataURI;\\n    Strategy[] votingStrategies;\\n    string[] votingStrategyMetadataURIs;\\n    address[] authenticators;\\n}\\n\\n/// @dev    Structure used for the function `updateSettings` of the Space contract because of solidity's stack constraints.\\n///         For more information, see `ISpaceOwnerActions.sol`.\\nstruct UpdateSettingsCalldata {\\n    uint32 minVotingDuration;\\n    uint32 maxVotingDuration;\\n    uint32 votingDelay;\\n    string metadataURI;\\n    string daoURI;\\n    Strategy proposalValidationStrategy;\\n    string proposalValidationStrategyMetadataURI;\\n    address[] authenticatorsToAdd;\\n    address[] authenticatorsToRemove;\\n    Strategy[] votingStrategiesToAdd;\\n    string[] votingStrategyMetadataURIsToAdd;\\n    uint8[] votingStrategiesToRemove;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVotingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n/// @title Voting Strategy Interface\\ninterface IVotingStrategy {\\n    /// @notice Gets the voting power of an address at a given block number.\\n    /// @param blockNumber The snapshot block number to get the voting power at.\\n    /// @param voter The address to get the voting power of.\\n    /// @param params The global parameters that can configure the voting strategy for a particular Space.\\n    /// @param userParams The user parameters that can be used in the voting strategy computation.\\n    /// @return votingPower The voting power of the address at the given block number. If there is no voting power,\\n    ///                     return 0.\\n    function getVotingPower(\\n        uint32 blockNumber,\\n        address voter,\\n        bytes calldata params,\\n        bytes calldata userParams\\n    ) external view returns (uint256 votingPower);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IExecutionStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IndexedStrategy, Proposal, ProposalStatus } from \\\"../types.sol\\\";\\nimport { IExecutionStrategyErrors } from \\\"./execution-strategies/IExecutionStrategyErrors.sol\\\";\\n\\n/// @title Execution Strategy Interface\\ninterface IExecutionStrategy is IExecutionStrategyErrors {\\n    function execute(\\n        uint256 proposalId,\\n        Proposal memory proposal,\\n        uint256 votesFor,\\n        uint256 votesAgainst,\\n        uint256 votesAbstain,\\n        bytes memory payload\\n    ) external;\\n\\n    function getProposalStatus(\\n        Proposal memory proposal,\\n        uint256 votesFor,\\n        uint256 votesAgainst,\\n        uint256 votesAbstain\\n    ) external view returns (ProposalStatus);\\n\\n    function getStrategyType() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IProposalValidationStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IProposalValidationStrategy {\\n    function validate(address author, bytes calldata params, bytes calldata userParams) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/utils/SXUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IndexedStrategy } from \\\"src/types.sol\\\";\\n\\n/// @title Verifi Types Utilities Library\\nlibrary SXUtils {\\n    error DuplicateFound(uint8 index);\\n\\n    /// @dev Reverts if a duplicate index is found in the given array of indexed strategies.\\n    function assertNoDuplicateIndicesCalldata(IndexedStrategy[] calldata strats) internal pure {\\n        if (strats.length < 2) {\\n            return;\\n        }\\n\\n        uint256 bitMap;\\n        for (uint256 i = 0; i < strats.length; ++i) {\\n            // Check that bit at index `strats[i].index` is not set.\\n            uint256 s = 1 << strats[i].index;\\n            if (bitMap & s != 0) revert DuplicateFound(strats[i].index);\\n            // Update aforementioned bit.\\n            bitMap |= s;\\n        }\\n    }\\n\\n    /// @dev Reverts if a duplicate index is found in the given array of indexed strategies.\\n    function assertNoDuplicateIndicesMemory(IndexedStrategy[] memory strats) internal pure {\\n        if (strats.length < 2) {\\n            return;\\n        }\\n\\n        uint256 bitMap;\\n        for (uint256 i = 0; i < strats.length; ++i) {\\n            // Check that bit at index `strats[i].index` is not set.\\n            uint256 s = 1 << strats[i].index;\\n            if (bitMap & s != 0) revert DuplicateFound(strats[i].index);\\n            // Update aforementioned bit.\\n            bitMap |= s;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/BitPacker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n/// @title Uint256 Bit Setting and Checking Library\\nlibrary BitPacker {\\n    /// @dev Sets the bit at the given index to the given value.\\n    function setBit(uint256 value, uint8 index, bool bit) internal pure returns (uint256) {\\n        uint256 mask = 1 << index;\\n        if (bit) {\\n            return value | mask;\\n        } else {\\n            return value & ~mask;\\n        }\\n    }\\n\\n    /// @dev Returns true if the bit at the given index is set.\\n    function isBitSet(uint256 value, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return (value & mask) != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/space/ISpaceState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { Choice, Proposal, ProposalStatus, FinalizationStatus, Strategy } from \\\"src/types.sol\\\";\\nimport { IExecutionStrategy } from \\\"src/interfaces/IExecutionStrategy.sol\\\";\\n\\n/// @title Space State\\ninterface ISpaceState {\\n    /// @notice The maximum duration of the voting period.\\n    function maxVotingDuration() external view returns (uint32);\\n\\n    /// @notice The minimum duration of the voting period.\\n    function minVotingDuration() external view returns (uint32);\\n\\n    /// @notice A pointer to the next available voting strategy index.\\n    function nextProposalId() external view returns (uint256);\\n\\n    /// @notice The delay between proposal creation and the start of the voting period.\\n    function votingDelay() external view returns (uint32);\\n\\n    /// @notice Returns whether a given address is a whitelisted authenticator.\\n    function authenticators(address) external view returns (uint256);\\n\\n    /// @notice Returns the voting strategy at a given index.\\n    /// @param index The index of the voting strategy.\\n    /// @return addr The address of the voting strategy.\\n    /// @return params The parameters of the voting strategy.\\n    function votingStrategies(uint8 index) external view returns (address addr, bytes memory params);\\n\\n    /// @notice The bit array of the current active voting strategies.\\n    /// @dev The index of each bit corresponds to whether the strategy at that index\\n    ///       in `votingStrategies` is active.\\n    function activeVotingStrategies() external view returns (uint256);\\n\\n    /// @notice The index of the next available voting strategy.\\n    function nextVotingStrategyIndex() external view returns (uint8);\\n\\n    /// @notice The proposal validation strategy.\\n    /// @return addr The address of the proposal validation strategy.\\n    /// @return params The parameters of the proposal validation strategy.\\n    function proposalValidationStrategy() external view returns (address addr, bytes memory params);\\n\\n    /// @notice Returns the voting power of a choice on a proposal.\\n    /// @param proposalId The ID of the proposal.\\n    /// @param choice The choice of the voter.\\n    function votePower(uint256 proposalId, Choice choice) external view returns (uint256);\\n\\n    /// @notice Returns whether a voter has voted on a proposal.\\n    /// @param proposalId The ID of the proposal.\\n    /// @param voter The address of the voter.\\n    function voteRegistry(uint256 proposalId, address voter) external view returns (uint256);\\n\\n    /// @notice Returns the proposal at a given ID.\\n    /// @dev Returns all zeros if the proposal does not exist.\\n    /// @param proposalId The ID of the proposal.\\n    /// @return author The address of the proposal author.\\n    /// @return startBlockNumber The block number of the start of the voting period.\\n    ///         This is also the snapshot block number where voting power is calculated at.\\n    /// @return executionStrategy The address of the execution strategy used in the proposal.\\n    /// @return minEndBlockNumber The block number of the minimum end of the voting period.\\n    /// @return maxEndBlockNumber The block number of the maximum end of the voting period.\\n    /// @return finalizationStatus The finalization status of the proposal. See `FinalizationStatus`.\\n    /// @return executionPayloadHash The keccak256 hash of the execution payload.\\n    /// @return activeVotingStrategies The bit array of the active voting strategies for the proposal.\\n    function proposals(\\n        uint256 proposalId\\n    )\\n        external\\n        view\\n        returns (\\n            address author,\\n            uint32 startBlockNumber,\\n            IExecutionStrategy executionStrategy,\\n            uint32 minEndBlockNumber,\\n            uint32 maxEndBlockNumber,\\n            FinalizationStatus finalizationStatus,\\n            bytes32 executionPayloadHash,\\n            uint256 activeVotingStrategies\\n        );\\n\\n    /// @notice Returns the status of a proposal.\\n    /// @param proposalId The ID of the proposal.\\n    /// @return The status of the proposal. Refer to the `ProposalStatus` enum for more information.\\n    function getProposalStatus(uint256 proposalId) external view returns (ProposalStatus);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/space/ISpaceActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { Choice, IndexedStrategy, Strategy, InitializeCalldata } from \\\"src/types.sol\\\";\\n\\n/// @title Space Actions\\n/// @notice User focused actions that can be performed on a space.\\ninterface ISpaceActions {\\n    /// @notice  Initializes a space proxy after deployment.\\n    /// @param   input  The space initialization parameters, Consists of:\\n    ///          owner  The address of the space owner.\\n    ///          votingDelay  The delay between the creation of a proposal and the start of the voting period.\\n    ///          minVotingDuration  The minimum duration of the voting period.\\n    ///          maxVotingDuration  The maximum duration of the voting period.\\n    ///          proposalValidationStrategy  The strategy to use to validate a proposal,\\n    ///             consisting of a strategy address and an array of configuration parameters.\\n    ///          proposalValidationStrategyMetadataURI  The metadata URI for `proposalValidationStrategy`.\\n    ///          daoURI  The ERC4824 DAO URI for the space.\\n    ///          metadataURI  The metadata URI for the space.\\n    ///          votingStrategies  The whitelisted voting strategies,\\n    ///             each consisting of a strategy address and an array of configuration parameters.\\n    ///          votingStrategyMetadataURIs  The metadata URIs for `votingStrategies`.\\n    ///          authenticators The whitelisted authenticator addresses.\\n    /// @dev A struct is used here because of solidity's stack constraints.\\n    function initialize(InitializeCalldata calldata input) external;\\n\\n    /// @notice  Creates a proposal.\\n    /// @param   author  The address of the proposal creator.\\n    /// @param   metadataURI  The metadata URI for the proposal.\\n    /// @param   executionStrategy  The execution strategy for the proposal,\\n    ///          consisting of a strategy address and an execution payload.\\n    /// @param   userProposalValidationParams  The user provided parameters for proposal validation.\\n    function propose(\\n        address author,\\n        string calldata metadataURI,\\n        Strategy calldata executionStrategy,\\n        bytes calldata userProposalValidationParams\\n    ) external;\\n\\n    /// @notice  Casts a vote.\\n    /// @param   voter  The voter's address.\\n    /// @param   proposalId  The proposal id.\\n    /// @param   choice  The vote choice  (`For`, `Against`, `Abstain`).\\n    /// @param   userVotingStrategies  The strategies to use to compute the voter's voting power,\\n    ///          each consisting of a strategy index and an array of user provided parameters.\\n    /// @param   metadataURI  An optional metadata to give information about the vote.\\n    function vote(\\n        address voter,\\n        uint256 proposalId,\\n        Choice choice,\\n        IndexedStrategy[] calldata userVotingStrategies,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /// @notice  Executes a proposal.\\n    /// @param   proposalId  The proposal id.\\n    /// @param   executionPayload  The execution payload.\\n    function execute(uint256 proposalId, bytes calldata executionPayload) external;\\n\\n    /// @notice  Updates the proposal execution strategy and metadata.\\n    /// @param   proposalId The id of the proposal to edit.\\n    /// @param   executionStrategy The new execution strategy.\\n    /// @param   metadataURI The new metadata URI.\\n    function updateProposal(\\n        address author,\\n        uint256 proposalId,\\n        Strategy calldata executionStrategy,\\n        string calldata metadataURI\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/space/ISpaceOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { Strategy, UpdateSettingsCalldata } from \\\"../../types.sol\\\";\\n\\n/// @title Space Owner Actions\\n/// @notice The actions that can be performed by the owner of a Space,\\n///         These are in addition to the methods exposed by the `OwnableUpgradeable` module and the\\n///         `upgradeTo()` method of `UUPSUpgradeable`.\\ninterface ISpaceOwnerActions {\\n    /// @notice  Cancels a proposal that has not already been finalized.\\n    /// @param   proposalId  The proposal to cancel.\\n    function cancel(uint256 proposalId) external;\\n\\n    /// @notice Updates the settings.\\n    /// @param input The settings to modify\\n    /// @dev The structure should consist of:\\n    ///     minVotingDuration The new minimum voting duration. Set to `NO_UPDATE_UINT32` to ignore.\\n    ///     maxVotingDuration The new maximum voting duration. Set to `NO_UPDATE_UINT32` to ignore.\\n    ///     votingDelay The new voting delay. Set to `NO_UPDATE_UINT32` to ignore.\\n    ///     metadataURI The new metadataURI. Set to `NO_UPDATE_STRING` to ignore.\\n    ///     daoURI The new daoURI. Set to `NO_UPDATE_STRING` to ignore.\\n    ///     proposalValidationStrategy The new proposal validation strategy to use. Set\\n    ///                 to `NO_UPDATE_STRATEGY` to ignore.\\n    ///     proposalValidationStrategyMetadataURI The new metadata URI for the proposal validation strategy.\\n    ///     authenticatorsToAdd The authenticators to add. Set to an empty array to ignore.\\n    ///     authenticatorsToRemove The authenticators to remove. Set to an empty array to ignore.\\n    ///     votingStrategiesToAdd The voting strategies to add. Set to an empty array to ignore.\\n    ///     votingStrategyMetadataURIsToAdd The voting strategy metadata uris to add. Set to\\n    ///                 an empty array to ignore.\\n    ///     votignStrategiesToRemove The indices of voting strategies to remove. Set to empty array to ignore.\\n    function updateSettings(UpdateSettingsCalldata calldata input) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/space/ISpaceEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IndexedStrategy, Proposal, Strategy, Choice, InitializeCalldata } from \\\"src/types.sol\\\";\\n\\n/// @title Space Events\\ninterface ISpaceEvents {\\n    /// @notice Emitted when a space is created.\\n    /// @param space The address of the space.\\n    /// @param input The space initialization parameters.\\n    event SpaceCreated(address space, InitializeCalldata input);\\n\\n    /// @notice Emitted when a proposal is created.\\n    /// @param proposalId The proposal id.\\n    /// @param author The address of the proposal creator.\\n    /// @param proposal The proposal data. Refer to the `Proposal` definition for more details.\\n    /// @param metadataUri The metadata URI for the proposal.\\n    /// @param payload The execution payload for the proposal.\\n    event ProposalCreated(uint256 proposalId, address author, Proposal proposal, string metadataUri, bytes payload);\\n\\n    /// @notice Emitted when a vote is cast.\\n    /// @param proposalId The proposal id.\\n    /// @param voter The address of the voter.\\n    /// @param choice The vote choice (`For`, `Against`, `Abstain`).\\n    /// @param votingPower The voting power of the voter.\\n    event VoteCast(uint256 proposalId, address voter, Choice choice, uint256 votingPower);\\n\\n    /// @notice Emitted when a vote is cast with metadata.\\n    /// @param proposalId The proposal id.\\n    /// @param voter The address of the voter.\\n    /// @param choice The vote choice (`For`, `Against`, `Abstain`).\\n    /// @param votingPower The voting power of the voter.\\n    /// @param metadataUri The metadata URI for the vote.\\n    event VoteCastWithMetadata(\\n        uint256 proposalId,\\n        address voter,\\n        Choice choice,\\n        uint256 votingPower,\\n        string metadataUri\\n    );\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param proposalId The proposal id.\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /// @notice Emitted when a proposal is cancelled.\\n    /// @param proposalId The proposal id.\\n    event ProposalCancelled(uint256 proposalId);\\n\\n    /// @notice Emitted when a set of voting strategies are added.\\n    /// @param newVotingStrategies The new voting strategies,\\n    ///        each consisting of a strategy address and an array of configuration parameters.\\n    /// @param newVotingStrategyMetadataURIs The metadata URIs for `newVotingStrategies`.\\n    event VotingStrategiesAdded(Strategy[] newVotingStrategies, string[] newVotingStrategyMetadataURIs);\\n\\n    /// @notice Emitted when a set of voting strategies are removed.\\n    /// @dev There must be at least one voting strategy left active.\\n    /// @param votingStrategyIndices The indices of the voting strategies to remove.\\n    event VotingStrategiesRemoved(uint8[] votingStrategyIndices);\\n\\n    /// @notice Emitted when a set of authenticators are added.\\n    /// @param newAuthenticators The new authenticators addresses.\\n    event AuthenticatorsAdded(address[] newAuthenticators);\\n\\n    /// @notice Emitted when a set of authenticators are removed.\\n    /// @param authenticators The authenticator addresses to remove.\\n    event AuthenticatorsRemoved(address[] authenticators);\\n\\n    /// @notice Emitted when the maximum voting duration is updated.\\n    /// @param newMaxVotingDuration The new maximum voting duration.\\n    event MaxVotingDurationUpdated(uint32 newMaxVotingDuration);\\n\\n    /// @notice Emitted when the minimum voting duration is updated.\\n    /// @param newMinVotingDuration The new minimum voting duration.\\n    event MinVotingDurationUpdated(uint32 newMinVotingDuration);\\n\\n    /// @notice Emitted when the metadata URI for the space is updated.\\n    /// @param newMetadataURI The new metadata URI.\\n    event MetadataURIUpdated(string newMetadataURI);\\n\\n    /// @notice Emitted when the DAO URI for the space is updated.\\n    /// @param newDaoURI The new DAO URI.\\n    event DaoURIUpdated(string newDaoURI);\\n\\n    /// @notice Emitted when the proposal validation strategy is updated.\\n    /// @param newProposalValidationStrategy The new proposal validation strategy,\\n    ///        consisting of a strategy address and an array of configuration parameters.\\n    /// @param newProposalValidationStrategyMetadataURI The metadata URI for the proposal validation strategy.\\n    event ProposalValidationStrategyUpdated(\\n        Strategy newProposalValidationStrategy,\\n        string newProposalValidationStrategyMetadataURI\\n    );\\n\\n    /// @notice Emitted when the voting delay is updated.\\n    /// @param newVotingDelay The new voting delay.\\n    event VotingDelayUpdated(uint32 newVotingDelay);\\n\\n    /// @notice Emitted when a proposal is updated.\\n    /// @param proposalId The proposal id.\\n    /// @param newExecutionStrategy The new execution strategy,\\n    ///        consisting of a strategy address and an execution payload array.\\n    /// @param newMetadataURI The metadata URI for the proposal.\\n    event ProposalUpdated(uint256 proposalId, Strategy newExecutionStrategy, string newMetadataURI);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/space/ISpaceErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n/// @title Space Errors\\ninterface ISpaceErrors {\\n    /// @notice Thrown when an invalid minimum or maximum voting duration is supplied.\\n    error InvalidDuration(uint32 minVotingDuration, uint32 maxVotingDuration);\\n\\n    /// @notice Thrown when an invalid empty array is supplied.\\n    error EmptyArray();\\n\\n    /// @notice Thrown when two arrays which must be of equal length are not.\\n    error ArrayLengthMismatch();\\n\\n    /// @notice Thrown when the caller is unauthorized to perform a certain action.\\n    error InvalidCaller();\\n\\n    /// @notice Thrown when an invalid zero address is supplied\\n    error ZeroAddress();\\n\\n    /// @notice Thrown when an invalid strategy index is supplied.\\n    error InvalidStrategyIndex(uint256 index);\\n\\n    /// @notice Thrown if the number of voting strategies exceeds the limit (256).\\n    ///         Once this limit is reached, no more strategies can be added.\\n    error ExceedsStrategyLimit();\\n\\n    /// @notice Thrown when one attempts to remove all voting strategies.\\n    ///         There must always be at least one active voting strategy.\\n    error NoActiveVotingStrategies();\\n\\n    /// @notice Thrown if a proposal is invalid.\\n    error InvalidProposal();\\n\\n    /// @notice Thrown if the caller is not a whitelisted authenticator.\\n    error AuthenticatorNotWhitelisted();\\n\\n    /// @notice Thrown if a user attempts to vote twice on the same proposal.\\n    error UserAlreadyVoted();\\n\\n    /// @notice Thrown if a user attempts to vote with no voting power.\\n    error UserHasNoVotingPower();\\n\\n    /// @notice Thrown if a user attempts to vote when the voting period has not started.\\n    error VotingPeriodHasNotStarted();\\n\\n    /// @notice Thrown if a user attempts to vote when the voting period has ended.\\n    error VotingPeriodHasEnded();\\n\\n    /// @notice Thrown if a user attempts to finalize (execute or cancel) a proposal that has already been finalized.\\n    error ProposalFinalized();\\n\\n    /// @notice Thrown if an author attempts to update their proposal after the voting delay has passed.\\n    error VotingDelayHasPassed();\\n\\n    /// @notice Thrown if a new proposal did not pass the proposal validation strategy for the space.\\n    error FailedToPassProposalValidation();\\n\\n    /// @notice Thrown when the execution payload supplied to the execution strategy is not equal\\n    /// to the payload supplied when the proposal was created.\\n    error InvalidPayload();\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/Enum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\"\r\n    },\r\n    \"src/interfaces/execution-strategies/IExecutionStrategyErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { ProposalStatus } from \\\"../../types.sol\\\";\\n\\n/// @title Execution Strategy Errors\\ninterface IExecutionStrategyErrors {\\n    /// @notice Thrown when the current status of a proposal does not allow the desired action.\\n    /// @param status The current status of the proposal.\\n    error InvalidProposalStatus(ProposalStatus status);\\n\\n    /// @notice Thrown when the execution of a proposal fails.\\n    error ExecutionFailed();\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"forge-gas-snapshot/=lib/forge-gas-snapshot/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@prb/test/=lib/prb-test/src/\",\r\n      \"@zodiac/=lib/zodiac/contracts/\",\r\n      \"@gnosis.pm/safe-contracts/=lib/safe-contracts/\",\r\n      \"@murky/=lib/murky/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"prb-test/=lib/prb-test/src/\",\r\n      \"safe-contracts/=lib/safe-contracts/contracts/\",\r\n      \"zodiac/=lib/zodiac/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuthenticatorNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"DuplicateFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsStrategyLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToPassProposalValidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minVotingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVotingDuration\",\"type\":\"uint32\"}],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProposal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidStrategyIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveVotingStrategies\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposalFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserHasNoVotingPower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingDelayHasPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingPeriodHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingPeriodHasNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newAuthenticators\",\"type\":\"address[]\"}],\"name\":\"AuthenticatorsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"authenticators\",\"type\":\"address[]\"}],\"name\":\"AuthenticatorsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newDaoURI\",\"type\":\"string\"}],\"name\":\"DaoURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newMaxVotingDuration\",\"type\":\"uint32\"}],\"name\":\"MaxVotingDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"MetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newMinVotingDuration\",\"type\":\"uint32\"}],\"name\":\"MinVotingDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"contract IExecutionStrategy\",\"name\":\"executionStrategy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"minEndBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxEndBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"enum FinalizationStatus\",\"name\":\"finalizationStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"executionPayloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"activeVotingStrategies\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Proposal\",\"name\":\"proposal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Strategy\",\"name\":\"newExecutionStrategy\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newMetadataURI\",\"type\":\"string\"}],\"name\":\"ProposalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Strategy\",\"name\":\"newProposalValidationStrategy\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newProposalValidationStrategyMetadataURI\",\"type\":\"string\"}],\"name\":\"ProposalValidationStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"space\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"votingDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minVotingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVotingDuration\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy\",\"name\":\"proposalValidationStrategy\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"proposalValidationStrategyMetadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy[]\",\"name\":\"votingStrategies\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"votingStrategyMetadataURIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"authenticators\",\"type\":\"address[]\"}],\"indexed\":false,\"internalType\":\"struct InitializeCalldata\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"SpaceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Choice\",\"name\":\"choice\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Choice\",\"name\":\"choice\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"}],\"name\":\"VoteCastWithMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newVotingDelay\",\"type\":\"uint32\"}],\"name\":\"VotingDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Strategy[]\",\"name\":\"newVotingStrategies\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"newVotingStrategyMetadataURIs\",\"type\":\"string[]\"}],\"name\":\"VotingStrategiesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"votingStrategyIndices\",\"type\":\"uint8[]\"}],\"name\":\"VotingStrategiesRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeVotingStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auth\",\"type\":\"address\"}],\"name\":\"authenticators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"executionPayload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalStatus\",\"outputs\":[{\"internalType\":\"enum ProposalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"votingDelay\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minVotingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVotingDuration\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy\",\"name\":\"proposalValidationStrategy\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"proposalValidationStrategyMetadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy[]\",\"name\":\"votingStrategies\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"votingStrategyMetadataURIs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"authenticators\",\"type\":\"address[]\"}],\"internalType\":\"struct InitializeCalldata\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVotingDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minVotingDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextVotingStrategyIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalValidationStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"contract IExecutionStrategy\",\"name\":\"executionStrategy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"minEndBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxEndBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"enum FinalizationStatus\",\"name\":\"finalizationStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"executionPayloadHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"activeVotingStrategies\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy\",\"name\":\"executionStrategy\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"userProposalValidationParams\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy\",\"name\":\"executionStrategy\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"updateProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"minVotingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxVotingDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"votingDelay\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"daoURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy\",\"name\":\"proposalValidationStrategy\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"proposalValidationStrategyMetadataURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"authenticatorsToAdd\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"authenticatorsToRemove\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct Strategy[]\",\"name\":\"votingStrategiesToAdd\",\"type\":\"tuple[]\"},{\"internalType\":\"string[]\",\"name\":\"votingStrategyMetadataURIsToAdd\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"votingStrategiesToRemove\",\"type\":\"uint8[]\"}],\"internalType\":\"struct UpdateSettingsCalldata\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Choice\",\"name\":\"choice\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct IndexedStrategy[]\",\"name\":\"userVotingStrategies\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Choice\",\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"votePower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votePower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"voteRegistry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hasVoted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"strategyIndex\",\"type\":\"uint8\"}],\"name\":\"votingStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Space", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}