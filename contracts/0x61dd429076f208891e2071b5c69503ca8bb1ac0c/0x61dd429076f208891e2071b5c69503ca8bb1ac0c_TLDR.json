{"SourceCode": "/**\r\nTLDR\r\n\r\nToo Long Didn\u2019t Read\u2026\r\n\r\nhttps://t.me/TLDRToken\r\n\r\nComing soon\u2026 tldrtoken.io\r\n\r\nSlip\r\n12% Marketing\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract TLDR is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\naddress payable public MarketingFundAddress = payable(0x586F7cC6697F5dE03a595c4E4356d22AdBa9e2Be); // MarketingFundAddress\r\naddress public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\nmapping (address => uint256) private _rOwned;\r\nmapping (address => uint256) private _tOwned;\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\nmapping (address => bool) private _isExcludedFromFee;\r\n\r\nmapping (address => bool) private _isExcluded;\r\naddress[] private _excluded;\r\n\r\nmapping(address => bool) private _IsBot;\r\n\r\nbool public tradingOpen = false; //once switched on, can never be switched off.\r\n\r\n\r\n\r\nuint256 private constant MAX = ~uint256(0);\r\nuint256 private _tTotal = 4200 * 10**6 * 10**9;\r\nuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\nuint256 private _tFeeTotal;\r\n\r\nstring private _name = \"Too Long DR\";\r\nstring private _symbol = \"TLDR\";\r\nuint8 private _decimals = 9;\r\n\r\n\r\nuint256 private _taxFee = 0; \r\nuint256 private _previousTaxFee = _taxFee;\r\n\r\nuint256 public _MarketingFee = 12;\r\nuint256 private _previousMarketingFee = _MarketingFee;\r\n\r\nuint256 private _tradingOpenTime;\r\n\r\nbool public tradingPaused;\r\n\r\nbool public pauseTradingFxnUsed;\r\n\r\nbool public  enableTradingFxnUsed;\r\n\r\nIUniswapV2Router02 public immutable uniswapV2Router;\r\naddress public immutable uniswapV2Pair;\r\n\r\nbool inSwapAndLiquify;\r\nbool public swapAndLiquifyEnabled = false;\r\n\r\n\r\n\r\nevent RewardLiquidityProviders(uint256 tokenAmount);\r\nevent SwapAndLiquifyEnabledUpdated(bool enabled);\r\nevent SwapAndLiquify(\r\nuint256 tokensSwapped,\r\nuint256 ethReceived,\r\nuint256 tokensIntoLiqudity\r\n);\r\n\r\nevent SwapETHForTokens(\r\nuint256 amountIn,\r\naddress[] path\r\n);\r\n\r\nevent SwapTokensForETH(\r\nuint256 amountIn,\r\naddress[] path\r\n);\r\n\r\nmodifier lockTheSwap {\r\ninSwapAndLiquify = true;\r\n_;\r\ninSwapAndLiquify = false;\r\n}\r\n    \r\nconstructor () {\r\n_rOwned[_msgSender()] = _rTotal;\r\n\r\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\nuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n.createPair(address(this), _uniswapV2Router.WETH());\r\n\r\nuniswapV2Router = _uniswapV2Router;\r\n\r\n\r\n// don't collect fees from the following account\r\n_isExcludedFromFee[owner()] = true;\r\n_isExcludedFromFee[address(this)] = true;\r\n\r\nemit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n\r\n\r\nfunction enableTrading() external onlyOwner() {\r\nrequire(!enableTradingFxnUsed, \"This function can be used only once!\");\r\nswapAndLiquifyEnabled = true;\r\ntradingOpen = true;\r\n_tradingOpenTime = block.timestamp;\r\nenableTradingFxnUsed=true;\r\n}\r\n\r\nfunction pauseTrading() external onlyOwner() {\r\nrequire(!pauseTradingFxnUsed, \"This function can be used only once!\");\r\ntradingPaused = true;\r\npauseTradingFxnUsed=true;\r\n}\r\n\r\nfunction unpauseTrading() external onlyOwner() {\r\n//require(pauseTradingFxnUsed==0, \"This function can be used only once!\");\r\ntradingPaused = false;\r\n}\r\n\r\nfunction name() public view returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction symbol() public view returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\nfunction decimals() public view returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction totalSupply() public view override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nif (_isExcluded[account]) return _tOwned[account];\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address owner, address spender) public view override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\nreturn true;\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\nreturn true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\nreturn true;\r\n}\r\n\r\nfunction isExcludedFromReward(address account) public view returns (bool) {\r\nreturn _isExcluded[account];\r\n}\r\n\r\nfunction totalFees() public view returns (uint256) {\r\nreturn _tFeeTotal;\r\n}\r\n\r\n\r\nfunction deliver(uint256 tAmount) public {\r\naddress sender = _msgSender();\r\nrequire(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n// adjust Tax\r\n//_adjustTax();\r\n\r\n(uint256 rAmount,,,,,) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rTotal = _rTotal.sub(rAmount);\r\n_tFeeTotal = _tFeeTotal.add(tAmount);\r\n}\r\n\r\n\r\nfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\nrequire(tAmount <= _tTotal, \"Amount must be less than supply\");\r\nif (!deductTransferFee) {\r\n(uint256 rAmount,,,,,) = _getValues(tAmount);\r\nreturn rAmount;\r\n} else {\r\n(,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\nreturn rTransferAmount;\r\n}\r\n}\r\n\r\nfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\nrequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\nuint256 currentRate =  _getRate();\r\nreturn rAmount.div(currentRate);\r\n}\r\n\r\nfunction isBlockedBot(address account) public view returns (bool) {\r\nreturn _IsBot[account];\r\n}\r\n\r\n\r\nfunction setBots(address[] memory bots_) public onlyOwner {\r\nfor (uint256 i = 0; i < bots_.length; i++) {\r\n_IsBot[bots_[i]] = true;\r\n}\r\n}\r\n\r\nfunction delBot(address notbot) public onlyOwner {\r\n_IsBot[notbot] = false;\r\n}\r\n\r\n\r\nfunction excludeFromReward(address account) public onlyOwner() {\r\n\r\nrequire(!_isExcluded[account], \"Account is already excluded\");\r\nif(_rOwned[account] > 0) {\r\n_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n}\r\n_isExcluded[account] = true;\r\n_excluded.push(account);\r\n}\r\n\r\nfunction includeInReward(address account) external onlyOwner() {\r\nrequire(_isExcluded[account], \"Account is already excluded\");\r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (_excluded[i] == account) {\r\n_excluded[i] = _excluded[_excluded.length - 1];\r\nuint256 currentRate = _getRate();\r\n_rOwned[account] = _tOwned[account].mul(currentRate);\r\n_tOwned[account] = 0;\r\n_isExcluded[account] = false;\r\n_excluded.pop();\r\nbreak;\r\n}\r\n}\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) private {\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\n\r\nfunction _transfer(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) private {\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\nrequire(!_IsBot[recipient], \"You are a sending to a blocked bot!\");\r\nrequire(!_IsBot[msg.sender], \"You are blocked as a bot!\");\r\n\r\n// _adjustTax\r\n//_adjustTax();\r\n\r\nif(sender != owner() && recipient != owner()) {\r\nif (!(sender == address(this) || recipient == address(this)\r\n|| sender == address(owner()) || recipient == address(owner())))\r\n{\r\nrequire(tradingOpen, \"Trading is not enabled\");\r\nrequire(!tradingPaused, \"Trading is currently be paused\");\r\n}\r\n}\r\n\r\nuint256 contractTokenBalance = balanceOf(address(this));\r\nif (!inSwapAndLiquify && swapAndLiquifyEnabled && recipient == uniswapV2Pair) {\r\nswapTokens(contractTokenBalance);\r\n}\r\n\r\nbool takeFee = true;\r\n\r\n//if any account belongs to _isExcludedFromFee account then remove the fee\r\nif(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){\r\ntakeFee = false;\r\n\r\n}\r\n\r\n_tokenTransfer(sender,recipient,amount,takeFee);\r\n}\r\n\r\nfunction swapTokens(uint256 contractTokenBalance) private lockTheSwap {\r\n\r\nuint256 initialBalance = address(this).balance;\r\nswapTokensForEth(contractTokenBalance);\r\nuint256 transferredBalance = address(this).balance.sub(initialBalance);\r\n\r\n//Send to Marketing address\r\ntransferToAddressETH(MarketingFundAddress, transferredBalance);\r\n\r\n}\r\n\r\n\r\nfunction swapTokensForEth(uint256 tokenAmount) private {\r\n// generate the uniswap pair path of token -> weth\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = uniswapV2Router.WETH();\r\n\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n// make the swap\r\nuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\ntokenAmount,\r\n0, // accept any amount of ETH\r\npath,\r\naddress(this), // The contract\r\nblock.timestamp\r\n);\r\n\r\nemit SwapTokensForETH(tokenAmount, path);\r\n}\r\n\r\nfunction swapETHForTokens(uint256 amount) private {\r\n// generate the uniswap pair path of token -> weth\r\naddress[] memory path = new address[](2);\r\npath[0] = uniswapV2Router.WETH();\r\npath[1] = address(this);\r\n\r\n// make the swap\r\nuniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n0, // accept any amount of Tokens\r\npath,\r\ndeadAddress, // Burn address\r\nblock.timestamp.add(300)\r\n);\r\n\r\nemit SwapETHForTokens(amount, path);\r\n}\r\n\r\nfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n// approve token transfer to cover all possible scenarios\r\n_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n// add the liquidity\r\nuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\naddress(this),\r\ntokenAmount,\r\n0, // slippage is unavoidable\r\n0, // slippage is unavoidable\r\nowner(),\r\nblock.timestamp\r\n);\r\n}\r\n\r\nfunction _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\nif(!takeFee)\r\nremoveAllFee();\r\n\r\nif (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n_transferFromExcluded(sender, recipient, amount);\r\n} else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferToExcluded(sender, recipient, amount);\r\n} else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferBothExcluded(sender, recipient, amount);\r\n} else {\r\n_transferStandard(sender, recipient, amount);\r\n}\r\n\r\nif(!takeFee)\r\nrestoreAllFee();\r\n}\r\n\r\nfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal = _rTotal.sub(rFee);\r\n_tFeeTotal = _tFeeTotal.add(tFee);\r\n}\r\n\r\nfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n(uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\nreturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n}\r\n\r\nfunction _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\nuint256 tFee = calculateTaxFee(tAmount);\r\nuint256 tLiquidity = calculateMarketingFee(tAmount);\r\nuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\nreturn (tTransferAmount, tFee, tLiquidity);\r\n}\r\n\r\nfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\nuint256 rAmount = tAmount.mul(currentRate);\r\nuint256 rFee = tFee.mul(currentRate);\r\nuint256 rLiquidity = tLiquidity.mul(currentRate);\r\nuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\nreturn (rAmount, rTransferAmount, rFee);\r\n}\r\n\r\nfunction _getRate() private view returns(uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\n\r\nfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal;\r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\nrSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\ntSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n}\r\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\n\r\nfunction _takeLiquidity(uint256 tLiquidity) private {\r\nuint256 currentRate =  _getRate();\r\nuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\nif(_isExcluded[address(this)])\r\n_tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n}\r\n\r\nfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\nreturn _amount.mul(_taxFee).div(\r\n10**2\r\n);\r\n}\r\n\r\nfunction calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\nreturn _amount.mul(_MarketingFee).div(\r\n10**2\r\n);\r\n}\r\n\r\n\r\nfunction changeTaxFee(uint256 _newTax) public onlyOwner returns(uint256){\r\n_previousTaxFee = _taxFee;\r\n_taxFee = _newTax;\r\nreturn _taxFee;\r\n}\r\n\r\nfunction changeMarketingFee(uint256 _newMarketingFee) public onlyOwner returns(uint256){\r\n_MarketingFee = _newMarketingFee;\r\nreturn _MarketingFee;\r\n}\r\n\r\n\r\nfunction removeAllFee() private {\r\nif(_taxFee == 0 && _MarketingFee == 0) return;\r\n\r\n_previousTaxFee = _taxFee;\r\n_previousMarketingFee = _MarketingFee;\r\n\r\n_taxFee = 0;\r\n_MarketingFee = 0;\r\n}\r\n\r\nfunction restoreAllFee() private {\r\n_taxFee = _previousTaxFee;\r\n_MarketingFee = _previousMarketingFee;\r\n}\r\n\r\nfunction isExcludedFromFee(address account) public view returns(bool) {\r\nreturn _isExcludedFromFee[account];\r\n}\r\n\r\nfunction excludeFromFee(address account) public onlyOwner {\r\n_isExcludedFromFee[account] = true;\r\n}\r\n\r\nfunction includeInFee(address account) public onlyOwner {\r\n_isExcludedFromFee[account] = false;\r\n}\r\n\r\n\r\nfunction setMarketingFundAddress(address _MarketingFundAddress) external onlyOwner() {\r\nMarketingFundAddress = payable(_MarketingFundAddress);\r\n}\r\n\r\nfunction setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\nswapAndLiquifyEnabled = _enabled;\r\nemit SwapAndLiquifyEnabledUpdated(_enabled);\r\n}\r\n\r\nfunction transferToAddressETH(address payable recipient, uint256 amount) private {\r\nrecipient.transfer(amount);\r\n}\r\n\r\nfunction sendTokenTo(IERC20 token, address recipient, uint256 amount) external onlyOwner() {\r\ntoken.transfer(recipient, amount);\r\n\r\n}\r\n\r\nfunction getETHBalance() public view returns(uint) {\r\nreturn address(this).balance;\r\n}\r\n\r\nfunction sendETHTo(address payable _to) external onlyOwner() {\r\n_to.transfer(getETHBalance());\r\n}\r\n\r\nreceive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardLiquidityProviders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MarketingFundAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMarketingFee\",\"type\":\"uint256\"}],\"name\":\"changeMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"changeTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingFxnUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlockedBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTradingFxnUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sendETHTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MarketingFundAddress\",\"type\":\"address\"}],\"name\":\"setMarketingFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TLDR", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fcdab7782113b46170d1d58a8880e7e327ffac1f782f9fc94ea4f06b30c7d971"}