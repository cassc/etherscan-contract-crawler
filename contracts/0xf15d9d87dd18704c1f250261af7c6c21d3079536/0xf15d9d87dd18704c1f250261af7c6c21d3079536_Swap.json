{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interface/IClaimRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IClaimRewards {\\n    function claimRewards(address[] calldata _gauges) external;\\n\\n    struct LockStatus {\\n        bool[] locked;\\n        bool[] staked;\\n        bool lockSDT;\\n    }\\n\\n    function claimAndLock(\\n        address[] memory _gauges,\\n        LockStatus memory _lockStatus\\n    ) external;\\n\\n    function rescueERC20(\\n        address _token,\\n        uint256 _amount,\\n        address _recipient\\n    ) external;\\n\\n    function enableGauge(address _gauge) external;\\n\\n    function disableGauge(address _gauge) external;\\n\\n    function addDepositor(address _token, address _depositor) external;\\n\\n    function setGovernance(address _governance) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ICRVDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICrvDepositor {\\n    function setGovernance(address _governance) external;\\n\\n    function setSdTokenOperator(address _operator) external;\\n\\n    function setGauge(address _gauge) external;\\n\\n    function setFees(uint256 _lockIncentive) external;\\n\\n    function lockToken() external;\\n\\n    function deposit(\\n        uint256 _amount,\\n        bool _lock,\\n        bool _stake,\\n        address _user\\n    ) external;\\n\\n    function depositAll(bool _lock, bool _stake, address _user) external;\\n\\n    function lockSdveCrvToSdCrv(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ICRVFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFactory {\\n    function exchange(\\n        uint128 i,\\n        uint128 j,\\n        uint256 _dx,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ICRVGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICRVGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDelegation{\\n    function clearDelegate(bytes32 _id) external;\\n    function setDelegate(bytes32 _id, address _delegate) external;\\n    function delegation(address _address, bytes32 _id) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interface/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface Ipool {\\n    function exchange(int128, int128, uint256, uint256) external returns(uint256);\\n    function get_dy(int128, int128, uint256) external returns(uint256);\\n    \\n}\"\r\n    },\r\n    \"contracts/interface/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface Iregistry {\\n    function exchange_multiple(\\n        address[9] calldata _pool,\\n        uint256[3][4] calldata i,\\n        uint256 _amountA,\\n        uint256 _amountB,\\n        address[4] calldata addresses\\n    ) external;\\n\\n    function exchange_with_best_rate(\\n        address,\\n        address,\\n        uint256,\\n        uint256\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary Errors {\\n    string public constant ZERO_ADDRESS = \\\"100\\\";\\n    string public constant ZERO_AMOUNT = \\\"101\\\";\\n    string public constant INVALID_ADDRESS = \\\"102\\\";\\n    string public constant INVALID_AMOUNT = \\\"103\\\";\\n    string public constant NO_PENDING_REWARD = \\\"104\\\";\\n    string public constant INVALID_PID = \\\"105\\\";\\n    string public constant INVALID_POOL_ADDRESS = \\\"106\\\";\\n    string public constant UNAUTHORIZED = \\\"107\\\";\\n    string public constant ALREADY_EXISTS = \\\"108\\\";\\n    string public constant SAME_ALLOCPOINT = \\\"109\\\";\\n    string public constant INVALID_REWARD_PER_BLOCK = \\\"110\\\";\\n    string public constant INSUFFICIENT_REWARDS = \\\"111\\\";\\n    string public constant EXCEED_MAX_HARVESTER_FEE = \\\"112\\\";\\n    string public constant EXCEED_MAX_FEE = \\\"113\\\";\\n    string public constant INVALID_INDEX = \\\"114\\\";\\n    string public constant INVALID_REQUEST = \\\"115\\\";\\n    string public constant INVALID_WINDOW_LENGTH = \\\"116\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/sdCRV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./utils/Initializable.sol\\\";\\nimport \\\"./sdCurveCDP.sol\\\";\\n\\ncontract sdCRV3 is Initializable, IERC20 {\\n    address public admin;\\n    address public minter;\\n    address public bent3Fi;\\n    uint256 public totalSupply;\\n    string public name;\\n    string public symbol;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol\\n    ) external initializer {\\n        name = _name;\\n        symbol = _symbol;\\n        admin = address(msg.sender);\\n        minter = address(msg.sender);\\n    }\\n\\n    function updateMinter(address _minter) public {\\n        require(msg.sender == admin, \\\"only owner\\\");\\n        minter = _minter;\\n    }\\n\\n    function updatebent3Fi(address _minter) public {\\n        require(msg.sender == admin, \\\"only owner\\\");\\n        bent3Fi = _minter;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return 18;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param from The address of the source account\\n     * @param to The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = msg.sender;\\n        _spendAllowance(from, spender, amount);\\n        sdCurveCDP CDP = sdCurveCDP(minter);\\n        CDP.onTransfer(from, to, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param to The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = msg.sender;\\n        sdCurveCDP CDP = sdCurveCDP(minter);\\n        CDP.onTransfer(msg.sender, to, amount);\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mint New Token\\n     * @param to The address of the Account For which token are minted\\n     * @param amount The number of tokens to mint\\n     */\\n    function mintRequest(address to, uint256 amount) public {\\n        require(msg.sender == admin || msg.sender == minter, \\\"only owner\\\");\\n        mint(to, amount);\\n    }\\n\\n    function mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param to The address of the Account For which token are burned\\n     * @param amount The number of tokens to burned\\n     */\\n    function burnRequest(address to, uint256 amount) public {\\n        require(msg.sender == admin || msg.sender == minter, \\\"only owner\\\");\\n        _burn(to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/sdCurveCDP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport \\\"./utils/Initializable.sol\\\";\\n\\nimport \\\"./interface/ICRVDepositor.sol\\\";\\nimport \\\"./interface/IClaimRewards.sol\\\";\\nimport \\\"./interface/ICRVFactory.sol\\\";\\nimport \\\"./interface/ICRVGauge.sol\\\";\\nimport \\\"./interface/IDelegation.sol\\\";\\nimport \\\"./interface/IPool.sol\\\";\\nimport \\\"./interface/IRegistry.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./sdCRV3.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\n\\n\\ncontract sdCurveCDP is Initializable, ReentrancyGuardUpgradeable {\\n    struct PoolData {\\n        address rewardToken;\\n        uint256 accRewardPerShare; // Accumulated Rewards per share, times 1e36. See below.\\n        uint256 rewardRate;\\n        uint256 reserves;\\n    }\\n    address public admin;\\n    address public crvAddress; // CRV Token Address\\n    address public sdCRV3Address; // bentCVX3 Token Address - Use this Address to Mint sdCRV3 Address\\n    address public sdCRVAddress; // sdCRV Token Address\\n    address public crvDepositAddress; // CRV Depositor Address\\n    address public crvFactoryAddress; // Stake Dao Factory Address\\n    address public sdGaugeAddress; // Gaude To Deposit sdCRV\\n    address public claimContractAddress; // Claim Contract\\n    uint256 public totalSupply;\\n    uint256 public rewardPoolsCount;\\n\\n    uint256 public windowLength; // amount of blocks where we assume around 12 sec per block\\n    uint256 public minWindowLength; // minimum amount of blocks where 7200 = 1 day\\n    uint256 public endRewardBlock; // end block of rewards stream\\n    uint256 public lastRewardBlock; // last block of rewards streamed\\n    uint256 public harvesterFee; // percentage fee to onReward caller where 100 = 1%\\n    bool public unLocked; //for locking claims\\n    //Fees distribution\\n    mapping(address => uint256) public onRewardFee;\\n    mapping(address => uint256) public reStakeFee;\\n    mapping(address => uint256) public newRewardFinal;\\n    uint256 public onRewardPercentage;\\n    uint256 public reStakePercentage;\\n    uint256 public masterClaimPercentage;\\n    uint256 public adminPercentage;\\n    struct FeeData {\\n        address feeToken;\\n        uint256 feeReserves;\\n    }\\n    mapping(uint256 => FeeData) public feePools;\\n    mapping(address => bool) public isFeeToken;\\n    uint256 public feePoolsCount;\\n    //swap\\n    address public pool;\\n    address public registry;\\n    uint256 public minBalance;\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(uint256 => PoolData) public rewardPools;\\n    mapping(address => bool) public isRewardToken;\\n    mapping(uint256 => mapping(address => uint256)) internal userRewardDebt;\\n    mapping(uint256 => mapping(address => uint256)) internal userPendingRewards;\\n\\n    event DepositCRV(address indexed _from, uint _value);\\n    event DepositsdCRV(address indexed _from, uint _value);\\n    event WithdrawCRV(address indexed _from, uint _value);\\n    event ClaimAll(address indexed _from);\\n    event userClaim(address indexed _from, uint _amount);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Invalid Admin\\\");\\n        _;\\n    }\\n    modifier unlocked() {\\n        require(unLocked == true, \\\"Locked! Can't claim at the moment.\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _crvAddress,\\n        address _sdCRVAddress,\\n        address _crvDepositAddress,\\n        address _claimAddress,\\n        address _sdGaugeAddress,\\n        address _sdCRV3Address,\\n        address _pool,\\n        address _registry,\\n        uint256 _widowLength\\n    ) external initializer {\\n        admin = msg.sender;\\n        crvAddress = _crvAddress;\\n        sdCRVAddress = _sdCRVAddress;\\n        crvDepositAddress = _crvDepositAddress;\\n        claimContractAddress = _claimAddress;\\n        sdGaugeAddress = _sdGaugeAddress;\\n        sdCRV3Address = _sdCRV3Address;\\n        pool = _pool;\\n        registry = _registry;\\n        windowLength = _widowLength;\\n        minWindowLength = 300;\\n        totalSupply = 0;\\n        harvesterFee = 100;\\n        onRewardPercentage = 2500;\\n        reStakePercentage = 2500;\\n        masterClaimPercentage = 2500;\\n        adminPercentage = 2500;\\n    }\\n\\n    /**\\n     * @notice set Reward Harvest Fee.\\n     * @param _address The Fee to Charge 1 = 1%;\\n     **/\\n    function setCRVAddress(address _address) public onlyAdmin {\\n        require(address(0) == _address, \\\"Null Address Provided\\\");\\n        crvAddress = _address;\\n    }\\n\\n    function setsdCRVAddress(address _address) public onlyAdmin {\\n        require(address(0) == _address, \\\"Null Address Provided\\\");\\n        sdCRVAddress = _address;\\n    }\\n\\n    function setcrvDepositAddress(address _address) public onlyAdmin {\\n        require(address(0) == _address, \\\"Null Address Provided\\\");\\n        crvDepositAddress = _address;\\n    }\\n\\n    function setclaimAddress(address _address) public onlyAdmin {\\n        require(address(0) == _address, \\\"Null Address Provided\\\");\\n        claimContractAddress = _address;\\n    }\\n\\n    function setsdGaugeAddress(address _address) public onlyAdmin {\\n        require(address(0) == _address, \\\"Null Address Provided\\\");\\n        sdGaugeAddress = _address;\\n    }\\n\\n    function setsdCRV3Address(address _address) public onlyAdmin {\\n        require(address(0) == _address, \\\"Null Address Provided\\\");\\n        sdCRV3Address = _address;\\n    }\\n\\n    /**\\n     * @notice set Reward Harvest Fee.\\n     * @param _fee The Fee to Charge 1 = 1%;\\n     **/\\n    function setHarvesterFee(uint256 _fee) public onlyAdmin {\\n        harvesterFee = _fee;\\n    }\\n\\n    //Fee Distribution\\n    function setOnRewardPercentage(uint256 _fee) external onlyAdmin {\\n        onRewardPercentage = _fee;\\n    }\\n\\n    function setreStakePercentage(uint256 _fee) external onlyAdmin {\\n        reStakePercentage = _fee;\\n    }\\n\\n    function setmasterClaimPercentage(uint256 _fee) external onlyAdmin {\\n        masterClaimPercentage = _fee;\\n    }\\n\\n    function setadminPercentage(uint256 _fee) external onlyAdmin {\\n        adminPercentage = _fee;\\n    }\\n\\n    function setPoolAddress(address _pool) external onlyAdmin {\\n        pool = _pool;\\n    }\\n\\n    /**\\n     * @notice set Window Length.\\n     * @param _windowLength Number of Blocks. 7200 =  1 day ;\\n     **/\\n    function setWindowLength(uint256 _windowLength) public onlyAdmin {\\n        require(_windowLength >= minWindowLength, Errors.INVALID_WINDOW_LENGTH);\\n        windowLength = _windowLength;\\n    }\\n\\n    /**\\n     * @notice set Window Length.\\n     * @param _windowLength The Window Length. Its Number of Blocks;\\n     **/\\n    function setMinWindowLength(uint256 _windowLength) public onlyAdmin {\\n        require(_windowLength >= minWindowLength, Errors.INVALID_WINDOW_LENGTH);\\n        minWindowLength = _windowLength;\\n    }\\n\\n    function addRewardTokens(address[] memory _rewardTokens) public onlyAdmin {\\n        uint256 length = _rewardTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            require(!isRewardToken[_rewardTokens[i]], Errors.ALREADY_EXISTS);\\n            rewardPools[rewardPoolsCount + i].rewardToken = _rewardTokens[i];\\n            isRewardToken[_rewardTokens[i]] = true;\\n        }\\n        rewardPoolsCount += length;\\n    }\\n\\n    function removeRewardToken(uint256 _index) external onlyAdmin {\\n        require(_index < rewardPoolsCount, Errors.INVALID_INDEX);\\n        isRewardToken[rewardPools[_index].rewardToken] = false;\\n        delete rewardPools[_index];\\n    }\\n\\n    function addFeeTokens(address[] memory _feeTokens) public onlyAdmin {\\n        uint256 length = _feeTokens.length;\\n        for (uint256 i = 0; i < length; ++i) {\\n            require(!isFeeToken[_feeTokens[i]], Errors.ALREADY_EXISTS);\\n            feePools[feePoolsCount + i].feeToken = _feeTokens[i];\\n            isFeeToken[_feeTokens[i]] = true;\\n        }\\n        feePoolsCount += length;\\n    }\\n\\n    function removeFeeToken(uint256 _index) external onlyAdmin {\\n        require(_index < feePoolsCount, Errors.INVALID_INDEX);\\n        isFeeToken[feePools[_index].feeToken] = false;\\n        delete feePools[_index];\\n    }\\n    function setminBalance(uint256 _minBlance) external onlyAdmin {\\n        minBalance = _minBlance;\\n    }\\n\\n    /**\\n     * @notice onTransfer transfer the ownership of deposits .\\n     * @param _user old owner of the deposit\\n     * @param _newOwner new Owner of the deposit\\n     * @param _amount Amount to Transfer\\n     **/\\n    function onTransfer(\\n        address _user,\\n        address _newOwner,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        require(msg.sender == sdCRV3Address, \\\"No Right To Call Transfer\\\");\\n        require(balanceOf[_user] >= _amount, \\\"User Dont have enough deposit\\\");\\n        uint256 userBalance = balanceOf[_user];\\n        _updateAccPerShare(true, _user);\\n        _updateAccPerShare(true, _newOwner);\\n        unchecked {\\n            balanceOf[_user] = userBalance - _amount;\\n            balanceOf[_newOwner] = balanceOf[_newOwner] + _amount;\\n        }\\n\\n        _updateUserRewardDebt(_user);\\n        _updateUserRewardDebt(_newOwner);\\n    }\\n\\n    /**\\n     * @notice User Pending Reward\\n     * @param user User Address\\n     **/\\n    function pendingReward(\\n        address user\\n    ) external view returns (uint256[] memory pending) {\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        pending = new uint256[](_rewardPoolsCount);\\n        if (totalSupply != 0) {\\n            uint256[] memory addedRewards = _calcAddedRewards();\\n            for (uint256 i = 0; i < _rewardPoolsCount; ++i) {\\n                PoolData memory pool = rewardPools[i];\\n                if (pool.rewardToken == address(0)) {\\n                    continue;\\n                }\\n                uint256 newAccRewardPerShare = pool.accRewardPerShare +\\n                    ((addedRewards[i] * 1e36) / totalSupply);\\n\\n                pending[i] =\\n                    userPendingRewards[i][user] +\\n                    ((balanceOf[user] * newAccRewardPerShare) / 1e36) -\\n                    userRewardDebt[i][user];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposit CVX to Get bentCVX3\\n     * @param _amount Amount to deposit. 1 CVX for 1 3vlCVX\\n     **/\\n    function depositCRV(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"DepositCRV: Zero Amount is not acceptable\\\");\\n        IERC20 crvToken = IERC20(crvAddress);\\n        IERC20 sdcrvToken = IERC20(sdCRVAddress);\\n        ICrvDepositor crvDepositor = ICrvDepositor(crvDepositAddress);\\n        uint256 userCRVBalance = crvToken.balanceOf(msg.sender);\\n        require(userCRVBalance >= _amount, \\\"Not Enough CRV Balance\\\");\\n        uint256 userAmount = balanceOf[msg.sender];\\n        sdCRV3 sdCRV3Contract = sdCRV3(sdCRV3Address);\\n        _updateAccPerShare(true, msg.sender);\\n        crvToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 quantity = getQuantity(_amount);\\n        uint256 depositAmount = 0;\\n\\n        if (quantity > _amount) {\\n            depositAmount = swap(_amount, quantity);\\n            ICRVGauge sdcrvDepositor = ICRVGauge(sdGaugeAddress);\\n            sdcrvToken.approve(sdGaugeAddress, depositAmount);\\n            sdcrvDepositor.deposit(depositAmount);\\n        } else {\\n            depositAmount = _amount;\\n            crvToken.approve(crvDepositAddress, depositAmount);\\n            crvDepositor.deposit(_amount, false, true, address(this));\\n        }\\n\\n        sdCRV3Contract.mintRequest(msg.sender, depositAmount);\\n        totalSupply += depositAmount;\\n\\n        unchecked {\\n            balanceOf[msg.sender] = userAmount + depositAmount;\\n        }\\n        _updateUserRewardDebt(msg.sender);\\n        emit DepositCRV(msg.sender, depositAmount);\\n    }\\n\\n    /**\\n     * @dev Deposit BentCVX to Get bentCVX3\\n     * @param _amount Amount to deposit. 1 bentCVX for 1 3vlCVX\\n     **/\\n\\n    function depositsdCRV(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"DepositsdCRV: Zero Amount is not acceptable\\\");\\n        IERC20 sdcrvToken = IERC20(sdCRVAddress);\\n        ICRVGauge sdcrvDepositor = ICRVGauge(sdGaugeAddress);\\n        uint256 usersdCRVBalance = sdcrvToken.balanceOf(msg.sender);\\n        sdCRV3 sdCRV3Contract = sdCRV3(sdCRV3Address);\\n        require(usersdCRVBalance >= _amount, \\\"Not Enough sdCRV Balance\\\");\\n        uint256 userAmount = balanceOf[msg.sender];\\n        _updateAccPerShare(true, msg.sender);\\n        sdcrvToken.transferFrom(msg.sender, address(this), _amount);\\n        sdcrvToken.approve(sdGaugeAddress, _amount);\\n        sdcrvDepositor.deposit(_amount);\\n        sdCRV3Contract.mintRequest(msg.sender, _amount);\\n        totalSupply += _amount;\\n        unchecked {\\n            balanceOf[msg.sender] = userAmount + _amount;\\n        }\\n        _updateUserRewardDebt(msg.sender);\\n        emit DepositsdCRV(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice withdraw CVX to Get bentCVX3\\n     * @param _amount Amount to Withdraw. 1 CVX for 1 3vlCVX\\n     **/\\n    function withdrawsdCRV(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"WithdrawsdCRV: Zero Amount is not acceptable\\\");\\n        uint256 userBalance = balanceOf[msg.sender];\\n        sdCRV3 sdCRV3Contract = sdCRV3(sdCRV3Address);\\n        ICRVGauge sdcrvDepositor = ICRVGauge(sdGaugeAddress);\\n        IERC20 sdCRVContract = IERC20(sdCRVAddress);\\n        require(userBalance >= _amount, \\\"Sender have no enough Deposit\\\");\\n        _updateAccPerShare(true, msg.sender);\\n        sdcrvDepositor.withdraw(_amount);\\n        sdCRV3Contract.burnRequest(msg.sender, _amount);\\n        sdCRVContract.transfer(msg.sender, _amount);\\n        totalSupply -= _amount;\\n        unchecked {\\n            balanceOf[msg.sender] = userBalance - _amount;\\n        }\\n        _updateUserRewardDebt(msg.sender);\\n        emit WithdrawCRV(msg.sender, _amount);\\n    }\\n\\n    function claimAll(\\n        address _user\\n    ) external nonReentrant unlocked returns (bool claimed) {\\n        _updateAccPerShare(true, _user);\\n        //update\\n        _updateAccPerShare(true, address(this));\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        for (uint256 i = 0; i < _rewardPoolsCount; ++i) {\\n            uint256 claimAmount = _claim(i, _user);\\n            if (claimAmount > 0) {\\n                claimed = true;\\n            }\\n        }\\n        _updateUserRewardDebt(_user);\\n        //update\\n        _updateUserRewardDebt(address(this));\\n    }\\n\\n    /**\\n     * @notice Claim User Reward\\n     * @param pid Reward Pool Index\\n     **/\\n    function claim(uint256 pid) external unlocked nonReentrant {\\n        _updateAccPerShare(true, msg.sender);\\n        //update\\n        _updateAccPerShare(true, address(this));\\n        _claim(pid, msg.sender);\\n        _updateUserRewardDebt(msg.sender);\\n        //update\\n        _updateUserRewardDebt(address(this));\\n    }\\n\\n    function setDelegate(\\n        bytes32 id,\\n        address _delegateContract,\\n        address _delegate\\n    ) external nonReentrant onlyAdmin {\\n        IDelegation(_delegateContract).setDelegate(id, _delegate);\\n    }\\n\\n    function updateReserve() external nonReentrant onlyAdmin {\\n        for (uint256 i = 0; i < rewardPoolsCount; ++i) {\\n            PoolData storage pool = rewardPools[i];\\n            if (pool.rewardToken == address(0)) {\\n                continue;\\n            }\\n            uint256 newRewards = IERC20(pool.rewardToken).balanceOf(\\n                address(this)\\n            ) - pool.reserves;\\n            pool.reserves += newRewards;\\n            newRewardFinal[pool.rewardToken] += newRewards;\\n        }\\n    }\\n\\n    function change_admin(address _address) external onlyAdmin {\\n        require(address(0) != _address, \\\"Can not Set Zero Address\\\");\\n        admin = _address;\\n    }\\n\\n    /**\\n     * @notice withdraw Any Token By Owner of Contract\\n     * @param _token token Address to withdraw\\n     * @param _amount Amount of token to withdraw\\n     **/\\n    function withdraw_admin(\\n        address _token,\\n        uint256 _amount\\n    ) external nonReentrant onlyAdmin {\\n        IERC20(_token).transfer(admin, _amount);\\n    }\\n\\n    function _updateAccPerShare(bool withdrawReward, address user) internal {\\n        uint256[] memory addedRewards = _calcAddedRewards();\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        for (uint256 i = 0; i < _rewardPoolsCount; ++i) {\\n            PoolData storage pool = rewardPools[i];\\n            if (pool.rewardToken == address(0)) {\\n                continue;\\n            }\\n\\n            if (totalSupply == 0) {\\n                pool.accRewardPerShare = block.number;\\n            } else {\\n                pool.accRewardPerShare +=\\n                    (addedRewards[i] * (1e36)) /\\n                    totalSupply;\\n            }\\n\\n            if (withdrawReward) {\\n                uint256 pending = ((balanceOf[user] * pool.accRewardPerShare) /\\n                    1e36) - userRewardDebt[i][user];\\n                if (pending > 0) {\\n                    userPendingRewards[i][user] += pending;\\n                }\\n            }\\n        }\\n\\n        lastRewardBlock = block.number;\\n    }\\n\\n    function _updateUserRewardDebt(address user) internal {\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        for (uint256 i = 0; i < _rewardPoolsCount; ++i) {\\n            if (rewardPools[i].rewardToken != address(0)) {\\n                userRewardDebt[i][user] =\\n                    (balanceOf[user] * rewardPools[i].accRewardPerShare) /\\n                    1e36;\\n            }\\n        }\\n    }\\n\\n    // Should We Call Rewarder or Staker Contract For Getting Claim. Make Sure of it!!\\n    function masterClaim() external nonReentrant {\\n        // Master Claim Functionaltiy\\n        address[] memory _gauges = new address[](1);\\n        _gauges[0] = address(sdGaugeAddress);\\n        IClaimRewards claimContract = IClaimRewards(claimContractAddress);\\n        claimContract.claimRewards(_gauges);\\n        //Fee Percentrage\\n        _updateAccPerShare(false, address(0)); //to update lastrewardblock\\n\\n        for (uint256 i = 0; i < feePoolsCount; ++i) {\\n            FeeData storage feePool = feePools[i];\\n            if (feePool.feeToken == address(0)) {\\n                continue;\\n            }\\n\\n            uint256 newRewards = IERC20(feePool.feeToken).balanceOf(\\n                address(this)\\n            ) - feePool.feeReserves;\\n\\n            uint256 newRewardsFees = (newRewards * harvesterFee) / 10000;\\n            // uint256 newRewardsFinal = newRewards - newRewardsFees;\\n\\n            feePool.feeReserves += newRewardsFees;\\n\\n            uint256 masterClaimReward = (newRewardsFees *\\n                masterClaimPercentage) / 10000;\\n            uint256 adminReward = (newRewardsFees * adminPercentage) / 10000;\\n            uint256 onRewardReward = (newRewardsFees * onRewardPercentage) /\\n                10000;\\n            uint256 reStakeReward = (newRewardsFees * reStakePercentage) /\\n                10000;\\n\\n            onRewardFee[feePool.feeToken] += onRewardReward;\\n            reStakeFee[feePool.feeToken] += reStakeReward;\\n\\n            if (masterClaimReward > 0) {\\n                 feePool.feeReserves =\\n                    feePool.feeReserves -\\n                    (masterClaimReward + adminReward);\\n\\n                IERC20(feePool.feeToken).transfer(\\n                    msg.sender,\\n                    masterClaimReward\\n                );\\n                IERC20(feePool.feeToken).transfer(admin, adminReward);\\n            }\\n        }\\n\\n    }\\n\\n    function masterWithdraw() external onlyAdmin {\\n        ICRVGauge sdcrvDepositor = ICRVGauge(sdGaugeAddress);\\n        sdcrvDepositor.withdraw(sdcrvDepositor.balanceOf(address(this)));\\n    }\\n\\n    function onReward(address[9] memory _route1,\\n        uint256[3][4] calldata i1,\\n        address[4] memory pools,\\n        address[9] memory _route2,\\n        uint256[3][4] calldata i2,\\n        address[9] memory _route3,\\n        uint256[3][4] calldata i3\\n        ) external nonReentrant {\\n \\n        for (uint256 i = 0; i < feePoolsCount; ++i) {\\n            FeeData storage feePool = feePools[i];\\n            require(IERC20(feePool.feeToken).balanceOf(address(this)) >= minBalance,\\\"OnReward: Contract has not enough balance\\\");\\n        }  \\n        //swapping Rewards into sdCRV\\n        AllRewardsSwap(_route1, i1, pools, _route2, i2, _route3, i3);\\n        \\n        _updateAccPerShare(false, address(0));\\n\\n        bool newRewardsAvailable = false;\\n        for (uint256 i = 0; i < rewardPoolsCount; ++i) {\\n            PoolData storage pool = rewardPools[i];\\n            if (pool.rewardToken == address(0)) {\\n                continue;\\n            }\\n\\n            uint256 newRewardsFinal = newRewardFinal[pool.rewardToken];\\n    \\n            if (newRewardsFinal > 0) {\\n                newRewardsAvailable = true;\\n            }\\n            if (endRewardBlock > lastRewardBlock) {\\n                pool.rewardRate =\\n                    (pool.rewardRate *\\n                        (endRewardBlock - lastRewardBlock) +\\n                        newRewardsFinal *\\n                        1e36) /\\n                    windowLength;\\n            } else {\\n                pool.rewardRate = (newRewardsFinal * 1e36) / windowLength;\\n            }\\n            newRewardFinal[pool.rewardToken] = 0;\\n        }\\n\\n        for (uint256 i = 0; i < feePoolsCount; ++i) {\\n            FeeData storage feePool = feePools[i];\\n            if (onRewardFee[feePool.feeToken] > 0) {\\n                uint256 amount = onRewardFee[feePool.feeToken];\\n                onRewardFee[feePool.feeToken] = 0;\\n\\n                IERC20(feePool.feeToken).transfer(msg.sender, amount);\\n            }\\n        }\\n\\n        require(newRewardsAvailable, Errors.ZERO_AMOUNT);\\n        endRewardBlock = lastRewardBlock + windowLength;\\n    }\\n\\n    function _claim(\\n        uint256 pid,\\n        address user\\n    ) internal returns (uint256 claimAmount) {\\n        if (rewardPools[pid].rewardToken == address(0)) {\\n            return 0;\\n        } //update\\n        uint256 _claimAmount = userPendingRewards[pid][user];\\n        uint256 compoundRewards = userPendingRewards[pid][address(this)];\\n        uint256 beneficiaries = totalSupply - balanceOf[address(this)]; //total user staked\\n        uint256 finalAmountPerShare = compoundRewards / beneficiaries;\\n        uint256 userCompoundShare = balanceOf[user] * finalAmountPerShare;\\n        claimAmount = _claimAmount + userCompoundShare;\\n        userPendingRewards[pid][address(this)] -= userCompoundShare;\\n\\n        if (claimAmount > 0) {\\n            // update for reward restaked\\n            uint256 contractBalance = (\\n                IERC20(rewardPools[pid].rewardToken).balanceOf(address(this))\\n            );\\n            if (claimAmount > contractBalance) {\\n                uint256 _amount = claimAmount - contractBalance;\\n                withdrawRestaked(_amount);\\n            }\\n\\n            IERC20(rewardPools[pid].rewardToken).transfer(user, claimAmount);\\n           \\n            rewardPools[pid].reserves -= _claimAmount;\\n            userPendingRewards[pid][user] = 0;\\n        }\\n    }\\n\\n    function _calcAddedRewards()\\n        internal\\n        view\\n        returns (uint256[] memory addedRewards)\\n    {\\n        uint256 startBlock = endRewardBlock > lastRewardBlock + windowLength\\n            ? endRewardBlock - windowLength\\n            : lastRewardBlock;\\n        uint256 endBlock = block.number > endRewardBlock\\n            ? endRewardBlock\\n            : block.number;\\n        uint256 duration = endBlock > startBlock ? endBlock - startBlock : 0;\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        addedRewards = new uint256[](_rewardPoolsCount);\\n        for (uint256 i = 0; i < _rewardPoolsCount; ++i) {\\n            addedRewards[i] = (rewardPools[i].rewardRate * duration) / 1e36;\\n        }\\n    }\\n\\n    //update\\n    function reStake(uint256 _amount) external {\\n        require(_amount > 0, \\\"reStake: Zero Amount is not acceptable\\\");\\n        IERC20 sdcrvToken = IERC20(sdCRVAddress);\\n        ICRVGauge sdcrvDepositor = ICRVGauge(sdGaugeAddress);\\n        uint256 contractsdCRVBalance = sdcrvToken.balanceOf(address(this));\\n        require(contractsdCRVBalance >= _amount, \\\"Not Enough sdCRV Balance\\\");\\n        uint256 userAmount = balanceOf[address(this)];\\n        sdCRV3 sdCRV3Contract = sdCRV3(sdCRV3Address);\\n        _updateAccPerShare(true, address(this));\\n\\n        sdcrvToken.approve(sdGaugeAddress, _amount);\\n        sdcrvDepositor.deposit(_amount);\\n\\n        sdCRV3Contract.mintRequest(address(this), _amount);\\n        totalSupply += _amount;\\n        unchecked {\\n            balanceOf[address(this)] = userAmount + _amount;\\n        }\\n        //fee distribution\\n        for (uint256 i = 0; i < feePoolsCount; ++i) {\\n            FeeData storage feePool = feePools[i];\\n            if (feePool.feeToken == address(0)) {\\n                continue;\\n            }\\n            if (reStakeFee[feePool.feeToken] > 0) {\\n                uint256 amount = reStakeFee[feePool.feeToken];\\n                reStakeFee[feePool.feeToken] = 0;\\n\\n                IERC20(feePool.feeToken).transfer(msg.sender, amount);\\n            }\\n        }\\n        _updateUserRewardDebt(address(this));\\n    }\\n\\n    function reStakedAmount() public view returns (uint256 amount) {\\n        amount = balanceOf[address(this)];\\n    }\\n\\n    function withdrawRestaked(uint256 _amount) private {\\n        require(_amount > 0, \\\"WithdrawRestaked: Zero Amount is not acceptable\\\");\\n        uint256 userBalance = balanceOf[address(this)];\\n        sdCRV3 sdCRV3Contract = sdCRV3(sdCRV3Address);\\n        require(userBalance >= _amount, \\\"Not enough Deposit\\\");\\n        _updateAccPerShare(true, address(this));\\n        sdCRV3Contract.burnRequest(address(this), _amount);\\n        ICRVGauge sdcrvDepositor = ICRVGauge(sdGaugeAddress);\\n        sdcrvDepositor.withdraw(_amount);\\n\\n        totalSupply -= _amount;\\n        unchecked {\\n            balanceOf[address(this)] = userBalance - (_amount);\\n        }\\n        _updateUserRewardDebt(address(this));\\n    }\\n\\n    function withdrawsdCRVAndClaimAll()\\n        external\\n        nonReentrant\\n        returns (bool claimed)\\n    {\\n        uint256 userBalance = balanceOf[msg.sender];\\n        sdCRV3 sdCRV3Contract = sdCRV3(sdCRV3Address);\\n        ICRVGauge sdcrvDepositor = ICRVGauge(sdGaugeAddress);\\n        IERC20 sdCRVContract = IERC20(sdCRVAddress);\\n        require(userBalance > 0, \\\"Sender have no Deposit\\\");\\n        _updateAccPerShare(true, msg.sender);\\n\\n        _updateAccPerShare(true, address(this));\\n        sdcrvDepositor.withdraw(userBalance);\\n\\n        sdCRV3Contract.burnRequest(msg.sender, userBalance);\\n        sdCRVContract.transfer(msg.sender, userBalance);\\n\\n        //update\\n        unchecked {\\n            totalSupply -= userBalance;\\n            balanceOf[msg.sender] = 0;\\n        }\\n        // claim\\n        uint256 _rewardPoolsCount = rewardPoolsCount;\\n        for (uint256 i = 0; i < _rewardPoolsCount; ++i) {\\n            uint256 claimAmount = _claim(i, msg.sender);\\n            if (claimAmount > 0) {\\n                claimed = true;\\n            }\\n        }\\n\\n        _updateUserRewardDebt(msg.sender);\\n        _updateUserRewardDebt(address(this));\\n\\n        emit WithdrawCRV(msg.sender, userBalance); //change event name\\n        emit ClaimAll(msg.sender);\\n    }\\n\\n    function unlockClaiming() external onlyAdmin {\\n        require(unLocked == false, \\\"Already un-locked\\\");\\n        unLocked = true;\\n    }\\n\\n    function lockClaiming() external onlyAdmin {\\n        require(unLocked == true, \\\"Already Locked\\\");\\n        unLocked = false;\\n    }\\n\\n    function getQuantity(uint256 amountA) public returns (uint256 quantity) {\\n        quantity = Ipool(pool).get_dy(0, 1, amountA);\\n    }\\n\\n    function swap(\\n        uint256 amountA,\\n        uint256 amountB\\n    ) public returns (uint256 _swapped) {\\n        IERC20 crvToken = IERC20(crvAddress);\\n        crvToken.approve(pool, amountA);\\n        _swapped = Ipool(pool).exchange(0, 1, amountA, amountB);\\n    }\\n\\n    function grandSwap(\\n        address[9] memory _route,\\n        uint256[3][4] calldata i,\\n        uint256 _amountA,\\n        address[4] memory pools\\n    ) internal {\\n        IERC20 Token = IERC20(_route[0]);\\n        Token.approve(registry, _amountA);\\n        Iregistry(registry).exchange_multiple(_route, i, _amountA, 0, pools);\\n    }\\n\\n    function AllRewardsSwap(\\n        address[9] memory _route1,\\n        uint256[3][4] calldata i1,\\n        address[4] memory pools,\\n        address[9] memory _route2,\\n        uint256[3][4] calldata i2,\\n        address[9] memory _route3,\\n        uint256[3][4] calldata i3\\n    ) internal {\\n        //for swapping all reward into sdCRV\\n        address sdtAddress = address(\\n            0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F\\n        );\\n        address crv3Address = address(\\n            0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490\\n        );\\n        uint256 balance1 = (IERC20(crv3Address).balanceOf(address(this)) >\\n            (onRewardFee[crv3Address] + reStakeFee[crv3Address]))\\n            ? (IERC20(crv3Address).balanceOf(address(this)) -\\n                (onRewardFee[crv3Address] + reStakeFee[crv3Address]))\\n            : 0;\\n\\n        uint256 balance2 = (IERC20(crvAddress).balanceOf(address(this)) >\\n            (onRewardFee[crvAddress] + reStakeFee[crvAddress]))\\n            ? (IERC20(crvAddress).balanceOf(address(this)) -\\n                (onRewardFee[crvAddress] + reStakeFee[crvAddress]))\\n            : 0;\\n\\n        uint256 balance3 = (IERC20(sdtAddress).balanceOf(address(this)) >\\n            (onRewardFee[sdtAddress] + reStakeFee[sdtAddress]))\\n            ? (IERC20(sdtAddress).balanceOf(address(this)) -\\n                (onRewardFee[sdtAddress] + reStakeFee[sdtAddress]))\\n            : 0;\\n        uint256 balanceBefore = IERC20(sdCRVAddress).balanceOf(address(this));\\n        if (balance1 > 0) {\\n            grandSwap(_route1, i1, balance1, pools);\\n        }\\n        if (balance2 > 0) {\\n            grandSwap(_route2, i2, balance2, pools);\\n        }\\n        if (balance3 > 0) {\\n            grandSwap(_route3, i3, balance3, pools);\\n        }\\n        uint256 balanceAfter = IERC20(sdCRVAddress).balanceOf(address(this));\\n        uint256 newRewards = balanceAfter - balanceBefore;\\n\\n        newRewardFinal[sdCRVAddress] += newRewards;\\n        PoolData storage _pool = rewardPools[0];\\n        _pool.reserves += newRewards;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./interface/ICRVDepositor.sol\\\";\\r\\nimport \\\"./interface/IClaimRewards.sol\\\";\\r\\nimport \\\"./interface/ICRVFactory.sol\\\";\\r\\nimport \\\"./interface/ICRVGauge.sol\\\";\\r\\nimport \\\"./interface/IDelegation.sol\\\";\\r\\nimport \\\"./interface/IPool.sol\\\";\\r\\nimport \\\"./interface/IRegistry.sol\\\";\\r\\nimport \\\"./interface/IERC20.sol\\\";\\r\\nimport \\\"./sdCRV3.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./libraries/Errors.sol\\\";\\r\\n\\r\\n\\r\\ncontract Swap is Initializable, ReentrancyGuardUpgradeable {\\r\\naddress public registry;\\r\\n     function initialize(\\r\\naddress _registry\\r\\n    ) external initializer {\\r\\n        registry = _registry;\\r\\n    }\\r\\n\\r\\n\\r\\n    function grandSwap(\\r\\n        address[9] memory _route,\\r\\n        uint256[3][4] calldata i,\\r\\n        uint256 _amountA,\\r\\n        address[4] memory pools\\r\\n    ) public {\\r\\n        IERC20 Token = IERC20(_route[0]);\\r\\n        Token.approve(registry, _amountA);\\r\\n        Iregistry(registry).exchange_multiple(_route, i, _amountA, 0, pools);\\r\\n    }\\r\\n\\r\\nfunction _swap(address[9] memory _route1,\\r\\n        uint256[3][4] calldata i1,\\r\\n        uint256 amount1,\\r\\n        address[4] memory pools,\\r\\n        address[9] memory _route2,\\r\\n        uint256[3][4] calldata i2,\\r\\n        uint256 amount2,\\r\\n        address[9] memory _route3,\\r\\n        uint256[3][4] calldata i3,\\r\\n        uint256 amount3) public {\\r\\n                        grandSwap(_route1, i1, amount1, pools);\\r\\n                                    grandSwap(_route2, i2, amount2, pools);\\r\\n                                                grandSwap(_route3, i3, amount3, pools);\\r\\n            \\r\\n\\r\\n        }\\r\\n}\"\r\n    },\r\n    \"contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"./AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[9]\",\"name\":\"_route1\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"i1\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"pools\",\"type\":\"address[4]\"},{\"internalType\":\"address[9]\",\"name\":\"_route2\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"i2\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"},{\"internalType\":\"address[9]\",\"name\":\"_route3\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"i3\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"uint256\",\"name\":\"amount3\",\"type\":\"uint256\"}],\"name\":\"_swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[9]\",\"name\":\"_route\",\"type\":\"address[9]\"},{\"internalType\":\"uint256[3][4]\",\"name\":\"i\",\"type\":\"uint256[3][4]\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"pools\",\"type\":\"address[4]\"}],\"name\":\"grandSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Swap", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}