{"SourceCode": "pragma solidity 0.4.20;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function Owned() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == pendingOwner);\r\n        OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// Support accounts using for change Ether price, manual migration and sending tokens during ICO, see endOfFreeze field\r\ncontract Support is Owned {\r\n    mapping (address => bool) public supportAccounts;\r\n\r\n    event SupportAdded(address indexed _who);\r\n    event SupportRemoved(address indexed _who);\r\n\r\n    modifier supportOrOwner {\r\n        require(msg.sender == owner || supportAccounts[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function addSupport(address _who) public onlyOwner {\r\n        require(_who != address(0));\r\n        require(_who != owner);\r\n        require(!supportAccounts[_who]);\r\n        supportAccounts[_who] = true;\r\n        SupportAdded(_who);\r\n    }\r\n\r\n    function removeSupport(address _who) public onlyOwner {\r\n        require(supportAccounts[_who]);\r\n        supportAccounts[_who] = false;\r\n        SupportRemoved(_who);\r\n    }\r\n}\r\n\r\n// Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    // Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    // Adds two numbers, throws on overflow.\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// ERC20 interface https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\ncontract ERC20 {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint balance);\r\n    function allowance(address owner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint value) public returns (bool success);\r\n    function transferFrom(address from, address to, uint value) public returns (bool success);\r\n    function approve(address spender, uint value) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// Interface for migration to a new contract address\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract AdvancedToken is ERC20, Support {\r\n    using SafeMath for uint;\r\n\r\n    uint internal MAX_SUPPLY = 110000000 * 1 ether;\r\n    address public migrationAgent;\r\n\r\n    mapping (address => uint) internal balances;\r\n\r\n    enum State { Waiting, ICO, Running, Migration }\r\n    State public state = State.Waiting;\r\n\r\n    event NewState(State state);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * The migration process to transfer tokens to the new token contract, when in the contract, a sufficiently large\r\n     * number of investors that the company can't cover a miner fees to transfer all tokens, this will\r\n     * be used in the following cases:\r\n     * 1. If a critical error is found in the contract\r\n     * 2. When will be released and approved a new standard for digital identification ERC-725 or similar\r\n     * @param _agent The new token contract\r\n     */\r\n    function setMigrationAgent(address _agent) public onlyOwner {\r\n        require(state == State.Running);\r\n        migrationAgent = _agent;\r\n    }\r\n\r\n    // Called after setMigrationAgent function to make sure that a new contract address is valid\r\n    function startMigration() public onlyOwner {\r\n        require(migrationAgent != address(0));\r\n        require(state == State.Running);\r\n        state = State.Migration;\r\n        NewState(state);\r\n    }\r\n\r\n    // Migration can be canceled if tokens have not yet been sent to the new contract\r\n    function cancelMigration() public onlyOwner {\r\n        require(state == State.Migration);\r\n        require(totalSupply == MAX_SUPPLY);\r\n        migrationAgent = address(0);\r\n        state = State.Running;\r\n        NewState(state);\r\n    }\r\n\r\n    // Manual migration if someone has problems moving\r\n    function manualMigrate(address _who) public supportOrOwner {\r\n        require(state == State.Migration);\r\n        require(_who != address(this));\r\n        require(balances[_who] > 0);\r\n        uint value = balances[_who];\r\n        balances[_who] = balances[_who].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        Burn(_who, value);\r\n        MigrationAgent(migrationAgent).migrateFrom(_who, value);\r\n    }\r\n\r\n    // Migrate the holder's tokens to a new contract and burn the holder's tokens on the current contract\r\n    function migrate() public {\r\n        require(state == State.Migration);\r\n        require(balances[msg.sender] > 0);\r\n        uint value = balances[msg.sender];\r\n        balances[msg.sender] = balances[msg.sender].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        Burn(msg.sender, value);\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\r\n    }\r\n\r\n    // The withdraw of Tokens from the contract after the end of ICO\r\n    function withdrawTokens(uint _value) public onlyOwner {\r\n        require(state == State.Running || state == State.Migration);\r\n        require(balances[address(this)] > 0 && balances[address(this)] >= _value);\r\n        balances[address(this)] = balances[address(this)].sub(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        Transfer(address(this), msg.sender, _value);\r\n    }\r\n\r\n    // The withdraw of Ether from the contract\r\n    function withdrawEther(uint256 _value) public onlyOwner {\r\n        require(this.balance >= _value);\r\n        owner.transfer(_value);\r\n    }\r\n}\r\n\r\ncontract Crowdsale is AdvancedToken {\r\n    uint internal endOfFreeze = 1522569600; // Sun, 01 Apr 2018 00:00:00 PST\r\n    uint private tokensForSalePhase2;\r\n    uint public tokensPerEther;\r\n\r\n    address internal reserve = 0x4B046B05C29E535E152A3D9c8FB7540a8e15c7A6;\r\n\r\n    function Crowdsale() internal {\r\n        assert(reserve != address(0));\r\n        tokensPerEther = 2000 * 1 ether; // Tokens ^ 18\r\n        totalSupply = MAX_SUPPLY;\r\n        uint MARKET_SHARE = 66000000 * 1 ether;\r\n        uint tokensSoldPhase1 = 11110257 * 1 ether;\r\n        tokensForSalePhase2 = MARKET_SHARE - tokensSoldPhase1;\r\n\r\n        // Tokens for the Phase 2 are on the contract and not available to withdraw by owner during the ICO\r\n        balances[address(this)] = tokensForSalePhase2;\r\n        // Tokens for the Phase 1 are on the owner to distribution by manually processes\r\n        balances[owner] = totalSupply - tokensForSalePhase2;\r\n\r\n        assert(balances[address(this)] + balances[owner] == MAX_SUPPLY);\r\n        Transfer(0, address(this), balances[address(this)]);\r\n        Transfer(0, owner, balances[owner]);\r\n    }\r\n\r\n    // Setting the number of tokens to buy for 1 Ether, changes automatically by owner or support account\r\n    function setTokensPerEther(uint _tokens) public supportOrOwner {\r\n        require(state == State.ICO || state == State.Waiting);\r\n        require(_tokens > 100 ether); // Min 100 tokens ^ 18\r\n        tokensPerEther = _tokens;\r\n    }\r\n\r\n    // The payable function to buy Skraps tokens\r\n    function () internal payable {\r\n        require(msg.sender != address(0));\r\n        require(state == State.ICO || state == State.Migration);\r\n        if (state == State.ICO) {\r\n            // The minimum ether to participate\r\n            require(msg.value >= 0.01 ether);\r\n            // Counting and sending tokens to the investor\r\n            uint _tokens = msg.value * tokensPerEther / 1 ether;\r\n            require(balances[address(this)] >= _tokens);\r\n            balances[address(this)] = balances[address(this)].sub(_tokens);\r\n            balances[msg.sender] = balances[msg.sender].add(_tokens);\r\n            Transfer(address(this), msg.sender, _tokens);\r\n\r\n            // send 25% of ether received to reserve address\r\n            uint to_reserve = msg.value * 25 / 100;\r\n            reserve.transfer(to_reserve);\r\n        } else {\r\n            require(msg.value == 0);\r\n            migrate();\r\n        }\r\n    }\r\n\r\n    // Start ISO manually because the block timestamp is not mean the current time\r\n    function startICO() public supportOrOwner {\r\n        require(state == State.Waiting);\r\n        state = State.ICO;\r\n        NewState(state);\r\n    }\r\n\r\n    // Since a contracts can not call itself, we must manually close the ICO\r\n    function closeICO() public onlyOwner {\r\n        require(state == State.ICO);\r\n        state = State.Running;\r\n        NewState(state);\r\n    }\r\n\r\n    // Anti-scam function, if the tokens are obtained by dishonest means, can be used only during ICO\r\n    function refundTokens(address _from, uint _value) public onlyOwner {\r\n        require(state == State.ICO);\r\n        require(balances[_from] >= _value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[address(this)] = balances[address(this)].add(_value);\r\n        Transfer(_from, address(this), _value);\r\n    }\r\n}\r\n\r\n/**\r\n * Standard ERC20 implementation, see the interface above,\r\n * with a small modification to block the transfer of tokens until a specific date, see endOfFreeze field\r\n */\r\ncontract Skraps is Crowdsale {\r\n    using SafeMath for uint;\r\n\r\n    string public name = \"Skraps\";\r\n    string public symbol = \"SKRP\";\r\n    uint8 public decimals = 18;\r\n\r\n    mapping (address => mapping (address => uint)) private allowed;\r\n\r\n    function balanceOf(address _who) public constant returns (uint) {\r\n        return balances[_who];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        require(now > endOfFreeze || msg.sender == owner || supportAccounts[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(allowed[_from][msg.sender] >= _value);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        require(_spender != address(0));\r\n        require(now > endOfFreeze || msg.sender == owner || supportAccounts[msg.sender]);\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"manualMigrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"removeSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"closeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"setTokensPerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addSupport\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"NewState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"SupportAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"SupportRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "Skraps", "CompilerVersion": "v0.4.20+commit.3155dd80", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b8ece78acfc7f5a80fe3a6dc139e5772225c589ca46f007597d561ab2ab3e5e4"}