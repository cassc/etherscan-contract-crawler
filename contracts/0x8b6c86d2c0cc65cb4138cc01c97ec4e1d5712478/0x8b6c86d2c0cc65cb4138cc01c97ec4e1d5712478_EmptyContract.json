{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"script/helpers/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {\\n    ITransparentUpgradeableProxy,\\n    TransparentUpgradeableProxy\\n} from \\\"openzeppelin/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport {TimelockController} from \\\"openzeppelin/governance/TimelockController.sol\\\";\\n\\nimport {AccessControlUpgradeable} from \\\"openzeppelin-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {AccessControl} from \\\"openzeppelin/access/AccessControl.sol\\\";\\n\\nimport {IDepositContract} from \\\"../../src/interfaces/IDepositContract.sol\\\";\\nimport {Pauser} from \\\"../../src/Pauser.sol\\\";\\nimport {Oracle} from \\\"../../src/Oracle.sol\\\";\\nimport {OracleQuorumManager} from \\\"../../src/OracleQuorumManager.sol\\\";\\nimport {ReturnsReceiver} from \\\"../../src/ReturnsReceiver.sol\\\";\\nimport {ReturnsAggregator} from \\\"../../src/ReturnsAggregator.sol\\\";\\nimport {UnstakeRequestsManager} from \\\"../../src/UnstakeRequestsManager.sol\\\";\\nimport {Staking} from \\\"../../src/Staking.sol\\\";\\nimport {METH} from \\\"../../src/METH.sol\\\";\\n\\n// EmptyContract serves as a dud implementation for the proxy, which lets us point\\n// to something and deploy the proxy before we deploy the implementation.\\n// This helps avoid the cyclic dependencies in init.\\ncontract EmptyContract {}\\n\\nstruct Deployments {\\n    TimelockController proxyAdmin;\\n    METH mETH;\\n    Oracle oracle;\\n    OracleQuorumManager quorumManager;\\n    Pauser pauser;\\n    ReturnsAggregator aggregator;\\n    ReturnsReceiver consensusLayerReceiver;\\n    ReturnsReceiver executionLayerReceiver;\\n    Staking staking;\\n    UnstakeRequestsManager unstakeRequestsManager;\\n}\\n\\n/// @notice Deployment paramaters for the protocol contract\\n/// @dev These are mostly externally controlled addresses\\n/// @param admin the admin of the timelock controller that administers the proxy contracts.\\n/// @param upgrader the proposer and executor of the timelock controller that administers the proxy contracts.\\n/// @param manager the manager of the contracts (allowed to access setters, etc.). Using the same manager for all\\n/// contracts is our default for now but might change in the future.\\n/// @param pauser the address that can pause the protocol.\\n/// @param unpauser the address that can unpause the protocol.\\n/// @param allocatorService the address of the allocator service that can allocate ETH on the staking contract.\\n/// @param initiatorService the address of the initiator service that can initiate new validators.\\n/// @param requestCanceller the address of the request canceller that can cancel unfinalized unstake requests.\\n/// @param depositContract the address of the deposit contract.\\n/// @param pendingResolver the address that can resolve pending oracle records.\\n/// @param reporterModifier the address that can modify the reporter set on the oracle quorum manager.\\n/// @param reporters the addresses of the initial set of reporters on the oracle quorum manager.\\n/// @param feesReceiver the address that receives the protocol fees.\\nstruct DeploymentParams {\\n    address admin;\\n    address manager;\\n    address upgrader;\\n    address pauser;\\n    address unpauser;\\n    address allocatorService;\\n    address initiatorService;\\n    address requestCanceller;\\n    address depositContract;\\n    address pendingResolver;\\n    address reporterModifier;\\n    address[] reporters;\\n    address payable feesReceiver;\\n}\\n\\nfunction deployAll(DeploymentParams memory params) returns (Deployments memory) {\\n    return deployAll(params, msg.sender);\\n}\\n\\n/// @notice Deploys all proxy and implementation contract, initializes them and returns a struct containing all the\\n/// addresses.\\n/// @dev All upgradeable contracts are deployed using the transparent proxy pattern, with the proxy admin being a\\n/// timelock controller with `params.upgrader` as proposer and executor, and `params.admin` as timelock admin.\\n/// The `deployer` will be added as admin, proposer and executer for the duration of the deployment. The permissions are\\n/// renounced accordingly at the end of the deployment.\\n/// @param params the configuration to use for the deployment.\\n/// @param deployer the address executing this function. While this will always be `msg.sender` in deployement scripts,\\n/// it will need to be set in tests as `prank`s will not affect `msg.sender` in free functions.\\nfunction deployAll(DeploymentParams memory params, address deployer) returns (Deployments memory) {\\n    address[] memory controllers = new address[](2);\\n    controllers[0] = params.upgrader;\\n    controllers[1] = deployer;\\n    TimelockController proxyAdmin =\\n        new TimelockController({minDelay: 0, admin: deployer, proposers: controllers, executors: controllers});\\n\\n    // Create empty contract for proxy pointer\\n    EmptyContract empty = new EmptyContract();\\n\\n    // Create proxies for all contracts\\n    Deployments memory ds = Deployments({\\n        proxyAdmin: proxyAdmin,\\n        oracle: Oracle(address(newProxy(empty, proxyAdmin))),\\n        quorumManager: OracleQuorumManager(address(newProxy(empty, proxyAdmin))),\\n        unstakeRequestsManager: UnstakeRequestsManager(payable(newProxy(empty, proxyAdmin))),\\n        mETH: METH(address(newProxy(empty, proxyAdmin))),\\n        pauser: Pauser(address(newProxy(empty, proxyAdmin))),\\n        staking: Staking(payable(newProxy(empty, proxyAdmin))),\\n        consensusLayerReceiver: ReturnsReceiver(payable(newProxy(empty, proxyAdmin))),\\n        executionLayerReceiver: ReturnsReceiver(payable(newProxy(empty, proxyAdmin))),\\n        aggregator: ReturnsAggregator(payable(newProxy(empty, proxyAdmin)))\\n    });\\n\\n    // Upgrade and iniitialize contracts\\n    ds.consensusLayerReceiver = initReturnsReceiver(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.consensusLayerReceiver)),\\n        ReturnsReceiver.Init({admin: params.admin, manager: params.manager, withdrawer: address(ds.aggregator)})\\n    );\\n\\n    ds.executionLayerReceiver = initReturnsReceiver(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.executionLayerReceiver)),\\n        ReturnsReceiver.Init({admin: params.admin, manager: params.manager, withdrawer: address(ds.aggregator)})\\n    );\\n\\n    // Add the provided pauser address from params and the oracle to the PAUSER_ROLE on the pausing contract.\\n    // This gives the oracle the ability to pause the contracts if the sanity check fails.\\n    ds.pauser = initPauser(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.pauser)),\\n        Pauser.Init({admin: params.admin, pauser: params.pauser, unpauser: params.unpauser, oracle: ds.oracle})\\n    );\\n\\n    ds.mETH = initMETH(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.mETH)),\\n        METH.Init({admin: params.admin, staking: ds.staking, unstakeRequestsManager: ds.unstakeRequestsManager})\\n    );\\n\\n    // Oracle relies on staking and aggregator to process oracle records, so we need to deploy those first.\\n    ds.staking = initStaking(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.staking)),\\n        Staking.Init({\\n            admin: params.admin,\\n            manager: params.manager,\\n            pauser: ds.pauser,\\n            allocatorService: params.allocatorService,\\n            initiatorService: params.initiatorService,\\n            withdrawalWallet: address(ds.consensusLayerReceiver),\\n            mETH: ds.mETH,\\n            depositContract: IDepositContract(params.depositContract),\\n            oracle: ds.oracle,\\n            returnsAggregator: address(ds.aggregator),\\n            unstakeRequestsManager: ds.unstakeRequestsManager\\n        })\\n    );\\n\\n    ds.aggregator = initReturnsAggregator(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.aggregator)),\\n        ReturnsAggregator.Init({\\n            admin: params.admin,\\n            manager: params.manager,\\n            staking: ds.staking,\\n            pauser: ds.pauser,\\n            oracle: ds.oracle,\\n            consensusLayerReceiver: ds.consensusLayerReceiver,\\n            executionLayerReceiver: ds.executionLayerReceiver,\\n            feesReceiver: params.feesReceiver\\n        })\\n    );\\n\\n    ds.oracle = initOracle(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.oracle)),\\n        Oracle.Init({\\n            admin: params.admin,\\n            manager: params.manager,\\n            oracleUpdater: address(ds.quorumManager),\\n            aggregator: ds.aggregator,\\n            pauser: ds.pauser,\\n            pendingResolver: params.pendingResolver,\\n            staking: Staking(payable(address(ds.staking)))\\n        })\\n    );\\n\\n    ds.quorumManager = initOracleQuorumManager(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.quorumManager)),\\n        OracleQuorumManager.Init({\\n            admin: params.admin,\\n            manager: params.manager,\\n            reporterModifier: params.reporterModifier,\\n            allowedReporters: params.reporters,\\n            oracle: ds.oracle\\n        })\\n    );\\n\\n    ds.unstakeRequestsManager = initUnstakeRequestsManager(\\n        proxyAdmin,\\n        ITransparentUpgradeableProxy(address(ds.unstakeRequestsManager)),\\n        UnstakeRequestsManager.Init({\\n            admin: params.admin,\\n            manager: params.manager,\\n            requestCanceller: params.requestCanceller,\\n            oracle: ds.oracle,\\n            mETH: ds.mETH,\\n            stakingContract: Staking(payable(address(ds.staking))),\\n            numberOfBlocksToFinalize: 128 // 4 epochs (in blocks) to finalize unstake requests.\\n        })\\n    );\\n\\n    // Renounce all roles, now that we have deployed everything\\n    // Keep roles only if the deployer was also set as admin or upgrader, repspectively.\\n    if (deployer != params.admin) {\\n        proxyAdmin.grantRole(proxyAdmin.TIMELOCK_ADMIN_ROLE(), params.admin);\\n        proxyAdmin.renounceRole(proxyAdmin.TIMELOCK_ADMIN_ROLE(), deployer);\\n    }\\n\\n    if (deployer != params.upgrader) {\\n        proxyAdmin.renounceRole(proxyAdmin.PROPOSER_ROLE(), deployer);\\n        proxyAdmin.renounceRole(proxyAdmin.EXECUTOR_ROLE(), deployer);\\n        proxyAdmin.renounceRole(proxyAdmin.CANCELLER_ROLE(), deployer);\\n    }\\n\\n    return ds;\\n}\\n\\nfunction newProxy(EmptyContract empty, TimelockController admin) returns (TransparentUpgradeableProxy) {\\n    return new TransparentUpgradeableProxy(address(empty), address(admin), \\\"\\\");\\n}\\n\\nfunction scheduleAndExecute(TimelockController controller, address target, uint256 value, bytes memory data) {\\n    controller.schedule({target: target, value: value, data: data, predecessor: bytes32(0), delay: 0, salt: bytes32(0)});\\n    controller.execute{value: value}({\\n        target: target,\\n        value: value,\\n        payload: data,\\n        predecessor: bytes32(0),\\n        salt: bytes32(0)\\n    });\\n}\\n\\nfunction upgradeToAndCall(\\n    TimelockController controller,\\n    ITransparentUpgradeableProxy proxy,\\n    address implementation,\\n    uint256 value,\\n    bytes memory data\\n) {\\n    scheduleAndExecute(\\n        controller,\\n        address(proxy),\\n        value,\\n        abi.encodeCall(ITransparentUpgradeableProxy.upgradeToAndCall, (implementation, data))\\n    );\\n}\\n\\nfunction upgradeToAndCall(\\n    TimelockController controller,\\n    ITransparentUpgradeableProxy proxy,\\n    address implementation,\\n    bytes memory data\\n) {\\n    upgradeToAndCall(controller, proxy, implementation, 0, data);\\n}\\n\\nfunction upgradeTo(TimelockController controller, ITransparentUpgradeableProxy proxy, address implementation) {\\n    scheduleAndExecute(\\n        controller, address(proxy), 0, abi.encodeCall(ITransparentUpgradeableProxy.upgradeTo, (implementation))\\n    );\\n}\\n\\nfunction initReturnsReceiver(\\n    TimelockController proxyAdmin,\\n    ITransparentUpgradeableProxy proxy,\\n    ReturnsReceiver.Init memory init\\n) returns (ReturnsReceiver) {\\n    ReturnsReceiver impl = new ReturnsReceiver();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(ReturnsReceiver.initialize, init));\\n    return ReturnsReceiver(payable(address(proxy)));\\n}\\n\\nfunction initReturnsAggregator(\\n    TimelockController proxyAdmin,\\n    ITransparentUpgradeableProxy proxy,\\n    ReturnsAggregator.Init memory init\\n) returns (ReturnsAggregator) {\\n    ReturnsAggregator impl = new ReturnsAggregator();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(ReturnsAggregator.initialize, init));\\n    return ReturnsAggregator(payable(address(proxy)));\\n}\\n\\nfunction initOracle(TimelockController proxyAdmin, ITransparentUpgradeableProxy proxy, Oracle.Init memory init)\\n    returns (Oracle)\\n{\\n    Oracle impl = new Oracle();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(Oracle.initialize, init));\\n    return Oracle(address(proxy));\\n}\\n\\nfunction initOracleQuorumManager(\\n    TimelockController proxyAdmin,\\n    ITransparentUpgradeableProxy proxy,\\n    OracleQuorumManager.Init memory init\\n) returns (OracleQuorumManager) {\\n    OracleQuorumManager impl = new OracleQuorumManager();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(OracleQuorumManager.initialize, init));\\n\\n    return OracleQuorumManager(payable(address(proxy)));\\n}\\n\\nfunction initPauser(TimelockController proxyAdmin, ITransparentUpgradeableProxy proxy, Pauser.Init memory init)\\n    returns (Pauser)\\n{\\n    Pauser impl = new Pauser();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(Pauser.initialize, init));\\n\\n    return Pauser(payable(address(proxy)));\\n}\\n\\nfunction initUnstakeRequestsManager(\\n    TimelockController proxyAdmin,\\n    ITransparentUpgradeableProxy proxy,\\n    UnstakeRequestsManager.Init memory init\\n) returns (UnstakeRequestsManager) {\\n    UnstakeRequestsManager impl = new UnstakeRequestsManager();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(UnstakeRequestsManager.initialize, init));\\n\\n    return UnstakeRequestsManager(payable(address(proxy)));\\n}\\n\\nfunction initStaking(TimelockController proxyAdmin, ITransparentUpgradeableProxy proxy, Staking.Init memory init)\\n    returns (Staking)\\n{\\n    Staking impl = new Staking();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(Staking.initialize, init));\\n    return Staking(payable(address(proxy)));\\n}\\n\\nfunction initMETH(TimelockController proxyAdmin, ITransparentUpgradeableProxy proxy, METH.Init memory init)\\n    returns (METH)\\n{\\n    METH impl = new METH();\\n    upgradeToAndCall(proxyAdmin, proxy, address(impl), abi.encodeCall(METH.initialize, init));\\n    return METH(address(proxy));\\n}\\n\\nfunction grantAndRenounce(AccessControlUpgradeable controllable, bytes32 role, address sender, address newAccount) {\\n    grantAndRenounce(AccessControl(address(controllable)), role, sender, newAccount);\\n}\\n\\nfunction grantAndRenounce(AccessControl controllable, bytes32 role, address sender, address newAccount) {\\n    // To prevent reassigning to self and renouncing later leaving the role empty\\n    if (sender != newAccount) {\\n        controllable.grantRole(role, newAccount);\\n        controllable.renounceRole(role, sender);\\n    }\\n}\\n\\n/// @notice Grants roles to addresses as specified in `params` and renounces the roles from `sender`.\\n/// @dev Assumes that all contracts were deployed using `sender` as admin/manager/etc.\\nfunction grantAndRenounceAllRoles(DeploymentParams memory params, Deployments memory ds, address sender) {\\n    grantAndRenounce(\\n        ds.consensusLayerReceiver, ds.consensusLayerReceiver.RECEIVER_MANAGER_ROLE(), sender, params.manager\\n    );\\n    grantAndRenounce(ds.consensusLayerReceiver, ds.consensusLayerReceiver.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(\\n        ds.executionLayerReceiver, ds.executionLayerReceiver.RECEIVER_MANAGER_ROLE(), sender, params.manager\\n    );\\n    grantAndRenounce(ds.executionLayerReceiver, ds.executionLayerReceiver.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(ds.pauser, ds.pauser.PAUSER_ROLE(), sender, params.pauser);\\n    grantAndRenounce(ds.pauser, ds.pauser.UNPAUSER_ROLE(), sender, params.unpauser);\\n    grantAndRenounce(ds.pauser, ds.pauser.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(ds.mETH, ds.mETH.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(ds.staking, ds.staking.STAKING_MANAGER_ROLE(), sender, params.manager);\\n    grantAndRenounce(ds.staking, ds.staking.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(ds.aggregator, ds.aggregator.AGGREGATOR_MANAGER_ROLE(), sender, params.manager);\\n    grantAndRenounce(ds.aggregator, ds.aggregator.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(ds.oracle, ds.oracle.ORACLE_MANAGER_ROLE(), sender, params.manager);\\n    grantAndRenounce(ds.oracle, ds.oracle.ORACLE_PENDING_UPDATE_RESOLVER_ROLE(), sender, params.pendingResolver);\\n    grantAndRenounce(ds.oracle, ds.oracle.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(ds.quorumManager, ds.quorumManager.QUORUM_MANAGER_ROLE(), sender, params.manager);\\n    grantAndRenounce(ds.quorumManager, ds.quorumManager.REPORTER_MODIFIER_ROLE(), sender, params.reporterModifier);\\n    grantAndRenounce(ds.quorumManager, ds.quorumManager.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    grantAndRenounce(ds.unstakeRequestsManager, ds.unstakeRequestsManager.MANAGER_ROLE(), sender, params.manager);\\n    grantAndRenounce(\\n        ds.unstakeRequestsManager, ds.unstakeRequestsManager.REQUEST_CANCELLER_ROLE(), sender, params.requestCanceller\\n    );\\n    grantAndRenounce(ds.unstakeRequestsManager, ds.unstakeRequestsManager.DEFAULT_ADMIN_ROLE(), sender, params.admin);\\n\\n    // Proxy admin\\n    grantAndRenounce(ds.proxyAdmin, ds.proxyAdmin.PROPOSER_ROLE(), sender, params.upgrader);\\n    grantAndRenounce(ds.proxyAdmin, ds.proxyAdmin.EXECUTOR_ROLE(), sender, params.upgrader);\\n    grantAndRenounce(ds.proxyAdmin, ds.proxyAdmin.CANCELLER_ROLE(), sender, params.upgrader);\\n    grantAndRenounce(ds.proxyAdmin, ds.proxyAdmin.TIMELOCK_ADMIN_ROLE(), sender, params.admin);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(address) external;\\n\\n    function upgradeTo(address) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                revert(\\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() private {\\n        require(msg.value == 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/governance/TimelockController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/AccessControl.sol\\\";\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\\\"TIMELOCK_ADMIN_ROLE\\\");\\n    bytes32 public constant PROPOSER_ROLE = keccak256(\\\"PROPOSER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n    bytes32 public constant CANCELLER_ROLE = keccak256(\\\"CANCELLER_ROLE\\\");\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\\n     */\\n    event CallSalt(bytes32 indexed id, bytes32 salt);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n    /**\\n     * @dev Initializes the contract with the following parameters:\\n     *\\n     * - `minDelay`: initial minimum delay for operations\\n     * - `proposers`: accounts to be granted proposer and canceller roles\\n     * - `executors`: accounts to be granted executor role\\n     * - `admin`: optional account to be granted admin role; disable with zero address\\n     *\\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\\n     * without being subject to delay, but this role should be subsequently renounced in favor of\\n     * administration through timelocked proposals. Previous versions of this contract would assign\\n     * this admin to the deployer automatically and should be renounced as well.\\n     */\\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {\\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\\n\\n        // self administration\\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\\n\\n        // optional admin\\n        if (admin != address(0)) {\\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\\n        }\\n\\n        // register proposers and cancellers\\n        for (uint256 i = 0; i < proposers.length; ++i) {\\n            _setupRole(PROPOSER_ROLE, proposers[i]);\\n            _setupRole(CANCELLER_ROLE, proposers[i]);\\n        }\\n\\n        // register executors\\n        for (uint256 i = 0; i < executors.length; ++i) {\\n            _setupRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n\\n        _minDelay = minDelay;\\n        emit MinDelayChange(0, minDelay);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by a certain role. In\\n     * addition to checking the sender's role, `address(0)` 's role is also\\n     * considered. Granting a role to `address(0)` is equivalent to enabling\\n     * this role for everyone.\\n     */\\n    modifier onlyRoleOrOpenRole(bytes32 role) {\\n        if (!hasRole(role, address(0))) {\\n            _checkRole(role, _msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not. Note that a \\\"pending\\\" operation may also be \\\"ready\\\".\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready for execution. Note that a \\\"ready\\\" operation is also \\\"pending\\\".\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n        if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyRole(PROPOSER_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n        if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to become valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(address target, uint256 value, bytes calldata data) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"// \u250f\u2501\u2501\u2501\u2513\u2501\u250f\u2513\u2501\u250f\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\\n// \u2503\u250f\u2501\u2501\u251b\u250f\u251b\u2517\u2513\u2503\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2517\u2513\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\\n// \u2503\u2517\u2501\u2501\u2513\u2517\u2513\u250f\u251b\u2503\u2517\u2501\u2513\u2517\u251b\u250f\u251b\u2503\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2513\u2517\u2513\u250f\u251b\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2517\u251b\u250f\u2501\u2501\u2513\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2513\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2517\u2513\u250f\u251b\\n// \u2503\u250f\u2501\u2501\u251b\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u250f\u2501\u251b\u250f\u251b\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u2501\u2501\u252b\u2523\u252b\u2501\u2503\ufffd\ufffd\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u250f\u2513\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u251b\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2501\u251b\u2501\u2503\u2503\u2501\\n// \u2503\u2517\u2501\u2501\u2513\u2501\u2503\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u250f\u2513\u2503\u2517\u2501\u251b\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u251b\u2503\u2503\u2503\u2501\u252b\u2503\u2517\u251b\u2503\u2503\u2517\u251b\u2503\u2523\u2501\u2501\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u251b\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u2503\u2517\u251b\u2517\u2513\u2503\u2517\u2501\u2513\u2501\u2503\u2517\u2513\\n// \u2517\u2501\u2501\u2501\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2503\u250f\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2517\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n//\\n// From: https://github.com/ethereum/consensus-specs/blob/dev/solidity_deposit_contract/deposit_contract.sol\\n\\n// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.20;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\\n// Based on official specification in https://eips.ethereum.org/EIPS/eip-165\\ninterface ERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/Pauser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {AccessControlEnumerable} from \\\"openzeppelin/access/AccessControlEnumerable.sol\\\";\\n\\nimport {IPauser, IPauserWrite, IPauserRead} from \\\"./interfaces/IPauser.sol\\\";\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\n\\ninterface PauserEvents {\\n    /// @notice Emitted when a flag has been updated.\\n    /// @param selector The selector of the flag that was updated.\\n    /// @param isPaused The new value of the flag.\\n    /// @param flagName The name of the flag that was updated.\\n    event FlagUpdated(bytes4 indexed selector, bool indexed isPaused, string flagName);\\n}\\n\\n/// @title Pauser\\n/// @notice Keeps the state of all actions that can be paused in case of exceptional circumstances. Pause state\\n/// is stored as boolean properties on the contract. This design was intentionally chosen to ensure there are explicit\\n/// compiler checks for the names and states of the different actions.\\ncontract Pauser is Initializable, AccessControlEnumerableUpgradeable, IPauser, PauserEvents {\\n    // Errors.\\n    error PauserRoleOrOracleRequired(address sender);\\n\\n    /// @notice Pauser role can pause flags in the contract.\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    /// @notice Unpauser role can unpause flags in the contract.\\n    bytes32 public constant UNPAUSER_ROLE = keccak256(\\\"UNPAUSER_ROLE\\\");\\n\\n    /// @inheritdoc IPauserRead\\n    bool public isStakingPaused;\\n\\n    /// @inheritdoc IPauserRead\\n    bool public isUnstakeRequestsAndClaimsPaused;\\n\\n    /// @inheritdoc IPauserRead\\n    bool public isInitiateValidatorsPaused;\\n\\n    /// @inheritdoc IPauserRead\\n    bool public isSubmitOracleRecordsPaused;\\n\\n    /// @inheritdoc IPauserRead\\n    bool public isAllocateETHPaused;\\n\\n    /// @notice Oracle contract which has permissions to pause the protocol.\\n    IOracle public oracle;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address pauser;\\n        address unpauser;\\n        IOracle oracle;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        _grantRole(PAUSER_ROLE, init.pauser);\\n        _grantRole(UNPAUSER_ROLE, init.unpauser);\\n\\n        oracle = init.oracle;\\n    }\\n\\n    /// @notice Pauses or unpauses staking.\\n    /// @dev If pausing, checks if the caller has the pauser role. If unpausing,\\n    /// checks if the caller has the unpauser role.\\n    function setIsStakingPaused(bool isPaused) external onlyPauserUnpauserRole(isPaused) {\\n        _setIsStakingPaused(isPaused);\\n    }\\n\\n    /// @notice Pauses or unpauses unstake requests.\\n    /// @dev If pausing, checks if the caller has the pauser role. If unpausing,\\n    /// checks if the caller has the unpauser role.\\n    function setIsUnstakeRequestsAndClaimsPaused(bool isPaused) external onlyPauserUnpauserRole(isPaused) {\\n        _setIsUnstakeRequestsAndClaimsPaused(isPaused);\\n    }\\n\\n    /// @notice Pauses or unpauses initiate validators.\\n    /// @dev If pausing, checks if the caller has the pauser role. If unpausing,\\n    /// checks if the caller has the unpauser role.\\n    function setIsInitiateValidatorsPaused(bool isPaused) external onlyPauserUnpauserRole(isPaused) {\\n        _setIsInitiateValidatorsPaused(isPaused);\\n    }\\n\\n    /// @notice Pauses or unpauses submit oracle records.\\n    /// @dev If pausing, checks if the caller has the pauser role. If unpausing,\\n    /// checks if the caller has the unpauser role.\\n    function setIsSubmitOracleRecordsPaused(bool isPaused) external onlyPauserUnpauserRole(isPaused) {\\n        _setIsSubmitOracleRecordsPaused(isPaused);\\n    }\\n\\n    /// @notice Pauses or unpauses allocate ETH.\\n    /// @dev If pausing, checks if the caller has the pauser role. If unpausing,\\n    /// checks if the caller has the unpauser role.\\n    function setIsAllocateETHPaused(bool isPaused) external onlyPauserUnpauserRole(isPaused) {\\n        _setIsAllocateETHPaused(isPaused);\\n    }\\n\\n    /// @inheritdoc IPauserWrite\\n    /// @dev Can be called by the oracle or any account with the pauser role.\\n    function pauseAll() external {\\n        _verifyPauserOrOracle();\\n\\n        _setIsStakingPaused(true);\\n        _setIsUnstakeRequestsAndClaimsPaused(true);\\n        _setIsInitiateValidatorsPaused(true);\\n        _setIsSubmitOracleRecordsPaused(true);\\n        _setIsAllocateETHPaused(true);\\n    }\\n\\n    /// @notice Unpauses all actions.\\n    function unpauseAll() external onlyRole(UNPAUSER_ROLE) {\\n        _setIsStakingPaused(false);\\n        _setIsUnstakeRequestsAndClaimsPaused(false);\\n        _setIsInitiateValidatorsPaused(false);\\n        _setIsSubmitOracleRecordsPaused(false);\\n        _setIsAllocateETHPaused(false);\\n    }\\n\\n    function _verifyPauserOrOracle() internal view {\\n        if (hasRole(PAUSER_ROLE, msg.sender) || msg.sender == address(oracle)) {\\n            return;\\n        }\\n        revert PauserRoleOrOracleRequired(msg.sender);\\n    }\\n\\n    // Internal setter functions.\\n    function _setIsStakingPaused(bool isPaused) internal {\\n        isStakingPaused = isPaused;\\n        emit FlagUpdated(this.isStakingPaused.selector, isPaused, \\\"isStakingPaused\\\");\\n    }\\n\\n    function _setIsUnstakeRequestsAndClaimsPaused(bool isPaused) internal {\\n        isUnstakeRequestsAndClaimsPaused = isPaused;\\n        emit FlagUpdated(this.isUnstakeRequestsAndClaimsPaused.selector, isPaused, \\\"isUnstakeRequestsAndClaimsPaused\\\");\\n    }\\n\\n    function _setIsInitiateValidatorsPaused(bool isPaused) internal {\\n        isInitiateValidatorsPaused = isPaused;\\n        emit FlagUpdated(this.isInitiateValidatorsPaused.selector, isPaused, \\\"isInitiateValidatorsPaused\\\");\\n    }\\n\\n    function _setIsSubmitOracleRecordsPaused(bool isPaused) internal {\\n        isSubmitOracleRecordsPaused = isPaused;\\n        emit FlagUpdated(this.isSubmitOracleRecordsPaused.selector, isPaused, \\\"isSubmitOracleRecordsPaused\\\");\\n    }\\n\\n    function _setIsAllocateETHPaused(bool isPaused) internal {\\n        isAllocateETHPaused = isPaused;\\n        emit FlagUpdated(this.isAllocateETHPaused.selector, isPaused, \\\"isAllocateETHPaused\\\");\\n    }\\n\\n    modifier onlyPauserUnpauserRole(bool isPaused) {\\n        if (isPaused) {\\n            _checkRole(PAUSER_ROLE);\\n        } else {\\n            _checkRole(UNPAUSER_ROLE);\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {Math} from \\\"openzeppelin/utils/math/Math.sol\\\";\\n\\nimport {ProtocolEvents} from \\\"./interfaces/ProtocolEvents.sol\\\";\\nimport {\\n    IOracle,\\n    IOracleReadRecord,\\n    IOracleReadPending,\\n    IOracleWrite,\\n    IOracleManager,\\n    OracleRecord\\n} from \\\"./interfaces/IOracle.sol\\\";\\nimport {IStakingInitiationRead} from \\\"./interfaces/IStaking.sol\\\";\\nimport {IReturnsAggregatorWrite} from \\\"./interfaces/IReturnsAggregator.sol\\\";\\nimport {IPauser} from \\\"./interfaces/IPauser.sol\\\";\\n\\n/// @notice Events emitted by the oracle contract.\\ninterface OracleEvents {\\n    /// @notice Emitted when a new oracle record was added to the list of oracle records. A pending record will only\\n    /// emit this event if it was accepted by the admin.\\n    /// @param index The index of the new record.\\n    /// @param record The new record that was added to the list.\\n    event OracleRecordAdded(uint256 indexed index, OracleRecord record);\\n\\n    /// @notice Emitted when a record has been modified.\\n    /// @param index The index of the record that was modified.\\n    /// @param record The newly modified record.\\n    event OracleRecordModified(uint256 indexed index, OracleRecord record);\\n\\n    /// @notice Emitted when a pending update has been rejected.\\n    /// @param pendingUpdate The rejected pending update.\\n    event OraclePendingUpdateRejected(OracleRecord pendingUpdate);\\n\\n    /// @notice Emitted when the oracle's record did not pass a sanity check.\\n    /// @param reasonHash The hash of the reason for the record rejection.\\n    /// @param reason The reason for the record rejection.\\n    /// @param record The record that was rejected.\\n    /// @param value The value that violated a bound.\\n    /// @param bound The bound of the rejected update.\\n    event OracleRecordFailedSanityCheck(\\n        bytes32 indexed reasonHash, string reason, OracleRecord record, uint256 value, uint256 bound\\n    );\\n}\\n\\n/// @title Oracle\\n/// @notice The oracle contract stores records which are snapshots of consensus layer state over discrete periods of\\n/// time. These records provide consensus layer data to the protocol's onchain contracts for their accounting logic.\\ncontract Oracle is Initializable, AccessControlEnumerableUpgradeable, IOracle, OracleEvents, ProtocolEvents {\\n    // Errors.\\n    error CannotUpdateWhileUpdatePending();\\n    error CannotModifyInitialRecord();\\n    error InvalidConfiguration();\\n    error InvalidRecordModification();\\n    error InvalidUpdateStartBlock(uint256 wantUpdateStartBlock, uint256 gotUpdateStartBlock);\\n    error InvalidUpdateEndBeforeStartBlock(uint256 end, uint256 start);\\n    error InvalidUpdateMoreDepositsProcessedThanSent(uint256 processed, uint256 sent);\\n    error InvalidUpdateMoreValidatorsThanInitiated(uint256 numValidatorsOnRecord, uint256 numInitiatedValidators);\\n    error NoUpdatePending();\\n    error Paused();\\n    error RecordDoesNotExist(uint256 idx);\\n    error UnauthorizedOracleUpdater(address sender, address oracleUpdater);\\n    error UpdateEndBlockNumberNotFinal(uint256 updateFinalizingBlock);\\n    error ZeroAddress();\\n\\n    /// @notice Role allowed to modify the settable properties on the contract.\\n    bytes32 public constant ORACLE_MANAGER_ROLE = keccak256(\\\"ORACLE_MANAGER_ROLE\\\");\\n\\n    /// @notice Role allowed to modify an existing oracle record.\\n    bytes32 public constant ORACLE_MODIFIER_ROLE = keccak256(\\\"ORACLE_MODIFIER_ROLE\\\");\\n\\n    /// @notice Role allowed to resolve or replace pending oracle updates which have failed the sanity check.\\n    bytes32 public constant ORACLE_PENDING_UPDATE_RESOLVER_ROLE = keccak256(\\\"ORACLE_PENDING_UPDATE_RESOLVER_ROLE\\\");\\n\\n    /// @notice Finalization block number delta upper bound for the setter.\\n    uint256 internal constant _FINALIZATION_BLOCK_NUMBER_DELTA_UPPER_BOUND = 2048;\\n\\n    /// @notice Stores the oracle records.\\n    /// @dev Must not be pushed directly to, use `_pushRecord` instead.\\n    OracleRecord[] internal _records;\\n\\n    /// @inheritdoc IOracleReadPending\\n    bool public hasPendingUpdate;\\n\\n    /// @notice The pending oracle update, if it was rejected by `_sanityCheckUpdate`.\\n    /// @dev Undefined if `hasPendingUpdate` is false.\\n    OracleRecord internal _pendingUpdate;\\n\\n    // @notice The number of blocks which must have passed before we accept an oracle update to ensure that the analysed\\n    // period is finalised.\\n    // NOTE: We cannot make guarantees about the consensus layer's state, but it is expected that\\n    // finalisation takes 2 epochs.\\n    uint256 public finalizationBlockNumberDelta;\\n\\n    /// @notice The address allowed to push oracle updates.\\n    address public oracleUpdater;\\n\\n    /// @notice The pauser contract.\\n    /// @dev Keeps the pause state across the protocol.\\n    IPauser public pauser;\\n\\n    /// @notice The staking contract.\\n    /// @dev Quantities tracked by the staking contract during validator initiation are used to sanity check oracle\\n    /// updates.\\n    IStakingInitiationRead public staking;\\n\\n    /// @notice The aggregator contract.\\n    /// @dev Called when pushing an oracle record to process.\\n    IReturnsAggregatorWrite public aggregator;\\n\\n    //\\n    // Sanity check parameters\\n    //\\n\\n    /// @notice The minimum deposit per new validator (on average).\\n    /// @dev This is used to put constraints on the reported processed deposits. Even thought this will foreseeably be\\n    /// 32 ETH, we keep it as a configurable parameter to allow for future changes.\\n    uint256 public minDepositPerValidator;\\n\\n    /// @notice The maximum deposit per new validator (on average).\\n    /// @dev This is used to put constraints on the reported processed deposits. Even thought this will foreseeably be\\n    /// 32 ETH, we keep it as a configurable parameter to allow for future changes.\\n    uint256 public maxDepositPerValidator;\\n\\n    /// @notice The minimum consensus layer gain per block (in part-per-trillion, i.e. in units of 1e-12).\\n    /// @dev This is used to put constraints on the reported change of the total consensus layer balance.\\n    uint40 public minConsensusLayerGainPerBlockPPT;\\n\\n    /// @notice The maximum consensus layer gain per block (in part-per-trillion, i.e. in units of 1e-12).\\n    /// @dev This is used to put constraints on the reported change of the total consensus layer balance.\\n    uint40 public maxConsensusLayerGainPerBlockPPT;\\n\\n    /// @notice The maximum consensus layer loss (in part-per-million, i.e. in units of 1e-6).\\n    /// This value doesn't scale with time and represents a total loss over a given period, remaining independent of the\\n    /// blocks. It encapsulates scenarios such as a single substantial slashing event or concurrent off-chain oracle\\n    /// service downtime with validators incurring attestation penalties.\\n    /// @dev This is used to put constraints on the reported change of the total consensus layer balance.\\n    uint24 public maxConsensusLayerLossPPM;\\n\\n    /// @notice The minimum report size to allow for any report.\\n    /// @dev This value helps defend against the extreme bounds of checks in the case of malicious oracles.\\n    uint16 public minReportSizeBlocks;\\n\\n    /// @notice The denominator of a parts-per-million (PPM) fraction.\\n    uint24 internal constant _PPM_DENOMINATOR = 1e6;\\n\\n    /// @notice The denominator of a parts-per-trillion (PPT) fraction.\\n    uint40 internal constant _PPT_DENOMINATOR = 1e12;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address manager;\\n        address oracleUpdater;\\n        address pendingResolver;\\n        IReturnsAggregatorWrite aggregator;\\n        IPauser pauser;\\n        IStakingInitiationRead staking;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        // We intentionally do not assign an address to the ORACLE_MODIFIER_ROLE. This is to prevent\\n        // unintentional oracle modifications outside of exceptional circumstances.\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        _grantRole(ORACLE_MANAGER_ROLE, init.manager);\\n        _grantRole(ORACLE_PENDING_UPDATE_RESOLVER_ROLE, init.pendingResolver);\\n\\n        aggregator = init.aggregator;\\n        oracleUpdater = init.oracleUpdater;\\n        pauser = init.pauser;\\n        staking = init.staking;\\n\\n        // Assumes 2 epochs (in blocks).\\n        finalizationBlockNumberDelta = 64;\\n\\n        minReportSizeBlocks = 100;\\n        minDepositPerValidator = 32 ether;\\n        maxDepositPerValidator = 32 ether;\\n\\n        // 7200 slots per day * 365 days per year = 2628000 slots per year\\n        // assuming 5% yield per year\\n        // 5% / 2628000 = 1.9025e-8\\n        // 1.9025e-8 per slot = 19025 PPT\\n        maxConsensusLayerGainPerBlockPPT = 190250; // 10x approximate rate\\n        minConsensusLayerGainPerBlockPPT = 1903; // 0.1x approximate rate\\n\\n        // We chose a lower bound of a 0.1% loss for the protocol based on several factors:\\n        //\\n        // - Sanity check should not fail for normal operations where we define normal operations as attestation\\n        // penalties due to offline validators. Supposing all our validators go offline, the protocol is expected\\n        // to have a 0.03% missed attestation penalty on mainnet for all validators' balance for a single day.\\n        // - For a major slashing event, (i.e. 1 ETH slashed for half of our validators), we should expect a drop of\\n        // 1.56% of the entire protocol. This *must* trigger the consensus layer loss lower bound.\\n        maxConsensusLayerLossPPM = 1000;\\n\\n        // Initializing the oracle with a zero record, so that all contract functions (e.g. `latestRecord`) work as\\n        // expected. We set updateEndBlock to be the block at which the staking contract was initialized, so that the\\n        // first time an Oracle computes a report, it doesn't bother looking at blocks earlier than when the protocol\\n        // was deployed. That would be a waste, as our system would not have been running then.\\n        _pushRecord(OracleRecord(0, uint64(staking.initializationBlockNumber()), 0, 0, 0, 0, 0, 0));\\n    }\\n\\n    /// @inheritdoc IOracleWrite\\n    /// @dev Reverts if the update is invalid. If the update is valid but does not pass the `_sanityCheckUpdate`, the\\n    /// update is marked as pending and must be approved or replaced by the `ORACLE_PENDING_UPDATE_RESOLVER_ROLE`. If\\n    /// the update fails the sanity check, it will also pause the protocol.\\n    /// @param newRecord The oracle record to update to.\\n    function receiveRecord(OracleRecord calldata newRecord) external {\\n        if (pauser.isSubmitOracleRecordsPaused()) {\\n            revert Paused();\\n        }\\n\\n        if (msg.sender != oracleUpdater) {\\n            revert UnauthorizedOracleUpdater(msg.sender, oracleUpdater);\\n        }\\n\\n        if (hasPendingUpdate) {\\n            revert CannotUpdateWhileUpdatePending();\\n        }\\n\\n        validateUpdate(_records.length - 1, newRecord);\\n\\n        uint256 updateFinalizingBlock = newRecord.updateEndBlock + finalizationBlockNumberDelta;\\n        if (block.number < updateFinalizingBlock) {\\n            revert UpdateEndBlockNumberNotFinal(updateFinalizingBlock);\\n        }\\n\\n        (string memory rejectionReason, uint256 value, uint256 bound) = sanityCheckUpdate(latestRecord(), newRecord);\\n        if (bytes(rejectionReason).length > 0) {\\n            _pendingUpdate = newRecord;\\n            hasPendingUpdate = true;\\n            emit OracleRecordFailedSanityCheck({\\n                reasonHash: keccak256(bytes(rejectionReason)),\\n                reason: rejectionReason,\\n                record: newRecord,\\n                value: value,\\n                bound: bound\\n            });\\n            // Failing the sanity check will pause the protocol providing the admins time to accept or reject the\\n            // pending update.\\n            pauser.pauseAll();\\n            return;\\n        }\\n\\n        _pushRecord(newRecord);\\n    }\\n\\n    /// @notice Modifies an existing record's balances due to errors or malicious behavior. Modifiying the latest\\n    /// oracle record will have an effect on the total controlled supply, thereby altering the exchange rate.\\n    /// Note that users who have already requested to unstake, and are in the queue, will not be affected by the new\\n    /// exchange rate.\\n    /// @dev This function should only be called in an emergency situation where the oracle has posted an invalid\\n    /// record, either due to a calculations issue (or in the unlikely event of a compromise). If the new record\\n    /// reports higher returns in the window, then we need to reprocess the difference. If the new record reports\\n    /// lower returns in the window, then we need to top up the difference in the consensusLayerReceiver wallet. Without\\n    /// adding the missing funds in the consensusLayerReceiver wallet this function will revert in the future.\\n    /// @param idx The index of the oracle record to modify.\\n    /// @param record The new oracle record that will modify the existing one.\\n    function modifyExistingRecord(uint256 idx, OracleRecord calldata record) external onlyRole(ORACLE_MODIFIER_ROLE) {\\n        if (idx == 0) {\\n            revert CannotModifyInitialRecord();\\n        }\\n\\n        if (idx >= _records.length) {\\n            revert RecordDoesNotExist(idx);\\n        }\\n\\n        OracleRecord storage existingRecord = _records[idx];\\n        // Cannot modify the bounds of the record to prevent gaps in the\\n        // records.\\n        if (\\n            existingRecord.updateStartBlock != record.updateStartBlock\\n                || existingRecord.updateEndBlock != record.updateEndBlock\\n        ) {\\n            revert InvalidRecordModification();\\n        }\\n\\n        validateUpdate(idx - 1, record);\\n\\n        // If the new record has a higher windowWithdrawnRewardAmount or windowWithdrawnPrincipalAmount, we need to\\n        // process the difference. If this is the case, then when we processed the event, we didn't take enough from\\n        // the consensus layer returns wallet.\\n        uint256 missingRewards = 0;\\n        uint256 missingPrincipals = 0;\\n\\n        if (record.windowWithdrawnRewardAmount > existingRecord.windowWithdrawnRewardAmount) {\\n            missingRewards = record.windowWithdrawnRewardAmount - existingRecord.windowWithdrawnRewardAmount;\\n        }\\n        if (record.windowWithdrawnPrincipalAmount > existingRecord.windowWithdrawnPrincipalAmount) {\\n            missingPrincipals = record.windowWithdrawnPrincipalAmount - existingRecord.windowWithdrawnPrincipalAmount;\\n        }\\n\\n        _records[idx] = record;\\n        emit OracleRecordModified(idx, record);\\n\\n        // Move external call to the end to avoid any reentrancy issues.\\n        if (missingRewards > 0 || missingPrincipals > 0) {\\n            aggregator.processReturns({\\n                rewardAmount: missingRewards,\\n                principalAmount: missingPrincipals,\\n                shouldIncludeELRewards: false\\n            });\\n        }\\n    }\\n\\n    /// @notice Check that the new oracle record is technically valid by comparing it to the previous\\n    /// record.\\n    /// @dev Reverts if the oracle record fails to pass validation. This is much stricter compared to the sanityCheck\\n    /// as the validation logic ensures that our oracle invariants are kept intact.\\n    /// @param prevRecordIndex The index of the previous record.\\n    /// @param newRecord The oracle record to validate.\\n    function validateUpdate(uint256 prevRecordIndex, OracleRecord calldata newRecord) public view {\\n        OracleRecord storage prevRecord = _records[prevRecordIndex];\\n        if (newRecord.updateEndBlock <= newRecord.updateStartBlock) {\\n            revert InvalidUpdateEndBeforeStartBlock(newRecord.updateEndBlock, newRecord.updateStartBlock);\\n        }\\n\\n        // Ensure that oracle records are aligned i.e. making sure that the new record window picks up where the\\n        // previous one left off.\\n        if (newRecord.updateStartBlock != prevRecord.updateEndBlock + 1) {\\n            revert InvalidUpdateStartBlock(prevRecord.updateEndBlock + 1, newRecord.updateStartBlock);\\n        }\\n\\n        // Ensure that the offchain oracle has only tracked deposits from the protocol. The processed deposits on the\\n        // consensus layer can be at most the amount of ether the protocol has deposited into the deposit contract.\\n        if (newRecord.cumulativeProcessedDepositAmount > staking.totalDepositedInValidators()) {\\n            revert InvalidUpdateMoreDepositsProcessedThanSent(\\n                newRecord.cumulativeProcessedDepositAmount, staking.totalDepositedInValidators()\\n            );\\n        }\\n\\n        if (\\n            uint256(newRecord.currentNumValidatorsNotWithdrawable)\\n                + uint256(newRecord.cumulativeNumValidatorsWithdrawable) > staking.numInitiatedValidators()\\n        ) {\\n            revert InvalidUpdateMoreValidatorsThanInitiated(\\n                newRecord.currentNumValidatorsNotWithdrawable + newRecord.cumulativeNumValidatorsWithdrawable,\\n                staking.numInitiatedValidators()\\n            );\\n        }\\n    }\\n\\n    /// @notice Sanity checks an incoming oracle update. If it fails, the update is rejected and marked as pending to be\\n    /// approved or replaced by the `ORACLE_PENDING_UPDATE_RESOLVER_ROLE`.\\n    /// @dev If the record fails the sanity check, the function does not revert as we want to store the offending oracle\\n    /// record in a pending state.\\n    /// @param newRecord The incoming record to check.\\n    /// @return A tuple containing the reason for the rejection, the value that failed the check and the bound that it\\n    /// violated. The reason is the empty string if the update is valid.\\n    function sanityCheckUpdate(OracleRecord memory prevRecord, OracleRecord calldata newRecord)\\n        public\\n        view\\n        returns (string memory, uint256, uint256)\\n    {\\n        uint64 reportSize = newRecord.updateEndBlock - newRecord.updateStartBlock + 1;\\n        {\\n            //\\n            // Report size\\n            //\\n            // We implement this as a sanity check rather than a validation because the report is technically valid\\n            // and there may be a feasible reason to accept small report at some point.\\n            if (reportSize < minReportSizeBlocks) {\\n                return (\\\"Report blocks below minimum bound\\\", reportSize, minReportSizeBlocks);\\n            }\\n        }\\n        {\\n            //\\n            // Number of validators\\n            //\\n            // Checks that the total number of validators and the number of validators that are in the withdrawable state\\n            // did not decrease in the new oracle period.\\n            if (newRecord.cumulativeNumValidatorsWithdrawable < prevRecord.cumulativeNumValidatorsWithdrawable) {\\n                return (\\n                    \\\"Cumulative number of withdrawable validators decreased\\\",\\n                    newRecord.cumulativeNumValidatorsWithdrawable,\\n                    prevRecord.cumulativeNumValidatorsWithdrawable\\n                );\\n            }\\n            {\\n                uint256 prevNumValidators =\\n                    prevRecord.currentNumValidatorsNotWithdrawable + prevRecord.cumulativeNumValidatorsWithdrawable;\\n                uint256 newNumValidators =\\n                    newRecord.currentNumValidatorsNotWithdrawable + newRecord.cumulativeNumValidatorsWithdrawable;\\n\\n                if (newNumValidators < prevNumValidators) {\\n                    return (\\\"Total number of validators decreased\\\", newNumValidators, prevNumValidators);\\n                }\\n            }\\n        }\\n\\n        {\\n            //\\n            // Deposits\\n            //\\n            // Checks that the total amount of deposits processed by the oracle did not decrease in the new oracle\\n            // period. It also checks that the amount of newly deposited ETH is possible given how many validators\\n            // we have included in the new period.\\n            if (newRecord.cumulativeProcessedDepositAmount < prevRecord.cumulativeProcessedDepositAmount) {\\n                return (\\n                    \\\"Processed deposit amount decreased\\\",\\n                    newRecord.cumulativeProcessedDepositAmount,\\n                    prevRecord.cumulativeProcessedDepositAmount\\n                );\\n            }\\n\\n            uint256 newDeposits =\\n                (newRecord.cumulativeProcessedDepositAmount - prevRecord.cumulativeProcessedDepositAmount);\\n            uint256 newValidators = (\\n                newRecord.currentNumValidatorsNotWithdrawable + newRecord.cumulativeNumValidatorsWithdrawable\\n                    - prevRecord.currentNumValidatorsNotWithdrawable - prevRecord.cumulativeNumValidatorsWithdrawable\\n            );\\n\\n            if (newDeposits < newValidators * minDepositPerValidator) {\\n                return (\\n                    \\\"New deposits below min deposit per validator\\\", newDeposits, newValidators * minDepositPerValidator\\n                );\\n            }\\n\\n            if (newDeposits > newValidators * maxDepositPerValidator) {\\n                return (\\n                    \\\"New deposits above max deposit per validator\\\", newDeposits, newValidators * maxDepositPerValidator\\n                );\\n            }\\n        }\\n\\n        {\\n            //\\n            // Consensus layer balance change from the previous period.\\n            //\\n            // Checks that the change in the consensus layer balance is within the bounds given by the maximum loss and\\n            // minimum gain parameters. For example, a major slashing event will cause an out of bounds loss in the\\n            // consensus layer.\\n\\n            // The baselineGrossCLBalance represents the expected growth of our validators balance in the new period\\n            // given no slashings, no rewards, etc. It's used as the baseline in our upper (growth) and lower (loss)\\n            // bounds calculations.\\n            uint256 baselineGrossCLBalance = prevRecord.currentTotalValidatorBalance\\n                + (newRecord.cumulativeProcessedDepositAmount - prevRecord.cumulativeProcessedDepositAmount);\\n\\n            // The newGrossCLBalance is the actual amount of ETH we have recorded in the consensus layer for the new\\n            // record period.\\n            uint256 newGrossCLBalance = newRecord.currentTotalValidatorBalance\\n                + newRecord.windowWithdrawnPrincipalAmount + newRecord.windowWithdrawnRewardAmount;\\n\\n            {\\n                // Relative lower bound on the net decrease of ETH on the consensus layer.\\n                // Depending on the parameters the loss term might completely dominate over the minGain one.\\n                //\\n                // Using a minConsensusLayerGainPerBlockPPT greater than 0, the lower bound becomes an upward slope.\\n                // Setting minConsensusLayerGainPerBlockPPT, the lower bound becomes a constant.\\n                uint256 lowerBound = baselineGrossCLBalance\\n                    - Math.mulDiv(maxConsensusLayerLossPPM, baselineGrossCLBalance, _PPM_DENOMINATOR)\\n                    + Math.mulDiv(minConsensusLayerGainPerBlockPPT * reportSize, baselineGrossCLBalance, _PPT_DENOMINATOR);\\n\\n                if (newGrossCLBalance < lowerBound) {\\n                    return (\\\"Consensus layer change below min gain or max loss\\\", newGrossCLBalance, lowerBound);\\n                }\\n            }\\n            {\\n                // Upper bound on the rewards generated by validators scaled linearly with time and number of active\\n                // validators.\\n                uint256 upperBound = baselineGrossCLBalance\\n                    + Math.mulDiv(maxConsensusLayerGainPerBlockPPT * reportSize, baselineGrossCLBalance, _PPT_DENOMINATOR);\\n\\n                if (newGrossCLBalance > upperBound) {\\n                    return (\\\"Consensus layer change above max gain\\\", newGrossCLBalance, upperBound);\\n                }\\n            }\\n        }\\n\\n        return (\\\"\\\", 0, 0);\\n    }\\n\\n    /// @dev Pushes a record to the list of records, emits an oracle added event, and processes the\\n    /// oracle record in the aggregator.\\n    /// @param record The record to push.\\n    function _pushRecord(OracleRecord memory record) internal {\\n        emit OracleRecordAdded(_records.length, record);\\n        _records.push(record);\\n\\n        aggregator.processReturns({\\n            rewardAmount: record.windowWithdrawnRewardAmount,\\n            principalAmount: record.windowWithdrawnPrincipalAmount,\\n            shouldIncludeELRewards: true\\n        });\\n    }\\n\\n    /// @notice Accepts the current pending update and adds it to the list of oracle records.\\n    /// @dev Accepting the current pending update resets the update pending state.\\n    function acceptPendingUpdate() external onlyRole(ORACLE_PENDING_UPDATE_RESOLVER_ROLE) {\\n        if (!hasPendingUpdate) {\\n            revert NoUpdatePending();\\n        }\\n\\n        _pushRecord(_pendingUpdate);\\n        _resetPending();\\n    }\\n\\n    /// @notice Rejects the current pending update.\\n    /// @dev Rejecting the current pending update resets the pending state.\\n    function rejectPendingUpdate() external onlyRole(ORACLE_PENDING_UPDATE_RESOLVER_ROLE) {\\n        if (!hasPendingUpdate) {\\n            revert NoUpdatePending();\\n        }\\n\\n        emit OraclePendingUpdateRejected(_pendingUpdate);\\n        _resetPending();\\n    }\\n\\n    /// @inheritdoc IOracleReadRecord\\n    function latestRecord() public view returns (OracleRecord memory) {\\n        return _records[_records.length - 1];\\n    }\\n\\n    /// @inheritdoc IOracleReadPending\\n    function pendingUpdate() external view returns (OracleRecord memory) {\\n        if (!hasPendingUpdate) {\\n            revert NoUpdatePending();\\n        }\\n        return _pendingUpdate;\\n    }\\n\\n    /// @inheritdoc IOracleReadRecord\\n    function recordAt(uint256 idx) external view returns (OracleRecord memory) {\\n        return _records[idx];\\n    }\\n\\n    /// @inheritdoc IOracleReadRecord\\n    function numRecords() external view returns (uint256) {\\n        return _records.length;\\n    }\\n\\n    /// @dev Resets the pending update by removing the update from storage and resetting the hasPendingUpdate flag.\\n    function _resetPending() internal {\\n        delete _pendingUpdate;\\n        hasPendingUpdate = false;\\n    }\\n\\n    /// @notice Sets the finalization block number delta in the contract.\\n    /// See also {finalizationBlockNumberDelta}.\\n    /// @param finalizationBlockNumberDelta_ The new finalization block number delta.\\n    function setFinalizationBlockNumberDelta(uint256 finalizationBlockNumberDelta_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n    {\\n        if (\\n            finalizationBlockNumberDelta_ == 0\\n                || finalizationBlockNumberDelta_ > _FINALIZATION_BLOCK_NUMBER_DELTA_UPPER_BOUND\\n        ) {\\n            revert InvalidConfiguration();\\n        }\\n\\n        finalizationBlockNumberDelta = finalizationBlockNumberDelta_;\\n        emit ProtocolConfigChanged(\\n            this.setFinalizationBlockNumberDelta.selector,\\n            \\\"setFinalizationBlockNumberDelta(uint256)\\\",\\n            abi.encode(finalizationBlockNumberDelta_)\\n        );\\n    }\\n\\n    /// @inheritdoc IOracleManager\\n    /// @dev See also {oracleUpdater}.\\n    function setOracleUpdater(address newUpdater) external onlyRole(ORACLE_MANAGER_ROLE) notZeroAddress(newUpdater) {\\n        oracleUpdater = newUpdater;\\n        emit ProtocolConfigChanged(this.setOracleUpdater.selector, \\\"setOracleUpdater(address)\\\", abi.encode(newUpdater));\\n    }\\n\\n    /// @notice Sets min deposit per validator in the contract.\\n    /// See also {minDepositPerValidator}.\\n    /// @param minDepositPerValidator_ The new min deposit per validator.\\n    function setMinDepositPerValidator(uint256 minDepositPerValidator_) external onlyRole(ORACLE_MANAGER_ROLE) {\\n        minDepositPerValidator = minDepositPerValidator_;\\n        emit ProtocolConfigChanged(\\n            this.setMinDepositPerValidator.selector,\\n            \\\"setMinDepositPerValidator(uint256)\\\",\\n            abi.encode(minDepositPerValidator_)\\n        );\\n    }\\n\\n    /// @notice Sets max deposit per validator in the contract.\\n    /// See also {maxDepositPerValidator}.\\n    /// @param maxDepositPerValidator_ The new max deposit per validator.\\n    function setMaxDepositPerValidator(uint256 maxDepositPerValidator_) external onlyRole(ORACLE_MANAGER_ROLE) {\\n        maxDepositPerValidator = maxDepositPerValidator_;\\n        emit ProtocolConfigChanged(\\n            this.setMaxDepositPerValidator.selector,\\n            \\\"setMaxDepositPerValidator(uint256)\\\",\\n            abi.encode(maxDepositPerValidator)\\n        );\\n    }\\n\\n    /// @notice Sets min consensus layer gain per block in the contract.\\n    /// See also {minConsensusLayerGainPerBlockPPT}.\\n    /// @param minConsensusLayerGainPerBlockPPT_ The new min consensus layer gain per block in parts per trillion.\\n    function setMinConsensusLayerGainPerBlockPPT(uint40 minConsensusLayerGainPerBlockPPT_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n        onlyFractionLeqOne(minConsensusLayerGainPerBlockPPT_, _PPT_DENOMINATOR)\\n    {\\n        minConsensusLayerGainPerBlockPPT = minConsensusLayerGainPerBlockPPT_;\\n        emit ProtocolConfigChanged(\\n            this.setMinConsensusLayerGainPerBlockPPT.selector,\\n            \\\"setMinConsensusLayerGainPerBlockPPT(uint40)\\\",\\n            abi.encode(minConsensusLayerGainPerBlockPPT_)\\n        );\\n    }\\n\\n    /// @notice Sets max consensus layer gain per block in the contract.\\n    /// See also {maxConsensusLayerGainPerBlockPPT}.\\n    /// @param maxConsensusLayerGainPerBlockPPT_ The new max consensus layer gain per block in parts per million.\\n    function setMaxConsensusLayerGainPerBlockPPT(uint40 maxConsensusLayerGainPerBlockPPT_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n        onlyFractionLeqOne(maxConsensusLayerGainPerBlockPPT_, _PPT_DENOMINATOR)\\n    {\\n        maxConsensusLayerGainPerBlockPPT = maxConsensusLayerGainPerBlockPPT_;\\n        emit ProtocolConfigChanged(\\n            this.setMaxConsensusLayerGainPerBlockPPT.selector,\\n            \\\"setMaxConsensusLayerGainPerBlockPPT(uint40)\\\",\\n            abi.encode(maxConsensusLayerGainPerBlockPPT_)\\n        );\\n    }\\n\\n    /// @notice Sets max consensus layer loss per block in the contract.\\n    /// See also {maxConsensusLayerLossPPM}.\\n    /// @param maxConsensusLayerLossPPM_ The new max consensus layer loss per block in parts per million.\\n    function setMaxConsensusLayerLossPPM(uint24 maxConsensusLayerLossPPM_)\\n        external\\n        onlyRole(ORACLE_MANAGER_ROLE)\\n        onlyFractionLeqOne(maxConsensusLayerLossPPM_, _PPM_DENOMINATOR)\\n    {\\n        maxConsensusLayerLossPPM = maxConsensusLayerLossPPM_;\\n        emit ProtocolConfigChanged(\\n            this.setMaxConsensusLayerLossPPM.selector,\\n            \\\"setMaxConsensusLayerLossPPM(uint24)\\\",\\n            abi.encode(maxConsensusLayerLossPPM_)\\n        );\\n    }\\n\\n    /// @notice Sets the minimum report size.\\n    /// See also {minReportSizeBlocks}.\\n    /// @param minReportSizeBlocks_ The new minimum report size, in blocks.\\n    function setMinReportSizeBlocks(uint16 minReportSizeBlocks_) external onlyRole(ORACLE_MANAGER_ROLE) {\\n        // Sanity check on upper bound is covered by uint16 which is ~9 days.\\n        minReportSizeBlocks = minReportSizeBlocks_;\\n        emit ProtocolConfigChanged(\\n            this.setMinReportSizeBlocks.selector, \\\"setMinReportSizeBlocks(uint16)\\\", abi.encode(minReportSizeBlocks_)\\n        );\\n    }\\n\\n    /// @notice Ensures that the given fraction is less than or equal to one.\\n    /// @param numerator The numerator of the fraction.\\n    /// @param denominator The denominator of the fraction.\\n    modifier onlyFractionLeqOne(uint256 numerator, uint256 denominator) {\\n        if (numerator > denominator) {\\n            revert InvalidConfiguration();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the given address is not the zero address.\\n    /// @param addr The address to check.\\n    modifier notZeroAddress(address addr) {\\n        if (addr == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/OracleQuorumManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ProtocolEvents} from \\\"./interfaces/ProtocolEvents.sol\\\";\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport {OracleRecord, IOracle} from \\\"./interfaces/IOracle.sol\\\";\\n\\ninterface OracleQuorumManagerEvents {\\n    /// @notice Emitted when a record has passed quorum and was submitted to the oracle.\\n    /// @param block The block the record was finalized on.\\n    event ReportQuorumReached(uint64 indexed block);\\n\\n    /// @notice Emitted when a record has been reported by a reporter.\\n    /// @param block The block the record was recorded on.\\n    /// @param reporter The reporter that reported the record.\\n    /// @param recordHash The hash of the record that was reported.\\n    /// @param record The record that was received.\\n    event ReportReceived(\\n        uint64 indexed block, address indexed reporter, bytes32 indexed recordHash, OracleRecord record\\n    );\\n\\n    /// @notice Emitted when the oracle failed to receive a record from the oracle quorum manager.\\n    /// @param reason The reason for the failure, i.e. the caught error.\\n    event OracleRecordReceivedError(bytes reason);\\n}\\n\\n/// @title OracleQuorumManager\\n/// @notice Responsible for managing the quorum of oracle reporters.\\ncontract OracleQuorumManager is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    OracleQuorumManagerEvents,\\n    ProtocolEvents\\n{\\n    error InvalidReporter();\\n    error AlreadyReporter();\\n    error RelativeThresholdExceedsOne();\\n\\n    /// @notice Oracle manager role can update properties in the OracleQuorumManager.\\n    bytes32 public constant QUORUM_MANAGER_ROLE = keccak256(\\\"QUORUM_MANAGER_ROLE\\\");\\n\\n    /// @notice Any reporter modifier can change the set of oracle services which can produce a valid\\n    /// oracle report. This means that this is quite a crucial role and should have elevated access\\n    /// requirements.\\n    bytes32 public constant REPORTER_MODIFIER_ROLE = keccak256(\\\"REPORTER_MODIFIER_ROLE\\\");\\n\\n    /// @notice The service oracle reporter role is used to identify which oracle services can\\n    /// produce a valid oracle report. Note that granting this role to an address may have consequences\\n    /// for the logic of the contract - e.g. the contract may calculate quorum based on the number of\\n    /// members in this set. So you should not add the role to anything other than an oracle service.\\n    /// @dev To discover all oracle services, you can use `getRoleMemberCount`and\\n    /// getRoleMember(role, N)` (on the same block).\\n    bytes32 public constant SERVICE_ORACLE_REPORTER = keccak256(\\\"SERVICE_ORACLE_REPORTER\\\");\\n\\n    /// @dev A basis point (often denoted as bp, 1bp = 0.01%) is a unit of measure used in finance to describe\\n    /// the percentage change in a financial instrument. This is a constant value set as 10000 which represents\\n    /// 100% in basis point terms.\\n    uint16 internal constant _BASIS_POINTS_DENOMINATOR = 10000;\\n\\n    /// @notice Oracle to finalize reports for.\\n    IOracle public oracle;\\n\\n    /// @notice Report hashes by block by reporter.\\n    /// This can be used for a reporter to verify a record computation and update it in case of an error.\\n    mapping(uint64 block => mapping(address reporter => bytes32 recordHash)) public reporterRecordHashesByBlock;\\n\\n    /// @notice The number of times a record hash has been reported for a block.\\n    mapping(uint64 block => mapping(bytes32 recordHash => uint256)) public recordHashCountByBlock;\\n\\n    /// @notice The target number of blocks in a report window.\\n    uint64 public targetReportWindowBlocks;\\n\\n    /// @notice The absolute number of reporters that have to submit the same report for it to be accepted.\\n    uint16 public absoluteThreshold;\\n\\n    /// @notice The relative number of reporters (in basis points) that have to submit the same report for it to be\\n    /// accepted. It is a value between 0 and 10000 basis points (i.e., 0 to 100%). It's used to determine what\\n    /// proportion of the total number of reporters need to agree on a report for it to be accepted.\\n    /// @dev Scaled with `getRoleMemberCount(SERVICE_ORACLE_REPORTER)`.\\n    uint16 public relativeThresholdBasisPoints;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address reporterModifier;\\n        address manager;\\n        address[] allowedReporters;\\n        IOracle oracle;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        _grantRole(REPORTER_MODIFIER_ROLE, init.reporterModifier);\\n        _setRoleAdmin(SERVICE_ORACLE_REPORTER, REPORTER_MODIFIER_ROLE);\\n\\n        _grantRole(QUORUM_MANAGER_ROLE, init.manager);\\n\\n        oracle = init.oracle;\\n        uint256 len = init.allowedReporters.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            _grantRole(SERVICE_ORACLE_REPORTER, init.allowedReporters[i]);\\n        }\\n\\n        // Assumes that a block is created every 12 seconds.\\n        // Might be slightly longer than the 8 hours target in practice as slots can be empty.\\n        targetReportWindowBlocks = 8 hours / 12 seconds;\\n\\n        absoluteThreshold = 1;\\n        relativeThresholdBasisPoints = 0;\\n    }\\n\\n    /// @notice Determines if a given record hash has reached quorum for a given block.\\n    /// @dev True if the number of reporters agreeing on the record hash is greater than or equal to the absolute and\\n    /// relative threshold.\\n    /// @param blockNumber The block number.\\n    /// @param recordHash The record hash.\\n    function _hasReachedQuroum(uint64 blockNumber, bytes32 recordHash) internal view returns (bool) {\\n        uint256 numReports = recordHashCountByBlock[blockNumber][recordHash];\\n        uint256 numReporters = getRoleMemberCount(SERVICE_ORACLE_REPORTER);\\n\\n        return (numReports >= absoluteThreshold)\\n            && (numReports * _BASIS_POINTS_DENOMINATOR >= numReporters * relativeThresholdBasisPoints);\\n    }\\n\\n    /// @notice Determines if a record with given end block number has already been received by the oracle.\\n    /// @dev This includes added and pending records.\\n    /// @param updateEndBlock The end block number.\\n    function _wasReceivedByOracle(uint256 updateEndBlock) internal view returns (bool) {\\n        return oracle.latestRecord().updateEndBlock >= updateEndBlock\\n            || (oracle.hasPendingUpdate() && oracle.pendingUpdate().updateEndBlock >= updateEndBlock);\\n    }\\n\\n    /// @notice Returns the record hash for a given block and reporter.\\n    /// @param blockNumber The block number.\\n    /// @param sender The reporter.\\n    function recordHashByBlockAndSender(uint64 blockNumber, address sender) external view returns (bytes32) {\\n        return reporterRecordHashesByBlock[blockNumber][sender];\\n    }\\n\\n    /// @notice Tracks received records to determine consensus.\\n    /// @param reporter The address of the off-chain service that submitted the record.\\n    /// @param record The received record.\\n    function _trackReceivedRecord(address reporter, OracleRecord calldata record) internal returns (bytes32) {\\n        bytes32 newHash = keccak256(abi.encode(record));\\n        emit ReportReceived(record.updateEndBlock, reporter, newHash, record);\\n\\n        bytes32 previousHash = reporterRecordHashesByBlock[record.updateEndBlock][reporter];\\n        if (newHash == previousHash) {\\n            return newHash;\\n        }\\n\\n        if (previousHash != 0) {\\n            recordHashCountByBlock[record.updateEndBlock][previousHash] -= 1;\\n        }\\n\\n        // Record the hash of the data for this report.\\n        recordHashCountByBlock[record.updateEndBlock][newHash] += 1;\\n        reporterRecordHashesByBlock[record.updateEndBlock][reporter] = newHash;\\n\\n        return newHash;\\n    }\\n\\n    /// @notice Receives an oracle report.\\n    /// @dev This function should be called by the oracle service.\\n    /// We explicitly allow oracles to 'update' their report for a given block. This allows repairs\\n    /// in the case of inconsistency without requiring a new window to be started.\\n    /// This function deliberately never reverts to log all reports received as events for off-chain performance metrics\\n    /// and to simplify the interaction with the oracle services.\\n    /// @param record The new oracle record update.\\n    function receiveRecord(OracleRecord calldata record) external onlyRole(SERVICE_ORACLE_REPORTER) {\\n        bytes32 recordHash = _trackReceivedRecord(msg.sender, record);\\n\\n        if (!_hasReachedQuroum(record.updateEndBlock, recordHash)) {\\n            return;\\n        }\\n\\n        if (_wasReceivedByOracle(record.updateEndBlock)) {\\n            // This branch will be taken if the reporter submits their report after quorum has already been reached,\\n            // e.g. the 3rd reporter in a 2/3 threshold setting.\\n            return;\\n        }\\n\\n        emit ReportQuorumReached(record.updateEndBlock);\\n\\n        // Deliberately not reverting to simplify the integration in off-chain oracle services, but wrapping any oracle\\n        // errors as events for observability.\\n        try oracle.receiveRecord(record) {}\\n        catch (bytes memory reason) {\\n            emit OracleRecordReceivedError(reason);\\n        }\\n    }\\n\\n    /// @notice Sets the target report window size in the number of blocks.\\n    /// @param newTargetReportWindowBlocks The new target report window size in blocks.\\n    /// NOTE: Setting this lower than the minimum report size as defined by the oracle is technically valid,\\n    /// but will result in a failing sanity check.\\n    function setTargetReportWindowBlocks(uint64 newTargetReportWindowBlocks) external onlyRole(QUORUM_MANAGER_ROLE) {\\n        targetReportWindowBlocks = newTargetReportWindowBlocks;\\n        emit ProtocolConfigChanged(\\n            this.setTargetReportWindowBlocks.selector,\\n            \\\"setTargetReportWindowBlocks(uint64)\\\",\\n            abi.encode(newTargetReportWindowBlocks)\\n        );\\n    }\\n\\n    /// @notice Sets the absolute and relative thresholds (i.e. the number of reporters that have to agree) for a report\\n    /// to be accepted.\\n    /// @param absoluteThreshold_ The new absolute threshold which sets the absoluteThreshold.\\n    /// See also {absoluteThreshold}\\n    /// @param relativeThresholdBasisPoints_ The new relative threshold in basis points which sets the\\n    /// relativeThresholdBasisPoints.\\n    /// See also {relativeThresholdBasisPoints}\\n    function setQuorumThresholds(uint16 absoluteThreshold_, uint16 relativeThresholdBasisPoints_)\\n        external\\n        onlyRole(QUORUM_MANAGER_ROLE)\\n    {\\n        if (relativeThresholdBasisPoints_ > _BASIS_POINTS_DENOMINATOR) {\\n            revert RelativeThresholdExceedsOne();\\n        }\\n\\n        emit ProtocolConfigChanged(\\n            this.setQuorumThresholds.selector,\\n            \\\"setQuorumThresholds(uint16,uint16)\\\",\\n            abi.encode(absoluteThreshold_, relativeThresholdBasisPoints_)\\n        );\\n        absoluteThreshold = absoluteThreshold_;\\n        relativeThresholdBasisPoints = relativeThresholdBasisPoints_;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ReturnsReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {Address} from \\\"openzeppelin/utils/Address.sol\\\";\\nimport {IERC20} from \\\"openzeppelin/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title ReturnsReceiver\\n/// @notice Receives protocol level returns and manages who can withdraw the returns. Deployed as the\\n/// consensus layer withdrawal wallet and execution layer rewards wallet in the protocol.\\ncontract ReturnsReceiver is Initializable, AccessControlEnumerableUpgradeable {\\n    /// @notice The manager role is responsible for managing the WITHDRAWER_ROLE.\\n    bytes32 public constant RECEIVER_MANAGER_ROLE = keccak256(\\\"RECEIVER_MANAGER_ROLE\\\");\\n\\n    /// @notice The withdrawer role can withdraw ETH and ERC20 tokens from this contract.\\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\\\"WITHDRAWER_ROLE\\\");\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address manager;\\n        address withdrawer;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        _grantRole(RECEIVER_MANAGER_ROLE, init.manager);\\n        _setRoleAdmin(WITHDRAWER_ROLE, RECEIVER_MANAGER_ROLE);\\n        _grantRole(WITHDRAWER_ROLE, init.withdrawer);\\n    }\\n\\n    /// @notice Transfers the given amount of ETH to an address.\\n    /// @dev Only called by the withdrawer.\\n    function transfer(address payable to, uint256 amount) external onlyRole(WITHDRAWER_ROLE) {\\n        Address.sendValue(to, amount);\\n    }\\n\\n    /// @notice Transfers the given amount of an ERC20 token to an address.\\n    /// @dev Only called by the withdrawer.\\n    function transferERC20(IERC20 token, address to, uint256 amount) external onlyRole(WITHDRAWER_ROLE) {\\n        SafeERC20.safeTransfer(token, to, amount);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"src/ReturnsAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {Math} from \\\"openzeppelin/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"openzeppelin/utils/Address.sol\\\";\\n\\nimport {ProtocolEvents} from \\\"./interfaces/ProtocolEvents.sol\\\";\\nimport {IPauserRead} from \\\"./interfaces/IPauser.sol\\\";\\nimport {IOracleReadRecord, OracleRecord} from \\\"./interfaces/IOracle.sol\\\";\\nimport {IStakingReturnsWrite} from \\\"./interfaces/IStaking.sol\\\";\\nimport {IReturnsAggregatorWrite} from \\\"./interfaces/IReturnsAggregator.sol\\\";\\n\\nimport {ReturnsReceiver} from \\\"./ReturnsReceiver.sol\\\";\\n\\ninterface ReturnsAggregatorEvents {\\n    /// @notice Emitted when the protocol collects fees when processing rewards.\\n    /// @param amount The amount of fees collected.\\n    event FeesCollected(uint256 amount);\\n}\\n\\n/// @title ReturnsAggregator\\n/// @notice Aggregator contract that aggregates returns from wallets the protocol controls, takes fees where applicable,\\n/// and forwards the net returns to the staking contract.\\ncontract ReturnsAggregator is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    ProtocolEvents,\\n    ReturnsAggregatorEvents,\\n    IReturnsAggregatorWrite\\n{\\n    error InvalidConfiguration();\\n    error NotOracle();\\n    error Paused();\\n    error ZeroAddress();\\n\\n    /// @notice The manager role can set the fees receiver wallet and fees basis points.\\n    bytes32 public constant AGGREGATOR_MANAGER_ROLE = keccak256(\\\"AGGREGATOR_MANAGER_ROLE\\\");\\n\\n    /// @dev A basis point (often denoted as bp, 1bp = 0.01%) is a unit of measure used in finance to describe\\n    /// the percentage change in a financial instrument. This is a constant value set as 10000 which represents\\n    /// 100% in basis point terms.\\n    uint16 internal constant _BASIS_POINTS_DENOMINATOR = 10_000;\\n\\n    /// @notice The staking contract to which the aggregated returns are forwarded after subtracting protocol fees.\\n    IStakingReturnsWrite public staking;\\n\\n    /// @notice The oracle contract from which the returns information is read.\\n    IOracleReadRecord public oracle;\\n\\n    /// @notice The contract receiving consensus layer returns, i.e. partial and full withdraws including rewards and\\n    /// principals.\\n    ReturnsReceiver public consensusLayerReceiver;\\n\\n    /// @notice The contract receiving execution layer rewards, i.e. tips and MEV rewards.\\n    ReturnsReceiver public executionLayerReceiver;\\n\\n    /// @notice The pauser contract.\\n    /// @dev Keeps the pause state across the protocol.\\n    IPauserRead public pauser;\\n\\n    /// @notice The address receiving protocol fees.\\n    address payable public feesReceiver;\\n\\n    /// @notice The protocol fees in basis points (1/10000).\\n    uint16 public feesBasisPoints;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address manager;\\n        IOracleReadRecord oracle;\\n        IPauserRead pauser;\\n        ReturnsReceiver consensusLayerReceiver;\\n        ReturnsReceiver executionLayerReceiver;\\n        IStakingReturnsWrite staking;\\n        address payable feesReceiver;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        _grantRole(AGGREGATOR_MANAGER_ROLE, init.manager);\\n\\n        oracle = init.oracle;\\n        pauser = init.pauser;\\n        consensusLayerReceiver = init.consensusLayerReceiver;\\n        executionLayerReceiver = init.executionLayerReceiver;\\n        staking = init.staking;\\n        feesReceiver = init.feesReceiver;\\n        // Default fees are 10%\\n        feesBasisPoints = 1_000;\\n    }\\n\\n    /// @inheritdoc IReturnsAggregatorWrite\\n    /// @dev Calculates the amount of funds to be forwarded to the staking contract, takes the fees, and forwards them.\\n    /// Note that we also validate that the funds are forwarded to the staking contract and none are sent to this\\n    /// contract.\\n    function processReturns(uint256 rewardAmount, uint256 principalAmount, bool shouldIncludeELRewards)\\n        external\\n        assertBalanceUnchanged\\n    {\\n        if (msg.sender != address(oracle)) {\\n            revert NotOracle();\\n        }\\n\\n        // Calculate the total amount of returns that will be aggregated.\\n        uint256 clTotal = rewardAmount + principalAmount;\\n        uint256 totalRewards = rewardAmount;\\n\\n        uint256 elRewards = 0;\\n        if (shouldIncludeELRewards) {\\n            elRewards = address(executionLayerReceiver).balance;\\n            totalRewards += elRewards;\\n        }\\n\\n        // Calculate protocol fees.\\n        uint256 fees = Math.mulDiv(feesBasisPoints, totalRewards, _BASIS_POINTS_DENOMINATOR);\\n\\n        // Aggregate returns in this contract\\n        address payable self = payable(address(this));\\n        if (elRewards > 0) {\\n            executionLayerReceiver.transfer(self, elRewards);\\n        }\\n        if (clTotal > 0) {\\n            consensusLayerReceiver.transfer(self, clTotal);\\n        }\\n\\n        // Forward the net returns (if they exist) to the staking contract.\\n        uint256 netReturns = clTotal + elRewards - fees;\\n        if (netReturns > 0) {\\n            staking.receiveReturns{value: netReturns}();\\n        }\\n\\n        // Send protocol fees (if they exist) to the fee receiver wallet.\\n        if (fees > 0) {\\n            emit FeesCollected(fees);\\n            Address.sendValue(feesReceiver, fees);\\n        }\\n    }\\n\\n    /// @notice Sets the fees receiver wallet for the protocol.\\n    /// @param newReceiver The new fees receiver wallet.\\n    function setFeesReceiver(address payable newReceiver)\\n        external\\n        onlyRole(AGGREGATOR_MANAGER_ROLE)\\n        notZeroAddress(newReceiver)\\n    {\\n        feesReceiver = newReceiver;\\n        emit ProtocolConfigChanged(this.setFeesReceiver.selector, \\\"setFeesReceiver(address)\\\", abi.encode(newReceiver));\\n    }\\n\\n    /// @notice Sets the fees basis points.\\n    /// @param newBasisPoints The new fees basis points.\\n    function setFeeBasisPoints(uint16 newBasisPoints) external onlyRole(AGGREGATOR_MANAGER_ROLE) {\\n        if (newBasisPoints > _BASIS_POINTS_DENOMINATOR) {\\n            revert InvalidConfiguration();\\n        }\\n\\n        feesBasisPoints = newBasisPoints;\\n        emit ProtocolConfigChanged(\\n            this.setFeeBasisPoints.selector, \\\"setFeeBasisPoints(uint16)\\\", abi.encode(newBasisPoints)\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    /// @notice Ensures that the given address is not the zero address.\\n    /// @param addr The address to check.\\n    modifier notZeroAddress(address addr) {\\n        if (addr == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the balance of the contract remains unchanged after the function returns.\\n    modifier assertBalanceUnchanged() {\\n        uint256 before = address(this).balance;\\n        _;\\n        assert(address(this).balance == before);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/UnstakeRequestsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {Address} from \\\"openzeppelin/utils/Address.sol\\\";\\nimport {Math} from \\\"openzeppelin/utils/math/Math.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {ProtocolEvents} from \\\"./interfaces/ProtocolEvents.sol\\\";\\nimport {IMETH} from \\\"./interfaces/IMETH.sol\\\";\\nimport {IOracleReadRecord} from \\\"./interfaces/IOracle.sol\\\";\\nimport {\\n    IUnstakeRequestsManager,\\n    IUnstakeRequestsManagerWrite,\\n    IUnstakeRequestsManagerRead,\\n    UnstakeRequest\\n} from \\\"./interfaces/IUnstakeRequestsManager.sol\\\";\\nimport {IStakingReturnsWrite} from \\\"./interfaces/IStaking.sol\\\";\\n\\n/// @notice Events emitted by the unstake requests manager.\\ninterface UnstakeRequestsManagerEvents {\\n    /// @notice Created emitted when an unstake request has been created.\\n    /// @param id The id of the unstake request.\\n    /// @param requester The address of the user who requested to unstake.\\n    /// @param mETHLocked The amount of mETH that will be burned when the request is claimed.\\n    /// @param ethRequested The amount of ETH that will be returned to the requester.\\n    /// @param cumulativeETHRequested The cumulative amount of ETH requested at the time of the unstake request.\\n    /// @param blockNumber The block number at the point at which the request was created.\\n    event UnstakeRequestCreated(\\n        uint256 indexed id,\\n        address indexed requester,\\n        uint256 mETHLocked,\\n        uint256 ethRequested,\\n        uint256 cumulativeETHRequested,\\n        uint256 blockNumber\\n    );\\n\\n    /// @notice Claimed emitted when an unstake request has been claimed.\\n    /// @param id The id of the unstake request.\\n    /// @param requester The address of the user who requested to unstake.\\n    /// @param mETHLocked The amount of mETH that will be burned when the request is claimed.\\n    /// @param ethRequested The amount of ETH that will be returned to the requester.\\n    /// @param cumulativeETHRequested The cumulative amount of ETH requested at the time of the unstake request.\\n    /// @param blockNumber The block number at the point at which the request was created.\\n    event UnstakeRequestClaimed(\\n        uint256 indexed id,\\n        address indexed requester,\\n        uint256 mETHLocked,\\n        uint256 ethRequested,\\n        uint256 cumulativeETHRequested,\\n        uint256 blockNumber\\n    );\\n\\n    /// @notice Cancelled emitted when an unstake request has been cancelled by an admin.\\n    /// @param id The id of the unstake request.\\n    /// @param requester The address of the user who requested to unstake.\\n    /// @param mETHLocked The amount of mETH that will be burned when the request is claimed.\\n    /// @param ethRequested The amount of ETH that will be returned to the requester.\\n    /// @param cumulativeETHRequested The cumulative amount of ETH requested at the time of the unstake request.\\n    /// @param blockNumber The block number at the point at which the request was created.\\n    event UnstakeRequestCancelled(\\n        uint256 indexed id,\\n        address indexed requester,\\n        uint256 mETHLocked,\\n        uint256 ethRequested,\\n        uint256 cumulativeETHRequested,\\n        uint256 blockNumber\\n    );\\n}\\n\\n/// @title UnstakeRequestsManager\\n/// @notice Manages unstake requests from the staking contract.\\ncontract UnstakeRequestsManager is\\n    Initializable,\\n    AccessControlEnumerableUpgradeable,\\n    IUnstakeRequestsManager,\\n    UnstakeRequestsManagerEvents,\\n    ProtocolEvents\\n{\\n    // Errors.\\n    error AlreadyClaimed();\\n    error DoesNotReceiveETH();\\n    error NotEnoughFunds(uint256 cumulativeETHOnRequest, uint256 allocatedETHForClaims);\\n    error NotFinalized();\\n    error NotRequester();\\n    error NotStakingContract();\\n\\n    /// @notice Role allowed to set properties of the contract.\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @notice Role that is allowed to cancel unfinalized requests if the protocol is in emergency state.\\n    bytes32 public constant REQUEST_CANCELLER_ROLE = keccak256(\\\"REQUEST_CANCELLER_ROLE\\\");\\n\\n    /// @notice The staking contract to which the unstake requests manager accepts claims and new unstake requests from.\\n    IStakingReturnsWrite public stakingContract;\\n\\n    /// @notice The oracle contract that the finalization criteria relies on.\\n    IOracleReadRecord public oracle;\\n\\n    /// @notice The total amount of ether sent by the staking contract.\\n    /// @dev This value can be decreased when reclaiming surplus allocatedETHs.\\n    uint256 public allocatedETHForClaims;\\n\\n    /// @notice The total amount of ether claimed by requesters.\\n    uint256 public totalClaimed;\\n\\n    /// @notice A request's block number on creation plus numberOfBlocksToFinalize determines\\n    /// if the request is finalized.\\n    uint256 public numberOfBlocksToFinalize;\\n\\n    /// @notice The mETH token contract.\\n    /// @dev Tokens will be minted / burned during staking / unstaking.\\n    IMETH public mETH;\\n\\n    /// @dev Cache the latest cumulative ETH requested value instead of checking latest element in the array.\\n    /// This prevents encountering an invalid value if someone claims the request which resets it.\\n    uint128 public latestCumulativeETHRequested;\\n\\n    /// @dev The internal queue of unstake requests.\\n    UnstakeRequest[] internal _unstakeRequests;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address manager;\\n        address requestCanceller;\\n        IMETH mETH;\\n        IStakingReturnsWrite stakingContract;\\n        IOracleReadRecord oracle;\\n        uint256 numberOfBlocksToFinalize;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        numberOfBlocksToFinalize = init.numberOfBlocksToFinalize;\\n        stakingContract = init.stakingContract;\\n        oracle = init.oracle;\\n        mETH = init.mETH;\\n\\n        _grantRole(MANAGER_ROLE, init.manager);\\n        _grantRole(REQUEST_CANCELLER_ROLE, init.requestCanceller);\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerWrite\\n    /// @dev Increases the cumulative ETH requested counter and pushes a new unstake request to the array. This function\\n    /// can only be called by the staking contract.\\n    function create(address requester, uint128 mETHLocked, uint128 ethRequested)\\n        external\\n        onlyStakingContract\\n        returns (uint256)\\n    {\\n        uint128 currentCumulativeETHRequested = latestCumulativeETHRequested + ethRequested;\\n        uint256 requestID = _unstakeRequests.length;\\n        UnstakeRequest memory unstakeRequest = UnstakeRequest({\\n            id: uint128(requestID),\\n            requester: requester,\\n            mETHLocked: mETHLocked,\\n            ethRequested: ethRequested,\\n            cumulativeETHRequested: currentCumulativeETHRequested,\\n            blockNumber: uint64(block.number)\\n        });\\n        _unstakeRequests.push(unstakeRequest);\\n\\n        latestCumulativeETHRequested = currentCumulativeETHRequested;\\n        emit UnstakeRequestCreated(\\n            requestID, requester, mETHLocked, ethRequested, currentCumulativeETHRequested, block.number\\n        );\\n        return requestID;\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerWrite\\n    /// @dev Verifies the requester's identity, finality of the request, and availability of funds before transferring\\n    /// the requested ETH. The unstake request is then removed from the array.\\n    function claim(uint256 requestID, address requester) external onlyStakingContract {\\n        UnstakeRequest memory request = _unstakeRequests[requestID];\\n\\n        if (request.requester == address(0)) {\\n            revert AlreadyClaimed();\\n        }\\n\\n        if (requester != request.requester) {\\n            revert NotRequester();\\n        }\\n\\n        if (!_isFinalized(request)) {\\n            revert NotFinalized();\\n        }\\n\\n        if (request.cumulativeETHRequested > allocatedETHForClaims) {\\n            revert NotEnoughFunds(request.cumulativeETHRequested, allocatedETHForClaims);\\n        }\\n\\n        delete _unstakeRequests[requestID];\\n        totalClaimed += request.ethRequested;\\n\\n        emit UnstakeRequestClaimed({\\n            id: requestID,\\n            requester: requester,\\n            mETHLocked: request.mETHLocked,\\n            ethRequested: request.ethRequested,\\n            cumulativeETHRequested: request.cumulativeETHRequested,\\n            blockNumber: request.blockNumber\\n        });\\n\\n        // Claiming the request burns the locked mETH tokens from this contract.\\n        // Note that it is intentional that burning happens here rather than at unstake time.\\n        // Please see the docs folder for more information.\\n        mETH.burn(request.mETHLocked);\\n\\n        Address.sendValue(payable(requester), request.ethRequested);\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerWrite\\n    /// @dev Iteratively checks the finality of the latest requests and cancels the unfinalized ones until reaching a\\n    /// finalized request or the max loop bound. Adjusts the state of the latest cumulative ETH accordingly.\\n    function cancelUnfinalizedRequests(uint256 maxCancel) external onlyRole(REQUEST_CANCELLER_ROLE) returns (bool) {\\n        uint256 length = _unstakeRequests.length;\\n        if (length == 0) {\\n            return false;\\n        }\\n\\n        if (length < maxCancel) {\\n            maxCancel = length;\\n        }\\n\\n        // Cache all cancelled requests to perform the refunds after processing all local effects to strictly follow the\\n        // checks-effects-interaction pattern.\\n        UnstakeRequest[] memory requests = new UnstakeRequest[](maxCancel);\\n\\n        // Find the number of requests that have not been finalized.\\n        uint256 numCancelled = 0;\\n        while (numCancelled < maxCancel) {\\n            UnstakeRequest memory request = _unstakeRequests[_unstakeRequests.length - 1];\\n\\n            if (_isFinalized(request)) {\\n                break;\\n            }\\n\\n            _unstakeRequests.pop();\\n            requests[numCancelled] = request;\\n            ++numCancelled;\\n\\n            emit UnstakeRequestCancelled(\\n                request.id,\\n                request.requester,\\n                request.mETHLocked,\\n                request.ethRequested,\\n                request.cumulativeETHRequested,\\n                request.blockNumber\\n            );\\n        }\\n\\n        // Reset the latest cumulative ETH state and check whether there are more unfinalized requests to cancel.\\n        bool hasMore;\\n        uint256 remainingRequestsLength = _unstakeRequests.length;\\n        if (remainingRequestsLength == 0) {\\n            latestCumulativeETHRequested = 0;\\n            hasMore = false;\\n        } else {\\n            UnstakeRequest memory latestRemainingRequest = _unstakeRequests[remainingRequestsLength - 1];\\n            latestCumulativeETHRequested = latestRemainingRequest.cumulativeETHRequested;\\n            hasMore = !_isFinalized(latestRemainingRequest);\\n        }\\n\\n        // Return the locked mETH of all cancelled requests.\\n        for (uint256 i = 0; i < numCancelled; i++) {\\n            SafeERC20Upgradeable.safeTransfer(mETH, requests[i].requester, requests[i].mETHLocked);\\n        }\\n\\n        return hasMore;\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerWrite\\n    /// @dev Handles incoming ether from the staking contract, increasing the allocatedETHForClaims counter by the value\\n    /// of the incoming allocatedETH.\\n    function allocateETH() external payable onlyStakingContract {\\n        allocatedETHForClaims += msg.value;\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerWrite\\n    /// @dev Helps during the emergency scenario where we cancel unstake requests and we want to move ether back into\\n    /// the staking contract.\\n    function withdrawAllocatedETHSurplus() external onlyStakingContract {\\n        uint256 toSend = allocatedETHSurplus();\\n        if (toSend == 0) {\\n            return;\\n        }\\n        allocatedETHForClaims -= toSend;\\n        stakingContract.receiveFromUnstakeRequestsManager{value: toSend}();\\n    }\\n\\n    /// @notice Returns the ID of the next unstake requests to be created.\\n    function nextRequestId() external view returns (uint256) {\\n        return _unstakeRequests.length;\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerRead\\n    function requestByID(uint256 requestID) external view returns (UnstakeRequest memory) {\\n        return _unstakeRequests[requestID];\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerRead\\n    function requestInfo(uint256 requestID) external view returns (bool, uint256) {\\n        UnstakeRequest memory request = _unstakeRequests[requestID];\\n\\n        bool isFinalized = _isFinalized(request);\\n        uint256 claimableAmount = 0;\\n\\n        // The cumulative ETH requested also includes the ETH requested and must be subtracted from the cumulative total\\n        // to find partially filled amounts.\\n        uint256 allocatedEthRequired = request.cumulativeETHRequested - request.ethRequested;\\n        if (allocatedEthRequired < allocatedETHForClaims) {\\n            // The allocatedETHForClaims increases over time whereas the request's cumulative ETH requested stays the\\n            // same. This means the difference between the two will also increase over time. Given we only want to\\n            // return the partially filled amount up to the full ETH requested, we take the minimum of the two.\\n            claimableAmount = Math.min(allocatedETHForClaims - allocatedEthRequired, request.ethRequested);\\n        }\\n        return (isFinalized, claimableAmount);\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerRead\\n    /// @dev Compares the latest the allocatedETHForClaims value and the cumulative ETH requested value to determine if\\n    /// there's a surplus.\\n    function allocatedETHSurplus() public view returns (uint256) {\\n        if (allocatedETHForClaims > latestCumulativeETHRequested) {\\n            return allocatedETHForClaims - latestCumulativeETHRequested;\\n        }\\n        return 0;\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerRead\\n    /// @dev Compares the latest cumulative ETH requested value and the allocatedETHForClaims value to determine if\\n    /// there's a deficit.\\n    function allocatedETHDeficit() external view returns (uint256) {\\n        if (latestCumulativeETHRequested > allocatedETHForClaims) {\\n            return latestCumulativeETHRequested - allocatedETHForClaims;\\n        }\\n        return 0;\\n    }\\n\\n    /// @inheritdoc IUnstakeRequestsManagerRead\\n    /// @dev The difference between allocatedETHForClaims and totalClaimed represents the amount of ether waiting to be\\n    /// claimed.\\n    function balance() external view returns (uint256) {\\n        if (allocatedETHForClaims > totalClaimed) {\\n            return allocatedETHForClaims - totalClaimed;\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Updates the number of blocks required to finalize requests.\\n    /// @param numberOfBlocksToFinalize_ The number of blocks required to finalize requests.\\n    function setNumberOfBlocksToFinalize(uint256 numberOfBlocksToFinalize_) external onlyRole(MANAGER_ROLE) {\\n        numberOfBlocksToFinalize = numberOfBlocksToFinalize_;\\n        emit ProtocolConfigChanged(\\n            this.setNumberOfBlocksToFinalize.selector,\\n            \\\"setNumberOfBlocksToFinalize(uint256)\\\",\\n            abi.encode(numberOfBlocksToFinalize_)\\n        );\\n    }\\n\\n    /// @notice Used by the claim function to check whether the request can be claimed (i.e. is finalized).\\n    /// @dev Finalization relies on the latest record of the oracle. This way, users can only claim their unstake\\n    /// requests in a period where the protocol has a valid record. We also use numberOfBlocksToFinalize as another\\n    /// safety buffer that can be set depending on the needs of the protocol.\\n    /// See also {claim}\\n    /// @return A boolean indicating whether the unstake request is finalized or not.\\n    function _isFinalized(UnstakeRequest memory request) internal view returns (bool) {\\n        return (request.blockNumber + numberOfBlocksToFinalize) <= oracle.latestRecord().updateEndBlock;\\n    }\\n\\n    /// @dev Validates that the caller is the staking contract.\\n    modifier onlyStakingContract() {\\n        if (msg.sender != address(stakingContract)) {\\n            revert NotStakingContract();\\n        }\\n        _;\\n    }\\n\\n    // Fallbacks.\\n    receive() external payable {\\n        revert DoesNotReceiveETH();\\n    }\\n\\n    fallback() external payable {\\n        revert DoesNotReceiveETH();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {Math} from \\\"openzeppelin/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"openzeppelin-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {ProtocolEvents} from \\\"./interfaces/ProtocolEvents.sol\\\";\\nimport {IDepositContract} from \\\"./interfaces/IDepositContract.sol\\\";\\nimport {IMETH} from \\\"./interfaces/IMETH.sol\\\";\\nimport {IOracleReadRecord, OracleRecord} from \\\"./interfaces/IOracle.sol\\\";\\nimport {IPauserRead} from \\\"./interfaces/IPauser.sol\\\";\\nimport {IStaking, IStakingReturnsWrite, IStakingInitiationRead} from \\\"./interfaces/IStaking.sol\\\";\\nimport {UnstakeRequest, IUnstakeRequestsManager} from \\\"./interfaces/IUnstakeRequestsManager.sol\\\";\\n\\n/// @notice Events emitted by the staking contract.\\ninterface StakingEvents {\\n    /// @notice Emitted when a user stakes ETH and receives mETH.\\n    /// @param staker The address of the user staking ETH.\\n    /// @param ethAmount The amount of ETH staked.\\n    /// @param mETHAmount The amount of mETH received.\\n    event Staked(address indexed staker, uint256 ethAmount, uint256 mETHAmount);\\n\\n    /// @notice Emitted when a user unstakes mETH in exchange for ETH.\\n    /// @param id The ID of the unstake request.\\n    /// @param staker The address of the user unstaking mETH.\\n    /// @param ethAmount The amount of ETH that the staker will receive.\\n    /// @param mETHLocked The amount of mETH that will be burned.\\n    event UnstakeRequested(uint256 indexed id, address indexed staker, uint256 ethAmount, uint256 mETHLocked);\\n\\n    /// @notice Emitted when a user claims their unstake request.\\n    /// @param id The ID of the unstake request.\\n    /// @param staker The address of the user claiming their unstake request.\\n    event UnstakeRequestClaimed(uint256 indexed id, address indexed staker);\\n\\n    /// @notice Emitted when a validator has been initiated (i.e. the protocol has deposited into the deposit contract).\\n    /// @param id The ID of the validator which is the hash of its pubkey.\\n    /// @param operatorID The ID of the node operator to which the validator belongs to.\\n    /// @param pubkey The pubkey of the validator.\\n    /// @param amountDeposited The amount of ETH deposited into the deposit contract for that validator.\\n    event ValidatorInitiated(bytes32 indexed id, uint256 indexed operatorID, bytes pubkey, uint256 amountDeposited);\\n\\n    /// @notice Emitted when the protocol has allocated ETH to the UnstakeRequestsManager.\\n    /// @param amount The amount of ETH allocated to the UnstakeRequestsManager.\\n    event AllocatedETHToUnstakeRequestsManager(uint256 amount);\\n\\n    /// @notice Emitted when the protocol has allocated ETH to use for deposits into the deposit contract.\\n    /// @param amount The amount of ETH allocated to deposits.\\n    event AllocatedETHToDeposits(uint256 amount);\\n\\n    /// @notice Emitted when the protocol has received returns from the returns aggregator.\\n    /// @param amount The amount of ETH received.\\n    event ReturnsReceived(uint256 amount);\\n}\\n\\n/// @title Staking\\n/// @notice Manages stake and unstake requests by users, keeps track of the total amount of ETH controlled by the\\n/// protocol, and initiates new validators.\\ncontract Staking is Initializable, AccessControlEnumerableUpgradeable, IStaking, StakingEvents, ProtocolEvents {\\n    // Errors.\\n    error DoesNotReceiveETH();\\n    error InvalidConfiguration();\\n    error MaximumValidatorDepositExceeded();\\n    error MaximumMETHSupplyExceeded();\\n    error MinimumStakeBoundNotSatisfied();\\n    error MinimumUnstakeBoundNotSatisfied();\\n    error MinimumValidatorDepositNotSatisfied();\\n    error NotEnoughDepositETH();\\n    error NotEnoughUnallocatedETH();\\n    error NotReturnsAggregator();\\n    error NotUnstakeRequestsManager();\\n    error Paused();\\n    error PreviouslyUsedValidator();\\n    error ZeroAddress();\\n    error InvalidDepositRoot(bytes32);\\n    error StakeBelowMinimumMETHAmount(uint256 methAmount, uint256 expectedMinimum);\\n    error UnstakeBelowMinimumETHAmount(uint256 ethAmount, uint256 expectedMinimum);\\n\\n    error InvalidWithdrawalCredentialsWrongLength(uint256);\\n    error InvalidWithdrawalCredentialsNotETH1(bytes12);\\n    error InvalidWithdrawalCredentialsWrongAddress(address);\\n\\n    /// @notice Role allowed trigger administrative tasks such as allocating funds to / withdrawing surplusses from the\\n    /// UnstakeRequestsManager and setting various parameters on the contract.\\n    bytes32 public constant STAKING_MANAGER_ROLE = keccak256(\\\"STAKING_MANAGER_ROLE\\\");\\n\\n    /// @notice Role allowed to allocate funds to unstake requests manager and reserve funds to deposit into the\\n    /// validators.\\n    bytes32 public constant ALLOCATOR_SERVICE_ROLE = keccak256(\\\"ALLOCATER_SERVICE_ROLE\\\");\\n\\n    /// @notice Role allowed to initiate new validators by sending funds from the allocatedETHForDeposits balance\\n    /// to the beacon chain deposit contract.\\n    bytes32 public constant INITIATOR_SERVICE_ROLE = keccak256(\\\"INITIATOR_SERVICE_ROLE\\\");\\n\\n    /// @notice Role to manage the staking allowlist.\\n    bytes32 public constant STAKING_ALLOWLIST_MANAGER_ROLE = keccak256(\\\"STAKING_ALLOWLIST_MANAGER_ROLE\\\");\\n\\n    /// @notice Role allowed to stake ETH when allowlist is enabled.\\n    bytes32 public constant STAKING_ALLOWLIST_ROLE = keccak256(\\\"STAKING_ALLOWLIST_ROLE\\\");\\n\\n    /// @notice Role allowed to top up the unallocated ETH in the protocol.\\n    bytes32 public constant TOP_UP_ROLE = keccak256(\\\"TOP_UP_ROLE\\\");\\n\\n    /// @notice Payload struct submitted for validator initiation.\\n    /// @dev See also {initiateValidatorsWithDeposits}.\\n    struct ValidatorParams {\\n        uint256 operatorID;\\n        uint256 depositAmount;\\n        bytes pubkey;\\n        bytes withdrawalCredentials;\\n        bytes signature;\\n        bytes32 depositDataRoot;\\n    }\\n\\n    /// @notice Keeps track of already initiated validators.\\n    /// @dev This is tracked to ensure that we never deposit for the same validator public key twice, which is a base\\n    /// assumption of this contract and the related off-chain accounting.\\n    mapping(bytes pubkey => bool exists) public usedValidators;\\n\\n    /// @inheritdoc IStakingInitiationRead\\n    /// @dev This is needed to account for ETH that is still in flight, i.e. that has been sent to the deposit contract\\n    /// but has not been processed by the beacon chain yet. Once the off-chain oracle detects those deposits, they are\\n    /// recorded as `totalDepositsProcessed` in the oracle contract to avoid double counting. See also\\n    /// {totalControlled}.\\n    uint256 public totalDepositedInValidators;\\n\\n    /// @inheritdoc IStakingInitiationRead\\n    uint256 public numInitiatedValidators;\\n\\n    /// @notice The amount of ETH that is used to allocate to deposits and fill the pending unstake requests.\\n    uint256 public unallocatedETH;\\n\\n    /// @notice The amount of ETH that is used deposit into validators.\\n    uint256 public allocatedETHForDeposits;\\n\\n    /// @notice The minimum amount of ETH users can stake.\\n    uint256 public minimumStakeBound;\\n\\n    /// @notice The minimum amount of mETH users can unstake.\\n    uint256 public minimumUnstakeBound;\\n\\n    /// @notice When staking on Ethereum, validators must go through an entry queue to bring money into the system, and\\n    /// an exit queue to bring it back out. The entry queue increases in size as more people want to stake. While the\\n    /// money is in the entry queue, it is not earning any rewards. When a validator is active, or in the exit queue, it\\n    /// is earning rewards. Once a validator enters the entry queue, the only way that the money can be retrieved is by\\n    /// waiting for it to become active and then to exit it again. As of July 2023, the entry queue is approximately 40\\n    /// days and the exit queue is 0 days (with ~6 days of processing time).\\n    ///\\n    /// In a non-optimal scenario for the protocol, a user could stake (for example) 32 ETH to receive mETH, wait\\n    /// until a validator enters the queue, and then request to unstake to recover their 32 ETH. Now we have 32 ETH in\\n    /// the system which affects the exchange rate, but is not earning rewards.\\n    ///\\n    /// In this case, the 'fair' thing to do would be to make the user wait for the queue processing to finish before\\n    /// returning their funds. Because the tokens are fungible however, we have no way of matching 'pending' stakes to a\\n    /// particular user. This means that in order to fulfill unstake requests quickly, we must exit a different\\n    /// validator to return the user's funds. If we exit a validator, we can return the funds after ~5 days, but the\\n    /// original 32 ETH will not be earning for another 35 days, leading to a small but repeatable socialised loss of\\n    /// efficiency for the protocol. As we can only exit validators in chunks of 32 ETH, this case is also exacerbated\\n    /// by a user unstaking smaller amounts of ETH.\\n    ///\\n    /// To compensate for the fact that these two queues differ in length, we apply an adjustment to the exchange rate\\n    /// to reflect the difference and mitigate its effect on the protocol. This protects the protocol from the case\\n    /// above, and also from griefing attacks following the same principle. Essentially, when you stake you are\\n    /// receiving a value of mETH that discounts ~35 days worth of rewards in return for being able to access your\\n    /// money without waiting the full 40 days when unstaking. As the adjustment is applied to the exchange rate, this\\n    /// results in a small 'improvement' to the rate for all existing stakers (i.e. it is not a fee levied by the\\n    /// protocol itself).\\n    ///\\n    /// As the adjustment is applied to the exchange rate, the result is reflected in any user interface which shows the\\n    /// amount of mETH received when staking, meaning there is no surprise for users when staking or unstaking.\\n    /// @dev The value is in basis points (1/10000).\\n    uint16 public exchangeAdjustmentRate;\\n\\n    /// @dev A basis point (often denoted as bp, 1bp = 0.01%) is a unit of measure used in finance to describe\\n    /// the percentage change in a financial instrument. This is a constant value set as 10000 which represents\\n    /// 100% in basis point terms.\\n    uint16 internal constant _BASIS_POINTS_DENOMINATOR = 10_000;\\n\\n    /// @notice The maximum amount the exchange adjustment rate (10%) that can be set by the admin.\\n    uint16 internal constant _MAX_EXCHANGE_ADJUSTMENT_RATE = _BASIS_POINTS_DENOMINATOR / 10; // 10%\\n\\n    /// @notice The minimum amount of ETH that the staking contract can send to the deposit contract to initiate new\\n    /// validators.\\n    /// @dev This is used as an additional safeguard to prevent sending deposits that would result in non-activated\\n    /// validators (since we don't do top-ups), that would need to be exited again to get the ETH back.\\n    uint256 public minimumDepositAmount;\\n\\n    /// @notice The maximum amount of ETH that the staking contract can send to the deposit contract to initiate new\\n    /// validators.\\n    /// @dev This is used as an additional safeguard to prevent sending too large deposits. While this is not a critical\\n    /// issue as any surplus >32 ETH (at the time of writing) will automatically be withdrawn again at some point, it is\\n    /// still undesireable as it locks up not-earning ETH for the duration of the round trip decreasing the efficiency\\n    /// of the protocol.\\n    uint256 public maximumDepositAmount;\\n\\n    /// @notice The beacon chain deposit contract.\\n    /// @dev ETH will be sent there during validator initiation.\\n    IDepositContract public depositContract;\\n\\n    /// @notice The mETH token contract.\\n    /// @dev Tokens will be minted / burned during staking / unstaking.\\n    IMETH public mETH;\\n\\n    /// @notice The oracle contract.\\n    /// @dev Tracks ETH on the beacon chain and other accounting relevant quantities.\\n    IOracleReadRecord public oracle;\\n\\n    /// @notice The pauser contract.\\n    /// @dev Keeps the pause state across the protocol.\\n    IPauserRead public pauser;\\n\\n    /// @notice The contract tracking unstake requests and related allocation and claim operations.\\n    IUnstakeRequestsManager public unstakeRequestsManager;\\n\\n    /// @notice The address to receive beacon chain withdrawals (i.e. validator rewards and exits).\\n    /// @dev Changing this variable will not have an immediate effect as all exisiting validators will still have the\\n    /// original value set.\\n    address public withdrawalWallet;\\n\\n    /// @notice The address for the returns aggregator contract to push funds.\\n    /// @dev See also {receiveReturns}.\\n    address public returnsAggregator;\\n\\n    /// @notice The staking allowlist flag which, when enabled, allows staking only for addresses in allowlist.\\n    bool public isStakingAllowlist;\\n\\n    /// @inheritdoc IStakingInitiationRead\\n    /// @dev This will be used to give off-chain services a sensible point in time to start their analysis from.\\n    uint256 public initializationBlockNumber;\\n\\n    /// @notice The maximum amount of mETH that can be minted during the staking process.\\n    /// @dev This is used as an additional safeguard to create a maximum stake amount in the protocol. As the protocol\\n    /// scales up this value will be increased to allow for more staking.\\n    uint256 public maximumMETHSupply;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        address manager;\\n        address allocatorService;\\n        address initiatorService;\\n        address returnsAggregator;\\n        address withdrawalWallet;\\n        IMETH mETH;\\n        IDepositContract depositContract;\\n        IOracleReadRecord oracle;\\n        IPauserRead pauser;\\n        IUnstakeRequestsManager unstakeRequestsManager;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        _grantRole(STAKING_MANAGER_ROLE, init.manager);\\n        _grantRole(ALLOCATOR_SERVICE_ROLE, init.allocatorService);\\n        _grantRole(INITIATOR_SERVICE_ROLE, init.initiatorService);\\n        // Intentionally does not set anyone as the TOP_UP_ROLE as it will only be granted\\n        // in the off-chance that the top up functionality is required.\\n\\n        // Set up roles for the staking allowlist. Intentionally do not grant anyone the\\n        // STAKING_ALLOWLIST_MANAGER_ROLE as it will only be granted later.\\n        _setRoleAdmin(STAKING_ALLOWLIST_MANAGER_ROLE, STAKING_MANAGER_ROLE);\\n        _setRoleAdmin(STAKING_ALLOWLIST_ROLE, STAKING_ALLOWLIST_MANAGER_ROLE);\\n\\n        mETH = init.mETH;\\n        depositContract = init.depositContract;\\n        oracle = init.oracle;\\n        pauser = init.pauser;\\n        returnsAggregator = init.returnsAggregator;\\n        unstakeRequestsManager = init.unstakeRequestsManager;\\n        withdrawalWallet = init.withdrawalWallet;\\n\\n        minimumStakeBound = 0.1 ether;\\n        minimumUnstakeBound = 0.01 ether;\\n        minimumDepositAmount = 32 ether;\\n        maximumDepositAmount = 32 ether;\\n        isStakingAllowlist = true;\\n        initializationBlockNumber = block.number;\\n\\n        // Set the maximum mETH supply to some sensible amount which is expected to be changed as the\\n        // protocol ramps up.\\n        maximumMETHSupply = 1024 ether;\\n    }\\n\\n    /// @notice Interface for users to stake their ETH with the protocol. Note: when allowlist is enabled, only users\\n    /// with the allowlist can stake.\\n    /// @dev Mints the corresponding amount of mETH (relative to the stake's share in the total ETH controlled by the\\n    /// protocol) to the user.\\n    /// @param minMETHAmount The minimum amount of mETH that the user expects to receive in return.\\n    function stake(uint256 minMETHAmount) external payable {\\n        if (pauser.isStakingPaused()) {\\n            revert Paused();\\n        }\\n\\n        if (isStakingAllowlist) {\\n            _checkRole(STAKING_ALLOWLIST_ROLE);\\n        }\\n\\n        if (msg.value < minimumStakeBound) {\\n            revert MinimumStakeBoundNotSatisfied();\\n        }\\n\\n        uint256 mETHMintAmount = ethToMETH(msg.value);\\n        if (mETHMintAmount + mETH.totalSupply() > maximumMETHSupply) {\\n            revert MaximumMETHSupplyExceeded();\\n        }\\n        if (mETHMintAmount < minMETHAmount) {\\n            revert StakeBelowMinimumMETHAmount(mETHMintAmount, minMETHAmount);\\n        }\\n\\n        // Increment unallocated ETH after calculating the exchange rate to ensure\\n        // a consistent rate.\\n        unallocatedETH += msg.value;\\n\\n        emit Staked(msg.sender, msg.value, mETHMintAmount);\\n        mETH.mint(msg.sender, mETHMintAmount);\\n    }\\n\\n    /// @notice Interface for users to submit a request to unstake.\\n    /// @dev Transfers the specified amount of mETH to the staking contract and locks it there until it is burned on\\n    /// request claim. The staking contract must therefore be approved to move the user's mETH on their behalf.\\n    /// @param methAmount The amount of mETH to unstake.\\n    /// @param minETHAmount The minimum amount of ETH that the user expects to receive.\\n    /// @return The request ID.\\n    function unstakeRequest(uint128 methAmount, uint128 minETHAmount) external returns (uint256) {\\n        return _unstakeRequest(methAmount, minETHAmount);\\n    }\\n\\n    /// @notice Interface for users to submit a request to unstake with an ERC20 permit.\\n    /// @dev Transfers the specified amount of mETH to the staking contract and locks it there until it is burned on\\n    /// request claim. The permit must therefore allow the staking contract to move the user's mETH on their behalf.\\n    /// @return The request ID.\\n    function unstakeRequestWithPermit(\\n        uint128 methAmount,\\n        uint128 minETHAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256) {\\n        SafeERC20Upgradeable.safePermit(mETH, msg.sender, address(this), methAmount, deadline, v, r, s);\\n        return _unstakeRequest(methAmount, minETHAmount);\\n    }\\n\\n    /// @notice Processes a user's request to unstake by transferring the corresponding mETH to the staking contract\\n    /// and creating the request on the unstake requests manager.\\n    /// @param methAmount The amount of mETH to unstake.\\n    /// @param minETHAmount The minimum amount of ETH that the user expects to receive.\\n    function _unstakeRequest(uint128 methAmount, uint128 minETHAmount) internal returns (uint256) {\\n        if (pauser.isUnstakeRequestsAndClaimsPaused()) {\\n            revert Paused();\\n        }\\n\\n        if (methAmount < minimumUnstakeBound) {\\n            revert MinimumUnstakeBoundNotSatisfied();\\n        }\\n\\n        uint128 ethAmount = uint128(mETHToETH(methAmount));\\n        if (ethAmount < minETHAmount) {\\n            revert UnstakeBelowMinimumETHAmount(ethAmount, minETHAmount);\\n        }\\n\\n        uint256 requestID =\\n            unstakeRequestsManager.create({requester: msg.sender, mETHLocked: methAmount, ethRequested: ethAmount});\\n        emit UnstakeRequested({id: requestID, staker: msg.sender, ethAmount: ethAmount, mETHLocked: methAmount});\\n\\n        SafeERC20Upgradeable.safeTransferFrom(mETH, msg.sender, address(unstakeRequestsManager), methAmount);\\n\\n        return requestID;\\n    }\\n\\n    /// @notice Interface for users to claim their finalized and filled unstaking requests.\\n    /// @dev See also {UnstakeRequestsManager} for a more detailed explanation of finalization and request filling.\\n    function claimUnstakeRequest(uint256 unstakeRequestID) external {\\n        if (pauser.isUnstakeRequestsAndClaimsPaused()) {\\n            revert Paused();\\n        }\\n        emit UnstakeRequestClaimed(unstakeRequestID, msg.sender);\\n        unstakeRequestsManager.claim(unstakeRequestID, msg.sender);\\n    }\\n\\n    /// @notice Returns the status of the request whether it is finalized and how much ETH has been filled.\\n    /// See also {UnstakeRequestsManager.requestInfo} for a more detailed explanation of finalization and request\\n    /// filling.\\n    /// @param unstakeRequestID The ID of the unstake request.\\n    /// @return bool indicating if the unstake request is finalized, and the amount of ETH that has been filled.\\n    function unstakeRequestInfo(uint256 unstakeRequestID) external view returns (bool, uint256) {\\n        return unstakeRequestsManager.requestInfo(unstakeRequestID);\\n    }\\n\\n    /// @notice Withdraws any surplus from the unstake requests manager.\\n    /// @dev The request manager is expected to return the funds by pushing them using\\n    /// {receiveFromUnstakeRequestsManager}.\\n    function reclaimAllocatedETHSurplus() external onlyRole(STAKING_MANAGER_ROLE) {\\n        // Calls the receiveFromUnstakeRequestsManager() where we perform\\n        // the accounting.\\n        unstakeRequestsManager.withdrawAllocatedETHSurplus();\\n    }\\n\\n    /// @notice Allocates ETH from the unallocatedETH balance to the unstake requests manager to fill pending requests\\n    /// and adds to the allocatedETHForDeposits balance that is used to initiate new validators.\\n    function allocateETH(uint256 allocateToUnstakeRequestsManager, uint256 allocateToDeposits)\\n        external\\n        onlyRole(ALLOCATOR_SERVICE_ROLE)\\n    {\\n        if (pauser.isAllocateETHPaused()) {\\n            revert Paused();\\n        }\\n\\n        if (allocateToUnstakeRequestsManager + allocateToDeposits > unallocatedETH) {\\n            revert NotEnoughUnallocatedETH();\\n        }\\n\\n        unallocatedETH -= allocateToUnstakeRequestsManager + allocateToDeposits;\\n\\n        if (allocateToDeposits > 0) {\\n            allocatedETHForDeposits += allocateToDeposits;\\n            emit AllocatedETHToDeposits(allocateToDeposits);\\n        }\\n\\n        if (allocateToUnstakeRequestsManager > 0) {\\n            emit AllocatedETHToUnstakeRequestsManager(allocateToUnstakeRequestsManager);\\n            unstakeRequestsManager.allocateETH{value: allocateToUnstakeRequestsManager}();\\n        }\\n    }\\n\\n    /// @notice Initiates new validators by sending ETH to the beacon chain deposit contract.\\n    /// @dev Cannot initiate the same validator (public key) twice. Since BLS signatures cannot be feasibly verified on\\n    /// the EVM, the caller must carefully make sure that the sent payloads (public keys + signatures) are correct,\\n    /// otherwise the sent ETH will be lost.\\n    function initiateValidatorsWithDeposits(ValidatorParams[] calldata validators, bytes32 expectedDepositRoot)\\n        external\\n        onlyRole(INITIATOR_SERVICE_ROLE)\\n    {\\n        if (pauser.isInitiateValidatorsPaused()) {\\n            revert Paused();\\n        }\\n        if (validators.length == 0) {\\n            return;\\n        }\\n\\n        // Check that the deposit root matches the given value. This ensures that the deposit contract state\\n        // has not changed since the transaction was submitted, which means that a rogue node operator cannot\\n        // front-run deposit transactions.\\n        bytes32 actualRoot = depositContract.get_deposit_root();\\n        if (expectedDepositRoot != actualRoot) {\\n            revert InvalidDepositRoot(actualRoot);\\n        }\\n\\n        // First loop is to check that all validators are valid according to our constraints and we record the\\n        // validators and how much we have deposited.\\n        uint256 amountDeposited = 0;\\n        for (uint256 i = 0; i < validators.length; ++i) {\\n            ValidatorParams calldata validator = validators[i];\\n\\n            if (usedValidators[validator.pubkey]) {\\n                revert PreviouslyUsedValidator();\\n            }\\n\\n            if (validator.depositAmount < minimumDepositAmount) {\\n                revert MinimumValidatorDepositNotSatisfied();\\n            }\\n\\n            if (validator.depositAmount > maximumDepositAmount) {\\n                revert MaximumValidatorDepositExceeded();\\n            }\\n\\n            _requireProtocolWithdrawalAccount(validator.withdrawalCredentials);\\n\\n            usedValidators[validator.pubkey] = true;\\n            amountDeposited += validator.depositAmount;\\n\\n            emit ValidatorInitiated({\\n                id: keccak256(validator.pubkey),\\n                operatorID: validator.operatorID,\\n                pubkey: validator.pubkey,\\n                amountDeposited: validator.depositAmount\\n            });\\n        }\\n\\n        if (amountDeposited > allocatedETHForDeposits) {\\n            revert NotEnoughDepositETH();\\n        }\\n\\n        allocatedETHForDeposits -= amountDeposited;\\n        totalDepositedInValidators += amountDeposited;\\n        numInitiatedValidators += validators.length;\\n\\n        // Second loop is to send the deposits to the deposit contract. Keeps external calls to the deposit contract\\n        // separate from state changes.\\n        for (uint256 i = 0; i < validators.length; ++i) {\\n            ValidatorParams calldata validator = validators[i];\\n            depositContract.deposit{value: validator.depositAmount}({\\n                pubkey: validator.pubkey,\\n                withdrawal_credentials: validator.withdrawalCredentials,\\n                signature: validator.signature,\\n                deposit_data_root: validator.depositDataRoot\\n            });\\n        }\\n    }\\n\\n    /// @inheritdoc IStakingReturnsWrite\\n    /// @dev Intended to be the called in the same transaction initiated by reclaimAllocatedETHSurplus().\\n    /// This should only be called in emergency scenarios, e.g. if the unstake requests manager has cancelled\\n    /// unfinalized requests and there is a surplus balance.\\n    /// Adds the received funds to the unallocated balance.\\n    function receiveFromUnstakeRequestsManager() external payable onlyUnstakeRequestsManager {\\n        unallocatedETH += msg.value;\\n    }\\n\\n    /// @notice Tops up the unallocated ETH balance to increase the amount of ETH in the protocol.\\n    /// @dev Bypasses the returns aggregator fee collection to inject ETH directly into the protocol.\\n    function topUp() external payable onlyRole(TOP_UP_ROLE) {\\n        unallocatedETH += msg.value;\\n    }\\n\\n    /// @notice Converts from mETH to ETH using the current exchange rate.\\n    /// The exchange rate is given by the total supply of mETH and total ETH controlled by the protocol.\\n    function ethToMETH(uint256 ethAmount) public view returns (uint256) {\\n        // 1:1 exchange rate on the first stake.\\n        // Using `METH.totalSupply` over `totalControlled` to check if the protocol is in its bootstrap phase since\\n        // the latter can be manipulated, for example by transferring funds to the `ExecutionLayerReturnsReceiver`, and\\n        // therefore be non-zero by the time the first stake is made\\n        if (mETH.totalSupply() == 0) {\\n            return ethAmount;\\n        }\\n\\n        // deltaMETH = (1 - exchangeAdjustmentRate) * (mETHSupply / totalControlled) * ethAmount\\n        // This rounds down to zero in the case of `(1 - exchangeAdjustmentRate) * ethAmount * mETHSupply <\\n        // totalControlled`.\\n        // While this scenario is theoretically possible, it can only be realised feasibly during the protocol's\\n        // bootstrap phase and if `totalControlled` and `mETHSupply` can be changed independently of each other. Since\\n        // the former is permissioned, and the latter is not permitted by the protocol, this cannot be exploited by an\\n        // attacker.\\n        return Math.mulDiv(\\n            ethAmount,\\n            mETH.totalSupply() * uint256(_BASIS_POINTS_DENOMINATOR - exchangeAdjustmentRate),\\n            totalControlled() * uint256(_BASIS_POINTS_DENOMINATOR)\\n        );\\n    }\\n\\n    /// @notice Converts from ETH to mETH using the current exchange rate.\\n    /// The exchange rate is given by the total supply of mETH and total ETH controlled by the protocol.\\n    function mETHToETH(uint256 mETHAmount) public view returns (uint256) {\\n        // 1:1 exchange rate on the first stake.\\n        // Using `METH.totalSupply` over `totalControlled` to check if the protocol is in its bootstrap phase since\\n        // the latter can be manipulated, for example by transferring funds to the `ExecutionLayerReturnsReceiver`, and\\n        // therefore be non-zero by the time the first stake is made\\n        if (mETH.totalSupply() == 0) {\\n            return mETHAmount;\\n        }\\n\\n        // deltaETH = (totalControlled / mETHSupply) * mETHAmount\\n        // This rounds down to zero in the case of `mETHAmount * totalControlled < mETHSupply`.\\n        // While this scenario is theoretically possible, it can only be realised feasibly during the protocol's\\n        // bootstrap phase and if `totalControlled` and `mETHSupply` can be changed independently of each other. Since\\n        // the former is permissioned, and the latter is not permitted by the protocol, this cannot be exploited by an\\n        // attacker.\\n        return Math.mulDiv(mETHAmount, totalControlled(), mETH.totalSupply());\\n    }\\n\\n    /// @notice The total amount of ETH controlled by the protocol.\\n    /// @dev Sums over the balances of various contracts and the beacon chain information from the oracle.\\n    function totalControlled() public view returns (uint256) {\\n        OracleRecord memory record = oracle.latestRecord();\\n        uint256 total = 0;\\n        total += unallocatedETH;\\n        total += allocatedETHForDeposits;\\n        /// The total ETH deposited to the beacon chain must be decreased by the deposits processed by the off-chain\\n        /// oracle since it will be accounted for in the currentTotalValidatorBalance from that point onwards.\\n        total += totalDepositedInValidators - record.cumulativeProcessedDepositAmount;\\n        total += record.currentTotalValidatorBalance;\\n        total += unstakeRequestsManager.balance();\\n        return total;\\n    }\\n\\n    /// @notice Checks if the given withdrawal credentials are a valid 0x01 prefixed withdrawal address.\\n    /// @dev See also\\n    /// https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/validator.md#eth1_address_withdrawal_prefix\\n    function _requireProtocolWithdrawalAccount(bytes calldata withdrawalCredentials) internal view {\\n        if (withdrawalCredentials.length != 32) {\\n            revert InvalidWithdrawalCredentialsWrongLength(withdrawalCredentials.length);\\n        }\\n\\n        // Check the ETH1_ADDRESS_WITHDRAWAL_PREFIX and that all other bytes are zero.\\n        bytes12 prefixAndPadding = bytes12(withdrawalCredentials[:12]);\\n        if (prefixAndPadding != 0x010000000000000000000000) {\\n            revert InvalidWithdrawalCredentialsNotETH1(prefixAndPadding);\\n        }\\n\\n        address addr = address(bytes20(withdrawalCredentials[12:32]));\\n        if (addr != withdrawalWallet) {\\n            revert InvalidWithdrawalCredentialsWrongAddress(addr);\\n        }\\n    }\\n\\n    /// @inheritdoc IStakingReturnsWrite\\n    /// @dev Adds the received funds to the unallocated balance.\\n    function receiveReturns() external payable onlyReturnsAggregator {\\n        emit ReturnsReceived(msg.value);\\n        unallocatedETH += msg.value;\\n    }\\n\\n    /// @notice Ensures that the caller is the returns aggregator.\\n    modifier onlyReturnsAggregator() {\\n        if (msg.sender != returnsAggregator) {\\n            revert NotReturnsAggregator();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the caller is the unstake requests manager.\\n    modifier onlyUnstakeRequestsManager() {\\n        if (msg.sender != address(unstakeRequestsManager)) {\\n            revert NotUnstakeRequestsManager();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the given address is not the zero address.\\n    modifier notZeroAddress(address addr) {\\n        if (addr == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Sets the minimum amount of ETH users can stake.\\n    function setMinimumStakeBound(uint256 minimumStakeBound_) external onlyRole(STAKING_MANAGER_ROLE) {\\n        minimumStakeBound = minimumStakeBound_;\\n        emit ProtocolConfigChanged(\\n            this.setMinimumStakeBound.selector, \\\"setMinimumStakeBound(uint256)\\\", abi.encode(minimumStakeBound_)\\n        );\\n    }\\n\\n    /// @notice Sets the minimum amount of mETH users can unstake.\\n    function setMinimumUnstakeBound(uint256 minimumUnstakeBound_) external onlyRole(STAKING_MANAGER_ROLE) {\\n        minimumUnstakeBound = minimumUnstakeBound_;\\n        emit ProtocolConfigChanged(\\n            this.setMinimumUnstakeBound.selector, \\\"setMinimumUnstakeBound(uint256)\\\", abi.encode(minimumUnstakeBound_)\\n        );\\n    }\\n\\n    /// @notice Sets the staking adjust rate.\\n    function setExchangeAdjustmentRate(uint16 exchangeAdjustmentRate_) external onlyRole(STAKING_MANAGER_ROLE) {\\n        if (exchangeAdjustmentRate_ > _MAX_EXCHANGE_ADJUSTMENT_RATE) {\\n            revert InvalidConfiguration();\\n        }\\n\\n        // even though this check is redundant with the one above, this function will be rarely used so we keep it as a\\n        // reminder for future upgrades that this must never be violated.\\n        assert(exchangeAdjustmentRate_ <= _BASIS_POINTS_DENOMINATOR);\\n\\n        exchangeAdjustmentRate = exchangeAdjustmentRate_;\\n        emit ProtocolConfigChanged(\\n            this.setExchangeAdjustmentRate.selector,\\n            \\\"setExchangeAdjustmentRate(uint16)\\\",\\n            abi.encode(exchangeAdjustmentRate_)\\n        );\\n    }\\n\\n    /// @notice Sets the minimum amount of ETH that the staking contract can send to the deposit contract to initiate\\n    /// new validators.\\n    function setMinimumDepositAmount(uint256 minimumDepositAmount_) external onlyRole(STAKING_MANAGER_ROLE) {\\n        minimumDepositAmount = minimumDepositAmount_;\\n        emit ProtocolConfigChanged(\\n            this.setMinimumDepositAmount.selector, \\\"setMinimumDepositAmount(uint256)\\\", abi.encode(minimumDepositAmount_)\\n        );\\n    }\\n\\n    /// @notice Sets the maximum amount of ETH that the staking contract can send to the deposit contract to initiate\\n    /// new validators.\\n    function setMaximumDepositAmount(uint256 maximumDepositAmount_) external onlyRole(STAKING_MANAGER_ROLE) {\\n        maximumDepositAmount = maximumDepositAmount_;\\n        emit ProtocolConfigChanged(\\n            this.setMaximumDepositAmount.selector, \\\"setMaximumDepositAmount(uint256)\\\", abi.encode(maximumDepositAmount_)\\n        );\\n    }\\n\\n    /// @notice Sets the maximumMETHSupply variable.\\n    /// Note: We intentionally allow this to be set lower than the current totalSupply so that the amount can be\\n    /// adjusted downwards by unstaking.\\n    /// See also {maximumMETHSupply}.\\n    function setMaximumMETHSupply(uint256 maximumMETHSupply_) external onlyRole(STAKING_MANAGER_ROLE) {\\n        maximumMETHSupply = maximumMETHSupply_;\\n        emit ProtocolConfigChanged(\\n            this.setMaximumMETHSupply.selector, \\\"setMaximumMETHSupply(uint256)\\\", abi.encode(maximumMETHSupply_)\\n        );\\n    }\\n\\n    /// @notice Sets the address to receive beacon chain withdrawals (i.e. validator rewards and exits).\\n    /// @dev Changing this variable will not have an immediate effect as all exisiting validators will still have the\\n    /// original value set.\\n    function setWithdrawalWallet(address withdrawalWallet_)\\n        external\\n        onlyRole(STAKING_MANAGER_ROLE)\\n        notZeroAddress(withdrawalWallet_)\\n    {\\n        withdrawalWallet = withdrawalWallet_;\\n        emit ProtocolConfigChanged(\\n            this.setWithdrawalWallet.selector, \\\"setWithdrawalWallet(address)\\\", abi.encode(withdrawalWallet_)\\n        );\\n    }\\n\\n    /// @notice Sets the staking allowlist flag.\\n    function setStakingAllowlist(bool isStakingAllowlist_) external onlyRole(STAKING_MANAGER_ROLE) {\\n        isStakingAllowlist = isStakingAllowlist_;\\n        emit ProtocolConfigChanged(\\n            this.setStakingAllowlist.selector, \\\"setStakingAllowlist(bool)\\\", abi.encode(isStakingAllowlist_)\\n        );\\n    }\\n\\n    receive() external payable {\\n        revert DoesNotReceiveETH();\\n    }\\n\\n    fallback() external payable {\\n        revert DoesNotReceiveETH();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/METH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Initializable} from \\\"openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from\\n    \\\"openzeppelin-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport {AccessControlEnumerable} from \\\"openzeppelin/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    ERC20PermitUpgradeable,\\n    IERC20PermitUpgradeable\\n} from \\\"openzeppelin-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\n\\nimport {IMETH} from \\\"./interfaces/IMETH.sol\\\";\\nimport {IStaking} from \\\"./interfaces/IStaking.sol\\\";\\nimport {IUnstakeRequestsManager} from \\\"./interfaces/IUnstakeRequestsManager.sol\\\";\\n\\n/// @title METH\\n/// @notice METH is the ERC20 LSD token for the protocol.\\ncontract METH is Initializable, AccessControlEnumerableUpgradeable, ERC20PermitUpgradeable, IMETH {\\n    // Errors.\\n    error NotStakingContract();\\n    error NotUnstakeRequestsManagerContract();\\n\\n    /// @notice The staking contract which has permissions to mint tokens.\\n    IStaking public stakingContract;\\n\\n    /// @notice The unstake requests manager contract which has permissions to burn tokens.\\n    IUnstakeRequestsManager public unstakeRequestsManagerContract;\\n\\n    /// @notice Configuration for contract initialization.\\n    struct Init {\\n        address admin;\\n        IStaking staking;\\n        IUnstakeRequestsManager unstakeRequestsManager;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Inititalizes the contract.\\n    /// @dev MUST be called during the contract upgrade to set up the proxies state.\\n    function initialize(Init memory init) external initializer {\\n        __AccessControlEnumerable_init();\\n        __ERC20_init(\\\"mETH\\\", \\\"mETH\\\");\\n        __ERC20Permit_init(\\\"mETH\\\");\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, init.admin);\\n        stakingContract = init.staking;\\n        unstakeRequestsManagerContract = init.unstakeRequestsManager;\\n    }\\n\\n    /// @inheritdoc IMETH\\n    /// @dev Expected to be called during the stake operation.\\n    function mint(address staker, uint256 amount) external {\\n        if (msg.sender != address(stakingContract)) {\\n            revert NotStakingContract();\\n        }\\n\\n        _mint(staker, amount);\\n    }\\n\\n    /// @inheritdoc IMETH\\n    /// @dev Expected to be called when a user has claimed their unstake request.\\n    function burn(uint256 amount) external {\\n        if (msg.sender != address(unstakeRequestsManagerContract)) {\\n            revert NotUnstakeRequestsManagerContract();\\n        }\\n\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /// @dev See {IERC20Permit-nonces}.\\n    function nonces(address owner)\\n        public\\n        view\\n        virtual\\n        override(ERC20PermitUpgradeable, IERC20PermitUpgradeable)\\n        returns (uint256)\\n    {\\n        return ERC20PermitUpgradeable.nonces(owner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPauser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IPauserRead {\\n    /// @notice Flag indicating if staking is paused.\\n    function isStakingPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if unstake requests are paused.\\n    function isUnstakeRequestsAndClaimsPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if initiate validators is paused\\n    function isInitiateValidatorsPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if submit oracle records is paused.\\n    function isSubmitOracleRecordsPaused() external view returns (bool);\\n\\n    /// @notice Flag indicating if allocate ETH is paused.\\n    function isAllocateETHPaused() external view returns (bool);\\n}\\n\\ninterface IPauserWrite {\\n    /// @notice Pauses all actions.\\n    function pauseAll() external;\\n}\\n\\ninterface IPauser is IPauserRead, IPauserWrite {}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @notice The records stored by the oracle contract informing the protocol about consensus layer activity. It is\\n/// computed and reported by off-chain oracle services.\\n/// @dev \\\"current\\\" quantities refer to the state at the `updateEndBlock` block number.\\n/// @dev \\\"cumulative\\\" quantities refer to sums up to the `updateEndBlock` block number.\\n/// @dev \\\"window\\\" quantities refer to sums over the block window between the `updateStartBlock` and `updateEndBlock`.\\n/// @param updateStartBlock The start of the oracle record block window. This should be 1 higher than the\\n/// updateEndBlock of the previous oracle record.\\n/// @param updateEndBlock The block number up to which this oracle record was computed (inclusive).\\n/// @param currentNumValidatorsNotWithdrawable The number of our validators that do not have the withdrawable status.\\n/// @param cumulativeNumValidatorsWithdrawable The total number of our validators that have the withdrawable status.\\n/// These validators have either the status `withdrawal_possible` or `withdrawal_done`. Note: validators can\\n/// fluctuate between the two statuses due to top ups.\\n/// @param windowWithdrawnPrincipalAmount The amount of principal that has been withdrawn from the consensus layer in\\n/// the analyzed block window.\\n/// @param windowWithdrawnRewardAmount The amount of rewards that has been withdrawn from the consensus layer in the\\n/// analysed block window.\\n/// @param currentTotalValidatorBalance The total amount of ETH in the consensus layer (i.e. the sum of all validator\\n/// balances). This is one of the major quantities to compute the total value controlled by the protocol.\\n/// @param cumulativeProcessedDepositAmount The total amount of ETH that has been deposited into and processed by the\\n/// consensus layer. This is used to prevent double counting of the ETH deposited to the consensus layer.\\nstruct OracleRecord {\\n    uint64 updateStartBlock;\\n    uint64 updateEndBlock;\\n    uint64 currentNumValidatorsNotWithdrawable;\\n    uint64 cumulativeNumValidatorsWithdrawable;\\n    uint128 windowWithdrawnPrincipalAmount;\\n    uint128 windowWithdrawnRewardAmount;\\n    uint128 currentTotalValidatorBalance;\\n    uint128 cumulativeProcessedDepositAmount;\\n}\\n\\ninterface IOracleWrite {\\n    /// @notice Pushes a new record to the oracle.\\n    function receiveRecord(OracleRecord calldata record) external;\\n}\\n\\ninterface IOracleReadRecord {\\n    /// @notice Returns the latest validated record.\\n    /// @return `OracleRecord` The latest validated record.\\n    function latestRecord() external view returns (OracleRecord calldata);\\n\\n    /// @notice Returns the record at the given index.\\n    /// @param idx The index of the record to retrieve.\\n    /// @return `OracleRecord` The record at the given index.\\n    function recordAt(uint256 idx) external view returns (OracleRecord calldata);\\n\\n    /// @notice Returns the number of records in the oracle.\\n    /// @return `uint256` The number of records in the oracle.\\n    function numRecords() external view returns (uint256);\\n}\\n\\ninterface IOracleReadPending {\\n    /// @notice Returns the pending update.\\n    /// @return `OracleRecord` The pending update.\\n    function pendingUpdate() external view returns (OracleRecord calldata);\\n\\n    /// @notice Indicates whether an oracle update is pending, i.e. if it was rejected by `_sanityCheckUpdate`.\\n    function hasPendingUpdate() external view returns (bool);\\n}\\n\\ninterface IOracleRead is IOracleReadRecord, IOracleReadPending {}\\n\\ninterface IOracleManager {\\n    /// @notice Sets the new oracle updater for the contract.\\n    /// @param newUpdater The new oracle updater.\\n    function setOracleUpdater(address newUpdater) external;\\n}\\n\\ninterface IOracle is IOracleWrite, IOracleRead, IOracleManager {}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ProtocolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface ProtocolEvents {\\n    /// @notice Emitted when a protocol configuration has been updated.\\n    /// @param setterSelector The selector of the function that updated the configuration.\\n    /// @param setterSignature The signature of the function that updated the configuration.\\n    /// @param value The abi-encoded data passed to the function that updated the configuration. Since this event will\\n    /// only be emitted by setters, this data corresponds to the updated values in the protocol configuration.\\n    event ProtocolConfigChanged(bytes4 indexed setterSelector, string setterSignature, bytes value);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IStakingInitiationRead {\\n    /// @notice The total amount of ETH sent to the beacon chain deposit contract.\\n    function totalDepositedInValidators() external view returns (uint256);\\n\\n    /// @notice The number of validators initiated by the staking contract.\\n    function numInitiatedValidators() external view returns (uint256);\\n\\n    /// @notice The block number at which the staking contract has been initialised.\\n    function initializationBlockNumber() external view returns (uint256);\\n}\\n\\ninterface IStakingReturnsWrite {\\n    /// @notice Accepts funds sent by the returns aggregator.\\n    function receiveReturns() external payable;\\n\\n    /// @notice Accepts funds sent by the unstake requests manager.\\n    function receiveFromUnstakeRequestsManager() external payable;\\n}\\n\\ninterface IStaking is IStakingInitiationRead, IStakingReturnsWrite {}\\n\"\r\n    },\r\n    \"src/interfaces/IReturnsAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {OracleRecord} from \\\"./IOracle.sol\\\";\\n\\ninterface IReturnsAggregatorWrite {\\n    /// @notice Takes the record from the oracle, aggregates net returns accordingly and forwards them to\\n    /// the staking contract.\\n    function processReturns(uint256 rewardAmount, uint256 principalAmount, bool shouldIncludeELRewards) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Upgradeable} from \\\"openzeppelin-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"openzeppelin-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\\\";\\n\\ninterface IMETH is IERC20Upgradeable, IERC20PermitUpgradeable {\\n    /// @notice Mint mETH to the staker.\\n    /// @param staker The address of the staker.\\n    /// @param amount The amount of tokens to mint.\\n    function mint(address staker, uint256 amount) external;\\n\\n    /// @notice Burn mETH from the msg.sender.\\n    /// @param amount The amount of tokens to burn.\\n    function burn(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IUnstakeRequestsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Staking} from \\\"../Staking.sol\\\";\\n\\n/// @notice An unstake request is stored in the UnstakeRequestsManager and records the information required to\\n/// fulfill an unstake request claim.\\n/// @param id The unique ID of the unstake request.\\n/// @param requester The address of the user that requested the unstake.\\n/// @param mETHLocked The amount of mETH that was locked when the unstake request was created. The amount of mETH\\n/// will be burned once the request has been claimed.\\n/// @param ethRequested The amount of ETH that was requested when the unstake request was created.\\n/// @param cumulativeETHRequested The cumulative amount of ETH that had been requested in this request and all unstake\\n/// requests before this one.\\n/// @param blockNumber The block number at which the unstake request was created.\\nstruct UnstakeRequest {\\n    uint64 blockNumber;\\n    address requester;\\n    uint128 id;\\n    uint128 mETHLocked;\\n    uint128 ethRequested;\\n    uint128 cumulativeETHRequested;\\n}\\n\\ninterface IUnstakeRequestsManagerWrite {\\n    /// @notice Creates a new unstake request and adds it to the unstake requests array.\\n    /// @param requester The address of the entity making the unstake request.\\n    /// @param mETHLocked The amount of mETH tokens currently locked in the contract.\\n    /// @param ethRequested The amount of ETH being requested for unstake.\\n    /// @return The ID of the new unstake request.\\n    function create(address requester, uint128 mETHLocked, uint128 ethRequested) external returns (uint256);\\n\\n    /// @notice Allows the requester to claim their unstake request after it has been finalized.\\n    /// @param requestID The ID of the unstake request to claim.\\n    /// @param requester The address of the entity claiming the unstake request.\\n    function claim(uint256 requestID, address requester) external;\\n\\n    /// @notice Cancels a batch of the latest unfinalized unstake requests.\\n    /// @param maxCancel The maximum number of requests to cancel.\\n    /// @return A boolean indicating if there are more unstake requests to cancel.\\n    function cancelUnfinalizedRequests(uint256 maxCancel) external returns (bool);\\n\\n    /// @notice Allocate ether into the contract.\\n    function allocateETH() external payable;\\n\\n    /// @notice Withdraws surplus ETH from the allocatedETHForClaims.\\n    function withdrawAllocatedETHSurplus() external;\\n}\\n\\ninterface IUnstakeRequestsManagerRead {\\n    /// @notice Retrieves a specific unstake request based on its ID.\\n    /// @param requestID The ID of the unstake request to fetch.\\n    /// @return The UnstakeRequest struct corresponding to the given ID.\\n    function requestByID(uint256 requestID) external view returns (UnstakeRequest memory);\\n\\n    /// @notice Returns the status of the request whether it is finalized and how much ETH that has been filled.\\n    /// @param requestID The ID of the unstake request.\\n    /// @return bool indicating if the request is finalized, and the amount of ETH that has been filled.\\n    function requestInfo(uint256 requestID) external view returns (bool, uint256);\\n\\n    /// @notice Calculates the amount of ether allocated in the contract exceeding the total required to pay unclaimed.\\n    /// @return The amount of surplus allocatedETH.\\n    function allocatedETHSurplus() external view returns (uint256);\\n\\n    /// @notice Calculates the amount of ether that is needed to fulfill the unstake requests.\\n    /// @return The amount of allocatedETH deficit.\\n    function allocatedETHDeficit() external view returns (uint256);\\n\\n    /// @notice Calculates the amount of ether that has been allocated but not yet claimed.\\n    /// @return The total amount of ether that is waiting to be claimed.\\n    function balance() external view returns (uint256);\\n}\\n\\ninterface IUnstakeRequestsManager is IUnstakeRequestsManagerRead, IUnstakeRequestsManagerWrite {}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC5267Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:forge-std/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[]", "ContractName": "EmptyContract", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}