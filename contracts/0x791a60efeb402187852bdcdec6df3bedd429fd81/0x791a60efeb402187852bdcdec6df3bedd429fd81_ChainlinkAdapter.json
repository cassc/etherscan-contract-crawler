{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.17;\r\n\r\n// contracts/Dependencies/AggregatorV3Interface.sol\r\n\r\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function latestRound() external view returns (uint80);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n// contracts/ChainlinkAdapter.sol\r\n\r\ncontract ChainlinkAdapter is AggregatorV3Interface {\r\n    uint8 public constant override decimals = 18;\r\n    uint256 public constant override version = 1;\r\n\r\n    /**\r\n     * @notice Maximum number of resulting and feed decimals\r\n     */\r\n    uint8 public constant MAX_DECIMALS = 18;\r\n\r\n    /// @notice PriceFeed always fetches current and previous rounds. It's ok to\r\n    /// hardcode round IDs as long as they are greater than 0.\r\n    uint80 public constant CURRENT_ROUND = 2;\r\n    uint80 public constant PREVIOUS_ROUND = 1;\r\n    int256 internal constant ADAPTER_PRECISION = int256(10 ** decimals);\r\n\r\n    /**\r\n     * @notice Price feed for (BTC / USD) pair\r\n     */\r\n    AggregatorV3Interface public immutable BTC_USD_CL_FEED;\r\n\r\n    /**\r\n     * @notice Price feed for (ETH / USD) pair\r\n     */\r\n    AggregatorV3Interface public immutable ETH_USD_CL_FEED;\r\n\r\n    int256 internal immutable BTC_USD_PRECISION;\r\n    int256 internal immutable ETH_USD_PRECISION;\r\n\r\n    constructor(AggregatorV3Interface _btcUsdClFeed, AggregatorV3Interface _ethUsdClFeed) {\r\n        BTC_USD_CL_FEED = AggregatorV3Interface(_btcUsdClFeed);\r\n        ETH_USD_CL_FEED = AggregatorV3Interface(_ethUsdClFeed);\r\n\r\n        require(BTC_USD_CL_FEED.decimals() <= MAX_DECIMALS);\r\n        require(ETH_USD_CL_FEED.decimals() <= MAX_DECIMALS);\r\n\r\n        BTC_USD_PRECISION = int256(10 ** BTC_USD_CL_FEED.decimals());\r\n        ETH_USD_PRECISION = int256(10 ** ETH_USD_CL_FEED.decimals());\r\n    }\r\n\r\n    function description() external view returns (string memory) {\r\n        return \"BTC/ETH Chainlink Adapter\";\r\n    }\r\n\r\n    function _min(uint256 _a, uint256 _b) private pure returns (uint256) {\r\n        return _a < _b ? _a : _b;\r\n    }\r\n\r\n    function _convertAnswer(int256 ethUsdPrice, int256 btcUsdPrice) private view returns (int256) {\r\n        return\r\n            (ethUsdPrice * BTC_USD_PRECISION * ADAPTER_PRECISION) /\r\n            (ETH_USD_PRECISION * btcUsdPrice);\r\n    }\r\n\r\n    function latestRound() external view returns (uint80) {\r\n        return CURRENT_ROUND;\r\n    }\r\n\r\n    function _getRoundData(\r\n        AggregatorV3Interface _feed,\r\n        uint80 _roundId\r\n    ) private view returns (int256 answer, uint256 updatedAt) {\r\n        uint80 latestRoundId = _feed.latestRound();\r\n        uint80 feedRoundId;\r\n        (feedRoundId, answer, , updatedAt, ) = _feed.getRoundData(\r\n            _roundId == CURRENT_ROUND ? latestRoundId : latestRoundId - 1\r\n        );\r\n        require(feedRoundId > 0);\r\n        require(answer > 0);\r\n    }\r\n\r\n    function _latestRoundData(\r\n        AggregatorV3Interface _feed\r\n    ) private view returns (int256 answer, uint256 updatedAt) {\r\n        uint80 feedRoundId;\r\n        (feedRoundId, answer, , updatedAt, ) = _feed.latestRoundData();\r\n        require(feedRoundId > 0);\r\n        require(answer > 0);\r\n    }\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        require(_roundId == CURRENT_ROUND || _roundId == PREVIOUS_ROUND);\r\n\r\n        (int256 btcUsdPrice, uint256 btcUsdUpdatedAt) = _getRoundData(BTC_USD_CL_FEED, _roundId);\r\n        (int256 ethUsdPrice, uint256 ethUsdUpdatedAt) = _getRoundData(ETH_USD_CL_FEED, _roundId);\r\n\r\n        roundId = _roundId;\r\n        updatedAt = _min(btcUsdUpdatedAt, ethUsdUpdatedAt);\r\n        answer = _convertAnswer(ethUsdPrice, btcUsdPrice);\r\n    }\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        )\r\n    {\r\n        (int256 btcUsdPrice, uint256 btcUsdUpdatedAt) = _latestRoundData(BTC_USD_CL_FEED);\r\n        (int256 ethUsdPrice, uint256 ethUsdUpdatedAt) = _latestRoundData(ETH_USD_CL_FEED);\r\n\r\n        roundId = CURRENT_ROUND;\r\n        updatedAt = _min(btcUsdUpdatedAt, ethUsdUpdatedAt);\r\n        answer = _convertAnswer(ethUsdPrice, btcUsdPrice);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_btcUsdClFeed\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_ethUsdClFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BTC_USD_CL_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURRENT_ROUND\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_USD_CL_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREVIOUS_ROUND\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkAdapter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://59befe1193df99daf33367c40cb06954b9590f996dfcbc845956f08771e7b8ae"}