{"SourceCode": "{\"Administrable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract Administrable is Pausable, Ownable {\\r\\n    error AdministrableCallerMustBeAdmin();\\r\\n    error AdministrableAlreadyAnAdmin();\\r\\n    error AdministrableNotAnAdmin();\\r\\n\\r\\n    mapping(address =\\u003e bool) private _admins;\\r\\n\\r\\n    constructor(address[] memory _initialAdmins) {\\r\\n        for (uint256 i = 0; i \\u003c _initialAdmins.length; i++) {\\r\\n            _admins[_initialAdmins[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addAdminRights(address _newAdmin) external onlyOwner {\\r\\n        if (_isAdmin(_newAdmin)) revert AdministrableAlreadyAnAdmin();\\r\\n        _admins[_newAdmin] = true;\\r\\n    }\\r\\n\\r\\n    function revokeAdminRights(address _admin) external onlyOwner {\\r\\n        if (!_isAdmin(_admin)) revert AdministrableNotAnAdmin();\\r\\n        delete _admins[_admin];\\r\\n    }\\r\\n\\r\\n    function pause() public onlyAdmin {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() public onlyAdmin {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function _isAdmin(address _user) internal view returns (bool){\\r\\n        return _admins[_user];\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin(){\\r\\n        if (!_admins[_msgSender()]) revert AdministrableCallerMustBeAdmin();\\r\\n        _;\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"RewardsDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\n// import necessary OpenZeppelin contracts\\r\\nimport \\\"./Administrable.sol\\\";\\r\\n\\r\\n// Create a contract that interacts the reward\\r\\ncontract RewardsDistribution is Administrable {\\r\\n    // Current root of the Merkle Tree and its version\\r\\n    bytes32 public merkleRoot;\\r\\n    uint256 public rootVersion;\\r\\n    uint256 public merkleRootUpdateTimestamp;\\r\\n    uint256 public transferAndTerminationTimestamp = type(uint256).max;\\r\\n\\r\\n    // Mappings\\r\\n    mapping(address =\\u003e uint256) public lastClaimedVersion;\\r\\n\\r\\n    // Events\\r\\n    event RewardsClaimed(address claimer, uint256 amount);\\r\\n    event FundsReceived(address sender, uint256 amount);\\r\\n    event MerkleRootUpdated();\\r\\n    event TransferAndTerminateNotified(uint256 transferTimestamp);\\r\\n    event TransferredAndTerminated();\\r\\n\\r\\n    constructor(address[] memory _initialAdmins) Administrable(_initialAdmins) {}\\r\\n\\r\\n    function updateMerkleRootAndUnpause(bytes32 _newRoot, bool mustUnpause) external onlyAdmin {\\r\\n        require(block.timestamp \\u003e= merkleRootUpdateTimestamp, \\\"RewardsDistribution: 22-hour period not yet passed since last update\\\");\\r\\n\\r\\n        merkleRoot = _newRoot;\\r\\n        rootVersion += 1;\\r\\n        merkleRootUpdateTimestamp = block.timestamp + 22 hours;\\r\\n        if (mustUnpause \\u0026\\u0026 paused()) {\\r\\n            unpause();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function verifyProof(address _user, uint256 _fullRewardsAmount, bytes32[] calldata _proof) public view returns (bool){\\r\\n        bytes32 hash = keccak256(abi.encodePacked(_user, _fullRewardsAmount));\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _proof.length; i++) {\\r\\n            hash = _computeMerkleProofNodes(hash, _proof[i]);\\r\\n        }\\r\\n\\r\\n        return hash == merkleRoot;\\r\\n    }\\r\\n\\r\\n    function claimRewards(uint256 _fullRewardsAmount, bytes32[] calldata _proof) external whenNotPaused {\\r\\n        require(lastClaimedVersion[msg.sender] \\u003c rootVersion, \\\"RewardsDistribution: Reward already claimed\\\");\\r\\n        require(address(this).balance \\u003e= _fullRewardsAmount, \\\"RewardsDistribution: Not enough funds in contract\\\");\\r\\n        require(verifyProof(msg.sender, _fullRewardsAmount, _proof), \\\"RewardsDistribution: Invalid proof\\\");\\r\\n\\r\\n        lastClaimedVersion[msg.sender] = rootVersion;\\r\\n        emit RewardsClaimed(msg.sender, _fullRewardsAmount);\\r\\n\\r\\n        (bool success,) = payable(msg.sender).call{value: _fullRewardsAmount}(\\\"\\\");\\r\\n        require(success, \\\"RewardsDistribution: Failed to send reward\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        emit FundsReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function notifyTransferAndTermination() public onlyAdmin {\\r\\n        transferAndTerminationTimestamp = block.timestamp + 30 days;\\r\\n        emit TransferAndTerminateNotified(transferAndTerminationTimestamp);\\r\\n    }\\r\\n\\r\\n    function cancelTransferAndTerminationNotice() public onlyAdmin {\\r\\n        transferAndTerminationTimestamp = type(uint256).max;\\r\\n        emit TransferAndTerminateNotified(transferAndTerminationTimestamp);\\r\\n    }\\r\\n\\r\\n    function transferFundsAndTerminate(address _to) external onlyAdmin {\\r\\n        require(block.timestamp \\u003e= transferAndTerminationTimestamp, \\\"RewardsDistribution: 30 days notice period not yet passed\\\");\\r\\n\\r\\n        transferAndTerminationTimestamp = type(uint256).max;\\r\\n        emit TransferredAndTerminated();\\r\\n        if (!paused()) {\\r\\n            pause();\\r\\n        }\\r\\n\\r\\n        (bool sent,) = payable(_to).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(sent, \\\"RewardsDistribution: Funds transfer after burning failed\\\"); // Ensure the funds transfer was successful.\\r\\n    }\\r\\n\\r\\n    function _computeMerkleProofNodes(bytes32 a, bytes32 b) internal pure returns (bytes32){\\r\\n        return keccak256(a \\u003c b ? abi.encodePacked(a, b) : abi.encodePacked(b, a));\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_initialAdmins\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdministrableAlreadyAnAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdministrableCallerMustBeAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdministrableNotAnAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTimestamp\",\"type\":\"uint256\"}],\"name\":\"TransferAndTerminateNotified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferredAndTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"addAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferAndTerminationNotice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fullRewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyTransferAndTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"revokeAdminRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAndTerminationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferFundsAndTerminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"mustUnpause\",\"type\":\"bool\"}],\"name\":\"updateMerkleRootAndUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fullRewardsAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RewardsDistribution", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000085e0fdb1260f718fc232d6ad2f7ee2694a1b8f32", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f96d93b42ab53e41f97bedc2393ea5662c18a43f297453e28bffa9bdd5ad3877"}