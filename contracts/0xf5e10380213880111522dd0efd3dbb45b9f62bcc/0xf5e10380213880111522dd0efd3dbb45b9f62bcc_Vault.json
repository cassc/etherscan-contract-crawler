{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IVault.sol\\\";\\nimport \\\"IKeyManager.sol\\\";\\nimport \\\"ICFReceiver.sol\\\";\\nimport \\\"Shared.sol\\\";\\nimport \\\"Deposit.sol\\\";\\nimport \\\"AggKeyNonceConsumer.sol\\\";\\nimport \\\"GovernanceCommunityGuarded.sol\\\";\\n\\n/**\\n * @title    Vault contract\\n * @notice   The vault for holding and transferring native or ERC20 tokens and deploying contracts for\\n *           fetching individual deposits. It also allows users to do cross-chain swaps and(or) calls by\\n *           making a function call directly to this contract.\\n */\\ncontract Vault is IVault, AggKeyNonceConsumer, GovernanceCommunityGuarded {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant _AGG_KEY_EMERGENCY_TIMEOUT = 3 days;\\n    uint256 private constant _GAS_TO_FORWARD = 8_000;\\n    uint256 private constant _FINALIZE_GAS_BUFFER = 30_000;\\n\\n    constructor(IKeyManager keyManager) AggKeyNonceConsumer(keyManager) {}\\n\\n    /// @dev   Get the governor address from the KeyManager. This is called by the onlyGovernor\\n    ///        modifier in the GovernanceCommunityGuarded. This logic can't be moved to the\\n    ///        GovernanceCommunityGuarded since it requires a reference to the KeyManager.\\n    function _getGovernor() internal view override returns (address) {\\n        return getKeyManager().getGovernanceKey();\\n    }\\n\\n    /// @dev   Get the community key from the KeyManager. This is called by the isCommunityKey\\n    ///        modifier in the GovernanceCommunityGuarded. This logic can't be moved to the\\n    ///        GovernanceCommunityGuarded since it requires a reference to the KeyManager.\\n    function _getCommunityKey() internal view override returns (address) {\\n        return getKeyManager().getCommunityKey();\\n    }\\n\\n    /// @dev   Ensure that a new keyManager has the getGovernanceKey(), getCommunityKey()\\n    ///        and getLastValidateTime() are implemented. These are functions required for\\n    ///        this contract to at least be able to use the emergency mechanism.\\n    function _checkUpdateKeyManager(IKeyManager keyManager, bool omitChecks) internal view override {\\n        address newGovKey = keyManager.getGovernanceKey();\\n        address newCommKey = keyManager.getCommunityKey();\\n        uint256 lastValidateTime = keyManager.getLastValidateTime();\\n\\n        if (!omitChecks) {\\n            // Ensure that the keys are the same\\n            require(newGovKey == _getGovernor() && newCommKey == _getCommunityKey());\\n\\n            Key memory newAggKey = keyManager.getAggregateKey();\\n            Key memory currentAggKey = getKeyManager().getAggregateKey();\\n\\n            require(\\n                newAggKey.pubKeyX == currentAggKey.pubKeyX && newAggKey.pubKeyYParity == currentAggKey.pubKeyYParity\\n            );\\n\\n            // Ensure that the last validate time is not in the future\\n            require(lastValidateTime <= block.timestamp);\\n        } else {\\n            // Check that the addresses have been initialized\\n            require(newGovKey != address(0) && newCommKey != address(0));\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  Transfer and Fetch                      //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Can do a combination of all fcns in this contract. It first fetches all\\n     *          deposits , then it performs all transfers specified with the rest\\n     *          of the inputs, the same as transferBatch (where all inputs are again required\\n     *          to be of equal length - however the lengths of the fetch inputs do not have to\\n     *          be equal to lengths of the transfer inputs). Fetches/transfers of native tokens are\\n     *          indicated with 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE as the token address.\\n     * @dev     FetchAndDeploy is executed first to handle the edge case , which probably shouldn't\\n     *          happen anyway, where a deploy and a fetch for the same address are in the same batch.\\n     *          Transfers are executed last to ensure that all fetching has been completed first.\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param deployFetchParamsArray    The array of deploy and fetch parameters\\n     * @param fetchParamsArray    The array of fetch parameters\\n     * @param transferParamsArray The array of transfer parameters\\n     */\\n    function allBatch(\\n        SigData calldata sigData,\\n        DeployFetchParams[] calldata deployFetchParamsArray,\\n        FetchParams[] calldata fetchParamsArray,\\n        TransferParams[] calldata transferParamsArray\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        consumesKeyNonce(\\n            sigData,\\n            keccak256(abi.encode(this.allBatch.selector, deployFetchParamsArray, fetchParamsArray, transferParamsArray))\\n        )\\n    {\\n        // Fetch by deploying new deposits\\n        _deployAndFetchBatch(deployFetchParamsArray);\\n\\n        // Fetch from already deployed deposits\\n        _fetchBatch(fetchParamsArray);\\n\\n        // Send all transfers\\n        _transferBatch(transferParamsArray);\\n    }\\n\\n    /**\\n     * @notice  Same functionality as allBatch but removing the contract deployments\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param fetchParamsArray    The array of fetch parameters\\n     * @param transferParamsArray The array of transfer parameters\\n     */\\n    function allBatchV2(\\n        SigData calldata sigData,\\n        FetchParams[] calldata fetchParamsArray,\\n        TransferParams[] calldata transferParamsArray\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        consumesKeyNonce(\\n            sigData,\\n            keccak256(abi.encode(this.allBatchV2.selector, fetchParamsArray, transferParamsArray))\\n        )\\n    {\\n        // Fetch from already deployed deposits\\n        _fetchBatch(fetchParamsArray);\\n\\n        // Send all transfers\\n        _transferBatch(transferParamsArray);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Transfers                       //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Transfers native tokens or a ERC20 token from this vault to a recipient\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param transferParams       The transfer parameters\\n     */\\n    function transfer(\\n        SigData calldata sigData,\\n        TransferParams calldata transferParams\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        nzAddr(transferParams.token)\\n        nzAddr(transferParams.recipient)\\n        nzUint(transferParams.amount)\\n        consumesKeyNonce(sigData, keccak256(abi.encode(this.transfer.selector, transferParams)))\\n    {\\n        _transfer(transferParams.token, transferParams.recipient, transferParams.amount);\\n    }\\n\\n    /**\\n     * @notice  Fallback transfer tokens from this vault to a recipient with all the gas.\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param transferParams  The transfer parameters\\n\\n     */\\n    function transferFallback(\\n        SigData calldata sigData,\\n        TransferParams calldata transferParams\\n    )\\n        external\\n        onlyNotSuspended\\n        nzAddr(transferParams.token)\\n        nzAddr(transferParams.recipient)\\n        nzUint(transferParams.amount)\\n        consumesKeyNonce(sigData, keccak256(abi.encode(this.transferFallback.selector, transferParams)))\\n    {\\n        if (transferParams.token == _NATIVE_ADDR) {\\n            (bool success, ) = transferParams.recipient.call{value: transferParams.amount}(\\\"\\\");\\n            require(success, \\\"Vault: transfer fallback failed\\\");\\n        } else {\\n            IERC20(transferParams.token).safeTransfer(transferParams.recipient, transferParams.amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice  Transfers native tokens or ERC20 tokens from this vault to recipients.\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param transferParamsArray The array of transfer parameters.\\n     */\\n    function transferBatch(\\n        SigData calldata sigData,\\n        TransferParams[] calldata transferParamsArray\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        consumesKeyNonce(sigData, keccak256(abi.encode(this.transferBatch.selector, transferParamsArray)))\\n    {\\n        _transferBatch(transferParamsArray);\\n    }\\n\\n    /**\\n     * @notice  Transfers native tokens or ERC20 tokens from this vault to recipients.\\n     * @param transferParamsArray The array of transfer parameters.\\n     */\\n    function _transferBatch(TransferParams[] calldata transferParamsArray) private {\\n        uint256 length = transferParamsArray.length;\\n        for (uint256 i = 0; i < length; ) {\\n            _transfer(transferParamsArray[i].token, transferParamsArray[i].recipient, transferParamsArray[i].amount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice  Transfers ETH or a token from this vault to a recipient\\n     * @dev     When transfering native tokens, using call function limiting the amount of gas so\\n     *          the receivers can't consume all the gas. Setting that amount of gas to more than\\n     *          2300 to future-proof the contract in case of opcode gas costs changing.\\n     * @dev     When transferring ERC20 tokens, if it fails ensure the transfer fails gracefully\\n     *          to not revert an entire batch. e.g. usdc blacklisted recipient. Following safeTransfer\\n     *          approach to support tokens that don't return a bool.\\n     * @param token The address of the token to be transferred\\n     * @param recipient The address of the recipient of the transfer\\n     * @param amount    The amount to transfer, in wei (uint)\\n     */\\n    function _transfer(address token, address payable recipient, uint256 amount) private {\\n        if (address(token) == _NATIVE_ADDR) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = recipient.call{gas: _GAS_TO_FORWARD, value: amount}(\\\"\\\");\\n            if (!success) {\\n                emit TransferNativeFailed(recipient, amount);\\n            }\\n        } else {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory returndata) = token.call(\\n                abi.encodeWithSelector(IERC20(token).transfer.selector, recipient, amount)\\n            );\\n\\n            // No need to check token.code.length since it comes from a gated call\\n            bool transferred = success && (returndata.length == uint256(0) || abi.decode(returndata, (bool)));\\n            if (!transferred) emit TransferTokenFailed(recipient, amount, token, returndata);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                        Fetch Deposits                    //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Retrieves any token from multiple address, deterministically generated using\\n     *          create2, by creating a contract for that address, sending it to this vault.\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param deployFetchParamsArray    The array of deploy and fetch parameters\\n     */\\n    function deployAndFetchBatch(\\n        SigData calldata sigData,\\n        DeployFetchParams[] calldata deployFetchParamsArray\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        consumesKeyNonce(sigData, keccak256(abi.encode(this.deployAndFetchBatch.selector, deployFetchParamsArray)))\\n    {\\n        _deployAndFetchBatch(deployFetchParamsArray);\\n    }\\n\\n    function _deployAndFetchBatch(DeployFetchParams[] calldata deployFetchParamsArray) private {\\n        // Deploy deposit contracts\\n        uint256 length = deployFetchParamsArray.length;\\n        for (uint256 i = 0; i < length; ) {\\n            new Deposit{salt: deployFetchParamsArray[i].swapID}(deployFetchParamsArray[i].token);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice  Retrieves any token addresses where a Deposit contract is already deployed.\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param fetchParamsArray    The array of fetch parameters\\n     */\\n    function fetchBatch(\\n        SigData calldata sigData,\\n        FetchParams[] calldata fetchParamsArray\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        consumesKeyNonce(sigData, keccak256(abi.encode(this.fetchBatch.selector, fetchParamsArray)))\\n    {\\n        _fetchBatch(fetchParamsArray);\\n    }\\n\\n    /**\\n     * @notice  Retrieves any token from multiple addresses where a Deposit contract is already deployed.\\n     *          It emits an event if the fetch fails.\\n     * @param fetchParamsArray    The array of fetch parameters\\n     */\\n    function _fetchBatch(FetchParams[] calldata fetchParamsArray) private {\\n        uint256 length = fetchParamsArray.length;\\n        for (uint256 i = 0; i < length; ) {\\n            Deposit(fetchParamsArray[i].fetchContract).fetch(fetchParamsArray[i].token);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //         Initiate cross-chain swaps (source chain)        //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Swaps native token for a token in another chain. The egress token will be transferred to the specified\\n     *          destination address on the destination chain.\\n     * @dev     Checking the validity of inputs shall be done as part of the event witnessing. Only the amount is checked\\n     *          to explicity indicate that an amount is required.  It isn't preventing spamming.\\n     * @param dstChain      The destination chain according to the Chainflip Protocol's nomenclature.\\n     * @param dstAddress    Bytes containing the destination address on the destination chain.\\n     * @param dstToken      Destination token to be swapped to.\\n     * @param cfParameters  Additional parameters to be passed to the Chainflip protocol.\\n     */\\n    function xSwapNative(\\n        uint32 dstChain,\\n        bytes memory dstAddress,\\n        uint32 dstToken,\\n        bytes calldata cfParameters\\n    ) external payable override onlyNotSuspended nzUint(msg.value) {\\n        emit SwapNative(dstChain, dstAddress, dstToken, msg.value, msg.sender, cfParameters);\\n    }\\n\\n    /**\\n     * @notice  Swaps ERC20 token for a token in another chain. The desired token will be transferred to the specified\\n     *          destination address on the destination chain. The provided ERC20 token must be supported by the Chainflip Protocol.\\n     * @dev     Checking the validity of inputs shall be done as part of the event witnessing. Only the amount is checked\\n     *          to explicity indicate that an amount is required.\\n     * @param dstChain      The destination chain according to the Chainflip Protocol's nomenclature.\\n     * @param dstAddress    Bytes containing the destination address on the destination chain.\\n     * @param dstToken      Uint containing the specifics of the swap to be performed according to Chainflip's nomenclature.\\n     * @param srcToken      Address of the source token to swap.\\n     * @param amount        Amount of tokens to swap.\\n     * @param cfParameters  Additional parameters to be passed to the Chainflip protocol.\\n     */\\n    function xSwapToken(\\n        uint32 dstChain,\\n        bytes memory dstAddress,\\n        uint32 dstToken,\\n        IERC20 srcToken,\\n        uint256 amount,\\n        bytes calldata cfParameters\\n    ) external override onlyNotSuspended nzUint(amount) {\\n        srcToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit SwapToken(dstChain, dstAddress, dstToken, address(srcToken), amount, msg.sender, cfParameters);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //     Initiate cross-chain call and swap (source chain)    //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Performs a cross-chain call to the destination address on the destination chain. Native tokens must be paid\\n     *          to this contract. The swap intent determines if the provided tokens should be swapped to a different token\\n     *          and transferred as part of the cross-chain call. Otherwise, all tokens are used as a payment for gas on the destination chain.\\n     *          The message parameter is transmitted to the destination chain as part of the cross-chain call.\\n     * @dev     Checking the validity of inputs shall be done as part of the event witnessing. Only the amount is checked\\n     *          to explicity inidcate that an amount is required. It isn't preventing spamming.\\n     * @param dstChain      The destination chain according to the Chainflip Protocol's nomenclature.\\n     * @param dstAddress    Bytes containing the destination address on the destination chain.\\n     * @param dstToken      Uint containing the specifics of the swap to be performed, if any, as part of the xCall. The string\\n     *                      must follow Chainflip's nomenclature. It can signal that no swap needs to take place\\n     *                      and the source token will be used for gas in a swapless xCall.\\n     * @param message       General purpose message to be sent to the egress chain. Notice that the Chainflip protocol has a limit size\\n     *                      for the message. Ensure that the message length is smaller that the limit before starting a swap.\\n     * @param gasAmount     The amount to be used for gas in the egress chain.\\n     * @param cfParameters  Additional parameters to be passed to the Chainflip protocol.\\n     */\\n    function xCallNative(\\n        uint32 dstChain,\\n        bytes calldata dstAddress,\\n        uint32 dstToken,\\n        bytes calldata message,\\n        uint256 gasAmount,\\n        bytes calldata cfParameters\\n    ) external payable override onlyNotSuspended nzUint(msg.value) {\\n        emit XCallNative(dstChain, dstAddress, dstToken, msg.value, msg.sender, message, gasAmount, cfParameters);\\n    }\\n\\n    /**\\n     * @notice  Performs a cross-chain call to the destination chain and destination address. An ERC20 token amount\\n     *          needs to be approved to this contract. The ERC20 token must be supported by the Chainflip Protocol.\\n     *          The swap intent determines whether the provided tokens should be swapped to a different token\\n     *          by the Chainflip Protocol. If so, the swapped tokens will be transferred to the destination chain as part\\n     *          of the cross-chain call. Otherwise, the tokens are used as a payment for gas on the destination chain.\\n     *          The message parameter is transmitted to the destination chain as part of the cross-chain call.\\n     * @dev     Checking the validity of inputs shall be done as part of the event witnessing. Only the amount is checked\\n     *          to explicity indicate that an amount is required.\\n     * @param dstChain      The destination chain according to the Chainflip Protocol's nomenclature.\\n     * @param dstAddress    Bytes containing the destination address on the destination chain.\\n     * @param dstToken      Uint containing the specifics of the swap to be performed, if any, as part of the xCall. The string\\n     *                      must follow Chainflip's nomenclature. It can signal that no swap needs to take place\\n     *                      and the source token will be used for gas in a swapless xCall.\\n     * @param message       General purpose message to be sent to the egress chain. Notice that the Chainflip protocol has a limit size\\n     *                      for the message. Ensure that the message length is smaller that the limit before starting a swap.\\n     * @param gasAmount     The amount to be used for gas in the egress chain.\\n     * @param srcToken      Address of the source token.\\n     * @param amount        Amount of tokens to swap.\\n     * @param cfParameters  Additional parameters to be passed to the Chainflip protocol.\\n     */\\n    function xCallToken(\\n        uint32 dstChain,\\n        bytes memory dstAddress,\\n        uint32 dstToken,\\n        bytes calldata message,\\n        uint256 gasAmount,\\n        IERC20 srcToken,\\n        uint256 amount,\\n        bytes calldata cfParameters\\n    ) external override onlyNotSuspended nzUint(amount) {\\n        srcToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit XCallToken(\\n            dstChain,\\n            dstAddress,\\n            dstToken,\\n            address(srcToken),\\n            amount,\\n            msg.sender,\\n            message,\\n            gasAmount,\\n            cfParameters\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                     Gas topups                           //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Add gas (topup) to an existing cross-chain call with the unique identifier swapID.\\n     *          Native tokens must be paid to this contract as part of the call.\\n     * @param swapID    The unique identifier for this swap (bytes32)\\n     */\\n    function addGasNative(bytes32 swapID) external payable override onlyNotSuspended nzUint(msg.value) {\\n        emit AddGasNative(swapID, msg.value);\\n    }\\n\\n    /**\\n     * @notice  Add gas (topup) to an existing cross-chain call with the unique identifier swapID.\\n     *          A Chainflip supported token must be paid to this contract as part of the call.\\n     * @param swapID    The unique identifier for this swap (bytes32)\\n     * @param token     Address of the token to provide.\\n     * @param amount    Amount of tokens to provide.\\n     */\\n    function addGasToken(\\n        bytes32 swapID,\\n        uint256 amount,\\n        IERC20 token\\n    ) external override onlyNotSuspended nzUint(amount) {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        emit AddGasToken(swapID, amount, address(token));\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //      Execute cross-chain call and swap (dest. chain)     //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Transfers native tokens or an ERC20 token from this vault to a recipient and makes a function\\n     *          call completing a cross-chain swap and call. The ICFReceiver interface is expected on\\n     *          the receiver's address. A message is passed to the receiver along with other\\n     *          parameters specifying the origin of the swap.\\n     * @dev     Not checking nzUint(amount) to prevent reversions in edge cases (e.g. all input amount used for gas).\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param transferParams  The transfer parameters\\n     * @param srcChain        The source chain where the call originated from.\\n     * @param srcAddress      The address where the transfer originated within the ingress chain.\\n     * @param message         The message to be passed to the recipient.\\n     */\\n    function executexSwapAndCall(\\n        SigData calldata sigData,\\n        TransferParams calldata transferParams,\\n        uint32 srcChain,\\n        bytes calldata srcAddress,\\n        bytes calldata message\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        nzAddr(transferParams.token)\\n        nzAddr(transferParams.recipient)\\n        consumesKeyNonce(\\n            sigData,\\n            keccak256(abi.encode(this.executexSwapAndCall.selector, transferParams, srcChain, srcAddress, message))\\n        )\\n    {\\n        // Logic in another internal function to avoid the stackTooDeep error\\n        _executexSwapAndCall(transferParams, srcChain, srcAddress, message);\\n    }\\n\\n    /**\\n     * @notice Logic for transferring the tokens and calling the recipient. It's on the receiver to\\n     *         make sure the call doesn't revert, otherwise the tokens won't be transferred.\\n     *         The _transfer function is not used because we want to be able to embed the native token\\n     *         into the cfReceive call to avoid doing two external calls.\\n     *         In case of revertion the tokens will remain in the Vault. Therefore, the destination\\n     *         contract must ensure it doesn't revert e.g. using try-catch mechanisms.\\n     * @dev    In the case of the ERC20 transfer reverting, not handling the error to allow for tx replay.\\n     *         Also, to ensure the cfReceive call is made only if the transfer is successful.\\n     */\\n    function _executexSwapAndCall(\\n        TransferParams calldata transferParams,\\n        uint32 srcChain,\\n        bytes calldata srcAddress,\\n        bytes calldata message\\n    ) private {\\n        uint256 nativeAmount;\\n\\n        if (transferParams.amount > 0) {\\n            if (transferParams.token == _NATIVE_ADDR) {\\n                nativeAmount = transferParams.amount;\\n            } else {\\n                IERC20(transferParams.token).safeTransfer(transferParams.recipient, transferParams.amount);\\n            }\\n        }\\n\\n        ICFReceiver(transferParams.recipient).cfReceive{value: nativeAmount}(\\n            srcChain,\\n            srcAddress,\\n            message,\\n            transferParams.token,\\n            transferParams.amount\\n        );\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //          Execute cross-chain call (dest. chain)          //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Executes a cross-chain function call. The ICFReceiver interface is expected on\\n     *          the receiver's address. A message is passed to the receiver along with other\\n     *          parameters specifying the origin of the swap. This is used for cross-chain messaging\\n     *          without any swap taking place on the Chainflip Protocol.\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param srcChain       The source chain where the call originated from.\\n     * @param srcAddress     The address where the transfer originated from in the ingressParams.\\n     * @param message        The message to be passed to the recipient.\\n     */\\n    function executexCall(\\n        SigData calldata sigData,\\n        address recipient,\\n        uint32 srcChain,\\n        bytes calldata srcAddress,\\n        bytes calldata message\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        nzAddr(recipient)\\n        consumesKeyNonce(\\n            sigData,\\n            keccak256(abi.encode(this.executexCall.selector, recipient, srcChain, srcAddress, message))\\n        )\\n    {\\n        ICFReceiver(recipient).cfReceivexCall(srcChain, srcAddress, message);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                 Auxiliary chain actions                  //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Transfer funds and pass calldata to be executed on a Multicall contract.\\n     * @dev     For safety purposes it's preferred to execute calldata externally with\\n     *          a limited amount of funds instead of executing arbitrary calldata here.\\n     * @dev     Calls are not reverted upon Multicall.run() failure so the nonce gets consumed. The \\n     *          gasMulticall parameters is needed to prevent an insufficient gas griefing attack. \\n     *          The _GAS_BUFFER is a conservative estimation of the gas required to finalize the call.\\n     * @param sigData         Struct containing the signature data over the message\\n     *                        to verify, signed by the aggregate key.\\n     * @param transferParams  The transfer parameters inluding the token and amount to be transferred\\n     *                        and the multicall contract address.\\n     * @param calls           Array of actions to be executed.\\n     * @param gasMulticall    Gas that must be forwarded to the multicall.\\n\\n     */\\n    function executeActions(\\n        SigData calldata sigData,\\n        TransferParams calldata transferParams,\\n        IMulticall.Call[] calldata calls,\\n        uint256 gasMulticall\\n    )\\n        external\\n        override\\n        onlyNotSuspended\\n        consumesKeyNonce(\\n            sigData,\\n            keccak256(abi.encode(this.executeActions.selector, transferParams, calls, gasMulticall))\\n        )\\n    {\\n        // Fund and run multicall\\n        uint256 valueToSend;\\n\\n        if (transferParams.amount > 0) {\\n            if (transferParams.token == _NATIVE_ADDR) {\\n                valueToSend = transferParams.amount;\\n            } else {\\n                IERC20(transferParams.token).approve(transferParams.recipient, transferParams.amount);\\n            }\\n        }\\n\\n        // Ensure that the amount of gas supplied to the call to the Multicall contract is at least the gas\\n        // limit specified. We can do this by enforcing that we still have gasMulticall + gas buffer available.\\n        // The gas buffer is to ensure there is enough gas to finalize the call, including a safety margin.\\n        // The 63/64 rule specified in EIP-150 needs to be taken into account.\\n        require(gasleft() >= ((gasMulticall + _FINALIZE_GAS_BUFFER) * 64) / 63, \\\"Vault: insufficient gas\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory reason) = transferParams.recipient.call{\\n            gas: gasleft() - _FINALIZE_GAS_BUFFER,\\n            value: valueToSend\\n        }(abi.encodeWithSelector(IMulticall.run.selector, calls, transferParams.token, transferParams.amount));\\n\\n        if (!success) {\\n            if (transferParams.amount > 0 && transferParams.token != _NATIVE_ADDR) {\\n                IERC20(transferParams.token).approve(transferParams.recipient, 0);\\n            }\\n            emit ExecuteActionsFailed(transferParams.recipient, transferParams.amount, transferParams.token, reason);\\n        } else {\\n            require(transferParams.recipient.code.length > 0);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                        Governance                        //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Withdraw all funds to governance address in case of emergency. This withdrawal needs\\n     *         to be approved by the Community and it can only be executed if no nonce from the\\n     *         current AggKey had been consumed in _AGG_KEY_TIMEOUT time. It is a last resort and\\n     *         can be used to rectify an emergency.\\n     * @param tokens    The addresses of the tokens to be transferred\\n     */\\n    function govWithdraw(\\n        address[] calldata tokens\\n    ) external override onlyGovernor onlyCommunityGuardDisabled onlySuspended timeoutEmergency {\\n        // Could use msg.sender or getGovernor() but hardcoding the get call just for extra safety\\n        address payable recipient = payable(getKeyManager().getGovernanceKey());\\n\\n        // Transfer all native tokens and ERC20 Tokens\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == _NATIVE_ADDR) {\\n                _transfer(_NATIVE_ADDR, recipient, address(this).balance);\\n            } else {\\n                _transfer(tokens[i], recipient, IERC20(tokens[i]).balanceOf(address(this)));\\n            }\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Modifiers                       //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev    Check that no nonce has been consumed in the last 3 days - emergency\\n    modifier timeoutEmergency() {\\n        require(\\n            block.timestamp - getKeyManager().getLastValidateTime() >= _AGG_KEY_EMERGENCY_TIMEOUT,\\n            \\\"Vault: not enough time\\\"\\n        );\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Fallbacks                       //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev For receiving native tokens from the Deposit contracts\\n    receive() external payable {\\n        emit FetchedNative(msg.sender, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"draft-IERC20Permit.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IAggKeyNonceConsumer.sol\\\";\\nimport \\\"IGovernanceCommunityGuarded.sol\\\";\\nimport \\\"IMulticall.sol\\\";\\n\\n/**\\n * @title    Vault interface\\n * @notice   The interface for functions Vault implements\\n */\\ninterface IVault is IGovernanceCommunityGuarded, IAggKeyNonceConsumer {\\n    event FetchedNative(address indexed sender, uint256 amount);\\n\\n    event TransferNativeFailed(address payable indexed recipient, uint256 amount);\\n    event TransferTokenFailed(address payable indexed recipient, uint256 amount, address indexed token, bytes reason);\\n\\n    event SwapNative(\\n        uint32 dstChain,\\n        bytes dstAddress,\\n        uint32 dstToken,\\n        uint256 amount,\\n        address indexed sender,\\n        bytes cfParameters\\n    );\\n    event SwapToken(\\n        uint32 dstChain,\\n        bytes dstAddress,\\n        uint32 dstToken,\\n        address srcToken,\\n        uint256 amount,\\n        address indexed sender,\\n        bytes cfParameters\\n    );\\n\\n    /// @dev bytes parameters is not indexed because indexing a dynamic type for it to be filtered\\n    ///      makes it so we won't be able to decode it unless we specifically search for it. If we want\\n    ///      to filter it and decode it then we would need to have both the indexed and the non-indexed\\n    ///      version in the event. That is unnecessary.\\n    event XCallNative(\\n        uint32 dstChain,\\n        bytes dstAddress,\\n        uint32 dstToken,\\n        uint256 amount,\\n        address indexed sender,\\n        bytes message,\\n        uint256 gasAmount,\\n        bytes cfParameters\\n    );\\n    event XCallToken(\\n        uint32 dstChain,\\n        bytes dstAddress,\\n        uint32 dstToken,\\n        address srcToken,\\n        uint256 amount,\\n        address indexed sender,\\n        bytes message,\\n        uint256 gasAmount,\\n        bytes cfParameters\\n    );\\n\\n    event AddGasNative(bytes32 swapID, uint256 amount);\\n    event AddGasToken(bytes32 swapID, uint256 amount, address token);\\n\\n    event ExecuteActionsFailed(\\n        address payable indexed multicallAddress,\\n        uint256 amount,\\n        address indexed token,\\n        bytes reason\\n    );\\n\\n    function allBatch(\\n        SigData calldata sigData,\\n        DeployFetchParams[] calldata deployFetchParamsArray,\\n        FetchParams[] calldata fetchParamsArray,\\n        TransferParams[] calldata transferParamsArray\\n    ) external;\\n\\n    function allBatchV2(\\n        SigData calldata sigData,\\n        FetchParams[] calldata fetchParamsArray,\\n        TransferParams[] calldata transferParamsArray\\n    ) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Transfers                       //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function transfer(SigData calldata sigData, TransferParams calldata transferParams) external;\\n\\n    function transferBatch(SigData calldata sigData, TransferParams[] calldata transferParamsArray) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                        Fetch Deposits                    //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function deployAndFetchBatch(\\n        SigData calldata sigData,\\n        DeployFetchParams[] calldata deployFetchParamsArray\\n    ) external;\\n\\n    function fetchBatch(SigData calldata sigData, FetchParams[] calldata fetchParamsArray) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //         Initiate cross-chain swaps (source chain)        //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function xSwapToken(\\n        uint32 dstChain,\\n        bytes calldata dstAddress,\\n        uint32 dstToken,\\n        IERC20 srcToken,\\n        uint256 amount,\\n        bytes calldata cfParameters\\n    ) external;\\n\\n    function xSwapNative(\\n        uint32 dstChain,\\n        bytes calldata dstAddress,\\n        uint32 dstToken,\\n        bytes calldata cfParameters\\n    ) external payable;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //     Initiate cross-chain call and swap (source chain)    //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function xCallNative(\\n        uint32 dstChain,\\n        bytes calldata dstAddress,\\n        uint32 dstToken,\\n        bytes calldata message,\\n        uint256 gasAmount,\\n        bytes calldata cfParameters\\n    ) external payable;\\n\\n    function xCallToken(\\n        uint32 dstChain,\\n        bytes calldata dstAddress,\\n        uint32 dstToken,\\n        bytes calldata message,\\n        uint256 gasAmount,\\n        IERC20 srcToken,\\n        uint256 amount,\\n        bytes calldata cfParameters\\n    ) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                     Gas topups                           //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function addGasNative(bytes32 swapID) external payable;\\n\\n    function addGasToken(bytes32 swapID, uint256 amount, IERC20 token) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //      Execute cross-chain call and swap (dest. chain)     //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function executexSwapAndCall(\\n        SigData calldata sigData,\\n        TransferParams calldata transferParams,\\n        uint32 srcChain,\\n        bytes calldata srcAddress,\\n        bytes calldata message\\n    ) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //          Execute cross-chain call (dest. chain)          //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n    function executexCall(\\n        SigData calldata sigData,\\n        address recipient,\\n        uint32 srcChain,\\n        bytes calldata srcAddress,\\n        bytes calldata message\\n    ) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                 Auxiliary chain actions                  //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function executeActions(\\n        SigData calldata sigData,\\n        TransferParams calldata transferParams,\\n        IMulticall.Call[] calldata calls,\\n        uint256 gasMulticall\\n    ) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                        Governance                        //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function govWithdraw(address[] calldata tokens) external;\\n}\\n\"\r\n    },\r\n    \"IAggKeyNonceConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\nimport \\\"IKeyManager.sol\\\";\\n\\n/**\\n * @title    AggKeyNonceConsumer interface\\n */\\n\\ninterface IAggKeyNonceConsumer is IShared {\\n    event UpdatedKeyManager(address keyManager);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n    /**\\n     * @notice  Update KeyManager reference. Used if KeyManager contract is updated\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param keyManager New KeyManager's address\\n     * @param omitChecks Allow the omission of the extra checks in a special case\\n     */\\n    function updateKeyManager(SigData calldata sigData, IKeyManager keyManager, bool omitChecks) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Getters                         //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Get the KeyManager address/interface that's used to validate sigs\\n     * @return  The KeyManager (IKeyManager)\\n     */\\n    function getKeyManager() external view returns (IKeyManager);\\n}\\n\"\r\n    },\r\n    \"IShared.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @title    Shared interface\\n * @notice   Holds structs needed by other interfaces\\n */\\ninterface IShared {\\n    /**\\n     * @dev  SchnorrSECP256K1 requires that each key has a public key part (x coordinate),\\n     *       a parity for the y coordinate (0 if the y ordinate of the public key is even, 1\\n     *       if it's odd)\\n     */\\n    struct Key {\\n        uint256 pubKeyX;\\n        uint8 pubKeyYParity;\\n    }\\n\\n    /**\\n     * @dev  Contains a signature and the nonce used to create it. Also the recovered address\\n     *       to check that the signature is valid\\n     */\\n    struct SigData {\\n        uint256 sig;\\n        uint256 nonce;\\n        address kTimesGAddress;\\n    }\\n\\n    /**\\n     * @param token The address of the token to be transferred\\n     * @param recipient The address of the recipient of the transfer\\n     * @param amount    The amount to transfer, in wei (uint)\\n     */\\n    struct TransferParams {\\n        address token;\\n        address payable recipient;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @param swapID    The unique identifier for this swap (bytes32), used for create2\\n     * @param token     The token to be transferred\\n     */\\n    struct DeployFetchParams {\\n        bytes32 swapID;\\n        address token;\\n    }\\n\\n    /**\\n     * @param fetchContract   The address of the deployed Deposit contract\\n     * @param token     The token to be transferred\\n     */\\n    struct FetchParams {\\n        address payable fetchContract;\\n        address token;\\n    }\\n}\\n\"\r\n    },\r\n    \"IKeyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\n\\n/**\\n * @title    KeyManager interface\\n * @notice   The interface for functions KeyManager implements\\n */\\ninterface IKeyManager is IShared {\\n    event AggKeySetByAggKey(Key oldAggKey, Key newAggKey);\\n    event AggKeySetByGovKey(Key oldAggKey, Key newAggKey);\\n    event GovKeySetByAggKey(address oldGovKey, address newGovKey);\\n    event GovKeySetByGovKey(address oldGovKey, address newGovKey);\\n    event CommKeySetByAggKey(address oldCommKey, address newCommKey);\\n    event CommKeySetByCommKey(address oldCommKey, address newCommKey);\\n    event SignatureAccepted(SigData sigData, address signer);\\n    event GovernanceAction(bytes32 message);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function consumeKeyNonce(SigData memory sigData, bytes32 contractMsgHash) external;\\n\\n    function setAggKeyWithAggKey(SigData memory sigData, Key memory newAggKey) external;\\n\\n    function setAggKeyWithGovKey(Key memory newAggKey) external;\\n\\n    function setGovKeyWithAggKey(SigData calldata sigData, address newGovKey) external;\\n\\n    function setGovKeyWithGovKey(address newGovKey) external;\\n\\n    function setCommKeyWithAggKey(SigData calldata sigData, address newCommKey) external;\\n\\n    function setCommKeyWithCommKey(address newCommKey) external;\\n\\n    function govAction(bytes32 message) external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  Non-state-changing functions            //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    function getAggregateKey() external view returns (Key memory);\\n\\n    function getGovernanceKey() external view returns (address);\\n\\n    function getCommunityKey() external view returns (address);\\n\\n    function isNonceUsedByAggKey(uint256 nonce) external view returns (bool);\\n\\n    function getLastValidateTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IGovernanceCommunityGuarded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\n\\n/**\\n * @title    GovernanceCommunityGuarded interface\\n */\\n\\ninterface IGovernanceCommunityGuarded is IShared {\\n    event CommunityGuardDisabled(bool communityGuardDisabled);\\n    event Suspended(bool suspended);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n    /**\\n     * @notice  Enable Community Guard\\n     */\\n\\n    function enableCommunityGuard() external;\\n\\n    /**\\n     * @notice  Disable Community Guard\\n     */\\n    function disableCommunityGuard() external;\\n\\n    /**\\n     * @notice  Can be used to suspend contract execution - only executable by\\n     *          governance and only to be used in case of emergency.\\n     */\\n    function suspend() external;\\n\\n    /**\\n     * @notice      Resume contract execution\\n     */\\n    function resume() external;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Getters                         //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Get the Community Key\\n     * @return  The CommunityKey\\n     */\\n    function getCommunityKey() external view returns (address);\\n\\n    /**\\n     * @notice  Get the Community Guard state\\n     * @return  The Community Guard state\\n     */\\n    function getCommunityGuardDisabled() external view returns (bool);\\n\\n    /**\\n     * @notice  Get suspended state\\n     * @return  The suspended state\\n     */\\n    function getSuspendedState() external view returns (bool);\\n\\n    /**\\n     * @notice  Get governor address\\n     * @return  The governor address\\n     */\\n    function getGovernor() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMulticall {\\n    enum CallType {\\n        Default,\\n        FullTokenBalance,\\n        FullNativeBalance,\\n        CollectTokenBalance\\n    }\\n\\n    struct Call {\\n        CallType callType;\\n        address target;\\n        uint256 value;\\n        bytes callData;\\n        bytes payload;\\n    }\\n\\n    error AlreadyRunning();\\n    error CallFailed(uint256 callPosition, bytes reason);\\n\\n    function run(Call[] calldata calls, address tokenIn, uint256 amountIn) external payable;\\n}\\n\"\r\n    },\r\n    \"ICFReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title    CF Receiver interface\\n * @dev      The ICFReceiver interface is the interface required to receive tokens and\\n *           cross-chain calls from the Chainflip Protocol.\\n */\\ninterface ICFReceiver {\\n    /**\\n     * @notice  Receiver of a cross-chain swap and call made by the Chainflip Protocol.\\n\\n     * @param srcChain      The source chain according to the Chainflip Protocol's nomenclature.\\n     * @param srcAddress    Bytes containing the source address on the source chain.\\n     * @param message       The message sent on the source chain. This is a general purpose message.\\n     * @param token         Address of the token received. _NATIVE_ADDR if it's native tokens.\\n     * @param amount        Amount of tokens received. This will match msg.value for native tokens.\\n     */\\n    function cfReceive(\\n        uint32 srcChain,\\n        bytes calldata srcAddress,\\n        bytes calldata message,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    /**\\n     * @notice  Receiver of a cross-chain call made by the Chainflip Protocol.\\n\\n     * @param srcChain      The source chain according to the Chainflip Protocol's nomenclature.\\n     * @param srcAddress    Bytes containing the source address on the source chain.\\n     * @param message       The message sent on the source chain. This is a general purpose message.\\n     */\\n    function cfReceivexCall(uint32 srcChain, bytes calldata srcAddress, bytes calldata message) external;\\n}\\n\"\r\n    },\r\n    \"Shared.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IShared.sol\\\";\\n\\n/**\\n * @title    Shared contract\\n * @notice   Holds constants and modifiers that are used in multiple contracts\\n * @dev      It would be nice if this could be a library, but modifiers can't be exported :(\\n */\\n\\nabstract contract Shared is IShared {\\n    /// @dev The address used to indicate whether transfer should send native or a token\\n    address internal constant _NATIVE_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant _ZERO_ADDR = address(0);\\n    bytes32 internal constant _NULL = \\\"\\\";\\n    uint256 internal constant _E_18 = 1e18;\\n\\n    /// @dev    Checks that a uint isn't zero/empty\\n    modifier nzUint(uint256 u) {\\n        require(u != 0, \\\"Shared: uint input is empty\\\");\\n        _;\\n    }\\n\\n    /// @dev    Checks that an address isn't zero/empty\\n    modifier nzAddr(address a) {\\n        require(a != _ZERO_ADDR, \\\"Shared: address input is empty\\\");\\n        _;\\n    }\\n\\n    /// @dev    Checks that a bytes32 isn't zero/empty\\n    modifier nzBytes32(bytes32 b) {\\n        require(b != _NULL, \\\"Shared: bytes32 input is empty\\\");\\n        _;\\n    }\\n\\n    /// @dev    Checks that the pubKeyX is populated\\n    modifier nzKey(Key memory key) {\\n        require(key.pubKeyX != 0, \\\"Shared: pubKeyX is empty\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"Deposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20Lite.sol\\\";\\n\\n/**\\n * @title    Deposit contract\\n * @notice   Creates a contract with a known address and withdraws tokens from it.\\n *           After deployment, the Vault will call fetch() to withdraw tokens.\\n * @dev      Any change in this contract, including comments, will affect the final\\n *           bytecode and therefore will affect the create2 derived addresses.\\n *           Do NOT modify unless the consequences of doing so are fully understood.\\n */\\ncontract Deposit {\\n    address payable private immutable vault;\\n\\n    /**\\n     * @notice  Upon deployment it fetches the tokens (native or ERC20) to the Vault.\\n     * @param token  The address of the token to fetch\\n     */\\n    constructor(address token) {\\n        vault = payable(msg.sender);\\n        // Slightly cheaper to use msg.sender instead of Vault.\\n        if (token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n            require(success);\\n        } else {\\n            // IERC20Lite.transfer doesn't have a return bool to avoid reverts on non-standard ERC20s\\n            IERC20Lite(token).transfer(msg.sender, IERC20Lite(token).balanceOf(address(this)));\\n        }\\n    }\\n\\n    /**\\n     * @notice  Allows the Vault to fetch ERC20 tokens from this contract.\\n     * @param token  The address of the token to fetch\\n     */\\n    function fetch(address token) external {\\n        require(msg.sender == vault);\\n        // IERC20Lite.transfer doesn't have a return bool to avoid reverts on non-standard ERC20s\\n        IERC20Lite(token).transfer(msg.sender, IERC20Lite(token).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Receives native tokens, emits an event and sends them to the Vault. Note that this\\n    // requires the sender to forward some more gas than for a simple transfer.\\n    receive() external payable {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = vault.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20Lite.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title    ERC20 Lite Interface\\n * @notice   The interface for functions ERC20Lite implements. This is intended to\\n *           be used only in the Deposit contract.\\n * @dev      Any change in this contract, including comments, will affect the final\\n *           bytecode and therefore will affect the create2 derived addresses.\\n *           Do NOT modify unless the consequences of doing so are fully understood.\\n */\\ninterface IERC20Lite {\\n    /// @dev Removed the return bool to avoid reverts on non-standard ERC20s.\\n    function transfer(address, uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"AggKeyNonceConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IKeyManager.sol\\\";\\nimport \\\"IAggKeyNonceConsumer.sol\\\";\\nimport \\\"Shared.sol\\\";\\n\\n/**\\n * @title    AggKeyNonceConsumer contract\\n * @notice   Manages the reference to the KeyManager contract. The address\\n *           is set in the constructor and can only be updated with a valid\\n *           signature validated by the current KeyManager contract. This shall\\n *           be done if the KeyManager contract is updated.\\n */\\nabstract contract AggKeyNonceConsumer is Shared, IAggKeyNonceConsumer {\\n    /// @dev    The KeyManager used to checks sigs used in functions here\\n    IKeyManager private _keyManager;\\n\\n    constructor(IKeyManager keyManager) nzAddr(address(keyManager)) {\\n        _keyManager = keyManager;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Update KeyManager reference. Used if KeyManager contract is updated\\n     * @param sigData    Struct containing the signature data over the message\\n     *                   to verify, signed by the aggregate key.\\n     * @param keyManager New KeyManager's address\\n     * @param omitChecks Allow the omission of the extra checks in a special case\\n     */\\n    function updateKeyManager(\\n        SigData calldata sigData,\\n        IKeyManager keyManager,\\n        bool omitChecks\\n    )\\n        external\\n        override\\n        nzAddr(address(keyManager))\\n        consumesKeyNonce(sigData, keccak256(abi.encode(this.updateKeyManager.selector, keyManager, omitChecks)))\\n    {\\n        // Check that the new KeyManager is a contract\\n        require(address(keyManager).code.length > 0);\\n\\n        // Allow the child to check compatibility with the new KeyManager\\n        _checkUpdateKeyManager(keyManager, omitChecks);\\n\\n        _keyManager = keyManager;\\n        emit UpdatedKeyManager(address(keyManager));\\n    }\\n\\n    /// @dev   This will be called when upgrading to a new KeyManager. This allows the child's contract\\n    ///        to check its compatibility with the new KeyManager. This is to prevent the contract from\\n    //         getting bricked. There is no good way to enforce the implementation of consumeKeyNonce().\\n    function _checkUpdateKeyManager(IKeyManager keyManager, bool omitChecks) internal view virtual;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Getters                         //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Get the KeyManager address/interface that's used to validate sigs\\n     * @return  The KeyManager (IKeyManager)\\n     */\\n    function getKeyManager() public view override returns (IKeyManager) {\\n        return _keyManager;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                         Modifiers                        //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev    Calls consumeKeyNonce in _keyManager\\n    modifier consumesKeyNonce(SigData calldata sigData, bytes32 contractMsgHash) {\\n        getKeyManager().consumeKeyNonce(sigData, contractMsgHash);\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"GovernanceCommunityGuarded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IGovernanceCommunityGuarded.sol\\\";\\nimport \\\"AggKeyNonceConsumer.sol\\\";\\nimport \\\"Shared.sol\\\";\\n\\n/**\\n * @title    GovernanceCommunityGuarded contract\\n * @notice   Allows the governor to perform certain actions for the procotol's safety in\\n *           case of emergency. The aim is to allow the governor to suspend execution of\\n *           critical functions.\\n *           Also, it allows the CommunityKey to safeguard certain functions so the\\n *           governor can execute them iff the communityKey allows it.\\n */\\nabstract contract GovernanceCommunityGuarded is Shared, IGovernanceCommunityGuarded {\\n    /// @dev    Community Guard Disabled\\n    bool private _communityGuardDisabled;\\n\\n    /// @dev    Whether execution is suspended\\n    bool private _suspended = false;\\n\\n    /**\\n     * @notice  Get the governor's address. The contracts inheriting this (StateChainGateway and Vault)\\n     *          get the governor's address from the KeyManager through the AggKeyNonceConsumer's\\n     *          inheritance. Therefore, the implementation of this function must be left\\n     *          to the children. This is not implemented as a virtual onlyGovernor modifier to force\\n     *          the children to implement this function - virtual modifiers don't enforce that.\\n     * @return  The governor's address\\n     */\\n    function _getGovernor() internal view virtual returns (address);\\n\\n    /**\\n     * @notice  Get the community's address. The contracts inheriting this (StateChainGateway and Vault)\\n     *          get the community's address from the KeyManager through the AggKeyNonceConsumer's\\n     *          inheritance. Therefore, the implementation of this function must be left\\n     *          to the children. This is not implemented as a virtual onlyCommunityKey modifier to force\\n     *          the children to implement this function - virtual modifiers don't enforce that.\\n     * @return  The community's address\\n     */\\n    function _getCommunityKey() internal view virtual returns (address);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                  State-changing functions                //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Enable Community Guard\\n     */\\n    function enableCommunityGuard() external override onlyCommunityKey onlyCommunityGuardDisabled {\\n        _communityGuardDisabled = false;\\n        emit CommunityGuardDisabled(false);\\n    }\\n\\n    /**\\n     * @notice  Disable Community Guard\\n     */\\n    function disableCommunityGuard() external override onlyCommunityKey onlyCommunityGuardEnabled {\\n        _communityGuardDisabled = true;\\n        emit CommunityGuardDisabled(true);\\n    }\\n\\n    /**\\n     * @notice Can be used to suspend contract execution - only executable by\\n     * governance and only to be used in case of emergency.\\n     */\\n    function suspend() external override onlyGovernor onlyNotSuspended {\\n        _suspended = true;\\n        emit Suspended(true);\\n    }\\n\\n    /**\\n     * @notice      Resume contract execution\\n     */\\n    function resume() external override onlyGovernor onlySuspended {\\n        _suspended = false;\\n        emit Suspended(false);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                          Getters                         //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice  Get the Community Key\\n     * @return  The CommunityKey\\n     */\\n    function getCommunityKey() external view override returns (address) {\\n        return _getCommunityKey();\\n    }\\n\\n    /**\\n     * @notice  Get the Community Guard state\\n     * @return  The Community Guard state\\n     */\\n    function getCommunityGuardDisabled() external view override returns (bool) {\\n        return _communityGuardDisabled;\\n    }\\n\\n    /**\\n     * @notice  Get suspended state\\n     * @return  The suspended state\\n     */\\n    function getSuspendedState() external view override returns (bool) {\\n        return _suspended;\\n    }\\n\\n    /**\\n     * @notice  Get governor address\\n     * @return  The governor address\\n     */\\n    function getGovernor() external view override returns (address) {\\n        return _getGovernor();\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                                                          //\\n    //                         Modifiers                        //\\n    //                                                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev    Check that the caller is the Community Key address.\\n    modifier onlyCommunityKey() {\\n        require(msg.sender == _getCommunityKey(), \\\"Governance: not Community Key\\\");\\n        _;\\n    }\\n\\n    /// @dev    Check that community has disabled the community guard.\\n    modifier onlyCommunityGuardDisabled() {\\n        require(_communityGuardDisabled, \\\"Governance: community guard enabled\\\");\\n        _;\\n    }\\n\\n    /// @dev    Check that community has disabled the community guard.\\n    modifier onlyCommunityGuardEnabled() {\\n        require(!_communityGuardDisabled, \\\"Governance: community guard disabled\\\");\\n        _;\\n    }\\n\\n    /// @notice Ensure that the caller is the governor address. Calls the getGovernor\\n    ///         function which is implemented by the children.\\n    modifier onlyGovernor() {\\n        require(msg.sender == _getGovernor(), \\\"Governance: not governor\\\");\\n        _;\\n    }\\n\\n    // @notice Check execution is suspended\\n    modifier onlySuspended() {\\n        require(_suspended, \\\"Governance: not suspended\\\");\\n        _;\\n    }\\n\\n    // @notice Check execution is not suspended\\n    modifier onlyNotSuspended() {\\n        require(!_suspended, \\\"Governance: suspended\\\");\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"libraries\": {\r\n      \"Vault.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IKeyManager\",\"name\":\"keyManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddGasNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddGasToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"communityGuardDisabled\",\"type\":\"bool\"}],\"name\":\"CommunityGuardDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"multicallAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"ExecuteActionsFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FetchedNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"suspended\",\"type\":\"bool\"}],\"name\":\"Suspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"SwapNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"SwapToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferNativeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"TransferTokenFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keyManager\",\"type\":\"address\"}],\"name\":\"UpdatedKeyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"XCallNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"XCallToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"}],\"name\":\"addGasNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IShared.DeployFetchParams[]\",\"name\":\"deployFetchParamsArray\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"fetchContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IShared.FetchParams[]\",\"name\":\"fetchParamsArray\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShared.TransferParams[]\",\"name\":\"transferParamsArray\",\"type\":\"tuple[]\"}],\"name\":\"allBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"fetchContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IShared.FetchParams[]\",\"name\":\"fetchParamsArray\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShared.TransferParams[]\",\"name\":\"transferParamsArray\",\"type\":\"tuple[]\"}],\"name\":\"allBatchV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"swapID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IShared.DeployFetchParams[]\",\"name\":\"deployFetchParamsArray\",\"type\":\"tuple[]\"}],\"name\":\"deployAndFetchBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableCommunityGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableCommunityGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShared.TransferParams\",\"name\":\"transferParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum IMulticall.CallType\",\"name\":\"callType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct IMulticall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"gasMulticall\",\"type\":\"uint256\"}],\"name\":\"executeActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"srcChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"executexCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShared.TransferParams\",\"name\":\"transferParams\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"srcChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"executexSwapAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"fetchContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IShared.FetchParams[]\",\"name\":\"fetchParamsArray\",\"type\":\"tuple[]\"}],\"name\":\"fetchBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityGuardDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommunityKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeyManager\",\"outputs\":[{\"internalType\":\"contract IKeyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSuspendedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"govWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShared.TransferParams\",\"name\":\"transferParams\",\"type\":\"tuple\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShared.TransferParams[]\",\"name\":\"transferParamsArray\",\"type\":\"tuple[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IShared.TransferParams\",\"name\":\"transferParams\",\"type\":\"tuple\"}],\"name\":\"transferFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTimesGAddress\",\"type\":\"address\"}],\"internalType\":\"struct IShared.SigData\",\"name\":\"sigData\",\"type\":\"tuple\"},{\"internalType\":\"contract IKeyManager\",\"name\":\"keyManager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"omitChecks\",\"type\":\"bool\"}],\"name\":\"updateKeyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"xCallNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"xCallToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"xSwapNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"dstAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"dstToken\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"cfParameters\",\"type\":\"bytes\"}],\"name\":\"xSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vault", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000cd351d3626Dc244730796A3168D315168eBf08Be", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}