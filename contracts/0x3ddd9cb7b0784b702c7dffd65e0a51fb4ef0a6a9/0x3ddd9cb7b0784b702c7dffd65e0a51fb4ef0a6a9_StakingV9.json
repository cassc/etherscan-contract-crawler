{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking contract v9 with Claim Fee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract StakingV9 is ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public owner;\\r\\n    address public stakevault;\\r\\n    address public projectContract;\\r\\n    IERC20 public immutable stakingToken;\\r\\n    IERC20 public immutable rewardsToken;\\r\\n    uint256 public stakingTokenDecimals;\\r\\n    uint256 public rewardTokenDecimals;\\r\\n    string public stakingTokenName;\\r\\n    string public rewardTokenName;\\r\\n    string public contractType;\\r\\n\\r\\n    uint256 public duration;\\r\\n    uint256 public finishAt;\\r\\n    uint256 public updatedAt;\\r\\n\\r\\n    //claim rules\\r\\n    uint256 public phase1;\\r\\n    uint256 public phase2;\\r\\n    uint256 public phase3;\\r\\n    uint256 public phase4;\\r\\n\\r\\n    uint256 public percentage1;\\r\\n    uint256 public percentage2;\\r\\n    uint256 public percentage3;\\r\\n    \\r\\n    // Reward to be paid out per second\\r\\n    uint256 public rewardRate;\\r\\n    // Sum of (reward rate * dt * rewardTokenDecimals / total supply)\\r\\n    uint256 public rewardPerTokenStored;\\r\\n    // User address => rewardPerTokenStored\\r\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n    // User address => rewards to be claimed since \\\"updateReward\\\"\\r\\n    mapping(address => uint256) public rewards;\\r\\n\\r\\n    // User Info\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n    mapping(address => uint256) public claimedRewards;\\r\\n    mapping(address => uint256) public userStakeUpdateTime;\\r\\n    mapping(address => uint256) public lastClaimedTime;\\r\\n    mapping(address => uint256) public userLastTimeStaked;\\r\\n\\r\\n\\r\\n    // Total staked amount\\r\\n    uint256 public totalSupply;\\r\\n    // Total claimed amount\\r\\n    uint256 public totalClaimed;\\r\\n    // Total users\\r\\n    uint256 public totalUsers;\\r\\n\\r\\n\\r\\n\\r\\n    constructor(address _stakevault, address _stakingToken, address _rewardToken, uint256 _stakingTokenDecimals, uint256 _rewardTokenDecimals, string memory _stakingTokenName, string memory _rewardTokenName, string memory _contractType) {\\r\\n        require(\\r\\n            keccak256(bytes(_contractType)) == keccak256(bytes(\\\"stake\\\")) || \\r\\n            keccak256(bytes(_contractType)) == keccak256(bytes(\\\"farm\\\")),\\r\\n            \\\"Only use stake or farm as contractType\\\"\\r\\n        );\\r\\n        \\r\\n        owner = msg.sender;\\r\\n        stakevault = _stakevault;\\r\\n        projectContract = _rewardToken;\\r\\n        stakingToken = IERC20(_stakingToken);\\r\\n        rewardsToken = IERC20(_rewardToken);\\r\\n        stakingTokenDecimals = _stakingTokenDecimals;\\r\\n        rewardTokenDecimals = _rewardTokenDecimals;\\r\\n        stakingTokenName = _stakingTokenName;\\r\\n        rewardTokenName = _rewardTokenName;\\r\\n        contractType = _contractType;\\r\\n    }\\r\\n\\r\\n    // Modifier: Only allows the contract owner to execute the function\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n    function updateRewardInternal(address _account) internal {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        updatedAt = lastTimeRewardApplicable();\\r\\n\\r\\n        if (_account != address(0)) {\\r\\n            rewards[_account] = earned(_account);\\r\\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Stakes the specified amount of tokens\\r\\n    function stake(uint256 _amount) external nonReentrant {\\r\\n        updateRewardInternal(msg.sender);\\r\\n\\r\\n        userLastTimeStaked[msg.sender] = block.timestamp;\\r\\n\\r\\n        require(_amount > 0, \\\"amount = 0\\\");\\r\\n        if (balanceOf[msg.sender] == 0) {\\r\\n            userStakeUpdateTime[msg.sender] = block.timestamp;\\r\\n            totalUsers += 1;\\r\\n        }\\r\\n        //transfer from RewardVault\\r\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        //update info\\r\\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_amount);\\r\\n        totalSupply = totalSupply.add(_amount);\\r\\n\\r\\n        updateRewardInternal(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Withdraws the specified amount of tokens\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        updateRewardInternal(msg.sender);\\r\\n\\r\\n        require(_amount > 0, \\\"amount = 0\\\");\\r\\n        require(balanceOf[msg.sender] >= _amount, \\\"amount > balance\\\");\\r\\n        stakingToken.transfer(msg.sender, _amount);\\r\\n        //update info\\r\\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_amount);\\r\\n        totalSupply = totalSupply.sub(_amount);\\r\\n\\r\\n        updateRewardInternal(msg.sender);\\r\\n    \\r\\n\\r\\n        if (balanceOf[msg.sender] == 0) {\\r\\n            userStakeUpdateTime[msg.sender] = 0;\\r\\n            totalUsers -= 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Claims the rewards for the sender\\r\\n    function getReward() external nonReentrant {\\r\\n        updateRewardInternal(msg.sender);\\r\\n\\r\\n        require(rewards[msg.sender] > 0, \\\"No rewards to claim.\\\");\\r\\n        \\r\\n        uint256 reward = rewards[msg.sender];\\r\\n        uint256 userStakeEndTime = userLastTimeStaked[msg.sender] + phase4;\\r\\n\\r\\n        if (block.timestamp < userStakeEndTime) {\\r\\n            if (block.timestamp >= userLastTimeStaked[msg.sender] + phase3) {\\r\\n                reward = (reward * percentage3) / 100;\\r\\n            } else if (block.timestamp >= userLastTimeStaked[msg.sender] + phase2) {\\r\\n                reward = (reward * percentage2) / 100;\\r\\n            } else if (block.timestamp >= userLastTimeStaked[msg.sender] + phase1) {\\r\\n                reward = (reward * percentage1) / 100;\\r\\n            } else {\\r\\n                revert(\\\"You cannot claim yet\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 fee = rewards[msg.sender] - reward;\\r\\n\\r\\n        rewardsToken.transferFrom(stakevault, msg.sender, reward);\\r\\n        rewardsToken.transferFrom(stakevault, projectContract, fee);\\r\\n\\r\\n\\r\\n        //update info\\r\\n        rewards[msg.sender] = 0;\\r\\n        claimedRewards[msg.sender] += reward;\\r\\n        totalClaimed += reward;\\r\\n\\r\\n        lastClaimedTime[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Calculates the reward per token\\r\\n    function rewardPerToken() public view returns (uint256) {\\r\\n        if (totalSupply == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        return rewardPerTokenStored.add(\\r\\n            rewardRate.mul(lastTimeRewardApplicable().sub(updatedAt)).mul(10**rewardTokenDecimals).div(totalSupply)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Calculates the total earnings of an account\\r\\n    function earned(address _account) public view returns (uint256) {\\r\\n        return balanceOf[_account].mul(rewardPerToken().sub(userRewardPerTokenPaid[_account])).div(10**rewardTokenDecimals).add(rewards[_account]);\\r\\n    }\\r\\n\\r\\n    // Sets the duration of rewards distribution\\r\\n    function setRewardsDurationDays(uint256 _durationInDays) external onlyOwner {\\r\\n        require(finishAt < block.timestamp, \\\"reward duration not finished\\\");\\r\\n        duration = _durationInDays * 1 days;\\r\\n    }\\r\\n\\r\\n    // Notifies the contract about the amount of rewards to be distributed\\r\\n    function notifyRewardAmount(uint256 _amount) external onlyOwner {\\r\\n        updateRewardInternal(address(0));\\r\\n\\r\\n        // Reward duration not started or expired. Set the duration first.\\r\\n        if (block.timestamp > finishAt) {\\r\\n            rewardRate = _amount.div(duration);\\r\\n        } else {\\r\\n            uint256 remainingRewards = finishAt.sub(block.timestamp).mul(rewardRate);\\r\\n            rewardRate = _amount.add(remainingRewards).div(duration);\\r\\n        }\\r\\n\\r\\n        require(rewardRate > 0, \\\"reward rate = 0\\\");\\r\\n        require(rewardRate.mul(duration) <= rewardsToken.balanceOf(address(stakevault)), \\\"reward amount > balance\\\");\\r\\n\\r\\n        finishAt = block.timestamp.add(duration);\\r\\n        updatedAt = block.timestamp;\\r\\n\\r\\n        updateRewardInternal(address(0));\\r\\n    }\\r\\n    \\r\\n    // Returns the last applicable timestamp for the rewards\\r\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\r\\n        return block.timestamp <= finishAt ? block.timestamp : finishAt;\\r\\n    }\\r\\n\\r\\n    function userInfo(address _account) public view returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n        uint256 userPercentageX1000 = balanceOf[_account].mul(100000).div(totalSupply);\\r\\n        uint256 userRewardRate = rewardRate.mul(userPercentageX1000).div(100000);\\r\\n        uint256 userTimeUpdate = block.timestamp.sub(lastClaimedTime[_account]);\\r\\n        uint256 userCurrentEarned = earned(_account);\\r\\n        uint256 userEarningsNext24Hours = userRewardRate.mul(1 days);\\r\\n\\r\\n        if (lastClaimedTime[_account] == 0) {\\r\\n            userTimeUpdate = block.timestamp.sub(userStakeUpdateTime[_account]);\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            userPercentageX1000, // User percentage multiplied by 1000\\r\\n            userRewardRate, // User reward rate\\r\\n            userTimeUpdate, // Time elapsed since the last claim or stake update\\r\\n            userCurrentEarned, // User's currently earned amount\\r\\n            userEarningsNext24Hours // Estimated earnings in the next 24 hours\\r\\n        );\\r\\n    }\\r\\n    function getEthBalance(address _address) public view returns (uint256) {\\r\\n        return _address.balance;\\r\\n    }\\r\\n    function setPhaseAndPercentage (uint256 _phase1sec, uint256 _phase2sec, uint256 _phase3sec, uint256 _phase4sec,\\r\\n    uint256 _percentage1, uint256 _percentage2, uint256 _percentage3) external onlyOwner{\\r\\n        phase1 = _phase1sec;\\r\\n        phase2 = _phase2sec;\\r\\n        phase3 = _phase3sec;\\r\\n        phase4 = _phase4sec;\\r\\n\\r\\n        percentage1 = _percentage1;\\r\\n        percentage2 = _percentage2;\\r\\n        percentage3 = _percentage3;\\r\\n    }\\r\\n    function checkPhase(address user) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        uint256 currentPhase = 0;  // Default phase\\r\\n        uint256 phasetime = 0;  // Default phasetime\\r\\n        uint256 percent = 0; // Default Reward amount to withdraw\\r\\n        uint256 remainingtime = 0; // Default time left\\r\\n\\r\\n        if (block.timestamp > (userLastTimeStaked[user] + phase4)) {\\r\\n            currentPhase = 4;\\r\\n            percent = 90; // 10% fee\\r\\n            phasetime = 0;\\r\\n        } else if (block.timestamp > (userLastTimeStaked[user] + phase3)) {\\r\\n            currentPhase = 3;\\r\\n            percent = percentage3;\\r\\n            phasetime = phase4;\\r\\n            remainingtime = (userLastTimeStaked[user] + phase4) - block.timestamp;\\r\\n\\r\\n        } else if (block.timestamp > (userLastTimeStaked[user] + phase2)) {\\r\\n            currentPhase = 2;\\r\\n            percent = percentage2;\\r\\n            phasetime = phase3;\\r\\n            remainingtime = (userLastTimeStaked[user] + phase3) - block.timestamp;\\r\\n\\r\\n        } else if (block.timestamp > (userLastTimeStaked[user] + phase1)) {\\r\\n            currentPhase = 1;\\r\\n            percent = percentage1;\\r\\n            phasetime = phase2;\\r\\n            remainingtime = (userLastTimeStaked[user] + phase2) - block.timestamp;\\r\\n\\r\\n        } else {\\r\\n            phasetime = phase1;\\r\\n            remainingtime = (userLastTimeStaked[user] + phase1) - block.timestamp;\\r\\n        }\\r\\n        return (currentPhase, phasetime, percent, remainingtime);\\r\\n    }\\r\\n}\\r\\n\\r\\n// Interface for ERC20 token contract\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakevault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_stakingTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_rewardTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractType\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentage1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentage2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentage3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phase1sec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase2sec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase3sec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase4sec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage3\",\"type\":\"uint256\"}],\"name\":\"setPhaseAndPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"}],\"name\":\"setRewardsDurationDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakevault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastTimeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakeUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingV9", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000042d58c2d6d62cadf035b742582e618cc82371739000000000000000000000000a09e6f797223af66f3088ab8df35b2419165ea07000000000000000000000000a09e6f797223af66f3088ab8df35b2419165eab65000000000000000000000000000000000000000000000000000000", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}