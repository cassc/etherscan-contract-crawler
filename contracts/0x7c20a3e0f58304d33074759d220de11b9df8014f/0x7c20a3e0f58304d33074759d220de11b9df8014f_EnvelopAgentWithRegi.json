{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"EnvelopAgentWithRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"ServiceAgent.sol\\\";\\n\\ncontract EnvelopAgentWithRegistry is ServiceAgent, Ownable {\\n\\n    \\n    function withdrawFeeEther() external onlyOwner {\\n        _withdrawEther(msg.sender);\\n        \\n    }\\n\\n    function withdrawFeeERC20(address _erc20) external onlyOwner {\\n        _withdrawTokens(_erc20, msg.sender);\\n    }\\n    \\n\\n     \\n    \\n    \\n\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"ServiceAgent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) Subscription Registry Contract V2\\n\\n\\n/// The subscription platform operates with the following role model \\n/// (it is assumed that the actor with the role is implemented as a contract).\\n/// `Service Provider` is a contract whose services are sold by subscription.\\n/// `Agent` - a contract that sells a subscription on behalf ofservice provider. \\n///  May receive sales commission\\n///  `Platform` - SubscriptionRegistry contract that performs processingsubscriptions, \\n///  fares, tickets\\n\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"SafeERC20.sol\\\";\\nimport {Ticket} from \\\"SubscriptionRegistry.sol\\\";\\nimport \\\"IServiceProvider.sol\\\";\\n\\n/// @title ServiceAgent abstract contract \\n/// @author Envelop project Team\\n/// @notice Abstract contract implements service agent logic.\\n/// For use with SubscriptionRegestry\\n/// @dev Use this code in service agent\\n/// for tickets selling\\nabstract contract ServiceAgent{\\n    using SafeERC20 for IERC20;\\n\\n\\t\\n    receive() external payable {}\\n    function buySubscription(\\n        address _service,\\n        uint256 _tarifIndex,\\n        uint256 _payWithIndex,\\n        address _buyFor,\\n        address _payer\\n    ) public payable returns(Ticket memory ticket)\\n    {\\n        if (msg.value > 0){\\n            require(_payer == msg.sender, 'Only msg.sender can be payer');\\n        }\\n        // get service provider\\n        IServiceProvider sP = IServiceProvider(_service);\\n        \\n        // call SubscriptionRegistry that registered on current\\n        // service provider\\n        //return ISubscriptionRegistry(sP.subscriptionRegistry).buySubscription(\\n        ticket = sP.subscriptionRegistry().buySubscription{value: msg.value}(\\n            _service,\\n            _tarifIndex,\\n            _payWithIndex,\\n            _buyFor,\\n            _payer\\n        );\\n\\n    }\\n\\n    function _withdrawEther(address _feeReceiver) internal  {\\n        address payable o = payable(_feeReceiver);\\n        o.transfer(address(this).balance);\\n    }\\n\\n    function _withdrawTokens(address _erc20, address _feeReceiver) internal  {\\n        IERC20(_erc20).safeTransfer(_feeReceiver, IERC20(_erc20).balanceOf(address(this)));\\n    }\\n}\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"draft-IERC20Permit.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"SubscriptionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) Team. Subscription Registry Contract V2\\npragma solidity 0.8.19;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"ITrustedWrapper.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\nimport \\\"ISubscriptionRegistry.sol\\\";\\n\\n/// The subscription platform operates with the following role model \\n/// (it is assumed that the actor with the role is implemented as a contract).\\n/// `Service Provider` is a contract whose services are sold by subscription.\\n/// `Agent` - a contract that sells a subscription on behalf ofservice provider. \\n///  May receive sales commission\\n///  `Platform` - SubscriptionRegistry contract that performs processingsubscriptions, \\n///  fares, tickets\\n\\n    struct SubscriptionType {\\n        uint256 timelockPeriod;    // in seconds e.g. 3600*24*30*12 = 31104000 = 1 year\\n        uint256 ticketValidPeriod; // in seconds e.g. 3600*24*30    =  2592000 = 1 month\\n        uint256 counter;     // For case when ticket valid for N usage, e.g. for Min N NFTs          \\n        bool isAvailable;    // USe for stop using tariff because we can`t remove tariff from array \\n        address beneficiary; // Who will receive payment for tickets\\n    }\\n    struct PayOption {\\n        address paymentToken;   // token contract address or zero address for native token(ETC etc)\\n        uint256 paymentAmount;  // ticket price exclude any fees\\n        uint16 agentFeePercent; // 100%-10000, 20%-2000, 3%-300 \\n    }\\n\\n    struct Tariff {\\n        SubscriptionType subscription; // link to subscriptionType\\n        PayOption[] payWith; // payment option array. Use it for price in defferent tokens\\n    }\\n\\n    // native subscribtionManager tickets format\\n    struct Ticket {\\n        uint256 validUntil; // Unixdate, tickets not valid after\\n        uint256 countsLeft; // for tarif with fixed use counter\\n    }\\n\\n/// @title Base contract in Envelop Subscription Platform \\n/// @author Envelop Team\\n/// @notice You can use this contract for make and operate any on-chain subscriptions\\n/// @dev  Contract that performs processing subscriptions, fares(tariffs), tickets\\n/// @custom:please see example folder.\\ncontract SubscriptionRegistry is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant public PERCENT_DENOMINATOR = 10000;\\n\\n    /// @notice Envelop Multisig contract\\n    address public platformOwner; \\n    \\n    /// @notice Platform owner can receive fee from each payments\\n    uint16 public platformFeePercent = 50; // 100%-10000, 20%-2000, 3%-300\\n\\n\\n    /// @notice address used for wrapp & lock incoming assets\\n    address  public mainWrapper; \\n    /// @notice Used in case upgrade this contract\\n    address  public previousRegistry; \\n    /// @notice Used in case upgrade this contract\\n    address  public proxyRegistry; \\n\\n    /// @notice Only white listed assets can be used on platform\\n    mapping(address => bool) public whiteListedForPayments;\\n    \\n    /// @notice from service(=smart contract address) to tarifs\\n    mapping(address => Tariff[]) public availableTariffs;\\n\\n    /// @notice from service to agent to available tarifs(tarif index);\\n    mapping(address => mapping(address => uint256[])) public agentServiceRegistry;\\n     \\n    \\n    /// @notice mapping from user addres to service contract address  to ticket\\n    mapping(address => mapping(address => Ticket)) public userTickets;\\n\\n    event PlatfromFeeChanged(uint16 indexed newPercent);\\n    event WhitelistPaymentTokenChanged(address indexed asset, bool indexed state);\\n    event TariffChanged(address indexed service, uint256 indexed tariffIndex);\\n    event TicketIssued(\\n        address indexed service, \\n        address indexed agent, \\n        address indexed forUser, \\n        uint256 tariffIndex\\n    );\\n\\n    constructor(address _platformOwner) {\\n        require(_platformOwner != address(0),'Zero platform fee receiver');\\n        platformOwner = _platformOwner;\\n    } \\n   \\n    /**\\n     * @notice Add new tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _newTariff full encded Tariff object\\n     * @return last added tariff index in  Tariff[] array \\n     * for current Service Provider (msg.sender)\\n     */\\n    function registerServiceTariff(Tariff calldata _newTariff) \\n        external \\n        returns(uint256)\\n    {\\n        // TODO\\n        // Tarif structure check\\n        // PayWith array whiteList check\\n        return _addTariff(msg.sender, _newTariff);\\n    }\\n\\n    /**\\n     * @notice Edit tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _timelockPeriod - see SubscriptionType notice above\\n     * @param _ticketValidPeriod - see SubscriptionType notice above\\n     * @param _counter - see SubscriptionType notice above\\n     * @param _isAvailable - see SubscriptionType notice above\\n     * @param _beneficiary - see SubscriptionType notice above\\n     */\\n    function editServiceTariff(\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) \\n        external\\n    {\\n        // TODO\\n        // Tariff structure check\\n        // PayWith array whiteList check\\n        _editTariff(\\n            msg.sender,\\n            _tariffIndex, \\n            _timelockPeriod,\\n            _ticketValidPeriod,\\n            _counter,\\n            _isAvailable,\\n            _beneficiary\\n        );\\n\\n    }\\n\\n    \\n    /**\\n     * @notice Add tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for add tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * @return last added PaymentOption index in array \\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function addTariffPayOption(\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external returns(uint256)\\n    {\\n        return _addTariffPayOption(\\n            msg.sender,\\n            _tariffIndex,\\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n    }\\n\\n    /**\\n     * @notice Edit tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for edit tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function editTariffPayOption(\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external \\n    {\\n        _editTariffPayOption(\\n            msg.sender,\\n            _tariffIndex,\\n            _payWithIndex, \\n            _paymentToken,\\n            _paymentAmount,\\n            _agentFeePercent\\n        );\\n    }\\n\\n    /**\\n     * @notice Authorize agent for caller service provider\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _agent  - address of contract that implement Agent role \\n     * @param _serviceTariffIndexes  - array of index in `availableTariffs` array\\n     * that available for given `_agent` \\n     * @return full array of actual tarifs for this agent \\n     */\\n    function authorizeAgentForService(\\n        address _agent,\\n        uint256[] calldata _serviceTariffIndexes\\n    ) external virtual returns (uint256[] memory) \\n    {\\n        // remove previouse tariffs\\n        delete agentServiceRegistry[msg.sender][_agent];\\n        uint256[] storage currentServiceTariffsOfAgent = agentServiceRegistry[msg.sender][_agent];\\n        // check that adding tariffs still available\\n        for(uint256 i; i < _serviceTariffIndexes.length; ++ i) {\\n            if (availableTariffs[msg.sender][_serviceTariffIndexes[i]].subscription.isAvailable){\\n                currentServiceTariffsOfAgent.push(_serviceTariffIndexes[i]);\\n            }\\n        }\\n        return currentServiceTariffsOfAgent;\\n    }\\n    \\n     /**\\n     * @notice By Ticket for subscription\\n     * @dev Call this method from Agent\\n     *\\n     * @param _service  - Service Provider address \\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _buyFor - address for whome this ticket would be bought \\n     * @param _payer - address of payer for this ticket\\n     * @return ticket structure that would be use for validate service process\\n     */\\n    function buySubscription(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex,\\n        address _buyFor,\\n        address _payer\\n    ) external \\n      payable\\n      returns(Ticket memory ticket) {\\n        // Cant buy ticket for nobody\\n        require(_buyFor != address(0),'Cant buy ticket for nobody');\\n\\n        require(\\n            availableTariffs[_service][_tariffIndex].subscription.isAvailable,\\n            'This subscription not available'\\n        );\\n\\n        // Not used in this implementation\\n        // require(\\n        //     availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount > 0,\\n        //     'This Payment option not available'\\n        // );\\n\\n        // Check that agent is authorized for purchace of this service\\n        require(\\n            _isAgentAuthorized(msg.sender, _service, _tariffIndex), \\n            'Agent not authorized for this service tariff' \\n        );\\n        \\n        (bool isValid, bool needFix) = _isTicketValid(_buyFor, _service);\\n        require(!isValid, 'Only one valid ticket at time');\\n\\n        //lets safe user ticket (only one ticket available in this version)\\n        ticket = Ticket(\\n            availableTariffs[_service][_tariffIndex].subscription.ticketValidPeriod + block.timestamp,\\n            availableTariffs[_service][_tariffIndex].subscription.counter\\n        );\\n        userTickets[_buyFor][_service] = ticket;\\n\\n        // Lets receive payment tokens FROM sender\\n        if (availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount > 0){\\n            _processPayment(_service, _tariffIndex, _payWithIndex, _payer);\\n        }\\n        emit TicketIssued(_service, msg.sender, _buyFor, _tariffIndex);\\n    }\\n\\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * Decrement ticket counter in case it > 0\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @return ok True in case ticket is valid\\n     */\\n    function checkAndFixUserSubscription(\\n        address _user\\n    ) external returns (bool ok){\\n        \\n        address _service = msg.sender;\\n        // Check user ticket\\n        (bool isValid, bool needFix) = _isTicketValid(_user, msg.sender);\\n        \\n        // Proxy to previos\\n        if (!isValid && previousRegistry != address(0)) {\\n            (isValid, needFix) = ISubscriptionRegistry(previousRegistry).checkUserSubscription(\\n                _user, \\n                _service\\n            );\\n            // Case when valid ticket stored in previousManager\\n            if (isValid ) {\\n                if (needFix){\\n                    ISubscriptionRegistry(previousRegistry).fixUserSubscription(\\n                        _user, \\n                        _service\\n                    );\\n                }\\n                ok = true;\\n                return ok;\\n            }\\n        }\\n        require(isValid,'Valid ticket not found');\\n        \\n        // Fix action (for subscription with counter)\\n        if (needFix){\\n            _fixUserSubscription(_user, msg.sender);    \\n        }\\n                \\n        ok = true;\\n    }\\n\\n     /**\\n     * @notice Decrement ticket counter in case it > 0\\n     * @dev Call this method from new SubscriptionRegistry in case of upgrade\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _serviceFromProxy  - address of service from more new SubscriptionRegistry contract \\n     */\\n    function fixUserSubscription(\\n        address _user,\\n        address _serviceFromProxy\\n    ) public {\\n        require(proxyRegistry !=address(0) && msg.sender == proxyRegistry,\\n            'Only for future registry'\\n        );\\n        _fixUserSubscription(_user, _serviceFromProxy);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////\\n    \\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ok True in case ticket is valid\\n     * @return needFix True in case ticket has counter > 0\\n     */\\n    function checkUserSubscription(\\n        address _user, \\n        address _service\\n    ) external view returns (bool ok, bool needFix) {\\n        (ok, needFix)  = _isTicketValid(_user, _service);\\n        if (!ok && previousRegistry != address(0)) {\\n            (ok, needFix) = ISubscriptionRegistry(previousRegistry).checkUserSubscription(\\n                _user, \\n                _service\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns `_user` ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ticket\\n     */\\n    function getUserTicketForService(\\n        address _service,\\n        address _user\\n    ) public view returns(Ticket memory) \\n    {\\n        return userTickets[_user][_service];\\n    }\\n\\n    /**\\n     * @notice Returns array of Tariff for `_service`\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @return Tariff array\\n     */\\n    function getTariffsForService(address _service) external view returns (Tariff[] memory) {\\n        return availableTariffs[_service];\\n    }\\n\\n    /**\\n     * @notice Returns ticket price include any fees\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @return tulpe with payment token an ticket price \\n     */\\n    function getTicketPrice(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex\\n    ) public view virtual returns (address, uint256) \\n    {\\n        if (availableTariffs[_service][_tariffIndex].subscription.timelockPeriod != 0)\\n        {\\n            return(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n        } else {\\n            return(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                + availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                    *availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].agentFeePercent\\n                    /PERCENT_DENOMINATOR\\n                + availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                        *_platformFeePercent(_service, _tariffIndex, _payWithIndex) \\n                        /PERCENT_DENOMINATOR\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns array of Tariff for `_service` assigned to `_agent`\\n     * @dev Call this method from any context\\n     *\\n     * @param _agent - address of Agent\\n     * @param _service - address of Service Provider\\n     * @return tuple with two arrays: indexes and Tariffs\\n     */\\n    function getAvailableAgentsTariffForService(\\n        address _agent, \\n        address _service\\n    ) external view virtual returns(uint256[] memory, Tariff[] memory) \\n    {\\n        //First need get count of tarifs that still available\\n        uint256 availableCount;\\n        for (uint256 i; i < agentServiceRegistry[_service][_agent].length; ++i){\\n            if (availableTariffs[_service][\\n                  agentServiceRegistry[_service][_agent][i]\\n                ].subscription.isAvailable\\n            ) {++availableCount;}\\n        }\\n        \\n        Tariff[]  memory tariffs = new Tariff[](availableCount);\\n        uint256[] memory indexes = new uint256[](availableCount);\\n        for (uint256 i; i < agentServiceRegistry[_service][_agent].length; ++i){\\n            if (availableTariffs[_service][\\n                  agentServiceRegistry[_service][_agent][i]\\n                ].subscription.isAvailable\\n            ) \\n            {\\n                tariffs[availableCount - 1] = availableTariffs[_service][\\n                  agentServiceRegistry[_service][_agent][i]\\n                ];\\n                indexes[availableCount - 1] = agentServiceRegistry[_service][_agent][i];\\n                --availableCount;\\n            }\\n        }\\n        return (indexes, tariffs);\\n    }    \\n    ////////////////////////////////////////////////////////////////\\n    //////////     Admins                                     //////\\n    ////////////////////////////////////////////////////////////////\\n\\n    function setAssetForPaymentState(address _asset, bool _isEnable)\\n        external onlyOwner \\n    {\\n        whiteListedForPayments[_asset] = _isEnable;\\n        emit WhitelistPaymentTokenChanged(_asset, _isEnable);\\n    }\\n\\n    function setMainWrapper(address _wrapper) external onlyOwner {\\n        mainWrapper = _wrapper;\\n    }\\n\\n    function setPlatformOwner(address _newOwner) external {\\n        require(msg.sender == platformOwner, 'Only platform owner');\\n        require(_newOwner != address(0),'Zero platform fee receiver');\\n        platformOwner = _newOwner;\\n    }\\n\\n    function setPlatformFeePercent(uint16 _newPercent) external {\\n        require(msg.sender == platformOwner, 'Only platform owner');\\n        platformFeePercent = _newPercent;\\n        emit PlatfromFeeChanged(platformFeePercent);\\n    }\\n\\n    \\n\\n    function setPreviousRegistry(address _registry) external onlyOwner {\\n        previousRegistry = _registry;\\n    }\\n\\n    function setProxyRegistry(address _registry) external onlyOwner {\\n        proxyRegistry = _registry;\\n    }\\n    /////////////////////////////////////////////////////////////////////\\n    \\n    function _processPayment(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex,\\n        address _payer\\n    ) \\n        internal \\n        virtual \\n        returns(bool)\\n    {\\n        // there are two payment method for this implementation.\\n        // 1. with wrap and lock in asset (no fees)\\n        // 2. simple payment (agent & platform fee enabled)\\n        if (availableTariffs[_service][_tariffIndex].subscription.timelockPeriod != 0){\\n            require(msg.value == 0, 'Ether Not accepted in this method');\\n            // 1. with wrap and lock in asset\\n            IERC20(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n            ).safeTransferFrom(\\n                _payer, \\n                address(this),\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n\\n            // Lets approve received for wrap \\n            IERC20(\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n            ).safeApprove(\\n                mainWrapper,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n\\n            // Lets wrap with timelock and appropriate params\\n            ETypes.INData memory _inData;\\n            ETypes.AssetItem[] memory _collateralERC20 = new ETypes.AssetItem[](1);\\n            ETypes.Lock[] memory timeLock =  new ETypes.Lock[](1);\\n            // Only need set timelock for this wNFT\\n            timeLock[0] = ETypes.Lock(\\n                0x00, // timelock\\n                availableTariffs[_service][_tariffIndex].subscription.timelockPeriod + block.timestamp\\n            ); \\n            _inData = ETypes.INData(\\n                ETypes.AssetItem(\\n                    ETypes.Asset(ETypes.AssetType.EMPTY, address(0)),\\n                    0,0\\n                ),          // INAsset\\n                address(0), // Unwrap destinition    \\n                new ETypes.Fee[](0), // Fees\\n                //new ETypes.Lock[](0), // Locks\\n                timeLock,\\n                new ETypes.Royalty[](0), // Royalties\\n                ETypes.AssetType.ERC721, // Out type\\n                0, // Out Balance\\n                0x0000 // Rules\\n            );\\n\\n            _collateralERC20[0] = ETypes.AssetItem(\\n                ETypes.Asset(\\n                    ETypes.AssetType.ERC20,\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                ),\\n                0,\\n                availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n            );\\n            \\n            ITrustedWrapper(mainWrapper).wrap(\\n                _inData,\\n                _collateralERC20,\\n                _payer\\n            );\\n\\n        } else {\\n            // 2. simple payment\\n            if (availableTariffs[_service][_tariffIndex]\\n                .payWith[_payWithIndex]\\n                .paymentToken != address(0)\\n            ) \\n            {\\n                // pay with erc20 \\n                require(msg.value == 0, 'Ether Not accepted in this method');\\n                // 2.1. Body payment  \\n                IERC20(\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                ).safeTransferFrom(\\n                    _payer, \\n                    availableTariffs[_service][_tariffIndex].subscription.beneficiary,\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                );\\n\\n                // 2.2. Agent fee payment\\n                IERC20(\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                ).safeTransferFrom(\\n                    _payer, \\n                    msg.sender,\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                     *availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].agentFeePercent\\n                     /PERCENT_DENOMINATOR\\n                );\\n\\n                // 2.3. Platform fee \\n                uint256 _pFee = _platformFeePercent(_service, _tariffIndex, _payWithIndex); \\n                if (_pFee > 0) {\\n                    IERC20(\\n                        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentToken\\n                    ).safeTransferFrom(\\n                        _payer, \\n                        platformOwner, //\\n                        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                          *_pFee\\n                          /PERCENT_DENOMINATOR\\n                    );\\n                }\\n\\n            } else {\\n                // pay with native token(eth, bnb, etc)\\n                (, uint256 needPay) = getTicketPrice(_service, _tariffIndex,_payWithIndex);\\n                require(msg.value >= needPay, 'Not enough ether');\\n                // 2.4. Body ether payment\\n                sendValue(\\n                    payable(availableTariffs[_service][_tariffIndex].subscription.beneficiary),\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                );\\n\\n                // 2.5. Agent fee payment\\n                sendValue(\\n                    payable(msg.sender),\\n                    availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                      *availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].agentFeePercent\\n                      /PERCENT_DENOMINATOR\\n                );\\n\\n                // 2.3. Platform fee \\n                uint256 _pFee = _platformFeePercent(_service, _tariffIndex, _payWithIndex); \\n                if (_pFee > 0) {\\n\\n                    sendValue(\\n                        payable(platformOwner),\\n                        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex].paymentAmount\\n                          *_pFee\\n                          /PERCENT_DENOMINATOR\\n                    );\\n                }\\n                // return change\\n                if  ((msg.value - needPay) > 0) {\\n                    address payable s = payable(_payer);\\n                    s.transfer(msg.value - needPay);\\n                }\\n            }\\n        }\\n    }\\n\\n    // In this impementation params not used. \\n    // Can be ovveriden in other cases\\n    function _platformFeePercent(\\n        address _service, \\n        uint256 _tariffIndex, \\n        uint256  _payWithIndex\\n    ) internal view virtual returns(uint256) \\n    {\\n        return platformFeePercent;\\n    }\\n\\n    function _addTariff(address _service, Tariff calldata _newTariff) \\n        internal returns(uint256) \\n    {\\n        require (_newTariff.payWith.length > 0, 'No payment method');\\n        for (uint256 i; i < _newTariff.payWith.length; ++i){\\n            require(\\n                whiteListedForPayments[_newTariff.payWith[i].paymentToken],\\n                'Not whitelisted for payments'\\n            );      \\n        }\\n        require(\\n            _newTariff.subscription.ticketValidPeriod > 0 \\n            || _newTariff.subscription.counter > 0,\\n            'Tariff has no valid ticket option'  \\n        );\\n        availableTariffs[_service].push(_newTariff);\\n        emit TariffChanged(_service, availableTariffs[_service].length - 1);\\n        return availableTariffs[_service].length - 1;\\n    }\\n\\n\\n    function _editTariff(\\n        address _service,\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) internal  \\n    {\\n        availableTariffs[_service][_tariffIndex].subscription.timelockPeriod    = _timelockPeriod;\\n        availableTariffs[_service][_tariffIndex].subscription.ticketValidPeriod = _ticketValidPeriod;\\n        availableTariffs[_service][_tariffIndex].subscription.counter = _counter;\\n        availableTariffs[_service][_tariffIndex].subscription.isAvailable = _isAvailable;    \\n        availableTariffs[_service][_tariffIndex].subscription.beneficiary = _beneficiary;    \\n        emit TariffChanged(_service, _tariffIndex);\\n    }\\n   \\n    function _addTariffPayOption(\\n        address _service,\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) internal returns(uint256)\\n    {\\n        require(whiteListedForPayments[_paymentToken], 'Not whitelisted for payments');\\n        availableTariffs[_service][_tariffIndex].payWith.push(\\n            PayOption(_paymentToken, _paymentAmount, _agentFeePercent)\\n        ); \\n        emit TariffChanged(_service, _tariffIndex);\\n        return availableTariffs[_service][_tariffIndex].payWith.length - 1;\\n    }\\n\\n    function _editTariffPayOption(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) internal  \\n    {\\n        require(whiteListedForPayments[_paymentToken], 'Not whitelisted for payments');\\n        availableTariffs[_service][_tariffIndex].payWith[_payWithIndex] \\n        = PayOption(_paymentToken, _paymentAmount, _agentFeePercent);  \\n        emit TariffChanged(_service, _tariffIndex);  \\n    }\\n\\n    function _fixUserSubscription(\\n        address _user,\\n        address _service\\n    ) internal {\\n       \\n        // Fix action (for subscription with counter)\\n        if (userTickets[_user][_service].countsLeft > 0) {\\n            -- userTickets[_user][_service].countsLeft; \\n        }\\n    }\\n\\n        \\n   function _isTicketValid(address _user, address _service) \\n        internal \\n        view \\n        returns (bool isValid, bool needFix ) \\n    {\\n        isValid =  userTickets[_user][_service].validUntil > block.timestamp \\n            || userTickets[_user][_service].countsLeft > 0;\\n        needFix =  userTickets[_user][_service].countsLeft > 0;   \\n    }\\n\\n    function _isAgentAuthorized(\\n        address _agent, \\n        address _service, \\n        uint256 _tariffIndex\\n    ) \\n        internal\\n        view\\n        returns(bool authorized)\\n    {\\n        for (uint256 i; i < agentServiceRegistry[_service][_agent].length; ++ i){\\n            if (agentServiceRegistry[_service][_agent][i] == _tariffIndex){\\n                authorized = true;\\n                return authorized;\\n            }\\n        }\\n    }\\n\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\"\r\n    },\r\n    \"ITrustedWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"IWrapper.sol\\\";\\n\\ninterface ITrustedWrapper is IWrapper  {\\n\\n    function trustedOperator() external view returns(address);    \\n    \\n    function wrapUnsafe(\\n        ETypes.INData calldata _inData, \\n        ETypes.AssetItem[] calldata _collateral, \\n        address _wrappFor\\n    ) \\n        external\\n        payable\\n        returns (ETypes.AssetItem memory); \\n\\n    function transferIn(\\n        ETypes.AssetItem memory _assetItem,\\n        address _from\\n    ) \\n        external\\n        payable  \\n    returns (uint256 _transferedValue);\\n   \\n}\"\r\n    },\r\n    \"IWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n//import \\\"IERC721Enumerable.sol\\\";\\nimport \\\"LibEnvelopTypes.sol\\\";\\n\\ninterface IWrapper  {\\n\\n    event WrappedV1(\\n        address indexed inAssetAddress,\\n        address indexed outAssetAddress, \\n        uint256 indexed inAssetTokenId, \\n        uint256 outTokenId,\\n        address wnftFirstOwner,\\n        uint256 nativeCollateralAmount,\\n        bytes2  rules\\n    );\\n\\n    event UnWrappedV1(\\n        address indexed wrappedAddress,\\n        address indexed originalAddress,\\n        uint256 indexed wrappedId, \\n        uint256 originalTokenId, \\n        address beneficiary, \\n        uint256 nativeCollateralAmount,\\n        bytes2  rules \\n    );\\n\\n    event CollateralAdded(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId,\\n        uint8   assetType,\\n        address collateralAddress,\\n        uint256 collateralTokenId,\\n        uint256 collateralBalance\\n    );\\n\\n    event PartialUnWrapp(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId,\\n        uint256 lastCollateralIndex\\n    );\\n    event SuspiciousFail(\\n        address indexed wrappedAddress,\\n        uint256 indexed wrappedId, \\n        address indexed failedContractAddress\\n    );\\n\\n    event EnvelopFee(\\n        address indexed receiver,\\n        address indexed wNFTConatract,\\n        uint256 indexed wNFTTokenId,\\n        uint256 amount\\n    );\\n\\n    function wrap(\\n        ETypes.INData calldata _inData, \\n        ETypes.AssetItem[] calldata _collateral, \\n        address _wrappFor\\n    ) \\n        external \\n        payable \\n    returns (ETypes.AssetItem memory);\\n\\n    // function wrapUnsafe(\\n    //     ETypes.INData calldata _inData, \\n    //     ETypes.AssetItem[] calldata _collateral, \\n    //     address _wrappFor\\n    // ) \\n    //     external \\n    //     payable\\n    // returns (ETypes.AssetItem memory);\\n\\n    function addCollateral(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        ETypes.AssetItem[] calldata _collateral\\n    ) external payable;\\n\\n    // function addCollateralUnsafe(\\n    //     address _wNFTAddress, \\n    //     uint256 _wNFTTokenId, \\n    //     ETypes.AssetItem[] calldata _collateral\\n    // ) \\n    //     external \\n    //     payable;\\n\\n    function unWrap(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) external; \\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId\\n    ) external; \\n\\n    function unWrap(\\n        ETypes.AssetType _wNFTType, \\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        bool _isEmergency\\n    ) external;\\n\\n    function chargeFees(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId, \\n        address _from, \\n        address _to,\\n        bytes1 _feeType\\n    ) \\n        external  \\n        returns (bool);   \\n\\n    ////////////////////////////////////////////////////////////////////// \\n    \\n    function MAX_COLLATERAL_SLOTS() external view returns (uint256);\\n    function protocolTechToken() external view returns (address);\\n    function protocolWhiteList() external view returns (address);\\n    //function trustedOperators(address _operator) external view returns (bool); \\n    //function lastWNFTId(ETypes.AssetType _assetType) external view returns (ETypes.NFTItem); \\n\\n    function getWrappedToken(address _wNFTAddress, uint256 _wNFTTokenId) \\n        external \\n        view \\n        returns (ETypes.WNFT memory);\\n\\n    function getOriginalURI(address _wNFTAddress, uint256 _wNFTTokenId) \\n        external \\n        view \\n        returns(string memory); \\n    \\n    function getCollateralBalanceAndIndex(\\n        address _wNFTAddress, \\n        uint256 _wNFTTokenId,\\n        ETypes.AssetType _collateralType, \\n        address _erc,\\n        uint256 _tokenId\\n    ) external view returns (uint256, uint256);\\n   \\n}\"\r\n    },\r\n    \"IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"LibEnvelopTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ENVELOP(NIFTSY) protocol V1 for NFT. \\npragma solidity 0.8.19;\\n\\n/// @title Flibrary ETypes in Envelop PrtocolV1 \\n/// @author Envelop Team\\n/// @notice This contract implement main protocol's data types\\nlibrary ETypes {\\n\\n    enum AssetType {EMPTY, NATIVE, ERC20, ERC721, ERC1155, FUTURE1, FUTURE2, FUTURE3}\\n    \\n    struct Asset {\\n        AssetType assetType;\\n        address contractAddress;\\n    }\\n\\n    struct AssetItem {\\n        Asset asset;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    struct NFTItem {\\n        address contractAddress;\\n        uint256 tokenId;   \\n    }\\n\\n    struct Fee {\\n        bytes1 feeType;\\n        uint256 param;\\n        address token; \\n    }\\n\\n    struct Lock {\\n        bytes1 lockType;\\n        uint256 param; \\n    }\\n\\n    struct Royalty {\\n        address beneficiary;\\n        uint16 percent;\\n    }\\n\\n    struct WNFT {\\n        AssetItem inAsset;\\n        AssetItem[] collateral;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        bytes2 rules;\\n\\n    }\\n\\n    struct INData {\\n        AssetItem inAsset;\\n        address unWrapDestination;\\n        Fee[] fees;\\n        Lock[] locks;\\n        Royalty[] royalties;\\n        AssetType outType;\\n        uint256 outBalance;      //0- for 721 and any amount for 1155\\n        bytes2 rules;\\n\\n    }\\n\\n    struct WhiteListItem {\\n        bool enabledForFee;\\n        bool enabledForCollateral;\\n        bool enabledRemoveFromCollateral;\\n        address transferFeeModel;\\n    }\\n\\n    struct Rules {\\n        bytes2 onlythis;\\n        bytes2 disabled;\\n    }\\n\\n}\"\r\n    },\r\n    \"ISubscriptionRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {SubscriptionType, PayOption, Tariff, Ticket} from \\\"SubscriptionRegistry.sol\\\";\\ninterface ISubscriptionRegistry   {\\n\\n    /**\\n     * @notice Add new tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _newTariff full encded Tariff object\\n     * @return last added tariff index in  Tariff[] array \\n     * for current Service Provider (msg.sender)\\n     */\\n    function registerServiceTariff(Tariff calldata _newTariff) external returns(uint256);\\n    \\n    \\n    /**\\n     * @notice Authorize agent for caller service provider\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _agent  - address of contract that implement Agent role \\n     * @param _serviceTariffIndexes  - array of index in `availableTariffs` array\\n     * that available for given `_agent` \\n     * @return full array of actual tarifs for this agent \\n     */\\n    function authorizeAgentForService(\\n        address _agent,\\n        uint256[] calldata _serviceTariffIndexes\\n    ) external returns (uint256[] memory);\\n\\n    /**\\n     * @notice By Ticket for subscription\\n     * @dev Call this method from Agent\\n     *\\n     * @param _service  - Service Provider address \\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _buyFor - address for whome this ticket would be bought \\n     * @param _payer - address of payer for this ticket\\n     * @return ticket structure that would be use for validate service process\\n     */ \\n    function buySubscription(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex,\\n        address _buyFor,\\n        address _payer\\n    ) external payable returns(Ticket memory ticket);\\n\\n    /**\\n     * @notice Edit tariff for caller\\n     * @dev Call this method from ServiceProvider\\n     * for setup new tariff \\n     * using `Tariff` data type(please see above)\\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _timelockPeriod - see SubscriptionType notice above\\n     * @param _ticketValidPeriod - see SubscriptionType notice above\\n     * @param _counter - see SubscriptionType notice above\\n     * @param _isAvailable - see SubscriptionType notice above\\n     * @param _beneficiary - see SubscriptionType notice above\\n     */\\n    function editServiceTariff(\\n        uint256 _tariffIndex, \\n        uint256 _timelockPeriod,\\n        uint256 _ticketValidPeriod,\\n        uint256 _counter,\\n        bool _isAvailable,\\n        address _beneficiary\\n    ) external;\\n\\n    /**\\n     * @notice Add tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for add tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in `availableTariffs` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * @return last added PaymentOption index in array \\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function addTariffPayOption(\\n        uint256 _tariffIndex,\\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external returns(uint256);\\n    \\n    /**\\n     * @notice Edit tariff PayOption for exact service\\n     * @dev Call this method from ServiceProvider\\n     * for edit tariff PayOption \\n     *\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @param _paymentToken - see PayOption notice above\\n     * @param _paymentAmount - see PayOption notice above\\n     * @param _agentFeePercent - see PayOption notice above\\n     * for _tariffIndex Tariff of caller Service Provider (msg.sender)\\n     */\\n    function editTariffPayOption(\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex, \\n        address _paymentToken,\\n        uint256 _paymentAmount,\\n        uint16 _agentFeePercent\\n    ) external; \\n    \\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ok True in case ticket is valid\\n     * @return needFix True in case ticket has counter > 0\\n     */\\n    function checkUserSubscription(\\n        address _user, \\n        address _service\\n    ) external view returns (bool ok, bool needFix);\\n\\n\\n    /**\\n     * @notice Check that `_user` have still valid ticket for this service.\\n     * Decrement ticket counter in case it > 0\\n     * @dev Call this method from ServiceProvider\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @return ok True in case ticket is valid\\n     */\\n    function checkAndFixUserSubscription(address _user) external returns (bool ok);\\n\\n    /**\\n     * @notice Decrement ticket counter in case it > 0\\n     * @dev Call this method from new SubscriptionRegistry in case of upgrade\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _serviceFromProxy  - address of service from more new SubscriptionRegistry contract \\n     */\\n    function fixUserSubscription(address _user, address _serviceFromProxy) external;\\n\\n\\n    /**\\n     * @notice Returns `_user` ticket for this service.\\n     * @dev Call this method from any context\\n     *\\n     * @param _user  - address of user who has an ticket and who trying get service \\n     * @param _service - address of Service Provider\\n     * @return ticket\\n     */\\n    function getUserTicketForService(\\n        address _service,\\n        address _user\\n    ) external view returns(Ticket memory); \\n    \\n    /**\\n     * @notice Returns array of Tariff for `_service`\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @return Tariff array\\n     */\\n    function getTariffsForService(address _service) external view returns (Tariff[] memory);\\n\\n    /**\\n     * @notice Returns ticket price include any fees\\n     * @dev Call this method from any context\\n     *\\n     * @param _service - address of Service Provider\\n     * @param _tariffIndex  - index in  `availableTariffs` array \\n     * @param _payWithIndex  - index in `tariff.payWith` array \\n     * @return tulpe with payment token an ticket price \\n     */\\n    function getTicketPrice(\\n        address _service,\\n        uint256 _tariffIndex,\\n        uint256 _payWithIndex\\n    ) external view returns (address, uint256);\\n\\n    /**\\n     * @notice Returns array of Tariff for `_service` assigned to `_agent`\\n     * @dev Call this method from any context\\n     *\\n     * @param _agent - address of Agent\\n     * @param _service - address of Service Provider\\n     * @return Tariff array\\n     */\\n    function getAvailableAgentsTariffForService(\\n        address _agent, \\n        address _service\\n    ) external view returns(Tariff[] memory); \\n}\"\r\n    },\r\n    \"IServiceProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"ISubscriptionRegistry.sol\\\";\\n\\ninterface IServiceProvider  {\\n\\n\\tfunction serviceProvider() external view returns (address);\\n\\tfunction subscriptionRegistry() external view returns (ISubscriptionRegistry);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"EnvelopAgentWithRegistry.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tarifIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payWithIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyFor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"buySubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countsLeft\",\"type\":\"uint256\"}],\"internalType\":\"struct Ticket\",\"name\":\"ticket\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"withdrawFeeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFeeEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EnvelopAgentWithRegistry", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}