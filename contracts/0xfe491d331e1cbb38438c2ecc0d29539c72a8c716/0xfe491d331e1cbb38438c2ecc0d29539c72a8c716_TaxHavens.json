{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        result += xh == hi >> 128 ? xl / y : 1;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x4) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IBribeToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBribeToken {\\n    function mint(address to, uint256 amount) external;\\n    function balanceOf(address who) external view returns (uint256);\\n    function burn(address to, uint256 amount) external;\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function transfer(address to, uint256 value) external returns (bool);\\n} \"\r\n    },\r\n    \"contracts/IFraudToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFraudToken {\\n    function mint(address to, uint256 amount) external;\\n    function totalSupply() external view returns (uint256);\\n    function transferUnderlying(address to, uint256 value) external returns (bool);\\n    function fragmentToFraud(uint256 value) external view returns (uint256);\\n    function fraudToFragment(uint256 fraud) external view returns (uint256);\\n    function balanceOfUnderlying(address who) external view returns (uint256);\\n    function balanceOf(address who) external view returns (uint256);\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n    function getCurrentEpoch() external view returns (uint256);\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function burn(address from, uint256 amount) external;\\n    function rebase(\\n        uint256 epoch,\\n        uint256 indexDelta,\\n        bool positive\\n    ) external returns (uint256);\\n}\\n\\n\\n\"\r\n    },\r\n    \"contracts/IFraudVRF.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFraudVRF {\\n    function requestRandomWords(uint256 vault, uint256 reward, address user) external;\\n}\"\r\n    },\r\n    \"contracts/TaxHavens.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n/*\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u28c0\u28c0\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u281b\u28a6\u2840\u2809\u2819\u28a6\u2840\u2800\u2800\u28c0\u28e0\u28e4\u28c4\u28c0\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2864\u2824\u2834\u2836\u2824\u2824\u28bd\u28e6\u2840\u2800\u28b9\u2874\u281a\u2801\u2800\u2880\u28c0\u28c8\u28f3\u28c4\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u28a0\u281e\u28c1\u2864\u2834\u2836\u2836\u28e6\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2836\u283f\u282d\u2824\u28c4\u28c8\u2819\u2833\u2800\\r\\n\u2800\u2800\u2800\u2800\u28a0\u287f\u280b\u2800\u2800\u2880\u2874\u280b\u2801\u2800\u28c0\u2856\u281b\u28b3\u2834\u2836\u2844\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u28a6\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2874\u280b\u28e0\u2834\u281a\u2809\u2809\u28e7\u28c4\u28f7\u2840\u2880\u28ff\u2840\u2808\u2819\u283b\u284d\u2819\u2832\u28ae\u28e7\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u285e\u28e0\u281e\u2801\u2800\u2800\u2800\u28f0\u2803\u2800\u28f8\u2809\u2809\u2800\u2819\u28a6\u2840\u2800\u2838\u2844\u2800\u2808\u281f\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u281f\u2801\u2800\u2800\u2800\u2800\u28a0\u280f\u2809\u2889\u2847\u2800\u2800\u2800\u2800\u2800\u2809\u2833\u28c4\u28b7\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287e\u2824\u2824\u28bc\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28bf\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2847\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2809\u2809\u2809\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28c0\u28c0\u28c0\u28fb\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u2864\u2824\u2824\u28ff\u2809\u2809\u2809\u2818\u28e7\u2824\u28a4\u28c4\u28c0\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n\u2800\u2800\u2880\u2864\u2816\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2819\u2832\u2824\u2824\u2834\u281a\u2801\u2800\u2800\u2800\u2809\u2809\u2813\u2826\u28c4\u2800\u2800\u2800\\r\\n\u2880\u285e\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u28c4\u2800\\r\\n\u2818\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u2812\u281a\u2800\\r\\n  _____  _    __  __  _   _    ___     _______ _   _ ____            \\r\\n |_   _|/ \\\\   \\\\ \\\\/ / | | | |  / \\\\ \\\\   / / ____| \\\\ | / ___| \\r\\n   | | / _ \\\\   \\\\  /  | |_| | / _ \\\\ \\\\ / /|  _| |  \\\\| \\\\___ \\\\ \\r\\n   | |/ ___ \\\\  /  \\\\  |  _  |/ ___ \\\\ V / | |___| |\\\\  |___) |\\r\\n   |_/_/   \\\\_\\\\/_/\\\\_\\\\ |_| |_/_/   \\\\_\\\\_/  |_____|_| \\\\_|____/ \\r\\n\\r\\n\\r\\n    Twitter: https://twitter.com/fraudeth_gg\\r\\n    Telegram: http://t.me/fraudportal\\r\\n    Website: https://fraudeth.gg\\r\\n    Docs: https://docs.fraudeth.gg                                                         \\r\\n*/\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\r\\n\\r\\nimport \\\"./IFraudToken.sol\\\";\\r\\nimport \\\"./IBribeToken.sol\\\";\\r\\nimport \\\"./IFraudVRF.sol\\\";\\r\\n\\r\\ncontract TaxHavens is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // FRAUD\\r\\n    IFraudToken public fraud;\\r\\n    // Bribe\\r\\n    IBribeToken public bribe;\\r\\n    // VRF\\r\\n    IFraudVRF public vrf;\\r\\n    // Eth\\r\\n    IERC20 public eth; \\r\\n\\r\\n    struct VenezuelaStakerInfo {\\r\\n        uint256 amount;\\r\\n        uint256 dailyReward;\\r\\n        uint256 delayedReward;\\r\\n        uint256 rewardWithdrawn;\\r\\n        uint256 rewardTaxed;\\r\\n        uint256 lockEndedTimestamp;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 rebaseEpoch; \\r\\n        uint256 totalDeposit;\\r\\n    }\\r\\n\\r\\n    struct PanamaStakerInfo {\\r\\n        uint256 amount;\\r\\n        uint256 lockEndedTimestamp;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 rebaseEpoch;  \\r\\n    }\\r\\n\\r\\n    struct PricePoint {\\r\\n        uint256 timestamp;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    address public fraudpair;\\r\\n    address public bribepair;\\r\\n    address public marketingAddr;\\r\\n    address public cashBriefCaseAddr;\\r\\n    address public pureBribingAddr;\\r\\n\\r\\n    uint256 constant public MAX_INT_TYPE = type(uint256).max;\\r\\n    uint256 public randomNumber;\\r\\n    uint256 public totalStackedVenezuela;\\r\\n    uint256 public totalStackedPanama;\\r\\n    uint256 public totalTaxedVenezuela;\\r\\n    uint256 public totalTaxedPanama;\\r\\n    uint256 public vrfFee;\\r\\n\\r\\n    uint256 public currentFraudIndex = 0;\\r\\n    uint256 public currentBribeIndex = 0;\\r\\n\\r\\n    uint256 public lastUpdateTimeBribe = 0;\\r\\n    uint256 public lastUpdateTimeFraud = 0;\\r\\n\\r\\n    uint256 constant INTERVAL = 30 minutes;\\r\\n\\r\\n    uint256 public totalFraudDataPoints = 0;\\r\\n    uint256 public totalBribeDataPoints = 0;\\r\\n\\r\\n    bool public emergencyMode = false;\\r\\n\\r\\n    PricePoint[48] public fraudPrices;\\r\\n    PricePoint[48] public bribePrices;\\r\\n\\r\\n    mapping(address => VenezuelaStakerInfo) public venezuelaStakerInfo;\\r\\n    mapping(address => PanamaStakerInfo) public panamaStakerInfo;\\r\\n\\r\\n    // Events\\r\\n    event DepositPanama(address indexed user, uint256 amount);\\r\\n    event DepositVenezuela(address indexed user, uint256 amount);\\r\\n    event WithdrawPanama(address indexed user, uint256 amount, bool isTaxed);\\r\\n    event WithdrawVenezuela(address indexed user, uint256 amount, bool isTaxed);\\r\\n    event RewardPaid(address indexed user, uint256 amount);\\r\\n    event RewardTaxed(address indexed user, uint256 amount);\\r\\n    event FeeWithdrawn(address indexed user, uint256 amount);\\r\\n    event RandomNumberRequested(address indexed user);\\r\\n\\r\\n    constructor(\\r\\n        IFraudToken _fraud,\\r\\n        IBribeToken _bribe, \\r\\n        IERC20 _eth,\\r\\n        address _marketingAddr,\\r\\n        address _cashBriefCaseAddr,\\r\\n        address _pureBribingAddr\\r\\n    ) Ownable() ReentrancyGuard() {\\r\\n        fraud = _fraud;\\r\\n        bribe = _bribe;\\r\\n        eth = _eth;\\r\\n        marketingAddr = _marketingAddr;\\r\\n        cashBriefCaseAddr = _cashBriefCaseAddr;\\r\\n        pureBribingAddr = _pureBribingAddr;\\r\\n        vrfFee = 0.0065 ether;\\r\\n    }\\r\\n\\r\\n    function depositPanama(uint256 _amount) external nonReentrant onlyNonEmergencyMode {\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(_amount <= fraud.balanceOf(msg.sender), \\\"Not enough FRAUD tokens\\\");\\r\\n\\r\\n        PanamaStakerInfo storage user = panamaStakerInfo[msg.sender];\\r\\n\\r\\n        if(user.amount > 0) {\\r\\n            uint256 currentEpoch = fraud.getCurrentEpoch();\\r\\n            uint256 epochsElapsed = currentEpoch.sub(user.rebaseEpoch);\\r\\n            uint256 rebaseFactor = 1 ether;  // Start with 1 for multiplication\\r\\n            for (uint256 i = 0; i < epochsElapsed; i++) {\\r\\n                rebaseFactor = rebaseFactor.mul(975).div(1000);  // Decrease by 2.5% each epoch\\r\\n            }\\r\\n\\r\\n            // Rebase user's amount\\r\\n            uint256 debasedAmount = _amount.mul(rebaseFactor).div(1 ether);\\r\\n            user.amount = debasedAmount; \\r\\n        }\\r\\n\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        user.lockEndedTimestamp = block.timestamp.add(1 days);\\r\\n        user.startTimestamp = block.timestamp;\\r\\n        user.rebaseEpoch = fraud.getCurrentEpoch();  \\r\\n        totalStackedPanama = totalStackedPanama.add(_amount);\\r\\n        fraud.burn(msg.sender, _amount);\\r\\n\\r\\n        emit DepositPanama(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawPanama() external payable nonReentrant {\\r\\n        PanamaStakerInfo storage user = panamaStakerInfo[msg.sender];\\r\\n        require(user.lockEndedTimestamp <= block.timestamp, \\\"Still locked\\\");\\r\\n        require(user.amount > 0, \\\"No deposit made\\\");\\r\\n        require(address(vrf) != address(0), \\\"VRF not set\\\");\\r\\n        require(msg.value >= vrfFee, \\\"Not enough ETH for VRF fee\\\");\\r\\n        // vault = 0 for Panama, 0 = 0 reward\\r\\n        vrf.requestRandomWords(0, 0, msg.sender);\\r\\n        emit RandomNumberRequested(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdrawPanamaEmergency() external nonReentrant {\\r\\n        require(emergencyMode == true, \\\"Not in emergency mode\\\");\\r\\n        PanamaStakerInfo storage user = panamaStakerInfo[msg.sender];\\r\\n        require(user.amount > 0, \\\"No deposit made\\\");\\r\\n        withdrawPanamaVrf(msg.sender, 25);\\r\\n    }\\r\\n\\r\\n    function withdrawPanamaVrf(address _user, uint256 _randNum) public onlyVRF {\\r\\n        PanamaStakerInfo storage user = panamaStakerInfo[_user];\\r\\n\\r\\n        bool isTaxed = false;\\r\\n        // Calculate the rebase factor\\r\\n        uint256 currentEpoch = fraud.getCurrentEpoch();\\r\\n        uint256 epochsElapsed = currentEpoch.sub(user.rebaseEpoch);\\r\\n        uint256 rebaseFactor = 1 ether;  // Start with 1 for multiplication\\r\\n        if(epochsElapsed < 4){\\r\\n            for (uint256 i = 0; i < epochsElapsed; i++) {\\r\\n                rebaseFactor = rebaseFactor.mul(975).div(1000);  // Decrease by 2.5% each epoch\\r\\n            }\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < 4; i++) {\\r\\n                rebaseFactor = rebaseFactor.mul(975).div(1000);  // Decrease by 2.5% each epoch\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Rebase user's amount\\r\\n        uint256 debasedAmount = user.amount.mul(rebaseFactor).div(1 ether);\\r\\n\\r\\n        if(epochsElapsed > 4){\\r\\n            uint256 epochRebased = epochsElapsed.sub(4);\\r\\n            uint256 rebaseFactorPost = 1 ether;  // Start with 1 for multiplication\\r\\n\\r\\n            for (uint256 i = 0; i < epochRebased; i++) {\\r\\n                rebaseFactorPost = rebaseFactorPost.mul(900).div(1000);  // Decrease by 10% each epoch\\r\\n            }\\r\\n\\r\\n            debasedAmount = debasedAmount.mul(rebaseFactorPost).div(1 ether);\\r\\n        }\\r\\n\\r\\n        // Check if user will be taxable he has a 20% chance of getting taxed 50% of his debased amount\\r\\n\\r\\n        if(_randNum < 20) {  \\r\\n            uint256 taxAmount = debasedAmount.div(2);\\r\\n            taxAmountToTaxOffice(taxAmount, 0);\\r\\n            debasedAmount = debasedAmount.sub(taxAmount);\\r\\n            isTaxed = true;\\r\\n        }\\r\\n\\r\\n        fraud.mint(_user, debasedAmount);  // Mint rebased amount to the user\\r\\n\\r\\n        totalStackedPanama = totalStackedPanama.sub(user.amount);\\r\\n        user.amount = 0;\\r\\n\\r\\n        emit WithdrawPanama(_user, debasedAmount, isTaxed);\\r\\n    }\\r\\n\\r\\n    function depositVenezuela(uint256 _amount) external nonReentrant onlyNonEmergencyMode {\\r\\n        require(_amount > 0, \\\"Invalid amount\\\");\\r\\n        require(_amount <= fraud.balanceOf(msg.sender), \\\"Not enough FRAUD tokens\\\");\\r\\n        \\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[msg.sender];\\r\\n\\r\\n        if(user.amount > 0){\\r\\n            uint256 currentEpoch = fraud.getCurrentEpoch();\\r\\n            uint256 epochsElapsed = currentEpoch.sub(user.rebaseEpoch);\\r\\n            uint256 rebaseFactor = 1 ether; // Start with 1 for multiplication\\r\\n            \\r\\n            for (uint256 i = 0; i < epochsElapsed; i++) {\\r\\n                rebaseFactor = rebaseFactor.mul(900).div(1000);  // Decrease by 10% each epoch\\r\\n            }\\r\\n\\r\\n            // Rebase user's amount\\r\\n            uint256 debasedAmount = user.amount.mul(rebaseFactor).div(1 ether);\\r\\n            uint256 reward = calculateReward(msg.sender, debasedAmount);\\r\\n            user.amount = debasedAmount;  \\r\\n            user.delayedReward = reward;    \\r\\n        }\\r\\n\\r\\n        user.amount = user.amount.add(_amount);\\r\\n        user.lockEndedTimestamp = block.timestamp.add(6 hours);\\r\\n        user.startTimestamp = block.timestamp;\\r\\n        user.rebaseEpoch = fraud.getCurrentEpoch(); \\r\\n        //Calculate daily rewards\\r\\n        uint256 dailyReward = calculateDailyReward(_amount);\\r\\n        user.dailyReward = dailyReward;\\r\\n\\r\\n        totalStackedVenezuela = totalStackedVenezuela.add(_amount);\\r\\n        //Burn tokens\\r\\n        fraud.burn(msg.sender, _amount);\\r\\n        emit DepositVenezuela(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawVenezuela() external payable nonReentrant{\\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[msg.sender];\\r\\n        require(user.lockEndedTimestamp <= block.timestamp, \\\"Still locked\\\");\\r\\n        require(user.amount > 0, \\\"No deposit made\\\");\\r\\n        require(address(vrf) != address(0), \\\"VRF not set\\\");\\r\\n        require(msg.value >= vrfFee, \\\"Not enough ETH for VRF fee\\\");\\r\\n        // vault 1 for Venezuela, 0 = 0 reward\\r\\n        vrf.requestRandomWords(1, 0, msg.sender);\\r\\n        emit RandomNumberRequested(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdrawVenezuelaEmergency() external nonReentrant {\\r\\n        require(emergencyMode == true, \\\"Not in emergency mode\\\");\\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[msg.sender];\\r\\n        require(user.amount > 0, \\\"No deposit made\\\");\\r\\n        withdrawVenezuelaVrf(msg.sender, 69, 69);\\r\\n    }\\r\\n\\r\\n    function withdrawVenezuelaVrf(address _user, uint256 randNum, uint256 randNum2) public onlyVRF {\\r\\n        // We get the user's staking info\\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[_user];\\r\\n        // Declare a bool to check if the user will be taxed\\r\\n        bool isTaxed = false;\\r\\n        // Get the current epoch\\r\\n        uint256 currentEpoch = fraud.getCurrentEpoch();\\r\\n        // Calculate the epoch elapsed\\r\\n        uint256 epochsElapsed = currentEpoch.sub(user.rebaseEpoch);\\r\\n        // Declare a rebase factor\\r\\n        uint256 rebaseFactor = 1 ether; // Start with 1 for multiplication\\r\\n        \\r\\n        for (uint256 i = 0; i < epochsElapsed; i++) {\\r\\n            rebaseFactor = rebaseFactor.mul(900).div(1000);  // Decrease by 10% each epoch\\r\\n        }\\r\\n\\r\\n        // Rebase user's amount\\r\\n        uint256 debasedAmount = user.amount.mul(rebaseFactor).div(1 ether);\\r\\n        // Calculate the reward\\r\\n        uint256 reward = calculateReward(_user, debasedAmount);\\r\\n        if(emergencyMode == false){\\r\\n            if(reward >= 1 ether){\\r\\n                // Wa add delayed reward to the reward\\r\\n                reward = reward.add(user.delayedReward);\\r\\n                claimBribeReward(_user, reward, randNum2);\\r\\n            }\\r\\n    \\r\\n            if (randNum < 33) {  \\r\\n                isTaxed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(isTaxed == false){\\r\\n            fraud.mint(_user, debasedAmount);\\r\\n        } else \\r\\n        {\\r\\n            taxAmountToTaxOffice(debasedAmount, 1);\\r\\n        }\\r\\n            \\r\\n        totalStackedVenezuela = totalStackedVenezuela.sub(user.amount);\\r\\n\\r\\n        user.amount = 0;\\r\\n\\r\\n        emit WithdrawVenezuela(_user, debasedAmount, isTaxed);\\r\\n    }\\r\\n\\r\\n    function taxAmountToTaxOffice(uint256 _debasedAmount, uint256 vault) internal {\\r\\n        // 75% Bribing system \\r\\n        uint256 bribingSystemAmount = _debasedAmount.mul(75).div(100);\\r\\n        // 70% of the 75% Bribing System\\r\\n        uint256 cashBriefcaseAmount = bribingSystemAmount.mul(70).div(100);\\r\\n        fraud.mint(cashBriefCaseAddr, cashBriefcaseAmount);\\r\\n        // 30% of the 75% Bribing System\\r\\n        uint256 pureBribingAmount = bribingSystemAmount.mul(30).div(100);\\r\\n        fraud.mint(pureBribingAddr, pureBribingAmount);\\r\\n        // 1% Marketing wallet\\r\\n        uint256 marketingAmount = _debasedAmount.mul(1).div(100);\\r\\n        fraud.mint(marketingAddr, marketingAmount);\\r\\n        // add  to totalTaxedVenezuela\\r\\n\\r\\n        if(vault == 0){\\r\\n            totalTaxedPanama = totalTaxedPanama.add(bribingSystemAmount);\\r\\n            totalTaxedPanama = totalTaxedPanama.add(marketingAmount);\\r\\n        } else \\r\\n        {\\r\\n            totalTaxedVenezuela = totalTaxedVenezuela.add(bribingSystemAmount);\\r\\n            totalTaxedVenezuela = totalTaxedVenezuela.add(marketingAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimBribeReward(address _account, uint256 reward, uint256 randNum) internal {\\r\\n        require(\\r\\n            msg.sender == _account || msg.sender == address(vrf),\\r\\n            \\\"not allowed\\\"\\r\\n        );\\r\\n\\r\\n        // Loading user staking infos\\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[_account];\\r\\n        // Reset the startTimestamp to the current blockTimestamp to reset the reward calculation\\r\\n        user.startTimestamp = block.timestamp;\\r\\n        // User has 33% chance of getting taxed 100% of his reward\\r\\n        if(randNum < 33){\\r\\n            user.rewardTaxed = user.rewardTaxed.add(reward);\\r\\n            emit RewardTaxed(_account, reward);\\r\\n        } else \\r\\n        {\\r\\n            user.rewardWithdrawn = user.rewardWithdrawn.add(reward);\\r\\n            bribe.mint(_account, reward);\\r\\n            emit RewardPaid(_account, reward);\\r\\n        }\\r\\n        user.delayedReward = 0;\\r\\n    }\\r\\n\\r\\n    function claimBribe() external payable nonReentrant  onlyNonEmergencyMode {\\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[msg.sender];\\r\\n        require(user.amount > 0, \\\"No deposit made\\\");\\r\\n\\r\\n        uint256 currentEpoch = fraud.getCurrentEpoch();\\r\\n        uint256 epochsElapsed = currentEpoch.sub(user.rebaseEpoch);\\r\\n        uint256 rebaseFactor = 1 ether;  // Start with 1 for multiplication\\r\\n        for (uint256 i = 0; i < epochsElapsed; i++) {\\r\\n            rebaseFactor = rebaseFactor.mul(900).div(1000);  // Decrease by 10% each epoch\\r\\n        }\\r\\n        // Rebase user's amount\\r\\n        uint256 debasedAmount = user.amount.mul(rebaseFactor).div(1 ether);\\r\\n        uint256 reward = calculateReward(msg.sender, debasedAmount);\\r\\n        reward = reward.add(user.delayedReward);\\r\\n        require(reward >= 1 ether, \\\"No reward to claim\\\");\\r\\n        require(address(vrf) != address(0), \\\"VRF not set\\\");\\r\\n        require(msg.value >= vrfFee, \\\"Not enough ETH for VRF fee\\\");\\r\\n        // 2 => ClaimBribe, reward = reward\\r\\n        vrf.requestRandomWords(2, reward, msg.sender);\\r\\n        emit RandomNumberRequested(msg.sender);\\r\\n    }\\r\\n\\r\\n    function claimBribeVrf(address _user, uint256 _reward, uint256 _randNum) external nonReentrant onlyNonEmergencyMode onlyVRF {\\r\\n        claimBribeReward(_user, _reward, _randNum);\\r\\n    }\\r\\n\\r\\n    function calculateReward(address userAddr, uint256 debasedAmount ) public view returns (uint256) {\\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[userAddr];\\r\\n        uint256 userAmount = debasedAmount;\\r\\n        if (userAmount == 0) {\\r\\n            return 0;\\r\\n        }   \\r\\n\\r\\n        uint256 blockTimestamp = uint256(block.timestamp);\\r\\n        uint256 timePassed = blockTimestamp.sub(user.startTimestamp);\\r\\n        uint256 dailyReward = calculateDailyReward(debasedAmount);\\r\\n        uint256 reward = dailyReward.mul(timePassed).div(86400); // scale down by the number of seconds in a day\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function calculateDailyReward(uint256 _debasedAmount) public view returns (uint256) {\\r\\n        uint256 fraudprice = getFraudTwap();\\r\\n        uint256 bribeprice = getBribeTwap();\\r\\n        // Here we're assuming that fraudprice and bribeprice are scaled by 1e18 to provide enough precision\\r\\n        require(bribeprice > 0, \\\"Bribe price is zero, can't divide by zero\\\");\\r\\n        uint256 priceratio = fraudprice.mul(1e18).div(bribeprice); \\r\\n        uint256 userTokenStaked = _debasedAmount;\\r\\n        uint256 reward = priceratio.mul(userTokenStaked).div(1e18); // Scale down the reward back to normal\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function getPanamaCurrentStake(address _user) external view  returns(uint256){\\r\\n        PanamaStakerInfo storage user = panamaStakerInfo[_user];\\r\\n        uint256 currentEpoch = fraud.getCurrentEpoch();\\r\\n        uint256 epochsElapsed = currentEpoch.sub(user.rebaseEpoch);\\r\\n        uint256 rebaseFactor = 1 ether;  // Start with 1 for multiplication\\r\\n        if(epochsElapsed < 4){\\r\\n            for (uint256 i = 0; i < epochsElapsed; i++) {\\r\\n                rebaseFactor = rebaseFactor.mul(975).div(1000);  // Decrease by 2.5% each epoch\\r\\n            }\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < 4; i++) {\\r\\n                rebaseFactor = rebaseFactor.mul(975).div(1000);  // Decrease by 2.5% each epoch\\r\\n            }\\r\\n        }\\r\\n        // Rebase user's amount\\r\\n        uint256 debasedAmount = user.amount.mul(rebaseFactor).div(1 ether);\\r\\n\\r\\n        if(epochsElapsed > 4){\\r\\n            uint256 epochRebased = epochsElapsed.sub(4);\\r\\n            uint256 rebaseFactorPost = 1 ether;  // Start with 1 for multiplication\\r\\n\\r\\n            for (uint256 i = 0; i < epochRebased; i++) {\\r\\n                rebaseFactorPost = rebaseFactorPost.mul(900).div(1000);  // Decrease by 10% each epoch\\r\\n            }\\r\\n\\r\\n            debasedAmount = debasedAmount.mul(rebaseFactorPost).div(1 ether);\\r\\n        }\\r\\n        return debasedAmount;\\r\\n    }\\r\\n\\r\\n    function getVenezuelaCurrentStake(address _user) external view returns(uint256){\\r\\n        VenezuelaStakerInfo storage user = venezuelaStakerInfo[_user];\\r\\n\\r\\n        uint256 currentEpoch = fraud.getCurrentEpoch();\\r\\n        uint256 epochsElapsed = currentEpoch.sub(user.rebaseEpoch);\\r\\n        uint256 rebaseFactor = 1 ether; // Start with 1 for multiplication\\r\\n\\r\\n        for (uint256 i = 0; i < epochsElapsed; i++) {\\r\\n            rebaseFactor = rebaseFactor.mul(900).div(1000);  // Decrease by 10% each epoch\\r\\n        }\\r\\n        uint256 debasedAmount = user.amount.mul(rebaseFactor).div(1 ether);\\r\\n        return debasedAmount;\\r\\n    }\\r\\n\\r\\n    function logFraudPrice() public {\\r\\n        uint256 currentPrice = getFraudPrice();\\r\\n        require(block.timestamp.sub(lastUpdateTimeFraud) >= INTERVAL, \\\"Too soon to update.\\\");\\r\\n\\r\\n        fraudPrices[currentFraudIndex] = PricePoint(block.timestamp, currentPrice);\\r\\n        currentFraudIndex = (currentFraudIndex.add(1)) % 48;\\r\\n\\r\\n        if (totalFraudDataPoints < 48) {\\r\\n            totalFraudDataPoints++;\\r\\n        }\\r\\n\\r\\n        lastUpdateTimeFraud = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function logBribePrice() public {\\r\\n        uint256 currentPrice = getBribePrice();\\r\\n        require(block.timestamp.sub(lastUpdateTimeBribe) >= INTERVAL, \\\"Too soon to update.\\\");\\r\\n\\r\\n        bribePrices[currentBribeIndex] = PricePoint(block.timestamp, currentPrice);\\r\\n        currentBribeIndex = (currentBribeIndex.add(1)) % 48;\\r\\n\\r\\n        if (totalBribeDataPoints < 48) {\\r\\n            totalBribeDataPoints++;\\r\\n        }\\r\\n\\r\\n        lastUpdateTimeBribe = block.timestamp;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function getFraudPrice() public view returns (uint256){\\r\\n        uint256 fraudBalance = fraud.balanceOf(fraudpair); // 18 decimals\\r\\n        uint256 ethBalance = eth.balanceOf(fraudpair); // 18 decimals\\r\\n        require(fraudBalance > 0, \\\"divison by zero error\\\");\\r\\n        uint256 fraudprice = ethBalance.mul(1e18).div(fraudBalance);\\r\\n        return fraudprice;\\r\\n    }\\r\\n    \\r\\n    function getBribePrice() public view returns (uint256){\\r\\n        uint256 bribeBalance = bribe.balanceOf(bribepair); // 18 decimals\\r\\n        uint256 ethBalance = eth.balanceOf(bribepair); // 18 decimals\\r\\n        require(bribeBalance > 0, \\\"divison by zero error\\\");\\r\\n        uint256 bribeprice = ethBalance.mul(1e18).div(bribeBalance);\\r\\n        return bribeprice;\\r\\n    }\\r\\n\\r\\n    function getFraudTwap() public view returns (uint256) {\\r\\n        if(totalFraudDataPoints == 0){\\r\\n            return getFraudPrice();\\r\\n        }\\r\\n        uint256 total = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < totalFraudDataPoints; i++) {\\r\\n            total = total.add(fraudPrices[i].price);\\r\\n        }\\r\\n\\r\\n        return total / totalFraudDataPoints;\\r\\n    }\\r\\n\\r\\n    function getBribeTwap() public view returns (uint256) {\\r\\n        if(totalBribeDataPoints == 0){\\r\\n            return getBribePrice();\\r\\n        }\\r\\n        uint256 total = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < totalBribeDataPoints; i++) {\\r\\n            total = total.add(bribePrices[i].price);\\r\\n        }\\r\\n\\r\\n        return total.div(totalBribeDataPoints);\\r\\n    }\\r\\n\\r\\n    function getStructInfo(address userAddr) public view  returns (VenezuelaStakerInfo memory)  {\\r\\n        return venezuelaStakerInfo[userAddr];\\r\\n    }\\r\\n\\r\\n    function setVRF(IFraudVRF _vrf) external onlyOwner {\\r\\n        vrf = _vrf;\\r\\n    }\\r\\n\\r\\n    function setFraudPair(address _fraudpair) public onlyOwner {\\r\\n        fraudpair = _fraudpair;\\r\\n    } \\r\\n\\r\\n    function setBribePair(address _bribepair) public onlyOwner {\\r\\n        bribepair = _bribepair;\\r\\n    }\\r\\n\\r\\n    function setMarketingAddr(address _marketingAddr) public onlyOwner {\\r\\n        marketingAddr = _marketingAddr;\\r\\n    }\\r\\n\\r\\n    function setCashBriefCase(address _cashBriefCaseAddr) public onlyOwner {\\r\\n        cashBriefCaseAddr = _cashBriefCaseAddr;\\r\\n    }\\r\\n\\r\\n    function setPureBribing(address _pureBribingAddr) public onlyOwner {\\r\\n        pureBribingAddr = _pureBribingAddr;\\r\\n    }\\r\\n\\r\\n    function setVrfFee(uint256 _vrfFee) public onlyOwner {\\r\\n        // fee in ether\\r\\n        vrfFee = _vrfFee;\\r\\n    }\\r\\n\\r\\n    // withdraw vrfFee\\r\\n    function withdrawFee() public onlyOwner {\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        payable(msg.sender).transfer(ethBalance);\\r\\n        emit FeeWithdrawn(msg.sender, ethBalance);\\r\\n    }\\r\\n\\r\\n    modifier onlyVRF() {\\r\\n        require(msg.sender == address(vrf) || emergencyMode == true, \\\"Only VRF can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNonEmergencyMode() {\\r\\n        require(emergencyMode == false, \\\"Emergency mode\\\");\\r\\n        _;\\r\\n    }\\r\\n    function toggleEmergencyMode() public onlyOwner {\\r\\n        emergencyMode = !emergencyMode;\\r\\n    }\\r\\n        // Rescue tokens\\r\\n    function rescueTokens(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        require(to != address(0), \\\"Rescue to the zero address\\\");\\r\\n        require(token != address(0), \\\"Rescue of the zero address\\\");\\r\\n        \\r\\n        // transfer to\\r\\n        SafeERC20.safeTransfer(IERC20(token),to, amount);\\r\\n    }\\r\\n    \\r\\n    receive() external payable {}\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IFraudToken\",\"name\":\"_fraud\",\"type\":\"address\"},{\"internalType\":\"contract IBribeToken\",\"name\":\"_bribe\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_eth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cashBriefCaseAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pureBribingAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositPanama\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositVenezuela\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RandomNumberRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTaxed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTaxed\",\"type\":\"bool\"}],\"name\":\"WithdrawPanama\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTaxed\",\"type\":\"bool\"}],\"name\":\"WithdrawVenezuela\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INT_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribe\",\"outputs\":[{\"internalType\":\"contract IBribeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bribePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bribepair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debasedAmount\",\"type\":\"uint256\"}],\"name\":\"calculateDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debasedAmount\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashBriefCaseAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randNum\",\"type\":\"uint256\"}],\"name\":\"claimBribeVrf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBribeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFraudIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPanama\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositVenezuela\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraud\",\"outputs\":[{\"internalType\":\"contract IFraudToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fraudPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fraudpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBribePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBribeTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFraudPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFraudTwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPanamaCurrentStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getStructInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTaxed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"internalType\":\"struct TaxHavens.VenezuelaStakerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVenezuelaCurrentStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimeBribe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTimeFraud\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logBribePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logFraudPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"panamaStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseEpoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pureBribingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bribepair\",\"type\":\"address\"}],\"name\":\"setBribePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashBriefCaseAddr\",\"type\":\"address\"}],\"name\":\"setCashBriefCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fraudpair\",\"type\":\"address\"}],\"name\":\"setFraudPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddr\",\"type\":\"address\"}],\"name\":\"setMarketingAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pureBribingAddr\",\"type\":\"address\"}],\"name\":\"setPureBribing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFraudVRF\",\"name\":\"_vrf\",\"type\":\"address\"}],\"name\":\"setVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vrfFee\",\"type\":\"uint256\"}],\"name\":\"setVrfFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBribeDataPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFraudDataPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStackedPanama\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStackedVenezuela\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTaxedPanama\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTaxedVenezuela\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"venezuelaStakerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTaxed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndedTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebaseEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrf\",\"outputs\":[{\"internalType\":\"contract IFraudVRF\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPanama\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPanamaEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_randNum\",\"type\":\"uint256\"}],\"name\":\"withdrawPanamaVrf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVenezuela\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVenezuelaEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randNum2\",\"type\":\"uint256\"}],\"name\":\"withdrawVenezuelaVrf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TaxHavens", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001a0120eab44157ba10d767e0f4a38a0a6452bcf900000000000000000000000085acb547000531d96fd64f6d87ee4df0965e5925000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000f8e6f74759196a629007c64bb709293c648925f200000000000000000000000048dc81a4a01ea9a2e3cab4fbbb0df346285e6f42000000000000000000000000c286cc145823dd509008aa75e866946f89bc47e7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}