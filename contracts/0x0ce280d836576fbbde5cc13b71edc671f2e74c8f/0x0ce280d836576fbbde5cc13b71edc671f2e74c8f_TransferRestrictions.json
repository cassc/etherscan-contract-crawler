{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-09-08\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-02-03\r\n*/\r\n\r\n// File: contracts/1404/IERC1404.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface IERC1404 {\r\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n    /// @param from Sending address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function detectTransferRestriction (address from, address to, uint256 value) external view returns (uint8);\r\n\r\n    /// @notice Detects if a transferFrom will be reverted and if so returns an appropriate reference code\r\n    /// @param sender Transaction sending address\r\n    /// @param from Source of funds address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function detectTransferFromRestriction (address sender, address from, address to, uint256 value) external view returns (uint8);\r\n\r\n    /// @notice Returns a human-readable message for a given restriction code\r\n    /// @param restrictionCode Identifier for looking up a message\r\n    /// @return Text showing the restriction's reasoning\r\n    /// @dev Overwrite with your custom message and restrictionCode handling\r\n    function messageForTransferRestriction (uint8 restrictionCode) external view returns (string memory);\r\n}\r\n\r\ninterface IERC1404getSuccessCode {\r\n    /// @notice Return the uint256 that represents the SUCCESS_CODE\r\n    /// @return uint256 SUCCESS_CODE\r\n    function getSuccessCode () external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title IERC1404Success\r\n * @dev Combines IERC1404 and IERC1404getSuccessCode interfaces, to be implemented by the TransferRestrictions contract\r\n */\r\ncontract IERC1404Success is IERC1404getSuccessCode, IERC1404 {\r\n}\r\n\r\n// File: contracts/1404/IERC1404Validators.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title IERC1404Validators\r\n * @dev Interfaces implemented by the token contract to be called by the TransferRestrictions contract\r\n */\r\ninterface IERC1404Validators {\r\n    /// @notice Returns the token balance for an account\r\n    /// @param account The address to get the token balance of\r\n    /// @return uint256 representing the token balance for the account\r\n    function balanceOf (address account) external view returns (uint256);\r\n\r\n    /// @notice Returns a boolean indicating the paused state of the contract\r\n    /// @return true if contract is paused, false if unpaused\r\n    function paused () external view returns (bool);\r\n\r\n    /// @notice Determine if sender and receiver are whitelisted, return true if both accounts are whitelisted\r\n    /// @param from The address sending tokens.\r\n    /// @param to The address receiving tokens.\r\n    /// @return true if both accounts are whitelisted, false if not\r\n    function checkWhitelists (address from, address to) external view returns (bool);\r\n\r\n    /// @notice Determine if a users tokens are locked preventing a transfer\r\n    /// @param _address the address to retrieve the data from\r\n    /// @param amount the amount to send\r\n    /// @param balance the token balance of the sending account\r\n    /// @return true if user has sufficient unlocked token to transfer the requested amount, false if not\r\n    function checkTimelock (address _address, uint256 amount, uint256 balance) external view returns (bool);\r\n}\r\n\r\n// File: contracts/restrictions/RestrictionMessages.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ncontract RestrictionMessages {\r\n    // ERC1404 Error codes and messages\r\n    uint8 public constant SUCCESS_CODE = 0;\r\n    uint8 public constant FAILURE_NON_WHITELIST = 1;\r\n    uint8 public constant FAILURE_TIMELOCK = 2;\r\n    uint8 public constant FAILURE_CONTRACT_PAUSED = 3;\r\n\r\n    string public constant SUCCESS_MESSAGE = \"SUCCESS\";\r\n    string public constant FAILURE_NON_WHITELIST_MESSAGE = \"The transfer was restricted due to white list configuration.\";\r\n    string public constant FAILURE_TIMELOCK_MESSAGE = \"The transfer was restricted due to timelocked tokens.\";\r\n    string public constant FAILURE_CONTRACT_PAUSED_MESSAGE = \"The transfer was restricted due to the contract being paused.\";\r\n    string public constant UNKNOWN_ERROR = \"Unknown Error Code\";\r\n}\r\n\r\n// File: contracts/restrictions/TransferRestrictions.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TransferRestrictions\r\n * @dev Defines the rules the validate transfers and the error messages\r\n */\r\ncontract TransferRestrictions is IERC1404, RestrictionMessages, IERC1404Success {\r\n\r\n    IERC1404Validators validators;\r\n\r\n    /**\r\n    Constructor sets the address the validators contract which should be the token contract\r\n    */\r\n    constructor(address _validators) public\r\n    {\r\n        require(_validators != address(0), \"0x0 is not a valid _validators address\");\r\n        validators = IERC1404Validators(_validators);\r\n    }\r\n\r\n    /**\r\n    This function detects whether a transfer should be restricted and not allowed.\r\n    If the function returns SUCCESS_CODE (0) then it should be allowed.\r\n    */\r\n    function detectTransferRestriction (address from, address to, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint8)\r\n    {\r\n        // Confirm that that addresses are whitelisted\r\n        if(!validators.checkWhitelists(from,to)) {\r\n            return FAILURE_NON_WHITELIST;\r\n        }\r\n\r\n        // If the from account is locked up, then don't allow the transfer\r\n        if(!validators.checkTimelock(from, amount, validators.balanceOf(from))) {\r\n            return FAILURE_TIMELOCK;\r\n        }\r\n\r\n        // If the entire contract is paused, then the transfer should be prevented\r\n        if(validators.paused()) {\r\n            return FAILURE_CONTRACT_PAUSED;\r\n        }\r\n\r\n        // If no restrictions were triggered return success\r\n        return SUCCESS_CODE;\r\n    }\r\n\r\n    /**\r\n    This function detects whether a transfer should be restricted and not allowed.\r\n    If the function returns SUCCESS_CODE (0) then it should be allowed.\r\n    */\r\n    function detectTransferFromRestriction (address sender, address from, address to, uint256 value)\r\n        public\r\n        view\r\n        returns (uint8)\r\n    {\r\n        // Confirm that that addresses are whitelisted\r\n        if(!validators.checkWhitelists(sender, to)) {\r\n            return FAILURE_NON_WHITELIST;\r\n        }\r\n\r\n        // return the result of detectTransferRestriction\r\n        return detectTransferRestriction(from, to, value);\r\n    }\r\n\r\n    /**\r\n    This function allows a wallet or other client to get a human readable string to show\r\n    a user if a transfer was restricted.  It should return enough information for the user\r\n    to know why it failed.\r\n    */\r\n    function messageForTransferRestriction (uint8 restrictionCode)\r\n        external\r\n        view\r\n        returns (string memory)\r\n    {\r\n        if (restrictionCode == SUCCESS_CODE) {\r\n            return SUCCESS_MESSAGE;\r\n        }\r\n\r\n        if (restrictionCode == FAILURE_NON_WHITELIST) {\r\n            return FAILURE_NON_WHITELIST_MESSAGE;\r\n        }\r\n\r\n        if (restrictionCode == FAILURE_TIMELOCK) {\r\n            return FAILURE_TIMELOCK_MESSAGE;\r\n        }\r\n\r\n        if (restrictionCode == FAILURE_CONTRACT_PAUSED) {\r\n            return FAILURE_CONTRACT_PAUSED_MESSAGE;\r\n        }\r\n\r\n        return UNKNOWN_ERROR;\r\n    }\r\n\r\n    function getSuccessCode() external view returns (uint256) {\r\n      return SUCCESS_CODE;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferFromRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_CODE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAILURE_TIMELOCK_MESSAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAILURE_NON_WHITELIST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAILURE_TIMELOCK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSuccessCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAILURE_CONTRACT_PAUSED_MESSAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAILURE_CONTRACT_PAUSED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNKNOWN_ERROR\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FAILURE_NON_WHITELIST_MESSAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUCCESS_MESSAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_validators\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]", "ContractName": "TransferRestrictions", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cee2a33c80d6202d283ad20b27994f322502b62d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://43bc55e1d263289896993ba8cbe64bf5b6e4b6ff2ae1cd545c94b857c5c80b35"}