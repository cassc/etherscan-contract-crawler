{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ChartAIStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * // importANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ncontract ChartAIStaking is Ownable, ReentrancyGuard {\\n    address public stakingToken = 0xee3200F94a1A2345E6Cc486032a5Df1D50cb621c;\\n    address public feeAddress = 0xCCCA95EBAF66002E0C2F4bc3B7D3F2c997609255;\\n    address public buyBackWallet;\\n\\n    bool public isPaused = true;\\n\\n    uint256 public withdrawFee = 10;\\n    uint256 public depositFee = 0;\\n    uint256 public feeDominator = 1000;\\n    uint256 public rate = 12;\\n    uint256 public lockdays = 365 days;\\n    uint256 public totalStaked = 0;\\n    uint256 public performanceFee = 0 ether;\\n\\n    mapping(address => Stake[]) public userStakes;\\n    mapping(address => UserInfo) public userStaked;\\n\\n    struct Stake {\\n        uint256 amount; // amount to stake\\n        uint256 stakedTime;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount;\\n    }\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    constructor() {\\n        buyBackWallet = msg.sender;\\n    }\\n\\n    function startStaking() external onlyOwner {\\n        isPaused = false;\\n    }\\n\\n    function stopStaking() external onlyOwner {\\n        isPaused = true;\\n    }\\n\\n    function updateFee(\\n        uint256 _depositFee,\\n        uint256 _withdrawFee\\n    ) external onlyOwner {\\n        depositFee = _depositFee;\\n        withdrawFee = _withdrawFee;\\n    }\\n\\n    function updateRate(uint256 _rate, uint256 _lockdays) external onlyOwner {\\n        rate = _rate;\\n        lockdays = _lockdays;\\n    }\\n\\n    function updateToken(address _staking) external onlyOwner {\\n        stakingToken = _staking;\\n    }\\n\\n    function updateFeeAddress(address _addr) external onlyOwner {\\n        feeAddress = _addr;\\n    }\\n\\n    function setServiceInfo(address _addr, uint256 _fee) external {\\n        require(msg.sender == buyBackWallet, \\\"setServiceInfo: FORBIDDEN\\\");\\n        require(_addr != address(0x0), \\\"Invalid address\\\");\\n        require(_fee < 0.05 ether, \\\"fee cannot exceed 0.05 ether\\\");\\n\\n        buyBackWallet = _addr;\\n        performanceFee = _fee;\\n    }\\n\\n    function removeStuckTokens(address token) external {\\n        require(msg.sender == buyBackWallet, \\\"removeStuckTokens: FORBIDDEN\\\");\\n        if (token == address(0))\\n            payable(msg.sender).transfer(address(this).balance);\\n        else\\n            IERC20(token).transfer(\\n                msg.sender,\\n                IERC20(token).balanceOf(address(this))\\n            );\\n    }\\n\\n    function _transferPerformanceFee() internal {\\n        require(\\n            msg.value >= performanceFee,\\n            \\\"should pay small gas to compound or harvest\\\"\\n        );\\n\\n        payable(buyBackWallet).transfer(performanceFee);\\n        if (msg.value > performanceFee) {\\n            payable(msg.sender).transfer(msg.value - performanceFee);\\n        }\\n    }\\n\\n    function availableRewardTokens() public view returns (uint256) {\\n        uint256 _amount = IERC20(stakingToken).balanceOf(address(this));\\n        if (_amount < totalStaked) return 0;\\n        return _amount - totalStaked;\\n    }\\n\\n    function pendingReward(address account) external view returns (uint256) {\\n        Stake[] storage stakes = userStakes[account];\\n\\n        uint256 pending = 0;\\n        for (uint256 j = 0; j < stakes.length; j++) {\\n            Stake storage stake = stakes[j];\\n            if (stake.amount == 0) continue;\\n\\n            uint256 _pending = ((stake.amount * rate) *\\n                (block.timestamp - stake.stakedTime)) /\\n                lockdays /\\n                100;\\n\\n            pending = pending + _pending;\\n        }\\n        return pending;\\n    }\\n\\n    function deposit(uint256 _amount) external payable nonReentrant {\\n        require(!isPaused, \\\"Staking is paused\\\");\\n        require(_amount > 0, \\\"Amount should be greator than 0\\\");\\n\\n        _transferPerformanceFee();\\n\\n        UserInfo storage user = userStaked[msg.sender];\\n\\n        uint256 prevAmount = IERC20(stakingToken).balanceOf(address(this));\\n        IERC20(stakingToken).transferFrom(msg.sender, address(this), _amount);\\n        uint256 realAmount = IERC20(stakingToken).balanceOf(address(this)) -\\n            prevAmount;\\n\\n        if (depositFee > 0) {\\n            uint256 fee = (realAmount * depositFee) / feeDominator;\\n            if (fee > 0) {\\n                IERC20(stakingToken).transfer(feeAddress, fee);\\n                realAmount = realAmount - fee;\\n            }\\n        }\\n\\n        _addStake(msg.sender, realAmount);\\n\\n        user.amount = user.amount + realAmount;\\n        totalStaked = totalStaked + realAmount;\\n\\n        emit Deposit(msg.sender, realAmount);\\n    }\\n\\n    function withdraw() external payable nonReentrant {\\n        _transferPerformanceFee();\\n\\n        UserInfo storage user = userStaked[msg.sender];\\n        Stake[] storage stakes = userStakes[msg.sender];\\n\\n        uint256 pending = 0;\\n        for (uint256 j = 0; j < stakes.length; j++) {\\n            Stake storage stake = stakes[j];\\n            if (stake.amount == 0) continue;\\n\\n            uint256 _pending = ((stake.amount * rate) *\\n                (block.timestamp - stake.stakedTime)) /\\n                lockdays /\\n                100;\\n\\n            pending = pending + _pending;\\n\\n            stake.amount = 0;\\n        }\\n\\n        if (pending > 0) {\\n            require(\\n                availableRewardTokens() >= pending,\\n                \\\"Insufficient reward tokens\\\"\\n            );\\n            IERC20(stakingToken).transfer(address(msg.sender), pending);\\n        }\\n\\n        uint256 realAmount = user.amount;\\n        user.amount = 0;\\n        totalStaked = totalStaked - realAmount;\\n\\n        if (realAmount > 0) {\\n            if (withdrawFee > 0) {\\n                uint256 fee = (realAmount * withdrawFee) / feeDominator;\\n                IERC20(stakingToken).transfer(feeAddress, fee);\\n                realAmount = realAmount - fee;\\n            }\\n\\n            IERC20(stakingToken).transfer(address(msg.sender), realAmount);\\n        }\\n\\n        emit Withdraw(msg.sender, realAmount);\\n    }\\n\\n    function _addStake(address _account, uint256 _amount) internal {\\n        Stake[] storage stakes = userStakes[_account];\\n\\n        uint256 stakedTime = block.timestamp;\\n        uint256 i = stakes.length;\\n\\n        stakes.push(); // grow the array\\n\\n        // insert the stake\\n        Stake storage newStake = stakes[i];\\n        newStake.stakedTime = stakedTime;\\n        newStake.amount = _amount;\\n    }\\n\\n    function compoundReward() external payable nonReentrant {\\n        _transferPerformanceFee();\\n\\n        UserInfo storage user = userStaked[msg.sender];\\n        Stake[] storage stakes = userStakes[msg.sender];\\n\\n        uint256 pending = 0;\\n        for (uint256 j = 0; j < stakes.length; j++) {\\n            Stake storage stake = stakes[j];\\n            if (stake.amount == 0) continue;\\n\\n            uint256 _pending = ((stake.amount * rate) *\\n                (block.timestamp - stake.stakedTime)) /\\n                lockdays /\\n                100;\\n\\n            pending = pending + _pending;\\n            stake.amount = stake.amount + _pending;\\n            stake.stakedTime = block.timestamp;\\n        }\\n\\n        if (pending > 0) {\\n            require(\\n                availableRewardTokens() >= pending,\\n                \\\"Insufficient reward tokens\\\"\\n            );\\n\\n            user.amount = user.amount + pending;\\n            totalStaked = totalStaked + pending;\\n\\n            emit Deposit(msg.sender, pending);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"availableRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockdays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setServiceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockdays\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ChartAIStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}