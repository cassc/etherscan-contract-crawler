{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"mainnet/0x2Db892C4D67027FD77f1d1f35E5BF764Ea4d7529/CrocodileTears.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ncontract CrocodileTears {\\r\\n\\r\\n    error MaxSupplyReached();\\r\\n    error InvalidValue();\\r\\n    error RequestingTooMany();\\r\\n    error TransferFailed();\\r\\n    error OnlyOwner();\\r\\n\\r\\n    event Mint(address indexed minter, uint256 indexed amount, uint256 startID);\\r\\n\\r\\n    uint256 public TOTAL_SUPPLY = 0;\\r\\n    uint256 public PRICE = 0.0059 * 1 ether;\\r\\n    uint256 public immutable MAX_SUPPLY = 5999;\\r\\n\\r\\n    address OWNER;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != OWNER) {\\r\\n            revert OnlyOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        OWNER = msg.sender;\\r\\n    }\\r\\n\\r\\n    function setPrice(uint256 _PRICE) external onlyOwner {\\r\\n        PRICE = _PRICE;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) external payable {\\r\\n        if (TOTAL_SUPPLY == MAX_SUPPLY) { revert MaxSupplyReached(); }\\r\\n        if ((TOTAL_SUPPLY + amount) > MAX_SUPPLY) { revert RequestingTooMany(); }\\r\\n        if ((PRICE * amount) != msg.value) { revert InvalidValue(); }\\r\\n        \\r\\n\\r\\n        (bool success,) = address(OWNER).call{value: msg.value}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert TransferFailed();\\r\\n        }\\r\\n\\r\\n        emit Mint(msg.sender, amount, TOTAL_SUPPLY);\\r\\n        \\r\\n        unchecked {\\r\\n            TOTAL_SUPPLY += amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        (bool success,) = address(OWNER).call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert TransferFailed();\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestingTooMany\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startID\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_PRICE\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrocodileTears", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}