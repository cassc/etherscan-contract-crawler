{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.5.0\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/Point.sol\r\n\r\n\r\n/*\r\n * @dev The {Point} is an ERC20 contract that represents rewards\r\n * for staking the NFT in staking contract.\r\n *\r\n * It allows minting by the {staking} contract and burning by the {owner}.\r\n *\r\n * The token is not transferable hence the {transfer} and\r\n * {transferFrom} functions revert.\r\n **/\r\ncontract Point is\r\n    Ownable,\r\n    ERC20\r\n{\r\n    // Address of staking contract.\r\n    address public staking;\r\n\r\n    constructor(\r\n        address _staking\r\n    ) ERC20(\"Point\", \"POINT\") {\r\n        staking = _staking;\r\n    }\r\n\r\n    /*\r\n     * @dev Allows minting of {Point} tokens.\r\n     *\r\n     * Requirements:\r\n     * - Can only be called by the staking contract.\r\n     **/\r\n    function mint(address to, uint256 amount) external {\r\n        require(\r\n            msg.sender == staking,\r\n            \"Point::mint: only staking contract can mint\"\r\n        );\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /*\r\n     * @dev Allows burning of {Point} tokens.\r\n     *\r\n     * Requirements:\r\n     * - Can only be called by the owner.\r\n     **/\r\n    function burn(address from, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _burn(from, amount);\r\n    }\r\n\r\n    /*\r\n     * @dev Allows reverting of {transferFrom}.\r\n     **/\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        public\r\n        pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        revert(\r\n            \"Point::transferFrom: not allowed\"\r\n        );\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * @dev Allows reverting of {transfer}.\r\n     **/\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        pure\r\n        override\r\n        returns (bool)\r\n    {\r\n        revert(\r\n            \"Point::transfer: not allowed\"\r\n        );\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFTStaking.sol\r\n\r\n\r\n\r\n/*\r\n * @dev NFT Staking contract allows staking of NFT to earn rewards in point\r\n * token.\r\n *\r\n * Each NFT is has a specific tier associated with it that allows the\r\n * staker accrue specific amount of Point tokens per day.\r\n *\r\n * The staker can claim their Point rewards every 24 hours and unstaking\r\n * automatically claims Point rewards for the user.\r\n **/\r\ncontract NFTStaking is Ownable {\r\n    // Address of NFT token.\r\n    IERC721 public nft;\r\n\r\n    // Address of Point ERC20 token that is paid as reward.\r\n    Point public point;\r\n\r\n    /*\r\n     * @dev A struct representing stake of user.\r\n     * tokenId -> The id of the token staked by user.\r\n     * lastPointsClaimedAt -> The timestamp at which the last claiming of rewards\r\n     * happened for this token id.\r\n     **/\r\n    struct Stake {\r\n        uint256 tokenId;\r\n        uint256 lastPointsClaimedAt;\r\n    }\r\n\r\n    struct TierAndPointsPerDay {\r\n        uint256 tier;\r\n        uint256 pointsPerDay;\r\n    }\r\n\r\n    bytes public tiersByTokenId;\r\n\r\n    // mapping of users addresses to the list of stakes.\r\n    mapping(address => Stake[]) public stakesByUser;\r\n\r\n    // mapping of tier numbers to Points rewards per day.\r\n    mapping(uint256 => uint256) public pointsPerDayByTierNumber;\r\n\r\n    event Staked(address user, uint256 tokenId);\r\n\r\n    event Unstaked(address user, uint256 tokenId);\r\n\r\n    constructor(IERC721 _nft, bytes memory _tiersByTokenId) {\r\n        nft = _nft;\r\n        point = new Point(address(this));\r\n        tiersByTokenId = _tiersByTokenId;\r\n    }\r\n\r\n    /*\r\n     * @dev Allows populating the mapping {pointsPerDayByTierNumber} by accepting\r\n     * lists of {tierNumbers} and {pointsPerDay}.\r\n     *\r\n     * Requirements:\r\n     * - Can only called by owner.\r\n     * - Both lists must be of the same length.\r\n     **/\r\n    function populatePointsPerDayByTierNumber(\r\n        TierAndPointsPerDay[] calldata tierAndPointsPerDay\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < tierAndPointsPerDay.length; i++)\r\n            pointsPerDayByTierNumber[tierAndPointsPerDay[i].tier]\r\n                = tierAndPointsPerDay[i].pointsPerDay;\r\n    }\r\n\r\n    /*\r\n     * @dev Allows staking of NFT token having tokenId of {id}.\r\n     *\r\n     * It calls {transferFrom} function on the {NFT} contract to transfer\r\n     * the staked token to the contract itself.\r\n     *\r\n     * Requirements:\r\n     * - The token being staked with tokenId {id} must be approved to\r\n     * the contract.\r\n     **/\r\n    function stake(uint256 id) public {\r\n        require(\r\n            nft.getApproved(id) == address(this)\r\n            || nft.isApprovedForAll(msg.sender, address(this)),\r\n            \"NFTStaking::stake: staking contract is not approved for the given token id\"\r\n        );\r\n\r\n        stakesByUser[msg.sender].push(\r\n            Stake(\r\n                id,\r\n                block.timestamp\r\n            )\r\n        );\r\n\r\n        nft.transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            id\r\n        );\r\n\r\n        emit Staked(msg.sender, id);\r\n    }\r\n\r\n    function stakeAll(uint256[] calldata nftIds) external {\r\n        for (uint256 i = 0; i < nftIds.length; i++)\r\n            stake(nftIds[i]);\r\n    }\r\n\r\n    /*\r\n     * @dev Allows claiming of Point rewards by the user across all of its\r\n     * NFT staked.\r\n     *\r\n     * It updates {lastPointsClaimedAt} for all of the NFT staked by the calling\r\n     * user.\r\n     **/\r\n    function claimPoints() public {\r\n        Stake[] storage stakes = stakesByUser[msg.sender];\r\n\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            Stake storage _stake = stakes[i];\r\n\r\n            uint256 claimablePoints = getClaimablePointsByStake(_stake);\r\n            if (claimablePoints != 0) point.mint(msg.sender, claimablePoints);\r\n\r\n            _stake.lastPointsClaimedAt = block.timestamp;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Allows unstaking of NFT having tokenId {id}.\r\n     *\r\n     * It claims the Point rewards for user for all of its NFT stakes.\r\n     *\r\n     * Requirements:\r\n     * - The tokenId {id} must represent a valid NFT stake.\r\n     **/\r\n    function unstakeById(uint256 id) external {\r\n        claimPoints();\r\n\r\n        Stake[] storage stakes = stakesByUser[msg.sender];\r\n        Stake memory _stake;\r\n\r\n        uint256 length = stakes.length;\r\n        uint256 i;\r\n        for (i = 0; i < length; i++) {\r\n            if (stakes[i].tokenId == id) {\r\n                _stake = stakes[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(\r\n            _stake.lastPointsClaimedAt != 0,\r\n            \"NFTStaking::unstake: invalid token id provided\"\r\n        );\r\n\r\n        stakes[i] = stakes[length - 1];\r\n        stakes.pop();\r\n\r\n        nft.transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            id\r\n        );\r\n\r\n        emit Unstaked(msg.sender, id);\r\n    }\r\n\r\n    /*\r\n     * @dev Allows unstaking of all NFTs by the users that it had staked.\r\n     *\r\n     * It claims the Point tokens accrued by the user across all of its NFTs.\r\n     **/\r\n    function unstakeAll() external {\r\n        claimPoints();\r\n\r\n        Stake[] storage stakes = stakesByUser[msg.sender];\r\n\r\n        uint256 length = stakes.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 tokenId = stakes[i].tokenId;\r\n            nft.transferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                tokenId\r\n            );\r\n\r\n            emit Unstaked(msg.sender, tokenId);\r\n        }\r\n\r\n        delete stakesByUser[msg.sender];\r\n    }\r\n\r\n    /*\r\n     * @dev Returns total number of Point tokens being accrued by the user per day\r\n     * across all of its NFT stakes.\r\n     **/\r\n    function getPointsEarningPerDayByUser(\r\n        address user\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Stake[] memory stakes = stakesByUser[user];\r\n        uint256 totalPointsPerDay;\r\n\r\n        for (uint256 i = 0; i < stakes.length; i++) {\r\n            Stake memory _stake = stakes[i];\r\n            uint256 tierNumber = getTierByTokenId(_stake.tokenId);\r\n            uint256 pointsPerDay = pointsPerDayByTierNumber[tierNumber];\r\n\r\n            totalPointsPerDay += pointsPerDay;\r\n        }\r\n\r\n        return totalPointsPerDay;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the claimable Point token amount available from\r\n     * the provided {_stake}.\r\n     **/\r\n    function getClaimablePointsByStake(Stake storage _stake)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 tierNumber = getTierByTokenId(_stake.tokenId);\r\n        uint256 pointsPerDay = pointsPerDayByTierNumber[tierNumber];\r\n\r\n        return\r\n            (block.timestamp - _stake.lastPointsClaimedAt)\r\n                * pointsPerDay\r\n                / 24 hours;\r\n    }\r\n\r\n    function getAllClaimablePointsByUser(address user)\r\n        external\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        Stake[] storage _stakes = stakesByUser[user];\r\n        uint256 length = _stakes.length;\r\n\r\n        for (uint256 i = 0; i < length; i++)\r\n            amount += getClaimablePointsByStake(_stakes[i]);\r\n    }\r\n\r\n    function getTierByTokenId(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint8 tierId)\r\n    {\r\n        uint256 slotData;\r\n        bytes memory slotMem = new bytes(32);\r\n\r\n        assembly {\r\n            mstore(\r\n                add(slotMem, 32),\r\n                tiersByTokenId.slot\r\n            )\r\n\r\n            slotData := sload(\r\n                add(\r\n                    keccak256(\r\n                        add(slotMem, 32),\r\n                        32\r\n                    ),\r\n                    div(\r\n                        sub(tokenId, 1),\r\n                        32\r\n                    )\r\n                )\r\n            )\r\n        }\r\n\r\n        tierId = uint8(\r\n            slotData >> (\r\n                248 - (\r\n                    ((tokenId - 1) % 32)\r\n                    * 8\r\n                )\r\n            )\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_tiersByTokenId\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllClaimablePointsByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPointsEarningPerDayByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTierByTokenId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tierId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"point\",\"outputs\":[{\"internalType\":\"contract Point\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointsPerDayByTierNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointsPerDay\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTStaking.TierAndPointsPerDay[]\",\"name\":\"tierAndPointsPerDay\",\"type\":\"tuple[]\"}],\"name\":\"populatePointsPerDayByTierNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakesByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPointsClaimedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tiersByTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unstakeById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004340947188b19b6c0bce434995995495a90c144e00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000d05010303010301030101010101010401010101020403030301030101030302010103010303010303030202010103010103020102030303030101030301030101040303030301010303040101030101030403030301010101010303030101010101030101010203030303010101020102030203010101030104030101040101030104010103010301010102030303030103030101040101030401030101040303010303010101010302030101010103010301030104030103030103020101010103020301010302010303010301020301010301030103020304010101010203030103050101040204030103010301010301030101030103030301030101010201030101030201040304030303010401010301010103010301030101040503010101020102030301030101030303020103010304010302040102010401030101010101030103040301040105010103030303030101010101010101030201020202030101030301030103010303030303010102030302020101020205010101030301020301020201030104040302010303020101030203030303010101010203030303030104030401010303030301030101020101030101010101030303010101030303010101030401030301010101030302010303010101030103030101030104010103010401010103030103030303010301040101010303030301030302010304030103010301040303030103010103010103030303010301030103030101020101020101010501030303030303020103030301040104010103010101030103050303010301030101010303030101010101030105030301030101010101030401020102030101030101030102010103020103030303040103010202040403020101010101010101030301030301010103010101010101030103030101030401030102010103010301030201010101030101030101030101030103010301010101030301010301030103040103030303010403010202010201010302030301030301010303020203030201010303010301040101010101030101050303030301020301030101040301010101030501010104010103020301010101010401030101020101030102030201010303030303010301010301010104030101010101030102020304020301010403010101010102010102010401030301010103040302010101010303010403010101010103030102010104010301010101040302030202020101010201030103040303030101010103010101010403030101030101030201010101010303010101050101030203010103030104010303040303040103010101010102030401010101030304010303010101030101030303010303010103030101010102040102010303030101010303010103030104030101010202010301030103040301030103010303010101030103010301010301030301010202030101030103010101010103010301010103030104010303030101010303030103010301010301010101010401020302030301040302030201010102030301010101010104010102030303010103040103010101030301030303010103010103010103010101030101020203010102010503010301010103010301030101040102010102010301020101030101010103050101010103010103010303030305010101010101030303010101010101010303010101010101020102010201010103010104010301030101010101040303010301030303010203030102010101010102030102030203030101010101010103030101020103010103010203010301030101030101010101010101030301020401010102030201010101010101020301010302010301010103010301030201020301020203010101010101010301010103030103010201030101030302010301010103030202010101030303030103030101010103010301010101010102020203010102030201010101030101030303030302030203030303010101010101010201030302040302020403030101010303010101020301010104010103010101040101030403010101010101030301010204010303010201020301010201010303030201020303040101010303010101010203010303030103030201050303030203030301010303010104030101030102010301010101030303010301040303030102020103030201010301010105010101010303030304010103030303030301030301010303010101010303040403040303010102010103010103030301010103010103010103010303030301010104010101010303010104030401010102030302030302030503010103010304010303010301010301030301020301030301010301010303040303010101030103010103030101030403010103010202030303010102040103030104010201010104030301010101010301010102010104030103020101010103030301010102010303010101010103030301030101010403010201010101010103010303030103010201030101010203010301010103030103010301030101040204020101010101030303010304040101030103030101030102020402030401030101010103010302010103010403030103010401030103030303020103010301010301020301010201010301030301010301010104030101030103010101010103010103050303030101010403020302030102010301010302010102030401040301010402020503030104030403030101010301030101010303030101040101010101020303010101010101030201030103050304020203010203010101010201010103030303010101010102020202030201010401030102030101030301030203020103030301010301030204010301010301030103010303030401010301010303010101020101010503010101010403020101030105030101010103020302030301010304010101010101010101010302010101040401010103010302010403030104030101010101030301010101030101010103010202030101020201040102010301030101010301010302030102010301010101020101010101020102040101030303030301010102030301030104010403010301010103040303030303020101020301010302020103010103010101030101040203010201010104010105010301010101010303010101030101010203030201030103040103010303010302030302010203020201010101030401030103030202010101030301010105030101030101010101010104010403020103030201010203040101030301010101010301010103010401030101020103010201010302010301010101030301030103010101030101030103050302010101010303010101010303010204020101040201030301020101010103010302020103010102030101020201030103020104010101010101010201030103010103030102010101030102020101040101010103010103010101010103030101030101040303030103030301040301010302030303030103050103010103010101030304010101010101010202010302030103010301030103030102030303010101010303040101010201010103040103030101010104020101010103030403030201010103030301020101020201020301020101020303010303030101010303020103030303010303010102030301030303010301030101030101010301030101010103030501040202030101010101010101010101030103040303010101030101010403020101010303010105010304020303040301020303030401030203010102030301010301010301010101020101030102010201010301030201030201010101010403010101030101010301030103010301010503010103030103020103010104010301010301030301030301010102030103050304030301040402010301010301010103020301030103010401010303010103010101030104010301010102030301010304010103010303030101010301030201010102010201010101030202010401010101030101030302010301030103030103030303030102030201030103010201010101020103050103010101010101030103030101010101010102040103030303010303010103020301030103030301030201030401010303010203010103030101010201010301010301030203030103010101030401010202030101010101030103010204040101040403010103010101010103010303030103030103030103030301030301030403010101010102040103010301030101030101010101010301010303010102030104010201010301030103010101010301030203010301010101010103040101020301030304020303050101030101030101010103040301010301030203030301010303050301030304030302010101010201030401010103010101010103010201010301010104010101010203020301040301010103040102040405010103010101030101010104010301020301010101010303030103010201010301040104030301030101010101030101010101010203010103040104030301020101030103010101030101000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://faa108faa4b7919340435eb4d17ea38270608ea243b93ab43de26539f228286f"}