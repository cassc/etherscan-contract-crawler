{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/DappRegistry.sol\": {\r\n      \"content\": \"// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\nimport \\\"./IAuthoriser.sol\\\";\\nimport \\\"./dapp/IFilter.sol\\\";\\n\\ncontract DappRegistry is IAuthoriser {\\n\\n    // The timelock period\\n    uint64 public timelockPeriod;\\n    // The new timelock period\\n    uint64 public newTimelockPeriod;\\n    // Time at which the new timelock becomes effective\\n    uint64 public timelockPeriodChangeAfter;\\n\\n    // bit vector of enabled registry ids for each wallet\\n    mapping (address => bytes32) public enabledRegistryIds; // [wallet] => [bit vector of 256 registry ids]\\n    // authorised dapps and their filters for each registry id\\n    mapping (uint8 => mapping (address => bytes32)) public authorisations; // [registryId] => [dapp] => [{filter:160}{validAfter:64}]\\n    // pending authorised dapps and their filters for each registry id\\n    mapping (uint8 => mapping (address => bytes32)) public pendingFilterUpdates; // [registryId] => [dapp] => [{filter:160}{validAfter:64}]\\n    // owners for each registry id\\n    mapping (uint8 => address) public registryOwners; // [registryId] => [owner]\\n    \\n    event RegistryCreated(uint8 registryId, address registryOwner);\\n    event OwnerChanged(uint8 registryId, address newRegistryOwner);\\n    event TimelockChangeRequested(uint64 newTimelockPeriod);\\n    event TimelockChanged(uint64 newTimelockPeriod);\\n    event FilterUpdated(uint8 indexed registryId, address dapp, address filter, uint256 validAfter);\\n    event FilterUpdateRequested(uint8 indexed registryId, address dapp, address filter, uint256 validAfter);\\n    event DappAdded(uint8 indexed registryId, address dapp, address filter, uint256 validAfter);\\n    event DappRemoved(uint8 indexed registryId, address dapp);\\n    event ToggledRegistry(address indexed sender, uint8 registryId, bool enabled);\\n\\n    modifier onlyOwner(uint8 _registryId) {\\n        validateOwner(_registryId);\\n        _;\\n    }\\n    \\n    constructor(uint64 _timelockPeriod) {\\n        // set the timelock period\\n        timelockPeriod = _timelockPeriod;\\n        // set the owner of the Argent Registry (registryId = 0)\\n        registryOwners[0] = msg.sender;\\n\\n        emit RegistryCreated(0, msg.sender);\\n        emit TimelockChanged(_timelockPeriod);\\n    }\\n\\n    /********* Wallet-centered functions *************/\\n\\n    /**\\n    * @notice Returns whether a registry is enabled for a wallet\\n    * @param _wallet The wallet\\n    * @param _registryId The registry id\\n    */\\n    function isEnabledRegistry(address _wallet, uint8 _registryId) external view returns (bool isEnabled) {\\n        uint registries = uint(enabledRegistryIds[_wallet]);\\n        return (((registries >> _registryId) & 1) > 0) /* \\\"is bit set for regId?\\\" */ == (_registryId > 0) /* \\\"not Argent registry?\\\" */;\\n    }\\n\\n    /**\\n    * @notice Returns whether a (_spender, _to, _data) call is authorised for a wallet\\n    * @param _wallet The wallet\\n    * @param _spender The spender of the tokens for token approvals, or the target of the transaction otherwise\\n    * @param _to The target of the transaction\\n    * @param _data The calldata of the transaction\\n    */\\n    function isAuthorised(address _wallet, address _spender, address _to, bytes calldata _data) public view override returns (bool) {\\n        uint registries = uint(enabledRegistryIds[_wallet]);\\n        // Check Argent Default Registry first. It is enabled by default, implying that a zero \\n        // at position 0 of the `registries` bit vector means that the Argent Registry is enabled)\\n        for(uint registryId = 0; registryId == 0 || (registries >> registryId) > 0; registryId++) {\\n            bool isEnabled = (((registries >> registryId) & 1) > 0) /* \\\"is bit set for regId?\\\" */ == (registryId > 0) /* \\\"not Argent registry?\\\" */;\\n            if(isEnabled) { // if registryId is enabled\\n                uint auth = uint(authorisations[uint8(registryId)][_spender]); \\n                uint validAfter = auth & 0xffffffffffffffff;\\n                if (0 < validAfter && validAfter <= block.timestamp) { // if the current time is greater than the validity time\\n                    address filter = address(uint160(auth >> 64));\\n                    if(filter == address(0) || IFilter(filter).isValid(_wallet, _spender, _to, _data)) {\\n                        return true;\\n                    }\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * @notice Returns whether a collection of (_spender, _to, _data) calls are authorised for a wallet\\n    * @param _wallet The wallet\\n    * @param _spenders The spenders of the tokens for token approvals, or the targets of the transaction otherwise\\n    * @param _to The targets of the transaction\\n    * @param _data The calldata of the transaction\\n    */\\n    function areAuthorised(\\n        address _wallet,\\n        address[] calldata _spenders,\\n        address[] calldata _to,\\n        bytes[] calldata _data\\n    )\\n        external\\n        view\\n        override\\n        returns (bool) \\n    {\\n        for(uint i = 0; i < _spenders.length; i++) {\\n            if(!isAuthorised(_wallet, _spenders[i], _to[i], _data[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Allows a wallet to decide whether _registryId should be part of the list of enabled registries for that wallet\\n    * @param _registryId The id of the registry to enable/disable\\n    * @param _enabled Whether the registry should be enabled (true) or disabled (false)\\n    */\\n    function toggleRegistry(uint8 _registryId, bool _enabled) external {\\n        require(registryOwners[_registryId] != address(0), \\\"DR: unknown registry\\\");\\n        uint registries = uint(enabledRegistryIds[msg.sender]);\\n        bool current = (((registries >> _registryId) & 1) > 0) /* \\\"is bit set for regId?\\\" */ == (_registryId > 0) /* \\\"not Argent registry?\\\" */;\\n        if(current != _enabled) {\\n            enabledRegistryIds[msg.sender] = bytes32(registries ^ (uint(1) << _registryId)); // toggle [_registryId]^th bit\\n            emit ToggledRegistry(msg.sender, _registryId, _enabled);\\n        }\\n    }\\n\\n    /**************  Management of registry list  *****************/\\n\\n    /**\\n    * @notice Create a new registry. Only the owner of the Argent registry (i.e. the registry with id 0 -- hence the use of `onlyOwner(0)`)\\n    * can create a new registry.\\n    * @param _registryId The id of the registry to create\\n    * @param _registryOwner The owner of that new registry\\n    */\\n    function createRegistry(uint8 _registryId, address _registryOwner) external onlyOwner(0) {\\n        require(_registryOwner != address(0), \\\"DR: registry owner is 0\\\");\\n        require(registryOwners[_registryId] == address(0), \\\"DR: duplicate registry\\\");\\n        registryOwners[_registryId] = _registryOwner;\\n        emit RegistryCreated(_registryId, _registryOwner);\\n    }\\n\\n    // Note: removeRegistry is not supported because that would allow the owner to replace registries that \\n    // have already been enabled by users with a new (potentially maliciously populated) registry \\n\\n    /**\\n    * @notice Lets a registry owner change the owner of the registry.\\n    * @param _registryId The id of the registry\\n    * @param _newRegistryOwner The new owner of the registry\\n    */\\n    function changeOwner(uint8 _registryId, address _newRegistryOwner) external onlyOwner(_registryId) {\\n        require(_newRegistryOwner != address(0), \\\"DR: new registry owner is 0\\\");\\n        registryOwners[_registryId] = _newRegistryOwner;\\n        emit OwnerChanged(_registryId, _newRegistryOwner);\\n    }\\n\\n    /**\\n    * @notice Request a change of the timelock value. Only the owner of the Argent registry (i.e. the registry with id 0 -- \\n    * hence the use of `onlyOwner(0)`) can perform that action. This action can be confirmed after the (old) timelock period.\\n    * @param _newTimelockPeriod The new timelock period\\n    */\\n    function requestTimelockChange(uint64 _newTimelockPeriod) external onlyOwner(0) {\\n        newTimelockPeriod = _newTimelockPeriod;\\n        timelockPeriodChangeAfter = uint64(block.timestamp) + timelockPeriod;\\n        emit TimelockChangeRequested(_newTimelockPeriod);\\n    }\\n\\n    /**\\n    * @notice Confirm a change of the timelock value requested by `requestTimelockChange()`.\\n    */\\n    function confirmTimelockChange() external {\\n        uint64 newPeriod = newTimelockPeriod;\\n        require(timelockPeriodChangeAfter > 0 && timelockPeriodChangeAfter <= block.timestamp, \\\"DR: can't (yet) change timelock\\\");\\n        timelockPeriod = newPeriod;\\n        newTimelockPeriod = 0;\\n        timelockPeriodChangeAfter = 0;\\n        emit TimelockChanged(newPeriod);\\n    }\\n\\n    /**************  Management of registries' content  *****************/\\n\\n    /**\\n    * @notice Returns the (filter, validAfter) tuple recorded for a dapp in a given registry.\\n    * `filter` is the authorisation filter stored for the dapp (if any) and `validAfter` is the \\n    * timestamp after which the filter becomes active.\\n    * @param _registryId The registry id\\n    * @param _dapp The dapp\\n    */\\n    function getAuthorisation(uint8 _registryId, address _dapp) external view returns (address filter, uint64 validAfter) {\\n        uint auth = uint(authorisations[_registryId][_dapp]);\\n        filter = address(uint160(auth >> 64));\\n        validAfter = uint64(auth & 0xffffffffffffffff);\\n    }\\n\\n    /**\\n    * @notice Add a new dapp to the registry with an optional filter\\n    * @param _registryId The id of the registry to modify\\n    * @param _dapp The address of the dapp contract to authorise.\\n    * @param _filter The address of the filter contract to use, if any.\\n    */\\n    function addDapp(uint8 _registryId, address _dapp, address _filter) external onlyOwner(_registryId) {\\n        require(authorisations[_registryId][_dapp] == bytes32(0), \\\"DR: dapp already added\\\");\\n        uint validAfter = block.timestamp + timelockPeriod;\\n        // Store the new authorisation as {filter:160}{validAfter:64}.\\n        authorisations[_registryId][_dapp] = bytes32((uint(uint160(_filter)) << 64) | validAfter);\\n        emit DappAdded(_registryId, _dapp, _filter, validAfter);\\n    }\\n\\n\\n    /**\\n    * @notice Deauthorise a dapp in a registry\\n    * @param _registryId The id of the registry to modify\\n    * @param _dapp The address of the dapp contract to deauthorise.\\n    */\\n    function removeDapp(uint8 _registryId, address _dapp) external onlyOwner(_registryId) {\\n        require(authorisations[_registryId][_dapp] != bytes32(0), \\\"DR: unknown dapp\\\");\\n        delete authorisations[_registryId][_dapp];\\n        delete pendingFilterUpdates[_registryId][_dapp];\\n        emit DappRemoved(_registryId, _dapp);\\n    }\\n\\n    /**\\n    * @notice Request to change an authorisation filter for a dapp that has previously been authorised. We cannot \\n    * immediately override the existing filter and need to store the new filter for a timelock period before being \\n    * able to change the filter.\\n    * @param _registryId The id of the registry to modify\\n    * @param _dapp The address of the dapp contract to authorise.\\n    * @param _filter The address of the new filter contract to use.\\n    */\\n    function requestFilterUpdate(uint8 _registryId, address _dapp, address _filter) external onlyOwner(_registryId) {\\n        require(authorisations[_registryId][_dapp] != bytes32(0), \\\"DR: unknown dapp\\\");\\n        uint validAfter = block.timestamp + timelockPeriod;\\n        // Store the future authorisation as {filter:160}{validAfter:64}\\n        pendingFilterUpdates[_registryId][_dapp] = bytes32((uint(uint160(_filter)) << 64) | validAfter);\\n        emit FilterUpdateRequested(_registryId, _dapp, _filter, validAfter);\\n    }\\n\\n    /**\\n    * @notice Confirm the filter change requested by `requestFilterUpdate`\\n    * @param _registryId The id of the registry to modify\\n    * @param _dapp The address of the dapp contract to authorise.\\n    */\\n    function confirmFilterUpdate(uint8 _registryId, address _dapp) external {\\n        uint newAuth = uint(pendingFilterUpdates[_registryId][_dapp]);\\n        require(newAuth > 0, \\\"DR: no pending filter update\\\");\\n        uint validAfter = newAuth & 0xffffffffffffffff;\\n        require(validAfter <= block.timestamp, \\\"DR: too early to confirm auth\\\");\\n        authorisations[_registryId][_dapp] = bytes32(newAuth);\\n        emit FilterUpdated(_registryId, _dapp, address(uint160(newAuth >> 64)), validAfter); \\n        delete pendingFilterUpdates[_registryId][_dapp];\\n    }\\n\\n    /********  Internal Functions ***********/\\n\\n    function validateOwner(uint8 _registryId) internal view {\\n        address owner = registryOwners[_registryId];\\n        require(owner != address(0), \\\"DR: unknown registry\\\");\\n        require(msg.sender == owner, \\\"DR: sender != registry owner\\\");\\n    }\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/IAuthoriser.sol\": {\r\n      \"content\": \"// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\ninterface IAuthoriser {\\n    function isAuthorised(address _sender, address _spender, address _to, bytes calldata _data) external view returns (bool);\\n    function areAuthorised(\\n        address _spender,\\n        address[] calldata _spenders,\\n        address[] calldata _to,\\n        bytes[] calldata _data\\n    )\\n        external\\n        view\\n        returns (bool);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/dapp/IFilter.sol\": {\r\n      \"content\": \"// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\ninterface IFilter {\\n    function isValid(address _wallet, address _spender, address _to, bytes calldata _data) external view returns (bool valid);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_timelockPeriod\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"registryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"}],\"name\":\"DappAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"registryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"}],\"name\":\"DappRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"registryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"}],\"name\":\"FilterUpdateRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"registryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"}],\"name\":\"FilterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"registryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRegistryOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"registryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registryOwner\",\"type\":\"address\"}],\"name\":\"RegistryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newTimelockPeriod\",\"type\":\"uint64\"}],\"name\":\"TimelockChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newTimelockPeriod\",\"type\":\"uint64\"}],\"name\":\"TimelockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"registryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ToggledRegistry\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filter\",\"type\":\"address\"}],\"name\":\"addDapp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_spenders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"areAuthorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisations\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_newRegistryOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"}],\"name\":\"confirmFilterUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmTimelockChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_registryOwner\",\"type\":\"address\"}],\"name\":\"createRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledRegistryIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"}],\"name\":\"getAuthorisation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"validAfter\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"isAuthorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"}],\"name\":\"isEnabledRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newTimelockPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingFilterUpdates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"registryOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"}],\"name\":\"removeDapp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_filter\",\"type\":\"address\"}],\"name\":\"requestFilterUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newTimelockPeriod\",\"type\":\"uint64\"}],\"name\":\"requestTimelockChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriodChangeAfter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_registryId\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"toggleRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DappRegistry", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "999", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}