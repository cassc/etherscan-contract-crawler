{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/DOBStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"../interfaces/IStakingPoolRewarder.sol\\\";\\nimport \\\"../interfaces/IDOBStakingPool.sol\\\";\\nimport \\\"../interfaces/IOption.sol\\\";\\nimport \\\"../interfaces/ITokenKeeper.sol\\\";\\n\\n/**\\n * @title DOBStakingPool\\n * @author DeOrderBook\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\n * @notice The DOBStakingPool contract manages staking and reward distribution for $DOB tokens.\\n * @dev It includes functionalities for staking $DOB, claiming rewards, withdrawing and updating parameters.\\n */\\ncontract DOBStakingPool is OwnableUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable, IDOBStakingPool {\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @notice Address of the DOB token.\\n     * @dev This is the token that will be staked in the pool.\\n     */\\n    address public DOB;\\n\\n    /**\\n     * @notice Address where the fees are collected.\\n     * @dev This is generally a multisig wallet or a treasury account.\\n     */\\n    address public feeCollector;\\n\\n    /**\\n     * @notice Address where bullets are collected.\\n     * @dev Bullets are a secondary token used in the ecosystem.\\n     */\\n    address public bulletCollector;\\n\\n    /**\\n     * @notice Address of the reward dispatcher.\\n     * @dev This address is responsible for calculating and distributing rewards.\\n     */\\n    address public rewardDispatcher;\\n\\n    /**\\n     * @notice Address of the worker.\\n     * @dev This address performs certain actions that are restricted to workers.\\n     */\\n    address public worker;\\n\\n    /**\\n     * @notice Address of the OptionFactory contract.\\n     * @dev This is the contract responsible for creating and managing options.\\n     */\\n    address public optionFactory;\\n\\n    /**\\n     * @notice Address of the uHODL contract.\\n     * @dev This is one of the contracts that will receive rewards.\\n     */\\n    address public uHODL;\\n\\n    /**\\n     * @notice Address of the bHODL contract.\\n     * @dev This is one of the contracts that will receive rewards.\\n     */\\n    address public bHODL;\\n\\n    /**\\n     * @notice Array of all activated options.\\n     * @dev Each option includes an optionAddress, bullet, sniper and bulletBalance.\\n     */\\n    OptionData[] public activatedOptions;\\n\\n    /**\\n     * @notice The bullet reward threshold.\\n     * @dev Users with a daily stake more than this threshold will receive bullet rewards.\\n     */\\n    uint256 public bulletRewardThreshold;\\n\\n    /**\\n     * @notice The extension of lock days.\\n     * @dev This value affects the duration of staking.\\n     */\\n    uint256 public extendLockDays;\\n\\n    /**\\n     * @notice The timestamp of the last work action performed.\\n     * @dev This can be used for tracking purposes and for enforcing time-based conditions.\\n     */\\n    uint256 public lastWorkTimestamp;\\n\\n    /**\\n     * @notice A flag indicating whether the contract should check for an NFT.\\n     * @dev If set to true, the contract will check for the presence of an NFT during certain actions.\\n     */\\n    bool public isCheckNFT;\\n\\n    /**\\n     * @notice The address of the NFT contract.\\n     * @dev This is the contract that manages the NFTs that may be required by this contract.\\n     */\\n    ERC721 public NFTAddress;\\n\\n    /**\\n     * @notice Address where remaining bullets are collected.\\n     * @dev Bullets are a secondary token used in the ecosystem.\\n     */\\n    address public remainingBulletCollector;\\n\\n    /**\\n     * @notice Precision loss prevention multiplier constant.\\n     * @dev This value is used for precision management during calculations.\\n     */\\n    uint256 private constant ACCU_REWARD_MULTIPLIER = 10**20;\\n\\n    /**\\n     * @notice Struct defining the data for each option.\\n     * @dev This includes the addresses of the option, bullet, sniper, and the bullet balance.\\n     */\\n    struct OptionData {\\n        address optionAddress;\\n        address bullet;\\n        address sniper;\\n        uint256 bulletBalance;\\n    }\\n\\n    /**\\n     * @notice Struct defining the user's data.\\n     * @dev This includes total staking amount, last entry time, and accumulated rewards for both uHODL and bHODL.\\n     */\\n    struct UserData {\\n        uint256 totalStakingAmount;\\n        uint256 uHODLEntryAccuReward;\\n        uint256 bHODLEntryAccuReward;\\n        uint256 lastEntryTime;\\n    }\\n\\n    /**\\n     * @notice Struct defining the pool's data.\\n     * @dev This includes the total staking amount and accumulated rewards for both uHODL and bHODL.\\n     */\\n    struct PoolData {\\n        uint256 stakingAmount;\\n        uint256 uHODLAccuReward;\\n        uint256 bHODLAccuReward;\\n    }\\n\\n    /**\\n     * @notice Struct defining the staking data for each staker.\\n     * @dev This includes the current and claimed staking amount, and the block height when these amounts were updated.\\n     */\\n    struct StakingData {\\n        uint256 claimStakingAmount;\\n        uint256 claimAmountUpdateBlockHeight;\\n        uint256 currentStakingAmount;\\n        uint256 stakingAmountUpdateBlockHeight;\\n    }\\n\\n    /**\\n     * @notice Mapping to store user data for each address.\\n     * @dev Keys are user addresses and values are UserData struct.\\n     */\\n    mapping(address => UserData) public userDatas;\\n\\n    /**\\n     * @notice Mapping to store staking data for each staker.\\n     * @dev Keys are user addresses and values are StakingData struct.\\n     */\\n    mapping(address => StakingData) public stakingInfo;\\n\\n    /**\\n     * @notice Mapping to store claim information for each NFT.\\n     * @dev Keys are NFT IDs and values are amounts.\\n     */\\n    mapping(uint256 => uint256) public nftClaimInfo;\\n\\n    /**\\n     * @notice Mapping to store claim information for each user.\\n     * @dev Keys are user addresses and values are amounts.\\n     */\\n    mapping(address => uint256) public userClaimInfo;\\n\\n    /**\\n     * @notice The start block of the last delivery.\\n     * @dev This is used for tracking purposes.\\n     */\\n    uint256 public lastDeliverStartBlock;\\n\\n    /**\\n     * @notice The end block of the last delivery.\\n     * @dev This is used for tracking purposes.\\n     */\\n    uint256 public lastDeliverEndBlock;\\n\\n    /**\\n     * @notice The total daily share for bullet reward.\\n     * @dev This is the total share of all users who staked more than the bulletRewardThreshold in a day.\\n     */\\n    uint256 public dailyTotalShareBullet;\\n\\n    /**\\n     * @notice The total daily share for bullet reward in the last period.\\n     * @dev This is the total share of all users who staked more than the bulletRewardThreshold in the last period.\\n     */\\n    uint256 public lastPeriodDailyTotalShareBullet;\\n\\n    /**\\n     * @notice The total claim amount in the last period.\\n     * @dev This is the total claim amount of all users in the last period.\\n     */\\n    uint256 public lastPeriodDailyClaimTotal;\\n\\n    /**\\n     * @notice The data of the pool.\\n     * @dev This includes the total staking amount and accumulated rewards for both uHODL and bHODL.\\n     */\\n    PoolData public poolData;\\n\\n    /**\\n     * @notice The address of the uHODL rewarder contract.\\n     * @dev This contract is responsible for distributing rewards to uHODL stakers.\\n     */\\n    IStakingPoolRewarder public uHODLRewarder;\\n\\n    /**\\n     * @notice The address of the bHODL rewarder contract.\\n     * @dev This contract is responsible for distributing rewards to bHODL stakers.\\n     */\\n    IStakingPoolRewarder public bHODLRewarder;\\n\\n    /**\\n     * @notice Emitted when a user stakes DOB tokens.\\n     * @dev Includes the staker's address and the amount staked.\\n     * @param staker The address of the user that staked the tokens.\\n     * @param amount The amount of tokens staked.\\n     */\\n    event Staked(address indexed staker, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a user unstakes DOB tokens.\\n     * @dev Includes the staker's address and the amount unstaked.\\n     * @param staker The address of the user that unstaked the tokens.\\n     * @param amount The amount of tokens unstaked.\\n     */\\n    event Unstaked(address indexed staker, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the worker is changed.\\n     * @dev Includes the old and new worker addresses.\\n     * @param oldWorker The address of the old worker.\\n     * @param newWorker The address of the new worker.\\n     */\\n    event WorkerChanged(address oldWorker, address newWorker);\\n\\n    /**\\n     * @notice Emitted when the factory is changed.\\n     * @dev Includes the old and new factory addresses.\\n     * @param oldFactory The address of the old factory.\\n     * @param newFactory The address of the new factory.\\n     */\\n    event FactoryChanged(address oldFactory, address newFactory);\\n\\n    /**\\n     * @notice Emitted when the rewarder is changed.\\n     * @dev Includes the old and new rewarder addresses.\\n     * @param oldRewarder The address of the old rewarder.\\n     * @param newRewarder The address of the new rewarder.\\n     */\\n    event RewarderChanged(address oldRewarder, address newRewarder);\\n\\n    /**\\n     * @notice Emitted when a reward is redeemed.\\n     * @dev Includes the staker's address, the rewarder's address, the amount, and the reward type.\\n     * @param staker The address of the user that redeemed the reward.\\n     * @param rewarder The address of the rewarder contract.\\n     * @param amount The amount of reward redeemed.\\n     * @param rewardType The type of reward (0 for uHODL, 1 for bHODL).\\n     */\\n    event RewardRedeemed(address indexed staker, address rewarder, uint256 amount, uint8 rewardType);\\n\\n    /**\\n     * @notice Emitted when the bullet reward threshold is changed.\\n     * @dev Includes the old and new threshold values.\\n     * @param oldThreshold The old bullet reward threshold.\\n     * @param newThreshold The new bullet reward threshold.\\n     */\\n    event BulletRewardThresholdChanged(uint256 oldThreshold, uint256 newThreshold);\\n\\n    /**\\n     * @notice Emitted when the extend lock days is changed.\\n     * @dev Includes the old and new lock days values.\\n     * @param oldDays The old extend lock days.\\n     * @param newDays The new extend lock days.\\n     */\\n    event ExtendLockDaysChanged(uint256 oldDays, uint256 newDays);\\n\\n    /**\\n     * @notice Emitted when a bullet reward is given.\\n     * @dev Includes the user's address, the bullet's address, and the amount.\\n     * @param user The address of the user that received the reward.\\n     * @param bullet The address of the bullet token contract.\\n     * @param amount The amount of bullet reward given.\\n     */\\n    event BulletReward(address user, address bullet, uint256 amount);\\n\\n    /**\\n     * @notice This modifier ensures only the worker can call the function.\\n     * @dev Reverts if the caller is not the worker.\\n     */\\n    modifier onlyWorker() {\\n        require(msg.sender == worker, \\\"DOBStaking: caller is not the worker\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice This modifier ensures only the option factory can call the function.\\n     * @dev Reverts if the caller is not the option factory.\\n     */\\n    modifier onlyFactory() {\\n        require(msg.sender == optionFactory, \\\"DOBStaking: caller is not the option factory\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the DOBStakingPool contract with essential parameters.\\n     * @dev The initializer function is used in upgradeable contracts instead of a constructor.\\n     *      It checks that input addresses are not zero and then sets up initial contract state.\\n     * @param _feeCollector The address of the fee collector.\\n     * @param _bulletCollector The address of the bullet collector.\\n     * @param _rewardDispatcher The address of the reward dispatcher.\\n     * @param _uHODL The address of the uHODL contract.\\n     * @param _bHODL The address of the bHODL contract.\\n     * @param _DOB The address of the DOB token.\\n     */\\n    function __DOBStakingPool_init(\\n        address _feeCollector,\\n        address _bulletCollector,\\n        address _rewardDispatcher,\\n        address _uHODL,\\n        address _bHODL,\\n        address _DOB\\n    ) public initializer {\\n        require(_feeCollector != address(0), \\\"DOBStakingPool: zero address\\\");\\n        require(_bulletCollector != address(0), \\\"DOBStakingPool: zero address\\\");\\n        require(_rewardDispatcher != address(0), \\\"DOBStakingPool: zero address\\\");\\n        require(_uHODL != address(0), \\\"DOBStakingPool: zero address\\\");\\n        require(_bHODL != address(0), \\\"DOBStakingPool: zero address\\\");\\n        require(_DOB != address(0), \\\"DOBStakingPool: zero address\\\");\\n\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        feeCollector = _feeCollector;\\n        bulletCollector = _bulletCollector;\\n        rewardDispatcher = _rewardDispatcher;\\n        uHODL = _uHODL;\\n        bHODL = _bHODL;\\n        DOB = _DOB;\\n\\n        // Setting initial parameters\\n        bulletRewardThreshold = 1000e18;\\n        extendLockDays = 30 days;\\n        lastWorkTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Changes the worker address to a new one.\\n     * @dev Emits a WorkerChanged event after successfully changing the worker.\\n     * @param _worker The new worker's address.\\n     */\\n    function setWorker(address _worker) external onlyOwner {\\n        require(_worker != address(0), \\\"DOBStakingPool: zero address\\\");\\n\\n        address oldWorker = worker;\\n        worker = _worker;\\n\\n        emit WorkerChanged(oldWorker, worker);\\n    }\\n\\n    /**\\n     * @notice Changes the factory address to a new one.\\n     * @dev Emits a FactoryChanged event after successfully changing the factory.\\n     * @param newFactory The new factory's address.\\n     */\\n    function setFactory(address newFactory) external onlyOwner {\\n        require(newFactory != address(0), \\\"DOBStakingPool: zero address\\\");\\n\\n        address oldFactory = optionFactory;\\n        optionFactory = newFactory;\\n\\n        emit FactoryChanged(oldFactory, optionFactory);\\n    }\\n\\n    /**\\n     * @notice Changes the uHODL rewarder address to a new one.\\n     * @dev Emits a RewarderChanged event after successfully changing the rewarder.\\n     * @param _uHODLRewarder The new uHODL rewarder's address.\\n     */\\n    function setuHODLRewarder(address _uHODLRewarder) external onlyOwner {\\n        require(_uHODLRewarder != address(0), \\\"DOBStakingPool: zero address\\\");\\n\\n        address olduHODLRewarder = address(_uHODLRewarder);\\n        uHODLRewarder = IStakingPoolRewarder(_uHODLRewarder);\\n\\n        emit RewarderChanged(olduHODLRewarder, _uHODLRewarder);\\n    }\\n\\n    /**\\n     * @notice Changes the bHODL rewarder address to a new one.\\n     * @dev Emits a RewarderChanged event after successfully changing the rewarder.\\n     * @param _bHODLRewarder The new bHODL rewarder's address.\\n     */\\n    function setbHODLRewarder(address _bHODLRewarder) external onlyOwner {\\n        require(_bHODLRewarder != address(0), \\\"DOBStakingPool: zero address\\\");\\n\\n        address oldbHODLRewarder = address(_bHODLRewarder);\\n        bHODLRewarder = IStakingPoolRewarder(_bHODLRewarder);\\n\\n        emit RewarderChanged(oldbHODLRewarder, _bHODLRewarder);\\n    }\\n\\n    /**\\n     * @notice Changes the bullet reward threshold to a new one.\\n     * @dev Emits a BulletRewardThresholdChanged event after successfully changing the threshold.\\n     * @param _threshold The new bullet reward threshold.\\n     */\\n    function setBulletRewardThreshold(uint256 _threshold) external onlyOwner {\\n        require(_threshold > 0, \\\"DOBStakingPool: zero threshold\\\");\\n\\n        uint256 oldThreshold = bulletRewardThreshold;\\n        bulletRewardThreshold = _threshold;\\n\\n        emit BulletRewardThresholdChanged(oldThreshold, _threshold);\\n    }\\n\\n    /**\\n     * @notice Changes the extend lock days to a new value.\\n     * @dev Emits an ExtendLockDaysChanged event after successfully changing the days.\\n     * @param _days The new extend lock days.\\n     */\\n    function setExtendLockDays(uint256 _days) external onlyOwner {\\n        require(_days > 0, \\\"DOBStakingPool: zero days\\\");\\n\\n        uint256 oldDays = extendLockDays;\\n        extendLockDays = _days;\\n\\n        emit ExtendLockDaysChanged(oldDays, _days);\\n    }\\n\\n    /**\\n     * @notice Changes the fee collector address to a new one.\\n     * @param _feeCollector The new fee collector's address.\\n     */\\n    function setFeeCollector(address _feeCollector) external onlyOwner {\\n        require(_feeCollector != address(0), \\\"DOBStakingPool: zero address\\\");\\n        feeCollector = _feeCollector;\\n    }\\n\\n    /**\\n     * @notice Changes the bullet collector address to a new one.\\n     * @param _bulletCollector The new bullet collector's address.\\n     */\\n    function setBulletCollector(address _bulletCollector) external onlyOwner {\\n        require(_bulletCollector != address(0), \\\"DOBStakingPool: zero address\\\");\\n        bulletCollector = _bulletCollector;\\n    }\\n\\n    /**\\n     * @notice Changes the reward dispatcher address to a new one.\\n     * @param _rewardDispatcher The new reward dispatcher's address.\\n     */\\n    function setRewardDispatcher(address _rewardDispatcher) external onlyOwner {\\n        require(_rewardDispatcher != address(0), \\\"DOBStakingPool: zero address\\\");\\n        rewardDispatcher = _rewardDispatcher;\\n    }\\n\\n    /**\\n     * @notice Changes the remaining bullet collector address to a new one.\\n     * @param _remainingBulletCollector The new remaining bullet collector's address.\\n     */\\n    function setRemainingBulletCollector(address _remainingBulletCollector) external onlyOwner {\\n        require(_remainingBulletCollector != address(0), \\\"DOBStakingPool: zero address\\\");\\n        remainingBulletCollector = _remainingBulletCollector;\\n    }\\n\\n    /**\\n     * @notice Adds a new option to the activated options.\\n     * @dev Checks that none of the addresses are zero, and adds the option to the list of activated options.\\n     * @param _optionAddress The address of the new option.\\n     * @param _bulletAddress The address of the bullet for the new option.\\n     * @param _sniperAddress The address of the sniper for the new option.\\n     */\\n    function addOption(\\n        address _optionAddress,\\n        address _bulletAddress,\\n        address _sniperAddress\\n    ) external override onlyFactory {\\n        require(_optionAddress != address(0), \\\"DOBStakingPool: zero address\\\");\\n        require(_bulletAddress != address(0), \\\"DOBStakingPool: zero address\\\");\\n        require(_sniperAddress != address(0), \\\"DOBStakingPool: zero address\\\");\\n\\n        uint256 bulletRewardAmount = IERC20Upgradeable(_bulletAddress).balanceOf(bulletCollector);\\n        activatedOptions.push(OptionData(_optionAddress, _bulletAddress, _sniperAddress, bulletRewardAmount));\\n    }\\n\\n    /**\\n     * @notice Removes an option from the activated options.\\n     * @dev Iterates over the activated options, replaces the option to remove with the last element in the array, and removes the last element.\\n     * @param _optionAddress The address of the option to remove.\\n     */\\n    function removeOption(address _optionAddress) external override onlyFactory {\\n        require(_optionAddress != address(0), \\\"DOBStakingPool: zero address\\\");\\n\\n        for (uint8 i = 0; i < activatedOptions.length; i++) {\\n            if (activatedOptions[i].optionAddress == _optionAddress) {\\n                activatedOptions[i] = activatedOptions[activatedOptions.length - 1];\\n                activatedOptions.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the list of activated options.\\n     * @dev Iterates over the activated options and removes those that have expired.\\n     */\\n    function updateActivatedOptions() internal {\\n        OptionData[] memory oldActivatedOptions = activatedOptions;\\n        delete activatedOptions;\\n\\n        for (uint8 i = 0; i < oldActivatedOptions.length; i++) {\\n            uint256 expiryTime = IOption(oldActivatedOptions[i].optionAddress).getExpiryTime();\\n            if (block.timestamp <= expiryTime) {\\n                uint256 bulletRewardAmount = IERC20Upgradeable(oldActivatedOptions[i].bullet).balanceOf(bulletCollector);\\n                oldActivatedOptions[i].bulletBalance = bulletRewardAmount;\\n                activatedOptions.push(oldActivatedOptions[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the number of currently activated options.\\n     * @dev Checks the length property of the activatedOptions array.\\n     * @return A uint256 representing the number of activated options.\\n     */\\n    function activatedOptionLength() external view returns (uint256) {\\n        return activatedOptions.length;\\n    }\\n\\n    /**\\n     * @notice This function allows a user to stake their DOB tokens.\\n     * @dev\\n     * - Ensures that the pool is not paused and that the function is not called within the same block the worker is updating.\\n     * - Calculates the pending uHODL and bHODL rewards for the user.\\n     * - Increases the user's total staking amount and the pool's staking amount by the amount staked.\\n     * - Updates the uHODL and bHODL entry rewards.\\n     * - Transfers the staked DOB tokens from the user to the contract.\\n     * - Settles any pending rewards with vesting.\\n     * - Updates the daily staking amount for bullet rewards.\\n     * @param amount The amount of DOB tokens to stake.\\n     */\\n    function stake(uint256 amount) external whenNotPaused nonReentrant {\\n        require(amount > 0, \\\"DOBStaking: cannot stake zero amount\\\");\\n        require(block.number != lastDeliverEndBlock, \\\"DOBStaking: worker is updating in same block!\\\");\\n\\n        _accuHodlReward();\\n        uint256 uHODLRewardToVest = poolData\\n        .uHODLAccuReward\\n        .sub(userDatas[msg.sender].uHODLEntryAccuReward)\\n        .mul(userDatas[msg.sender].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n        uint256 bHODLRewardToVest = poolData\\n        .bHODLAccuReward\\n        .sub(userDatas[msg.sender].bHODLEntryAccuReward)\\n        .mul(userDatas[msg.sender].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n\\n        userDatas[msg.sender].totalStakingAmount = userDatas[msg.sender].totalStakingAmount.add(amount);\\n        poolData.stakingAmount = poolData.stakingAmount.add(amount);\\n\\n        userDatas[msg.sender].uHODLEntryAccuReward = poolData.uHODLAccuReward;\\n        userDatas[msg.sender].bHODLEntryAccuReward = poolData.bHODLAccuReward;\\n\\n        SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(DOB), msg.sender, address(this), amount);\\n\\n        uHODLRewarder.onReward(1, msg.sender, uHODLRewardToVest, userDatas[msg.sender].lastEntryTime);\\n        bHODLRewarder.onReward(1, msg.sender, bHODLRewardToVest, userDatas[msg.sender].lastEntryTime);\\n\\n        userDatas[msg.sender].lastEntryTime = block.timestamp;\\n\\n        uint256 oldDailyStakingAmount = 0;\\n        if (\\n            stakingInfo[msg.sender].stakingAmountUpdateBlockHeight > lastDeliverEndBlock ||\\n            stakingInfo[msg.sender].currentStakingAmount < bulletRewardThreshold\\n        ) {\\n            oldDailyStakingAmount = stakingInfo[msg.sender].currentStakingAmount;\\n            stakingInfo[msg.sender].currentStakingAmount = stakingInfo[msg.sender].currentStakingAmount.add(amount);\\n        } else {\\n            stakingInfo[msg.sender].claimStakingAmount = stakingInfo[msg.sender].currentStakingAmount;\\n            stakingInfo[msg.sender].claimAmountUpdateBlockHeight = stakingInfo[msg.sender].stakingAmountUpdateBlockHeight;\\n            stakingInfo[msg.sender].currentStakingAmount = amount;\\n        }\\n        stakingInfo[msg.sender].stakingAmountUpdateBlockHeight = block.number;\\n        if (oldDailyStakingAmount >= bulletRewardThreshold) {\\n            dailyTotalShareBullet = dailyTotalShareBullet.add(amount);\\n        } else if (stakingInfo[msg.sender].currentStakingAmount >= bulletRewardThreshold) {\\n            dailyTotalShareBullet = dailyTotalShareBullet.add(stakingInfo[msg.sender].currentStakingAmount);\\n        }\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice This function allows a user to unstake their DOB tokens.\\n     * @dev\\n     * - Checks that the pool is not paused, that the function is not called within the same block the worker is updating, and that the user's tokens have been staked for at least `extendLockDays`.\\n     * - Calculates the pending uHODL and bHODL rewards for the user.\\n     * - Decreases the user's total staking amount and the pool's staking amount by the amount unstaked.\\n     * - Updates the uHODL and bHODL entry rewards.\\n     * - Transfers the unstaked DOB tokens from the contract to the user.\\n     * - Settles any pending rewards with vesting.\\n     * - Updates the daily staking amount for bullet rewards.\\n     * @param amount The amount of DOB tokens to unstake.\\n     */\\n    function unstake(uint256 amount) external whenNotPaused nonReentrant {\\n        require(\\n            block.timestamp >= userDatas[msg.sender].lastEntryTime + extendLockDays,\\n            \\\"DOBStaking: Less than unlock time\\\"\\n        );\\n        require(block.number != lastDeliverEndBlock, \\\"DOBStaking: worker is updating in same block!\\\");\\n\\n        _accuHodlReward();\\n        uint256 uHODLRewardToVest = poolData\\n        .uHODLAccuReward\\n        .sub(userDatas[msg.sender].uHODLEntryAccuReward)\\n        .mul(userDatas[msg.sender].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n        uint256 bHODLRewardToVest = poolData\\n        .bHODLAccuReward\\n        .sub(userDatas[msg.sender].bHODLEntryAccuReward)\\n        .mul(userDatas[msg.sender].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n\\n        userDatas[msg.sender].totalStakingAmount = userDatas[msg.sender].totalStakingAmount.sub(amount);\\n        poolData.stakingAmount = poolData.stakingAmount.sub(amount);\\n\\n        userDatas[msg.sender].uHODLEntryAccuReward = poolData.uHODLAccuReward;\\n        userDatas[msg.sender].bHODLEntryAccuReward = poolData.bHODLAccuReward;\\n\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(DOB), msg.sender, amount);\\n\\n        uHODLRewarder.onReward(1, msg.sender, uHODLRewardToVest, userDatas[msg.sender].lastEntryTime);\\n        bHODLRewarder.onReward(1, msg.sender, bHODLRewardToVest, userDatas[msg.sender].lastEntryTime);\\n\\n        if (\\n            stakingInfo[msg.sender].stakingAmountUpdateBlockHeight > lastDeliverEndBlock ||\\n            stakingInfo[msg.sender].currentStakingAmount < bulletRewardThreshold\\n        ) {\\n            uint256 oldDailyStakingAmount = stakingInfo[msg.sender].currentStakingAmount;\\n\\n            if (stakingInfo[msg.sender].currentStakingAmount < amount) {\\n                stakingInfo[msg.sender].currentStakingAmount = 0;\\n            } else {\\n                stakingInfo[msg.sender].currentStakingAmount = stakingInfo[msg.sender].currentStakingAmount.sub(amount);\\n            }\\n            if (oldDailyStakingAmount >= bulletRewardThreshold) {\\n                if (stakingInfo[msg.sender].currentStakingAmount < bulletRewardThreshold) {\\n                    dailyTotalShareBullet = dailyTotalShareBullet.sub(oldDailyStakingAmount);\\n                } else {\\n                    dailyTotalShareBullet = dailyTotalShareBullet.sub(amount);\\n                }\\n            }\\n        } else {\\n            stakingInfo[msg.sender].claimStakingAmount = stakingInfo[msg.sender].currentStakingAmount;\\n            stakingInfo[msg.sender].claimAmountUpdateBlockHeight = stakingInfo[msg.sender].stakingAmountUpdateBlockHeight;\\n            stakingInfo[msg.sender].currentStakingAmount = 0;\\n        }\\n        stakingInfo[msg.sender].stakingAmountUpdateBlockHeight = block.number;\\n\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice This function allows the owner to enable or disable the NFT check, and to set the NFT contract address\\n     *          and the remaining bullet collector address.\\n     * @dev\\n     * - Checks that the provided NFT contract address and remaining bullet collector address are valid if `_isCheckNFT` is true.\\n     * - Sets `isCheckNFT`, `NFTAddress`, and `remainingBulletCollector` according to the provided arguments.\\n     * @param _isCheckNFT If true, the NFT check will be enabled.\\n     * @param _nftAddress The address of the NFT contract.\\n     * @param _remainingBulletCollector The address of the remaining bullet collector.\\n     */\\n    function setIsCheckNFT(\\n        bool _isCheckNFT,\\n        ERC721 _nftAddress,\\n        address _remainingBulletCollector\\n    ) public onlyOwner {\\n        if (_isCheckNFT) {\\n            require(address(_nftAddress) != address(0), \\\"DOBStaking: NFT zero address\\\");\\n            require(_remainingBulletCollector != address(0), \\\"DOBStaking: surplus bullet collector zero address\\\");\\n            uint256 size;\\n            assembly {\\n                size := extcodesize(_nftAddress)\\n            }\\n            require(size > 0, \\\"Not a contract\\\");\\n            NFTAddress = _nftAddress;\\n            remainingBulletCollector = _remainingBulletCollector;\\n        }\\n        isCheckNFT = _isCheckNFT;\\n    }\\n\\n    /**\\n     * @notice This function checks if an NFT belonging to a user has already claimed rewards or not.\\n     * @dev\\n     * - Checks if `isCheckNFT` is true. If so, it requires that the provided NFT hasn't already claimed rewards.\\n     * - Checks if the owner of the NFT is the user. If these conditions are met, it returns true. Otherwise, it returns false.\\n     * @param _userAddress The address of the user to check.\\n     * @param _tokenId The ID of the NFT to check.\\n     * @return bool Returns true if the NFT check is successful, false otherwise.\\n     */\\n\\n    function nftCheckSuccess(address _userAddress, uint256 _tokenId) private view returns (bool) {\\n        if (isCheckNFT) {\\n            require(nftClaimInfo[_tokenId] <= lastDeliverEndBlock, \\\"DOBStaking:this nft has already claimed for rewards\\\");\\n            if (NFTAddress.ownerOf(_tokenId) == _userAddress) {\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles daily tasks for the smart contract.\\n     * @dev\\n     * - Can only be called by an account with the \\\"Worker\\\" role.\\n     * - Only executable when the contract is not paused.\\n     * - Ensures the last work has been done more than 18 hours ago.\\n     * - Loops over activated options, checks balance, makes transfers, and updates the contract's internal state.\\n     * @param _balanceCheck The boolean flag to check the balance.\\n     */\\n    function dailyWork(bool _balanceCheck) external onlyWorker whenNotPaused nonReentrant {\\n        require(block.timestamp > (lastWorkTimestamp + 18 hours), \\\"DOBStaking: last work not over 18 hours\\\");\\n\\n        uint256 remainingAmount = lastPeriodDailyTotalShareBullet.sub(lastPeriodDailyClaimTotal);\\n        if (remainingAmount > 0 && lastPeriodDailyTotalShareBullet > 0) {\\n            for (uint8 j = 0; j < activatedOptions.length; j++) {\\n                if (activatedOptions[j].bulletBalance > 0) {\\n                    uint256 bulletAmount = activatedOptions[j].bulletBalance.mul(remainingAmount).div(\\n                        lastPeriodDailyTotalShareBullet\\n                    );\\n\\n                    if (\\n                        _balanceCheck &&\\n                        IERC20Upgradeable(activatedOptions[j].bullet).balanceOf(bulletCollector) < bulletAmount\\n                    ) {\\n                        continue;\\n                    }\\n\\n                    if (bulletAmount <= activatedOptions[j].bulletBalance) {\\n                        ITokenKeeper(bulletCollector).transferToken(\\n                            activatedOptions[j].bullet,\\n                            remainingBulletCollector,\\n                            bulletAmount\\n                        );\\n                        emit BulletReward(remainingBulletCollector, activatedOptions[j].bullet, bulletAmount);\\n                    }\\n                }\\n            }\\n        }\\n\\n        updateActivatedOptions();\\n        lastPeriodDailyTotalShareBullet = dailyTotalShareBullet;\\n        lastPeriodDailyClaimTotal = 0;\\n        dailyTotalShareBullet = 0;\\n        lastDeliverStartBlock = lastDeliverEndBlock;\\n        lastDeliverEndBlock = block.number;\\n        lastWorkTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Draw BULLET rewards for a user.\\n     * @dev\\n     * - Requires the user hasn't claimed for rewards multiple times in one day.\\n     * - Checks that the user owns the NFT.\\n     * - Ensures there are some BULLET rewards left to claim.\\n     * - Checks the user's staking status and gives the BULLET rewards accordingly.\\n     * @param user The address of the user.\\n     * @param tokenID The id of the NFT.\\n     */\\n    function drawReward(address user, uint256 tokenID) external whenNotPaused nonReentrant {\\n        require(userClaimInfo[user] <= lastDeliverEndBlock, \\\"DOBStaking: This user has already claimed for rewards\\\");\\n        require(nftCheckSuccess(user, tokenID), \\\"DOBStaking: You do not have the NFT\\\");\\n        require(lastPeriodDailyTotalShareBullet > 0, \\\"DOBStaking: lastPeriodDailyTotalShareBullet is zero\\\");\\n\\n        uint256 shareAmount = 0;\\n        if (\\n            stakingInfo[user].currentStakingAmount >= bulletRewardThreshold &&\\n            stakingInfo[user].stakingAmountUpdateBlockHeight > lastDeliverStartBlock &&\\n            stakingInfo[user].stakingAmountUpdateBlockHeight <= lastDeliverEndBlock\\n        ) {\\n            shareAmount = stakingInfo[user].currentStakingAmount;\\n        }\\n        if (\\n            stakingInfo[user].claimStakingAmount >= bulletRewardThreshold &&\\n            stakingInfo[user].claimAmountUpdateBlockHeight > lastDeliverStartBlock &&\\n            stakingInfo[user].claimAmountUpdateBlockHeight <= lastDeliverEndBlock\\n        ) {\\n            shareAmount = stakingInfo[user].claimStakingAmount;\\n        }\\n\\n        require(shareAmount > 0, \\\"DOBStaking: You do not have reward to claim\\\");\\n\\n        lastPeriodDailyClaimTotal += shareAmount;\\n\\n        require(\\n            lastPeriodDailyClaimTotal <= lastPeriodDailyTotalShareBullet,\\n            \\\"DOBStaking: claim total is large than share total\\\"\\n        );\\n\\n        for (uint8 j = 0; j < activatedOptions.length; j++) {\\n            uint256 bulletAmount = activatedOptions[j].bulletBalance.mul(shareAmount).div(lastPeriodDailyTotalShareBullet);\\n            if (bulletAmount > 0 && bulletAmount <= activatedOptions[j].bulletBalance) {\\n                ITokenKeeper(bulletCollector).transferToken(activatedOptions[j].bullet, user, bulletAmount);\\n                emit BulletReward(user, activatedOptions[j].bullet, bulletAmount);\\n            }\\n        }\\n\\n        nftClaimInfo[tokenID] = block.number;\\n        userClaimInfo[user] = block.number;\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the total accumulated HODL rewards for a user.\\n     * @dev\\n     * - The total accumulated rewards for a user is the sum of pending rewards (rewards yet to be claimed) and rewards that are already vested and vesting.\\n     * - This function checks the pool's staking amount. If greater than zero, it calculates the amount of rewards for each staking token, and updates the real accumulated rewards.\\n     * - Then, it calculates the pending rewards, and sums them up with the rewards in the rewarder contract, which includes both vested and vesting rewards.\\n     * @param user The address of the user.\\n     * @return uHODLReward The total uHODL reward for the user.\\n     * @return bHODLReward The total bHODL reward for the user.\\n     */\\n    function getReward(address user) external view returns (uint256 uHODLReward, uint256 bHODLReward) {\\n        uint256 realuHODLAccuReward = poolData.uHODLAccuReward;\\n        uint256 realbHODLAccuReward = poolData.bHODLAccuReward;\\n        if (poolData.stakingAmount > 0) {\\n            uint256 uAmountForReward = IERC20Upgradeable(uHODL).balanceOf(feeCollector);\\n            uint256 bAmountForReward = IERC20Upgradeable(bHODL).balanceOf(feeCollector);\\n\\n            realuHODLAccuReward = uAmountForReward.mul(ACCU_REWARD_MULTIPLIER).div(poolData.stakingAmount).add(\\n                realuHODLAccuReward\\n            );\\n            realbHODLAccuReward = bAmountForReward.mul(ACCU_REWARD_MULTIPLIER).div(poolData.stakingAmount).add(\\n                realbHODLAccuReward\\n            );\\n        }\\n\\n        uint256 uHODLpendingReward = realuHODLAccuReward\\n        .sub(userDatas[user].uHODLEntryAccuReward)\\n        .mul(userDatas[user].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n        uint256 bHODlpendingReward = realbHODLAccuReward\\n        .sub(userDatas[user].bHODLEntryAccuReward)\\n        .mul(userDatas[user].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n\\n        uint256 uHODLRewardInRewarder = uHODLRewarder.calculateTotalReward(user, 1);\\n        uint256 bHODLRewardInRewarder = bHODLRewarder.calculateTotalReward(user, 1);\\n\\n        uHODLReward = uHODLpendingReward.add(uHODLRewardInRewarder);\\n        bHODLReward = bHODlpendingReward.add(bHODLRewardInRewarder);\\n    }\\n\\n    /**\\n     * @notice Allows the user to claim their HODL rewards.\\n     * @dev This function calculates the pending reward for a user, settles these rewards to the rewarder contract with vesting, and then attempts to claim withdrawable rewards from the rewarder.\\n     * - It requires that the claimable rewards are more than zero and emits a RewardRedeemed event for each token reward that is claimed.\\n     */\\n    function redeemReward() external nonReentrant whenNotPaused {\\n        _accuHodlReward();\\n        uint256 uHODLRewardToVest = poolData\\n        .uHODLAccuReward\\n        .sub(userDatas[msg.sender].uHODLEntryAccuReward)\\n        .mul(userDatas[msg.sender].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n        uint256 bHODLRewardToVest = poolData\\n        .bHODLAccuReward\\n        .sub(userDatas[msg.sender].bHODLEntryAccuReward)\\n        .mul(userDatas[msg.sender].totalStakingAmount)\\n        .div(ACCU_REWARD_MULTIPLIER);\\n\\n        uHODLRewarder.onReward(1, msg.sender, uHODLRewardToVest, userDatas[msg.sender].lastEntryTime);\\n        userDatas[msg.sender].uHODLEntryAccuReward = poolData.uHODLAccuReward;\\n        bHODLRewarder.onReward(1, msg.sender, bHODLRewardToVest, userDatas[msg.sender].lastEntryTime);\\n        userDatas[msg.sender].bHODLEntryAccuReward = poolData.bHODLAccuReward;\\n\\n        uint256 uHODLClaimable = uHODLRewarder.calculateWithdrawableReward(msg.sender, 1);\\n        uint256 bHODLClaimable = bHODLRewarder.calculateWithdrawableReward(msg.sender, 1);\\n        require(uHODLClaimable > 0 || bHODLClaimable > 0, \\\"DOBStaking: haven't withdrawable reward\\\");\\n        if (uHODLClaimable > 0) {\\n            uint256 claimed = uHODLRewarder.claimVestedReward(1, msg.sender);\\n            emit RewardRedeemed(msg.sender, address(uHODLRewarder), claimed, 0);\\n        }\\n\\n        if (bHODLClaimable > 0) {\\n            uint256 claimed = bHODLRewarder.claimVestedReward(1, msg.sender);\\n            emit RewardRedeemed(msg.sender, address(bHODLRewarder), claimed, 1);\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function that accumulates the HODL reward.\\n     * @dev This function checks the pool's staking amount, if it is greater than zero, it transfers the reward amount from the fee collector to the reward dispatcher and updates the accumulated rewards.\\n     */\\n    function _accuHodlReward() internal {\\n        if (poolData.stakingAmount > 0) {\\n            uint256 uAmountForReward = IERC20Upgradeable(uHODL).balanceOf(feeCollector);\\n            uint256 bAmountForReward = IERC20Upgradeable(bHODL).balanceOf(feeCollector);\\n            if (uAmountForReward > 0) {\\n                SafeERC20Upgradeable.safeTransferFrom(\\n                    IERC20Upgradeable(uHODL),\\n                    feeCollector,\\n                    rewardDispatcher,\\n                    uAmountForReward\\n                );\\n            }\\n            if (bAmountForReward > 0) {\\n                SafeERC20Upgradeable.safeTransferFrom(\\n                    IERC20Upgradeable(bHODL),\\n                    feeCollector,\\n                    rewardDispatcher,\\n                    bAmountForReward\\n                );\\n            }\\n            poolData.uHODLAccuReward = uAmountForReward.mul(ACCU_REWARD_MULTIPLIER).div(poolData.stakingAmount).add(\\n                poolData.uHODLAccuReward\\n            );\\n            poolData.bHODLAccuReward = bAmountForReward.mul(ACCU_REWARD_MULTIPLIER).div(poolData.stakingAmount).add(\\n                poolData.bHODLAccuReward\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows a user to unstake their tokens in case of an emergency.\\n     * @dev This function can only be called when the contract is paused. It updates the pool's total staking amount and transfers the user's staking amount back to the user.\\n     */\\n    function emergencyUnstake() external whenPaused {\\n        require(userDatas[msg.sender].totalStakingAmount > 0, \\\"DOBStaking: total staking amount is zero\\\");\\n        uint256 amount = userDatas[msg.sender].totalStakingAmount;\\n        userDatas[msg.sender].totalStakingAmount = 0;\\n        poolData.stakingAmount = poolData.stakingAmount.sub(amount);\\n\\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(DOB), msg.sender, amount);\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Pauses the contract, preventing certain actions until unpaused.\\n     * @dev Only callable by the owner of the contract.\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPoolRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IStakingPoolRewarder interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for calculating and distributing staking pool rewards\\r\\n */\\r\\ninterface IStakingPoolRewarder {\\r\\n    /**\\r\\n     * @notice Calculate the total amount of reward tokens for the specified user and pool ID\\r\\n     * @dev Calculates the total amount of reward tokens for the specified user and pool ID\\r\\n     * @param user The address of the user to calculate rewards for\\r\\n     * @param poolId The ID of the staking pool to calculate rewards for\\r\\n     * @return The total amount of reward tokens for the specified user and pool ID\\r\\n     */\\r\\n    function calculateTotalReward(address user, uint256 poolId) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     * @dev Calculates the amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     * @param user The address of the user to calculate rewards for\\r\\n     * @param poolId The ID of the staking pool to calculate rewards for\\r\\n     * @return The amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     */\\r\\n    function calculateWithdrawableReward(address user, uint256 poolId) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Update the vesting schedule and claimable amounts for the specified user and pool ID\\r\\n     * @dev Calculates and updates the user's vested and unvested token amounts based on their staking activity, and adds any vested tokens to the user's claimable amounts.\\r\\n     * @param poolId The ID of the staking pool to update vesting schedule and claimable amounts for\\r\\n     * @param user The address of the user to update vesting schedule and claimable amounts for\\r\\n     * @param amount The amount of reward tokens earned by the user\\r\\n     * @param entryTime The timestamp of the user's entry into the staking pool\\r\\n     */\\r\\n    function onReward(uint256 poolId, address user, uint256 amount, uint256 entryTime) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Claim vested reward tokens for the specified user and pool ID\\r\\n     * @dev Claims vested reward tokens for the specified user and pool ID\\r\\n     * @param poolId The ID of the staking pool to claim rewards from\\r\\n     * @param user The address of the user to claim rewards for\\r\\n     * @return The amount of vested reward tokens claimed by the specified user and pool ID\\r\\n     */\\r\\n    function claimVestedReward(uint256 poolId, address user) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDOBStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IDOBStakingPool interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for managing staking pools for DOB options\\r\\n */\\r\\ninterface IDOBStakingPool {\\r\\n    /**\\r\\n     * @notice Add an option to the staking pool\\r\\n     * @dev Adds the specified option to the staking pool and associates it with the specified Bullet and Sniper tokens\\r\\n     * @param _optionAddress The address of the option contract to add\\r\\n     * @param _bulletAddress The address of the associated BULLET token contract\\r\\n     * @param _sniperAddress The address of the associated SNIPER token contract\\r\\n     */\\r\\n    function addOption(address _optionAddress, address _bulletAddress, address _sniperAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Remove an option from the staking pool\\r\\n     * @dev Removes the specified option from the staking pool\\r\\n     * @param _optionAddress The address of the option contract to remove\\r\\n     */\\r\\n    function removeOption(address _optionAddress) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IOption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IOption interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for managing options contracts\\r\\n */\\r\\ninterface IOption {\\r\\n    /**\\r\\n     * @notice Get the expiry time of the option\\r\\n     * @dev Returns the expiry time of the option in seconds since the Unix epoch\\r\\n     * @return The expiry time of the option\\r\\n     */\\r\\n    function getExpiryTime() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the option contract with the specified parameters\\r\\n     * @dev Initializes the option contract with the specified strike price, exercise timestamp, and option type\\r\\n     * @param _strikePrice The strike price of the option\\r\\n     * @param _exerciseTimestamp The exercise timestamp of the option\\r\\n     * @param _type The type of the option (i.e., call or put)\\r\\n     */\\r\\n    function initialize(uint256 _strikePrice, uint256 _exerciseTimestamp, uint8 _type) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set up the option contract with the specified parameters\\r\\n     * @dev Sets up the option contract with the specified option ID, start block, uHODL and bHODL token addresses, fund address, and Bullet and Sniper token addresses\\r\\n     * @param _optionID The ID of the option contract\\r\\n     * @param _startBlock The start block of the option contract\\r\\n     * @param _uHODLAddress The address of the uHODL token contract\\r\\n     * @param _bHODLTokenAddress The address of the bHODL token contract\\r\\n     * @param _fund The address of the fund contract\\r\\n     * @param _bullet The address of the BULLET token contract\\r\\n     * @param _sniper The address of the SNIPER token contract\\r\\n     */\\r\\n    function setup(\\r\\n        uint256 _optionID,\\r\\n        uint256 _startBlock,\\r\\n        address _uHODLAddress,\\r\\n        address _bHODLTokenAddress,\\r\\n        address _fund,\\r\\n        address _bullet,\\r\\n        address _sniper\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update the strike price of the option\\r\\n     * @dev Updates the strike price of the option to the specified value\\r\\n     * @param _strikePrice The new strike price of the option\\r\\n     */\\r\\n    function updateStrike(uint256 _strikePrice) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set all fee and reward ratios for the option contract\\r\\n     * @dev Sets all fee and reward ratios for the option contract to the specified values\\r\\n     * @param _entryFeeRatio The entry fee ratio to set in basis points\\r\\n     * @param _exerciseFeeRatio The exercise fee ratio to set in basis points\\r\\n     * @param _withdrawFeeRatio The withdraw fee ratio to set in basis points\\r\\n     * @param _redeemFeeRatio The redeem fee ratio to set in basis points\\r\\n     * @param _bulletToRewardRatio The BULLET-to-reward ratio to in base 100\\r\\n     */\\r\\n    function setAllRatio(\\r\\n        uint16 _entryFeeRatio,\\r\\n        uint16 _exerciseFeeRatio,\\r\\n        uint16 _withdrawFeeRatio,\\r\\n        uint16 _redeemFeeRatio,\\r\\n        uint16 _bulletToRewardRatio\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set the entry fee ratio for the option contract\\r\\n     * @dev Sets the entry fee ratio for the option contract to the specified value\\r\\n     * @param _feeRatio The entry fee ratio to set\\r\\n     */\\r\\n    function setOptionEntryFeeRatio(uint16 _feeRatio) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set the exercise fee ratio for the option contract\\r\\n     * @dev Sets the exercise fee ratio for the option contract to the specified value\\r\\n     * @param _feeRatio The exercise fee ratio to set\\r\\n     */\\r\\n    function setOptionExerciseFeeRatio(uint16 _feeRatio) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set the withdraw fee ratio for the option contract\\r\\n     * @dev Sets the withdraw fee ratio for the option contract to the specified value\\r\\n     * @param _feeRatio The withdraw fee ratio to set\\r\\n     */\\r\\n    function setOptionWithdrawFeeRatio(uint16 _feeRatio) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set the redeem fee ratio for the option contract\\r\\n     * @dev Sets the redeem fee ratio for the option contract to the specified value\\r\\n     * @param _feeRatio The redeem fee ratio to set\\r\\n     */\\r\\n    function setOptionRedeemFeeRatio(uint16 _feeRatio) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set the BULLET-to-reward ratio for the option contract\\r\\n     * @dev Sets the BULLET-to-reward ratio for the option contract to the specified value\\r\\n     * @param _feeRatio The BULLET-to-reward ratio to set\\r\\n     */\\r\\n    function setOptionBulletToRewardRatio(uint16 _feeRatio) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Set the fund address for the option contract\\r\\n     * @dev Sets the fund address for the option contract to the specified value\\r\\n     * @param _fund The fund address to set\\r\\n     */\\r\\n    function setFund(address _fund) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Exits the option by unstaking and redeeming all rewards.\\r\\n     * @dev This function unstakes the user's tokens, redeems their SNIPER tokens, and withdraws their rewards.\\r\\n     */\\r\\n    function exitAll() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Enters an options contract by depositing a certain amount of tokens.\\r\\n     * @dev This function is used to enter an options contract. The sender should have approved the transfer.\\r\\n     *      The amount of tokens is transferred to this contract, the entry fee is calculated, distributed,\\r\\n     *      and subtracted from the amount. The remaining amount is used to mint BULLET and SNIPER tokens,\\r\\n     *      which are passed to the fund and the staking pool, respectively.\\r\\n     * @param _amount The amount of tokens to enter.\\r\\n     */\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Exercises the option by burning option tokens and receiving base tokens.\\r\\n     * @dev This function burns a specific amount of BULLET tokens and calculates the amount of base tokens\\r\\n     *      to transfer depending on the option type (call or put). It also calculates and applies the exercise fee.\\r\\n     * @param _targetAmount The amount of option tokens to exercise.\\r\\n     */\\r\\n    function exercise(uint256 _targetAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Unwinds a specific amount of options.\\r\\n     * @dev This funciton burns the user's SNIPER and BULLET for the option to withdraw collateral.\\r\\n     * @param _unwindAmount The amount of options to unwind.\\r\\n     */\\r\\n    function unwind(uint256 _unwindAmount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title ITokenKeeper interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for managing TokenKeeper contracts\\r\\n */\\r\\ninterface ITokenKeeper {\\r\\n    /**\\r\\n     * @notice Transfers a certain amount of an ERC20 token to a recipient.\\r\\n     * @dev Transfers an ERC20 token from the TokenKeeper contract to a recipient. Only the contract owner or a whitelisted contract can call this function, and only if transfers are not frozen.\\r\\n     * @param _tokenAddress The address of the ERC20 token to be transferred.\\r\\n     * @param _receiver The address to receive the tokens.\\r\\n     * @param _amount The amount of tokens to be transferred.\\r\\n     */\\r\\n    function transferToken(\\r\\n        address _tokenAddress,\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Approves a spender to spend a certain amount of an ERC20 token.\\r\\n     * @dev Approves a spender to spend an ERC20 token on behalf of the TokenKeeper contract. Only the contract owner or a whitelisted contract can call this function, and only if transfers are not frozen.\\r\\n     * @param _token The address of the ERC20 token.\\r\\n     * @param _spender The address to be approved as a spender.\\r\\n     * @param _approveAmount The amount of tokens the spender is approved to spend.\\r\\n     */\\r\\n    function approveToken(\\r\\n        address _token,\\r\\n        address _spender,\\r\\n        uint256 _approveAmount\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bullet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BulletReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"BulletRewardThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDays\",\"type\":\"uint256\"}],\"name\":\"ExtendLockDaysChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"FactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rewardType\",\"type\":\"uint8\"}],\"name\":\"RewardRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"RewarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWorker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWorker\",\"type\":\"address\"}],\"name\":\"WorkerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTAddress\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bulletCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uHODL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bHODL\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DOB\",\"type\":\"address\"}],\"name\":\"__DOBStakingPool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activatedOptionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activatedOptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"optionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bullet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sniper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bulletBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bulletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sniperAddress\",\"type\":\"address\"}],\"name\":\"addOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bHODL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bHODLRewarder\",\"outputs\":[{\"internalType\":\"contract IStakingPoolRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bulletCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bulletRewardThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyTotalShareBullet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_balanceCheck\",\"type\":\"bool\"}],\"name\":\"dailyWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"drawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extendLockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uHODLReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bHODLReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCheckNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDeliverEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDeliverStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPeriodDailyClaimTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPeriodDailyTotalShareBullet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWorkTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftClaimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uHODLAccuReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bHODLAccuReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingBulletCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_optionAddress\",\"type\":\"address\"}],\"name\":\"removeOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bulletCollector\",\"type\":\"address\"}],\"name\":\"setBulletCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setBulletRewardThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setExtendLockDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isCheckNFT\",\"type\":\"bool\"},{\"internalType\":\"contract ERC721\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remainingBulletCollector\",\"type\":\"address\"}],\"name\":\"setIsCheckNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_remainingBulletCollector\",\"type\":\"address\"}],\"name\":\"setRemainingBulletCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDispatcher\",\"type\":\"address\"}],\"name\":\"setRewardDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bHODLRewarder\",\"type\":\"address\"}],\"name\":\"setbHODLRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uHODLRewarder\",\"type\":\"address\"}],\"name\":\"setuHODLRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAmountUpdateBlockHeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingAmountUpdateBlockHeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uHODL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uHODLRewarder\",\"outputs\":[{\"internalType\":\"contract IStakingPoolRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDatas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uHODLEntryAccuReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bHODLEntryAccuReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEntryTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DOBStakingPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}