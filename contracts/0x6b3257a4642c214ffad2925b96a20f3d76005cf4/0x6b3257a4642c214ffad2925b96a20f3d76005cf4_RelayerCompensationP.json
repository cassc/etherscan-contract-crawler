{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RelayerCompensationProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport { IGovernance } from \\\"@interfaces/IGovernance.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract RelayerCompensationProposal {\\n    IERC20 public constant TORN = IERC20(0x77777FeDdddFfC19Ff86DB637967013e6C6A116C);\\n\\n    struct RelayerLoss {\\n        address relayer;\\n        uint256 lostAmountInTorn;\\n    }\\n\\n    function executeProposal() public {\\n        // Data from 'data/relayerLosses.txt', generated by 'scripts/calculateLosses.ts'\\n        RelayerLoss[4] memory relayerLosses = [\\n            RelayerLoss(0x864DF9CD806D58341f13602103Bf853066ff962a, 625_894_225_496_155_734_516),\\n            RelayerLoss(0x5555555731006f71f121144534Ca7C8799F66AA3, 43_970_301_082_908_267_318),\\n            RelayerLoss(0x2Ee39Ff05643bC7cc9ed31B71e142429044A425C, 189_640_345_451_160_934_437),\\n            RelayerLoss(0x03392600086874456E08D2bAc104380BCdEBCfC0, 129_757_783_603_193_410_350)\\n        ];\\n\\n        for (uint256 i = 0; i < relayerLosses.length; i++) {\\n            TORN.transfer(relayerLosses[i].relayer, relayerLosses[i].lostAmountInTorn);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nenum ProposalState {\\n    Pending,\\n    Active,\\n    Defeated,\\n    Timelocked,\\n    AwaitingExecution,\\n    Executed,\\n    Expired\\n}\\n\\nstruct Proposal {\\n    // Creator of the proposal\\n    address proposer;\\n    // target addresses for the call to be made\\n    address target;\\n    // The block at which voting begins\\n    uint256 startTime;\\n    // The block at which voting ends: votes must be cast prior to this block\\n    uint256 endTime;\\n    // Current number of votes in favor of this proposal\\n    uint256 forVotes;\\n    // Current number of votes in opposition to this proposal\\n    uint256 againstVotes;\\n    // Flag marking whether the proposal has been executed\\n    bool executed;\\n    // Flag marking whether the proposal voting time has been extended\\n    // Voting time can be extended once, if the proposal outcome has changed during CLOSING_PERIOD\\n    bool extended;\\n}\\n\\ninterface IGovernance {\\n    function initialized() external view returns (bool);\\n    function initializing() external view returns (bool);\\n    function EXECUTION_DELAY() external view returns (uint256);\\n    function EXECUTION_EXPIRATION() external view returns (uint256);\\n    function QUORUM_VOTES() external view returns (uint256);\\n    function PROPOSAL_THRESHOLD() external view returns (uint256);\\n    function VOTING_DELAY() external view returns (uint256);\\n    function VOTING_PERIOD() external view returns (uint256);\\n    function CLOSING_PERIOD() external view returns (uint256);\\n    function VOTE_EXTEND_TIME() external view returns (uint256);\\n    function torn() external view returns (address);\\n    function proposals(uint256 index) external view returns (Proposal memory);\\n    function proposalCount() external view returns (uint256);\\n    function lockedBalance(address account) external view returns (uint256);\\n    function propose(address target, string memory description) external returns (uint256);\\n    function castVote(uint256 proposalId, bool support) external;\\n    function lock(address owner, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function lockWithApproval(uint256 amount) external;\\n    function unlock(uint256 amount) external;\\n    function execute(uint256 proposalId) external payable;\\n    function state(uint256 proposalId) external view returns (ProposalState);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ens/contracts/=node_modules/@ensdomains/ens-contracts/contracts/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@gnosis.pm/=node_modules/@gnosis.pm/\",\r\n      \"@gnosis/contracts/=node_modules/@gnosis.pm/safe-contracts/contracts/\",\r\n      \"@gnosis/ido-contracts/=node_modules/@gnosis.pm/ido-contracts/contracts/\",\r\n      \"@interfaces/=src/interfaces/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"@openzeppelin/upgrades/=node_modules/@openzeppelin/upgrades-core/\",\r\n      \"@proprietary/=src/proprietary/\",\r\n      \"@root/=src/\",\r\n      \"@torn-token/=node_modules/torn-token/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"TORN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RelayerCompensationProposal", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}