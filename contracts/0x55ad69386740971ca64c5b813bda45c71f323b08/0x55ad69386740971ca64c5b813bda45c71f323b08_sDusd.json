{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IsDusd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n// Copyright (C) 2021-2022 Dai Foundation\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IERC1271 {\\r\\n    function isValidSignature(bytes32, bytes memory) external view returns (bytes4);\\r\\n}\\r\\ninterface VatLike {\\r\\n    function hope(address) external;\\r\\n}\\r\\ninterface PotLike {\\r\\n    function chi() external view returns (uint256);\\r\\n    function rho() external view returns (uint256);\\r\\n    function dsr() external view returns (uint256);\\r\\n    function drip() external returns (uint256);\\r\\n    function join(uint256) external;\\r\\n    function exit(uint256) external;\\r\\n}\\r\\ninterface DUSDJoinLike {\\r\\n    function vat() external view returns (address);\\r\\n    function davos() external view returns (address);\\r\\n    function join(address, uint256) external;\\r\\n    function exit(address, uint256) external;\\r\\n}\\r\\ninterface DUSDLike {\\r\\n    function transferFrom(address, address, uint256) external returns (bool);\\r\\n    function approve(address, uint256) external returns (bool);\\r\\n}\\r\\ninterface IsDusd {\\r\\n\\r\\n    // --- Events ---\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\r\\n    event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares);\\r\\n    event Referral(uint16 indexed referral, address indexed owner, uint256 assets, uint256 shares);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n    function allowance(address, address) external view returns (uint256);\\r\\n    function approve(address, uint256) external returns (bool);\\r\\n    function transfer(address, uint256) external returns (bool);\\r\\n    function transferFrom(address, address, uint256) external returns (bool);\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function version() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function deploymentChainId() external view returns (uint256);\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function nonces(address) external view returns (uint256);\\r\\n    function vat() external view returns (VatLike);\\r\\n    function DUSDJoin() external view returns (DUSDJoinLike);\\r\\n    function DUSD() external view returns (DUSDLike);\\r\\n    function pot() external view returns (PotLike);\\r\\n    function increaseAllowance(address, uint256) external returns (bool);\\r\\n    function decreaseAllowance(address, uint256) external returns (bool);\\r\\n    function asset() external view returns (address);\\r\\n    function totalAssets() external view returns (uint256);\\r\\n    function convertToShares(uint256) external view returns (uint256);\\r\\n    function convertToAssets(uint256) external view returns (uint256);\\r\\n    function maxDeposit(address) external view returns (uint256);\\r\\n    function previewDeposit(uint256) external view returns (uint256);\\r\\n    function deposit(uint256, address) external returns (uint256);\\r\\n    function deposit(uint256, address, uint16) external returns (uint256);\\r\\n    function maxMint(address) external view returns (uint256);\\r\\n    function previewMint(uint256) external view returns (uint256);\\r\\n    function mint(uint256, address) external returns (uint256);\\r\\n    function mint(uint256, address, uint16) external returns (uint256);\\r\\n    function maxWithdraw(address) external view returns (uint256);\\r\\n    function previewWithdraw(uint256) external view returns (uint256);\\r\\n    function withdraw(uint256, address, address) external returns (uint256);\\r\\n    function maxRedeem(address) external view returns (uint256);\\r\\n    function previewRedeem(uint256) external view returns (uint256);\\r\\n    function redeem(uint256, address, address) external returns (uint256);\\r\\n    function permit(address, address, uint256, uint256, bytes memory) external;\\r\\n    function permit(address, address, uint256, uint256, uint8, bytes32, bytes32) external;\\r\\n}\"\r\n    },\r\n    \"contracts/sDusd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./interfaces/IsDusd.sol\\\";\\r\\n\\r\\n/// A tokenized representation DUSD in the DSR (pot)\\r\\ncontract sDusd is IsDusd, Initializable {\\r\\n\\r\\n    // --- Data ---\\r\\n    string  public constant name     = \\\"Staked DUSD\\\";\\r\\n    string  public constant symbol   = \\\"sDUSD\\\";\\r\\n    string  public constant version  = \\\"1\\\";\\r\\n    uint8   public constant decimals = 18;\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    mapping (address => uint256)                      public balanceOf;\\r\\n    mapping (address => mapping (address => uint256)) public allowance;\\r\\n    mapping (address => uint256)                      public nonces;\\r\\n\\r\\n    VatLike      public vat;\\r\\n    DUSDJoinLike public DUSDJoin;\\r\\n    DUSDLike     public DUSD;\\r\\n    PotLike      public pot;\\r\\n\\r\\n    // --- EIP712 niceties ---\\r\\n    uint256 public deploymentChainId;\\r\\n    bytes32 private _DOMAIN_SEPARATOR;\\r\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    \\r\\n    uint256 public constant RAY = 10 ** 27;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    // --- Constructor ---\\r\\n    constructor() { _disableInitializers(); }\\r\\n\\r\\n    // --- Init ---\\r\\n    function initialize(address _dUSDJoin, address _pot) external initializer {\\r\\n        DUSDJoin = DUSDJoinLike(_dUSDJoin);\\r\\n        vat = VatLike(DUSDJoin.vat());\\r\\n        DUSD = DUSDLike(DUSDJoin.davos());\\r\\n        pot = PotLike(_pot);\\r\\n\\r\\n        deploymentChainId = block.chainid;\\r\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(block.chainid);\\r\\n\\r\\n        vat.hope(address(DUSDJoin));\\r\\n        vat.hope(address(pot));\\r\\n\\r\\n        DUSD.approve(address(DUSDJoin), type(uint256).max);\\r\\n    }\\r\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\r\\n        return keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(version)),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\r\\n        return block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);\\r\\n    }\\r\\n    function _rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x case 0 {switch n case 0 {z := RAY} default {z := 0}}\\r\\n            default {\\r\\n                switch mod(n, 2) case 0 { z := RAY } default { z := x }\\r\\n                let half := div(RAY, 2)  // for rounding.\\r\\n                for { n := div(n, 2) } n { n := div(n,2) } {\\r\\n                    let xx := mul(x, x)\\r\\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\\r\\n                    let xxRound := add(xx, half)\\r\\n                    if lt(xxRound, xx) { revert(0,0) }\\r\\n                    x := div(xxRound, RAY)\\r\\n                    if mod(n,2) {\\r\\n                        let zx := mul(z, x)\\r\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\\r\\n                        let zxRound := add(zx, half)\\r\\n                        if lt(zxRound, zx) { revert(0,0) }\\r\\n                        z := div(zxRound, RAY)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function _divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = x != 0 ? ((x - 1) / y) + 1 : 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- ERC20 Mutations ---\\r\\n    function transfer(address to, uint256 value) external returns (bool) {\\r\\n        require(to != address(0) && to != address(this), \\\"SavingsDUSD/invalid-address\\\");\\r\\n        uint256 balance = balanceOf[msg.sender];\\r\\n        require(balance >= value, \\\"SavingsDUSD/insufficient-balance\\\");\\r\\n\\r\\n        unchecked {\\r\\n            balanceOf[msg.sender] = balance - value;\\r\\n            balanceOf[to] += value;\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, to, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\\r\\n        require(to != address(0) && to != address(this), \\\"SavingsDUSD/invalid-address\\\");\\r\\n        uint256 balance = balanceOf[from];\\r\\n        require(balance >= value, \\\"SavingsDUSD/insufficient-balance\\\");\\r\\n\\r\\n        if (from != msg.sender) {\\r\\n            uint256 allowed = allowance[from][msg.sender];\\r\\n            if (allowed != type(uint256).max) {\\r\\n                require(allowed >= value, \\\"SavingsDUSD/insufficient-allowance\\\");\\r\\n\\r\\n                unchecked {\\r\\n                    allowance[from][msg.sender] = allowed - value;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            balanceOf[from] = balance - value;\\r\\n            balanceOf[to] += value;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    function approve(address spender, uint256 value) external returns (bool) {\\r\\n        allowance[msg.sender][spender] = value;\\r\\n\\r\\n        emit Approval(msg.sender, spender, value);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        uint256 newValue = allowance[msg.sender][spender] + addedValue;\\r\\n        allowance[msg.sender][spender] = newValue;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        uint256 allowed = allowance[msg.sender][spender];\\r\\n        require(allowed >= subtractedValue, \\\"SavingsDUSD/insufficient-allowance\\\");\\r\\n        unchecked{\\r\\n            allowed = allowed - subtractedValue;\\r\\n        }\\r\\n        allowance[msg.sender][spender] = allowed;\\r\\n\\r\\n        emit Approval(msg.sender, spender, allowed);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // --- Mint/Burn Internal ---\\r\\n    function _mint(uint256 assets, uint256 shares, address receiver) internal {\\r\\n        require(receiver != address(0) && receiver != address(this), \\\"SavingsDUSD/invalid-address\\\");\\r\\n\\r\\n        DUSD.transferFrom(msg.sender, address(this), assets);\\r\\n        DUSDJoin.join(address(this), assets);\\r\\n        pot.join(shares);\\r\\n\\r\\n        // note: we don't need an overflow check here b/c shares totalSupply will always be <= DUSD totalSupply\\r\\n        unchecked {\\r\\n            balanceOf[receiver] = balanceOf[receiver] + shares;\\r\\n            totalSupply = totalSupply + shares;\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, receiver, assets, shares);\\r\\n        emit Transfer(address(0), receiver, shares);\\r\\n    }\\r\\n    function _burn(uint256 assets, uint256 shares, address receiver, address owner) internal {\\r\\n        uint256 balance = balanceOf[owner];\\r\\n        require(balance >= shares, \\\"SavingsDUSD/insufficient-balance\\\");\\r\\n\\r\\n        if (owner != msg.sender) {\\r\\n            uint256 allowed = allowance[owner][msg.sender];\\r\\n            if (allowed != type(uint256).max) {\\r\\n                require(allowed >= shares, \\\"SavingsDUSD/insufficient-allowance\\\");\\r\\n\\r\\n                unchecked {\\r\\n                    allowance[owner][msg.sender] = allowed - shares;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            balanceOf[owner] = balance - shares; // note: we don't need overflow checks b/c require(balance >= value) and balance <= totalSupply\\r\\n            totalSupply      = totalSupply - shares;\\r\\n        }\\r\\n\\r\\n        pot.exit(shares);\\r\\n        DUSDJoin.exit(receiver, assets);\\r\\n\\r\\n        emit Transfer(owner, address(0), shares);\\r\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\r\\n    }\\r\\n\\r\\n    // --- ERC-4626 ---\\r\\n    function asset() external view returns (address) {\\r\\n        return address(DUSD);\\r\\n    }\\r\\n    function totalAssets() external view returns (uint256) {\\r\\n        return convertToAssets(totalSupply);\\r\\n    }\\r\\n    function convertToShares(uint256 assets) public view returns (uint256) {\\r\\n        uint256 rho = pot.rho();\\r\\n        uint256 chi = (block.timestamp > rho) ? _rpow(pot.dsr(), block.timestamp - rho) * pot.chi() / RAY : pot.chi();\\r\\n        return assets * RAY / chi;\\r\\n    }\\r\\n    function convertToAssets(uint256 shares) public view returns (uint256) {\\r\\n        uint256 rho = pot.rho();\\r\\n        uint256 chi = (block.timestamp > rho) ? _rpow(pot.dsr(), block.timestamp - rho) * pot.chi() / RAY : pot.chi();\\r\\n        return shares * chi / RAY;\\r\\n    }\\r\\n    function maxDeposit(address) external pure returns (uint256) {\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n    function previewDeposit(uint256 assets) external view returns (uint256) {\\r\\n        return convertToShares(assets);\\r\\n    }\\r\\n    function deposit(uint256 assets, address receiver) public returns (uint256 shares) {\\r\\n        uint256 chi = (block.timestamp > pot.rho()) ? pot.drip() : pot.chi();\\r\\n        shares = assets * RAY / chi;\\r\\n        _mint(assets, shares, receiver);\\r\\n    }\\r\\n    function deposit(uint256 assets, address receiver, uint16 referral) external returns (uint256 shares) {\\r\\n        shares = deposit(assets, receiver);\\r\\n        emit Referral(referral, receiver, assets, shares);\\r\\n    }\\r\\n    function maxMint(address) external pure returns (uint256) {\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n    function previewMint(uint256 shares) external view returns (uint256) {\\r\\n        uint256 rho = pot.rho();\\r\\n        uint256 chi = (block.timestamp > rho) ? _rpow(pot.dsr(), block.timestamp - rho) * pot.chi() / RAY : pot.chi();\\r\\n        return _divup(shares * chi, RAY);\\r\\n    }\\r\\n    function mint(uint256 shares, address receiver) public returns (uint256 assets) {\\r\\n        uint256 chi = (block.timestamp > pot.rho()) ? pot.drip() : pot.chi();\\r\\n        assets = _divup(shares * chi, RAY);\\r\\n        _mint(assets, shares, receiver);\\r\\n    }\\r\\n    function mint(uint256 shares, address receiver, uint16 referral) external returns (uint256 assets) {\\r\\n        assets = mint(shares, receiver);\\r\\n        emit Referral(referral, receiver, assets, shares);\\r\\n    }\\r\\n    function maxWithdraw(address owner) external view returns (uint256) {\\r\\n        return convertToAssets(balanceOf[owner]);\\r\\n    }\\r\\n    function previewWithdraw(uint256 assets) external view returns (uint256) {\\r\\n        uint256 rho = pot.rho();\\r\\n        uint256 chi = (block.timestamp > rho) ? _rpow(pot.dsr(), block.timestamp - rho) * pot.chi() / RAY : pot.chi();\\r\\n        return _divup(assets * RAY, chi);\\r\\n    }\\r\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares) {\\r\\n        uint256 chi = (block.timestamp > pot.rho()) ? pot.drip() : pot.chi();\\r\\n        shares = _divup(assets * RAY, chi);\\r\\n        _burn(assets, shares, receiver, owner);\\r\\n    }\\r\\n    function maxRedeem(address owner) external view returns (uint256) {\\r\\n        return balanceOf[owner];\\r\\n    }\\r\\n    function previewRedeem(uint256 shares) external view returns (uint256) {\\r\\n        return convertToAssets(shares);\\r\\n    }\\r\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets) {\\r\\n        uint256 chi = (block.timestamp > pot.rho()) ? pot.drip() : pot.chi();\\r\\n        assets = shares * chi / RAY;\\r\\n        _burn(assets, shares, receiver, owner);\\r\\n    }\\r\\n\\r\\n    // --- Approve by signature ---\\r\\n    function _isValidSignature(address signer, bytes32 digest, bytes memory signature) internal view returns (bool) {\\r\\n        if (signature.length == 65) {\\r\\n            bytes32 r;\\r\\n            bytes32 s;\\r\\n            uint8 v;\\r\\n            assembly {\\r\\n                r := mload(add(signature, 0x20))\\r\\n                s := mload(add(signature, 0x40))\\r\\n                v := byte(0, mload(add(signature, 0x60)))\\r\\n            }\\r\\n            if (signer == ecrecover(digest, v, r, s)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        (bool success, bytes memory result) = signer.staticcall(\\r\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, digest, signature)\\r\\n        );\\r\\n        return (success &&\\r\\n            result.length == 32 &&\\r\\n            abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\r\\n    }\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, bytes memory signature) public {\\r\\n        require(block.timestamp <= deadline, \\\"SavingsDUSD/permit-expired\\\");\\r\\n        require(owner != address(0), \\\"SavingsDUSD/invalid-owner\\\");\\r\\n\\r\\n        uint256 nonce;\\r\\n        unchecked { nonce = nonces[owner]++; }\\r\\n\\r\\n        bytes32 digest =\\r\\n            keccak256(abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\",\\r\\n                block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid),\\r\\n                keccak256(abi.encode(\\r\\n                    PERMIT_TYPEHASH,\\r\\n                    owner,\\r\\n                    spender,\\r\\n                    value,\\r\\n                    nonce,\\r\\n                    deadline\\r\\n                ))\\r\\n            ));\\r\\n\\r\\n        require(_isValidSignature(owner, digest, signature), \\\"SavingsDUSD/invalid-permit\\\");\\r\\n\\r\\n        allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\r\\n        permit(owner, spender, value, deadline, abi.encodePacked(r, s, v));\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUSD\",\"outputs\":[{\"internalType\":\"contract DUSDLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUSDJoin\",\"outputs\":[{\"internalType\":\"contract DUSDJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dUSDJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pot\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"contract PotLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "sDusd", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}