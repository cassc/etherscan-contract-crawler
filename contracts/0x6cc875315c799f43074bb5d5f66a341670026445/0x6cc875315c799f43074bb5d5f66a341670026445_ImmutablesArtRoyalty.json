{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"ImmutablesArtRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// All Rights Reserved\\r\\n\\r\\n// Contract is not audited.\\r\\n// Use authorized deployments of this contract at your own risk.\\r\\n\\r\\n/*\\r\\n$$$$$$\\\\ $$\\\\      $$\\\\ $$\\\\      $$\\\\ $$\\\\   $$\\\\ $$$$$$$$\\\\  $$$$$$\\\\  $$$$$$$\\\\  $$\\\\       $$$$$$$$\\\\  $$$$$$\\\\       $$$$$$\\\\  $$$$$$$\\\\ $$$$$$$$\\\\\\r\\n\\\\_$$  _|$$$\\\\    $$$ |$$$\\\\    $$$ |$$ |  $$ |\\\\__$$  __|$$  __$$\\\\ $$  __$$\\\\ $$ |      $$  _____|$$  __$$\\\\     $$  __$$\\\\ $$  __$$\\\\\\\\__$$  __|\\r\\n  $$ |  $$$$\\\\  $$$$ |$$$$\\\\  $$$$ |$$ |  $$ |   $$ |   $$ /  $$ |$$ |  $$ |$$ |      $$ |      $$ /  \\\\__|    $$ /  $$ |$$ |  $$ |  $$ |\\r\\n  $$ |  $$\\\\$$\\\\$$ $$ |$$\\\\$$\\\\$$ $$ |$$ |  $$ |   $$ |   $$$$$$$$ |$$$$$$$\\\\ |$$ |      $$$$$\\\\    \\\\$$$$$$\\\\      $$$$$$$$ |$$$$$$$  |  $$ |\\r\\n  $$ |  $$ \\\\$$$  $$ |$$ \\\\$$$  $$ |$$ |  $$ |   $$ |   $$  __$$ |$$  __$$\\\\ $$ |      $$  __|    \\\\____$$\\\\     $$  __$$ |$$  __$$\\u003c   $$ |\\r\\n  $$ |  $$ |\\\\$  /$$ |$$ |\\\\$  /$$ |$$ |  $$ |   $$ |   $$ |  $$ |$$ |  $$ |$$ |      $$ |      $$\\\\   $$ |    $$ |  $$ |$$ |  $$ |  $$ |\\r\\n$$$$$$\\\\ $$ | \\\\_/ $$ |$$ | \\\\_/ $$ |\\\\$$$$$$  |   $$ |   $$ |  $$ |$$$$$$$  |$$$$$$$$\\\\ $$$$$$$$\\\\ \\\\$$$$$$  |$$\\\\ $$ |  $$ |$$ |  $$ |  $$ |\\r\\n\\\\______|\\\\__|     \\\\__|\\\\__|     \\\\__| \\\\______/    \\\\__|   \\\\__|  \\\\__|\\\\_______/ \\\\________|\\\\________| \\\\______/ \\\\__|\\\\__|  \\\\__|\\\\__|  \\\\__|  \\\\__|\\r\\n$$$$$$$\\\\   $$$$$$\\\\ $$\\\\     $$\\\\  $$$$$$\\\\  $$\\\\    $$$$$$$$\\\\ $$\\\\     $$\\\\\\r\\n$$  __$$\\\\ $$  __$$\\\\\\\\$$\\\\   $$  |$$  __$$\\\\ $$ |   \\\\__$$  __|\\\\$$\\\\   $$  |\\r\\n$$ |  $$ |$$ /  $$ |\\\\$$\\\\ $$  / $$ /  $$ |$$ |      $$ |    \\\\$$\\\\ $$  /\\r\\n$$$$$$$  |$$ |  $$ | \\\\$$$$  /  $$$$$$$$ |$$ |      $$ |     \\\\$$$$  /\\r\\n$$  __$$\\u003c $$ |  $$ |  \\\\$$  /   $$  __$$ |$$ |      $$ |      \\\\$$  /\\r\\n$$ |  $$ |$$ |  $$ |   $$ |    $$ |  $$ |$$ |      $$ |       $$ |\\r\\n$$ |  $$ | $$$$$$  |   $$ |    $$ |  $$ |$$$$$$$$\\\\ $$ |       $$ |\\r\\n\\\\__|  \\\\__| \\\\______/    \\\\__|    \\\\__|  \\\\__|\\\\________|\\\\__|       \\\\__|\\r\\n$$\\\\      $$\\\\  $$$$$$\\\\  $$\\\\   $$\\\\  $$$$$$\\\\   $$$$$$\\\\  $$$$$$$$\\\\ $$$$$$$\\\\\\r\\n$$$\\\\    $$$ |$$  __$$\\\\ $$$\\\\  $$ |$$  __$$\\\\ $$  __$$\\\\ $$  _____|$$  __$$\\\\\\r\\n$$$$\\\\  $$$$ |$$ /  $$ |$$$$\\\\ $$ |$$ /  $$ |$$ /  \\\\__|$$ |      $$ |  $$ |\\r\\n$$\\\\$$\\\\$$ $$ |$$$$$$$$ |$$ $$\\\\$$ |$$$$$$$$ |$$ |$$$$\\\\ $$$$$\\\\    $$$$$$$  |\\r\\n$$ \\\\$$$  $$ |$$  __$$ |$$ \\\\$$$$ |$$  __$$ |$$ |\\\\_$$ |$$  __|   $$  __$$\\u003c\\r\\n$$ |\\\\$  /$$ |$$ |  $$ |$$ |\\\\$$$ |$$ |  $$ |$$ |  $$ |$$ |      $$ |  $$ |\\r\\n$$ | \\\\_/ $$ |$$ |  $$ |$$ | \\\\$$ |$$ |  $$ |\\\\$$$$$$  |$$$$$$$$\\\\ $$ |  $$ |\\r\\n\\\\__|     \\\\__|\\\\__|  \\\\__|\\\\__|  \\\\__|\\\\__|  \\\\__| \\\\______/ \\\\________|\\\\__|  \\\\__|\\r\\n*/\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @author Gutenblock.eth\\r\\n * @title ImmutablesArtRoyaltyManager\\r\\n * @dev This contract allows to split Ether royalty payments between the\\r\\n * Immutables.art contract and an Immutables.art project artist.\\r\\n *\\r\\n * `ImmutablesArtRoyaltyManager` follows a _pull payment_ model. This means that payments\\r\\n * are not automatically forwarded to the accounts but kept in this contract,\\r\\n * and the actual transfer is triggered as a separate step by calling the\\r\\n * {release} function.\\r\\n *\\r\\n * The contract is written to serve as an implementation for minimal proxy clones.\\r\\n */\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Initializable.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract ImmutablesArtRoyaltyManager is Context, Initializable, ReentrancyGuard {\\r\\n    using Address for address payable;\\r\\n\\r\\n    /// @dev The address of the ImmutablesArt contract.\\r\\n    address public immutablesArtContract;\\r\\n    /// @dev The projectId of the associated ImmutablesArt project.\\r\\n    uint256 public immutablesArtProjectId;\\r\\n\\r\\n    /// @dev The address of the artist.\\r\\n    address public artist;\\r\\n    /// @dev The address of the additionalPayee set by the artist.\\r\\n    address public additionalPayee;\\r\\n    /// @dev The artist\\u0027s percentage of the total expressed in basis points\\r\\n    ///      (1/10,000ths).  The artist can allot up to all of this to\\r\\n    ///      an additionalPayee.\\r\\n    uint16 public artistPercent;\\r\\n    /// @dev The artist\\u0027s percentage, after additional payee,\\r\\n    ///      of the total expressed as basis points (1/10,000ths).\\r\\n    uint16 public artistPercentMinusAdditionalPayeePercent;\\r\\n    /// @dev The artist\\u0027s additional payee percentae of the total\\r\\n    /// @dev expressed in basis points (1/10,000ths).  Valid from 0 to artistPercent.\\r\\n    uint16 public additionalPayeePercent;\\r\\n\\r\\n    /// EVENTS\\r\\n\\r\\n    event PayeeAdded(address indexed account, uint256 percent);\\r\\n    event PayeeRemoved(address indexed account, uint256 percent);\\r\\n    event PaymentReleased(address indexed to, uint256 amount);\\r\\n    event PaymentReleasedERC20(IERC20 indexed token, address indexed to, uint256 amount);\\r\\n    event PaymentReceived(address indexed from, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Creates an uninitialized instance of `ImmutablesArtRoyaltyManager`.\\r\\n     */\\r\\n    constructor() { }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialized an instance of `ImmutablesArtRoyaltyManager`\\r\\n     */\\r\\n    function initialize(address _immutablesArtContract, uint256 _immutablesArtProjectId,\\r\\n                        address _artist, uint16 _artistPercent,\\r\\n                        address _additionalPayee, uint16 _additionalPayeePercent\\r\\n                        ) public initializer() {\\r\\n        immutablesArtContract = _immutablesArtContract;\\r\\n        immutablesArtProjectId = _immutablesArtProjectId;\\r\\n\\r\\n        artist = _artist;\\r\\n        artistPercent = _artistPercent;\\r\\n        additionalPayee = _additionalPayee;\\r\\n        additionalPayeePercent = _additionalPayeePercent;\\r\\n        artistPercentMinusAdditionalPayeePercent = _artistPercent - _additionalPayeePercent;\\r\\n\\r\\n        emit PayeeAdded(immutablesArtContract, 10000 - artistPercent);\\r\\n        emit PayeeAdded(artist, artistPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeAdded(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\r\\n     * reliable: it\\u0027s possible for a contract to receive Ether without triggering this function. This only affects the\\r\\n     * reliability of the events, and not the actual splitting of Ether.\\r\\n     *\\r\\n     * To learn more about this see the Solidity documentation for\\r\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\r\\n     * functions].\\r\\n     */\\r\\n    receive() external payable virtual {\\r\\n        emit PaymentReceived(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    function artistUpdateAddress(address _newArtistAddress) public {\\r\\n        // only the parent contract and the artist can call this function.\\r\\n        // the parent contract only calls this function at the request of the artist.\\r\\n        require(_msgSender() == immutablesArtContract || _msgSender() == artist, \\\"auth\\\");\\r\\n\\r\\n        // update the artist address\\r\\n        emit PayeeRemoved(artist, artistPercentMinusAdditionalPayeePercent);\\r\\n        artist = _newArtistAddress;\\r\\n        emit PayeeAdded(artist, artistPercentMinusAdditionalPayeePercent);\\r\\n    }\\r\\n\\r\\n    function artistUpdateAdditionalPayeeInfo(address _newAdditionalPayee, uint16 _newPercent) public {\\r\\n        // only the parent contract and the artist can call this function.\\r\\n        // the parent contract only calls this function at the request of the artist.\\r\\n        require(_msgSender() == immutablesArtContract || _msgSender() == artist, \\\"auth\\\");\\r\\n\\r\\n        // the maximum amount the artist can give to an additional payee is\\r\\n        // the current artistPercent plus the current additionalPayeePercent.\\r\\n        require(_newPercent \\u003c= artistPercent, \\\"percent too big\\\");\\r\\n\\r\\n        // Before changing the additional payee information,\\r\\n        // payout ETH to everyone as indicated when prior payments were made.\\r\\n        // since we won\\u0027t know what ERC20 token addresses if any are held,\\r\\n        // by the contract, we cant force payout on additional payee change.\\r\\n        release();\\r\\n\\r\\n        // Change the additional payee and relevant percentages.\\r\\n        emit PayeeRemoved(artist, artistPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeRemoved(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n\\r\\n        additionalPayee = _newAdditionalPayee;\\r\\n        additionalPayeePercent = _newPercent;\\r\\n        artistPercentMinusAdditionalPayeePercent = artistPercent - _newPercent;\\r\\n\\r\\n        emit PayeeAdded(artist, artistPercentMinusAdditionalPayeePercent);\\r\\n        if(additionalPayee != address(0)) {\\r\\n          emit PayeeAdded(additionalPayee, additionalPayeePercent);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers payout of all ETH royalties.\\r\\n     */\\r\\n    function release() public virtual nonReentrant() {\\r\\n        // checks\\r\\n        uint256 _startingBalance = address(this).balance;\\r\\n\\r\\n        // Since this is called when there is a payee change,\\r\\n        // we do not want to use require and cause a revert\\r\\n        // if there is no balance.\\r\\n        if(_startingBalance \\u003e 0) {\\r\\n            // effects\\r\\n            uint256 _artistAmount = _startingBalance * artistPercentMinusAdditionalPayeePercent / 10000;\\r\\n            uint256 _additionalPayeeAmount = _startingBalance * additionalPayeePercent / 10000;\\r\\n            uint256 _contractAmount = _startingBalance - _artistAmount - _additionalPayeeAmount;\\r\\n\\r\\n            // interactions\\r\\n            payable(immutablesArtContract).sendValue(_contractAmount);\\r\\n            emit PaymentReleased(immutablesArtContract, _contractAmount);\\r\\n            if(artist != address(0) \\u0026\\u0026 _artistAmount \\u003e 0) {\\r\\n              payable(artist).sendValue(_artistAmount);\\r\\n              emit PaymentReleased(artist, _artistAmount);\\r\\n            }\\r\\n            if(additionalPayee != address(0) \\u0026\\u0026 _additionalPayeeAmount \\u003e 0) {\\r\\n              payable(additionalPayee).sendValue(_additionalPayeeAmount);\\r\\n              emit PaymentReleased(additionalPayee, _additionalPayeeAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers payout of all ERC20 royalties.\\r\\n     */\\r\\n    function releaseERC20(IERC20 token) public virtual nonReentrant() {\\r\\n        // checks\\r\\n        uint256 _startingBalance = token.balanceOf(address(this));\\r\\n        require(_startingBalance \\u003e 0, \\\"no tokens\\\");\\r\\n\\r\\n        // effects\\r\\n        uint256 _artistAmount = _startingBalance * artistPercentMinusAdditionalPayeePercent / 10000;\\r\\n        uint256 _additionalPayeeAmount = _startingBalance * additionalPayeePercent / 10000;\\r\\n        uint256 _contractAmount = _startingBalance - _artistAmount - _additionalPayeeAmount;\\r\\n\\r\\n        // interactions\\r\\n        SafeERC20.safeTransfer(token, immutablesArtContract, _contractAmount);\\r\\n        emit PaymentReleasedERC20(token, immutablesArtContract, _contractAmount);\\r\\n        if(artist != address(0) \\u0026\\u0026 _artistAmount \\u003e 0) {\\r\\n          SafeERC20.safeTransfer(token, artist, _artistAmount);\\r\\n          emit PaymentReleasedERC20(token, artist, _artistAmount);\\r\\n        }\\r\\n        if(additionalPayee != address(0) \\u0026\\u0026 _additionalPayeeAmount \\u003e 0) {\\r\\n          SafeERC20.safeTransfer(token, additionalPayee, _additionalPayeeAmount);\\r\\n          emit PaymentReleasedERC20(token, additionalPayee, _additionalPayeeAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can\\u0027t have a constructor, it\\u0027s common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"PayeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentReleasedERC20\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"additionalPayee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"additionalPayeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistPercentMinusAdditionalPayeePercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdditionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_newPercent\",\"type\":\"uint16\"}],\"name\":\"artistUpdateAdditionalPayeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newArtistAddress\",\"type\":\"address\"}],\"name\":\"artistUpdateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesArtContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immutablesArtProjectId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_immutablesArtContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_immutablesArtProjectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_artist\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_artistPercent\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_additionalPayee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_additionalPayeePercent\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"releaseERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ImmutablesArtRoyaltyManager", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://96772b62db352165086235cb24be2231481653d0ff6e366d1f6ad784e0c34119"}