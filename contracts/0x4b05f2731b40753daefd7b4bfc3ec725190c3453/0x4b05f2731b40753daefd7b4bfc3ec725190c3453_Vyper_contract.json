{"SourceCode": "# @version 0.2.8\r\n\"\"\"\r\n@title Simple Vesting Escrow\r\n@author Curve Finance, Yearn Finance\r\n@license MIT\r\n@notice Vests ERC20 tokens for a single address\r\n@dev Intended to be deployed many times via `VotingEscrowFactory`\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nevent Fund:\r\n    recipient: indexed(address)\r\n    amount: uint256\r\n\r\nevent Claim:\r\n    recipient: indexed(address)\r\n    claimed: uint256\r\n\r\nevent RugPull:\r\n    recipient: address\r\n    rugged: uint256\r\n\r\nevent CommitOwnership:\r\n    admin: address\r\n\r\nevent ApplyOwnership:\r\n    admin: address\r\n\r\nrecipient: public(address)\r\ntoken: public(ERC20)\r\nstart_time: public(uint256)\r\nend_time: public(uint256)\r\ncliff_length: public(uint256)\r\ntotal_locked: public(uint256)\r\ntotal_claimed: public(uint256)\r\ndisabled_at: public(uint256)\r\n\r\nadmin: public(address)\r\nfuture_admin: public(address)\r\n\r\n@external\r\ndef __init__():\r\n    # ensure that the original contract cannot be initialized\r\n    self.admin = msg.sender\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef initialize(\r\n    admin: address,\r\n    token: address,\r\n    recipient: address,\r\n    amount: uint256,\r\n    start_time: uint256,\r\n    end_time: uint256,\r\n    cliff_length: uint256,\r\n) -> bool:\r\n    \"\"\"\r\n    @notice Initialize the contract.\r\n    @dev This function is seperate from `__init__` because of the factory pattern\r\n         used in `VestingEscrowFactory.deploy_vesting_contract`. It may be called\r\n         once per deployment.\r\n    @param admin Admin address\r\n    @param token Address of the ERC20 token being distributed\r\n    @param recipient Address to vest tokens for\r\n    @param amount Amount of tokens being vested for `recipient`\r\n    @param start_time Epoch time at which token distribution starts\r\n    @param end_time Time until everything should be vested\r\n    @param cliff_length Duration after which the first portion vests\r\n    \"\"\"\r\n    assert self.admin == ZERO_ADDRESS  # dev: can only initialize once\r\n\r\n    self.token = ERC20(token)\r\n    self.admin = admin\r\n    self.start_time = start_time\r\n    self.end_time = end_time\r\n    self.cliff_length = cliff_length\r\n\r\n    assert self.token.transferFrom(msg.sender, self, amount)  # dev: could not fund escrow\r\n\r\n    self.recipient = recipient\r\n    self.disabled_at = end_time  # Set to maximum time\r\n    self.total_locked = amount\r\n    log Fund(recipient, amount)\r\n\r\n    return True\r\n\r\n\r\n@internal\r\n@view\r\ndef _total_vested_at(time: uint256 = block.timestamp) -> uint256:\r\n    start: uint256 = self.start_time\r\n    end: uint256 = self.end_time\r\n    locked: uint256 = self.total_locked\r\n    if time < start + self.cliff_length:\r\n        return 0\r\n    return min(locked * (time - start) / (end - start), locked)\r\n\r\n\r\n@internal\r\n@view\r\ndef _unclaimed(time: uint256 = block.timestamp) -> uint256:\r\n    return self._total_vested_at(time) - self.total_claimed\r\n\r\n\r\n@external\r\n@view\r\ndef unclaimed() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of unclaimed, vested tokens for recipient\r\n    \"\"\"\r\n    # NOTE: if `rug_pull` is activated, limit by the activation timestamp\r\n    return self._unclaimed(min(block.timestamp, self.disabled_at))\r\n\r\n\r\n@internal\r\n@view\r\ndef _locked(time: uint256 = block.timestamp) -> uint256:\r\n    return self.total_locked - self._total_vested_at(time)\r\n\r\n\r\n@external\r\n@view\r\ndef locked() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of locked tokens for recipient\r\n    \"\"\"\r\n    # NOTE: if `rug_pull` is activated, limit by the activation timestamp\r\n    return self._locked(min(block.timestamp, self.disabled_at))\r\n\r\n\r\n@external\r\ndef claim(beneficiary: address = msg.sender, amount: uint256 = MAX_UINT256):\r\n    \"\"\"\r\n    @notice Claim tokens which have vested\r\n    @param beneficiary Address to transfer claimed tokens to\r\n    @param amount Amount of tokens to claim\r\n    \"\"\"\r\n    assert msg.sender == self.recipient  # dev: not recipient\r\n\r\n    claim_period_end: uint256 = min(block.timestamp, self.disabled_at)\r\n    claimable: uint256 = min(self._unclaimed(claim_period_end), amount)\r\n    self.total_claimed += claimable\r\n\r\n    assert self.token.transfer(beneficiary, claimable)\r\n    log Claim(beneficiary, claimable)\r\n\r\n\r\n@external\r\ndef rug_pull():\r\n    \"\"\"\r\n    @notice Disable further flow of tokens and clawback the unvested part to admin\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    # NOTE: Rugging more than once is futile\r\n\r\n    self.disabled_at = block.timestamp\r\n    ruggable: uint256 = self._locked()\r\n\r\n    assert self.token.transfer(self.admin, ruggable)\r\n    log RugPull(self.recipient, ruggable)\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(addr: address):\r\n    \"\"\"\r\n    @notice Transfer ownership of the contract to `addr`\r\n    @param addr Address to have ownership transferred to\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    self.future_admin = addr\r\n    log CommitOwnership(addr)\r\n\r\n\r\n@external\r\ndef apply_transfer_ownership():\r\n    \"\"\"\r\n    @notice Apply pending ownership transfer\r\n    \"\"\"\r\n    assert msg.sender == self.future_admin  # dev: future admin only\r\n    self.admin = msg.sender\r\n    self.future_admin = ZERO_ADDRESS\r\n    log ApplyOwnership(msg.sender)\r\n\r\n\r\n@external\r\ndef renounce_ownership():\r\n    \"\"\"\r\n    @notice Renounce admin control of the escrow\r\n    \"\"\"\r\n    assert msg.sender == self.admin  # dev: admin only\r\n    self.future_admin = ZERO_ADDRESS\r\n    self.admin = ZERO_ADDRESS\r\n    log ApplyOwnership(ZERO_ADDRESS)", "ABI": "[{\"name\":\"Fund\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"amount\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Claim\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"claimed\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RugPull\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"rugged\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"initialize\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"admin\"},{\"type\":\"address\",\"name\":\"token\"},{\"type\":\"address\",\"name\":\"recipient\"},{\"type\":\"uint256\",\"name\":\"amount\"},{\"type\":\"uint256\",\"name\":\"start_time\"},{\"type\":\"uint256\",\"name\":\"end_time\"},{\"type\":\"uint256\",\"name\":\"cliff_length\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":361073},{\"name\":\"unclaimed\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":13279},{\"name\":\"locked\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":13399},{\"name\":\"claim\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"claim\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"beneficiary\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"claim\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"beneficiary\"},{\"type\":\"uint256\",\"name\":\"amount\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"name\":\"rug_pull\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":53841},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"addr\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37808},{\"name\":\"apply_transfer_ownership\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":57736},{\"name\":\"renounce_ownership\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":42768},{\"name\":\"recipient\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1391},{\"name\":\"token\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1421},{\"name\":\"start_time\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"end_time\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1481},{\"name\":\"cliff_length\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"total_locked\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"total_claimed\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1571},{\"name\":\"disabled_at\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1601},{\"name\":\"admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631},{\"name\":\"future_admin\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1661}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.8", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}