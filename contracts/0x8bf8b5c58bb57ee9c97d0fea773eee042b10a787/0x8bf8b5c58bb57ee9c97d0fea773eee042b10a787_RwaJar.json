{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/rwa-toolkit/src/jars/RwaJar.sol\": {\r\n      \"content\": \"// Copyright (C) 2022 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\nimport \\\"dss-interfaces/dss/DaiJoinAbstract.sol\\\";\\nimport \\\"dss-interfaces/dss/DaiAbstract.sol\\\";\\nimport \\\"dss-interfaces/dss/ChainlogAbstract.sol\\\";\\n\\n/**\\n * @author Henrique Barcelos <henrique@clio.finance>\\n * @title RwaJar: Facility to allow stability fee payments into the Surplus Buffer.\\n * @dev Users can either send Dai directly to this conract or approve it to pull Dai from their wallet.\\n */\\ncontract RwaJar {\\n    /// @notice The DaiJoin adapter from MCD.\\n    DaiJoinAbstract public immutable daiJoin;\\n    /// @notice The Dai token.\\n    DaiAbstract public immutable dai;\\n    /// @notice The Chainlog from MCD.\\n    ChainlogAbstract public immutable chainlog;\\n\\n    /**\\n     * @notice Emitted whenever Dai is sent to the `vow`.\\n     * @param usr The origin of the funds.\\n     * @param wad The amount of Dai sent.\\n     */\\n    event Toss(address indexed usr, uint256 wad);\\n\\n    /**\\n     * @dev The Dai address is obtained from the DaiJoin contract.\\n     * @param chainlog_ The chainlog from MCD.\\n     */\\n    constructor(address chainlog_) public {\\n        address daiJoin_ = ChainlogAbstract(chainlog_).getAddress(\\\"MCD_JOIN_DAI\\\");\\n\\n        // DaiJoin and Dai are meant to be immutable, so we can store them.\\n        daiJoin = DaiJoinAbstract(daiJoin_);\\n        dai = DaiAbstract(DaiJoinAbstract(daiJoin_).dai());\\n\\n        // We also store the chainlog to get the Vow address on-demand.\\n        chainlog = ChainlogAbstract(chainlog_);\\n\\n        DaiAbstract(DaiJoinAbstract(daiJoin_).dai()).approve(daiJoin_, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Transfers any outstanding Dai balance in this contract to the `vow`.\\n     * @dev Reverts if there Dai balance of this contract is zero.\\n     * @dev This effectively burns ERC-20 Dai and credits it to the internal Dai balance of the `vow` in the Vat.\\n     */\\n    function void() external {\\n        uint256 balance = dai.balanceOf(address(this));\\n        require(balance > 0, \\\"RwaJar/already-empty\\\");\\n\\n        daiJoin.join(chainlog.getAddress(\\\"MCD_VOW\\\"), balance);\\n\\n        emit Toss(address(this), balance);\\n    }\\n\\n    /**\\n     * @notice Pulls `wad` amount of Dai from the sender's wallet into the `vow`.\\n     * @dev Requires `msg.sender` to have previously `approve`d this contract to spend at least `wad` Dai.\\n     * @dev This effectively burns ERC-20 Dai and credits it to the internal Dai balance of the `vow` in the Vat.\\n     * @param wad The amount of Dai.\\n     */\\n    function toss(uint256 wad) external {\\n        dai.transferFrom(msg.sender, address(this), wad);\\n        daiJoin.join(chainlog.getAddress(\\\"MCD_VOW\\\"), wad);\\n\\n        emit Toss(msg.sender, wad);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.12;\\n\\n// https://github.com/makerdao/dss/blob/master/src/join.sol\\ninterface DaiJoinAbstract {\\n    function wards(address) external view returns (uint256);\\n    function rely(address usr) external;\\n    function deny(address usr) external;\\n    function vat() external view returns (address);\\n    function dai() external view returns (address);\\n    function live() external view returns (uint256);\\n    function cage() external;\\n    function join(address, uint256) external;\\n    function exit(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"lib/dss-interfaces/src/dss/DaiAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.12;\\n\\n// https://github.com/makerdao/dss/blob/master/src/dai.sol\\ninterface DaiAbstract {\\n    function wards(address) external view returns (uint256);\\n    function rely(address) external;\\n    function deny(address) external;\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function version() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n    function allowance(address, address) external view returns (uint256);\\n    function nonces(address) external view returns (uint256);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function mint(address, uint256) external;\\n    function burn(address, uint256) external;\\n    function approve(address, uint256) external returns (bool);\\n    function push(address, uint256) external;\\n    function pull(address, uint256) external;\\n    function move(address, address, uint256) external;\\n    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\\n}\\n\"\r\n    },\r\n    \"lib/dss-interfaces/src/dss/ChainlogAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.12;\\n\\n// https://github.com/makerdao/dss-chain-log\\ninterface ChainlogAbstract {\\n    function wards(address) external view returns (uint256);\\n    function rely(address) external;\\n    function deny(address) external;\\n    function keys() external view returns (bytes32[] memory);\\n    function version() external view returns (string memory);\\n    function ipfs() external view returns (string memory);\\n    function setVersion(string calldata) external;\\n    function setSha256sum(string calldata) external;\\n    function setIPFS(string calldata) external;\\n    function setAddress(bytes32,address) external;\\n    function removeAddress(bytes32) external;\\n    function count() external view returns (uint256);\\n    function get(uint256) external view returns (bytes32,address);\\n    function list() external view returns (bytes32[] memory);\\n    function getAddress(bytes32) external view returns (address);\\n}\\n\\n// Helper function for returning address or abstract of Chainlog\\n//  Valid on Mainnet, Kovan, Rinkeby, Ropsten, and Goerli\\ncontract ChainlogHelper {\\n    address          public constant ADDRESS  = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\\n    ChainlogAbstract public constant ABSTRACT = ChainlogAbstract(ADDRESS);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"clipper-mom/=lib/dss-exec-lib/lib/clipper-mom/src/\",\r\n      \"ds-auth/=lib/ds-token/lib/ds-auth/src/\",\r\n      \"ds-math/=lib/ds-math/src/\",\r\n      \"ds-note/=lib/ds-value/lib/ds-thing/lib/ds-note/src/\",\r\n      \"ds-pause/=lib/dss-gem-joins/lib/dss-deploy/lib/ds-pause/src/\",\r\n      \"ds-proxy/=lib/dss-exec-lib/lib/ds-proxy/src/\",\r\n      \"ds-stop/=lib/dss-exec-lib/lib/osm-mom/lib/osm/lib/ds-stop/src/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"ds-thing/=lib/ds-value/lib/ds-thing/src/\",\r\n      \"ds-token/=lib/ds-token/src/\",\r\n      \"ds-value/=lib/ds-value/src/\",\r\n      \"dss-auto-line/=lib/dss-exec-lib/lib/dss-auto-line/src/\",\r\n      \"dss-chain-log/=lib/rwa-toolkit/lib/dss-chain-log/src/\",\r\n      \"dss-deploy/=lib/dss-gem-joins/lib/dss-deploy/src/\",\r\n      \"dss-direct-deposit/=lib/dss-exec-lib/lib/dss-direct-deposit/src/\",\r\n      \"dss-exec-lib/=lib/dss-exec-lib/src/\",\r\n      \"dss-gem-joins/=lib/dss-gem-joins/src/\",\r\n      \"dss-interfaces/=lib/dss-interfaces/src/\",\r\n      \"dss-lerp/=lib/dss-exec-lib/lib/dss-lerp/src/\",\r\n      \"dss-psm/=lib/rwa-toolkit/lib/dss-psm/src/\",\r\n      \"dss/=lib/dss/src/\",\r\n      \"esm/=lib/dss-gem-joins/lib/dss-deploy/lib/esm/src/\",\r\n      \"flipper-mom/=lib/dss-exec-lib/lib/flipper-mom/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"forward-proxy/=lib/forward-proxy/src/\",\r\n      \"ilk-registry/=lib/rwa-toolkit/lib/ilk-registry/src/\",\r\n      \"median/=lib/dss-exec-lib/lib/median/src/\",\r\n      \"mkr-authority/=lib/dss-exec-lib/lib/mkr-authority/src/\",\r\n      \"osm-mom/=lib/dss-exec-lib/lib/osm-mom/src/\",\r\n      \"osm/=lib/dss-exec-lib/lib/osm-mom/lib/osm/src/\",\r\n      \"rwa-toolkit/=lib/rwa-toolkit/src/\",\r\n      \"univ2-lp-oracle/=lib/dss-exec-lib/lib/univ2-lp-oracle/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainlog_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Toss\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainlog\",\"outputs\":[{\"internalType\":\"contract ChainlogAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract DaiAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"toss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"void\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RwaJar", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000da0ab1e0017debcd72be8599041a2aa3ba7e740f", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}