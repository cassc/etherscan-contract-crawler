{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      uint256 c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint256 c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract BETR_TOKEN {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Better Betting\";\r\n    string public symbol = \"BETR\";\r\n    uint256 public constant decimals = 18;\r\n\r\n    uint256 public hardCap = 650000000 * (10 ** decimals);\r\n    uint256 public totalSupply;\r\n\r\n    address public escrow; // reference to escrow contract for transaction and authorization\r\n    address public owner; // reference to the contract creator\r\n    address public tgeIssuer = 0xba81ACCC7074B5D9ABDAa25c30DbaD96BF44D660;\r\n\r\n    bool public tgeActive;\r\n    uint256 public tgeDuration = 30 days;\r\n    uint256 public tgeStartTime;\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed; // third party authorisations for token transfering\r\n    mapping (address => bool) public escrowAllowed; // per address switch authorizing the escrow to escrow user tokens\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function BETR_TOKEN() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyTgeIssuer {\r\n        require(msg.sender == tgeIssuer);\r\n        _;\r\n    }\r\n\r\n    modifier onlyEscrow {\r\n        require(msg.sender == escrow);\r\n        _;\r\n    }\r\n\r\n    modifier tgeRunning {\r\n        require(tgeActive && block.timestamp < tgeStartTime + tgeDuration);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(\r\n            _to != address(0) &&\r\n            balances[msg.sender] >= _value &&\r\n            balances[_to] + _value > balances[_to]\r\n        );\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require (\r\n          _from != address(0) &&\r\n          _to != address(0) &&\r\n          balances[_from] >= _value &&\r\n          allowed[_from][msg.sender] >= _value &&\r\n          balances[_to] + _value > balances[_to]\r\n        );\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != address(0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowEscrow(bool _choice) external returns(bool) {\r\n      escrowAllowed[msg.sender] = _choice;\r\n      return true;\r\n    }\r\n\r\n    function escrowFrom(address _from, uint256 _value) external onlyEscrow returns(bool) {\r\n      require (\r\n        _from != address(0) &&\r\n        balances[_from] >= _value &&\r\n        escrowAllowed[_from] &&\r\n        _value > 0\r\n      );\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[escrow] = balances[escrow].add(_value);\r\n      Transfer(_from, escrow, _value);\r\n      return true;\r\n    }\r\n\r\n    function escrowReturn(address _to, uint256 _value, uint256 _fee) external onlyEscrow returns(bool) {\r\n        require(\r\n            _to != address(0) &&\r\n            _value > 0\r\n        );\r\n        if(_fee > 0) {\r\n            require(_fee < totalSupply && _fee < balances[escrow]);\r\n            totalSupply = totalSupply.sub(_fee);\r\n            balances[escrow] = balances[escrow].sub(_fee);\r\n        }\r\n        require(transfer(_to, _value));\r\n        return true;\r\n    }\r\n\r\n    function mint(address _user, uint256 _tokensAmount) public onlyTgeIssuer tgeRunning returns(bool) {\r\n        uint256 newSupply = totalSupply.add(_tokensAmount);\r\n        require(\r\n            _user != address(0) &&\r\n            _tokensAmount > 0 &&\r\n             newSupply < hardCap\r\n        );\r\n        balances[_user] = balances[_user].add(_tokensAmount);\r\n        totalSupply = newSupply;\r\n        Transfer(0x0, _user, _tokensAmount);\r\n        return true;\r\n    }\r\n\r\n    function reserveTokensGroup(address[] _users, uint256[] _tokensAmounts) external onlyOwner {\r\n        require(_users.length == _tokensAmounts.length);\r\n        uint256 newSupply;\r\n        for(uint8 i = 0; i < _users.length; i++){\r\n            newSupply = totalSupply.add(_tokensAmounts[i].mul(10 ** decimals));\r\n            require(\r\n                _users[i] != address(0) &&\r\n                _tokensAmounts[i] > 0 &&\r\n                newSupply < hardCap\r\n            );\r\n            balances[_users[i]] = balances[_users[i]].add(_tokensAmounts[i].mul(10 ** decimals));\r\n            totalSupply = newSupply;\r\n            Transfer(0x0, _users[i], _tokensAmounts[i]);\r\n        }\r\n    }\r\n\r\n    function reserveTokens(address _user, uint256 _tokensAmount) external onlyOwner {\r\n        uint256 newSupply = totalSupply.add(_tokensAmount.mul(10 ** decimals));\r\n        require(\r\n            _user != address(0) &&\r\n            _tokensAmount > 0 &&\r\n            newSupply < hardCap\r\n        );\r\n        balances[_user] = balances[_user].add(_tokensAmount.mul(10 ** decimals));\r\n        totalSupply = newSupply;\r\n        Transfer(0x0, _user, _tokensAmount);\r\n    }\r\n\r\n    function startTge() external onlyOwner {\r\n        tgeActive = true;\r\n        if(tgeStartTime == 0) tgeStartTime = block.timestamp;\r\n    }\r\n\r\n    function stopTge(bool _restart) external onlyOwner {\r\n      tgeActive = false;\r\n      if(_restart) tgeStartTime = 0;\r\n    }\r\n\r\n    function extendTge(uint256 _time) external onlyOwner {\r\n      tgeDuration = tgeDuration.add(_time);\r\n    }\r\n\r\n    function setEscrow(address _escrow) external onlyOwner {\r\n        escrow = _escrow;\r\n    }\r\n\r\n    function setTgeIssuer(address _tgeIssuer) external onlyOwner {\r\n        tgeIssuer = _tgeIssuer;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"escrowAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"escrowReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_restart\",\"type\":\"bool\"}],\"name\":\"stopTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tgeIssuer\",\"type\":\"address\"}],\"name\":\"setTgeIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"},{\"name\":\"_tokensAmounts\",\"type\":\"uint256[]\"}],\"name\":\"reserveTokensGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"bool\"}],\"name\":\"allowEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"setEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"escrowFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgeStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "BETR_TOKEN", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://60b9ba1c386817178a2d02d8abd9eb52d5ade2ceb2046fc65b9e5aaca805c8b6"}