{"SourceCode": "pragma solidity ^0.8.19;\r\n\r\ninterface IRateProvider {\r\n    function getRate() external view returns (uint256);\r\n}\r\n\r\ninterface IPot {\r\n    function chi() external view returns (uint256);\r\n    function rho() external view returns (uint256);\r\n    function dsr() external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Chai Rate Provider\r\n * @notice Returns the value of CHAI in terms of DAI\r\n */\r\ncontract ChaiRateProvider is IRateProvider {\r\n    IPot public constant pot = IPot(0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7);\r\n\r\n    /**\r\n     * @return the value of wstETH in terms of stETH\r\n     */\r\n    function getRate() external view override returns (uint256) {\r\n        uint chi = (block.timestamp > pot.rho()) ? _dripPreview() : pot.chi();\r\n        return rdiv(1e18, chi);\r\n    }\r\n\r\n    function _dripPreview() internal view returns (uint256) {\r\n        return rmul(rpow(pot.dsr(), block.timestamp - pot.rho(), ONE), pot.chi());\r\n    }\r\n\r\n\r\n    // --- Math ---\r\n    uint256 constant ONE = 10 ** 27;\r\n    function rpow(uint x, uint n, uint base) internal pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = mul(x, y) / ONE;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        // always rounds down\r\n        z = mul(x, ONE) / y;\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"contract IPot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChaiRateProvider", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ffff1e4ea226f18a530c48b0cea0a1818c5d0b624e1d4273cd1ed96353b187dd"}