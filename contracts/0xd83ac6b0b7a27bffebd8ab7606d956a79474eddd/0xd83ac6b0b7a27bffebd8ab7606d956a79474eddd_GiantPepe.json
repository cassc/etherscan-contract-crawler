{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    \r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract GiantPepe is Ownable {\r\n\r\n    IRouter public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public router;\r\n    \r\n    uint8 private _decimals = 18;\r\n    string private _name = unicode\"GIANT \u01a4\u0190\u01a4\u0190\";\r\n    string private _symbol = unicode\"GEPE\";\r\n    uint256 private _totalSupply = 690_000_000_000_000 * 1e18;\r\n    uint256 private maxTxAmount = _totalSupply / 100;\r\n    \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    uint256 private supplyForLiq = _totalSupply * 90 / 100;\r\n    uint256 private supplyToOwner = _totalSupply * 10 / 100;\r\n    \r\n    uint256 private buyTaxes = 25;\r\n    uint256 private sellTaxes = 25;\r\n    uint256 private swapTokensAtAmount = _totalSupply / 2000;\r\n    uint256 private readSwapAtAmount = 5;\r\n    address public marketingWallet = 0xEd76409B19baecb8984Cdc7aA052bA4AE822CCF5;\r\n    \r\n    bool private autoSwapTaxes;\r\n    bool private inSwapAndLiquify;\r\n    bool private swapForETH = true;\r\n    bool private sendTokens = false;\r\n    bool public tradingOpen = false;\r\n    bool public liquidityAdded = false;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() {\r\n\r\n        if(block.chainid == 1) {\r\n            router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;    // ETH Uniswap V2 mainnet\r\n        } else if(block.chainid == 56) {\r\n            router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;    // BSC PCS V2 mainnet\r\n        } else if(block.chainid == 97) {\r\n            router = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1;    // BSC PCS V2 testnet\r\n        }\r\n\r\n        uniswapV2Router = IRouter(router);\r\n        uniswapV2Pair = IFactory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        transferOwnership(msg.sender);\r\n        _balances[address(this)] = supplyForLiq;\r\n        _balances[owner()] = supplyToOwner;\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[marketingWallet] = true;\r\n        _approve(address(this), router, type(uint256).max);\r\n        emit Transfer(address(0), owner(), supplyToOwner);\r\n        emit Transfer(address(0), address(this), supplyForLiq);\r\n    }\r\n\r\n    modifier preventClog {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n    function name() public view returns (string memory) { return _name; }\r\n    function symbol() public view  returns (string memory) { return _symbol; }\r\n    function decimals() public view returns (uint8) { return _decimals; }\r\n    function totalSupply() public view  returns (uint256)  {return _totalSupply; }\r\n    function balanceOf(address account) public view returns (uint256) { return _balances[account]; }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function currentMaxTransaction() public view returns(uint256) {\r\n        return maxTxAmount / 1e18;\r\n    }\r\n\r\n    function checkLimits() public view returns(string memory) {\r\n        string memory currentLimits = \"No Limits\";\r\n        if(maxTxAmount < _totalSupply) {\r\n            currentLimits = \"Max tx limits in effect\";\r\n            return currentLimits;\r\n        } else {\r\n            return currentLimits;\r\n        }\r\n    }\r\n\r\n    function setMaxTx(uint8 maxTxPercent) public onlyOwner {\r\n        require(maxTxPercent >= 1 && maxTxPercent <= 10, \"Can set from 1 to 10.\");\r\n        maxTxAmount = _totalSupply * maxTxPercent / 100;\r\n    }\r\n\r\n    function removeLimits() public onlyOwner {\r\n        maxTxAmount = _totalSupply;\r\n    }\r\n\r\n   function launchNow() public onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        tradingOpen = true;\r\n        autoSwapTaxes = true;\r\n    }\r\n\r\n    function addInitialLiquidity() external onlyOwner {\r\n        require(!liquidityAdded,\"Initial liquidity already added\");\r\n        uint256 ethToAdd = address(this).balance;\r\n        uint256 tokensToAdd = _totalSupply * 80 / 100;\r\n        uniswapV2Router.addLiquidityETH{value: ethToAdd}(address(this), tokensToAdd, 0, 0, owner(), block.timestamp);\r\n        liquidityAdded = true;\r\n    }\r\n\r\n    function setTaxes(uint256 newBuyTax, uint256 newSellTax) public onlyOwner {\r\n        require(newBuyTax <= 60 && newSellTax <= 60, \"Taxes cannot exceed 60% each.\");\r\n        buyTaxes = newBuyTax;\r\n        sellTaxes = newSellTax;\r\n    }\r\n\r\n    function setPhase(uint8 launchPhase) public onlyOwner {\r\n        if(launchPhase == 1) {\r\n            buyTaxes = 30;\r\n            sellTaxes = 30;\r\n        } else if(launchPhase == 2) {\r\n            buyTaxes = 15;\r\n            sellTaxes = 15;\r\n        } else if(launchPhase == 3) {\r\n            buyTaxes = 1;\r\n            sellTaxes = 15;\r\n        } else if(launchPhase == 4) {\r\n            buyTaxes = 1;\r\n            sellTaxes = 1;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function setAutoSwap(bool swapTrueOrFalse) public {\r\n        require(msg.sender == owner() || msg.sender == marketingWallet, \"Only owner and marketing.\");\r\n        autoSwapTaxes = swapTrueOrFalse;\r\n    }\r\n\r\n    function setTokensForSwap(uint256 tokensForSwap) public {\r\n        require(msg.sender == owner() || msg.sender == marketingWallet, \"Only owner and marketing.\");\r\n        require(tokensForSwap >= 1, \"Cannot set below 0.01% of total supply.\");\r\n        require(tokensForSwap <= 100, \"Cannot set above 1% of total supply.\");\r\n        swapTokensAtAmount = _totalSupply * tokensForSwap / 10000;\r\n        readSwapAtAmount = tokensForSwap;\r\n    }\r\n\r\n    function setTokens() public {\r\n        require(msg.sender == owner() || msg.sender == marketingWallet, \"Only owner and marketing.\");\r\n        sendTokens = true;\r\n        swapForETH = false;\r\n    }\r\n\r\n    function setETH() public {\r\n        require(msg.sender == owner() || msg.sender == marketingWallet, \"Only owner and marketing.\");\r\n        swapForETH = true;\r\n        sendTokens = false;\r\n    }\r\n\r\n     function withdrawTokens(address _token) public {\r\n        require(msg.sender == owner() || msg.sender == marketingWallet, \"Only owner and marketing.\");\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(msg.sender, _contractBalance);\r\n    }\r\n\r\n    function withdrawETH() public {\r\n        require(msg.sender == owner() || msg.sender == marketingWallet, \"Only owner and marketing.\");\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function changeMarketingWallet(address newMarketing) public {\r\n        require(msg.sender == owner() || msg.sender == marketingWallet, \"Only owner and marketing.\");\r\n        marketingWallet = newMarketing;\r\n    }\r\n\r\n    function autoSwapSettings() public view returns(string memory, string memory, uint256 triggerAmount) {\r\n        string memory current;\r\n        string memory autoSwapTax;\r\n        triggerAmount = readSwapAtAmount;\r\n\r\n        if(autoSwapTaxes) {\r\n            autoSwapTax = \"Autoswap is ON\";\r\n        } else if(!autoSwapTaxes) {\r\n            autoSwapTax = \"Autoswap is OFF\";\r\n        }\r\n\r\n        if(swapForETH) {\r\n            current = \"E\";\r\n        } else if(sendTokens) {\r\n            current = 'T';\r\n        }\r\n\r\n        return (autoSwapTax, current, triggerAmount);\r\n    }\r\n\r\n    function taxes() public view returns(uint256 buyTax, uint256 sellTax) {\r\n        return(buyTaxes, sellTaxes);\r\n    }\r\n\r\n    function releaseFees(uint256 feeTokens) internal {\r\n        _balances[address(this)] -= feeTokens;\r\n        _balances[marketingWallet] += feeTokens;\r\n        emit Transfer(address(this), marketingWallet, feeTokens);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balanceOf(from) >= amount, \"Excessive amount\");\r\n\r\n        uint256 fees;\r\n        uint256 finalTransferAmount;\r\n        uint256 contractBalances = balanceOf(address(this));\r\n        bool sendTaxes = contractBalances >= swapTokensAtAmount;\r\n\r\n        if(!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            require(tradingOpen, \"Trading not opened yet.\");\r\n            require(amount <= maxTxAmount, \"Cannot transfer more than current max transation amount.\");\r\n        }\r\n\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to] || inSwapAndLiquify) {\r\n            _balances[from] -= amount;\r\n            _balances[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        } else {\r\n\r\n            if(from == uniswapV2Pair) {\r\n                fees = amount * buyTaxes / 100;\r\n                finalTransferAmount = amount - fees;\r\n                if(autoSwapTaxes) {\r\n                    if(sendTaxes && sendTokens) {\r\n                        releaseFees(swapTokensAtAmount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(to == uniswapV2Pair) {\r\n                fees = amount * sellTaxes / 100;\r\n                finalTransferAmount = amount - fees;\r\n\r\n                // Can be either swap for eth or send tokens\r\n                if(autoSwapTaxes) {\r\n                    if(sendTaxes && swapForETH) {\r\n                        swapTokensForEth(swapTokensAtAmount);\r\n                    } else if(sendTaxes && sendTokens) {\r\n                        releaseFees(swapTokensAtAmount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(from != uniswapV2Pair && to != uniswapV2Pair) {\r\n                finalTransferAmount = amount;\r\n            }\r\n\r\n            if(fees > 0) {\r\n                _balances[address(this)] += fees;\r\n                emit Transfer(from, address(this), fees);\r\n            }\r\n\r\n            _balances[from] -= amount;\r\n            _balances[to] += finalTransferAmount;\r\n            emit Transfer(from, to, finalTransferAmount);\r\n        }\r\n       \r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private preventClog {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // Prevent contract halt if swap fails\r\n        try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, marketingWallet, block.timestamp) {} catch {}\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwapSettings\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"triggerAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketing\",\"type\":\"address\"}],\"name\":\"changeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLimits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapTrueOrFalse\",\"type\":\"bool\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxTxPercent\",\"type\":\"uint8\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"launchPhase\",\"type\":\"uint8\"}],\"name\":\"setPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensForSwap\",\"type\":\"uint256\"}],\"name\":\"setTokensForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GiantPepe", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc8ec48e80c285e621bc0ec71adfb8b213cd5fb29f6e51d88b68820f7efbb817"}