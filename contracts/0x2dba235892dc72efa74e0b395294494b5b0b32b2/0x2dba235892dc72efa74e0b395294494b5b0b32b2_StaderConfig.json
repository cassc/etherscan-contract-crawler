{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StaderConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport './library/UtilLib.sol';\\n\\nimport './interfaces/IStaderConfig.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\ncontract StaderConfig is IStaderConfig, AccessControlUpgradeable {\\n    // staked ETH per node on beacon chain i.e. 32 ETH\\n    bytes32 public constant ETH_PER_NODE = keccak256('ETH_PER_NODE');\\n    //amount of ETH for pre-deposit on beacon chain i.e 1 ETH\\n    bytes32 public constant PRE_DEPOSIT_SIZE = keccak256('PRE_DEPOSIT_SIZE');\\n    //amount of ETH for full deposit on beacon chain i.e 31 ETH\\n    bytes32 public constant FULL_DEPOSIT_SIZE = keccak256('FULL_DEPOSIT_SIZE');\\n    // ETH to WEI ratio i.e 1e18\\n    bytes32 public constant DECIMALS = keccak256('DECIMALS');\\n    //Total fee bips\\n    bytes32 public constant TOTAL_FEE = keccak256('TOTAL_FEE');\\n    //maximum length of operator name string\\n    bytes32 public constant OPERATOR_MAX_NAME_LENGTH = keccak256('OPERATOR_MAX_NAME_LENGTH');\\n\\n    bytes32 public constant SOCIALIZING_POOL_CYCLE_DURATION = keccak256('SOCIALIZING_POOL_CYCLE_DURATION');\\n    bytes32 public constant SOCIALIZING_POOL_OPT_IN_COOLING_PERIOD =\\n        keccak256('SOCIALIZING_POOL_OPT_IN_COOLING_PERIOD');\\n    bytes32 public constant REWARD_THRESHOLD = keccak256('REWARD_THRESHOLD');\\n    bytes32 public constant MIN_DEPOSIT_AMOUNT = keccak256('MIN_DEPOSIT_AMOUNT');\\n    bytes32 public constant MAX_DEPOSIT_AMOUNT = keccak256('MAX_DEPOSIT_AMOUNT');\\n    bytes32 public constant MIN_WITHDRAW_AMOUNT = keccak256('MIN_WITHDRAW_AMOUNT');\\n    bytes32 public constant MAX_WITHDRAW_AMOUNT = keccak256('MAX_WITHDRAW_AMOUNT');\\n    //minimum delay between user requesting withdraw and request finalization\\n    bytes32 public constant MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST =\\n        keccak256('MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST');\\n    bytes32 public constant WITHDRAWN_KEYS_BATCH_SIZE = keccak256('WITHDRAWN_KEYS_BATCH_SIZE');\\n\\n    bytes32 public constant ADMIN = keccak256('ADMIN');\\n    bytes32 public constant STADER_TREASURY = keccak256('STADER_TREASURY');\\n\\n    bytes32 public constant override POOL_UTILS = keccak256('POOL_UTILS');\\n    bytes32 public constant override POOL_SELECTOR = keccak256('POOL_SELECTOR');\\n    bytes32 public constant override SD_COLLATERAL = keccak256('SD_COLLATERAL');\\n    bytes32 public constant override OPERATOR_REWARD_COLLECTOR = keccak256('OPERATOR_REWARD_COLLECTOR');\\n    bytes32 public constant override VAULT_FACTORY = keccak256('VAULT_FACTORY');\\n    bytes32 public constant override STADER_ORACLE = keccak256('STADER_ORACLE');\\n    bytes32 public constant override AUCTION_CONTRACT = keccak256('AuctionContract');\\n    bytes32 public constant override PENALTY_CONTRACT = keccak256('PENALTY_CONTRACT');\\n    bytes32 public constant override PERMISSIONED_POOL = keccak256('PERMISSIONED_POOL');\\n    bytes32 public constant override STAKE_POOL_MANAGER = keccak256('STAKE_POOL_MANAGER');\\n    bytes32 public constant override ETH_DEPOSIT_CONTRACT = keccak256('ETH_DEPOSIT_CONTRACT');\\n    bytes32 public constant override PERMISSIONLESS_POOL = keccak256('PERMISSIONLESS_POOL');\\n    bytes32 public constant override USER_WITHDRAW_MANAGER = keccak256('USER_WITHDRAW_MANAGER');\\n    bytes32 public constant override STADER_INSURANCE_FUND = keccak256('STADER_INSURANCE_FUND');\\n    bytes32 public constant override PERMISSIONED_NODE_REGISTRY = keccak256('PERMISSIONED_NODE_REGISTRY');\\n    bytes32 public constant override PERMISSIONLESS_NODE_REGISTRY = keccak256('PERMISSIONLESS_NODE_REGISTRY');\\n    bytes32 public constant override PERMISSIONED_SOCIALIZING_POOL = keccak256('PERMISSIONED_SOCIALIZING_POOL');\\n    bytes32 public constant override PERMISSIONLESS_SOCIALIZING_POOL = keccak256('PERMISSIONLESS_SOCIALIZING_POOL');\\n    bytes32 public constant override NODE_EL_REWARD_VAULT_IMPLEMENTATION =\\n        keccak256('NODE_EL_REWARD_VAULT_IMPLEMENTATION');\\n    bytes32 public constant override VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION =\\n        keccak256('VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION');\\n\\n    //POR Feed Proxy\\n    bytes32 public constant override ETH_BALANCE_POR_FEED = keccak256('ETH_BALANCE_POR_FEED');\\n    bytes32 public constant override ETHX_SUPPLY_POR_FEED = keccak256('ETHX_SUPPLY_POR_FEED');\\n\\n    //Roles\\n    bytes32 public constant override MANAGER = keccak256('MANAGER');\\n    bytes32 public constant override OPERATOR = keccak256('OPERATOR');\\n\\n    bytes32 public constant SD = keccak256('SD');\\n    bytes32 public constant ETHx = keccak256('ETHx');\\n\\n    mapping(bytes32 => uint256) private constantsMap;\\n    mapping(bytes32 => uint256) private variablesMap;\\n    mapping(bytes32 => address) private accountsMap;\\n    mapping(bytes32 => address) private contractsMap;\\n    mapping(bytes32 => address) private tokensMap;\\n\\n    bytes32 public constant override SD_UTILITY_POOL = keccak256('SD_UTILITY_POOL');\\n    bytes32 public constant override SD_INCENTIVE_CONTROLLER = keccak256('SD_INCENTIVE_CONTROLLER');\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _admin, address _ethDepositContract) external initializer {\\n        UtilLib.checkNonZeroAddress(_admin);\\n        UtilLib.checkNonZeroAddress(_ethDepositContract);\\n        __AccessControl_init();\\n        setConstant(ETH_PER_NODE, 32 ether);\\n        setConstant(PRE_DEPOSIT_SIZE, 1 ether);\\n        setConstant(FULL_DEPOSIT_SIZE, 31 ether);\\n        setConstant(TOTAL_FEE, 10000);\\n        setConstant(DECIMALS, 1e18);\\n        setConstant(OPERATOR_MAX_NAME_LENGTH, 255);\\n        setVariable(MIN_DEPOSIT_AMOUNT, 1e14);\\n        setVariable(MAX_DEPOSIT_AMOUNT, 10000 ether);\\n        setVariable(MIN_WITHDRAW_AMOUNT, 1e14);\\n        setVariable(MAX_WITHDRAW_AMOUNT, 10000 ether);\\n        setVariable(WITHDRAWN_KEYS_BATCH_SIZE, 50);\\n        setVariable(MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST, 600);\\n        setContract(ETH_DEPOSIT_CONTRACT, _ethDepositContract);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n    }\\n\\n    //Variables Setters\\n\\n    function updateSocializingPoolCycleDuration(uint256 _socializingPoolCycleDuration) external onlyRole(MANAGER) {\\n        setVariable(SOCIALIZING_POOL_CYCLE_DURATION, _socializingPoolCycleDuration);\\n    }\\n\\n    function updateSocializingPoolOptInCoolingPeriod(uint256 _SocializePoolOptInCoolingPeriod)\\n        external\\n        onlyRole(MANAGER)\\n    {\\n        setVariable(SOCIALIZING_POOL_OPT_IN_COOLING_PERIOD, _SocializePoolOptInCoolingPeriod);\\n    }\\n\\n    function updateRewardsThreshold(uint256 _rewardsThreshold) external onlyRole(MANAGER) {\\n        setVariable(REWARD_THRESHOLD, _rewardsThreshold);\\n    }\\n\\n    /**\\n     * @dev update the minimum deposit amount\\n     * @param _minDepositAmount minimum deposit amount\\n     */\\n    function updateMinDepositAmount(uint256 _minDepositAmount) external onlyRole(MANAGER) {\\n        setVariable(MIN_DEPOSIT_AMOUNT, _minDepositAmount);\\n        verifyDepositAndWithdrawLimits();\\n    }\\n\\n    /**\\n     * @dev update the maximum deposit amount\\n     * @param _maxDepositAmount maximum deposit amount\\n     */\\n    function updateMaxDepositAmount(uint256 _maxDepositAmount) external onlyRole(MANAGER) {\\n        setVariable(MAX_DEPOSIT_AMOUNT, _maxDepositAmount);\\n        verifyDepositAndWithdrawLimits();\\n    }\\n\\n    /**\\n     * @dev update the minimum withdraw amount\\n     * @param _minWithdrawAmount minimum withdraw amount\\n     */\\n    function updateMinWithdrawAmount(uint256 _minWithdrawAmount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setVariable(MIN_WITHDRAW_AMOUNT, _minWithdrawAmount);\\n        verifyDepositAndWithdrawLimits();\\n    }\\n\\n    /**\\n     * @dev update the maximum withdraw amount\\n     * @param _maxWithdrawAmount maximum withdraw amount\\n     */\\n    function updateMaxWithdrawAmount(uint256 _maxWithdrawAmount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setVariable(MAX_WITHDRAW_AMOUNT, _maxWithdrawAmount);\\n        verifyDepositAndWithdrawLimits();\\n    }\\n\\n    function updateMinBlockDelayToFinalizeWithdrawRequest(uint256 _minBlockDelay)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        setVariable(MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST, _minBlockDelay);\\n    }\\n\\n    /**\\n     * @notice update the max number of withdrawn validator keys reported by oracle in single tx\\n     * @dev only `OPERATOR` can call\\n     * @param _withdrawnKeysBatchSize updated maximum withdrawn key limit in the oracle input\\n     */\\n    function updateWithdrawnKeysBatchSize(uint256 _withdrawnKeysBatchSize) external onlyRole(OPERATOR) {\\n        setVariable(WITHDRAWN_KEYS_BATCH_SIZE, _withdrawnKeysBatchSize);\\n    }\\n\\n    //Accounts Setters\\n\\n    function updateAdmin(address _admin) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        address oldAdmin = accountsMap[ADMIN];\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        setAccount(ADMIN, _admin);\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, oldAdmin);\\n    }\\n\\n    function updateStaderTreasury(address _staderTreasury) external onlyRole(MANAGER) {\\n        setAccount(STADER_TREASURY, _staderTreasury);\\n    }\\n\\n    // Contracts Setters\\n\\n    function updatePoolUtils(address _poolUtils) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(POOL_UTILS, _poolUtils);\\n    }\\n\\n    function updatePoolSelector(address _poolSelector) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(POOL_SELECTOR, _poolSelector);\\n    }\\n\\n    function updateSDCollateral(address _sdCollateral) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(SD_COLLATERAL, _sdCollateral);\\n    }\\n\\n    function updateOperatorRewardsCollector(address _operatorRewardsCollector) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(OPERATOR_REWARD_COLLECTOR, _operatorRewardsCollector);\\n    }\\n\\n    function updateVaultFactory(address _vaultFactory) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(VAULT_FACTORY, _vaultFactory);\\n    }\\n\\n    function updateAuctionContract(address _auctionContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(AUCTION_CONTRACT, _auctionContract);\\n    }\\n\\n    function updateStaderOracle(address _staderOracle) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(STADER_ORACLE, _staderOracle);\\n    }\\n\\n    function updatePenaltyContract(address _penaltyContract) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(PENALTY_CONTRACT, _penaltyContract);\\n    }\\n\\n    function updatePermissionedPool(address _permissionedPool) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(PERMISSIONED_POOL, _permissionedPool);\\n    }\\n\\n    function updateStakePoolManager(address _stakePoolManager) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(STAKE_POOL_MANAGER, _stakePoolManager);\\n    }\\n\\n    function updatePermissionlessPool(address _permissionlessPool) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(PERMISSIONLESS_POOL, _permissionlessPool);\\n    }\\n\\n    function updateUserWithdrawManager(address _userWithdrawManager) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(USER_WITHDRAW_MANAGER, _userWithdrawManager);\\n    }\\n\\n    function updateStaderInsuranceFund(address _staderInsuranceFund) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(STADER_INSURANCE_FUND, _staderInsuranceFund);\\n    }\\n\\n    function updatePermissionedNodeRegistry(address _permissionedNodeRegistry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(PERMISSIONED_NODE_REGISTRY, _permissionedNodeRegistry);\\n    }\\n\\n    function updatePermissionlessNodeRegistry(address _permissionlessNodeRegistry)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        setContract(PERMISSIONLESS_NODE_REGISTRY, _permissionlessNodeRegistry);\\n    }\\n\\n    function updatePermissionedSocializingPool(address _permissionedSocializePool)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        setContract(PERMISSIONED_SOCIALIZING_POOL, _permissionedSocializePool);\\n    }\\n\\n    function updatePermissionlessSocializingPool(address _permissionlessSocializePool)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        setContract(PERMISSIONLESS_SOCIALIZING_POOL, _permissionlessSocializePool);\\n    }\\n\\n    function updateNodeELRewardImplementation(address _nodeELRewardVaultImpl) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(NODE_EL_REWARD_VAULT_IMPLEMENTATION, _nodeELRewardVaultImpl);\\n    }\\n\\n    function updateValidatorWithdrawalVaultImplementation(address _validatorWithdrawalVaultImpl)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        setContract(VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION, _validatorWithdrawalVaultImpl);\\n    }\\n\\n    function updateETHBalancePORFeedProxy(address _ethBalanceProxy) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(ETH_BALANCE_POR_FEED, _ethBalanceProxy);\\n    }\\n\\n    function updateETHXSupplyPORFeedProxy(address _ethXSupplyProxy) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(ETHX_SUPPLY_POR_FEED, _ethXSupplyProxy);\\n    }\\n\\n    function updateStaderToken(address _staderToken) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setToken(SD, _staderToken);\\n    }\\n\\n    function updateETHxToken(address _ethX) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setToken(ETHx, _ethX);\\n    }\\n\\n    function updateSDUtilityPool(address _utilityPool) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(SD_UTILITY_POOL, _utilityPool);\\n    }\\n\\n    function updateSDIncentiveController(address _sdIncentiveController) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        setContract(SD_INCENTIVE_CONTROLLER, _sdIncentiveController);\\n    }\\n\\n    //Constants Getters\\n\\n    function getStakedEthPerNode() external view override returns (uint256) {\\n        return constantsMap[ETH_PER_NODE];\\n    }\\n\\n    function getPreDepositSize() external view override returns (uint256) {\\n        return constantsMap[PRE_DEPOSIT_SIZE];\\n    }\\n\\n    function getFullDepositSize() external view override returns (uint256) {\\n        return constantsMap[FULL_DEPOSIT_SIZE];\\n    }\\n\\n    function getDecimals() external view override returns (uint256) {\\n        return constantsMap[DECIMALS];\\n    }\\n\\n    function getTotalFee() external view override returns (uint256) {\\n        return constantsMap[TOTAL_FEE];\\n    }\\n\\n    function getOperatorMaxNameLength() external view override returns (uint256) {\\n        return constantsMap[OPERATOR_MAX_NAME_LENGTH];\\n    }\\n\\n    //Variables Getters\\n\\n    function getSocializingPoolCycleDuration() external view override returns (uint256) {\\n        return variablesMap[SOCIALIZING_POOL_CYCLE_DURATION];\\n    }\\n\\n    function getSocializingPoolOptInCoolingPeriod() external view override returns (uint256) {\\n        return variablesMap[SOCIALIZING_POOL_OPT_IN_COOLING_PERIOD];\\n    }\\n\\n    function getRewardsThreshold() external view override returns (uint256) {\\n        return variablesMap[REWARD_THRESHOLD];\\n    }\\n\\n    function getMinDepositAmount() external view override returns (uint256) {\\n        return variablesMap[MIN_DEPOSIT_AMOUNT];\\n    }\\n\\n    function getMaxDepositAmount() external view override returns (uint256) {\\n        return variablesMap[MAX_DEPOSIT_AMOUNT];\\n    }\\n\\n    function getMinWithdrawAmount() external view override returns (uint256) {\\n        return variablesMap[MIN_WITHDRAW_AMOUNT];\\n    }\\n\\n    function getMaxWithdrawAmount() external view override returns (uint256) {\\n        return variablesMap[MAX_WITHDRAW_AMOUNT];\\n    }\\n\\n    function getMinBlockDelayToFinalizeWithdrawRequest() external view override returns (uint256) {\\n        return variablesMap[MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST];\\n    }\\n\\n    function getWithdrawnKeyBatchSize() external view override returns (uint256) {\\n        return variablesMap[WITHDRAWN_KEYS_BATCH_SIZE];\\n    }\\n\\n    //Account Getters\\n\\n    function getAdmin() external view returns (address) {\\n        return accountsMap[ADMIN];\\n    }\\n\\n    function getStaderTreasury() external view override returns (address) {\\n        return accountsMap[STADER_TREASURY];\\n    }\\n\\n    //Contracts Getters\\n\\n    function getPoolUtils() external view override returns (address) {\\n        return contractsMap[POOL_UTILS];\\n    }\\n\\n    function getPoolSelector() external view override returns (address) {\\n        return contractsMap[POOL_SELECTOR];\\n    }\\n\\n    function getSDCollateral() external view override returns (address) {\\n        return contractsMap[SD_COLLATERAL];\\n    }\\n\\n    function getOperatorRewardsCollector() external view override returns (address) {\\n        return contractsMap[OPERATOR_REWARD_COLLECTOR];\\n    }\\n\\n    function getVaultFactory() external view override returns (address) {\\n        return contractsMap[VAULT_FACTORY];\\n    }\\n\\n    function getStaderOracle() external view override returns (address) {\\n        return contractsMap[STADER_ORACLE];\\n    }\\n\\n    function getAuctionContract() external view override returns (address) {\\n        return contractsMap[AUCTION_CONTRACT];\\n    }\\n\\n    function getPenaltyContract() external view override returns (address) {\\n        return contractsMap[PENALTY_CONTRACT];\\n    }\\n\\n    function getPermissionedPool() external view override returns (address) {\\n        return contractsMap[PERMISSIONED_POOL];\\n    }\\n\\n    function getStakePoolManager() external view override returns (address) {\\n        return contractsMap[STAKE_POOL_MANAGER];\\n    }\\n\\n    function getETHDepositContract() external view override returns (address) {\\n        return contractsMap[ETH_DEPOSIT_CONTRACT];\\n    }\\n\\n    function getPermissionlessPool() external view override returns (address) {\\n        return contractsMap[PERMISSIONLESS_POOL];\\n    }\\n\\n    function getUserWithdrawManager() external view override returns (address) {\\n        return contractsMap[USER_WITHDRAW_MANAGER];\\n    }\\n\\n    function getStaderInsuranceFund() external view override returns (address) {\\n        return contractsMap[STADER_INSURANCE_FUND];\\n    }\\n\\n    function getPermissionedNodeRegistry() external view override returns (address) {\\n        return contractsMap[PERMISSIONED_NODE_REGISTRY];\\n    }\\n\\n    function getPermissionlessNodeRegistry() external view override returns (address) {\\n        return contractsMap[PERMISSIONLESS_NODE_REGISTRY];\\n    }\\n\\n    function getPermissionedSocializingPool() external view override returns (address) {\\n        return contractsMap[PERMISSIONED_SOCIALIZING_POOL];\\n    }\\n\\n    function getPermissionlessSocializingPool() external view override returns (address) {\\n        return contractsMap[PERMISSIONLESS_SOCIALIZING_POOL];\\n    }\\n\\n    function getNodeELRewardVaultImplementation() external view override returns (address) {\\n        return contractsMap[NODE_EL_REWARD_VAULT_IMPLEMENTATION];\\n    }\\n\\n    function getValidatorWithdrawalVaultImplementation() external view override returns (address) {\\n        return contractsMap[VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION];\\n    }\\n\\n    //POR Feed Proxy Getters\\n    function getETHBalancePORFeedProxy() external view override returns (address) {\\n        return contractsMap[ETH_BALANCE_POR_FEED];\\n    }\\n\\n    function getETHXSupplyPORFeedProxy() external view override returns (address) {\\n        return contractsMap[ETHX_SUPPLY_POR_FEED];\\n    }\\n\\n    function getSDUtilityPool() external view override returns (address) {\\n        return contractsMap[SD_UTILITY_POOL];\\n    }\\n\\n    function getSDIncentiveController() external view override returns (address) {\\n        return contractsMap[SD_INCENTIVE_CONTROLLER];\\n    }\\n\\n    //Token Getters\\n\\n    function getStaderToken() external view override returns (address) {\\n        return tokensMap[SD];\\n    }\\n\\n    function getETHxToken() external view returns (address) {\\n        return tokensMap[ETHx];\\n    }\\n\\n    // SETTER HELPERS\\n    function setConstant(bytes32 key, uint256 val) internal {\\n        if (constantsMap[key] == val) {\\n            revert IndenticalValue();\\n        }\\n        constantsMap[key] = val;\\n        emit SetConstant(key, val);\\n    }\\n\\n    function setVariable(bytes32 key, uint256 val) internal {\\n        if (variablesMap[key] == val) {\\n            revert IndenticalValue();\\n        }\\n        variablesMap[key] = val;\\n        emit SetConstant(key, val);\\n    }\\n\\n    function setAccount(bytes32 key, address val) internal {\\n        UtilLib.checkNonZeroAddress(val);\\n        if (accountsMap[key] == val) {\\n            revert IndenticalValue();\\n        }\\n        accountsMap[key] = val;\\n        emit SetAccount(key, val);\\n    }\\n\\n    function setContract(bytes32 key, address val) internal {\\n        UtilLib.checkNonZeroAddress(val);\\n        if (contractsMap[key] == val) {\\n            revert IndenticalValue();\\n        }\\n        contractsMap[key] = val;\\n        emit SetContract(key, val);\\n    }\\n\\n    function setToken(bytes32 key, address val) internal {\\n        UtilLib.checkNonZeroAddress(val);\\n        if (tokensMap[key] == val) {\\n            revert IndenticalValue();\\n        }\\n        tokensMap[key] = val;\\n        emit SetToken(key, val);\\n    }\\n\\n    //only stader protocol contract check\\n    function onlyStaderContract(address _addr, bytes32 _contractName) external view returns (bool) {\\n        return (_addr == contractsMap[_contractName]);\\n    }\\n\\n    function onlyManagerRole(address account) external view override returns (bool) {\\n        return hasRole(MANAGER, account);\\n    }\\n\\n    function onlyOperatorRole(address account) external view override returns (bool) {\\n        return hasRole(OPERATOR, account);\\n    }\\n\\n    function verifyDepositAndWithdrawLimits() internal view {\\n        if (\\n            !(variablesMap[MIN_DEPOSIT_AMOUNT] != 0 &&\\n                variablesMap[MIN_WITHDRAW_AMOUNT] != 0 &&\\n                variablesMap[MIN_DEPOSIT_AMOUNT] <= variablesMap[MAX_DEPOSIT_AMOUNT] &&\\n                variablesMap[MIN_WITHDRAW_AMOUNT] <= variablesMap[MAX_WITHDRAW_AMOUNT] &&\\n                variablesMap[MIN_WITHDRAW_AMOUNT] <= variablesMap[MIN_DEPOSIT_AMOUNT] &&\\n                variablesMap[MAX_WITHDRAW_AMOUNT] >= variablesMap[MAX_DEPOSIT_AMOUNT])\\n        ) {\\n            revert InvalidLimits();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/UtilLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport '../interfaces/IStaderConfig.sol';\\nimport '../interfaces/INodeRegistry.sol';\\nimport '../interfaces/IPoolUtils.sol';\\nimport '../interfaces/IVaultProxy.sol';\\n\\nlibrary UtilLib {\\n    error ZeroAddress();\\n    error InvalidPubkeyLength();\\n    error CallerNotManager();\\n    error CallerNotOperator();\\n    error CallerNotStaderContract();\\n    error CallerNotWithdrawVault();\\n    error TransferFailed();\\n\\n    uint64 private constant VALIDATOR_PUBKEY_LENGTH = 48;\\n\\n    /// @notice zero address check modifier\\n    function checkNonZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) revert ZeroAddress();\\n    }\\n\\n    //checks for Manager role in staderConfig\\n    function onlyManagerRole(address _addr, IStaderConfig _staderConfig) internal view {\\n        if (!_staderConfig.onlyManagerRole(_addr)) {\\n            revert CallerNotManager();\\n        }\\n    }\\n\\n    function onlyOperatorRole(address _addr, IStaderConfig _staderConfig) internal view {\\n        if (!_staderConfig.onlyOperatorRole(_addr)) {\\n            revert CallerNotOperator();\\n        }\\n    }\\n\\n    //checks if caller is a stader contract address\\n    function onlyStaderContract(\\n        address _addr,\\n        IStaderConfig _staderConfig,\\n        bytes32 _contractName\\n    ) internal view {\\n        if (!_staderConfig.onlyStaderContract(_addr, _contractName)) {\\n            revert CallerNotStaderContract();\\n        }\\n    }\\n\\n    function getPubkeyForValidSender(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        address _addr,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (bytes memory) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, bytes memory pubkey, , , address withdrawVaultAddress, , , ) = INodeRegistry(nodeRegistry).validatorRegistry(\\n            _validatorId\\n        );\\n        if (_addr != withdrawVaultAddress) {\\n            revert CallerNotWithdrawVault();\\n        }\\n        return pubkey;\\n    }\\n\\n    function getOperatorForValidSender(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        address _addr,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (address) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , address withdrawVaultAddress, uint256 operatorId, , ) = INodeRegistry(nodeRegistry).validatorRegistry(\\n            _validatorId\\n        );\\n        if (_addr != withdrawVaultAddress) {\\n            revert CallerNotWithdrawVault();\\n        }\\n        (, , , , address operator) = INodeRegistry(nodeRegistry).operatorStructById(operatorId);\\n        return operator;\\n    }\\n\\n    function onlyValidatorWithdrawVault(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        address _addr,\\n        IStaderConfig _staderConfig\\n    ) internal view {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , address withdrawVaultAddress, , , ) = INodeRegistry(nodeRegistry).validatorRegistry(_validatorId);\\n        if (_addr != withdrawVaultAddress) {\\n            revert CallerNotWithdrawVault();\\n        }\\n    }\\n\\n    function getOperatorAddressByValidatorId(\\n        uint8 _poolId,\\n        uint256 _validatorId,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (address) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , , uint256 operatorId, , ) = INodeRegistry(nodeRegistry).validatorRegistry(_validatorId);\\n        (, , , , address operatorAddress) = INodeRegistry(nodeRegistry).operatorStructById(operatorId);\\n\\n        return operatorAddress;\\n    }\\n\\n    function getOperatorAddressByOperatorId(\\n        uint8 _poolId,\\n        uint256 _operatorId,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (address) {\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(_poolId);\\n        (, , , , address operatorAddress) = INodeRegistry(nodeRegistry).operatorStructById(_operatorId);\\n\\n        return operatorAddress;\\n    }\\n\\n    function getOperatorRewardAddress(address _operator, IStaderConfig _staderConfig)\\n        internal\\n        view\\n        returns (address payable)\\n    {\\n        uint8 poolId = IPoolUtils(_staderConfig.getPoolUtils()).getOperatorPoolId(_operator);\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(poolId);\\n        uint256 operatorId = INodeRegistry(nodeRegistry).operatorIDByAddress(_operator);\\n        return INodeRegistry(nodeRegistry).getOperatorRewardAddress(operatorId);\\n    }\\n\\n    /**\\n     * @notice Computes the public key root.\\n     * @param _pubkey The validator public key for which to compute the root.\\n     * @return The root of the public key.\\n     */\\n    function getPubkeyRoot(bytes calldata _pubkey) internal pure returns (bytes32) {\\n        if (_pubkey.length != VALIDATOR_PUBKEY_LENGTH) {\\n            revert InvalidPubkeyLength();\\n        }\\n\\n        // Append 16 bytes of zero padding to the pubkey and compute its hash to get the pubkey root.\\n        return sha256(abi.encodePacked(_pubkey, bytes16(0)));\\n    }\\n\\n    function getValidatorSettleStatus(bytes calldata _pubkey, IStaderConfig _staderConfig)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint8 poolId = IPoolUtils(_staderConfig.getPoolUtils()).getValidatorPoolId(_pubkey);\\n        address nodeRegistry = IPoolUtils(_staderConfig.getPoolUtils()).getNodeRegistry(poolId);\\n        uint256 validatorId = INodeRegistry(nodeRegistry).validatorIdByPubkey(_pubkey);\\n        (, , , , address withdrawVaultAddress, , , ) = INodeRegistry(nodeRegistry).validatorRegistry(validatorId);\\n        return IVaultProxy(withdrawVaultAddress).vaultSettleStatus();\\n    }\\n\\n    function computeExchangeRate(\\n        uint256 totalETHBalance,\\n        uint256 totalETHXSupply,\\n        IStaderConfig _staderConfig\\n    ) internal view returns (uint256) {\\n        uint256 DECIMALS = _staderConfig.getDecimals();\\n        uint256 newExchangeRate = (totalETHBalance == 0 || totalETHXSupply == 0)\\n            ? DECIMALS\\n            : (totalETHBalance * DECIMALS) / totalETHXSupply;\\n        return newExchangeRate;\\n    }\\n\\n    function sendValue(address _receiver, uint256 _amount) internal {\\n        (bool success, ) = payable(_receiver).call{value: _amount}('');\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaderConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\ninterface IStaderConfig {\\n    // Errors\\n    error InvalidLimits();\\n    error InvalidMinDepositValue();\\n    error InvalidMaxDepositValue();\\n    error InvalidMinWithdrawValue();\\n    error InvalidMaxWithdrawValue();\\n    error IndenticalValue();\\n\\n    // Events\\n    event SetConstant(bytes32 key, uint256 amount);\\n    event SetVariable(bytes32 key, uint256 amount);\\n    event SetAccount(bytes32 key, address newAddress);\\n    event SetContract(bytes32 key, address newAddress);\\n    event SetToken(bytes32 key, address newAddress);\\n\\n    //Contracts\\n    function POOL_UTILS() external view returns (bytes32);\\n\\n    function POOL_SELECTOR() external view returns (bytes32);\\n\\n    function SD_COLLATERAL() external view returns (bytes32);\\n\\n    function OPERATOR_REWARD_COLLECTOR() external view returns (bytes32);\\n\\n    function VAULT_FACTORY() external view returns (bytes32);\\n\\n    function STADER_ORACLE() external view returns (bytes32);\\n\\n    function AUCTION_CONTRACT() external view returns (bytes32);\\n\\n    function PENALTY_CONTRACT() external view returns (bytes32);\\n\\n    function PERMISSIONED_POOL() external view returns (bytes32);\\n\\n    function STAKE_POOL_MANAGER() external view returns (bytes32);\\n\\n    function ETH_DEPOSIT_CONTRACT() external view returns (bytes32);\\n\\n    function PERMISSIONLESS_POOL() external view returns (bytes32);\\n\\n    function USER_WITHDRAW_MANAGER() external view returns (bytes32);\\n\\n    function STADER_INSURANCE_FUND() external view returns (bytes32);\\n\\n    function PERMISSIONED_NODE_REGISTRY() external view returns (bytes32);\\n\\n    function PERMISSIONLESS_NODE_REGISTRY() external view returns (bytes32);\\n\\n    function PERMISSIONED_SOCIALIZING_POOL() external view returns (bytes32);\\n\\n    function PERMISSIONLESS_SOCIALIZING_POOL() external view returns (bytes32);\\n\\n    function NODE_EL_REWARD_VAULT_IMPLEMENTATION() external view returns (bytes32);\\n\\n    function VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION() external view returns (bytes32);\\n\\n    //SD Utility Pool\\n\\n    function SD_UTILITY_POOL() external view returns (bytes32);\\n\\n    function SD_INCENTIVE_CONTROLLER() external view returns (bytes32);\\n\\n    //POR Feed Proxy\\n    function ETH_BALANCE_POR_FEED() external view returns (bytes32);\\n\\n    function ETHX_SUPPLY_POR_FEED() external view returns (bytes32);\\n\\n    //Roles\\n    function MANAGER() external view returns (bytes32);\\n\\n    function OPERATOR() external view returns (bytes32);\\n\\n    // Constants\\n    function getStakedEthPerNode() external view returns (uint256);\\n\\n    function getPreDepositSize() external view returns (uint256);\\n\\n    function getFullDepositSize() external view returns (uint256);\\n\\n    function getDecimals() external view returns (uint256);\\n\\n    function getTotalFee() external view returns (uint256);\\n\\n    function getOperatorMaxNameLength() external view returns (uint256);\\n\\n    // Variables\\n    function getSocializingPoolCycleDuration() external view returns (uint256);\\n\\n    function getSocializingPoolOptInCoolingPeriod() external view returns (uint256);\\n\\n    function getRewardsThreshold() external view returns (uint256);\\n\\n    function getMinDepositAmount() external view returns (uint256);\\n\\n    function getMaxDepositAmount() external view returns (uint256);\\n\\n    function getMinWithdrawAmount() external view returns (uint256);\\n\\n    function getMaxWithdrawAmount() external view returns (uint256);\\n\\n    function getMinBlockDelayToFinalizeWithdrawRequest() external view returns (uint256);\\n\\n    function getWithdrawnKeyBatchSize() external view returns (uint256);\\n\\n    // Accounts\\n    function getAdmin() external view returns (address);\\n\\n    function getStaderTreasury() external view returns (address);\\n\\n    // Contracts\\n    function getPoolUtils() external view returns (address);\\n\\n    function getPoolSelector() external view returns (address);\\n\\n    function getSDCollateral() external view returns (address);\\n\\n    function getOperatorRewardsCollector() external view returns (address);\\n\\n    function getVaultFactory() external view returns (address);\\n\\n    function getStaderOracle() external view returns (address);\\n\\n    function getAuctionContract() external view returns (address);\\n\\n    function getPenaltyContract() external view returns (address);\\n\\n    function getPermissionedPool() external view returns (address);\\n\\n    function getStakePoolManager() external view returns (address);\\n\\n    function getETHDepositContract() external view returns (address);\\n\\n    function getPermissionlessPool() external view returns (address);\\n\\n    function getUserWithdrawManager() external view returns (address);\\n\\n    function getStaderInsuranceFund() external view returns (address);\\n\\n    function getPermissionedNodeRegistry() external view returns (address);\\n\\n    function getPermissionlessNodeRegistry() external view returns (address);\\n\\n    function getPermissionedSocializingPool() external view returns (address);\\n\\n    function getPermissionlessSocializingPool() external view returns (address);\\n\\n    function getNodeELRewardVaultImplementation() external view returns (address);\\n\\n    function getValidatorWithdrawalVaultImplementation() external view returns (address);\\n\\n    function getETHBalancePORFeedProxy() external view returns (address);\\n\\n    function getETHXSupplyPORFeedProxy() external view returns (address);\\n\\n    function getSDUtilityPool() external view returns (address);\\n\\n    function getSDIncentiveController() external view returns (address);\\n\\n    // Tokens\\n    function getStaderToken() external view returns (address);\\n\\n    function getETHxToken() external view returns (address);\\n\\n    //checks roles and stader contracts\\n    function onlyStaderContract(address _addr, bytes32 _contractName) external view returns (bool);\\n\\n    function onlyManagerRole(address account) external view returns (bool);\\n\\n    function onlyOperatorRole(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INodeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport '../library/ValidatorStatus.sol';\\n\\nstruct Validator {\\n    ValidatorStatus status; // status of validator\\n    bytes pubkey; //pubkey of the validator\\n    bytes preDepositSignature; //signature for 1 ETH deposit on beacon chain\\n    bytes depositSignature; //signature for 31 ETH deposit on beacon chain\\n    address withdrawVaultAddress; //withdrawal vault address of validator\\n    uint256 operatorId; // stader network assigned Id\\n    uint256 depositBlock; // block number of the 31ETH deposit\\n    uint256 withdrawnBlock; //block number when oracle report validator as withdrawn\\n}\\n\\nstruct Operator {\\n    bool active; // operator status\\n    bool optedForSocializingPool; // operator opted for socializing pool\\n    string operatorName; // name of the operator\\n    address payable operatorRewardAddress; //Eth1 address of node for reward\\n    address operatorAddress; //address of operator to interact with stader\\n}\\n\\n// Interface for the NodeRegistry contract\\ninterface INodeRegistry {\\n    // Errors\\n    error DuplicatePoolIDOrPoolNotAdded();\\n    error OperatorAlreadyOnBoardedInProtocol();\\n    error maxKeyLimitReached();\\n    error OperatorNotOnBoarded();\\n    error InvalidKeyCount();\\n    error InvalidStartAndEndIndex();\\n    error OperatorIsDeactivate();\\n    error MisMatchingInputKeysSize();\\n    error PageNumberIsZero();\\n    error UNEXPECTED_STATUS();\\n    error PubkeyAlreadyExist();\\n    error NotEnoughSDCollateral();\\n    error TooManyVerifiedKeysReported();\\n    error TooManyWithdrawnKeysReported();\\n    error CallerNotExistingRewardAddress();\\n    error CallerNotNewRewardAddress();\\n\\n    // Events\\n    event AddedValidatorKey(address indexed nodeOperator, bytes pubkey, uint256 validatorId);\\n    event ValidatorMarkedAsFrontRunned(bytes pubkey, uint256 validatorId);\\n    event ValidatorWithdrawn(bytes pubkey, uint256 validatorId);\\n    event ValidatorStatusMarkedAsInvalidSignature(bytes pubkey, uint256 validatorId);\\n    event UpdatedValidatorDepositBlock(uint256 validatorId, uint256 depositBlock);\\n    event UpdatedMaxNonTerminalKeyPerOperator(uint64 maxNonTerminalKeyPerOperator);\\n    event UpdatedInputKeyCountLimit(uint256 batchKeyDepositLimit);\\n    event UpdatedStaderConfig(address staderConfig);\\n    event RewardAddressProposed(address indexed nodeOperator, address indexed rewardAddress);\\n    event OperatorRewardAddressUpdated(address indexed nodeOperator, address indexed rewardAddress);\\n    event UpdatedOperatorName(address indexed nodeOperator, string operatorName);\\n    event IncreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount);\\n    event UpdatedVerifiedKeyBatchSize(uint256 verifiedKeysBatchSize);\\n    event UpdatedWithdrawnKeyBatchSize(uint256 withdrawnKeysBatchSize);\\n    event DecreasedTotalActiveValidatorCount(uint256 totalActiveValidatorCount);\\n\\n    function withdrawnValidators(bytes[] calldata _pubkeys) external;\\n\\n    function markValidatorReadyToDeposit(\\n        bytes[] calldata _readyToDepositPubkey,\\n        bytes[] calldata _frontRunPubkey,\\n        bytes[] calldata _invalidSignaturePubkey\\n    ) external;\\n\\n    // return validator struct for a validator Id\\n    function validatorRegistry(uint256)\\n        external\\n        view\\n        returns (\\n            ValidatorStatus status,\\n            bytes calldata pubkey,\\n            bytes calldata preDepositSignature,\\n            bytes calldata depositSignature,\\n            address withdrawVaultAddress,\\n            uint256 operatorId,\\n            uint256 depositTime,\\n            uint256 withdrawnTime\\n        );\\n\\n    // returns the operator struct given operator Id\\n    function operatorStructById(uint256)\\n        external\\n        view\\n        returns (\\n            bool active,\\n            bool optedForSocializingPool,\\n            string calldata operatorName,\\n            address payable operatorRewardAddress,\\n            address operatorAddress\\n        );\\n\\n    // Returns the last block the operator changed the opt-in status for socializing pool\\n    function getSocializingPoolStateChangeBlock(uint256 _operatorId) external view returns (uint256);\\n\\n    function getAllActiveValidators(uint256 _pageNumber, uint256 _pageSize) external view returns (Validator[] memory);\\n\\n    function getValidatorsByOperator(\\n        address _operator,\\n        uint256 _pageNumber,\\n        uint256 _pageSize\\n    ) external view returns (Validator[] memory);\\n\\n    /**\\n     *\\n     * @param _nodeOperator @notice operator total non withdrawn keys within a specified validator list\\n     * @param _startIndex start index in validator queue to start with\\n     * @param _endIndex  up to end index of validator queue to to count\\n     */\\n    function getOperatorTotalNonTerminalKeys(\\n        address _nodeOperator,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) external view returns (uint64);\\n\\n    // returns the total number of queued validators across all operators\\n    function getTotalQueuedValidatorCount() external view returns (uint256);\\n\\n    // returns the total number of active validators across all operators\\n    function getTotalActiveValidatorCount() external view returns (uint256);\\n\\n    function getCollateralETH() external view returns (uint256);\\n\\n    function getOperatorTotalKeys(uint256 _operatorId) external view returns (uint256 totalKeys);\\n\\n    function operatorIDByAddress(address) external view returns (uint256);\\n\\n    function getOperatorRewardAddress(uint256 _operatorId) external view returns (address payable);\\n\\n    function isExistingPubkey(bytes calldata _pubkey) external view returns (bool);\\n\\n    function isExistingOperator(address _operAddr) external view returns (bool);\\n\\n    function POOL_ID() external view returns (uint8);\\n\\n    function inputKeyCountLimit() external view returns (uint16);\\n\\n    function nextOperatorId() external view returns (uint256);\\n\\n    function nextValidatorId() external view returns (uint256);\\n\\n    function maxNonTerminalKeyPerOperator() external view returns (uint64);\\n\\n    function verifiedKeyBatchSize() external view returns (uint256);\\n\\n    function totalActiveValidatorCount() external view returns (uint256);\\n\\n    function validatorIdByPubkey(bytes calldata _pubkey) external view returns (uint256);\\n\\n    function validatorIdsByOperatorId(uint256, uint256) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport './INodeRegistry.sol';\\n\\n// Interface for the PoolUtils contract\\ninterface IPoolUtils {\\n    // Errors\\n    error EmptyNameString();\\n    error PoolIdNotPresent();\\n    error MismatchingPoolId();\\n    error PubkeyDoesNotExit();\\n    error PubkeyAlreadyExist();\\n    error NameCrossedMaxLength();\\n    error InvalidLengthOfPubkey();\\n    error OperatorIsNotOnboarded();\\n    error InvalidLengthOfSignature();\\n    error ExistingOrMismatchingPoolId();\\n\\n    // Events\\n    event PoolAdded(uint8 indexed poolId, address poolAddress);\\n    event PoolAddressUpdated(uint8 indexed poolId, address poolAddress);\\n    event DeactivatedPool(uint8 indexed poolId, address poolAddress);\\n    event UpdatedStaderConfig(address staderConfig);\\n    event ExitValidator(bytes pubkey);\\n    event ExitOperator(address indexed operator, uint256 totalAmount);\\n\\n    // returns the details of a specific pool\\n    function poolAddressById(uint8) external view returns (address poolAddress);\\n\\n    function poolIdArray(uint256) external view returns (uint8);\\n\\n    function getPoolIdArray() external view returns (uint8[] memory);\\n\\n    // Pool functions\\n    function addNewPool(uint8 _poolId, address _poolAddress) external;\\n\\n    function updatePoolAddress(uint8 _poolId, address _poolAddress) external;\\n\\n    function processValidatorExitList(bytes[] calldata _pubkeys) external;\\n\\n    function processOperatorExit(address _operator, uint256 totalAmount) external;\\n\\n    function getOperatorTotalNonTerminalKeys(\\n        uint8 _poolId,\\n        address _nodeOperator,\\n        uint256 _startIndex,\\n        uint256 _endIndex\\n    ) external view returns (uint256);\\n\\n    function getSocializingPoolAddress(uint8 _poolId) external view returns (address);\\n\\n    // Pool getters\\n    function getProtocolFee(uint8 _poolId) external view returns (uint256); // returns the protocol fee (0-10000)\\n\\n    function getOperatorFee(uint8 _poolId) external view returns (uint256); // returns the operator fee (0-10000)\\n\\n    function getTotalActiveValidatorCount() external view returns (uint256); //returns total active validators across all pools\\n\\n    function getActiveValidatorCountByPool(uint8 _poolId) external view returns (uint256); // returns the total number of active validators in a specific pool\\n\\n    function getQueuedValidatorCountByPool(uint8 _poolId) external view returns (uint256); // returns the total number of queued validators in a specific pool\\n\\n    function getCollateralETH(uint8 _poolId) external view returns (uint256);\\n\\n    function getNodeRegistry(uint8 _poolId) external view returns (address);\\n\\n    // check for duplicate pubkey across all pools\\n    function isExistingPubkey(bytes calldata _pubkey) external view returns (bool);\\n\\n    // check for duplicate operator across all pools\\n    function isExistingOperator(address _operAddr) external view returns (bool);\\n\\n    function isExistingPoolId(uint8 _poolId) external view returns (bool);\\n\\n    function getOperatorPoolId(address _operAddr) external view returns (uint8);\\n\\n    function getValidatorPoolId(bytes calldata _pubkey) external view returns (uint8);\\n\\n    function onlyValidName(string calldata _name) external;\\n\\n    function onlyValidKeys(\\n        bytes calldata _pubkey,\\n        bytes calldata _preDepositSignature,\\n        bytes calldata _depositSignature\\n    ) external;\\n\\n    function calculateRewardShare(uint8 _poolId, uint256 _totalRewards)\\n        external\\n        view\\n        returns (\\n            uint256 userShare,\\n            uint256 operatorShare,\\n            uint256 protocolShare\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport './IStaderConfig.sol';\\n\\ninterface IVaultProxy {\\n    error CallerNotOwner();\\n    error AlreadyInitialized();\\n    event UpdatedOwner(address owner);\\n    event UpdatedStaderConfig(address staderConfig);\\n\\n    //Getters\\n    function vaultSettleStatus() external view returns (bool);\\n\\n    function isValidatorWithdrawalVault() external view returns (bool);\\n\\n    function isInitialized() external view returns (bool);\\n\\n    function poolId() external view returns (uint8);\\n\\n    function id() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function staderConfig() external view returns (IStaderConfig);\\n\\n    //Setters\\n    function updateOwner() external;\\n\\n    function updateStaderConfig(address _staderConfig) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/ValidatorStatus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nenum ValidatorStatus {\\n    INITIALIZED,\\n    INVALID_SIGNATURE,\\n    FRONT_RUN,\\n    PRE_DEPOSIT,\\n    DEPOSITED,\\n    WITHDRAWN\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/=node_modules/@chainlink/\",\r\n      \"@eth-optimism/=node_modules/@eth-optimism/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"base64-sol/=node_modules/base64-sol/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IndenticalValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLimits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxDepositValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaxWithdrawValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinDepositValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinWithdrawValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetConstant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetVariable\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHX_SUPPLY_POR_FEED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_BALANCE_POR_FEED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_DEPOSIT_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_PER_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHx\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FULL_DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BLOCK_DELAY_TO_FINALIZE_WITHDRAW_REQUEST\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAW_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODE_EL_REWARD_VAULT_IMPLEMENTATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_MAX_NAME_LENGTH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_REWARD_COLLECTOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENALTY_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSIONED_NODE_REGISTRY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSIONED_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSIONED_SOCIALIZING_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSIONLESS_NODE_REGISTRY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSIONLESS_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMISSIONLESS_SOCIALIZING_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_UTILS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_DEPOSIT_SIZE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_THRESHOLD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SD_COLLATERAL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SD_INCENTIVE_CONTROLLER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SD_UTILITY_POOL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOCIALIZING_POOL_CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOCIALIZING_POOL_OPT_IN_COOLING_PERIOD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STADER_INSURANCE_FUND\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STADER_ORACLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STADER_TREASURY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_POOL_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_WITHDRAW_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_WITHDRAWAL_VAULT_IMPLEMENTATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_FACTORY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWN_KEYS_BATCH_SIZE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHBalancePORFeedProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHDepositContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHXSupplyPORFeedProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHxToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullDepositSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinBlockDelayToFinalizeWithdrawRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeELRewardVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorMaxNameLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorRewardsCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermissionedNodeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermissionedPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermissionedSocializingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermissionlessNodeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermissionlessPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermissionlessSocializingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolSelector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolUtils\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPreDepositSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSDCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSDIncentiveController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSDUtilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSocializingPoolCycleDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSocializingPoolOptInCoolingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaderInsuranceFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaderOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaderToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaderTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakePoolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedEthPerNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserWithdrawManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorWithdrawalVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawnKeyBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethDepositContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"onlyManagerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"onlyOperatorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_contractName\",\"type\":\"bytes32\"}],\"name\":\"onlyStaderContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_auctionContract\",\"type\":\"address\"}],\"name\":\"updateAuctionContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethBalanceProxy\",\"type\":\"address\"}],\"name\":\"updateETHBalancePORFeedProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethXSupplyProxy\",\"type\":\"address\"}],\"name\":\"updateETHXSupplyPORFeedProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethX\",\"type\":\"address\"}],\"name\":\"updateETHxToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDepositAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxWithdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBlockDelay\",\"type\":\"uint256\"}],\"name\":\"updateMinBlockDelayToFinalizeWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinWithdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeELRewardVaultImpl\",\"type\":\"address\"}],\"name\":\"updateNodeELRewardImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorRewardsCollector\",\"type\":\"address\"}],\"name\":\"updateOperatorRewardsCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_penaltyContract\",\"type\":\"address\"}],\"name\":\"updatePenaltyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissionedNodeRegistry\",\"type\":\"address\"}],\"name\":\"updatePermissionedNodeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissionedPool\",\"type\":\"address\"}],\"name\":\"updatePermissionedPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissionedSocializePool\",\"type\":\"address\"}],\"name\":\"updatePermissionedSocializingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissionlessNodeRegistry\",\"type\":\"address\"}],\"name\":\"updatePermissionlessNodeRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissionlessPool\",\"type\":\"address\"}],\"name\":\"updatePermissionlessPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permissionlessSocializePool\",\"type\":\"address\"}],\"name\":\"updatePermissionlessSocializingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolSelector\",\"type\":\"address\"}],\"name\":\"updatePoolSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolUtils\",\"type\":\"address\"}],\"name\":\"updatePoolUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsThreshold\",\"type\":\"uint256\"}],\"name\":\"updateRewardsThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sdCollateral\",\"type\":\"address\"}],\"name\":\"updateSDCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sdIncentiveController\",\"type\":\"address\"}],\"name\":\"updateSDIncentiveController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utilityPool\",\"type\":\"address\"}],\"name\":\"updateSDUtilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_socializingPoolCycleDuration\",\"type\":\"uint256\"}],\"name\":\"updateSocializingPoolCycleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_SocializePoolOptInCoolingPeriod\",\"type\":\"uint256\"}],\"name\":\"updateSocializingPoolOptInCoolingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staderInsuranceFund\",\"type\":\"address\"}],\"name\":\"updateStaderInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staderOracle\",\"type\":\"address\"}],\"name\":\"updateStaderOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staderToken\",\"type\":\"address\"}],\"name\":\"updateStaderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staderTreasury\",\"type\":\"address\"}],\"name\":\"updateStaderTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakePoolManager\",\"type\":\"address\"}],\"name\":\"updateStakePoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userWithdrawManager\",\"type\":\"address\"}],\"name\":\"updateUserWithdrawManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorWithdrawalVaultImpl\",\"type\":\"address\"}],\"name\":\"updateValidatorWithdrawalVaultImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"updateVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawnKeysBatchSize\",\"type\":\"uint256\"}],\"name\":\"updateWithdrawnKeysBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StaderConfig", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}