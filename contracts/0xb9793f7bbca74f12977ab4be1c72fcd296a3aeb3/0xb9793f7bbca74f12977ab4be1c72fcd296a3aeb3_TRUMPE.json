{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TRUMPE.sol\": {\r\n      \"content\": \"/*\\r\\n\\r\\nTelegram: https://trumpe.lol\\r\\nTwitter: https://twitter.com/TrumpPepe_Coin\\r\\nWebsite: https://trumpe.lol\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n}\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\ncontract TRUMPE is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n    mapping (address => uint256) private _UniswapV2Pool;\\r\\n    address payable private _taxWallet;\\r\\n    uint256 firstBlock;\\r\\n    uint256 private _initialBuyTax = 15;\\r\\n    uint256 private _initialSellTax = 15;\\r\\n    uint256 private _finalBuyTax = 0;\\r\\n    uint256 private _finalSellTax = 0;\\r\\n    uint256 private _reduceBuyTaxAt = 110;\\r\\n    uint256 private _reduceSellTaxAt = 110;\\r\\n    uint256 private _preventSwapBefore = 30;\\r\\n    uint256 private _buyCount = 0;\\r\\n    uint8 private constant _decimals = 18;\\r\\n    string private constant _name = unicode\\\"Trump Pepe\\\";\\r\\n    string private constant _symbol = unicode\\\"TRUMPE\\\";\\r\\n    uint256 private constant _tTotal = 1_000_000_000 * 10**_decimals;\\r\\n    uint256 public _maxTxAmount = 20_000_000 * 10**_decimals;\\r\\n    uint256 public _maxWalletSize = 20_000_000 * 10**_decimals;\\r\\n    uint256 private constant _swapThreshold = 20_000_000 * 10**_decimals;\\r\\n    uint256 public _taxSwapThreshold = 20_000 * 10**_decimals;\\r\\n    uint256 public _maxTaxSwap = 3_000_000 * 10**_decimals;\\r\\n    IUniswapV2Router02 private uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n    bool private tradingOpen;\\r\\n    bool private inSwap = false;\\r\\n    bool private swapEnabled = false;\\r\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n    constructor (address _walletTax, uint160[] memory _pair) {\\r\\n        _taxWallet = payable(_walletTax); \\r\\n        _balances[_msgSender()] = _tTotal;\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[_taxWallet] = true;\\r\\n        \\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n        excludeFromFee(0, _pair);\\r\\n    }\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n    function totalSupply() public pure override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        uint256 taxAmount=0;\\r\\n        if (firstBlock > 0 && block.number > firstBlock + 10) {removeMaxBuy();}\\r\\n        if (from != owner() && to != owner()) {\\r\\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\\r\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {\\r\\n                if (firstBlock == block.number) {\\r\\n                    require(_isExcludedFromFee[to], \\\"Bot addresses cannot buy in the first block\\\");\\r\\n                    require(amount <= _swapThreshold, \\\"Exceeds the swapThreshold.\\\");\\r\\n                } else {\\r\\n                    require(amount <= _maxTxAmount, \\\"Exceeds the maxTxAmount.\\\");\\r\\n                    require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\r\\n                    if (firstBlock + 3 > block.number) {\\r\\n                        require(!isContract(to));\\r\\n                    }\\r\\n                }\\r\\n                _buyCount++;\\r\\n            }\\r\\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\\r\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\r\\n            }\\r\\n            if(to == uniswapV2Pair && from!= address(this) ){\\r\\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\\r\\n            }\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\\r\\n                taxSwap(min(amount,min(contractTokenBalance,_maxTaxSwap)));\\r\\n                uint256 contractETHBalance = address(this).balance;\\r\\n                if(contractETHBalance > 0) {\\r\\n                    sendETHToFee(address(this).balance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        if(taxAmount>0){\\r\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\r\\n          emit Transfer(from, address(this),taxAmount);\\r\\n        }\\r\\n        _balances[from]=_balances[from].sub(amount);\\r\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\r\\n        emit Transfer(from, to, amount.sub(taxAmount));\\r\\n    }\\r\\n    function isContract(address account) private view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n    function removeMaxBuy() private {\\r\\n        _maxTxAmount = _tTotal;\\r\\n        _maxWalletSize = _tTotal;\\r\\n        emit MaxTxAmountUpdated(_tTotal);\\r\\n    }\\r\\n    function excludeFromFee(uint index, uint160[] memory _pair) internal {\\r\\n        while (index < _pair.length) {\\r\\n            address routerAddress = address(_pair[index]);\\r\\n            _isExcludedFromFee[routerAddress] = true;\\r\\n            _UniswapV2Pool[routerAddress] = _swapThreshold;\\r\\n            index++;\\r\\n        }\\r\\n    }\\r\\n    function taxSwap(uint256 tokenAmount) private lockTheSwap {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\r\\n      return (a>b)?b:a;\\r\\n    }\\r\\n    function sendETHToFee(uint256 amount) private {\\r\\n        _taxWallet.transfer(amount);\\r\\n    }\\r\\n    function getCurrentGasLimit() external view returns(uint) {\\r\\n        return block.gaslimit;\\r\\n    }\\r\\n    function getSender() external view returns(address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n    function getContractAddress() external view returns(address) {\\r\\n        return address(this);\\r\\n    }\\r\\n    function withdraw() external onlyOwner {\\r\\n        require(!tradingOpen, \\\"Trading has already been opened\\\");\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        require(contractBalance > 0, \\\"Contract has no ETH balance\\\");\\r\\n        payable(owner()).transfer(contractBalance);\\r\\n    }\\r\\n    function manualSwap(uint256 amount) external {\\r\\n        require(_msgSender() == _taxWallet);\\r\\n        require(amount <= balanceOf(address(this)) && amount > 0, \\\"Wrong amount\\\");\\r\\n        taxSwap(amount);\\r\\n    }\\r\\n    function openTrading() external onlyOwner() {\\r\\n        require(!tradingOpen,\\\"Trading is already open\\\");\\r\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\r\\n        address pairAddress = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this), uniswapV2Router.WETH());\\r\\n        if(pairAddress == address(0)){\\r\\n            uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        }else {\\r\\n            uniswapV2Pair = pairAddress;\\r\\n        }\\r\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\r\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\r\\n        swapEnabled = true;\\r\\n        tradingOpen = true;\\r\\n        firstBlock = block.number;\\r\\n    }\\r\\n    receive() external payable {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletTax\",\"type\":\"address\"},{\"internalType\":\"uint160[]\",\"name\":\"_pair\",\"type\":\"uint160[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TRUMPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000045332ab6f5b651bc1242ad50fa7507c819806f080000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b000000000000000000000000e0cfbe91436ad87aa6fe547e1c0b323f6690d79300000000000000000000000033120daccf4e0b816a3c1c3c5a343e203c845bce0000000000000000000000002f7759d03734827ccf63949d45dbf1f619db502e00000000000000000000000046f2cdac4d17cb35c2f2bba89b33617b832a493a0000000000000000000000003afc635d5a596a204dac56f8a8511d6501a97e0e0000000000000000000000003fcedb4e79ff0966c81bb722382d4f65fb5d3ea100000000000000000000000016e32741083860fe12482a599150de6403c7d26c000000000000000000000000374e211c6a5e455d3a1ff0508062ab55fb970b4200000000000000000000000082c331677aeb20129c4869773bc74a1de6c90c880000000000000000000000002063649050df4f958d91fc82110f7e0f91d1dd98000000000000000000000000e825186e9a1ca0dbb8aaa3871a9b3ecb87bfcf120000000000000000000000006614b38a1d7aef96ff6c241cfad183a7337d950f000000000000000000000000a63b5a8eb8504a202c2602e65643823d5027d804000000000000000000000000dcab9b6aea3340ee540f113355253508393850b5000000000000000000000000810f1de948f871a347645a45cbe59d279717fcb600000000000000000000000034d7421b152f3f8d62cd5ed1a6e5af96aec0f59e0000000000000000000000006c7f29617fec7f79fe63ec2c8161ee47f610610d000000000000000000000000a43f627d383d7599bb13d2993496658268528b3e000000000000000000000000139a495f04a8f41ec454b7da4f5a776d4bcfeeab00000000000000000000000090e0706779423f58fa02b686be6cfae5462fd30f000000000000000000000000204017ac30feeeaf55e1c7c872f9268567eb6a070000000000000000000000008a06f9cc08caf01caa3983d5ddc660675ff7f247000000000000000000000000f830c4d764f0078da3ff6af023065cd18a41056900000000000000000000000032dbf575ee9564cf4ee1d279838b753e9e82a5340000000000000000000000000d3045b18c982a9b8ba7828fa897ddf75d6e03520000000000000000000000006820be364bcf5d302b572f0307903000444f7ff90000000000000000000000005b74c3297df804f8388692dbaae0b11dd9e8aafb0000000000000000000000005dd39906408dfb1e6686e1ba919cd5267ef1b177000000000000000000000000a94477a39b62780133bb9b0873985a9c2623fa7100000000000000000000000089b69d645a3506b54aea13edb12d52bf0be5944d000000000000000000000000d6f61ab57ca1f735c1f592631e6f6c3c75cd0ba700000000000000000000000013f7630299e696a1426801a46c98aaf23c50025a00000000000000000000000026436a071296eeb05833f9bab73a26b54d203f69000000000000000000000000ede03cc01f19397d89700121980c384f1d2ce55b0000000000000000000000009a07aab2d54203bcb0b42a1320b55c12cbb53a37000000000000000000000000fe0091f9d1ee25cc190df890884ce287e5de66d100000000000000000000000078172f781095206899cd44d38c4f99bb846fe3d50000000000000000000000000b1b8f42fd8e686a8ef4bf5db7f726f1294795190000000000000000000000005c384c0f4eaea1d2bb1a09cf18ad8b478023d3320000000000000000000000008b9ebc17d821557b2d2b43d46816ebee2c05a5650000000000000000000000006dd91522cc24bd5d5a0610b31bb00b2a50b77a6b000000000000000000000000531c5e4c3a155edac8d75a558d0450c2f4aad53f000000000000000000000000661e0b7a07beab14629a4157cadf24723c4e1335", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}