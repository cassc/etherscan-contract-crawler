{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/RolesRepo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\nlibrary RolesRepo {\\n\\n    struct Role {\\n        address admin;\\n        mapping(address => bool) isMember;\\n    }\\n\\n    struct Repo {\\n        address owner;\\n        uint8 state; // 0-pending; 1-initiated; 2-finalized\\n        mapping(bytes32 => Role) roles;\\n    }\\n\\n    // ##################\\n    // ##    Modifier  ##\\n    // ##################\\n\\n    modifier isOwner(Repo storage repo, address caller) {\\n        require(\\n            repo.owner == caller,\\n            \\\"RR.isOwner: not owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isRoleAdmin(Repo storage repo, bytes32 role, \\n        address caller) \\n    {\\n        require(\\n            repo.roles[role].admin == caller, \\n            \\\"RR.isRoleAdmin: not admin\\\"\\n        );\\n        _;\\n    }\\n\\n    // #################\\n    // ##    Write    ##\\n    // #################\\n\\n    function initDoc(Repo storage repo, address owner) public \\n    {\\n        require(repo.state == 0, \\\"already initiated\\\");\\n        repo.state = 1;\\n        repo.owner = owner;\\n    }\\n\\n    function setOwner(\\n        Repo storage repo, \\n        address acct,\\n        address caller\\n    ) public isOwner(repo, caller){\\n        repo.owner = acct;\\n    }\\n\\n    // ==== role ====\\n\\n    function setRoleAdmin(\\n        Repo storage repo,\\n        bytes32 role,\\n        address acct,\\n        address caller\\n    ) public isOwner(repo, caller) {\\n        repo.roles[role].admin = acct;\\n        repo.roles[role].isMember[acct] = true;\\n    }\\n\\n    function quitRoleAdmin(\\n        Repo storage repo,\\n        bytes32 role,\\n        address caller\\n    ) public isRoleAdmin(repo, role, caller) {\\n        delete repo.roles[role].admin;\\n        delete repo.roles[role].isMember[caller];\\n    }\\n    \\n    function grantRole(\\n        Repo storage repo,\\n        bytes32 role,\\n        address acct,\\n        address caller\\n    ) public isRoleAdmin(repo, role, caller) {\\n        repo.roles[role].isMember[acct] = true;\\n    }\\n\\n    function revokeRole(\\n        Repo storage repo,\\n        bytes32 role,\\n        address acct,\\n        address caller\\n    ) public isRoleAdmin(repo, role, caller) {\\n        delete repo.roles[role].isMember[acct];\\n    }\\n\\n    function renounceRole(\\n        Repo storage repo,\\n        bytes32 role,\\n        address caller\\n    ) public {\\n        delete repo.roles[role].isMember[caller];\\n    }\\n\\n    function abandonRole(\\n        Repo storage repo,\\n        bytes32 role,\\n        address caller\\n    ) public isOwner(repo, caller) {\\n        delete repo.roles[role];\\n    }\\n\\n    // ###############\\n    // ##   Read    ##\\n    // ###############\\n\\n    function getOwner(\\n        Repo storage repo\\n    ) public view returns (address) {\\n        return repo.owner;\\n    }\\n\\n    function getRoleAdmin(Repo storage repo, bytes32 role)\\n        public view returns (address)\\n    {\\n        return repo.roles[role].admin;\\n    }\\n\\n    function hasRole(\\n        Repo storage repo,\\n        bytes32 role,\\n        address acct\\n    ) public view returns (bool) {\\n        return repo.roles[role].isMember[acct];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[]", "ContractName": "RolesRepo", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}