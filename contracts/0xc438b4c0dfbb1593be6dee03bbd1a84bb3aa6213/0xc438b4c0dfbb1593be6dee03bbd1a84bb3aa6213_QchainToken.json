{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\n\r\n/// @title Abstract ERC20 token interface\r\ncontract AbstractToken {\r\n\r\n    function totalSupply() constant returns (uint256) {}\r\n    function balanceOf(address owner) constant returns (uint256 balance);\r\n    function transfer(address to, uint256 value) returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) returns (bool success);\r\n    function approve(address spender, uint256 value) returns (bool success);\r\n    function allowance(address owner, address spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Issuance(address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract Owned {\r\n\r\n    address public owner = msg.sender;\r\n    address public potentialOwner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPotentialOwner {\r\n        require(msg.sender == potentialOwner);\r\n        _;\r\n    }\r\n\r\n    event NewOwner(address old, address current);\r\n    event NewPotentialOwner(address old, address potential);\r\n\r\n    function setOwner(address _new)\r\n        public\r\n        onlyOwner\r\n    {\r\n        NewPotentialOwner(owner, _new);\r\n        potentialOwner = _new;\r\n    }\r\n\r\n    function confirmOwnership()\r\n        public\r\n        onlyPotentialOwner\r\n    {\r\n        NewOwner(owner, potentialOwner);\r\n        owner = potentialOwner;\r\n        potentialOwner = 0;\r\n    }\r\n}\r\n\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\ncontract StandardToken is AbstractToken, Owned {\r\n\r\n    /*\r\n     *  Data structures\r\n     */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /*\r\n     *  Read and write storage functions\r\n     */\r\n    /// @dev Transfers sender's tokens to a given address. Returns success.\r\n    /// @param _to Address of token receiver.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\r\n    /// @param _from Address from where tokens are withdrawn.\r\n    /// @param _to Address to where tokens are sent.\r\n    /// @param _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns number of tokens owned by given address.\r\n    /// @param _owner Address of token owner.\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @dev Sets approved amount of tokens for spender. Returns success.\r\n    /// @param _spender Address of allowed account.\r\n    /// @param _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Read storage functions\r\n     */\r\n    /// @dev Returns number of allowed tokens for given address.\r\n    /// @param _owner Address of token owner.\r\n    /// @param _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/// @title SafeMath contract - Math operations with safety checks.\r\n/// @author OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\ncontract SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        assert(b > 0);\r\n        uint c = a / b;\r\n        assert(a == b * c + a % b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint a, uint b) internal returns (uint) {\r\n        uint c = a ** b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard ERC20 with additional features.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract Token is StandardToken, SafeMath {\r\n\r\n    // Time of the contract creation\r\n    uint public creationTime;\r\n\r\n    function Token() {\r\n        creationTime = now;\r\n    }\r\n\r\n\r\n    /// @dev Owner can transfer out any accidentally sent ERC20 tokens\r\n    function transferERC20Token(address tokenAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint balance = AbstractToken(tokenAddress).balanceOf(this);\r\n        return AbstractToken(tokenAddress).transfer(owner, balance);\r\n    }\r\n\r\n    /// @dev Multiplies the given number by 10^(decimals)\r\n    function withDecimals(uint number, uint decimals)\r\n        internal\r\n        returns (uint)\r\n    {\r\n        return mul(number, pow(10, decimals));\r\n    }\r\n}\r\n\r\n\r\n/// @title Token contract - Implements Standard ERC20 Token for Qchain project.\r\n/// @author Zerion - <inbox@zerion.io>\r\ncontract QchainToken is Token {\r\n\r\n    /*\r\n     * Token meta data\r\n     */\r\n    string constant public name = \"Ethereum Qchain Token\";\r\n    string constant public symbol = \"EQC\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    // Address where Foundation tokens are allocated\r\n    address constant public foundationReserve = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    // Address where all tokens for the ICO stage are initially allocated\r\n    address constant public icoAllocation = 0x1111111111111111111111111111111111111111;\r\n\r\n    // Address where all tokens for the PreICO are initially allocated\r\n    address constant public preIcoAllocation = 0x2222222222222222222222222222222222222222;\r\n\r\n    // ICO start date. 10/24/2017 @ 9:00pm (UTC)\r\n    uint256 constant public startDate = 1508878800;\r\n    uint256 constant public duration = 42 days;\r\n\r\n    // Public key of the signer\r\n    address public signer;\r\n\r\n    // Foundation multisignature wallet, all Ether is collected there\r\n    address public multisig;\r\n\r\n    /// @dev Contract constructor, sets totalSupply\r\n    function QchainToken(address _signer, address _multisig)\r\n    {\r\n        // Overall, 375,000,000 EQC tokens are distributed\r\n        totalSupply = withDecimals(375000000, decimals);\r\n\r\n        // 11,500,000 tokens were sold during the PreICO\r\n        uint preIcoTokens = withDecimals(11500000, decimals);\r\n\r\n        // 40% of total supply is allocated for the Foundation\r\n        balances[foundationReserve] = div(mul(totalSupply, 40), 100);\r\n\r\n        // PreICO tokens are allocated to the special address and will be distributed manually\r\n        balances[preIcoAllocation] = preIcoTokens;\r\n\r\n        // The rest of the tokens is available for sale\r\n        balances[icoAllocation] = totalSupply - preIcoTokens - balanceOf(foundationReserve);\r\n\r\n        // Allow the owner to distribute tokens from the PreICO allocation address\r\n        allowed[preIcoAllocation][msg.sender] = balanceOf(preIcoAllocation);\r\n\r\n        // Allow the owner to withdraw tokens from the Foundation reserve\r\n        allowed[foundationReserve][msg.sender] = balanceOf(foundationReserve);\r\n\r\n        signer = _signer;\r\n        multisig = _multisig;\r\n    }\r\n\r\n    modifier icoIsActive {\r\n        require(now >= startDate && now < startDate + duration);\r\n        _;\r\n    }\r\n\r\n    modifier icoIsCompleted {\r\n        require(now >= startDate + duration);\r\n        _;\r\n    }\r\n\r\n    /// @dev Settle an investment and distribute tokens\r\n    function invest(address investor, uint256 tokenPrice, uint256 value, bytes32 hash, uint8 v, bytes32 r, bytes32 s)\r\n        public\r\n        icoIsActive\r\n        payable\r\n    {\r\n        // Check the hash\r\n        require(sha256(uint(investor) << 96 | tokenPrice) == hash);\r\n\r\n        // Check the signature\r\n        require(ecrecover(hash, v, r, s) == signer);\r\n\r\n        // Difference between the value argument and actual value should not be\r\n        // more than 0.005 ETH (gas commission)\r\n        require(sub(value, msg.value) <= withDecimals(5, 15));\r\n\r\n        // Number of tokens to distribute\r\n        uint256 tokensNumber = div(withDecimals(value, decimals), tokenPrice);\r\n\r\n        // Check if there is enough tokens left\r\n        require(balances[icoAllocation] >= tokensNumber);\r\n\r\n        // Send Ether to the multisig\r\n        require(multisig.send(msg.value));\r\n\r\n        // Allocate tokens to an investor\r\n        balances[icoAllocation] -= tokensNumber;\r\n        balances[investor] += tokensNumber;\r\n        Transfer(icoAllocation, investor, tokensNumber);\r\n    }\r\n\r\n    /// @dev Overrides Owned.sol function\r\n    function confirmOwnership()\r\n        public\r\n        onlyPotentialOwner\r\n    {\r\n        // Allow new owner to withdraw tokens from Foundation reserve and\r\n        // preICO allocation address\r\n        allowed[foundationReserve][potentialOwner] = balanceOf(foundationReserve);\r\n        allowed[preIcoAllocation][potentialOwner] = balanceOf(preIcoAllocation);\r\n\r\n        // Forbid old owner to withdraw tokens from Foundation reserve and\r\n        // preICO allocation address\r\n        allowed[foundationReserve][owner] = 0;\r\n        allowed[preIcoAllocation][owner] = 0;\r\n\r\n        // Change owner\r\n        super.confirmOwnership();\r\n    }\r\n\r\n    /// @dev Withdraws tokens from Foundation reserve\r\n    function withdrawFromReserve(uint amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        // Withdraw tokens from Foundation reserve to multisig address\r\n        require(transferFrom(foundationReserve, multisig, amount));\r\n    }\r\n\r\n    /// @dev Changes multisig address\r\n    function changeMultisig(address _multisig)\r\n        public\r\n        onlyOwner\r\n    {\r\n        multisig = _multisig;\r\n    }\r\n\r\n    /// @dev Burns the rest of the tokens after the crowdsale end\r\n    function burn()\r\n        public\r\n        onlyOwner\r\n        icoIsCompleted\r\n    {\r\n        totalSupply = sub(totalSupply, balanceOf(icoAllocation));\r\n        balances[icoAllocation] = 0;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"changeMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundationReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"},{\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_multisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"potential\",\"type\":\"address\"}],\"name\":\"NewPotentialOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"}]", "ContractName": "QchainToken", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009db07c8da33a2fcd6ef2e727a2ecc5198d9bc7c8000000000000000000000000e58ab0ee7e48016923e5aa0c45b592cf35f1e466", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7e9aa966c95576aa275f70e1023bf666239df40f8350d88dd60ee56a40b93334"}