{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/DividendDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/TokenUtils.sol\\\";\\nimport \\\"./interfaces/IDividendDistributor.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract DividendDistributor is IDividendDistributor {\\n    address _token;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 totalExcluded;\\n        uint256 totalRealised;\\n    }\\n\\n    IUniswapV2Router02 router;\\n    IERC20 public RewardToken;\\n\\n    address[] shareholders;\\n    mapping(address => uint256) public shareholderIndexes;\\n    mapping(address => uint256) public shareholderClaims;\\n    mapping(address => Share) public shares;\\n\\n    uint256 public totalShares;\\n    uint256 public totalDividends;\\n    uint256 public totalDistributed;\\n    uint256 public dividendsPerShare;\\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\\n\\n    uint256 public minPeriod = 30 minutes;\\n    uint256 public minDistribution = 1 * (10 ** 18);\\n\\n    uint256 currentIndex;\\n    bool initialized;\\n\\n    modifier onlyToken() {\\n        require(msg.sender == _token);\\n        _;\\n    }\\n\\n    constructor(address _router, address _reflectionToken, address token) {\\n        router = IUniswapV2Router02(_router);\\n        RewardToken = IERC20(_reflectionToken);\\n        _token = token;\\n        uint8 rewardTokenDecimals = TokenUtils.expectDecimals(token);\\n        uint256 fixedPoint = 10 ** rewardTokenDecimals;\\n        minDistribution = 1 * fixedPoint;\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external override onlyToken {\\n        minPeriod = _minPeriod;\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function getShareHolders() external view returns (address[] memory) {\\n        return shareholders;\\n    }\\n\\n    function setMinPeriod(uint256 _minPeriod) external override onlyToken {\\n        minPeriod = _minPeriod;\\n    }\\n\\n    function setMinDistribution(\\n        uint256 _minDistribution\\n    ) external override onlyToken {\\n        minDistribution = _minDistribution;\\n    }\\n\\n    function setShare(\\n        address shareholder,\\n        uint256 amount\\n    ) external override onlyToken {\\n        if (shares[shareholder].amount > 0) {\\n            distributeDividend(shareholder);\\n        }\\n\\n        if (amount > 0 && shares[shareholder].amount == 0) {\\n            addShareholder(shareholder);\\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\\n            removeShareholder(shareholder);\\n        }\\n\\n        totalShares = totalShares - shares[shareholder].amount + amount;\\n        shares[shareholder].amount = amount;\\n        shares[shareholder].totalExcluded = getCumulativeDividends(\\n            shares[shareholder].amount\\n        );\\n    }\\n\\n    function deposit() external payable override onlyToken {\\n        uint256 balanceBefore = RewardToken.balanceOf(address(this));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = address(RewardToken);\\n\\n        if (path[0] == path[1]) { //reward token is weth\\n            IWETH(path[0]).deposit{value: msg.value}();\\n        } else {\\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: msg.value\\n            }(0, path, address(this), block.timestamp);\\n        }\\n        uint256 amount = RewardToken.balanceOf(address(this)) - balanceBefore;\\n        totalDividends = totalDividends + amount;\\n        if (totalShares > 0) {\\n            dividendsPerShare =\\n                dividendsPerShare +\\n                (dividendsPerShareAccuracyFactor * amount) /\\n                totalShares;\\n        }\\n    }\\n\\n    function process(uint256 gas) external override onlyToken {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if (shareholderCount == 0) {\\n            return;\\n        }\\n\\n        uint256 iterations = 0;\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentIndex >= shareholderCount) {\\n                currentIndex = 0;\\n            }\\n\\n            if (shouldDistribute(shareholders[currentIndex])) {\\n                distributeDividend(shareholders[currentIndex]);\\n            }\\n\\n            gasUsed = gasUsed + gasLeft - gasleft();\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n\\n    function shouldDistribute(\\n        address shareholder\\n    ) internal view returns (bool) {\\n        return\\n            shareholderClaims[shareholder] + minPeriod <= block.timestamp &&\\n            getUnpaidEarnings(shareholder) >= minDistribution;\\n    }\\n\\n    function distributeDividend(address shareholder) internal {\\n        if (shares[shareholder].amount == 0) {\\n            return;\\n        }\\n\\n        uint256 amount = getUnpaidEarnings(shareholder);\\n        if (amount > 0) {\\n            totalDistributed = totalDistributed + amount;\\n            shareholderClaims[shareholder] = block.timestamp;\\n            shares[shareholder].totalRealised =\\n                shares[shareholder].totalRealised +\\n                amount;\\n            shares[shareholder].totalExcluded = getCumulativeDividends(\\n                shares[shareholder].amount\\n            );\\n            RewardToken.transfer(shareholder, amount);\\n        }\\n    }\\n\\n    function rewardTokenAddress() external view returns(address) {\\n        return address(RewardToken);\\n    }\\n\\n    function claimDividend() external {\\n        require(shouldDistribute(msg.sender), \\\"Too soon. Need to wait!\\\");\\n        distributeDividend(msg.sender);\\n    }\\n\\n    function getUnpaidEarnings(\\n        address shareholder\\n    ) public view returns (uint256) {\\n        if (shares[shareholder].amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(\\n            shares[shareholder].amount\\n        );\\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\\n            return 0;\\n        }\\n\\n        return shareholderTotalDividends - shareholderTotalExcluded;\\n    }\\n\\n    function getCumulativeDividends(\\n        uint256 share\\n    ) internal view returns (uint256) {\\n        return (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\\n    }\\n\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\\n            shareholders.length - 1\\n        ];\\n        shareholderIndexes[\\n            shareholders[shareholders.length - 1]\\n        ] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDividendDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IDividendDistributor {\\n    function setDistributionCriteria(\\n        uint256 _minPeriod,\\n        uint256 _minDistribution\\n    ) external;\\n\\n    function setShare(address shareholder, uint256 amount) external;\\n\\n    function deposit() external payable;\\n\\n    function process(uint256 gas) external;\\n\\n    function setMinPeriod(uint256 _minPeriod) external;\\n\\n    function setMinDistribution(uint256 _minDistribution) external;\\n\\n    function rewardTokenAddress() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFACTORY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IFACTORY {\\n    function proofRevenueAddress() external view returns (address);\\n\\n    function proofRewardPoolAddress() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IProofFactoryTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/ProofFactoryFees.sol\\\";\\n\\ninterface IProofFactoryTokenCutter is IERC20, IERC20Metadata {\\n    struct BaseData {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        uint256 whitelistPeriod;\\n        address owner;\\n        address devWallet;\\n        address reflectionToken;\\n        address routerAddress;\\n        address initialProofAdmin;\\n        address[] whitelists;\\n        address[] nftWhitelist;\\n    }\\n\\n    struct WhitelistAdd_ {\\n        address [] whitelists;\\n    }\\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofFactoryFees.allFees memory fees\\n    ) external;\\n\\n    function pair() external view returns (address);\\n\\n    function swapTradingStatus() external;\\n\\n    function updateProofFactory(address _newFactory) external;\\n\\n    function addMoreToWhitelist(\\n        WhitelistAdd_ memory _WhitelistAdd\\n    ) external;\\n\\n    function updateWhitelistPeriod(\\n        uint256 _whitelistPeriod\\n    ) external;\\n\\n    function changeIsTxLimitExempt(\\n        address holder,\\n        bool exempt\\n    ) external;\\n\\n    event DistributorFail();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"interface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/ProofFactoryFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nlibrary ProofFactoryFees {\\n    struct allFees {\\n        uint256 reflectionFee;\\n        uint256 reflectionFeeOnSell;\\n        uint256 lpFee;\\n        uint256 lpFeeOnSell;\\n        uint256 devFee;\\n        uint256 devFeeOnSell;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TokenUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\n/// @title  TokenUtils\\nlibrary TokenUtils  {\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        require (success, \\\"invalid\\\");\\n\\n        return abi.decode(data, (uint8));\\n    }   \\n}\"\r\n    },\r\n    \"contracts/tokenCutters/ProofFactoryTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\nimport \\\"../libraries/Context.sol\\\";\\nimport \\\"../libraries/ProofFactoryFees.sol\\\";\\nimport \\\"../interfaces/IFACTORY.sol\\\";\\nimport \\\"../interfaces/IDividendDistributor.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../DividendDistributor.sol\\\";\\nimport \\\"../interfaces/IProofFactoryTokenCutter.sol\\\";\\n\\ncontract ProofFactoryTokenCutter is Context, IProofFactoryTokenCutter {\\n\\n    //This token was created with PROOF, and audited by Solidity Finance \u2014 https://proofplatform.io/projects\\n    IDividendDistributor public dividendDistributor;\\n    uint256 distributorGas = 500000;\\n\\n    mapping(address => bool) public userWhitelist;\\n    address[] public nftWhitelist;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n    uint256 public whitelistEndTime;\\n    uint256 public whitelistPeriod;\\n    bool public whitelistMode = true;\\n    string private _name;\\n    string private _symbol;\\n\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\n    address public proofAdmin;\\n\\n    bool public restrictWhales = true;\\n\\n    mapping(address => bool) public isFeeExempt;\\n    mapping(address => bool) public isTxLimitExempt;\\n    mapping(address => bool) public isDividendExempt;\\n\\n    uint256 public launchedAt;\\n    uint256 public revenueFee = 2;\\n\\n    uint256 public reflectionFee;\\n    uint256 public lpFee;\\n    uint256 public devFee;\\n\\n    uint256 public reflectionFeeOnSell;\\n    uint256 public lpFeeOnSell;\\n    uint256 public devFeeOnSell;\\n\\n    uint256 public totalFee;\\n    uint256 public totalFeeIfSelling;\\n\\n    IUniswapV2Router02 public router;\\n    address public pair;\\n    address public factory;\\n    address public tokenOwner;\\n    address payable public devWallet;\\n\\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n    bool public tradingStatus = true;\\n\\n    uint256 public _maxTxAmount;\\n    uint256 public _walletMax;\\n    uint256 public swapThreshold;\\n\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    modifier onlyProofAdmin() {\\n        require(\\n            proofAdmin == _msgSender(),\\n            \\\"not the proofAdmin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(tokenOwner == _msgSender(), \\\"not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(factory == _msgSender(), \\\"not the factory\\\");\\n        _;\\n    }\\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofFactoryFees.allFees memory fees\\n    ) external onlyFactory {\\n        _name = _baseData.tokenName;\\n        _symbol = _baseData.tokenSymbol;\\n        _totalSupply += _baseData.initialSupply;\\n\\n        //Initial supply\\n        require(_baseData.percentToLP >= 70, \\\"low lp\\\");\\n        uint256 forLP = (_baseData.initialSupply * _baseData.percentToLP) / 100; //95%\\n        uint256 forOwner = _baseData.initialSupply - forLP; //5%\\n\\n        _balances[msg.sender] += forLP;\\n        _balances[_baseData.owner] += forOwner;\\n\\n        emit Transfer(address(0), msg.sender, forLP);\\n        emit Transfer(address(0), _baseData.owner, forOwner);\\n\\n        _maxTxAmount = (_baseData.initialSupply * 5) / 1000;\\n        _walletMax = (_baseData.initialSupply * 1) / 100;\\n        swapThreshold = (_baseData.initialSupply * 5) / 4000;\\n\\n        router = IUniswapV2Router02(_baseData.routerAddress);\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\n\\n        dividendDistributor = new DividendDistributor(\\n            _baseData.routerAddress,\\n            _baseData.reflectionToken,\\n            address(this)\\n        );\\n\\n        userWhitelist[address(this)] = true;\\n        userWhitelist[factory] = true;\\n        userWhitelist[pair] = true;\\n        userWhitelist[_baseData.owner] = true;\\n        userWhitelist[_baseData.initialProofAdmin] = true;\\n        userWhitelist[_baseData.routerAddress] = true;\\n        _addWhitelist(_baseData.whitelists);\\n\\n        nftWhitelist = _baseData.nftWhitelist;\\n\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[factory] = true;\\n\\n        isTxLimitExempt[address(this)] = true;\\n        isTxLimitExempt[_baseData.owner] = true;\\n        isTxLimitExempt[pair] = true;\\n        isTxLimitExempt[factory] = true;\\n        isTxLimitExempt[DEAD] = true;\\n        isTxLimitExempt[ZERO] = true;\\n\\n        isDividendExempt[pair] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[DEAD] = true;\\n        isDividendExempt[ZERO] = true;\\n\\n        whitelistPeriod = _baseData.whitelistPeriod;\\n\\n        reflectionFee = fees.reflectionFee;\\n        lpFee = fees.lpFee;\\n        devFee = fees.devFee;\\n\\n        reflectionFeeOnSell = fees.reflectionFeeOnSell;\\n        lpFeeOnSell = fees.lpFeeOnSell;\\n        devFeeOnSell = fees.devFeeOnSell;\\n\\n        _calcTotalFee();\\n\\n        tokenOwner = _baseData.owner;\\n        devWallet = payable(_baseData.devWallet);\\n        proofAdmin = _baseData.initialProofAdmin;\\n    }\\n\\n    //proofAdmin functions\\n    function updateProofAdmin(\\n        address newAdmin\\n    ) external virtual onlyProofAdmin {\\n        proofAdmin = newAdmin;\\n        userWhitelist[newAdmin] = true;\\n    }\\n\\n    function updateWhitelistPeriod(\\n        uint256 _whitelistPeriod\\n    ) external onlyProofAdmin {\\n        whitelistPeriod = _whitelistPeriod;\\n        whitelistEndTime = launchedAt + (60 * _whitelistPeriod);\\n        whitelistMode = true;\\n    }\\n\\n    //Factory functions\\n    function updateProofFactory(address newFactory) external onlyFactory {\\n        userWhitelist[newFactory] = true;\\n        isTxLimitExempt[newFactory] = true;\\n        isFeeExempt[newFactory] = true;\\t\\n        factory = newFactory;\\n    }\\n\\n    function swapTradingStatus() external onlyFactory {\\n        tradingStatus = !tradingStatus;\\n    }\\n\\n    function setLaunchedAt() external onlyFactory {\\n        require(launchedAt == 0, \\\"already launched\\\");\\n        launchedAt = block.timestamp;\\n        whitelistEndTime = block.timestamp + (60 * whitelistPeriod);\\n        whitelistMode = true;\\n    }\\n\\n    function cancelToken() external onlyFactory {\\n        isFeeExempt[address(router)] = true;\\n        isTxLimitExempt[address(router)] = true;\\n        isTxLimitExempt[tokenOwner] = true;\\n        tradingStatus = true;\\n        restrictWhales = false;\\n        swapAndLiquifyEnabled = false;\\n    }\\n\\n    //Owner functions\\n    function changeFees(\\n        uint256 initialReflectionFee,\\n        uint256 initialReflectionFeeOnSell,\\n        uint256 initialLpFee,\\n        uint256 initialLpFeeOnSell,\\n        uint256 initialDevFee,\\n        uint256 initialDevFeeOnSell\\n    ) external onlyOwner {\\n        reflectionFee = initialReflectionFee;\\n        lpFee = initialLpFee;\\n        devFee = initialDevFee;\\n\\n        reflectionFeeOnSell = initialReflectionFeeOnSell;\\n        lpFeeOnSell = initialLpFeeOnSell;\\n        devFeeOnSell = initialDevFeeOnSell;\\n\\n        _calcTotalFee();\\n    }\\n\\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\\n        _checkLimit(newLimit);\\n        _maxTxAmount = newLimit;\\n    }\\n\\n    function changeWalletLimit(uint256 newLimit) external onlyOwner {\\n        _checkLimit(newLimit);\\n        _walletMax = newLimit;\\n    }\\n\\n    function changeRestrictWhales(bool newValue) external onlyOwner {\\n        restrictWhales = newValue;\\n    }\\n\\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function changeIsTxLimitExempt(\\n        address holder,\\n        bool exempt\\n    ) external onlyOwner {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function changeDistributorGas(uint256 _distributorGas) external onlyOwner {\\n        distributorGas = _distributorGas;\\n    }\\n\\n    function changeMinDistSettings(\\n        uint256 _minPeriod,\\n        uint256 _minDistLimit\\n    ) external onlyOwner {\\n        dividendDistributor.setMinPeriod(_minPeriod);\\n        dividendDistributor.setMinDistribution(_minDistLimit);\\n    }\\n\\n    function reduceProofFee() external onlyOwner {\\n        require(revenueFee == 2, \\\"!already reduced\\\");\\n        _checkTimestamp72();\\n\\n        revenueFee = 1;\\n        _calcTotalFee();\\n    }\\n\\n    function adjustProofFee(uint256 _proofFee) external onlyProofAdmin {\\t\\n        require(launchedAt != 0, \\\"!launched\\\");\\t\\n        if (block.timestamp >= launchedAt + 72 hours) {\\t\\n            require(_proofFee <= 1);\\t\\n            revenueFee = _proofFee;\\t\\n            totalFee = devFee + lpFee + reflectionFee + revenueFee;\\t\\n            totalFeeIfSelling =\\t\\n                devFeeOnSell +\\t\\n                lpFeeOnSell +\\t\\n                reflectionFeeOnSell +\\t\\n                revenueFee;\\t\\n        } else {\\t\\n            require(_proofFee <= 2);\\t\\n            revenueFee = _proofFee;\\t\\n            totalFee = devFee + lpFee + reflectionFee + revenueFee;\\t\\n            totalFeeIfSelling =\\t\\n                devFeeOnSell +\\t\\n                lpFeeOnSell +\\t\\n                reflectionFeeOnSell +\\t\\n                revenueFee;\\t\\n        }\\t\\n    }\\n\\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\\n        devWallet = payable(newDevWallet);\\n    }\\n\\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\\n        tokenOwner = newOwnerWallet;\\n    }\\n\\n    function changeSwapBackSettings(\\n        bool enableSwapBack,\\n        uint256 newSwapBackLimit\\n    ) external onlyOwner {\\n        swapAndLiquifyEnabled = enableSwapBack;\\n        swapThreshold = newSwapBackLimit;\\n    }\\n\\n    function setDistributionCriteria(\\n        uint256 newMinPeriod_,\\n        uint256 newMinDistribution_\\n    ) external onlyOwner {\\n        dividendDistributor.setDistributionCriteria(\\n            newMinPeriod_,\\n            newMinDistribution_\\n        );\\n    }\\n\\n    function getCirculatingSupply() external view returns (uint256) {\\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\\n    }\\n\\n    function rewardTokenAddress() external view returns(address) {\\t\\n        return dividendDistributor.rewardTokenAddress();\\t\\n    }\\n\\n    function isWhitelisted(address user) public view returns (bool) {\\n        return userWhitelist[user];\\n    }\\n\\n    function holdsSupportedNFT(address user) public view returns (bool) {\\n        for (uint256 i = 0; i < nftWhitelist.length; i++) {\\n            if (IERC721(nftWhitelist[i]).balanceOf(user) > 0) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view virtual override returns (uint8) {\\n        return 9;\\n    }\\n\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"Decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(tradingStatus, \\\"!trading\\\");\\n        \\n        if(whitelistMode) {\\n            if (block.timestamp >= whitelistEndTime ) {\\n                whitelistMode = false;\\n            } else {\\n                if (sender == pair) { //buy\\n                    require(isWhitelisted(recipient) || holdsSupportedNFT(recipient), \\\"Not whitelisted\\\");\\n                } else if (recipient == pair) { //sell\\n                    require(isWhitelisted(sender) || holdsSupportedNFT(sender), \\\"Not whitelisted\\\");\\n                } else { //transfer\\n                    require((isWhitelisted(sender) || holdsSupportedNFT(sender)) && (isWhitelisted(recipient) || holdsSupportedNFT(recipient)), \\\"Not Whitelisted\\\");\\n                }\\n            }\\n        }\\n\\n        if (inSwapAndLiquify) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        if (recipient == pair && restrictWhales) {\\t\\n            require(\\t\\n                amount <= _maxTxAmount ||\\t\\n                    (isTxLimitExempt[sender] && isTxLimitExempt[recipient]),\\t\\n                \\\"Max TX\\\"\\t\\n            );\\t\\n        }\\n\\n        if (!isTxLimitExempt[recipient] && restrictWhales) {\\n            require(_balances[recipient] + amount <= _walletMax, \\\"wallet\\\");\\n        }\\n\\n        if (\\n            sender != pair &&\\n            !inSwapAndLiquify &&\\n            swapAndLiquifyEnabled &&\\n            _balances[address(this)] >= swapThreshold\\n        ) {\\n            swapBack();\\n        }\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        uint256 finalAmount = amount;\\n\\n        if (sender == pair || recipient == pair) {\\n            finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient]\\n                ? takeFee(sender, recipient, amount)\\n                : amount;\\n        }\\n\\n        _balances[recipient] = _balances[recipient] + finalAmount;\\n\\n        // Dividend tracker\\n        if (!isDividendExempt[sender]) {\\t\\n            try dividendDistributor.setShare(sender, _balances[sender]) {} catch {\\t\\n                emit DistributorFail();\\t\\n            }\\t\\n        }\\t\\n        if (!isDividendExempt[recipient]) {\\t\\n            try dividendDistributor.setShare(recipient, _balances[recipient]) {} catch {\\t\\n                    emit DistributorFail();\\t\\n                }\\t\\n        }\\t\\n        try dividendDistributor.process(distributorGas) {} catch {\\t\\n            emit DistributorFail();\\t\\n        }\\n\\n        emit Transfer(sender, recipient, finalAmount);\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"Approve from the zero address\\\");\\n        require(spender != address(0), \\\"Approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"Insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 feeApplicable = pair == recipient\\n            ? totalFeeIfSelling\\n            : totalFee;\\n        uint256 feeAmount = (amount * feeApplicable) / 100;\\n\\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\\n        emit Transfer(sender, address(this), feeAmount);\\n\\n        return amount - feeAmount;\\n    }\\n\\n    function swapBack() internal lockTheSwap {\\n        uint256 tokensToLiquify = _balances[address(this)];\\n        uint256 amountToLiquify = (tokensToLiquify * lpFee) / totalFee / 2;\\n        uint256 amountToSwap = tokensToLiquify - amountToLiquify;\\n\\n        if (amountToSwap == 0) return;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n        uint256 amountETH = address(this).balance;\\n        uint256 amountEthLiquidity = (amountETH * lpFee) / totalFee / 2;\\n\\n        if (amountToLiquify > 0) {\\n            router.addLiquidityETH{value: amountEthLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                0x000000000000000000000000000000000000dEaD,\\n                block.timestamp\\n            );\\n        }\\n\\n        uint256 amountETHafterLP = address(this).balance;\\n        uint256 devBalance = (amountETHafterLP * devFee) / totalFee;\\n        uint256 revenueBalance = (amountETHafterLP * revenueFee) / totalFee;\\n        uint256 amountEthReflection = amountETHafterLP -\\n            devBalance -\\n            revenueBalance;\\n\\n        if (amountETHafterLP > 0) {\\n            if (revenueBalance > 0) {\\n                uint256 revenueSplit = revenueBalance / 2;\\n                (bool sent, ) = payable(IFACTORY(factory).proofRevenueAddress()).call{value: revenueSplit}(\\\"\\\");\\n                require(sent);\\n                (bool sent1, ) = payable(IFACTORY(factory).proofRewardPoolAddress()).call{value: revenueSplit}(\\\"\\\");\\n                require(sent1);\\n            }\\n            if (devBalance > 0) {\\n                (bool sent, ) = devWallet.call{value: devBalance}(\\\"\\\");\\n                require(sent);\\n            }\\n        }\\n\\n        try dividendDistributor.deposit{value: amountEthReflection}() {} catch {\\n            emit DistributorFail();\\n        }\\n    }\\n\\n    function _checkLimit(uint256 _newLimit) internal view {\\t\\n        require(launchedAt != 0, \\\"!launched\\\");\\t\\n        require(_newLimit >= (_totalSupply * 5) / 1000, \\\"Min 0.5%\\\");\\t\\n        require(_newLimit <= (_totalSupply * 3) / 100, \\\"Max 3%\\\");\\t\\n    }\\n\\n    function _checkTimestamp72() internal view {\\t\\n        require(launchedAt != 0, \\\"!launched\\\");\\t\\n        require(block.timestamp >= launchedAt + 72 hours, \\\"too soon\\\");\\t\\n    }\\n\\n    function _calcTotalFee() internal {\\n        totalFee = devFee + lpFee + reflectionFee + revenueFee;\\n        totalFeeIfSelling =\\n            devFeeOnSell +\\n            lpFeeOnSell +\\n            reflectionFeeOnSell +\\n            revenueFee;\\n        require(totalFee <= 12, \\\"high fee\\\");\\n        require(totalFeeIfSelling <= 17, \\\"high fee\\\");\\n    }\\n\\n    function _addWhitelist(address[] memory _whitelists) internal {\\n        uint256 length = _whitelists.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            userWhitelist[_whitelists[i]] = true;\\n        }\\n    }\\n\\n    function addMoreToWhitelist(WhitelistAdd_ memory _WhitelistAdd) external onlyFactory {\\n        _addWhitelist(_WhitelistAdd.whitelists);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributorFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"internalType\":\"struct IProofFactoryTokenCutter.WhitelistAdd_\",\"name\":\"_WhitelistAdd\",\"type\":\"tuple\"}],\"name\":\"addMoreToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proofFee\",\"type\":\"uint256\"}],\"name\":\"adjustProofFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGas\",\"type\":\"uint256\"}],\"name\":\"changeDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistLimit\",\"type\":\"uint256\"}],\"name\":\"changeMinDistSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"changeRestrictWhales\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendDistributor\",\"outputs\":[{\"internalType\":\"contract IDividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"holdsSupportedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reduceProofFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFeeOnSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictWhales\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitelistPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reflectionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialProofAdmin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"nftWhitelist\",\"type\":\"address[]\"}],\"internalType\":\"struct IProofFactoryTokenCutter.BaseData\",\"name\":\"_baseData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflectionFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeOnSell\",\"type\":\"uint256\"}],\"internalType\":\"struct ProofFactoryFees.allFees\",\"name\":\"fees\",\"type\":\"tuple\"}],\"name\":\"setBasicData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinDistribution_\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLaunchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeIfSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateProofAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"updateProofFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whitelistPeriod\",\"type\":\"uint256\"}],\"name\":\"updateWhitelistPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProofFactoryTokenCutter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}