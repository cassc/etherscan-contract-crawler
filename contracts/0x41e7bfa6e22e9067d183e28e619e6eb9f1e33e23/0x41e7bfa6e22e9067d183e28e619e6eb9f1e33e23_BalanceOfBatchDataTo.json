{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BalanceOfBatchDataToString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface ERC1155 {\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n}\\n\\ncontract BalanceOfBatchDataToString {\\n\\n    function simpleBatchBalances(address erc1155ContractAddress, address account, uint256 idRangeStart, uint256 idRangeEnd) external view returns (string memory) {\\n        require(idRangeStart <= idRangeEnd, \\\"Invalid range\\\");\\n        \\n        address[] memory accountsArray = new address[](idRangeEnd - idRangeStart + 1);\\n        uint256[] memory idsArray = new uint256[](idRangeEnd - idRangeStart + 1);\\n\\n        for (uint256 i = 0; i <= idRangeEnd - idRangeStart; i++) {\\n            accountsArray[i] = account;\\n            idsArray[i] = (idRangeStart + i);\\n        }\\n\\n        return getBalanceOfBatchAsSingleString(erc1155ContractAddress, accountsArray, idsArray);\\n    }\\n\\n    function getBalanceOfBatchAsSingleString(address erc1155ContractAddress, address[] memory accounts, uint256[] memory ids) internal view returns (string memory) {\\n        ERC1155 erc1155Contract = ERC1155(erc1155ContractAddress);\\n        uint256[] memory balances = erc1155Contract.balanceOfBatch(accounts, ids);\\n\\n        string memory concatenatedBalances;\\n\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            if(i == balances.length - 1){\\n                concatenatedBalances = string(abi.encodePacked(concatenatedBalances, uintToString(balances[i])));\\n            } else{\\n                concatenatedBalances = string(abi.encodePacked(concatenatedBalances, uintToString(balances[i]), \\\",\\\"));\\n            }\\n        }\\n\\n        return concatenatedBalances;\\n    }\\n\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155ContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idRangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idRangeEnd\",\"type\":\"uint256\"}],\"name\":\"simpleBatchBalances\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalanceOfBatchDataToString", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}