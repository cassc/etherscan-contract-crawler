{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\nThis is the governance token deployed for Inter DAO, a very simple and standard ERC20 token implementation. We have utilized mint and burn functions, which can only be called by the DAO address. In the very early stages of the project (before the public sale), the contract creator acts as the DAO, and later the authority will be transferred to the Inter DAO contract address. The DAO can withdraw native tokens (such as ETH) from the contract. The DAO can also withdraw any ERC20 tokens to avoid retaining large balances of unwanted tokens.\r\n\r\nCode Audit: The code has been audited, for detailed information please refer to intereum.eth. Testing: We have conducted extensive testing on the test network and have repeatedly tested the contract code on the test network before deploying to the main network to ensure that the contract works as expected, especially the functions involving financial operations such as mint, burn, withdrawEther, and withdrawERC20Token.\r\n\r\n\u3053\u308c\u306fInter DAO\u306e\u305f\u3081\u306b\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u305f\u30ac\u30d0\u30ca\u30f3\u30b9\u30c8\u30fc\u30af\u30f3\u3067\u3001\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u6a19\u6e96\u7684\u306aERC20\u30c8\u30fc\u30af\u30f3\u306e\u5b9f\u88c5\u3067\u3059\u3002\u79c1\u305f\u3061\u306fmint\u304a\u3088\u3073burn\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u3089\u306fDAO\u30a2\u30c9\u30ec\u30b9\u306b\u3088\u3063\u3066\u306e\u307f\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u975e\u5e38\u306b\u521d\u671f\u6bb5\u968e\uff08\u516c\u958b\u8ca9\u58f2\u524d\uff09\u3067\u306f\u3001\u5951\u7d04\u306e\u4f5c\u6210\u8005\u304cDAO\u3068\u3057\u3066\u6a5f\u80fd\u3057\u3001\u5f8c\u306b\u6a29\u9650\u306fInter DAO\u5951\u7d04\u30a2\u30c9\u30ec\u30b9\u306b\u79fb\u8b72\u3055\u308c\u307e\u3059\u3002DAO\u306f\u5951\u7d04\u304b\u3089\u30cd\u30a4\u30c6\u30a3\u30d6\u30c8\u30fc\u30af\u30f3\uff08ETH\u306a\u3069\uff09\u3092\u5f15\u304d\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002DAO\u306f\u4efb\u610f\u306eERC20\u30c8\u30fc\u30af\u30f3\u3082\u5f15\u304d\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u4e0d\u8981\u306a\u30c8\u30fc\u30af\u30f3\u306e\u5927\u91cf\u306e\u6b8b\u9ad8\u3092\u4fdd\u6301\u3059\u308b\u3053\u3068\u3092\u907f\u3051\u308b\u305f\u3081\u3067\u3059\u3002\r\n\r\n\u30b3\u30fc\u30c9\u76e3\u67fb\uff1a\u30b3\u30fc\u30c9\u306f\u76e3\u67fb\u3055\u308c\u3066\u304a\u308a\u3001\u8a73\u7d30\u60c5\u5831\u306fintereum.eth\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c6\u30b9\u30c8\uff1a\u79c1\u305f\u3061\u306f\u30c6\u30b9\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u5e83\u7bc4\u56f2\u306b\u308f\u305f\u308b\u30c6\u30b9\u30c8\u3092\u884c\u3044\u3001\u7279\u306bmint\u3001burn\u3001withdrawEther\u3001withdrawERC20Token\u306a\u3069\u306e\u91d1\u878d\u64cd\u4f5c\u3092\u4f34\u3046\u6a5f\u80fd\u304c\u671f\u5f85\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u30e1\u30a4\u30f3\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u524d\u306b\u30c6\u30b9\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u4f55\u5ea6\u3082\u5951\u7d04\u30b3\u30fc\u30c9\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u3002\r\n**/\r\n\r\npragma solidity ^0.8.0;\r\n//https://remix.ethereum.org/#lang=en&optimize=true&runs=200&evmVersion=shanghai&version=soljson-v0.8.20+commit.a1b79de6.js\r\n\r\n// ERC20 interface definition\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// InterToken contract implementing ERC20\r\ncontract InterToken is IERC20 {\r\n    string public constant name = \"InterToken\"; // Token name\r\n    string public constant symbol = \"INT\"; // Token symbol\r\n    uint8 public constant decimals = 18; // Token decimal places\r\n\r\n    mapping(address => uint256) balances; // Balance mapping\r\n    mapping(address => mapping (address => uint256)) allowed; // Allowance mapping\r\n    uint256 totalSupply_ = 2100000000 * (10 ** uint256(decimals)); // Total supply\r\n    address public daoAddress; // DAO address\r\n\r\n    // Contract constructor\r\n    constructor() {\r\n        daoAddress = msg.sender; // Set DAO address to contract creator\r\n        balances[msg.sender] = totalSupply_; // Assign total supply to creator\r\n    }\r\n\r\n    // Return total supply of tokens\r\n    function totalSupply() public override view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    // Return balance of a given account\r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // Transfer tokens to a receiver\r\n    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender] - numTokens;\r\n        balances[receiver] = balances[receiver] + numTokens;\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    // Approve delegate to spend tokens\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    // Return allowance for a delegate\r\n    function allowance(address tokenOwner, address delegate) public override view returns (uint) {\r\n        return allowed[tokenOwner][delegate];\r\n    }\r\n\r\n    // Transfer tokens from owner to buyer\r\n    function transferFrom(address tokenOwner, address buyer, uint256 numTokens) public override returns (bool) {\r\n        require(numTokens <= balances[tokenOwner]);\r\n        require(numTokens <= allowed[tokenOwner][msg.sender]);\r\n\r\n        balances[tokenOwner] = balances[tokenOwner] - numTokens;\r\n        allowed[tokenOwner][msg.sender] = allowed[tokenOwner][msg.sender] - numTokens;\r\n        balances[buyer] = balances[buyer] + numTokens;\r\n        emit Transfer(tokenOwner, buyer, numTokens);\r\n        return true;\r\n    }\r\n\r\n    // Modifier to allow only DAO actions\r\n    modifier onlyDAO {\r\n        require(msg.sender == daoAddress);\r\n        _;\r\n    }\r\n\r\n    // Mint new tokens to an address\r\n    function mint(address to, uint256 amount) public onlyDAO {\r\n        totalSupply_ += amount;\r\n        balances[to] += amount;\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    // Burn tokens from an address\r\n    function burn(address from, uint256 amount) public onlyDAO {\r\n        require(amount <= balances[from]);\r\n        totalSupply_ -= amount;\r\n        balances[from] -= amount;\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    // Set a new DAO address\r\n    function setDAOAddress(address dao_) public onlyDAO {\r\n        daoAddress = dao_;\r\n    }\r\n\r\n    // Withdraw Ether from the contract (added for DAO)\r\n    function withdrawEther(uint256 amount) public onlyDAO {\r\n        require(amount <= address(this).balance, \"Insufficient balance\");\r\n        payable(daoAddress).transfer(amount);\r\n    }\r\n\r\n    // Withdraw any ERC20 token from the contract (added for DAO)\r\n    function withdrawERC20Token(address tokenAddress, uint256 amount) public onlyDAO {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= amount, \"Insufficient token balance\");\r\n        token.transfer(daoAddress, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao_\",\"type\":\"address\"}],\"name\":\"setDAOAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InterToken", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f5a6d254483a08e5f4ec1b917ad0e0b14d83fe7f8b310af5f4222d7fb4ac0831"}