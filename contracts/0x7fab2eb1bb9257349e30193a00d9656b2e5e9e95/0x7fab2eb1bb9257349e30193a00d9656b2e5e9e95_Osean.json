{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OseanV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OSEAN DAO token contract for ETHEREUM - https://osean.online\\n// Official telegram: https://t.me/oseadao \\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./supertoken/Base.sol\\\";\\nimport \\\"./interfaces/Uniswap.sol\\\";\\n\\ncontract Osean is ERC20, Base {\\n    struct UpdateLimitParams {\\n        bool isMint;\\n        uint32 siblingChainSlug;\\n        uint256 maxLimit;\\n        uint256 ratePerSecond;\\n    }\\n\\n    bytes32 constant RESCUE_ROLE = keccak256(\\\"RESCUE_ROLE\\\");\\n    bytes32 constant LIMIT_UPDATER_ROLE = keccak256(\\\"LIMIT_UPDATER_ROLE\\\");\\n\\n    // bridge contract address which provides AMB support\\n    IMessageBridge public bridge__;\\n\\n    // siblingChainSlug => mintLimitParams\\n    mapping(uint32 => LimitParams) _receivingLimitParams;\\n\\n    // siblingChainSlug => burnLimitParams\\n    mapping(uint32 => LimitParams) _sendingLimitParams;\\n\\n    // siblingChainSlug => receiver => identifier => amount\\n    mapping(uint32 => mapping(address => mapping(bytes32 => uint256)))\\n        public pendingMints;\\n\\n    // siblingChainSlug => amount\\n    mapping(uint32 => uint256) public siblingPendingMints;\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////////////// ERRORS //////////////////////////\\n    ////////////////////////////////////////////////////////\\n\\n    error SiblingNotSupported();\\n    error MessageIdMisMatched();\\n    error ZeroAmount();\\n    error NotMessageBridge();\\n    error InvalidReceiver();\\n    error InvalidSiblingChainSlug();\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////////////// EVENTS //////////////////////////\\n    ////////////////////////////////////////////////////////\\n\\n    // emitted when limit params are updated\\n    event LimitParamsUpdated(UpdateLimitParams[] updates);\\n    // emitted when message bridge is updated\\n    event MessageBridgeUpdated(address newBridge);\\n    // emitted at source when tokens are bridged to a sibling chain\\n    event BridgeTokens(\\n        uint32 siblingChainSlug,\\n        address withdrawer,\\n        address receiver,\\n        uint256 bridgedAmount,\\n        bytes32 identifier\\n    );\\n    // emitted when pending tokens are minted to the receiver\\n    event PendingTokensBridged(\\n        uint32 siblingChainSlug,\\n        address receiver,\\n        uint256 mintAmount,\\n        uint256 pendingAmount,\\n        bytes32 identifier\\n    );\\n    // emitted when transfer reaches limit and token mint is added to pending queue\\n    event TokensPending(\\n        uint32 siblingChainSlug,\\n        address receiver,\\n        uint256 pendingAmount,\\n        uint256 totalPendingAmount,\\n        bytes32 identifier\\n    );\\n    // emitted when pending tokens are minted as limits are replenished\\n    event TokensBridged(\\n        uint32 siblingChainSlug,\\n        address receiver,\\n        uint256 mintAmount,\\n        uint256 totalAmount,\\n        bytes32 identifier\\n    );\\n\\n    // Mapping to exclude some contracts from fees. Transfers are excluded from fees if address in this mapping is recipient or sender.\\n    mapping (address => bool) public excludedFromFees;\\n           \\n    // Yacht funds wallet address that will be used for DAO treasury and buy Yachts.\\n    address payable public oseanWalletAddress;\\n    \\n    // Marketing wallet address used for funding marketing.\\n    address payable public marketingWalletAddress;\\n    \\n    // Developer wallet address used for funding the team.\\n    address payable public developerWalletAddress;\\n    \\n    // Liquidity wallet address used to hold the 75% of OSEAN tokens for the liquidity pool.\\n    // After these coins are moved to the DEX, this address will no longer be used.\\n    address public liquidityWalletAddress;\\n    \\n    // Address of the wallet that will keep OSEAN tokens for burn.\\n    address payable public tobeburntWalletAddress;\\n    \\n    // Address of the contract responsible for the air dropping.\\n    address public airDropWalletAddress;\\n    \\n    // The PancakeSwap router address for swapping OSEAN tokens for WBNB.\\n    address public uniswapRouterAddress;\\n    \\n    // The initial block timestamp of the token contract.\\n    uint256 public initialTimeStamp;\\n\\n    // Yacht transaction fee - deployed at 1%.\\n    uint256 public yachtTransactionFeePercent = 1;\\n\\n    // Developer team transaction fee - deployed at 1%.\\n    uint256 public developerFeePercent = 1;\\n\\n    // Marketing transaction fee - deployed at 1%.\\n    uint256 public marketingFeePercent = 1;\\n\\n    // Marketing transaction fee - deployed at 1%.\\n    uint256 public burnFeePercent = 1;\\n    \\n    // PancakeSwap router interface.\\n    IUniswapV2Router02 private uniswapRouter;\\n\\n    // Address of the WBNB to OSEAN token pair on PancakeSwap.\\n    address public uniswapPair;\\n\\n    /**\\n     * @notice constructor for creating Osean.\\n     * @param owner_ owner of this contract\\n     * @param initialSupply initial supply of Osean token\\n     * @param bridge_ message bridge address\\n     */\\n    constructor(\\n        uint256 initialSupply,\\n        address owner_,\\n        address bridge_,\\n        address payable _oseanWalletAddress,\\n        address payable _marketingWalletAddress,\\n        address payable _developerWalletAddress,\\n        address _liquidityWalletAddress,\\n        address payable _tobeburntWalletAddress,\\n        address _airDropWalletAddress,\\n        address _uniswapRouterAddress,\\n        address executionHelper_\\n    ) ERC20(\\\"Osean\\\", \\\"OSEAN\\\") AccessControl(owner_) {\\n        bridge__ = IMessageBridge(bridge_);\\n        executionHelper__ = ExecutionHelper(executionHelper_);\\n\\n        initialTimeStamp = block.timestamp;\\n        oseanWalletAddress = _oseanWalletAddress;\\n        marketingWalletAddress = _marketingWalletAddress;\\n        developerWalletAddress = _developerWalletAddress;\\n        liquidityWalletAddress = _liquidityWalletAddress;\\n        tobeburntWalletAddress = _tobeburntWalletAddress;\\n        airDropWalletAddress = _airDropWalletAddress;\\n        uniswapRouterAddress = _uniswapRouterAddress;\\n\\n        excludedFromFees[oseanWalletAddress] = true;\\n        excludedFromFees[marketingWalletAddress] = true;\\n        excludedFromFees[developerWalletAddress] = true;\\n        excludedFromFees[liquidityWalletAddress] = true;\\n        excludedFromFees[tobeburntWalletAddress] = true;\\n        excludedFromFees[airDropWalletAddress] = true;\\n                    \\n        _mint(marketingWalletAddress, (initialSupply) * 5 / 100);\\n        _mint(developerWalletAddress, (initialSupply) * 10 / 100);\\n        _mint(liquidityWalletAddress, (initialSupply) * 75 / 100);\\n        _mint(airDropWalletAddress, (initialSupply) * 10 / 100);\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(uniswapRouterAddress);\\n        uniswapRouter = _uniswapV2Router;\\n        _approve(address(this), address(uniswapRouter), initialSupply);\\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        IERC20(uniswapPair).approve(address(uniswapRouter), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice this function is used to update message bridge\\n     * @dev it can only be updated by owner\\n     * @dev should be carefully migrated as it can risk user funds\\n     * @param bridge_ new bridge address\\n     */\\n    function updateMessageBridge(address bridge_) external onlyOwner {\\n        bridge__ = IMessageBridge(bridge_);\\n        emit MessageBridgeUpdated(bridge_);\\n    }\\n\\n    /**\\n     * @notice this function is used to set bridge limits\\n     * @dev it can only be updated by owner\\n     * @param updates_ can be used to set mint and burn limits for all siblings in one call.\\n     */\\n    function updateLimitParams(\\n        UpdateLimitParams[] calldata updates_\\n    ) external onlyRole(LIMIT_UPDATER_ROLE) {\\n        for (uint256 i; i < updates_.length; i++) {\\n            if (updates_[i].isMint) {\\n                _consumePartLimit(\\n                    0,\\n                    _receivingLimitParams[updates_[i].siblingChainSlug]\\n                ); // to keep current limit in sync\\n                _receivingLimitParams[updates_[i].siblingChainSlug]\\n                    .maxLimit = updates_[i].maxLimit;\\n                _receivingLimitParams[updates_[i].siblingChainSlug]\\n                    .ratePerSecond = updates_[i].ratePerSecond;\\n            } else {\\n                _consumePartLimit(\\n                    0,\\n                    _sendingLimitParams[updates_[i].siblingChainSlug]\\n                ); // to keep current limit in sync\\n                _sendingLimitParams[updates_[i].siblingChainSlug]\\n                    .maxLimit = updates_[i].maxLimit;\\n                _sendingLimitParams[updates_[i].siblingChainSlug]\\n                    .ratePerSecond = updates_[i].ratePerSecond;\\n            }\\n        }\\n\\n        emit LimitParamsUpdated(updates_);\\n    }\\n\\n    /**\\n     * @notice this function is called by users to bridge their funds to a sibling chain\\n     * @dev it is payable to receive message bridge fees to be paid.\\n     * @param receiver_ address receiving bridged tokens\\n     * @param siblingChainSlug_ The unique identifier of the sibling chain.\\n     * @param sendingAmount_ amount bridged\\n     * @param msgGasLimit_ min gas limit needed for execution at destination\\n     * @param payload_ payload which is executed at destination with bridged amount at receiver address.\\n     * @param options_ additional message bridge options can be provided using this param\\n     */\\n    function bridge(\\n        address receiver_,\\n        uint32 siblingChainSlug_,\\n        uint256 sendingAmount_,\\n        uint256 msgGasLimit_,\\n        bytes calldata payload_,\\n        bytes calldata options_\\n    ) external payable {\\n        if (_sendingLimitParams[siblingChainSlug_].maxLimit == 0)\\n            revert SiblingNotSupported();\\n\\n        if (sendingAmount_ == 0) revert ZeroAmount();\\n\\n        _consumeFullLimit(\\n            sendingAmount_,\\n            _sendingLimitParams[siblingChainSlug_]\\n        ); // reverts on limit hit\\n        _burn(msg.sender, sendingAmount_);\\n\\n        bytes32 messageId = bridge__.getMessageId(siblingChainSlug_);\\n\\n        // important to get message id as it is used as an\\n        // identifier for pending amount and payload caching\\n        bytes32 returnedMessageId = bridge__.outbound{value: msg.value}(\\n            siblingChainSlug_,\\n            msgGasLimit_,\\n            abi.encode(receiver_, sendingAmount_, messageId, payload_),\\n            options_\\n        );\\n        if (returnedMessageId != messageId) revert MessageIdMisMatched();\\n        emit BridgeTokens(\\n            siblingChainSlug_,\\n            msg.sender,\\n            receiver_,\\n            sendingAmount_,\\n            messageId\\n        );\\n    }\\n\\n    /**\\n     * @notice this function can be used to mint funds which were in pending state due to limits\\n     * @param receiver_ address receiving bridged tokens\\n     * @param siblingChainSlug_ The unique identifier of the sibling chain.\\n     * @param identifier_ message identifier where message was received to mint funds\\n     */\\n    function mintPendingFor(\\n        address receiver_,\\n        uint32 siblingChainSlug_,\\n        bytes32 identifier_\\n    ) external nonReentrant {\\n        if (_receivingLimitParams[siblingChainSlug_].maxLimit == 0)\\n            revert SiblingNotSupported();\\n\\n        uint256 pendingMint = pendingMints[siblingChainSlug_][receiver_][\\n            identifier_\\n        ];\\n        (uint256 consumedAmount, uint256 pendingAmount) = _consumePartLimit(\\n            pendingMint,\\n            _receivingLimitParams[siblingChainSlug_]\\n        );\\n\\n        pendingMints[siblingChainSlug_][receiver_][identifier_] = pendingAmount;\\n        siblingPendingMints[siblingChainSlug_] -= consumedAmount;\\n\\n        _mint(receiver_, consumedAmount);\\n\\n        address receiver = pendingExecutions[identifier_].receiver;\\n        if (pendingAmount == 0 && receiver != address(0)) {\\n            if (receiver_ != receiver) revert InvalidReceiver();\\n\\n            uint32 siblingChainSlug = pendingExecutions[identifier_]\\n                .siblingChainSlug;\\n            if (siblingChainSlug != siblingChainSlug_)\\n                revert InvalidSiblingChainSlug();\\n\\n            // execute\\n            pendingExecutions[identifier_].isAmountPending = false;\\n            bool success = executionHelper__.execute(\\n                receiver_,\\n                pendingExecutions[identifier_].payload\\n            );\\n            if (success) _clearPayload(identifier_);\\n        }\\n\\n        emit PendingTokensBridged(\\n            siblingChainSlug_,\\n            receiver_,\\n            consumedAmount,\\n            pendingAmount,\\n            identifier_\\n        );\\n    }\\n\\n    /**\\n     * @notice this function receives the message from message bridge\\n     * @dev Only bridge can call this function.\\n     * @param siblingChainSlug_ The unique identifier of the sibling chain.\\n     * @param payload_ payload which is decoded to get `receiver`, `amount to mint`, `message id` and `payload` to execute after token transfer.\\n     */\\n    function inbound(\\n        uint32 siblingChainSlug_,\\n        bytes memory payload_\\n    ) external payable override nonReentrant {\\n        if (msg.sender != address(bridge__)) revert NotMessageBridge();\\n\\n        if (_receivingLimitParams[siblingChainSlug_].maxLimit == 0)\\n            revert SiblingNotSupported();\\n\\n        (\\n            address receiver,\\n            uint256 mintAmount,\\n            bytes32 identifier,\\n            bytes memory execPayload\\n        ) = abi.decode(payload_, (address, uint256, bytes32, bytes));\\n\\n        (uint256 consumedAmount, uint256 pendingAmount) = _consumePartLimit(\\n            mintAmount,\\n            _receivingLimitParams[siblingChainSlug_]\\n        );\\n\\n        if (receiver == address(this) || receiver == address(bridge__))\\n            revert CannotExecuteOnBridgeContracts();\\n\\n        _mint(receiver, consumedAmount);\\n\\n        if (pendingAmount > 0) {\\n            pendingMints[siblingChainSlug_][receiver][\\n                identifier\\n            ] = pendingAmount;\\n            siblingPendingMints[siblingChainSlug_] += pendingAmount;\\n\\n            // if pending amount is more than 0, payload is cached\\n            if (execPayload.length > 0)\\n                _cachePayload(\\n                    identifier,\\n                    true,\\n                    siblingChainSlug_,\\n                    receiver,\\n                    execPayload\\n                );\\n\\n            emit TokensPending(\\n                siblingChainSlug_,\\n                receiver,\\n                pendingAmount,\\n                pendingMints[siblingChainSlug_][receiver][identifier],\\n                identifier\\n            );\\n        } else if (execPayload.length > 0) {\\n            // execute\\n            bool success = executionHelper__.execute(receiver, execPayload);\\n\\n            if (!success)\\n                _cachePayload(\\n                    identifier,\\n                    false,\\n                    siblingChainSlug_,\\n                    receiver,\\n                    execPayload\\n                );\\n        }\\n\\n        emit TokensBridged(\\n            siblingChainSlug_,\\n            receiver,\\n            consumedAmount,\\n            mintAmount,\\n            identifier\\n        );\\n    }\\n\\n    function getCurrentReceivingLimit(\\n        uint32 siblingChainSlug_\\n    ) external view returns (uint256) {\\n        return _getCurrentLimit(_receivingLimitParams[siblingChainSlug_]);\\n    }\\n\\n    function getCurrentSendingLimit(\\n        uint32 siblingChainSlug_\\n    ) external view returns (uint256) {\\n        return _getCurrentLimit(_sendingLimitParams[siblingChainSlug_]);\\n    }\\n\\n    function getReceivingLimitParams(\\n        uint32 siblingChainSlug_\\n    ) external view returns (LimitParams memory) {\\n        return _receivingLimitParams[siblingChainSlug_];\\n    }\\n\\n    function getSendingLimitParams(\\n        uint32 siblingChainSlug_\\n    ) external view returns (LimitParams memory) {\\n        return _sendingLimitParams[siblingChainSlug_];\\n    }\\n\\n    /**\\n     * @notice Rescues funds from the contract if they are locked by mistake.\\n     * @param token_ The address of the token contract.\\n     * @param rescueTo_ The address where rescued tokens need to be sent.\\n     * @param amount_ The amount of tokens to be rescued.\\n     */\\n    function rescueFunds(\\n        address token_,\\n        address rescueTo_,\\n        uint256 amount_\\n    ) external onlyRole(RESCUE_ROLE) {\\n        RescueFundsLib.rescueFunds(token_, rescueTo_, amount_);\\n    }\\n\\n    /**\\n     * Returns the contract address\\n     * Return contract address\\n     */\\n    function getContractAddress() public view returns (address){\\n        return address(this);\\n    }\\n\\n    /**\\n    * @dev Adds a user to be excluded from fees.\\n    * @param user address of the user to be excluded from fees.\\n     */\\n    function excludeUserFromFees(address user) public onlyOwner {\\n        excludedFromFees[user] = true;\\n    }\\n\\n    /**\\n    * @dev Gets the current timestamp, used for testing + verification\\n    * @return the the timestamp of the current block\\n     */\\n    function getCurrentTimestamp() public view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n    * @dev Removes a user from the fee exclusion.\\n    * @param user address of the user than will now have to pay transaction fees.\\n     */\\n    function includeUsersInFees(address user) public onlyOwner {\\n        excludedFromFees[user] = false;\\n    }\\n\\n        \\n    // Internal Transfer function override to collect taxes only on Swap.   \\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n\\n        // Check in exchanges between wallets for 1% of total supply\\n        if (sender != uniswapPair && recipient != uniswapPair && !excludedFromFees[sender] && !excludedFromFees[recipient]) {\\n                require((balanceOf(recipient) + amount) < (totalSupply() / 75), \\\"You can't have more than 1% of the total supply.\\\");    \\n            }\\n\\n        //when to collect taxes      \\n        if((sender == uniswapPair || recipient == uniswapPair) && !excludedFromFees[sender] && !excludedFromFees[recipient]) {\\n            \\n            //Investor cannot have more than 1% of total supply\\n            if(sender == uniswapPair && !excludedFromFees[sender] && !excludedFromFees[recipient]) {\\n                require((balanceOf(recipient) + amount) < (totalSupply() / 75), \\\"You can't have more than 1% of the total supply.\\\");                                \\n            }\\n\\n            // Yacht transaction fee.\\n            uint256 yachtFee = (amount * yachtTransactionFeePercent) / 100;\\n            // Marketing team transaction fee.\\n            uint256 marketingFee = (amount * marketingFeePercent) / 100;\\n            // Developer team transaction fee.\\n            uint256 developerFee = (amount * developerFeePercent) / 100;\\n            // Burn fee\\n            uint256 burnFee = (amount * burnFeePercent) / 100;\\n\\n            // The total fee to send to the contract address.\\n            uint256 totalFee = yachtFee + marketingFee + developerFee + burnFee;\\n    \\n            // Sends the transaction fees to the contract address\\n            super._transfer(sender, address(this), totalFee);\\n            \\n            // Prepares amount afterfees\\n            amount -= totalFee;\\n        \\n        }\\n\\n        super._transfer(sender, recipient, amount);\\n    }\\n    \\n    /**\\n     * @dev Swaps OSEAN tokens from transaction fees to ETH.\\n     * @param amount the amount of OSEAN tokens to swap\\n     */\\n    function swapOSEANForETH(uint256 amount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapRouter.WETH();\\n        _approve(address(this), address(uniswapRouter), amount);\\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    \\n     /**\\n     * @dev Sends ETH to transaction fee wallets after OSEAN swaps.\\n     * @param amount the amount to be transfered\\n     */\\n    function sendFeesToWallets(uint256 amount) private {\\n        uint256 totalFee = yachtTransactionFeePercent + marketingFeePercent + developerFeePercent + burnFeePercent;\\n        oseanWalletAddress.transfer((amount * yachtTransactionFeePercent) / totalFee);\\n        marketingWalletAddress.transfer((amount * marketingFeePercent) / totalFee);\\n        developerWalletAddress.transfer((amount * developerFeePercent) / totalFee);\\n        tobeburntWalletAddress.transfer((amount * burnFeePercent) / totalFee);\\n    }\\n\\n     /**\\n     * @dev Swaps OSEAN to ETH.\\n     */\\n    function swapFeesManually() public onlyOwner {\\n        uint256 contractOSEANBalance = balanceOf(address(this));        \\n        if (contractOSEANBalance > 0) {\\n            swapOSEANForETH(contractOSEANBalance);                        \\n        }          \\n    }\\n    \\n    /**\\n     * @dev Sends ETH to Wallets\\n     */\\n    function disperseFeesManually() public onlyOwner {\\n        uint256 contractETHBalance = address(this).balance;\\n        sendFeesToWallets(contractETHBalance);\\n    }\\n    \\n    receive() external payable {} \\n}\\n\"\r\n    },\r\n    \"contracts/common/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title AccessControl\\n * @dev This abstract contract implements access control mechanism based on roles.\\n * Each role can have one or more addresses associated with it, which are granted\\n * permission to execute functions with the onlyRole modifier.\\n */\\nabstract contract AccessControl is Ownable {\\n    /**\\n     * @dev A mapping of roles to a mapping of addresses to boolean values indicating whether or not they have the role.\\n     */\\n    mapping(bytes32 => mapping(address => bool)) private _permits;\\n\\n    /**\\n     * @dev Emitted when a role is granted to an address.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed grantee);\\n\\n    /**\\n     * @dev Emitted when a role is revoked from an address.\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed revokee);\\n\\n    /**\\n     * @dev Error message thrown when an address does not have permission to execute a function with onlyRole modifier.\\n     */\\n    error NoPermit(bytes32 role);\\n\\n    /**\\n     * @dev Constructor that sets the owner of the contract.\\n     */\\n    constructor(address owner_) Ownable(owner_) {}\\n\\n    /**\\n     * @dev Modifier that restricts access to addresses having roles\\n     * Throws an error if the caller do not have permit\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        if (!_permits[role][msg.sender]) revert NoPermit(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks and reverts if an address do not have a specific role.\\n     * @param role_ The role to check.\\n     * @param address_ The address to check.\\n     */\\n    function _checkRole(bytes32 role_, address address_) internal virtual {\\n        if (!_hasRole(role_, address_)) revert NoPermit(role_);\\n    }\\n\\n    /**\\n     * @dev Grants a role to a given address.\\n     * @param role_ The role to grant.\\n     * @param grantee_ The address to grant the role to.\\n     * Emits a RoleGranted event.\\n     * Can only be called by the owner of the contract.\\n     */\\n    function grantRole(\\n        bytes32 role_,\\n        address grantee_\\n    ) external virtual onlyOwner {\\n        _grantRole(role_, grantee_);\\n    }\\n\\n    /**\\n     * @dev Revokes a role from a given address.\\n     * @param role_ The role to revoke.\\n     * @param revokee_ The address to revoke the role from.\\n     * Emits a RoleRevoked event.\\n     * Can only be called by the owner of the contract.\\n     */\\n    function revokeRole(\\n        bytes32 role_,\\n        address revokee_\\n    ) external virtual onlyOwner {\\n        _revokeRole(role_, revokee_);\\n    }\\n\\n    /**\\n     * @dev Internal function to grant a role to a given address.\\n     * @param role_ The role to grant.\\n     * @param grantee_ The address to grant the role to.\\n     * Emits a RoleGranted event.\\n     */\\n    function _grantRole(bytes32 role_, address grantee_) internal {\\n        _permits[role_][grantee_] = true;\\n        emit RoleGranted(role_, grantee_);\\n    }\\n\\n    /**\\n     * @dev Internal function to revoke a role from a given address.\\n     * @param role_ The role to revoke.\\n     * @param revokee_ The address to revoke the role from.\\n     * Emits a RoleRevoked event.\\n     */\\n    function _revokeRole(bytes32 role_, address revokee_) internal {\\n        _permits[role_][revokee_] = false;\\n        emit RoleRevoked(role_, revokee_);\\n    }\\n\\n    /**\\n     * @dev Checks whether an address has a specific role.\\n     * @param role_ The role to check.\\n     * @param address_ The address to check.\\n     * @return A boolean value indicating whether or not the address has the role.\\n     */\\n    function hasRole(\\n        bytes32 role_,\\n        address address_\\n    ) external view returns (bool) {\\n        return _hasRole(role_, address_);\\n    }\\n\\n    function _hasRole(\\n        bytes32 role_,\\n        address address_\\n    ) internal view returns (bool) {\\n        return _permits[role_][address_];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Gauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Gauge {\\n    struct LimitParams {\\n        uint256 lastUpdateTimestamp;\\n        uint256 ratePerSecond;\\n        uint256 maxLimit;\\n        uint256 lastUpdateLimit;\\n    }\\n\\n    error AmountOutsideLimit();\\n\\n    function _getCurrentLimit(\\n        LimitParams storage _params\\n    ) internal view returns (uint256 _limit) {\\n        uint256 timeElapsed = block.timestamp - _params.lastUpdateTimestamp;\\n        uint256 limitIncrease = timeElapsed * _params.ratePerSecond;\\n\\n        if (limitIncrease + _params.lastUpdateLimit > _params.maxLimit) {\\n            _limit = _params.maxLimit;\\n        } else {\\n            _limit = limitIncrease + _params.lastUpdateLimit;\\n        }\\n    }\\n\\n    function _consumePartLimit(\\n        uint256 amount_,\\n        LimitParams storage _params\\n    ) internal returns (uint256 consumedAmount, uint256 pendingAmount) {\\n        uint256 currentLimit = _getCurrentLimit(_params);\\n        _params.lastUpdateTimestamp = block.timestamp;\\n        if (currentLimit >= amount_) {\\n            _params.lastUpdateLimit = currentLimit - amount_;\\n            consumedAmount = amount_;\\n            pendingAmount = 0;\\n        } else {\\n            _params.lastUpdateLimit = 0;\\n            consumedAmount = currentLimit;\\n            pendingAmount = amount_ - currentLimit;\\n        }\\n    }\\n\\n    function _consumeFullLimit(\\n        uint256 amount_,\\n        LimitParams storage _params\\n    ) internal {\\n        uint256 currentLimit = _getCurrentLimit(_params);\\n        if (currentLimit >= amount_) {\\n            _params.lastUpdateTimestamp = block.timestamp;\\n            _params.lastUpdateLimit = currentLimit - amount_;\\n        } else {\\n            revert AmountOutsideLimit();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract provides a simple way to manage ownership of a contract\\n * and allows for ownership to be transferred to a nominated address.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _nominee;\\n\\n    event OwnerNominated(address indexed nominee);\\n    event OwnerClaimed(address indexed claimer);\\n\\n    error OnlyOwner();\\n    error OnlyNominee();\\n\\n    /**\\n     * @dev Sets the contract's owner to the address that is passed to the constructor.\\n     */\\n    constructor(address owner_) {\\n        _claimOwner(owner_);\\n    }\\n\\n    /**\\n     * @dev Modifier that restricts access to only the contract's owner.\\n     * Throws an error if the caller is not the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the current owner of the contract.\\n     */\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the current nominee for ownership of the contract.\\n     */\\n    function nominee() external view returns (address) {\\n        return _nominee;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to nominate a new owner for the contract.\\n     * Throws an error if the caller is not the owner.\\n     * Emits an `OwnerNominated` event with the address of the nominee.\\n     */\\n    function nominateOwner(address nominee_) external {\\n        if (msg.sender != _owner) revert OnlyOwner();\\n        _nominee = nominee_;\\n        emit OwnerNominated(_nominee);\\n    }\\n\\n    /**\\n     * @dev Allows the nominated owner to claim ownership of the contract.\\n     * Throws an error if the caller is not the nominee.\\n     * Sets the nominated owner as the new owner of the contract.\\n     * Emits an `OwnerClaimed` event with the address of the new owner.\\n     */\\n    function claimOwner() external {\\n        if (msg.sender != _nominee) revert OnlyNominee();\\n        _claimOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Internal function that sets the owner of the contract to the specified address\\n     * and sets the nominee to address(0).\\n     */\\n    function _claimOwner(address claimer_) internal {\\n        _owner = claimer_;\\n        _nominee = address(0);\\n        emit OwnerClaimed(claimer_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Uniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Pair {\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n}\"\r\n    },\r\n    \"contracts/libraries/ExcessivelySafeCall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ExcessivelySafeCall {\\n    uint constant LOW_28_MASK =\\n        0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n                _gas, // gas\\n                _target, // recipient\\n                0, // ether value\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n                _gas, // gas\\n                _target, // recipient\\n                add(_calldata, 0x20), // inloc\\n                mload(_calldata), // inlen\\n                0, // outloc\\n                0 // outlen\\n            )\\n            // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n            // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n            // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(\\n        bytes4 _newSelector,\\n        bytes memory _buf\\n    ) internal pure {\\n        require(_buf.length >= 4);\\n        uint _mask = LOW_28_MASK;\\n        assembly {\\n            // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n            // mask out the top 4 bytes\\n            // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/RescueFundsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nerror ZeroAddress();\\n\\n/**\\n * @title RescueFundsLib\\n * @dev A library that provides a function to rescue funds from a contract.\\n */\\n\\nlibrary RescueFundsLib {\\n    /**\\n     * @dev The address used to identify ETH.\\n     */\\n    address public constant ETH_ADDRESS =\\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    /**\\n     * @dev thrown when the given token address don't have any code\\n     */\\n    error InvalidTokenAddress();\\n\\n    /**\\n     * @dev Rescues funds from a contract.\\n     * @param token_ The address of the token contract.\\n     * @param rescueTo_ The address of the user.\\n     * @param amount_ The amount of tokens to be rescued.\\n     */\\n    function rescueFunds(\\n        address token_,\\n        address rescueTo_,\\n        uint256 amount_\\n    ) internal {\\n        if (rescueTo_ == address(0)) revert ZeroAddress();\\n\\n        if (token_ == ETH_ADDRESS) {\\n            SafeTransferLib.safeTransferETH(rescueTo_, amount_);\\n        } else {\\n            if (token_.code.length == 0) revert InvalidTokenAddress();\\n            SafeTransferLib.safeTransfer(ERC20(token_), rescueTo_, amount_);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supertoken/Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"solmate/src/utils/ReentrancyGuard.sol\\\";\\n\\nimport {RescueFundsLib} from \\\"../libraries/RescueFundsLib.sol\\\";\\nimport {Gauge} from \\\"../common/Gauge.sol\\\";\\nimport {AccessControl} from \\\"../common/AccessControl.sol\\\";\\n\\nimport \\\"./ISuperTokenOrVault.sol\\\";\\nimport \\\"./IMessageBridge.sol\\\";\\nimport \\\"./ExecutionHelper.sol\\\";\\n\\n/**\\n * @title Base contract for super token and vault\\n * @notice It contains relevant execution payload storages.\\n * @dev This contract implements Socket's IPlug to enable message bridging and IMessageBridge\\n * to support any type of message bridge.\\n */\\nabstract contract Base is\\n    ReentrancyGuard,\\n    Gauge,\\n    ISuperTokenOrVault,\\n    AccessControl\\n{\\n    /**\\n     * @notice this struct stores relevant details for a pending payload execution\\n     * @param receiver address of receiver where payload executes.\\n     * @param payload payload to be executed\\n     * @param isAmountPending if amount to be bridged is pending\\n     */\\n    struct PendingExecutionDetails {\\n        bool isAmountPending;\\n        uint32 siblingChainSlug;\\n        address receiver;\\n        bytes payload;\\n    }\\n\\n    ExecutionHelper public executionHelper__;\\n\\n    // messageId => PendingExecutionDetails\\n    mapping(bytes32 => PendingExecutionDetails) public pendingExecutions;\\n\\n    ////////////////////////////////////////////////////////\\n    ////////////////////// ERRORS //////////////////////////\\n    ////////////////////////////////////////////////////////\\n\\n    error InvalidExecutionRetry();\\n    error PendingAmount();\\n    error CannotExecuteOnBridgeContracts();\\n\\n    // emitted when a execution helper is updated\\n    event ExecutionHelperUpdated(address executionHelper);\\n\\n    /**\\n     * @notice this function is used to update execution helper contract\\n     * @dev it can only be updated by owner\\n     * @param executionHelper_ new execution helper address\\n     */\\n    function updateExecutionHelper(\\n        address executionHelper_\\n    ) external onlyOwner {\\n        executionHelper__ = ExecutionHelper(executionHelper_);\\n        emit ExecutionHelperUpdated(executionHelper_);\\n    }\\n\\n    /**\\n     * @notice this function can be used to retry a payload execution if it was not successful.\\n     * @param msgId_ The unique identifier of the bridging message.\\n     */\\n    function retryPayloadExecution(bytes32 msgId_) external nonReentrant {\\n        PendingExecutionDetails storage details = pendingExecutions[msgId_];\\n        if (details.isAmountPending) revert PendingAmount();\\n\\n        if (details.receiver == address(0)) revert InvalidExecutionRetry();\\n        bool success = executionHelper__.execute(\\n            details.receiver,\\n            details.payload\\n        );\\n\\n        if (success) _clearPayload(msgId_);\\n    }\\n\\n    /**\\n     * @notice this function caches the execution payload details if the amount to be bridged\\n     * is not pending or execution is reverting\\n     */\\n    function _cachePayload(\\n        bytes32 msgId_,\\n        bool isAmountPending_,\\n        uint32 siblingChainSlug_,\\n        address receiver_,\\n        bytes memory payload_\\n    ) internal {\\n        pendingExecutions[msgId_].receiver = receiver_;\\n        pendingExecutions[msgId_].payload = payload_;\\n        pendingExecutions[msgId_].siblingChainSlug = siblingChainSlug_;\\n        pendingExecutions[msgId_].isAmountPending = isAmountPending_;\\n    }\\n\\n    /**\\n     * @notice this function clears the payload details once execution succeeds\\n     */\\n    function _clearPayload(bytes32 msgId_) internal {\\n        pendingExecutions[msgId_].receiver = address(0);\\n        pendingExecutions[msgId_].payload = bytes(\\\"\\\");\\n        pendingExecutions[msgId_].siblingChainSlug = 0;\\n        pendingExecutions[msgId_].isAmountPending = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supertoken/ExecutionHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/ExcessivelySafeCall.sol\\\";\\n\\n/**\\n * @title ExecutionHelper\\n * @notice It is an untrusted contract used for payload execution by Super token and Vault.\\n */\\ncontract ExecutionHelper {\\n    using ExcessivelySafeCall for address;\\n    uint16 private constant MAX_COPY_BYTES = 0;\\n\\n    /**\\n     * @notice this function is used to execute a payload at target_\\n     * @dev receiver address cannot be this contract address.\\n     * @param target_ address of target.\\n     * @param payload_ payload to be executed at target.\\n     */\\n    function execute(\\n        address target_,\\n        bytes memory payload_\\n    ) external returns (bool success) {\\n        if (target_ == address(this)) return false;\\n        (success, ) = target_.excessivelySafeCall(\\n            gasleft(),\\n            MAX_COPY_BYTES,\\n            payload_\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/supertoken/IMessageBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IMessageBridge\\n * @notice It should be implemented by message bridge integrated to Super token and Vault.\\n */\\ninterface IMessageBridge {\\n    /**\\n     * @notice calls socket's outbound function which transmits msg to `siblingChainSlug_`.\\n     * @dev Only super token or vault can call this contract\\n     * @param siblingChainSlug_ The unique identifier of the sibling chain.\\n     * @param msgGasLimit_ min gas limit needed to execute the message on sibling\\n     * @param payload_ payload which should be executed at the sibling chain.\\n     * @param options_ extra bytes memory can be used by other protocol plugs for additional options\\n     */\\n    function outbound(\\n        uint32 siblingChainSlug_,\\n        uint256 msgGasLimit_,\\n        bytes memory payload_,\\n        bytes memory options_\\n    ) external payable returns (bytes32 messageId_);\\n\\n    /**\\n     * @notice this function is used to calculate message id before sending outbound().\\n     * @param siblingChainSlug_ The unique identifier of the sibling chain.\\n     * @return message id\\n     */\\n    function getMessageId(\\n        uint32 siblingChainSlug_\\n    ) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/supertoken/ISuperTokenOrVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ISuperTokenOrVault\\n * @notice It should be implemented Super token and Vault for plugs to communicate.\\n */\\ninterface ISuperTokenOrVault {\\n    /**\\n     * @dev this should be only executable by socket.\\n     * @notice executes the message received from source chain.\\n     * @notice It is expected to have original sender checks in the destination plugs using payload.\\n     * @param siblingChainSlug_ chain slug of source.\\n     * @param payload_ the data which is needed to decode receiver, amount, msgId and payload.\\n     */\\n    function inbound(\\n        uint32 siblingChainSlug_,\\n        bytes memory payload_\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_oseanWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketingWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_developerWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_tobeburntWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airDropWalletAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executionHelper_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountOutsideLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotExecuteOnBridgeContracts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExecutionRetry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSiblingChainSlug\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MessageIdMisMatched\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"NoPermit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMessageBridge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyNominee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiblingNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"siblingChainSlug\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"BridgeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executionHelper\",\"type\":\"address\"}],\"name\":\"ExecutionHelperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMint\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Osean.UpdateLimitParams[]\",\"name\":\"updates\",\"type\":\"tuple[]\"}],\"name\":\"LimitParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBridge\",\"type\":\"address\"}],\"name\":\"MessageBridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"OwnerClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"siblingChainSlug\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"PendingTokensBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revokee\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"siblingChainSlug\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"TokensBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"siblingChainSlug\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"TokensPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airDropWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sendingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgGasLimit_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"options_\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge__\",\"outputs\":[{\"internalType\":\"contract IMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disperseFeesManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"excludeUserFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionHelper__\",\"outputs\":[{\"internalType\":\"contract ExecutionHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug_\",\"type\":\"uint32\"}],\"name\":\"getCurrentReceivingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug_\",\"type\":\"uint32\"}],\"name\":\"getCurrentSendingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug_\",\"type\":\"uint32\"}],\"name\":\"getReceivingLimitParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Gauge.LimitParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug_\",\"type\":\"uint32\"}],\"name\":\"getSendingLimitParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Gauge.LimitParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"grantee_\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug_\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"inbound\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"includeUsersInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug_\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"identifier_\",\"type\":\"bytes32\"}],\"name\":\"mintPendingFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee_\",\"type\":\"address\"}],\"name\":\"nominateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oseanWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingExecutions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAmountPending\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rescueTo_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgId_\",\"type\":\"bytes32\"}],\"name\":\"retryPayloadExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role_\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"revokee_\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"siblingPendingMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeesManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tobeburntWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executionHelper_\",\"type\":\"address\"}],\"name\":\"updateExecutionHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isMint\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"siblingChainSlug\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"internalType\":\"struct Osean.UpdateLimitParams[]\",\"name\":\"updates_\",\"type\":\"tuple[]\"}],\"name\":\"updateLimitParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"}],\"name\":\"updateMessageBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yachtTransactionFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Osean", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000007c13bc4b2c133c560000000000000000000000000000004cac359ab2a020cf212d82c1b66fc8abf81b1dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004cac359ab2a020cf212d82c1b66fc8abf81b1dd00000000000000000000000000c610203a017711977947ac91be02a1023c482f00000000000000000000000005fda1dec47b50afff74b1387f7f0e9ef18ed98b20000000000000000000000002a0b1827488acbb79a363a7dcf35424b18208fc4000000000000000000000000cc59e2e4cf86df813dad356021562a59785923ae000000000000000000000000e5840701202488be8284ea3e5e2bf7ad1965dc7e0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000004cac359ab2a020cf212d82c1b66fc8abf81b1dd0", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}