{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract HugMEStakingContract  {\r\n    address payable public owner;\r\n    IERC20 public hugMEToken;\r\n    uint256 public minimumStakeAmount = 1e6 * 1e18; // 1 million tokens, assuming 18 decimals\r\n    uint256 public lockPeriod = 6 * 30 days; // representing 6 months\r\n    uint256 public yearlyInterestRate = 6; // 6%\r\n\r\n    struct StakeInfo {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint256 interestRate;\r\n    }\r\n\r\n    struct StakeInfoWithPendingTime {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint256 interestRate;\r\n        uint256 pendingTime;\r\n    }\r\n\r\n    mapping(address => StakeInfo[]) public stakingInfo;\r\n\r\n    event Staked(address indexed user, uint256 amount, uint256 timestamp);\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 stakeIndex);\r\n    event Restaked(address indexed user, uint256 amount, uint256 stakeIndex);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(IERC20 _hugMEToken) {\r\n        hugMEToken = _hugMEToken;\r\n         owner = payable(msg.sender);\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setMinimumStakeAmount(uint256 _minimumStakeAmount) external onlyOwner {\r\n        minimumStakeAmount = _minimumStakeAmount;\r\n    }\r\n\r\n    function setLockPeriod(uint256 _lockPeriod) external onlyOwner {\r\n        lockPeriod = _lockPeriod;\r\n    }\r\n\r\n    function setYearlyInterestRate(uint256 _yearlyInterestRate) external onlyOwner {\r\n        yearlyInterestRate = _yearlyInterestRate;\r\n    }\r\n\r\n    function stake(uint256 _amount) external {\r\n        require(_amount >= minimumStakeAmount, \"Insufficient staking amount\");\r\n        hugMEToken.transferFrom(msg.sender, address(this), _amount);\r\n        stakingInfo[msg.sender].push(StakeInfo(_amount, block.timestamp, yearlyInterestRate));\r\n        emit Staked(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function withdraw(uint256 stakeIndex) external {\r\n        require(stakeIndex < stakingInfo[msg.sender].length, \"Invalid stake index\");\r\n        require(block.timestamp >= stakingInfo[msg.sender][stakeIndex].timestamp + lockPeriod, \"Staking period not yet over\");\r\n\r\n        uint256 stakingPeriod = block.timestamp - stakingInfo[msg.sender][stakeIndex].timestamp;\r\n        uint256 reward = (stakingInfo[msg.sender][stakeIndex].amount * stakingInfo[msg.sender][stakeIndex].interestRate * stakingPeriod) / (365 days * 100);\r\n        uint256 amountToWithdraw = stakingInfo[msg.sender][stakeIndex].amount + reward;\r\n\r\n        // Remove the stake info\r\n        stakingInfo[msg.sender][stakeIndex] = stakingInfo[msg.sender][stakingInfo[msg.sender].length - 1];\r\n        stakingInfo[msg.sender].pop();\r\n\r\n        hugMEToken.transfer(msg.sender, amountToWithdraw);\r\n        emit Withdrawn(msg.sender, amountToWithdraw, stakeIndex);\r\n    }\r\n\r\n    function restake(uint256 stakeIndex) external {\r\n        require(stakeIndex < stakingInfo[msg.sender].length, \"Invalid stake index\");\r\n        require(block.timestamp >= stakingInfo[msg.sender][stakeIndex].timestamp + lockPeriod, \"Staking period not yet over\");\r\n\r\n        uint256 stakingPeriod = block.timestamp - stakingInfo[msg.sender][stakeIndex].timestamp;\r\n        uint256 reward = (stakingInfo[msg.sender][stakeIndex].amount * stakingInfo[msg.sender][stakeIndex].interestRate * stakingPeriod) / (365 days * 100);\r\n        uint256 newStakeAmount = stakingInfo[msg.sender][stakeIndex].amount + reward;\r\n\r\n        // Update the stake info with new values\r\n        stakingInfo[msg.sender][stakeIndex].amount = newStakeAmount;\r\n        stakingInfo[msg.sender][stakeIndex].timestamp = block.timestamp;\r\n        stakingInfo[msg.sender][stakeIndex].interestRate = yearlyInterestRate;\r\n\r\n        emit Restaked(msg.sender, newStakeAmount, stakeIndex);\r\n    }\r\n\r\n    function getUserStakes(address user) external view returns (StakeInfoWithPendingTime[] memory) {\r\n        StakeInfoWithPendingTime[] memory stakesWithPendingTime = new StakeInfoWithPendingTime[](stakingInfo[user].length);\r\n        \r\n        for (uint256 i = 0; i < stakingInfo[user].length; i++) {\r\n            uint256 endTimestamp = stakingInfo[user][i].timestamp + lockPeriod;\r\n            uint256 pendingTime = block.timestamp >= endTimestamp ? 0 : endTimestamp - block.timestamp;\r\n            \r\n            stakesWithPendingTime[i] = StakeInfoWithPendingTime({\r\n                amount: stakingInfo[user][i].amount,\r\n                timestamp: stakingInfo[user][i].timestamp,\r\n                interestRate: stakingInfo[user][i].interestRate,\r\n                pendingTime: pendingTime\r\n            });\r\n        }\r\n        \r\n        return stakesWithPendingTime;\r\n    }\r\n\r\n    function getStakeInfo(address user, uint256 stakeIndex) external view returns (StakeInfoWithPendingTime memory) {\r\n        require(stakeIndex < stakingInfo[user].length, \"Invalid stake index\");\r\n        \r\n        uint256 endTimestamp = stakingInfo[user][stakeIndex].timestamp + lockPeriod;\r\n        uint256 pendingTime = block.timestamp >= endTimestamp ? 0 : endTimestamp - block.timestamp;\r\n        \r\n        return StakeInfoWithPendingTime({\r\n            amount: stakingInfo[user][stakeIndex].amount,\r\n            timestamp: stakingInfo[user][stakeIndex].timestamp,\r\n            interestRate: stakingInfo[user][stakeIndex].interestRate,\r\n            pendingTime: pendingTime\r\n        });\r\n    }\r\n     // Transfer ownership\r\n    function transferOwnership(address payable newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_hugMEToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Restaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTime\",\"type\":\"uint256\"}],\"internalType\":\"struct HugMEStakingContract.StakeInfoWithPendingTime\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTime\",\"type\":\"uint256\"}],\"internalType\":\"struct HugMEStakingContract.StakeInfoWithPendingTime[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hugMEToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yearlyInterestRate\",\"type\":\"uint256\"}],\"name\":\"setYearlyInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearlyInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HugMEStakingContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a35f68f312efdee84254621c89999a95ce37adb4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0e9f35a533c78160d9ec52cebdcfdd333cc1c3aea149b3e642d40629f224c328"}