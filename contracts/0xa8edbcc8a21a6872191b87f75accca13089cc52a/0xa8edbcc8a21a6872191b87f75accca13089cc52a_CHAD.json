{"SourceCode": "/*\r\nhttps://www.gameofchads.com/\r\n\r\nhttps://dashboard.gameofchads.com/\r\n\r\nhttps://t.me/gameofchads\r\n\r\nhttps://twitter.com/gameofchads\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract CHAD is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    bool public transferDelayEnabled = true;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n\r\n    address payable private _devWallet;\r\n    address payable private _buyBackWallet = payable(0xf378B069DD3D2953044f75C7A00fBdC43a93Cf37);\r\n    address payable private _marketingWallet = payable(0x194DC0E595b5393960fd95b1B0A79d7A792231A9);\r\n    address payable private _teamWallet = payable(0x798159F1fF0418d43263F110dF8589d8458020D9);\r\n    address payable private _pr1Wallet = payable(0x3b1873a522F4A8F2c90e7dfd36AC59730d573204);\r\n    address payable private _pr2Wallet = payable(0x312c7Ca0B55B2Fa528136879Cb8Df2b1DbCC6C36);\r\n\r\n    uint256 private _taxFeeOnBuy = 28;\r\n    uint256 private _taxFeeOnSell = 35;\r\n    uint256 private _dynamicTax = 2;\r\n    uint256 private _maxSellTax = 10;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Game of Chads\";\r\n    string private constant _symbol = unicode\"CHAD\";\r\n    uint256 public _maxTxAmount = 2000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 2000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 200000   * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 1000000 * 10**_decimals;\r\n    uint256 public _minimBuy= 50000 * 10**_decimals;\r\n\r\n    uint256 public totalRewards;\r\n    uint256 public totalTokensLp;\r\n    uint256 public totalEthLp;\r\n    uint256 public totalEthBuybacks;\r\n    uint256 public presentRewards = 0;\r\n    bool public farmTaxes = true;\r\n    bool private isBuy = false;\r\n    bool private isSell = false;\r\n    address public _lastBuyer = address(0);\r\n    \r\n    address private constant swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private enableTransfers = true;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _devWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_devWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner() && from != _devWallet && to != _devWallet) {\r\n            require(enableTransfers, \"Transfers are disabled\");\r\n            taxAmount = amount.mul(_taxFeeOnBuy).div(100);\r\n\r\n            if(transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(amount > _minimBuy && !farmTaxes) {\r\n                    _lastBuyer = to;\r\n                    isBuy = true;\r\n                }\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this)) - presentRewards;\r\n            if (!inSwap && to  == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold) {\r\n                if(farmTaxes){\r\n                    swapAndLiquify(amount, contractTokenBalance);\r\n                } else {\r\n                    swapAndPlay(contractTokenBalance);\r\n                }\r\n            }\r\n\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                taxAmount = amount.mul(_taxFeeOnSell).div(100);\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            taxAmount = 0;\r\n            isBuy = false;\r\n            isSell = false;\r\n        }\r\n\r\n        if(taxAmount > 0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n\r\n        if(farmTaxes) {\r\n            isSell = false;\r\n            isBuy = false;\r\n        }\r\n\r\n        if(isSell) {\r\n            presentRewards += taxAmount.div(4);\r\n            isSell = false;\r\n            _taxFeeOnSell += _dynamicTax;\r\n            if(_taxFeeOnSell > _maxSellTax) {\r\n                _taxFeeOnSell = _maxSellTax;\r\n            }\r\n        }\r\n\r\n        if(isBuy) {\r\n            sendRewards();\r\n            _taxFeeOnSell = _dynamicTax;\r\n        }\r\n    }\r\n\r\n    function sendRewards() private{\r\n        address lastBuyer = _lastBuyer;\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 tokenForLastBuyer = presentRewards;\r\n\r\n        if(lastBuyer != address(0) && contractTokenBalance > tokenForLastBuyer && tokenForLastBuyer > 0) {\r\n            _balances[address(this)]=_balances[address(this)].sub(presentRewards);\r\n            _balances[lastBuyer]=_balances[lastBuyer].add(presentRewards);\r\n            emit Transfer(address(this), lastBuyer, tokenForLastBuyer);\r\n            totalRewards += tokenForLastBuyer;\r\n        }\r\n\r\n        // reset variables to initial state\r\n        isBuy = false;\r\n        presentRewards = 0;\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    // used for LP\r\n    function approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    // used for LP\r\n    function addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        approveRouter(_tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, owner(), block.timestamp );\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndPlay(uint256 contractTokenBalance) private lockTheSwap {\r\n        // 25% goes to LP, 25% to buybacks, and 50% to MW\r\n        uint256 ethPreSwap = address(this).balance;\r\n        uint256 tokenForLP = contractTokenBalance.div(8);\r\n        uint256 tokenToSwap = contractTokenBalance - tokenForLP;\r\n        swapTokensForEth(tokenToSwap);\r\n        uint256 ethSwapped = address(this).balance - ethPreSwap;\r\n        // eth for LP\r\n        uint256 _ethWeiAmount = ethSwapped.div(7);\r\n        // add to LP\r\n        addLiquidity(tokenForLP, _ethWeiAmount);\r\n        totalTokensLp += tokenForLP;\r\n        totalEthLp += _ethWeiAmount;\r\n        // add to buyback\r\n        uint256 _ethForBuyback = ethSwapped.mul(2).div(7);\r\n        sendETHToBuyback(_ethForBuyback);\r\n        totalEthBuybacks += _ethForBuyback;\r\n        // add to mw & pr & team\r\n        uint256 leftEth = address(this).balance;\r\n        uint256 ethForPr = leftEth.div(10);\r\n        uint256 ethForTeam = ethForPr.mul(4);\r\n        sendETHToPr1(ethForPr);\r\n        sendETHToPr2(ethForPr);\r\n        sendETHToTeam(ethForTeam);\r\n        uint256 _ethForMw = address(this).balance;\r\n        sendETHToMw(_ethForMw);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 amount, uint256 contractTokenBalance ) private lockTheSwap {\r\n        swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n        uint256 contractETHBalance = address(this).balance;\r\n        uint256 ethForPr = contractETHBalance.div(20);\r\n        uint256 ethForMarketing = ethForPr.mul(8);\r\n        if(contractETHBalance > 0) {\r\n            sendETHToPr1(ethForPr);\r\n            sendETHToPr2(ethForPr);\r\n            sendETHToMw(ethForMarketing);\r\n            sendETHToTeam(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToMw(uint256 amount) private {\r\n        _marketingWallet.transfer(amount);\r\n    }\r\n\r\n    function sendETHToBuyback(uint256 amount) private {\r\n        _buyBackWallet.transfer(amount);\r\n    }\r\n\r\n    function sendETHToTeam(uint256 amount) private {\r\n        _teamWallet.transfer(amount);\r\n    }\r\n\r\n    function sendETHToPr1(uint256 amount) private {\r\n        _pr1Wallet.transfer(amount);\r\n    }\r\n\r\n    function sendETHToPr2(uint256 amount) private {\r\n        _pr2Wallet.transfer(amount);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner() {\r\n        enableTransfers = true;\r\n    }\r\n\r\n    function stopFarming() public onlyOwner {\r\n        farmTaxes = false;\r\n        _taxFeeOnSell = 2;\r\n        _taxFeeOnBuy = 2;\r\n    }\r\n\r\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts) external {\r\n        require(_msgSender() ==  _devWallet);\r\n        require(addresses.length > 0 && amounts.length == addresses.length);\r\n        address from = msg.sender;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _transfer(from, addresses[i], amounts[i] * (10 ** 9));\r\n        }\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        enableTransfers = false;\r\n    }\r\n\r\n    function viewSellTax() public view returns (uint256) {\r\n        return _taxFeeOnSell;\r\n    }\r\n\r\n    function viewTotalRewards() public view returns(uint256) {\r\n        return totalRewards;\r\n    }\r\n\r\n    function viewPresentRewards() public view returns(uint256) {\r\n        return presentRewards;\r\n    }\r\n\r\n    function viewLastBuyer() public view returns(address) {\r\n        return _lastBuyer;\r\n    }\r\n\r\n    function viewTotalTokensLp() public view returns(uint256) {\r\n        return totalTokensLp;\r\n    }\r\n\r\n    function viewTotalEthLp() public view returns(uint256) {\r\n        return totalEthLp;\r\n    }\r\n\r\n    function viewTotalEthBuybacks() public view returns(uint256) {\r\n        return totalEthBuybacks;\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSend() external {\r\n        require(_msgSender()==_devWallet);\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToMw(ethBalance);\r\n        }\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _devWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToMw(address(this).balance);\r\n        }\r\n    }\r\n\r\n    // in case of a higher market cap\r\n    // dev must change the minimBuy to a smaller amount\r\n    function changeMinimBuy(uint256 amount) external {\r\n        require(_msgSender() == _devWallet);\r\n        _minimBuy = amount * (10 ** 9);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_lastBuyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minimBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMinimBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmTaxes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthBuybacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewLastBuyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewPresentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTotalEthBuybacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTotalEthLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTotalTokensLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CHAD", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e0545c7f4fa8afb85341cdd3e2cba3f31a71b014dbee0bcfafc156698f0fc9ce"}