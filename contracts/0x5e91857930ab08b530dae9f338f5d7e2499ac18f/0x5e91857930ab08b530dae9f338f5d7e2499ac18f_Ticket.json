{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\ncontract Ticket {\r\n    address public owner;\r\n    mapping(address => uint256) public ticketBalances;\r\n    uint256 public ticketLotPrice = 0.01 ether;\r\n    uint256 public ticketsPerBulk = 20; // Number of tickets per bulk purchase\r\n    uint256 public bulkDiscount5 = 10; // 10% discount for 5 bulk purchases\r\n    uint256 public bulkDiscount10 = 20; // 20% discount for 10 bulk purchases\r\n    address public withdrawalAddress;\r\n\r\n    event TicketsPurchased(\r\n        address indexed buyer,\r\n        uint256 numberOfTickets,\r\n        uint256 cost\r\n    );\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        withdrawalAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function getCost(uint256 numberOfLotToBuy) public view returns (uint256) {\r\n        uint256 totalCost = numberOfLotToBuy * ticketLotPrice;\r\n        uint256 discount = 0;\r\n        if (numberOfLotToBuy >= 10) {\r\n            discount = (totalCost * bulkDiscount10) / 100;\r\n        } else if (numberOfLotToBuy >= 5) {\r\n            discount = (totalCost * bulkDiscount5) / 100;\r\n        }\r\n        totalCost -= discount;\r\n        return totalCost;\r\n    }\r\n\r\n    function buyTickets(uint256 numberOfLotToBuy) public payable {\r\n        uint256 numberOfTicketsToBuy = numberOfLotToBuy * ticketsPerBulk;\r\n        uint256 totalCost = getCost(numberOfLotToBuy);\r\n\r\n        require(\r\n            msg.value >= totalCost,\r\n            \"Insufficient ETH sent to purchase the tickets\"\r\n        );\r\n\r\n        ticketBalances[msg.sender] += numberOfTicketsToBuy;\r\n\r\n        if (msg.value > totalCost) {\r\n            payable(msg.sender).transfer(msg.value - totalCost);\r\n        }\r\n\r\n        emit TicketsPurchased(msg.sender, numberOfTicketsToBuy, totalCost);\r\n    }\r\n\r\n    function withdrawFunds() public onlyOwner {\r\n        payable(withdrawalAddress).transfer(address(this).balance); // Withdraw to the withdrawal address\r\n    }\r\n\r\n    function UpdateConfig(\r\n        uint256 _newTicketLotPrice,\r\n        uint256 _newTicketsPerBulk,\r\n        uint256 _newBulkDiscount5,\r\n        uint256 _newBulkDiscount10\r\n    ) public onlyOwner {\r\n        ticketLotPrice = _newTicketLotPrice;\r\n        ticketsPerBulk = _newTicketsPerBulk;\r\n        bulkDiscount5 = _newBulkDiscount5;\r\n        bulkDiscount10 = _newBulkDiscount10;\r\n    }\r\n\r\n    function updateWithdrawalAddress(\r\n        address _newWithdrawalAddress\r\n    ) public onlyOwner {\r\n        withdrawalAddress = _newWithdrawalAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTicketLotPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTicketsPerBulk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBulkDiscount5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBulkDiscount10\",\"type\":\"uint256\"}],\"name\":\"UpdateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bulkDiscount10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bulkDiscount5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfLotToBuy\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfLotToBuy\",\"type\":\"uint256\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketLotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketsPerBulk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWithdrawalAddress\",\"type\":\"address\"}],\"name\":\"updateWithdrawalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Ticket", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://516ad236673e4001bbaa0749d6032337eef1bae44d2f8693488ba4ffcd2a5155"}