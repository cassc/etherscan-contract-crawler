{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@butternetwork/bridge/contracts/interface/IButterMosV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IButterMosV2 {\\n    function swapOutToken(\\n        address _sender,\\n        address _token, // src token\\n        bytes memory _to,\\n        uint256 _amount,\\n        uint256 _toChain, // target chain id\\n        bytes calldata _swapData\\n    ) external returns (bytes32 orderId);\\n\\n    function swapOutNative(\\n        address _sender,\\n        bytes memory _to,\\n        uint256 _toChain, // target chain id\\n        bytes calldata _swapData\\n    ) external payable returns (bytes32 orderId);\\n\\n    function depositToken(address _token, address to, uint256 _amount) external;\\n\\n    function depositNative(address _to) external payable;\\n\\n    event SetButterRouterAddress(address indexed _newRouter);\\n\\n    event mapTransferOut(\\n        uint256 indexed fromChain,\\n        uint256 indexed toChain,\\n        bytes32 orderId,\\n        bytes token,\\n        bytes from,\\n        bytes to,\\n        uint256 amount,\\n        bytes toChainToken\\n    );\\n\\n    event mapDepositOut(\\n        uint256 indexed fromChain,\\n        uint256 indexed toChain,\\n        bytes32 orderId,\\n        address token,\\n        bytes from,\\n        address to,\\n        uint256 amount\\n    );\\n\\n    event mapSwapOut(\\n        uint256 indexed fromChain, // from chain\\n        uint256 indexed toChain, // to chain\\n        bytes32 orderId, // order id\\n        bytes token, // token to transfer\\n        bytes from, // source chain from address\\n        bytes to,\\n        uint256 amount,\\n        bytes swapData // swap data, used on target chain dex.\\n    );\\n\\n    event mapSwapIn(\\n        uint256 indexed fromChain,\\n        uint256 indexed toChain,\\n        bytes32 indexed orderId,\\n        address token,\\n        bytes from,\\n        address toAddress,\\n        uint256 amountOut\\n    );\\n}\\n\"\r\n    },\r\n    \"@butternetwork/bridge/contracts/interface/IButterReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IButterReceiver {\\n    //_srcToken received token (wtoken or erc20 token)\\n    function onReceived(\\n        bytes32 _orderId,\\n        address _srcToken,\\n        uint256 _amount,\\n        uint256 _fromChain,\\n        bytes calldata _from,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../lib/ErrorMessage.sol\\\";\\nimport \\\"../lib/Helper.sol\\\";\\n\\nabstract contract Router is Ownable2Step {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    uint256 public feeRate;\\n    uint256 public fixedFee;\\n    address public feeReceiver;\\n    address internal immutable wToken;\\n    uint256 internal nativeBalanceBeforeExec;\\n    uint256 private constant FEE_DENOMINATOR = 1000000;\\n\\n    mapping(address => bool) public approved;\\n\\n    event Approve(address indexed executor, bool indexed flag);\\n    event SetFee(address indexed receiver, uint256 indexed rate, uint256 indexed fixedf);\\n    event CollectFee(\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 indexed amount,\\n        bytes32 transferId,\\n        FeeType feeType\\n    );\\n\\n    enum FeeType {\\n        FIXED,\\n        PROPORTION\\n    }\\n\\n    // use to solve deep stack\\n    struct SwapTemp {\\n        address srcToken;\\n        address swapToken;\\n        uint256 srcAmount;\\n        uint256 swapAmount;\\n        bytes32 transferId;\\n        address receiver;\\n        address target;\\n        uint256 callAmount;\\n        uint256 fromChain;\\n        uint256 toChain;\\n        bytes from;\\n        FeeType feeType;\\n    }\\n\\n    event SwapAndCall(\\n        address indexed from,\\n        address indexed receiver,\\n        address indexed target,\\n        bytes32 transferId,\\n        address originToken,\\n        address swapToken,\\n        uint256 originAmount,\\n        uint256 swapAmount,\\n        uint256 callAmount\\n    );\\n\\n    modifier transferIn(\\n        address token,\\n        uint256 amount,\\n        bytes memory permitData\\n    ) {\\n        require(amount > 0, ErrorMessage.ZERO_IN);\\n\\n        if (permitData.length > 0) {\\n            Helper._permit(permitData);\\n        }\\n        nativeBalanceBeforeExec = address(this).balance - msg.value;\\n        if (Helper._isNative(token)) {\\n            require(msg.value >= amount, ErrorMessage.FEE_MISMATCH);\\n        } else {\\n            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount);\\n        }\\n\\n        _;\\n\\n        nativeBalanceBeforeExec = 0;\\n    }\\n\\n    constructor(address _owner, address _wToken) payable {\\n        require(_owner != Helper.ZERO_ADDRESS, ErrorMessage.ZERO_ADDR);\\n        require(_wToken.isContract(), ErrorMessage.NOT_CONTRACT);\\n        wToken = _wToken;\\n        _transferOwnership(_owner);\\n    }\\n\\n    function _doSwapAndCall(\\n        bytes memory _swapData,\\n        bytes memory _callbackData,\\n        address _srcToken,\\n        uint256 _amount\\n    ) internal returns (address receiver, address target, address dstToken, uint256 swapOutAmount, uint256 callAmount) {\\n        bool result;\\n        swapOutAmount = _amount;\\n        dstToken = _srcToken;\\n        if (_swapData.length > 0) {\\n            Helper.SwapParam memory swap = abi.decode(_swapData, (Helper.SwapParam));\\n            (result, dstToken, swapOutAmount) = _makeSwap(_amount, _srcToken, swap);\\n            require(result, ErrorMessage.SWAP_FAIL);\\n            require(swapOutAmount >= swap.minReturnAmount, ErrorMessage.RECEIVE_LOW);\\n            receiver = swap.receiver;\\n            target = swap.executor;\\n        }\\n\\n        if (_callbackData.length > 0) {\\n            Helper.CallbackParam memory callParam = abi.decode(_callbackData, (Helper.CallbackParam));\\n            (result, callAmount) = _callBack(swapOutAmount, dstToken, callParam);\\n            require(result, ErrorMessage.CALL_FAIL);\\n            receiver = callParam.receiver;\\n            target = callParam.target;\\n        }\\n    }\\n\\n    function setFee(address _feeReceiver, uint256 _feeRate, uint256 _fixedFee) external onlyOwner {\\n        require(_feeReceiver != Helper.ZERO_ADDRESS, ErrorMessage.ZERO_ADDR);\\n\\n        require(_feeRate < FEE_DENOMINATOR);\\n\\n        feeReceiver = _feeReceiver;\\n\\n        feeRate = _feeRate;\\n\\n        fixedFee = _fixedFee;\\n\\n        emit SetFee(_feeReceiver, _feeRate, fixedFee);\\n    }\\n\\n    function getFee(\\n        uint256 _amount,\\n        address _token,\\n        FeeType _feeType\\n    ) external view returns (address _feeReceiver, address _feeToken, uint256 _fee, uint256 _feeAfter) {\\n        if (feeReceiver == Helper.ZERO_ADDRESS) {\\n            return (Helper.ZERO_ADDRESS, Helper.ZERO_ADDRESS, 0, _amount);\\n        }\\n        if (_feeType == FeeType.FIXED) {\\n            _feeToken = Helper.ZERO_ADDRESS;\\n            _fee = fixedFee;\\n            if (!Helper._isNative(_token)) {\\n                _feeAfter = _amount;\\n            } else {\\n                _feeAfter = _amount - _fee;\\n            }\\n        } else {\\n            _feeToken = _token;\\n            _fee = (_amount * feeRate) / FEE_DENOMINATOR;\\n            _feeAfter = _amount - _fee;\\n        }\\n        _feeReceiver = feeReceiver;\\n    }\\n\\n    function getInputBeforeFee(\\n        uint256 _amountAfterFee,\\n        address _token,\\n        FeeType _feeType\\n    ) external view returns (uint256 _input, address _feeReceiver, address _feeToken, uint256 _fee) {\\n        if (feeReceiver == Helper.ZERO_ADDRESS) {\\n            return (_amountAfterFee, Helper.ZERO_ADDRESS, Helper.ZERO_ADDRESS, 0);\\n        }\\n        if (_feeType == FeeType.FIXED) {\\n            _feeToken = Helper.ZERO_ADDRESS;\\n            _fee = fixedFee;\\n            if (!Helper._isNative(_token)) {\\n                _input = _amountAfterFee;\\n            } else {\\n                _input = _amountAfterFee + _fee;\\n            }\\n        } else {\\n            _feeToken = _token;\\n            _input = (_amountAfterFee * FEE_DENOMINATOR) / (FEE_DENOMINATOR - feeRate) + 1;\\n            _fee = _input - _amountAfterFee;\\n        }\\n        _feeReceiver = feeReceiver;\\n    }\\n\\n    function _collectFee(\\n        address _token,\\n        uint256 _amount,\\n        bytes32 transferId,\\n        FeeType _feeType\\n    ) internal returns (uint256 _fee, uint256 _remain) {\\n        if (feeReceiver == Helper.ZERO_ADDRESS) {\\n            _remain = _amount;\\n            return (_fee, _remain);\\n        }\\n        if (_feeType == FeeType.FIXED) {\\n            _fee = fixedFee;\\n            if (Helper._isNative(_token)) {\\n                require(msg.value > fixedFee, ErrorMessage.FEE_LOWER);\\n                _remain = _amount - _fee;\\n            } else {\\n                require(msg.value >= fixedFee, ErrorMessage.FEE_MISMATCH);\\n                _remain = _amount;\\n            }\\n            _token = Helper.NATIVE_ADDRESS;\\n        } else {\\n            _fee = (_amount * feeRate) / FEE_DENOMINATOR;\\n            _remain = _amount - _fee;\\n        }\\n        if (_fee > 0) {\\n            Helper._transfer(_token, feeReceiver, _fee);\\n            emit CollectFee(_token, feeReceiver, _fee, transferId, _feeType);\\n        }\\n    }\\n\\n    function _callBack(\\n        uint256 _amount,\\n        address _token,\\n        Helper.CallbackParam memory _callParam\\n    ) internal returns (bool _result, uint256 _callAmount) {\\n        require(approved[_callParam.target], ErrorMessage.NO_APPROVE);\\n        (_result, _callAmount) = Helper._callBack(_amount, _token, _callParam);\\n        require(address(this).balance >= nativeBalanceBeforeExec, ErrorMessage.NATIVE_VALUE_OVERSPEND);\\n    }\\n\\n    function _makeSwap(\\n        uint256 _amount,\\n        address _srcToken,\\n        Helper.SwapParam memory _swap\\n    ) internal returns (bool _result, address _dstToken, uint256 _returnAmount) {\\n        require(approved[_swap.executor] || _swap.executor == wToken, ErrorMessage.NO_APPROVE);\\n        if (_swap.executor == wToken) {\\n            bytes4 sig = Helper._getFirst4Bytes(_swap.data);\\n            //0x2e1a7d4d -> withdraw(uint256 wad)  0xd0e30db0 -> deposit()\\n            if (sig != bytes4(0x2e1a7d4d) && sig != bytes4(0xd0e30db0)) {\\n                return (false, _srcToken, 0);\\n            }\\n        }\\n        (_result, _dstToken, _returnAmount) = Helper._makeSwap(_amount, _srcToken, _swap);\\n    }\\n\\n    function setAuthorization(address[] calldata _executors, bool _flag) external onlyOwner {\\n        require(_executors.length > 0, ErrorMessage.DATA_EMPTY);\\n        for (uint i = 0; i < _executors.length; i++) {\\n            require(_executors[i].isContract(), ErrorMessage.NOT_CONTRACT);\\n            approved[_executors[i]] = _flag;\\n            emit Approve(_executors[i], _flag);\\n        }\\n    }\\n\\n    function rescueFunds(address _token, uint256 _amount) external onlyOwner {\\n        Helper._transfer(_token, msg.sender, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ButterRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@butternetwork/bridge/contracts/interface/IButterMosV2.sol\\\";\\nimport \\\"@butternetwork/bridge/contracts/interface/IButterReceiver.sol\\\";\\nimport \\\"./lib/ErrorMessage.sol\\\";\\nimport \\\"./abstract/Router.sol\\\";\\nimport \\\"./lib/Helper.sol\\\";\\n\\ncontract ButterRouterV2 is Router, ReentrancyGuard, IButterReceiver {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address public mosAddress;\\n\\n    uint256 public gasForReFund = 80000;\\n\\n    struct BridgeParam {\\n        uint256 toChain;\\n        bytes receiver;\\n        bytes data;\\n    }\\n\\n    event SetMos(address indexed mos);\\n    event SetGasForReFund(uint256 indexed _gasForReFund);\\n    event SwapAndBridge(\\n        bytes32 indexed orderId,\\n        address indexed from,\\n        address indexed originToken,\\n        address bridgeToken,\\n        uint256 originAmount,\\n        uint256 bridgeAmount,\\n        uint256 fromChain,\\n        uint256 toChain,\\n        bytes to\\n    );\\n\\n    event RemoteSwapAndCall(\\n        bytes32 indexed orderId,\\n        address indexed receiver,\\n        address indexed target,\\n        address originToken,\\n        address swapToken,\\n        uint256 originAmount,\\n        uint256 swapAmount,\\n        uint256 callAmount,\\n        uint256 fromChain,\\n        uint256 toChain,\\n        bytes from\\n    );\\n\\n    constructor(address _mosAddress, address _owner, address _wToken) payable Router(_owner, _wToken) {\\n        _setMosAddress(_mosAddress);\\n    }\\n\\n    function swapAndBridge(\\n        address _srcToken,\\n        uint256 _amount,\\n        bytes calldata _swapData,\\n        bytes calldata _bridgeData,\\n        bytes calldata _permitData\\n    ) external payable nonReentrant transferIn(_srcToken, _amount, _permitData) {\\n        require(_swapData.length + _bridgeData.length > 0, ErrorMessage.DATA_EMPTY);\\n        SwapTemp memory swapTemp;\\n        swapTemp.srcToken = _srcToken;\\n        swapTemp.srcAmount = _amount;\\n        swapTemp.swapToken = _srcToken;\\n        swapTemp.swapAmount = _amount;\\n        bytes memory receiver;\\n        if (_swapData.length > 0) {\\n            Helper.SwapParam memory swap = abi.decode(_swapData, (Helper.SwapParam));\\n            bool result;\\n            (result, swapTemp.swapToken, swapTemp.swapAmount) = _makeSwap(swapTemp.srcAmount, swapTemp.srcToken, swap);\\n            require(result, ErrorMessage.SWAP_FAIL);\\n            require(swapTemp.swapAmount >= swap.minReturnAmount, ErrorMessage.RECEIVE_LOW);\\n            if (_bridgeData.length == 0 && swapTemp.swapAmount > 0) {\\n                receiver = abi.encodePacked(swap.receiver);\\n                Helper._transfer(swapTemp.swapToken, swap.receiver, swapTemp.swapAmount);\\n            }\\n        }\\n        bytes32 orderId;\\n        if (_bridgeData.length > 0) {\\n            BridgeParam memory bridge = abi.decode(_bridgeData, (BridgeParam));\\n            swapTemp.toChain = bridge.toChain;\\n            receiver = bridge.receiver;\\n            orderId = _doBridge(msg.sender, swapTemp.swapToken, swapTemp.swapAmount, bridge);\\n        }\\n        emit SwapAndBridge(\\n            orderId,\\n            msg.sender,\\n            swapTemp.srcToken,\\n            swapTemp.swapToken,\\n            swapTemp.srcAmount,\\n            swapTemp.swapAmount,\\n            block.chainid,\\n            swapTemp.toChain,\\n            receiver\\n        );\\n    }\\n\\n    function swapAndCall(\\n        bytes32 _transferId,\\n        address _srcToken,\\n        uint256 _amount,\\n        FeeType _feeType,\\n        bytes calldata _swapData,\\n        bytes calldata _callbackData,\\n        bytes calldata _permitData\\n    ) external payable nonReentrant transferIn(_srcToken, _amount, _permitData) {\\n        SwapTemp memory swapTemp;\\n        swapTemp.srcToken = _srcToken;\\n        swapTemp.srcAmount = _amount;\\n        swapTemp.transferId = _transferId;\\n        swapTemp.feeType = _feeType;\\n        require(_swapData.length + _callbackData.length > 0, ErrorMessage.DATA_EMPTY);\\n        (, swapTemp.swapAmount) = _collectFee(\\n            swapTemp.srcToken,\\n            swapTemp.srcAmount,\\n            swapTemp.transferId,\\n            swapTemp.feeType\\n        );\\n\\n        (\\n            swapTemp.receiver,\\n            swapTemp.target,\\n            swapTemp.swapToken,\\n            swapTemp.swapAmount,\\n            swapTemp.callAmount\\n        ) = _doSwapAndCall(_swapData, _callbackData, swapTemp.srcToken, swapTemp.swapAmount);\\n\\n        if (swapTemp.swapAmount > swapTemp.callAmount) {\\n            Helper._transfer(swapTemp.swapToken, swapTemp.receiver, (swapTemp.swapAmount - swapTemp.callAmount));\\n        }\\n\\n        emit SwapAndCall(\\n            msg.sender,\\n            swapTemp.receiver,\\n            swapTemp.target,\\n            swapTemp.transferId,\\n            swapTemp.srcToken,\\n            swapTemp.swapToken,\\n            swapTemp.srcAmount,\\n            swapTemp.swapAmount,\\n            swapTemp.callAmount\\n        );\\n    }\\n\\n    // _srcToken must erc20 Token or wToken\\n    function onReceived(\\n        bytes32 _orderId,\\n        address _srcToken,\\n        uint256 _amount,\\n        uint256 _fromChain,\\n        bytes calldata _from,\\n        bytes calldata _swapAndCall\\n    ) external nonReentrant {\\n        SwapTemp memory swapTemp;\\n        swapTemp.srcToken = _srcToken;\\n        swapTemp.srcAmount = _amount;\\n        swapTemp.swapToken = _srcToken;\\n        swapTemp.swapAmount = _amount;\\n        swapTemp.fromChain = _fromChain;\\n        swapTemp.toChain = block.chainid;\\n        swapTemp.from = _from;\\n        nativeBalanceBeforeExec = address(this).balance;\\n        require(msg.sender == mosAddress, ErrorMessage.MOS_ONLY);\\n        require(Helper._getBalance(swapTemp.srcToken, address(this)) >= _amount, ErrorMessage.RECEIVE_LOW);\\n        (bytes memory _swapData, bytes memory _callbackData) = abi.decode(_swapAndCall, (bytes, bytes));\\n        require(_swapData.length + _callbackData.length > 0, ErrorMessage.DATA_EMPTY);\\n        bool result = true;\\n        uint256 minExecGas = gasForReFund * 2;\\n        if (_swapData.length > 0) {\\n            Helper.SwapParam memory swap = abi.decode(_swapData, (Helper.SwapParam));\\n            swapTemp.receiver = swap.receiver;\\n            if (gasleft() > minExecGas) {\\n                try\\n                    this.doRemoteSwap{gas: gasleft() - gasForReFund}(swap, swapTemp.srcToken, swapTemp.srcAmount)\\n                returns (address target, address dstToken, uint256 dstAmount) {\\n                    swapTemp.swapToken = dstToken;\\n                    swapTemp.target = target;\\n                    swapTemp.swapAmount = dstAmount;\\n                } catch {\\n                    result = false;\\n                }\\n            }\\n        }\\n\\n        if (_callbackData.length > 0) {\\n            Helper.CallbackParam memory callParam = abi.decode(_callbackData, (Helper.CallbackParam));\\n            if (swapTemp.receiver == address(0)) {\\n                swapTemp.receiver = callParam.receiver;\\n            }\\n            if (result && gasleft() > minExecGas) {\\n                try\\n                    this.doRemoteCall{gas: gasleft() - gasForReFund}(callParam, swapTemp.swapToken, swapTemp.swapAmount)\\n                returns (address target, uint256 callAmount) {\\n                    swapTemp.target = target;\\n                    swapTemp.callAmount = callAmount;\\n                    swapTemp.receiver = callParam.receiver;\\n                } catch {}\\n            }\\n        }\\n        if (swapTemp.swapAmount > swapTemp.callAmount) {\\n            Helper._transfer(swapTemp.swapToken, swapTemp.receiver, (swapTemp.swapAmount - swapTemp.callAmount));\\n        }\\n        emit RemoteSwapAndCall(\\n            _orderId,\\n            swapTemp.receiver,\\n            swapTemp.target,\\n            swapTemp.srcToken,\\n            swapTemp.swapToken,\\n            swapTemp.srcAmount,\\n            swapTemp.swapAmount,\\n            swapTemp.callAmount,\\n            swapTemp.fromChain,\\n            swapTemp.toChain,\\n            swapTemp.from\\n        );\\n    }\\n\\n    function doRemoteSwap(\\n        Helper.SwapParam memory _swap,\\n        address _srcToken,\\n        uint256 _amount\\n    ) external returns (address target, address dstToken, uint256 dstAmount) {\\n        require(msg.sender == address(this));\\n        bool result;\\n        (result, dstToken, dstAmount) = _makeSwap(_amount, _srcToken, _swap);\\n        require(result, ErrorMessage.SWAP_FAIL);\\n        require(dstAmount >= _swap.minReturnAmount, ErrorMessage.RECEIVE_LOW);\\n        target = _swap.executor;\\n    }\\n\\n    function doRemoteCall(\\n        Helper.CallbackParam memory _callParam,\\n        address _callToken,\\n        uint256 _amount\\n    ) external returns (address target, uint256 callAmount) {\\n        require(msg.sender == address(this));\\n        bool result;\\n        (result, callAmount) = _callBack(_amount, _callToken, _callParam);\\n        require(result, ErrorMessage.CALL_FAIL);\\n        target = _callParam.target;\\n    }\\n\\n    function _doBridge(\\n        address _sender,\\n        address _token,\\n        uint256 _value,\\n        BridgeParam memory _bridge\\n    ) internal returns (bytes32 _orderId) {\\n        if (Helper._isNative(_token)) {\\n            _orderId = IButterMosV2(mosAddress).swapOutNative{value: _value}(\\n                _sender,\\n                _bridge.receiver,\\n                _bridge.toChain,\\n                _bridge.data\\n            );\\n        } else {\\n            IERC20(_token).safeApprove(mosAddress, _value);\\n            _orderId = IButterMosV2(mosAddress).swapOutToken(\\n                _sender,\\n                _token,\\n                _bridge.receiver,\\n                _value,\\n                _bridge.toChain,\\n                _bridge.data\\n            );\\n        }\\n    }\\n\\n    function setGasForReFund(uint256 _gasForReFund) external onlyOwner {\\n        gasForReFund = _gasForReFund;\\n\\n        emit SetGasForReFund(_gasForReFund);\\n    }\\n\\n    function setMosAddress(address _mosAddress) public onlyOwner returns (bool) {\\n        _setMosAddress(_mosAddress);\\n        return true;\\n    }\\n\\n    function _setMosAddress(address _mosAddress) internal returns (bool) {\\n        require(_mosAddress.isContract(), ErrorMessage.NOT_CONTRACT);\\n        mosAddress = _mosAddress;\\n        emit SetMos(_mosAddress);\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ErrorMessage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nlibrary ErrorMessage {\\n    string internal constant ZERO_IN = \\\"ButterRouterV2: zero in\\\";\\n\\n    string internal constant FEE_MISMATCH = \\\"ButterRouterV2: fee mismatch\\\";\\n\\n    string internal constant FEE_LOWER = \\\"ButterRouterV2: lower than fee\\\";\\n\\n    string internal constant ZERO_ADDR = \\\"ButterRouterV2: zero addr\\\";\\n\\n    string internal constant NOT_CONTRACT = \\\"ButterRouterV2: not contract\\\";\\n\\n    string internal constant BRIDGE_REQUIRE = \\\"ButterRouterV2: bridge data required\\\";\\n\\n    string internal constant RECEIVE_LOW = \\\"ButterRouterV2: receive too low\\\";\\n\\n    string internal constant SWAP_FAIL = \\\"ButterRouterV2: swap failed\\\";\\n\\n    string internal constant SWAP_REQUIRE = \\\"ButterRouterV2: swap data required\\\";\\n\\n    string internal constant CALL_AMOUNT_INVALID = \\\"ButterRouterV2: callback amount invalid\\\";\\n\\n    string internal constant CALL_FAIL = \\\"ButterRouterV2: callback failed\\\";\\n\\n    string internal constant MOS_ONLY = \\\"ButterRouterV2: mos only\\\";\\n\\n    string internal constant DATA_EMPTY = \\\"ButterRouterV2: data empty\\\";\\n\\n    string internal constant NO_APPROVE = \\\"ButterRouterV2: not approved\\\";\\n\\n    string internal constant NATIVE_VALUE_OVERSPEND = \\\"ButterRouterV2: native value overspend\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nlibrary Helper {\\n    using SafeERC20 for IERC20;\\n    address internal constant ZERO_ADDRESS = address(0);\\n    address internal constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    struct CallbackParam {\\n        address target;\\n        address approveTo;\\n        uint256 offset;\\n        uint256 extraNativeAmount;\\n        address receiver;\\n        bytes data;\\n    }\\n\\n    struct SwapParam {\\n        uint8 dexType;\\n        address executor;\\n        address approveTo;\\n        address receiver;\\n        address dstToken;\\n        uint256 minReturnAmount;\\n        bytes data;\\n    }\\n\\n    function _isNative(address token) internal pure returns (bool) {\\n        return (token == ZERO_ADDRESS || token == NATIVE_ADDRESS);\\n    }\\n\\n    function _getBalance(address _token, address _account) internal view returns (uint256) {\\n        if (_isNative(_token)) {\\n            return _account.balance;\\n        } else {\\n            return IERC20(_token).balanceOf(_account);\\n        }\\n    }\\n\\n    function _transfer(address _token, address _to, uint256 _amount) internal {\\n        if (_isNative(_token)) {\\n            Address.sendValue(payable(_to), _amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function _safeWithdraw(address _wToken, uint _value) internal returns (bool) {\\n        (bool success, bytes memory data) = _wToken.call(abi.encodeWithSelector(0x2e1a7d4d, _value));\\n        return (success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    function _getFirst4Bytes(bytes memory data) internal pure returns (bytes4 outBytes4) {\\n        if (data.length == 0) {\\n            return 0x0;\\n        }\\n        assembly {\\n            outBytes4 := mload(add(data, 32))\\n        }\\n    }\\n\\n    function _makeSwap(\\n        uint256 _amount,\\n        address _srcToken,\\n        SwapParam memory _swap\\n    ) internal returns (bool _result, address _dstToken, uint256 _returnAmount) {\\n        _dstToken = _swap.dstToken;\\n        uint256 nativeValue = 0;\\n        bool isNative = Helper._isNative(_srcToken);\\n        if (isNative) {\\n            nativeValue = _amount;\\n        } else {\\n            IERC20(_srcToken).safeApprove(_swap.approveTo, 0);\\n            IERC20(_srcToken).safeApprove(_swap.approveTo, _amount);\\n        }\\n        _returnAmount = Helper._getBalance(_dstToken, address(this));\\n\\n        (_result, ) = _swap.executor.call{value: nativeValue}(_swap.data);\\n\\n        _returnAmount = Helper._getBalance(_dstToken, address(this)) - _returnAmount;\\n\\n        if (!isNative) {\\n            IERC20(_srcToken).safeApprove(_swap.approveTo, 0);\\n        }\\n    }\\n\\n    function _callBack(\\n        uint256 _amount,\\n        address _token,\\n        CallbackParam memory _callParam\\n    ) internal returns (bool _result, uint256 _callAmount) {\\n        _callAmount = Helper._getBalance(_token, address(this));\\n        uint256 offset = _callParam.offset;\\n        bytes memory callDatas = _callParam.data;\\n        if (offset != 0) {\\n            assembly {\\n                mstore(add(callDatas, offset), _amount)\\n            }\\n        }\\n        if (Helper._isNative(_token)) {\\n            (_result, ) = _callParam.target.call{value: _amount}(callDatas);\\n        } else {\\n            if (_amount != 0) IERC20(_token).safeIncreaseAllowance(_callParam.approveTo, _amount);\\n            // this contract not save money make sure send value can cover this\\n            (_result, ) = _callParam.target.call{value: _callParam.extraNativeAmount}(callDatas);\\n            if (_amount != 0) IERC20(_token).safeApprove(_callParam.approveTo, 0);\\n        }\\n        _callAmount = _callAmount - Helper._getBalance(_token, address(this));\\n    }\\n\\n    function _permit(bytes memory _data) internal {\\n        (\\n            address token,\\n            address owner,\\n            address spender,\\n            uint256 value,\\n            uint256 deadline,\\n            uint8 v,\\n            bytes32 r,\\n            bytes32 s\\n        ) = abi.decode(_data, (address, address, address, uint256, uint256, uint8, bytes32, bytes32));\\n\\n        SafeERC20.safePermit(IERC20Permit(token), owner, spender, value, deadline, v, r, s);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mosAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wToken\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum Router.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"CollectFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"}],\"name\":\"RemoteSwapAndCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fixedf\",\"type\":\"uint256\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_gasForReFund\",\"type\":\"uint256\"}],\"name\":\"SetGasForReFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mos\",\"type\":\"address\"}],\"name\":\"SetMos\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"}],\"name\":\"SwapAndBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"}],\"name\":\"SwapAndCall\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helper.CallbackParam\",\"name\":\"_callParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_callToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doRemoteCall\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"callAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"dexType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Helper.SwapParam\",\"name\":\"_swap\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doRemoteSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForReFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum Router.FeeType\",\"name\":\"_feeType\",\"type\":\"uint8\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeAfter\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum Router.FeeType\",\"name\":\"_feeType\",\"type\":\"uint8\"}],\"name\":\"getInputBeforeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_input\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mosAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromChain\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_swapAndCall\",\"type\":\"bytes\"}],\"name\":\"onReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_executors\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasForReFund\",\"type\":\"uint256\"}],\"name\":\"setGasForReFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mosAddress\",\"type\":\"address\"}],\"name\":\"setMosAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_bridgeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_permitData\",\"type\":\"bytes\"}],\"name\":\"swapAndBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Router.FeeType\",\"name\":\"_feeType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_callbackData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_permitData\",\"type\":\"bytes\"}],\"name\":\"swapAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ButterRouterV2", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380000000000000000000000000df3f1ee5baf55055980887aad79f6fe6e3302d93000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}