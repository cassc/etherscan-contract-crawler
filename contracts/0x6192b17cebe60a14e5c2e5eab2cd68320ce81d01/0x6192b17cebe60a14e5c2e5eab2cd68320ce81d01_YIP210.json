{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurvePool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICurvePool {\\r\\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external payable;\\r\\n\\r\\n    function exchange(\\r\\n        int128 i,\\r\\n        int128 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy,\\r\\n        bool use_eth\\r\\n    ) external payable;\\r\\n\\r\\n    function coins(uint256 i) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface ICurvePool2 {\\r\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\\r\\n\\r\\n    function exchange(\\r\\n        uint256 i,\\r\\n        uint256 j,\\r\\n        uint256 dx,\\r\\n        uint256 min_dy,\\r\\n        bool use_eth\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILido.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Liquid staking pool\\r\\n *\\r\\n * For the high-level description of the pool operation please refer to the paper.\\r\\n * Pool manages withdrawal keys and fees. It receives ether submitted by users on the ETH 1 side\\r\\n * and stakes it via the deposit_contract.sol contract. It doesn't hold ether on it's balance,\\r\\n * only a small portion (buffer) of it.\\r\\n * It also mints new tokens for rewards generated at the ETH 2.0 side.\\r\\n *\\r\\n * At the moment withdrawals are not possible in the beacon chain and there's no workaround.\\r\\n * Pool will be upgraded to an actual implementation when withdrawals are enabled\\r\\n * (Phase 1.5 or 2 of Eth2 launch, likely late 2022 or 2023).\\r\\n */\\r\\ninterface ILido is IERC20 {\\r\\n    // User functions\\r\\n\\r\\n    /**\\r\\n     * @notice Adds eth to the pool\\r\\n     * @return StETH Amount of StETH generated\\r\\n     */\\r\\n    function submit(address _referral) external payable returns (uint256 StETH);\\r\\n\\r\\n    // Records a deposit made by a user\\r\\n    event Submitted(address indexed sender, uint256 amount, address referral);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH9.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH9 is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/YIP210.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/ILido.sol\\\";\\nimport \\\"./interfaces/ICurvePool.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nerror YIP210__ExecutionDelayNotReached(uint256 timeToExecute);\\nerror YIP210__MinimumRebalancePercentageNotReached(uint256 percentage, uint256 minimumPercentage);\\nerror YIP210__OnlyGovCanCallFunction();\\n\\ncontract YIP210 {\\n    IWETH9 internal constant WETH = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    IERC20 internal constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n\\n    IERC20 internal constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n\\n    ILido internal constant STETH = ILido(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n\\n    ICurvePool internal constant CURVE_USDC_USDT_POOL =\\n        ICurvePool(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);\\n\\n    ICurvePool2 internal constant CURVE_USDT_ETH_POOL =\\n        ICurvePool2(0xD51a44d3FaE010294C616388b506AcdA1bfAAE46);\\n\\n    ICurvePool internal constant CURVE_ETH_STETH_POOL =\\n        ICurvePool(0xDC24316b9AE028F1497c275EB9192a3Ea0f67022);\\n\\n    address internal constant RESERVES = 0x97990B693835da58A281636296D2Bf02787DEa17;\\n    address internal constant GOV = 0x8b4f1616751117C38a0f84F9A146cca191ea3EC5;\\n\\n    uint256 public constant RATIO_PRECISION_MULTIPLIER = 10000;\\n\\n    // STETH = 70% ; USDC = 30%\\n    uint256 public constant RATIO_STETH_USDC = (70 * RATIO_PRECISION_MULTIPLIER) / 100;\\n    uint256 public constant RATIO_USDC_STETH = (30 * RATIO_PRECISION_MULTIPLIER) / 100;\\n\\n    // Max slippage = 2% (Increased slippage due to price impact and chainlink oracle != actual curve price)\\n    uint256 public constant SLIPPAGE_TOLERANCE = (2 * RATIO_PRECISION_MULTIPLIER) / 100;\\n\\n    uint256 public constant MINIMUM_REBALANCE_PERCENTAGE = (75 * RATIO_PRECISION_MULTIPLIER) / 1000;\\n\\n    // Chainlink price feeds for ETH and USDC\\n    AggregatorV3Interface internal constant STETH_USD_PRICE_FEED =\\n        AggregatorV3Interface(0xCfE54B5cD566aB89272946F602D76Ea879CAb4a8);\\n    AggregatorV3Interface internal constant USDC_USD_PRICE_FEED =\\n        AggregatorV3Interface(0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6);\\n\\n    uint256 public constant EXECUTION_DELAY = (1 days) * 30; // 1 month\\n    uint256 public lastExecuted;\\n\\n    event RebalancedUSDCToStETH(uint256 stEthSpent, uint256 usdcReceived);\\n    event RebalancedStETHToUSDC(uint256 usdcSpent, uint256 stEthReceived);\\n\\n    modifier onlyGov() {\\n        if (msg.sender != GOV) revert YIP210__OnlyGovCanCallFunction();\\n        _;\\n    }\\n\\n    function execute() public onlyGov {\\n        if (block.timestamp - lastExecuted < EXECUTION_DELAY)\\n            revert YIP210__ExecutionDelayNotReached(\\n                lastExecuted + EXECUTION_DELAY - block.timestamp\\n            );\\n\\n        uint256 stEthBalance = STETH.balanceOf(RESERVES);\\n        uint256 usdcBalance = USDC.balanceOf(RESERVES);\\n\\n        (uint256 stEthPercentage, uint256 usdcPercentage) = getStETHAndUSDCRatios();\\n\\n        if (stEthPercentage > RATIO_STETH_USDC) {\\n            if (stEthPercentage - RATIO_STETH_USDC < MINIMUM_REBALANCE_PERCENTAGE)\\n                revert YIP210__MinimumRebalancePercentageNotReached(\\n                    stEthPercentage,\\n                    MINIMUM_REBALANCE_PERCENTAGE\\n                );\\n\\n            uint256 stEthPercentageToSell = (RATIO_PRECISION_MULTIPLIER *\\n                (stEthPercentage - RATIO_STETH_USDC)) / stEthPercentage;\\n\\n            uint256 stEthToSwap = (stEthPercentageToSell * stEthBalance) /\\n                RATIO_PRECISION_MULTIPLIER;\\n            STETH.transferFrom(RESERVES, address(this), stEthToSwap);\\n\\n            // Slippage math based on chainlink price feeds with 0.1% slippage tolerance\\n            // math is = sethValue (with 18 decimals) / usdcPrice (with 18 decimals) * 10\u2076 => usdc (with 6 decimals)\\n            uint256 usdcExpected = (getStETHConversionRate(stEthToSwap) * 10 ** 6) /\\n                getPrice(USDC_USD_PRICE_FEED);\\n            uint256 minAmountOut = usdcExpected -\\n                ((usdcExpected * SLIPPAGE_TOLERANCE) / RATIO_PRECISION_MULTIPLIER);\\n\\n            uint256 usdcReceived = curveSwapStETHToUSDC(stEthToSwap, minAmountOut);\\n\\n            emit RebalancedStETHToUSDC(stEthToSwap, usdcReceived);\\n\\n            USDC.transfer(RESERVES, usdcReceived);\\n        } else if (usdcPercentage > RATIO_USDC_STETH) {\\n            if (usdcPercentage - RATIO_USDC_STETH < MINIMUM_REBALANCE_PERCENTAGE)\\n                revert YIP210__MinimumRebalancePercentageNotReached(\\n                    usdcPercentage,\\n                    MINIMUM_REBALANCE_PERCENTAGE\\n                );\\n\\n            uint256 usdcPercentageToSell = (RATIO_PRECISION_MULTIPLIER *\\n                (usdcPercentage - RATIO_USDC_STETH)) / usdcPercentage;\\n\\n            uint256 usdcToSwap = (usdcPercentageToSell * usdcBalance) / RATIO_PRECISION_MULTIPLIER;\\n            USDC.transferFrom(RESERVES, address(this), usdcToSwap);\\n\\n            uint256 stETHExpected = (getUSDCConversionRate(usdcToSwap) * 10 ** 18) /\\n                getPrice(STETH_USD_PRICE_FEED);\\n            uint256 minAmountOut = stETHExpected -\\n                ((stETHExpected * SLIPPAGE_TOLERANCE) / RATIO_PRECISION_MULTIPLIER);\\n\\n            swapUSDCtoETH(usdcToSwap);\\n            depositETHToLido();\\n            uint256 stEthReceived = STETH.balanceOf(address(this));\\n\\n            // Ensuring slippage tolerance\\n            require(stEthReceived >= minAmountOut, \\\"YIP210::execute: Slippage tolerance not met\\\");\\n\\n            emit RebalancedUSDCToStETH(usdcToSwap, stEthReceived);\\n\\n            STETH.transfer(RESERVES, stEthReceived);\\n        } else {\\n            revert YIP210__MinimumRebalancePercentageNotReached(\\n                usdcPercentage,\\n                MINIMUM_REBALANCE_PERCENTAGE\\n            );\\n        }\\n\\n        lastExecuted = block.timestamp;\\n    }\\n\\n    function depositWETHIntoStETH() public onlyGov {\\n        uint256 wethBalance = WETH.balanceOf(RESERVES);\\n        WETH.transferFrom(RESERVES, address(this), wethBalance);\\n        WETH.withdraw(wethBalance);\\n        depositETHToLido();\\n        STETH.transfer(RESERVES, STETH.balanceOf(address(this)));\\n    }\\n\\n    function getStETHAndUSDCRatios() public view returns (uint256, uint256) {\\n        uint256 stEthBalance = STETH.balanceOf(RESERVES);\\n        uint256 usdcBalance = USDC.balanceOf(RESERVES);\\n\\n        uint256 stEthValue = getStETHConversionRate(stEthBalance);\\n        uint256 usdcValue = getUSDCConversionRate(usdcBalance);\\n\\n        uint256 totalValue = stEthValue + usdcValue;\\n\\n        uint256 stEthPercentage = (stEthValue * RATIO_PRECISION_MULTIPLIER) / totalValue;\\n\\n        uint256 usdcPercentage = (usdcValue * RATIO_PRECISION_MULTIPLIER) / totalValue;\\n\\n        return (stEthPercentage, usdcPercentage);\\n    }\\n\\n    function curveSwapStETHToUSDC(uint256 amount, uint256 minAmountOut) internal returns (uint256) {\\n        STETH.approve(address(CURVE_ETH_STETH_POOL), amount);\\n        CURVE_ETH_STETH_POOL.exchange(1, 0, amount, 0);\\n\\n        uint256 amountETH = address(this).balance;\\n        CURVE_USDT_ETH_POOL.exchange{value: amountETH}(2, 0, amountETH, 0, true);\\n\\n        uint256 amountUSDT = USDT.balanceOf(address(this));\\n        // @dev using transferHelper due to USDT lack of return value\\n        TransferHelper.safeApprove(address(USDT), address(CURVE_USDC_USDT_POOL), amountUSDT);\\n        CURVE_USDC_USDT_POOL.exchange(2, 1, amountUSDT, minAmountOut);\\n        return USDC.balanceOf(address(this));\\n    }\\n\\n    function swapUSDCtoETH(uint256 amount) internal {\\n        USDC.approve(address(CURVE_USDC_USDT_POOL), amount);\\n        CURVE_USDC_USDT_POOL.exchange(1, 2, amount, 0);\\n\\n        uint256 amountUSDT = USDT.balanceOf(address(this));\\n        TransferHelper.safeApprove(address(USDT), address(CURVE_USDT_ETH_POOL), amountUSDT);\\n\\n        CURVE_USDT_ETH_POOL.exchange(0, 2, amountUSDT, 0, true);\\n    }\\n\\n    function depositETHToLido() internal returns (uint256) {\\n        return STETH.submit{value: address(this).balance}(address(0));\\n    }\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    function getStETHConversionRate(uint256 assetAmount) internal view returns (uint256) {\\n        uint256 assetPrice = getPrice(STETH_USD_PRICE_FEED);\\n        uint256 assetAmountInUsd = (assetPrice * assetAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return assetAmountInUsd;\\n    }\\n\\n    function getUSDCConversionRate(uint256 assetAmount) internal view returns (uint256) {\\n        uint256 assetPrice = getPrice(USDC_USD_PRICE_FEED);\\n        uint256 assetAmountInUsd = (assetPrice * assetAmount) / 1000000;\\n        // or (Both will do the same thing)\\n        // uint256 usdcAmountInUsd = (usdcPrice * usdcAmount) / 1e6; // 1 * 10 ** 6 == 1000000\\n        // the actual USDC/USD conversion rate, after adjusting the extra 0s.\\n        return assetAmountInUsd;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeToExecute\",\"type\":\"uint256\"}],\"name\":\"YIP210__ExecutionDelayNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumPercentage\",\"type\":\"uint256\"}],\"name\":\"YIP210__MinimumRebalancePercentageNotReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YIP210__OnlyGovCanCallFunction\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stEthReceived\",\"type\":\"uint256\"}],\"name\":\"RebalancedStETHToUSDC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stEthSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcReceived\",\"type\":\"uint256\"}],\"name\":\"RebalancedUSDCToStETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTION_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_REBALANCE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_PRECISION_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_STETH_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_USDC_STETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositWETHIntoStETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStETHAndUSDCRatios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YIP210", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}