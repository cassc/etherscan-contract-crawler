{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Dickungus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"./ERC404.sol\\\";\\r\\nimport \\\"./Metadata.sol\\\";\\r\\ncontract Dickungus is ERC404 {\\r\\n    \\r\\n   \\r\\n    // Color[] private goggleColors;\\r\\n    Metadata private metadata;\\r\\n     constructor(\\r\\n        address _owner\\r\\n    ) ERC404(\\\"Dickungus\\\", \\\"SUS\\\", 18, 8008, _owner) {\\r\\n        balanceOf[_owner] = 8008 * 10 ** 18;\\r\\n        setWhitelist(_owner, true);\\r\\n        metadata = new Metadata();\\r\\n    }  \\r\\n    \\r\\n    function tokenURI(uint256 id) public view override returns (string memory) {\\r\\n        // return string(abi.encodePacked(\\\"data:application/json;base64,\\\", string.concat(json, jsonPostImage)));\\r\\n        return metadata.makeURI(id);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"./Base64.sol\\\";\\r\\ncontract Metadata{\\r\\n\\r\\n     struct Color {\\r\\n\\t\\tstring primaryColor;\\r\\n\\t\\tstring name;\\r\\n\\t}\\r\\n    struct GoggleColor {\\r\\n\\t\\tbytes3 primaryColor;\\r\\n\\t\\tstring name;\\r\\n\\t}\\r\\n    Color[] private bodyColors;\\r\\n    GoggleColor[] private goggleColors;\\r\\n    constructor() {\\r\\n        \\r\\n        bodyColors.push(Color(\\\"#ff0000\\\", \\\"Red\\\"));\\r\\n        bodyColors.push(Color(\\\"#ff8000\\\", \\\"Orange\\\"));\\r\\n        bodyColors.push(Color(\\\"#80ff00\\\", \\\"Lime Green\\\"));\\r\\n        bodyColors.push(Color(\\\"#00ff00\\\", \\\"Green\\\"));\\r\\n        bodyColors.push(Color(\\\"#00ff80\\\", \\\"Teal\\\"));\\r\\n        bodyColors.push(Color(\\\"#00ffff\\\", \\\"Sky Blue\\\"));\\r\\n        bodyColors.push(Color(\\\"#0000ff\\\", \\\"Blue\\\"));\\r\\n        bodyColors.push(Color(\\\"#7f00ff\\\", \\\"Purple\\\"));\\r\\n        bodyColors.push(Color(\\\"#ff00ff\\\", \\\"Dark Pink\\\"));\\r\\n        bodyColors.push(Color(\\\"#ff007f\\\", \\\"Magenta\\\"));\\r\\n        bodyColors.push(Color(\\\"#ffffff\\\", \\\"White\\\"));  \\r\\n        bodyColors.push(Color(\\\"#000000\\\", \\\"Black\\\"));\\r\\n        bodyColors.push(Color(\\\"#ffff00\\\", \\\"Golden\\\"));\\r\\n        \\r\\n        goggleColors.push(GoggleColor(0xff0000, \\\"Red\\\"));\\r\\n        goggleColors.push(GoggleColor(0xff8000, \\\"Orange\\\"));\\r\\n        goggleColors.push(GoggleColor(0x80ff00, \\\"Lime Green\\\"));\\r\\n        goggleColors.push(GoggleColor(0x00ff00, \\\"Green\\\"));\\r\\n        goggleColors.push(GoggleColor(0x00ff80, \\\"Teal\\\"));\\r\\n        goggleColors.push(GoggleColor(0x00ffff, \\\"Sky Blue\\\"));\\r\\n        goggleColors.push(GoggleColor(0x0000ff, \\\"Blue\\\"));\\r\\n        goggleColors.push(GoggleColor(0x7f00ff, \\\"Purple\\\"));\\r\\n        goggleColors.push(GoggleColor(0xff00ff, \\\"Dark Pink\\\"));\\r\\n        goggleColors.push(GoggleColor(0xff007f, \\\"Magenta\\\"));\\r\\n        goggleColors.push(GoggleColor(0xffff00, \\\"Golden\\\"));\\r\\n    }\\r\\n    \\r\\n    function makeURI(uint256 id) external view returns (string memory) {\\r\\n        Color memory bodyColor = getColor(\\\"BODYCOLOR\\\", id);\\r\\n\\r\\n        Color memory bodyShadeColor =  getColor(\\\"BODYSHADE\\\", id);\\r\\n\\r\\n\\r\\n        GoggleColor memory goggleColor =  getGoggleColor(\\\"GOGGLE\\\", id);\\r\\n\\r\\n        string memory mediumGoggleColor = string.concat(\\\"#\\\",bytes3ToString(darkenColor(goggleColor.primaryColor,22)));\\r\\n        string memory darkGoggleColor =  string.concat(\\\"#\\\",bytes3ToString(darkenColor(goggleColor.primaryColor,44)));\\r\\n        string memory goggleColorStirng = string.concat(\\\"#\\\", bytes3ToString(goggleColor.primaryColor));\\r\\n        Color memory dickColor = getColor(\\\"DICK\\\", id);\\r\\n\\r\\n        \\r\\n          bytes memory part3 = abi.encodePacked(\\r\\n            //Body\\r\\n                '<rect x=\\\"120\\\" y=\\\"24\\\" width=\\\"168\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"96\\\" y=\\\"48\\\" width=\\\"216\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"120\\\" y=\\\"72\\\" width=\\\"48\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"120\\\" y=\\\"96\\\" width=\\\"24\\\" height=\\\"144\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"144\\\" y=\\\"192\\\" width=\\\"24\\\" height=\\\"96\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"168\\\" y=\\\"216\\\" width=\\\"144\\\" height=\\\"72\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"24\\\" y=\\\"144\\\" width=\\\"48\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"48\\\" y=\\\"168\\\" width=\\\"24\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                bodyColor.primaryColor,'\\\"/>'\\r\\n          );\\r\\n        bytes memory part4 = abi.encodePacked(\\r\\n            '<rect x=\\\"239\\\" y=\\\"409\\\" width=\\\"25\\\" height=\\\"47\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"24\\\" y=\\\"168\\\" width=\\\"24\\\" height=\\\"168\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"48\\\" y=\\\"192\\\" width=\\\"24\\\" height=\\\"144\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"96\\\" y=\\\"72\\\" width=\\\"24\\\" height=\\\"384\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"120\\\" y=\\\"240\\\" width=\\\"24\\\" height=\\\"72\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"264\\\" y=\\\"384\\\" width=\\\"25\\\" height=\\\"72\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"289\\\" y=\\\"361\\\" width=\\\"23\\\" height=\\\"95\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                //Glare\\r\\n                '<rect x=\\\"240\\\" y=\\\"96\\\" width=\\\"72\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                goggleColorStirng,'\\\"/>',\\r\\n                '<rect x=\\\"264\\\" y=\\\"120\\\" width=\\\"48\\\" height=\\\"25\\\" fill=\\\"',\\r\\n                goggleColorStirng,'\\\"/>',\\r\\n                '</svg>');\\r\\n        bytes memory part2 = abi.encodePacked( \\r\\n        //Middle Goggle\\r\\n                '<rect x=\\\"240\\\" y=\\\"120\\\" width=\\\"24\\\" height=\\\"48\\\" fill=\\\"',\\r\\n                mediumGoggleColor,'\\\"/>',\\r\\n                '<rect x=\\\"264\\\" y=\\\"145\\\" width=\\\"72\\\" height=\\\"23\\\" fill=\\\"',\\r\\n                mediumGoggleColor,'\\\"/>',\\r\\n                '<rect x=\\\"312\\\" y=\\\"96\\\" width=\\\"24\\\" height=\\\"49\\\" fill=\\\"',\\r\\n                mediumGoggleColor,'\\\"/>',\\r\\n                '<rect x=\\\"192\\\" y=\\\"96\\\" width=\\\"48\\\" height=\\\"72\\\" fill=\\\"',\\r\\n                mediumGoggleColor,'\\\"/>',\\r\\n                //Dick\\r\\n                '<rect x=\\\"144\\\" y=\\\"312\\\" width=\\\"264\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                dickColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"144\\\" y=\\\"336\\\" width=\\\"48\\\" height=\\\"48\\\" fill=\\\"',\\r\\n                dickColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"192\\\" y=\\\"336\\\" width=\\\"24\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                dickColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"216\\\" y=\\\"336\\\" width=\\\"48\\\" height=\\\"48\\\" fill=\\\"',\\r\\n                dickColor.primaryColor,'\\\"/>'\\r\\n\\r\\n              \\r\\n                );\\r\\n        bytes memory part1 =\\r\\n            abi.encodePacked(\\r\\n                '<svg width=\\\"432\\\" height=\\\"480\\\" viewBox=\\\"0 0 432 480\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\r\\n                //     Shaded Goggle \\r\\n                '<rect x=\\\"168\\\" y=\\\"96\\\" width=\\\"24\\\" height=\\\"96\\\" fill=\\\"',\\r\\n                darkGoggleColor,\\r\\n                '\\\"/>',\\r\\n                '<rect x=\\\"192\\\" y=\\\"168\\\" width=\\\"144\\\" height=\\\"24\\\" fill=\\\"',\\r\\n                darkGoggleColor,\\r\\n                '\\\"/>',\\r\\n              \\r\\n                //Outline'\\r\\n                '<rect y=\\\"144\\\" width=\\\"24\\\" height=\\\"192\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"24\\\" y=\\\"120\\\" width=\\\"48\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"72\\\" y=\\\"48\\\" width=\\\"24\\\" height=\\\"408\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"24\\\" y=\\\"336\\\" width=\\\"48\\\" height=\\\"23\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"96\\\" y=\\\"456\\\" width=\\\"72\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"144\\\" y=\\\"384\\\" width=\\\"48\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"168\\\" y=\\\"408\\\" width=\\\"24\\\" height=\\\"48\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"120\\\" y=\\\"312\\\" width=\\\"24\\\" height=\\\"72\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"144\\\" y=\\\"288\\\" width=\\\"264\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"408\\\" y=\\\"312\\\" width=\\\"24\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"264\\\" y=\\\"336\\\" width=\\\"144\\\" height=\\\"25\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"264\\\" y=\\\"361\\\" width=\\\"25\\\" height=\\\"23\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"312\\\" y=\\\"361\\\" width=\\\"24\\\" height=\\\"95\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"240\\\" y=\\\"456\\\" width=\\\"72\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"216\\\" y=\\\"408\\\" width=\\\"24\\\" height=\\\"48\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"216\\\" y=\\\"384\\\" width=\\\"48\\\" height=\\\"25\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"192\\\" y=\\\"359\\\" width=\\\"24\\\" height=\\\"25\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"168\\\" y=\\\"192\\\" width=\\\"193\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"312\\\" y=\\\"216\\\" width=\\\"24\\\" height=\\\"72\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"336\\\" y=\\\"96\\\" width=\\\"25\\\" height=\\\"96\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"312\\\" y=\\\"48\\\" width=\\\"24\\\" height=\\\"48\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"168\\\" y=\\\"72\\\" width=\\\"144\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"144\\\" y=\\\"96\\\" width=\\\"24\\\" height=\\\"96\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"288\\\" y=\\\"24\\\" width=\\\"24\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"120\\\" width=\\\"168\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                '<rect x=\\\"96\\\" y=\\\"24\\\" width=\\\"24\\\" height=\\\"24\\\" fill=\\\"black\\\"/>',\\r\\n                  //Shaded Body\\r\\n                '<rect x=\\\"120\\\" y=\\\"384\\\" width=\\\"24\\\" height=\\\"72\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>',\\r\\n                '<rect x=\\\"144\\\" y=\\\"408\\\" width=\\\"24\\\" height=\\\"48\\\" fill=\\\"',\\r\\n                bodyShadeColor.primaryColor,'\\\"/>'\\r\\n                );\\r\\n                \\r\\n                string memory jsonPostImage =string.concat(\\r\\n                '\\\",\\\"attributes\\\":[',\\r\\n                    '{',\\r\\n                        '\\\"trait_type\\\": \\\"Body Color\\\", ',\\r\\n                        '\\\"value\\\": \\\"', \\r\\n                        bodyColor.name, '\\\"',\\r\\n                    '}, ',\\r\\n                    '{',\\r\\n                        '\\\"trait_type\\\": \\\"Body Shade Color\\\", ',\\r\\n                        '\\\"value\\\": \\\"', \\r\\n                        bodyShadeColor.name, '\\\"',\\r\\n                    '}, ',\\r\\n                    '{',\\r\\n                        '\\\"trait_type\\\": \\\"Goggle Color\\\", ',\\r\\n                        '\\\"value\\\": \\\"', \\r\\n                        goggleColor.name, '\\\"',\\r\\n                    '}, ',\\r\\n                    '{',\\r\\n                        '\\\"trait_type\\\": \\\"Dick Color\\\", ',\\r\\n                        '\\\"value\\\": \\\"', \\r\\n                        dickColor.name, '\\\"',\\r\\n                    '}',\\r\\n                ']}'\\r\\n                );\\r\\n\\r\\n                string memory intermediate = \\r\\n                string(\\r\\n                            abi.encodePacked(\\r\\n                            '{\\\"name\\\": \\\"Dickungus #',\\r\\n                            toString(id),\\r\\n                            '\\\", \\\"description\\\": \\\"8008 randomly generated SUS Dickungus stored entirely on chain.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\r\\n                            Base64.encode(bytes(\\r\\n                                string(abi.encodePacked(part1\\r\\n                                , part2, part3 , part4\\r\\n                                ))\\r\\n                            )),\\r\\n                            jsonPostImage\\r\\n                            // '\\\"}'\\r\\n                        )\\r\\n                        );\\r\\n                string memory json = Base64.encode(\\r\\n                    bytes(\\r\\n                        intermediate\\r\\n                    ));\\r\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\r\\n\\r\\n    }\\r\\n\\r\\n     function random(string memory input) internal pure returns (uint8) {\\r\\n        return uint8(bytes1(keccak256(abi.encodePacked(input))));\\r\\n    }\\r\\n\\r\\n    function getColor(string memory seed, uint256 tokenId) public view returns (Color memory) {\\r\\n        uint8 rand = random(\\r\\n            string(abi.encodePacked(seed, toString(tokenId)))\\r\\n        );\\r\\n        if(rand < 200){\\r\\n            return bodyColors[rand % (bodyColors.length-2)];\\r\\n        }\\r\\n        return bodyColors[rand % bodyColors.length];\\r\\n    }\\r\\n    function getGoggleColor(string memory seed, uint256 tokenId) public view returns (GoggleColor memory) {\\r\\n        uint8 rand = random(\\r\\n            string(abi.encodePacked(seed, toString(tokenId)))\\r\\n        );\\r\\n        if(rand < 200){\\r\\n            return goggleColors[rand % (goggleColors.length-1)];\\r\\n        }\\r\\n        return goggleColors[rand % goggleColors.length];\\r\\n    }\\r\\n\\r\\n     function toString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n         function darkenColor(bytes3 color, uint percentage) internal pure returns (bytes3) {\\r\\n        // Extract each component\\r\\n        uint8 red = uint8(color[0]);\\r\\n        uint8 green = uint8(color[1]);\\r\\n        uint8 blue = uint8(color[2]);\\r\\n\\r\\n        // Calculate the new color components \\r\\n        red = uint8((uint256(red) * (100 - percentage)) / 100);\\r\\n        green = uint8((uint256(green) * (100 - percentage)) / 100);\\r\\n        blue = uint8((uint256(blue) * (100 - percentage)) / 100);\\r\\n\\r\\n        // Reassemble the color\\r\\n        return bytes3(bytes1(red)) | (bytes3(bytes1(green)) >> 8) | (bytes3(bytes1(blue)) >> 16);\\r\\n    }\\r\\n     function bytes3ToString(bytes3 b) public pure returns (string memory) {\\r\\n        bytes memory hexChars = \\\"0123456789abcdef\\\";\\r\\n        bytes memory str = new bytes(6); // 2 characters per byte\\r\\n\\r\\n        for (uint256 i = 0; i < 3; i++) {\\r\\n            str[i * 2] = hexChars[uint8(b[i]) >> 4];\\r\\n            str[1 + i * 2] = hexChars[uint8(b[i]) & 0x0f];\\r\\n        }\\r\\n\\r\\n        return string(str);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/ERC404.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\r\\n\\r\\n    error Unauthorized();\\r\\n    error InvalidOwner();\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    modifier onlyOwner() virtual {\\r\\n        if (msg.sender != owner) revert Unauthorized();\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        if (_owner == address(0)) revert InvalidOwner();\\r\\n\\r\\n        owner = _owner;\\r\\n\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address _owner) public virtual onlyOwner {\\r\\n        if (_owner == address(0)) revert InvalidOwner();\\r\\n\\r\\n        owner = _owner;\\r\\n\\r\\n        emit OwnershipTransferred(msg.sender, _owner);\\r\\n    }\\r\\n\\r\\n    function revokeOwnership() public virtual onlyOwner {\\r\\n        owner = address(0);\\r\\n\\r\\n        emit OwnershipTransferred(msg.sender, address(0));\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ERC721Receiver {\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external virtual returns (bytes4) {\\r\\n        return ERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice ERC404\\r\\n///         A gas-efficient, mixed ERC20 / ERC721 implementation\\r\\n///         with native liquidity and fractionalization.\\r\\n///\\r\\n///         This is an experimental standard designed to integrate\\r\\n///         with pre-existing ERC20 / ERC721 support as smoothly as\\r\\n///         possible.\\r\\n///\\r\\n/// @dev    In order to support full functionality of ERC20 and ERC721\\r\\n///         supply assumptions are made that slightly constraint usage.\\r\\n///         Ensure decimals are sufficiently large (standard 18 recommended)\\r\\n///         as ids are effectively encoded in the lowest range of amounts.\\r\\n///\\r\\n///         NFTs are spent on ERC20 functions in a FILO queue, this is by\\r\\n///         design.\\r\\n///\\r\\nabstract contract ERC404 is Ownable {\\r\\n    // Events\\r\\n    event ERC20Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed id\\r\\n    );\\r\\n    event ERC721Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 indexed id\\r\\n    );\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    // Errors\\r\\n    error NotFound();\\r\\n    error AlreadyExists();\\r\\n    error InvalidRecipient();\\r\\n    error InvalidSender();\\r\\n    error UnsafeRecipient();\\r\\n\\r\\n    // Metadata\\r\\n    /// @dev Token name\\r\\n    string public name;\\r\\n\\r\\n    /// @dev Token symbol\\r\\n    string public symbol;\\r\\n\\r\\n    /// @dev Decimals for fractional representation\\r\\n    uint8 public immutable decimals;\\r\\n\\r\\n    /// @dev Total supply in fractionalized representation\\r\\n    uint256 public immutable totalSupply;\\r\\n\\r\\n    /// @dev Current mint counter, monotonically increasing to ensure accurate ownership\\r\\n    uint256 public minted;\\r\\n\\r\\n    // Mappings\\r\\n    /// @dev Balance of user in fractional representation\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    /// @dev Allowance of user in fractional representation\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    /// @dev Approval in native representaion\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    /// @dev Approval for all in native representation\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /// @dev Owner of id in native representation\\r\\n    mapping(uint256 => address) internal _ownerOf;\\r\\n\\r\\n    /// @dev Array of owned ids in native representation\\r\\n    mapping(address => uint256[]) internal _owned;\\r\\n\\r\\n    /// @dev Tracks indices for the _owned mapping\\r\\n    mapping(uint256 => uint256) internal _ownedIndex;\\r\\n\\r\\n    /// @dev Addresses whitelisted from minting / burning for gas savings (pairs, routers, etc)\\r\\n    mapping(address => bool) public whitelist;\\r\\n\\r\\n    // Constructor\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals,\\r\\n        uint256 _totalNativeSupply,\\r\\n        address _owner\\r\\n    ) Ownable(_owner) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n        totalSupply = _totalNativeSupply * (10 ** decimals);\\r\\n    }\\r\\n\\r\\n    /// @notice Initialization function to set pairs / etc\\r\\n    ///         saving gas by avoiding mint / burn on unnecessary targets\\r\\n    function setWhitelist(address target, bool state) public onlyOwner {\\r\\n        whitelist[target] = state;\\r\\n    }\\r\\n\\r\\n    /// @notice Function to find owner of a given native token\\r\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\r\\n        owner = _ownerOf[id];\\r\\n\\r\\n        if (owner == address(0)) {\\r\\n            revert NotFound();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice tokenURI must be implemented by child contract\\r\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\r\\n\\r\\n    /// @notice Function for token approvals\\r\\n    /// @dev This function assumes id / native if amount less than or equal to current max id\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amountOrId\\r\\n    ) public virtual returns (bool) {\\r\\n        if (amountOrId <= minted && amountOrId > 0) {\\r\\n            address owner = _ownerOf[amountOrId];\\r\\n\\r\\n            if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            getApproved[amountOrId] = spender;\\r\\n\\r\\n            emit Approval(owner, spender, amountOrId);\\r\\n        } else {\\r\\n            allowance[msg.sender][spender] = amountOrId;\\r\\n\\r\\n            emit Approval(msg.sender, spender, amountOrId);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Function native approvals\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        isApprovedForAll[msg.sender][operator] = approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, operator, approved);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for mixed transfers\\r\\n    /// @dev This function assumes id / native if amount less than or equal to current max id\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amountOrId\\r\\n    ) public virtual {\\r\\n        if (amountOrId <= minted) {\\r\\n            if (from != _ownerOf[amountOrId]) {\\r\\n                revert InvalidSender();\\r\\n            }\\r\\n\\r\\n            if (to == address(0)) {\\r\\n                revert InvalidRecipient();\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                msg.sender != from &&\\r\\n                !isApprovedForAll[from][msg.sender] &&\\r\\n                msg.sender != getApproved[amountOrId]\\r\\n            ) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            balanceOf[from] -= _getUnit();\\r\\n\\r\\n            unchecked {\\r\\n                balanceOf[to] += _getUnit();\\r\\n            }\\r\\n\\r\\n            _ownerOf[amountOrId] = to;\\r\\n            delete getApproved[amountOrId];\\r\\n\\r\\n            // update _owned for sender\\r\\n            uint256 updatedId = _owned[from][_owned[from].length - 1];\\r\\n            _owned[from][_ownedIndex[amountOrId]] = updatedId;\\r\\n            // pop\\r\\n            _owned[from].pop();\\r\\n            // update index for the moved id\\r\\n            _ownedIndex[updatedId] = _ownedIndex[amountOrId];\\r\\n            // push token to to owned\\r\\n            _owned[to].push(amountOrId);\\r\\n            // update index for to owned\\r\\n            _ownedIndex[amountOrId] = _owned[to].length - 1;\\r\\n\\r\\n            emit Transfer(from, to, amountOrId);\\r\\n            emit ERC20Transfer(from, to, _getUnit());\\r\\n        } else {\\r\\n            uint256 allowed = allowance[from][msg.sender];\\r\\n\\r\\n            if (allowed != type(uint256).max)\\r\\n                allowance[from][msg.sender] = allowed - amountOrId;\\r\\n\\r\\n            _transfer(from, to, amountOrId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function for fractional transfers\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual returns (bool) {\\r\\n        return _transfer(msg.sender, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for native transfers with contract support\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (\\r\\n            to.code.length != 0 &&\\r\\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") !=\\r\\n            ERC721Receiver.onERC721Received.selector\\r\\n        ) {\\r\\n            revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function for native transfers with contract support and callback data\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes calldata data\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        if (\\r\\n            to.code.length != 0 &&\\r\\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, data) !=\\r\\n            ERC721Receiver.onERC721Received.selector\\r\\n        ) {\\r\\n            revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for fractional transfers\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        uint256 unit = _getUnit();\\r\\n        uint256 balanceBeforeSender = balanceOf[from];\\r\\n        uint256 balanceBeforeReceiver = balanceOf[to];\\r\\n\\r\\n        balanceOf[from] -= amount;\\r\\n\\r\\n        unchecked {\\r\\n            balanceOf[to] += amount;\\r\\n        }\\r\\n\\r\\n        // Skip burn for certain addresses to save gas\\r\\n        if (!whitelist[from]) {\\r\\n            uint256 tokens_to_burn = (balanceBeforeSender / unit) -\\r\\n                (balanceOf[from] / unit);\\r\\n            for (uint256 i = 0; i < tokens_to_burn; i++) {\\r\\n                _burn(from);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Skip minting for certain addresses to save gas\\r\\n        if (!whitelist[to]) {\\r\\n            uint256 tokens_to_mint = (balanceOf[to] / unit) -\\r\\n                (balanceBeforeReceiver / unit);\\r\\n            for (uint256 i = 0; i < tokens_to_mint; i++) {\\r\\n                _mint(to);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ERC20Transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Internal utility logic\\r\\n    function _getUnit() internal view returns (uint256) {\\r\\n        return 10 ** decimals;\\r\\n    }\\r\\n\\r\\n    function _mint(address to) internal virtual {\\r\\n        if (to == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            minted++;\\r\\n        }\\r\\n\\r\\n        uint256 id = minted;\\r\\n\\r\\n        if (_ownerOf[id] != address(0)) {\\r\\n            revert AlreadyExists();\\r\\n        }\\r\\n\\r\\n        _ownerOf[id] = to;\\r\\n        _owned[to].push(id);\\r\\n        _ownedIndex[id] = _owned[to].length - 1;\\r\\n\\r\\n        emit Transfer(address(0), to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(address from) internal virtual {\\r\\n        if (from == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        uint256 id = _owned[from][_owned[from].length - 1];\\r\\n        _owned[from].pop();\\r\\n        delete _ownedIndex[id];\\r\\n        delete _ownerOf[id];\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, address(0), id);\\r\\n    }\\r\\n\\r\\n    function _setNameSymbol(\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) internal {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n    \\r\\n\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides a set of functions to operate with Base64 strings.\\r\\n */\\r\\nlibrary Base64 {\\r\\n    /**\\r\\n     * @dev Base64 Encoding/Decoding Table\\r\\n     */\\r\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\r\\n     */\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        /**\\r\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\r\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\r\\n         */\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // Loads the table into memory\\r\\n        string memory table = _TABLE;\\r\\n\\r\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\r\\n        // and split into 4 numbers of 6 bits.\\r\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\r\\n        // - `data.length + 2`  -> Round up\\r\\n        // - `/ 3`              -> Number of 3-bytes chunks\\r\\n        // - `4 *`              -> 4 characters for each chunk\\r\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // Prepare result pointer, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // Run over the input, 3 bytes at a time\\r\\n            for {\\r\\n                let dataPtr := data\\r\\n                let endPtr := add(data, mload(data))\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // Advance 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\r\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\r\\n                // and apply logical AND with 0x3F which is the number of\\r\\n                // the previous character in the ASCII table prior to the Base64 Table\\r\\n                // The result is then added to the table to get the character to write,\\r\\n                // and finally write it in the result pointer but with a left shift\\r\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n            }\\r\\n\\r\\n            // When data `bytes` is not exactly 3 bytes long\\r\\n            // it is padded with `=` characters at the end\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore8(sub(resultPtr, 1), 0x3d)\\r\\n                mstore8(sub(resultPtr, 2), 0x3d)\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore8(sub(resultPtr, 1), 0x3d)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Dickungus", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ce8ff21169af83d55bd50afd26ddd1e27610e663", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}