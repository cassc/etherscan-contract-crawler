{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/non-upgradeable/MemagToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract MemagToken is Context, IERC20Metadata, Ownable, Pausable {\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n  mapping(address => bool) public isBlacklisted;\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private constant _decimals = 18;\\n  uint256 public constant hardCap = 1_000_000_000 * (10 ** _decimals); //1 billion\\n\\n  /// @notice Address with the ability to pause and unpause contract.\\n  /// @dev Can be renounced.\\n  address public _pauser;\\n\\n  /// @notice Address with the ability to add/remove users from blacklist.\\n  /// @dev Can be renounced.\\n  address public _blacklister;\\n\\n  event PauserUpdated(address indexed by, address indexed oldPauser, address indexed newPauser, uint256 timestamp);\\n  event BlacklisterUpdated(address indexed by, address indexed oldBlacklister, address indexed newBlacklister, uint256 timestamp);\\n  event PauserRenounced(address indexed by, uint256 timestamp);\\n  event BlacklisterRenounced(address indexed by, uint256 timestamp);\\n  event AddedToBlacklist(address indexed by, address[] users, uint256 timestamp);\\n  event RemovedFromBlacklist(address indexed by, address[] users, uint256 timestamp);\\n\\n  /**\\n   * @dev Contract constructor.\\n   * @param name_ The name of the token.\\n   * @param symbol_ The symbol of the token.\\n   * @param pauser_ Pauser address.\\n   * @param blacklister_ Blacklister address.\\n   */\\n  constructor(string memory name_, string memory symbol_, address pauser_, address blacklister_, address owner_) {\\n    require(pauser_ != address(0) && blacklister_ != address(0) && owner_ != address(0), 'Zero Address');\\n\\n    \\n    _name = name_;\\n    _symbol = symbol_;\\n    _pauser = pauser_;\\n    _blacklister = blacklister_;\\n    _transferOwnership(owner_);\\n    _mint(owner_, hardCap);\\n    \\n    emit PauserUpdated(msg.sender, address(0), pauser_, block.timestamp);\\n    emit BlacklisterUpdated(msg.sender, address(0), blacklister_, block.timestamp);\\n  }\\n\\n  modifier onlyBlacklister() {\\n    require(msg.sender == _blacklister, 'Caller is not the blacklister');\\n    _;\\n  }\\n  modifier onlyPauser() {\\n    require(msg.sender == _pauser, 'Caller is not the pauser');\\n    _;\\n  }\\n    \\n  /**\\n   * @notice Function for blacklister to blacklist users.\\n   * @param _users Array of user addresses to be blacklisted.\\n   */\\n  function blacklistUser(address[] calldata _users) external onlyBlacklister {\\n    for (uint256 i = 0; i < _users.length; i++) {\\n      isBlacklisted[_users[i]] = true;\\n    }\\n    emit AddedToBlacklist(msg.sender, _users, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Function for blacklister to remove users from blacklist.\\n   * @param _users Array of user addresses to be removed from blacklist.\\n   */\\n  function removeUserFromBlacklist(address[] calldata _users) external onlyBlacklister {\\n    for (uint256 i = 0; i < _users.length; i++) {\\n      isBlacklisted[_users[i]] = false;\\n    }\\n    emit RemovedFromBlacklist(msg.sender, _users, block.timestamp);\\n  }\\n\\n  /// @notice Function to pause the contract.\\n  function pause() external onlyPauser {\\n    _pause();\\n  }\\n\\n  /// @notice Function to unpause the contract.\\n  function unpause() external onlyPauser {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Function for owner to update the blacklister address.\\n   * @param _newBlacklister Address of the new blacklister.\\n   */\\n  function updateBlacklister(address _newBlacklister) external onlyOwner {\\n    require(_newBlacklister != address(0), 'Zero Address!');\\n    require(_blacklister != address(0), 'Blacklister functionality is renounced!');\\n    address oldBlacklister = _blacklister;\\n    _blacklister = _newBlacklister;\\n    emit BlacklisterUpdated(msg.sender, oldBlacklister, _newBlacklister, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Function for owner to update the pauser address.\\n   * @param _newPauser Address of the new pauser.\\n   */\\n  function updatePauser(address _newPauser) external onlyOwner {\\n    require(_newPauser != address(0), 'Zero Address!');\\n    require(_pauser != address(0), 'Pauser functionality is renounced!');\\n    address oldPauser = _pauser;\\n    _pauser = _newPauser;\\n    emit PauserUpdated(msg.sender, oldPauser, _newPauser, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Function for owner to renounce the blacklister functionality.\\n   * @dev This will make blacklisting functionality unusable.\\n   */\\n  function renounceBlacklister() external onlyOwner {\\n    _blacklister = address(0);\\n    emit BlacklisterRenounced(msg.sender, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Function for owner to renounce the pauser functionality.\\n   * @dev This will make pause/unpause functionality unusable.\\n   */\\n  function renouncePauser() external onlyOwner {\\n    _pauser = address(0);\\n    emit PauserRenounced(msg.sender, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   * @return The name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   * @return The symbol of the token.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used for token display.\\n   * @return The number of decimals.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev Returns the total supply of the token.\\n   * @return The total supply.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev Returns the balance of the specified account.\\n   * @param account The address to check the balance for.\\n   * @return The balance of the account.\\n   */\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from the caller to a specified recipient.\\n   * @param recipient The address to transfer tokens to.\\n   * @param amount The amount of tokens to transfer.\\n   * @return A boolean value indicating whether the transfer was successful.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override whenNotPaused returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.\\n   * @param from The address that approves the spending.\\n   * @param to The address that is allowed to spend.\\n   * @return The remaining allowance for the spender.\\n   */\\n  function allowance(address from, address to) public view virtual override returns (uint256) {\\n    return _allowances[from][to];\\n  }\\n\\n  /**\\n   * @dev Approves the specified address to spend the specified amount of tokens on behalf of the caller.\\n   * @param to The address to approve the spending for.\\n   * @param amount The amount of tokens to approve.\\n   * @return A boolean value indicating whether the approval was successful.\\n   */\\n  function approve(address to, uint256 amount) public virtual override whenNotPaused returns (bool) {\\n    _approve(_msgSender(), to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfers tokens from one address to another.\\n   * @param sender The address to transfer tokens from.\\n   * @param recipient The address to transfer tokens to.\\n   * @param amount The amount of tokens to transfer.\\n   * @return A boolean value indicating whether the transfer was successful.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override whenNotPaused returns (bool) {\\n    _transfer(sender, recipient, amount);\\n\\n    uint256 currentAllowance = _allowances[sender][_msgSender()];\\n    require(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\\n    unchecked {\\n      _approve(sender, _msgSender(), currentAllowance - amount);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Increases the allowance of the specified address to spend tokens on behalf of the caller.\\n   * @param to The address to increase the allowance for.\\n   * @param addedValue The amount of tokens to increase the allowance by.\\n   * @return A boolean value indicating whether the increase was successful.\\n   */\\n  function increaseAllowance(address to, uint256 addedValue) public virtual whenNotPaused returns (bool) {\\n    _approve(_msgSender(), to, _allowances[_msgSender()][to] + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Decreases the allowance granted by the owner of the tokens to `to` account.\\n   * @param to The account allowed to spend the tokens.\\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\\n   * @return A boolean value indicating whether the operation succeeded.\\n   */\\n  function decreaseAllowance(address to, uint256 subtractedValue) public virtual whenNotPaused returns (bool) {\\n    uint256 currentAllowance = _allowances[_msgSender()][to];\\n    require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\\n    unchecked {\\n      _approve(_msgSender(), to, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Transfers `amount` tokens from `sender` to `recipient`.\\n   * @param sender The account to transfer tokens from.\\n   * @param recipient The account to transfer tokens to.\\n   * @param amount The amount of tokens to transfer.\\n   */\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n    require(!isBlacklisted[sender], 'sender blacklisted for this action');\\n    require(!isBlacklisted[recipient], 'recipient blacklisted for this action');\\n    require(amount > 0, 'ERC20: transfer amount zero');\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\\n    unchecked {\\n      _balances[sender] = senderBalance - amount;\\n    }\\n    _balances[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /**\\n   * @dev Creates `amount` tokens and assigns them to `account`.\\n   * @param account The account to assign the newly created tokens to.\\n   * @param amount The amount of tokens to create.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _totalSupply += amount;\\n    _balances[account] += amount;\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n   * @param account The account to burn tokens from.\\n   * @param amount The amount of tokens to burn.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(!isBlacklisted[account], 'sender blacklisted for this action');\\n    require(account != address(0), 'ERC20: burn from the zero address');\\n\\n    uint256 accountBalance = _balances[account];\\n    require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');\\n    unchecked {\\n      _balances[account] = accountBalance - amount;\\n    }\\n    _totalSupply -= amount;\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from the caller's account, reducing the total supply.\\n   * @param amount The amount of tokens to burn.\\n   */\\n  function burn(uint256 amount) external whenNotPaused {\\n    _burn(_msgSender(), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `to` over the caller's tokens.\\n   * @param from The account granting the allowance.\\n   * @param to The account allowed to spend the tokens.\\n   * @param amount The amount of tokens to allow.\\n   */\\n  function _approve(address from, address to, uint256 amount) internal virtual {\\n    require(from != address(0), 'ERC20: approve from the zero address');\\n    require(to != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[from][to] = amount;\\n    emit Approval(from, to, amount);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"pauser_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"blacklister_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BlacklisterRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBlacklister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BlacklisterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PauserRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blacklistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeUserFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MemagToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000f79ac41d589c91735859fa62c2876b9083ba4100000000000000000000000000f79ac41d589c91735859fa62c2876b9083ba4100000000000000000000000000f79ac41d589c91735859fa62c2876b9083ba4100000000000000000000000000000000000000000000000000000000000000184d657461204d617374657273204775696c642047616d6573000000000000000000000000000000000000000000000000000000000000000000000000000000064d454d4147580000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}