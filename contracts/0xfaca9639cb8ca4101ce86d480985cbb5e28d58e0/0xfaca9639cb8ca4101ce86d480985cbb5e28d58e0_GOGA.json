{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// \r\n//\r\n//   _____/\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\__________/\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n//    ___/\\\\\\//////////______/\\\\\\///\\\\\\______/\\\\\\//////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n//     __/\\\\\\_______________/\\\\\\/__\\///\\\\\\___/\\\\\\______________/\\\\\\/////////\\\\\\_      \r\n//      _\\/\\\\\\____/\\\\\\\\\\\\\\__/\\\\\\______\\//\\\\\\_\\/\\\\\\____/\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_     \r\n//       _\\/\\\\\\___\\/////\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\___\\/////\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n//        _\\/\\\\\\_______\\/\\\\\\_\\//\\\\\\______/\\\\\\__\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\/////////\\\\\\_   \r\n//         _\\/\\\\\\_______\\/\\\\\\__\\///\\\\\\__/\\\\\\____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_______\\/\\\\\\_  \r\n//          _\\//\\\\\\\\\\\\\\\\\\\\\\\\/_____\\///\\\\\\\\\\/_____\\//\\\\\\\\\\\\\\\\\\\\\\\\/__\\/\\\\\\_______\\/\\\\\\_ \r\n//           __\\////////////_________\\/////________\\////////////____\\///________\\///__\r\n//                            \r\n//   \r\n// \r\n// \r\n// Website      :   https://gogatoken.com\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns(address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns(uint256);\r\n    function balanceOf(address account) external view returns(uint256);\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns(bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    \r\n    function name() external view returns(string memory);\r\n    function symbol() external view returns(string memory);\r\n    function decimals() external view returns(uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n \r\n    uint256 private _totalSupply;\r\n \r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    \r\n    function name() public view virtual override returns(string memory) {\r\n        return _name;\r\n    }\r\n   \r\n    function symbol() public view virtual override returns(string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view virtual override returns(uint8) {\r\n        return 18;\r\n    }\r\n   \r\n    function totalSupply() public view virtual override returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns(uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns(bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view virtual override returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns(bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns(bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns(bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased cannot be below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n   \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n \r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n   \r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n   \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n \r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n  \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    \r\n}\r\n \r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n \r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n    \r\n    function mul(int256 a, int256 b) internal pure returns(int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n   \r\n    function div(int256 a, int256 b) internal pure returns(int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns(int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns(int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns(int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns(uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n \r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns(int256) {\r\n    int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns(address);\r\n    function WETH() external pure returns(address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\ncontract GOGA is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public immutable router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address public  feesWallet;\r\n\r\n    // limits \r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxSellAmount;   \r\n    uint256 public maxWalletAmount;\r\n \r\n    uint256 private thresholdSwapAmount;\r\n\r\n    // status flags\r\n    bool private isTrading = false;\r\n    bool public swapEnabled = false;\r\n    bool public isSwapping;\r\n\r\n    uint8 public buyFees;\r\n    uint8 public sellFees;\r\n\r\n    uint256 public tokensForFees = balanceOf(address(this));\r\n\r\n\r\n    // Excludes from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) public _isExcludedMaxWalletAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public marketPair;\r\n    \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived\r\n    );\r\n\r\n    constructor() ERC20(\"GOGA TOKEN\", \"GOGA\") {\r\n \r\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        _isExcludedMaxTransactionAmount[address(router)] = true;\r\n        _isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;        \r\n        _isExcludedMaxTransactionAmount[owner()] = true;\r\n        _isExcludedMaxTransactionAmount[address(this)] = true;\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        _isExcludedMaxWalletAmount[owner()] = true;\r\n        _isExcludedMaxWalletAmount[address(this)] = true;\r\n        _isExcludedMaxWalletAmount[address(uniswapV2Pair)] = true;\r\n\r\n        marketPair[address(uniswapV2Pair)] = true;\r\n\r\n        approve(address(router), type(uint256).max);\r\n        uint256 totalSupply = 1e11 * 1e18; //Total supply is 100 Billion\r\n\r\n        maxBuyAmount = totalSupply * 1 / 1000; // 0.1% maxbuy initially\r\n        maxSellAmount = totalSupply * 1 / 1000; // 0.1% maxsell initially\r\n        maxWalletAmount = totalSupply * 1 / 1000; // 0.1% maxWallet initially \r\n        thresholdSwapAmount = totalSupply * 1 / 10000; // 0.01% minimum to allow fees swap\r\n\r\n        buyFees = 1;\r\n        sellFees = 1;\r\n\r\n        feesWallet = address(0xC1B8C5675023DBe4335BccD011FD053a57b901dA);\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Once enabled, trades cannot be disabled.\r\n     */\r\n    function enableTrading() external onlyOwner {\r\n        isTrading = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function updateMaxTxnAmount(uint256 newMaxBuy, uint256 newMaxSell) external onlyOwner {\r\n        /**\r\n        * @dev to enter 1 for 0.1%, 10 for 1% and 1000 for 100%\r\n        */\r\n        require(((totalSupply() * newMaxBuy) / 1000) >= (totalSupply() / 1000), \"maxBuyAmount must be greater than 0.1%\");\r\n        require(((totalSupply() * newMaxSell) / 1000) >= (totalSupply() / 1000), \"maxSellAmount must be greater than 0.1%\");\r\n        maxBuyAmount = (totalSupply() * newMaxBuy) / 1000;\r\n        maxSellAmount = (totalSupply() * newMaxSell) / 1000;\r\n    }\r\n\r\n    function updateMaxWalletAmount(uint256 newPercentage) external onlyOwner {\r\n        /**\r\n        * @dev to enter 1 for 0.1%, 10 for 1% and 1000 for 100%\r\n        */\r\n        require(((totalSupply() * newPercentage) / 1000) >= (totalSupply() / 1000), \"Must be atleast 0.1%\");\r\n        maxWalletAmount = (totalSupply() * newPercentage) / 1000;\r\n    }\r\n    \r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function excludeFromWalletLimit(address account, bool excluded) public onlyOwner {\r\n        _isExcludedMaxWalletAmount[account] = excluded;\r\n    }\r\n\r\n    function setMarketPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"Must keep uniswapV2Pair\");\r\n        marketPair[pair] = value;\r\n    }\r\n\r\n    function rescueETH(uint256 weiAmount) external onlyOwner {\r\n        payable(owner()).transfer(weiAmount);\r\n    }\r\n\r\n    function rescueERC20(address tokenAdd, uint256 amount) external onlyOwner {\r\n        IERC20(tokenAdd).transfer(owner(), amount);\r\n    }\r\n\r\n    function setFeesWallet(address _feesWallet) external onlyOwner{\r\n        feesWallet = _feesWallet;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n        \r\n    ) internal override {\r\n        \r\n        if (amount == 0) {\r\n            super._transfer(sender, recipient, 0);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            sender != owner() &&\r\n            recipient != owner() &&\r\n            !isSwapping\r\n        ) {\r\n\r\n            if (!isTrading) {\r\n                require(_isExcludedFromFees[sender] || _isExcludedFromFees[recipient], \"Trading is not active.\");\r\n            }\r\n            if (marketPair[sender] && !_isExcludedMaxTransactionAmount[recipient]) {\r\n                require(amount <= maxBuyAmount, \"buy transfer over max amount\");\r\n            } \r\n            else if (marketPair[recipient] && !_isExcludedMaxTransactionAmount[sender]) {\r\n                require(amount <= maxSellAmount, \"Sell transfer over max amount\");\r\n            }\r\n\r\n            if (!_isExcludedMaxWalletAmount[recipient]) {\r\n                require(amount + balanceOf(recipient) <= maxWalletAmount, \"Max wallet exceeded\");\r\n            }\r\n           \r\n        }\r\n \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n \r\n        bool canSwap = contractTokenBalance >= thresholdSwapAmount;\r\n\r\n        if (\r\n            canSwap &&\r\n            swapEnabled &&\r\n            !isSwapping &&\r\n            marketPair[recipient] &&\r\n            !_isExcludedFromFees[sender] &&\r\n            !_isExcludedFromFees[recipient]\r\n        ) {\r\n            isSwapping = true;\r\n            swapBack();\r\n            isSwapping = false;\r\n        }\r\n \r\n        bool takeFee = !isSwapping;\r\n\r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[sender] || _isExcludedFromFees[recipient]) {\r\n            takeFee = false;\r\n        }\r\n \r\n        // Only take fees on buys/sells, not on wallet transfers\r\n        if (takeFee) {\r\n            uint256 fees = 0;\r\n            // On sell\r\n            if (marketPair[recipient] && sellFees > 0) {\r\n                fees = amount.mul(sellFees).div(100);\r\n            }\r\n            // On buy\r\n            else if (marketPair[sender] && buyFees > 0) {\r\n                fees = amount.mul(buyFees).div(100);\r\n            }\r\n            //Transfer fees tokens to contract\r\n            if (fees > 0) {\r\n                super._transfer(sender, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n\r\n        }\r\n\r\n        super._transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n    }\r\n\r\n    function swapBack() private {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool success;\r\n\r\n        if (contractTokenBalance == 0) { return; }\r\n\r\n        if (contractTokenBalance > thresholdSwapAmount * 100) {\r\n            contractTokenBalance = thresholdSwapAmount * 100;\r\n        }\r\n\r\n        uint256 amountToSwapForETH = contractTokenBalance;\r\n\r\n        swapTokensForEth(amountToSwapForETH); \r\n\r\n        (success,) = address(feesWallet).call{ value: (address(this).balance) } (\"\");\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxWalletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feesWallet\",\"type\":\"address\"}],\"name\":\"setFeesWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setMarketPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxSell\",\"type\":\"uint256\"}],\"name\":\"updateMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GOGA", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e156cee44ed44afe875492a013d7b22f407afc6bdd4c1eaffebb55c15ac0a587"}