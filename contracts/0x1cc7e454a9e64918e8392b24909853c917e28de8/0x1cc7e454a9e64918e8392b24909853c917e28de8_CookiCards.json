{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CookiCards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {Base64} from \\\"openzeppelin/utils/Base64.sol\\\";\\nimport {Strings} from \\\"openzeppelin/utils/Strings.sol\\\";\\nimport {Ownable} from \\\"openzeppelin/access/Ownable.sol\\\";\\nimport {ICookiStructs} from \\\"./interfaces/ICookiStructs.sol\\\";\\n\\ncontract CookiCards is Ownable, ICookiStructs {\\n    uint256 public totalSupply;\\n    uint256 public fee;\\n\\n    string[] public backgroundColours;\\n    DoubleString[] public faceColours;\\n    TripleString[] public hatColours;\\n    DoubleString[] public neutralColours;\\n\\n    event ethscriptions_protocol_CreateEthscription(\\n        address indexed initialOwner,\\n        string contentURI\\n    );\\n\\n    constructor() {\\n        _init();\\n        fee = 0.001 ether;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw() external onlyOwner {\\n        (bool success, ) = (msg.sender).call{value: address(this).balance }(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function mint() external payable {\\n        require(msg.value >= fee);\\n        _mint(msg.sender);\\n    }\\n\\n    function mintTo(address _to) external onlyOwner {\\n        _mint(_to);\\n    }\\n\\n    function setFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function _mint(address _to) internal {\\n        uint256 seed = uint256(keccak256(abi.encodePacked(block.number, _to, totalSupply)));\\n        \\n        string memory data = _generateSVG(\\n            backgroundColours[seed % backgroundColours.length],\\n            faceColours[seed % faceColours.length],\\n            hatColours[seed % hatColours.length],\\n            neutralColours[seed % neutralColours.length]\\n        );\\n\\n        totalSupply++;\\n        emit ethscriptions_protocol_CreateEthscription(_to, string.concat('data:image/svg+xml;base64,', Base64.encode(bytes(data))));\\n    }\\n\\n    function _generateSVG(\\n        string memory _backgroundColour,\\n        DoubleString memory _faceColours,\\n        TripleString memory _hatColours,\\n        DoubleString memory _neutralColours\\n    ) internal view returns (string memory) {\\n        string memory svgHTML0 = string.concat('<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 240 240\\\"><style id=\\\"', Strings.toString(totalSupply), '\\\"/><rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"', _backgroundColour, '\\\" /><polygon points=\\\"200,160 200,70 180,70 180,60 60,60 60,160\\\" fill=\\\"', _hatColours.light, '\\\"/><rect width=\\\"10.1\\\" height=\\\"10\\\" x=\\\"20\\\" y=\\\"170\\\" fill=\\\"', _faceColours.dark, '\\\"/><rect width=\\\"10\\\" height=\\\"10.1\\\" x=\\\"40\\\" y=\\\"150\\\" fill=\\\"', _faceColours.dark);\\n        svgHTML0 = string.concat(svgHTML0, '\\\"/><polygon points=\\\"30,160 50,160 50,180 60,180 60,190 70,190 70,180 80,180 80,200 50,200 50,190 40,190 40,180 30,180\\\" fill=\\\"', _neutralColours.dark,'\\\"/><polygon points=\\\"70,180 70,190 60,190 60,180 50,180 50,160 60,160 60,150 70,150\\\" fill=\\\"', _neutralColours.light, '\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"60\\\" y=\\\"170\\\" fill=\\\"', _faceColours.dark, '\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"60\\\" y=\\\"160\\\" fill=\\\"', _faceColours.light);\\n        \\n        string memory svgHTML1 = string.concat('\\\"/><rect width=\\\"10.1\\\" height=\\\"10.1\\\" x=\\\"59.95\\\" y=\\\"229.95\\\" fill=\\\"', _faceColours.dark, '\\\"/><polygon points=\\\"70,240 170,240 170,160 70,160 70,180 80,180 80,220 70,220\\\" fill=\\\"', _neutralColours.light, '\\\"/><polygon points=\\\"90,210 90,200 80,200 80,220 60,220 60,240 50,240 50,230 70,230 70,210\\\" fill=\\\"', _neutralColours.dark,'\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"110\\\" y=\\\"220\\\" fill=\\\"', _faceColours.dark);\\n        svgHTML1 = string.concat(svgHTML1, '\\\"/><polygon points=\\\"90,210 110,210 110,230 100,230 100,220 90,220\\\" fill=\\\"', _neutralColours.dark, '\\\"/><polygon points=\\\"110,220 170,220 170,200 180,200 180,170 110,170 110,180 100,180 100,200 110,200\\\" fill=\\\"', _faceColours.light, '\\\"/><polygon points=\\\"120,220 150,220 150,230 140,230 140,240 130,240 130,230 120,230\\\" fill=\\\"', _neutralColours.dark, '\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"120\\\" y=\\\"200\\\" fill=\\\"', _neutralColours.dark);\\n        \\n        string memory svgHTML2 = string.concat('\\\"/><polygon points=\\\"130,210 130,200 140,200 140,220 150,220 150,210\\\" fill=\\\"', _faceColours.dark, '\\\"/><rect width=\\\"10.1\\\" height=\\\"10\\\" x=\\\"179.9\\\" y=\\\"230\\\" fill=\\\"', _faceColours.dark, '\\\"/><polygon points=\\\"150,220 150,210 170,210 170,240 180,240 180,220\\\" fill=\\\"', _neutralColours.dark, '\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"160\\\" y=\\\"200\\\" fill=\\\"', _faceColours.dark);\\n        svgHTML2 = string.concat(svgHTML2, '\\\"/><polygon points=\\\"170,200 170,210 180,210 180,180 160,180 160,160 130,160 130,170 200,170 200,70 190,70 190,90 210,90 210,120 190,120 190,150 210,150 210,180 190,180 190,200\\\" fill=\\\"', _neutralColours.dark, '\\\"/><rect width=\\\"20.1\\\" height=\\\"30.1\\\" x=\\\"59.95\\\" y=\\\"89.95\\\" fill=\\\"', _hatColours.medium, '\\\"/><polygon points=\\\"59,120 59,141 90,141 90,130 110,130 110,110 140,110 140,130 170,130 170,120 90,120 90,100 100,100 100,60 90,60 90,90 80,90 80,110 70,110 70,120\\\" fill=\\\"', _hatColours.dark, '\\\"/><polygon points=\\\"50,160 50,90 60,90 60,140 100,140 100,180 90,180 90,160 120,160 120,150 80,150 80,160 70,160 70,150 60,150 60,160\\\" fill=\\\"', _neutralColours.dark);\\n        \\n        string memory svgHTML3 = string.concat('\\\"/><rect width=\\\"20.1\\\" height=\\\"10.1\\\" x=\\\"79.95\\\" y=\\\"149.95\\\" fill=\\\"', _faceColours.dark, '\\\"/><rect width=\\\"20\\\" height=\\\"10.1\\\" x=\\\"110\\\" y=\\\"159.95\\\" fill=\\\"', _faceColours.dark, '\\\"/><polygon points=\\\"130,180 140,180 140,190 150,190 150,180 160,180 160,170 130,170\\\" fill=\\\"', _faceColours.dark, '\\\"/><rect width=\\\"10\\\" height=\\\"10.1\\\" x=\\\"50\\\" y=\\\"79.95\\\" fill=\\\"', _hatColours.dark);\\n        svgHTML3 = string.concat(svgHTML3, '\\\"/><rect width=\\\"10.1\\\" height=\\\"10.1\\\" x=\\\"59.95\\\" y=\\\"69.95\\\" fill=\\\"', _neutralColours.dark, '\\\"/><rect width=\\\"10.1\\\" height=\\\"10.1\\\" x=\\\"59.95\\\" y=\\\"59.95\\\" fill=\\\"', _hatColours.dark, '\\\"/><rect width=\\\"50\\\" height=\\\"20\\\" x=\\\"90\\\" y=\\\"40\\\" fill=\\\"', _hatColours.dark, '\\\"/><rect width=\\\"20.1\\\" height=\\\"10\\\" x=\\\"69.95\\\" y=\\\"50\\\" fill=\\\"', _neutralColours.dark);\\n        \\n        string memory svgHTML4 = string.concat('\\\"/><rect width=\\\"10\\\" height=\\\"10\\\" x=\\\"90\\\" y=\\\"50\\\" fill=\\\"', _hatColours.medium, '\\\"/><rect width=\\\"30\\\" height=\\\"10\\\" x=\\\"100\\\" y=\\\"40\\\" fill=\\\"', _neutralColours.dark, '\\\"/><rect width=\\\"10\\\" height=\\\"20\\\" x=\\\"160\\\" y=\\\"50\\\" fill=\\\"', _hatColours.dark, '\\\"/><rect width=\\\"20.1\\\" height=\\\"10\\\" x=\\\"139.95\\\" y=\\\"50\\\" fill=\\\"', _neutralColours.dark);\\n        svgHTML4 = string.concat(svgHTML4, '\\\"/><rect width=\\\"10.1\\\" height=\\\"10\\\" x=\\\"169.95\\\" y=\\\"60\\\" fill=\\\"', _neutralColours.dark, '\\\"/><rect width=\\\"10.1\\\" height=\\\"20\\\" x=\\\"179.95\\\" y=\\\"60\\\" fill=\\\"', _hatColours.dark, '\\\"/><rect width=\\\"10.1\\\" height=\\\"10.1\\\" x=\\\"189.95\\\" y=\\\"89.95\\\" fill=\\\"', _hatColours.dark, '\\\"/><rect width=\\\"20.1\\\" height=\\\"10\\\" x=\\\"169.95\\\" y=\\\"130\\\" fill=\\\"', _hatColours.dark);\\n        \\n        return string.concat(svgHTML0, svgHTML1, svgHTML2, svgHTML3, svgHTML4, '\\\"/><polygon points=\\\"160,60 150,60 150,120 140,120 140,100 160,100\\\" fill=\\\"', _hatColours.medium, '\\\"/><polygon points=\\\"100,130 90,130 90,140 120,140 120,160 200,160 200,170 160,170 160,150 100,150\\\" fill=\\\"', _hatColours.medium, '\\\"/></svg>');\\n    }\\n\\n    function _init() internal {\\n        _storeBackgroundColours();\\n        _storeFaceColours();\\n        _storeHatColours();\\n        _storeNeutralColours();\\n    }\\n\\n    function _storeBackgroundColours() internal {\\n        backgroundColours.push(\\\"#fff8dc\\\");\\n        backgroundColours.push(\\\"#dbc9c9\\\");\\n        backgroundColours.push(\\\"#84b4d0\\\");\\n        backgroundColours.push(\\\"#d0a7c7\\\");\\n        backgroundColours.push(\\\"#80ebeb\\\");\\n        backgroundColours.push(\\\"#dee5e5\\\");\\n        backgroundColours.push(\\\"#efcd76\\\");\\n        backgroundColours.push(\\\"#ed8f90\\\");\\n        backgroundColours.push(\\\"#747470\\\");\\n        backgroundColours.push(\\\"#69a975\\\");\\n        backgroundColours.push(\\\"#8467a9\\\");\\n        backgroundColours.push(\\\"#df6cc3\\\");\\n        backgroundColours.push(\\\"#f18c51\\\");\\n        backgroundColours.push(\\\"#1fc29f\\\");\\n        backgroundColours.push(\\\"#79916f\\\");\\n        backgroundColours.push(\\\"#cf5108\\\");\\n        backgroundColours.push(\\\"#a11C06\\\");\\n        backgroundColours.push(\\\"#280575\\\");\\n        backgroundColours.push(\\\"#348505\\\");\\n        backgroundColours.push(\\\"#b20560\\\");\\n        backgroundColours.push(\\\"#057eb2\\\");\\n        backgroundColours.push(\\\"#3F3F3F\\\");\\n        backgroundColours.push(\\\"#DCB40E\\\");\\n    }\\n\\n    function _storeFaceColours() internal {\\n        DoubleString memory _faceColours0 = DoubleString({\\n            light: \\\"#896bef\\\",\\n            dark: \\\"#2d0ba7\\\"\\n        });\\n        DoubleString memory _faceColours1 = DoubleString({\\n            light: \\\"#68bee1\\\",\\n            dark: \\\"#0b7ba7\\\"\\n        });\\n        DoubleString memory _faceColours2 = DoubleString({\\n            light: \\\"#c8a968\\\",\\n            dark: \\\"#775303\\\"\\n        });\\n        DoubleString memory _faceColours3 = DoubleString({\\n            light: \\\"#6475b8\\\",\\n            dark: \\\"#082084\\\"\\n        });\\n        DoubleString memory _faceColours4 = DoubleString({\\n            light: \\\"#9d95a5\\\",\\n            dark: \\\"#48444d\\\"\\n        });\\n        DoubleString memory _faceColours5 = DoubleString({\\n            light: \\\"#499568\\\",\\n            dark: \\\"#025524\\\"\\n        });\\n        DoubleString memory _faceColours6 = DoubleString({\\n            light: \\\"#af60a2\\\",\\n            dark: \\\"#5b014a\\\"\\n        });\\n        DoubleString memory _faceColours7 = DoubleString({\\n            light: \\\"#eb885e\\\",\\n            dark: \\\"#8e2c02\\\"\\n        });\\n        DoubleString memory _faceColours8 = DoubleString({\\n            light: \\\"#d55d6b\\\",\\n            dark: \\\"#8e0214\\\"\\n        });\\n        DoubleString memory _faceColours9 = DoubleString({\\n            light: \\\"#ac74df\\\",\\n            dark: \\\"#500095\\\"\\n        });\\n        DoubleString memory _faceColours10 = DoubleString({\\n            light: \\\"#e371b3\\\",\\n            dark: \\\"#99085d\\\"\\n        });\\n        DoubleString memory _faceColours11 = DoubleString({\\n            light: \\\"#71a59a\\\",\\n            dark: \\\"#044d41\\\"\\n        });\\n        DoubleString memory _faceColours12 = DoubleString({\\n            light: \\\"#f4d963\\\",\\n            dark: \\\"#b99500\\\"\\n        });\\n\\n        faceColours.push(_faceColours0);\\n        faceColours.push(_faceColours1);\\n        faceColours.push(_faceColours2);\\n        faceColours.push(_faceColours3);\\n        faceColours.push(_faceColours4);\\n        faceColours.push(_faceColours5);\\n        faceColours.push(_faceColours6);\\n        faceColours.push(_faceColours7);\\n        faceColours.push(_faceColours8);\\n        faceColours.push(_faceColours9);\\n        faceColours.push(_faceColours10);\\n        faceColours.push(_faceColours11);\\n        faceColours.push(_faceColours12);\\n    }\\n\\n    function _storeHatColours() internal {\\n        TripleString memory _hatColours0 = TripleString({\\n            light: \\\"#f8869d\\\",\\n            medium: \\\"#dc143c\\\",\\n            dark: \\\"#740e23\\\"\\n        });\\n        TripleString memory _hatColours1 = TripleString({\\n            light: \\\"#635ab5\\\",\\n            medium: \\\"#2717ed\\\",\\n            dark: \\\"#100880\\\"\\n        });\\n        TripleString memory _hatColours2 = TripleString({\\n            light: \\\"#e576ed\\\",\\n            medium: \\\"#e216f1\\\",\\n            dark: \\\"#870891\\\"\\n        });\\n        TripleString memory _hatColours3 = TripleString({\\n            light: \\\"#79e178\\\",\\n            medium: \\\"#0eb80c\\\",\\n            dark: \\\"#025d01\\\"\\n        });\\n        TripleString memory _hatColours4 = TripleString({\\n            light: \\\"#e39f4f\\\",\\n            medium: \\\"#dc7a05\\\",\\n            dark: \\\"#a35903\\\"\\n        });\\n        TripleString memory _hatColours5 = TripleString({\\n            light: \\\"#5acfea\\\",\\n            medium: \\\"#05b4d5\\\",\\n            dark: \\\"#03819a\\\"\\n        });\\n        TripleString memory _hatColours6 = TripleString({\\n            light: \\\"#69dfa0\\\",\\n            medium: \\\"#13cc69\\\",\\n            dark: \\\"#008c3e\\\"\\n        });\\n        TripleString memory _hatColours7 = TripleString({\\n            light: \\\"#a5a5a8\\\",\\n            medium: \\\"#6f6f73\\\",\\n            dark: \\\"#3d3d3f\\\"\\n        });\\n        TripleString memory _hatColours8 = TripleString({\\n            light: \\\"#a55454\\\",\\n            medium: \\\"#af0c0c\\\",\\n            dark: \\\"#610303\\\"\\n        });\\n        TripleString memory _hatColours9 = TripleString({\\n            light: \\\"#745473\\\",\\n            medium: \\\"#9b0297\\\",\\n            dark: \\\"#4d004b\\\"\\n        });\\n        TripleString memory _hatColours10 = TripleString({\\n            light: \\\"#f4d963\\\",\\n            medium: \\\"#f8cb04\\\",\\n            dark: \\\"#c19C00\\\"\\n        });\\n\\n        hatColours.push(_hatColours0);\\n        hatColours.push(_hatColours1);\\n        hatColours.push(_hatColours2);\\n        hatColours.push(_hatColours3);\\n        hatColours.push(_hatColours4);\\n        hatColours.push(_hatColours5);\\n        hatColours.push(_hatColours6);\\n        hatColours.push(_hatColours7);\\n        hatColours.push(_hatColours8);\\n        hatColours.push(_hatColours9);\\n        hatColours.push(_hatColours10);\\n    }\\n\\n    function _storeNeutralColours() internal {\\n        DoubleString memory _neutralColours0 = DoubleString({\\n            light: \\\"#cfc497\\\",\\n            dark: \\\"#000000\\\"\\n        });\\n        DoubleString memory _neutralColours1 = DoubleString({\\n            light: \\\"#969176\\\",\\n            dark: \\\"#000000\\\"\\n        });\\n        DoubleString memory _neutralColours2 = DoubleString({\\n            light: \\\"#756c59\\\",\\n            dark: \\\"#000000\\\"\\n        });\\n\\n        neutralColours.push(_neutralColours0);\\n        neutralColours.push(_neutralColours1);\\n        neutralColours.push(_neutralColours2);\\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICookiStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface ICookiStructs {\\n    struct DoubleString {\\n        string light;\\n        string dark;\\n    }\\n\\n    struct TripleString {\\n        string light;\\n        string medium;\\n        string dark;\\n    }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentURI\",\"type\":\"string\"}],\"name\":\"ethscriptions_protocol_CreateEthscription\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backgroundColours\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"faceColours\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"light\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dark\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hatColours\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"light\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"medium\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dark\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"neutralColours\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"light\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dark\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CookiCards", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}