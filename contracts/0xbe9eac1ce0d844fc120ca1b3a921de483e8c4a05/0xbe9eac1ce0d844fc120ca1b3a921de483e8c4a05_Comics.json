{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Comics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n// @author: jolan.eth\\ncontract Comics is Ownable {\\n    string public symbol = \\\"COMICS\\\";\\n    string public name = \\\"0N1 Comics\\\";\\n    string public CID;\\n\\n    address public NANOHUB;\\n\\n    uint256 private currentId = 1;\\n\\n    mapping(uint256 => uint256) private packedOwnerships;\\n    mapping(address => uint256) private packedAddressData;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    constructor() {}\\n\\n    function setCID(string memory _CID)\\n    public onlyOwner {\\n        CID = _CID;\\n    }\\n\\n    function setNANOHUB(address _NANOHUB)\\n    public onlyOwner {\\n        NANOHUB = _NANOHUB;\\n    }\\n\\n    function mintComics(address to)\\n    public {\\n        require(msg.sender == NANOHUB, \\\"error NANOHUB\\\");\\n        _mint(to, 1);\\n    }\\n\\n    function transferFrom(address from, address to, uint tokenId)\\n    public {\\n        require(msg.sender == NANOHUB, \\\"error NANOHUB\\\");\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function exist(uint256 tokenId)\\n    public view returns (bool) {\\n        return 1 <= tokenId && tokenId < currentId && (\\n            packedOwnerships[tokenId] & (1 << 224) == 0\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n    public pure returns (bool) {\\n        return interfaceId == 0x80ac58cd || interfaceId == 0x5b5e139f;\\n    }\\n\\n    function totalSupply()\\n    public view returns (uint256) {\\n        unchecked {\\n            return currentId - 1;\\n        }\\n    }\\n\\n    function balanceOf(address owner)\\n    public view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return packedAddressData[owner] & ((1 << 64) - 1);\\n    }\\n\\n    function ownerOf(uint256 tokenId)\\n    public view returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n    public view returns (string memory) {\\n        if (!exist(tokenId)) revert URIQueryForNonexistentToken();\\n        return string(\\n            abi.encodePacked(\\\"ipfs://\\\", CID, \\\"/\\\", _toString(tokenId))\\n        );\\n    }\\n\\n    function _mint(address to, uint256 quantity)\\n    internal {\\n        uint256 startTokenId = currentId;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        unchecked {\\n            packedAddressData[to] += quantity * ((1 << 64) | 1);\\n            packedOwnerships[startTokenId] = (\\n                _addressToUint256(to) |\\n                (block.timestamp << 160) |\\n                (_boolToUint256(quantity == 1) << 225)\\n            );\\n\\n            uint256 updatedIndex = startTokenId;\\n            uint256 end = updatedIndex + quantity;\\n\\n            while (updatedIndex < end)\\n                emit Transfer(address(0), to, updatedIndex++);\\n\\n            currentId = updatedIndex;\\n        }\\n    }\\n\\n    function _transfer(address from, address to, uint256 tokenId)\\n    private {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from)\\n            revert TransferFromIncorrectOwner();\\n        if (to == address(0))\\n            revert TransferToZeroAddress();\\n\\n        unchecked {\\n            --packedAddressData[from];\\n            ++packedAddressData[to];\\n\\n            packedOwnerships[tokenId] =\\n                _addressToUint256(to) | (block.timestamp << 160) | (1 << 225);\\n\\n            if (prevOwnershipPacked & (1 << 225) == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                if (packedOwnerships[nextTokenId] == 0)\\n                    if (nextTokenId != currentId)\\n                        packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, ''))\\n                revert TransferToNonERC721ReceiverImplementer();\\n    }\\n\\n    function _packedOwnershipOf(uint256 tokenId)\\n    private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (1 <= curr)\\n                if (curr < currentId) {\\n                    uint256 packed = packedOwnerships[curr];\\n                    if (packed & (1 << 224) == 0) {\\n                        while (packed == 0) {\\n                            packed = packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    function _unpackedOwnership(uint256 packed)\\n    private pure returns (address, uint64, bool) {\\n        return (\\n            address(uint160(packed)),\\n            uint64(packed >> 160),\\n            packed & (1 << 224) != 0\\n        );\\n    }\\n\\n    function _initializeOwnershipAt(uint256 index)\\n    internal {\\n        if (packedOwnerships[index] == 0)\\n            packedOwnerships[index] = _packedOwnershipOf(index);\\n    }\\n\\n    function _ownershipOf(uint256 tokenId)\\n    internal view returns (address, uint64, bool) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721TokenReceiver(to).onERC721Received(\\n            msg.sender, from, tokenId, _data\\n        ) returns (bytes4 retval) {\\n            return retval == ERC721TokenReceiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0)\\n                revert TransferToNonERC721ReceiverImplementer();\\n            else assembly {\\n                revert(add(32, reason), mload(reason))\\n            }\\n        }\\n    }\\n\\n    function _toString(uint256 value)\\n    private pure returns (string memory) {\\n        if (value == 0) return \\\"0\\\";\\n\\n        uint256 digits;\\n        uint256 tmp = value;\\n\\n        while (tmp != 0) {\\n            digits++;\\n            tmp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function _addressToUint256(address value)\\n    private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    function _boolToUint256(bool value)\\n    private pure returns (uint256 result) {\\n        assembly {\\n            result := value\\n        }\\n    }\\n\\n    error TransferToNonERC721ReceiverImplementer();\\n    error OwnerQueryForNonexistentToken();\\n    error URIQueryForNonexistentToken();\\n    error BalanceQueryForZeroAddress();\\n    error TransferFromIncorrectOwner();\\n    error TransferToZeroAddress();\\n    error MintToZeroAddress();\\n    error MintZeroQuantity();\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n    \\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"error owner()\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() { _transferOwnership(msg.sender); }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"error newOwner\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NANOHUB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintComics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_CID\",\"type\":\"string\"}],\"name\":\"setCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NANOHUB\",\"type\":\"address\"}],\"name\":\"setNANOHUB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Comics", "CompilerVersion": "v0.8.5+commit.a4f2e591", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}