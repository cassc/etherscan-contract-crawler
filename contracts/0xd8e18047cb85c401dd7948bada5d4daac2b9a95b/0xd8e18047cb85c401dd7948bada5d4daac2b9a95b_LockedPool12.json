{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// This contract handles locking PKN to get rewards\r\ncontract LockedPool12 is Ownable {\r\n\r\n    uint256 public constant TIER_MIN = 98000 * 10**18;\r\n    uint256 public constant TIER_MID = TIER_MIN * 10;\r\n    uint256 public constant TIER_MAX = TIER_MIN * 100;\r\n    \r\n    uint256 public constant REWARD_MIN = 25;\r\n    uint256 public constant REWARD_MID = 30;\r\n    uint256 public constant REWARD_MAX = 35;\r\n\r\n    uint256 public constant TOTAL_DURATION = 365 days;\r\n    uint256 public constant ENTRY_LIMIT = 1671624000; // Wednesday, December 21, 2022 12:00:00 PM GMT\r\n\r\n    uint256 public totalOwed;\r\n    uint256 public totalDeposit;\r\n\r\n    mapping(address => uint256) private userOwed;\r\n    mapping(address => uint256) private userDeposit;\r\n    mapping(address => uint256) private userFirstTS;\r\n\r\n    IERC20 public immutable PKN;\r\n\r\n    constructor(IERC20 _PKN) {\r\n        PKN = _PKN;\r\n    }\r\n\r\n    function splitTiers(uint256 amount) public pure returns(uint256 tA, uint256 tB, uint256 tC) {\r\n        if(amount > TIER_MAX) {\r\n            tC = amount - TIER_MAX;\r\n        }\r\n        if(amount > TIER_MID) {\r\n            tB = amount - tC - TIER_MID;\r\n        }\r\n        tA = amount - tC - tB;\r\n    }\r\n\r\n    function depositOf(address account) public view returns (uint256) {\r\n        return userDeposit[account];\r\n    }\r\n\r\n    function totalRewardOf(address account) public view returns (uint256) {\r\n        return userOwed[account];\r\n    }\r\n\r\n    function unlockTimeOf(address account) public view returns (uint256) {\r\n        require(userFirstTS[account] != 0, \"No deposit yet\");\r\n        return userFirstTS[account] + TOTAL_DURATION;\r\n    }\r\n\r\n    function pendingRewards() external view returns(uint256 pending) {\r\n        uint256 currentBalance = PKN.balanceOf(address(this));\r\n        if(totalOwed > currentBalance) {\r\n            pending = totalOwed - currentBalance;\r\n        }\r\n    }\r\n\r\n    function enter(uint256 _amount) external {\r\n        require(block.timestamp < ENTRY_LIMIT, \"Locking period ended\");\r\n\r\n        uint256 amount = _receivePKN(msg.sender, _amount);\r\n        uint256 uDeposit = userDeposit[msg.sender];\r\n        uint256 uTotal = uDeposit + amount;\r\n\r\n        require(uTotal >= TIER_MIN, \"Amount less than minimum deposit\");\r\n\r\n        (uint256 depA, uint256 depB, uint256 depC) = splitTiers(uDeposit);\r\n        (uint256 totA, uint256 totB, uint256 totC) = splitTiers(uTotal);\r\n\r\n        uint256 amtA = totA - depA;\r\n        uint256 amtB = totB - depB;\r\n        uint256 amtC = totC - depC;\r\n\r\n        if(uDeposit == 0) {\r\n            // first deposit for this user\r\n            userFirstTS[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        uint256 remainingTime = unlockTimeOf(msg.sender) - block.timestamp;\r\n        uint256 owed;\r\n        if(amtA > 0) {\r\n            owed += amtA + amtA * REWARD_MIN * remainingTime / (100 * TOTAL_DURATION);\r\n        }\r\n\r\n        if(amtB > 0) {\r\n            owed += amtB + amtB * REWARD_MID * remainingTime / (100 * TOTAL_DURATION);\r\n        }\r\n\r\n        if(amtC > 0) {\r\n            owed += amtC + amtC * REWARD_MAX * remainingTime / (100 * TOTAL_DURATION);\r\n        }\r\n\r\n        userDeposit[msg.sender] += amount;\r\n        totalDeposit += amount;\r\n        userOwed[msg.sender] += owed;\r\n        totalOwed += owed;\r\n    }\r\n\r\n    function leave() external {\r\n        require(block.timestamp >= unlockTimeOf(msg.sender), \"Not unlocked yet\");\r\n\r\n        uint256 amount = userOwed[msg.sender];\r\n        require(amount > 0, \"No pending withdrawal\");\r\n        userOwed[msg.sender] = 0;\r\n        totalOwed -= amount;\r\n        PKN.transfer(msg.sender, amount);\r\n    }\r\n\r\n    // only to be called in an emergency after a wait period of 2 * TOTAL_DURATION\r\n    function emergencyRescue() external onlyOwner() {\r\n        require(block.timestamp >= ENTRY_LIMIT + 2 * TOTAL_DURATION, \"Not needed yet\");\r\n        PKN.transfer(msg.sender, PKN.balanceOf(address(this)));\r\n    }\r\n\r\n    function _receivePKN(address from, uint256 amount) internal returns (uint256) {\r\n        uint256 balanceBefore = PKN.balanceOf(address(this));\r\n        PKN.transferFrom(from, address(this), amount);\r\n        return PKN.balanceOf(address(this)) - balanceBefore;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_PKN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRY_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PKN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_MID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIER_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tC\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LockedPool12", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000df09a216fac5adc3e640db418c0b956076509503", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d08c1a5bcf851b443fa58c7767325e5c32e4b826097f591e81bcd3498169a4a"}