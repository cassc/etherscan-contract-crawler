{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IToken {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract PrivateSale {\r\n    address public contributeCoin;\r\n    mapping (address => uint256) public coinContributed;\r\n    uint256 public totalCoinContributed;\r\n\r\n    uint256 public maxPerWallet;\r\n\r\n    uint256 public totalDepositCap;\r\n\taddress public depositAddress;\r\n\r\n    uint256 public startTimestamp;\r\n    uint256 public endTimestamp;\r\n\r\n    mapping(uint256 => bool) public depositAmountEnabled;\r\n\r\n    address public owner;\r\n    bool private initialized;\r\n\r\n    event TransferOwnership(address _oldOwner, address _newOwner);\r\n    event Deposit(address user, uint256 coin);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier underWay() {\r\n        require(block.timestamp >= startTimestamp && startTimestamp > 0, \"Private sale not started\");\r\n        require(block.timestamp <= endTimestamp, \"Private sale ended\");\r\n        _;\r\n    }\r\n\r\n    modifier whenExpired() {\r\n        require(block.timestamp > endTimestamp, \"Private sale not ended\");\r\n        _;\r\n    }\r\n\r\n\tmodifier canDeposit() {\r\n\t\trequire(depositAmountEnabled[msg.value], \"Deposit amount is now allowed\");\r\n\t\t_;\r\n\t}\r\n\r\n    function initialize(address _coinToken) external {\r\n        require (!initialized, \"Already initialized\");\r\n        initialized = true;\r\n\r\n        owner = msg.sender;\r\n        emit TransferOwnership(address(0), owner);\r\n\r\n        contributeCoin = _coinToken;\r\n\r\n\t\ttotalDepositCap = 50 * (10 ** 18); // 50 ETH\r\n        maxPerWallet = 1 * (10 ** 18); // 1 ETH\r\n\t\tdepositAddress = 0x6264B1AE625b694C790628afC5472DE23940Abb2;\r\n\r\n\t\tstartTimestamp = 1696420800; // October 4th , 12:00 UTC\r\n\t\tendTimestamp = 1697025600; // October 11th , 12:00 UTC\r\n\r\n\t\tdepositAmountEnabled[25 * (10 ** 16)] = true; // 0.25 ETH\r\n\t\tdepositAmountEnabled[50 * (10 ** 16)] = true; // 0.5 ETH\r\n\t\tdepositAmountEnabled[100 * (10 ** 16)] = true; // 1 ETH\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"Zero address\");\r\n        emit TransferOwnership(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        emit TransferOwnership(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    function launchPrivateSale(uint256 secStart, uint256 _secDuration) external onlyOwner {\r\n        startTimestamp = secStart;\r\n        endTimestamp = secStart + _secDuration;\r\n    }\r\n\r\n    function launchPrivateSale(uint256 _secDuration) external onlyOwner underWay {\r\n        endTimestamp = block.timestamp + _secDuration;\r\n    }\r\n\r\n    function updateMaxTokenPerWallet(uint256 _maxAmount) external onlyOwner {\r\n        maxPerWallet = _maxAmount;\r\n    }\r\n\r\n    function setTotalCap(uint256 _totalAmount) external onlyOwner {\r\n        totalDepositCap = _totalAmount;\r\n    }\r\n\r\n\tfunction setDepositAddress(address newAddress) external onlyOwner {\r\n\t\trequire(depositAddress != newAddress, \"Already set\");\r\n        depositAddress = newAddress;\r\n    }\r\n\r\n\tfunction updateDepositAmount(uint256 newAmount, bool set) external onlyOwner {\r\n\t\trequire(depositAmountEnabled[newAmount] != set, \"Already set\");\r\n        depositAmountEnabled[newAmount] = set;\r\n    }\r\n\r\n    function updateTokens(address _coinToken) external onlyOwner {\r\n        require(totalCoinContributed == 0, \"Unable to update token addresses\");\r\n        contributeCoin = _coinToken;\r\n    }\r\n\r\n    function innerDepositCoin(uint256 _coinAmount) internal returns (uint256) {\r\n        uint256 cReceived;\r\n\t\taddress _to = msg.sender;\r\n        if (contributeCoin == address(0)) {\r\n            cReceived = msg.value;\r\n\t\t\tpayCoin(depositAddress, cReceived);\r\n        } else {\r\n            address feeRx = depositAddress;\r\n            uint256 _oldCBalance = IToken(contributeCoin).balanceOf(feeRx);\r\n            IToken(contributeCoin).transferFrom(_to, feeRx, _coinAmount);\r\n            uint256 _newCBalance = IToken(contributeCoin).balanceOf(feeRx);\r\n\r\n            cReceived = _newCBalance - _oldCBalance;\r\n        }\r\n\r\n        totalCoinContributed += cReceived;\r\n\t\trequire(totalCoinContributed <= totalDepositCap, \"Reached total cap\");\r\n\r\n        coinContributed[_to] += cReceived;\r\n\t\trequire(coinContributed[_to] <= maxPerWallet, \"Too much deposited\");\r\n\r\n        return cReceived;\r\n    }\r\n\r\n    function deposit(uint256 _coinAmount) external payable underWay canDeposit\r\n    {\r\n        uint256 coin = innerDepositCoin(_coinAmount);\r\n        emit Deposit(msg.sender, coin);\r\n    }\r\n\r\n    function recoverCoin(address _to, uint256 _amount) external payable onlyOwner {\r\n        if (_amount == 0) {\r\n            if (contributeCoin == address(0)) {\r\n                _amount = address(this).balance;\r\n            } else {\r\n                _amount = IToken(contributeCoin).balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        payCoin(_to, _amount);\r\n    }\r\n\r\n    function payCoin(address _to, uint256 _amount) internal {\r\n        if (contributeCoin == address(0)) {\r\n            (bool success,) = payable(_to).call{value: _amount}(\"\");\r\n            require(success, \"Failed to recover\");\r\n        } else {\r\n            IToken(contributeCoin).transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contributeCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAmountEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secDuration\",\"type\":\"uint256\"}],\"name\":\"launchPrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secDuration\",\"type\":\"uint256\"}],\"name\":\"launchPrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverCoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDepositAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"}],\"name\":\"setTotalCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoinContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"updateDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokenPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinToken\",\"type\":\"address\"}],\"name\":\"updateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PrivateSale", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://265dce18b83ca9a2ae077f49ab0811dab4a3d8e8ac477ed64f9f61625c2805f1"}