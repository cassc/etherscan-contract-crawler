{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n// IERC20 standard interface\r\ninterface IERC20\r\n{\r\n    function balanceOf(address user) external view returns(uint256);\r\n    function decimals() external view returns(uint8);\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n} \r\n\r\n//USDT contract in Ethereum does not follow ERC20 standard so it needs different interface\r\ninterface IERC20_USDT\r\n{\r\n    function transfer(address _to, uint256 _amount) external;\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    function balanceOf(address who) external returns (uint);\r\n}\r\n\r\n\r\n\r\n// Ownership smart contract\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// Main Token sale smart contract \r\ncontract TokenSale is Ownable{\r\n\r\n    //public variables\r\n    IERC20 public token;\r\n    address public usdtToken;\r\n\r\n    uint256 public exchangeRateInEth; // exchange rate => 1 ETH = how many tokens\r\n    uint256 public maxAmountinEth;    // Max amount limit in ETH in one transacation\r\n\r\n    uint256 public exchangeRateInUSDT; // exchange rate => 1 USDT = how many tokens\r\n    uint256 public maxAmountinUSDT;    // Max amount limit in USDT in one transacation\r\n\r\n    \r\n    // Events\r\n    event TokensPurchasedWithETH(address indexed buyer, uint256 amount, uint256 tokenPaid);\r\n    event TokensPurchasedWithUSDT(address indexed buyer, address tokenAddress, uint256 amount);\r\n    \r\n\r\n    constructor(\r\n        IERC20 _token,\r\n        uint256 _exchangeRateInEth,\r\n        uint256 _maxAmountinEth\r\n    ) {\r\n        token = _token;\r\n        exchangeRateInEth = _exchangeRateInEth;\r\n        maxAmountinEth = _maxAmountinEth;\r\n    }\r\n\r\n    function updateExchangeRateInEth(uint256 _exchangeRate) external onlyOwner {\r\n        exchangeRateInEth = _exchangeRate;\r\n    }\r\n\r\n    function updateMaxAmountinEth(uint256 _maxAmount) external onlyOwner {\r\n        maxAmountinEth = _maxAmount;\r\n    }\r\n\r\n    function updateExchangeRateInUSDT(uint256 _exchangeRate) external onlyOwner {\r\n        exchangeRateInUSDT = _exchangeRate;\r\n    }\r\n\r\n    function updateMaxAmountinUSDT(uint256 _maxAmount) external onlyOwner {\r\n        maxAmountinUSDT = _maxAmount;\r\n    }\r\n\r\n    function setUsdtToken(address _usdtToken) external onlyOwner {\r\n        usdtToken = _usdtToken;\r\n    }\r\n\r\n\r\n    /**\r\n    * Token Buy\r\n    */\r\n    function buyTokensWithEth() external payable {\r\n        require (msg.value > 0, \"You need to send some Ether\");\r\n        require (msg.value <= maxAmountinEth, \"Cannot buy more than max limit\");\r\n\r\n        uint256 amount = msg.value * exchangeRateInEth;\r\n\r\n        require(token.balanceOf(address(this)) >= amount, \"Not enough tokens left for sale\");\r\n\r\n        token.transfer(msg.sender, amount);\r\n        payable(owner()).transfer(msg.value);\r\n\r\n        emit TokensPurchasedWithETH(msg.sender, msg.value, amount);\r\n    }\r\n\r\n\r\n    function buyTokensWithUSDT(uint256 usdtAmount) external {\r\n        \r\n        require(IERC20_USDT(usdtToken).balanceOf(msg.sender) >= usdtAmount, \"Not suffiecient balance\");\r\n        require(usdtAmount > 0, \"Token amount should be greater than zero\");\r\n        require(usdtAmount <= maxAmountinUSDT, \"Cannot buy more than max limit\");\r\n\r\n        uint256 amount = usdtAmount * exchangeRateInUSDT;\r\n\r\n        require(token.balanceOf(address(this)) >= amount, \"Not enough tokens left for sale\");\r\n           \r\n        IERC20_USDT(usdtToken).transferFrom(msg.sender, owner(), usdtAmount);\r\n            \r\n        token.transfer(msg.sender, amount);\r\n\r\n        emit TokensPurchasedWithUSDT(msg.sender, usdtToken, amount);\r\n        \r\n    }\r\n\r\n    /**\r\n    * This lets owner to withdraw any leftover tokens.\r\n    */\r\n    function withdrawLeftoverTokens(address tokenAddress) external onlyOwner{\r\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\r\n        require(balance > 0, \"No token balance to withdraw\");\r\n        IERC20(tokenAddress).transfer(msg.sender, balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRateInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountinEth\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPaid\",\"type\":\"uint256\"}],\"name\":\"TokensPurchasedWithETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchasedWithUSDT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyTokensWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateInUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountinEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountinUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"name\":\"setUsdtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRateInEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRateInUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxAmountinEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxAmountinUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawLeftoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenSale", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000085018d46c4f21460490d841ef43b07bbcc99f6dc000000000000000000000000000000000000000000000000000000000000aa5b00000000000000000000000000000000000000000000d3c21bcecceda1000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a429db3a9a8d9f08c1a03015c6bfda24b80db8e608486054f70508cec708abac"}