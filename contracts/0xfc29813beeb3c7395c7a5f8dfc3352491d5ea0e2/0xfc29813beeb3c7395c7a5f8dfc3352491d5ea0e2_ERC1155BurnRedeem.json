{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/burnredeem/ERC1155BurnRedeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/core/IERC1155CreatorCore.sol\\\";\\n\\nimport \\\"./BurnRedeemCore.sol\\\";\\nimport \\\"./BurnRedeemLib.sol\\\";\\nimport \\\"./IERC1155BurnRedeem.sol\\\";\\n\\ncontract ERC1155BurnRedeem is BurnRedeemCore, IERC1155BurnRedeem {\\n    using Strings for uint256;\\n\\n    // { creatorContractAddress => { instanceId =>  tokenId } }\\n    mapping(address => mapping(uint256 => uint256)) private _redeemTokenIds;\\n    // { creatorContractAddress => { tokenId =>  instanceId } }\\n    mapping(address => mapping(uint256 => uint256)) private _redeemInstanceIds;\\n\\n    constructor(address initialOwner) BurnRedeemCore(initialOwner) {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(BurnRedeemCore, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155BurnRedeem).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * See {IERC1155BurnRedeem-initializeBurnRedeem}.\\n     */\\n    function initializeBurnRedeem(\\n        address creatorContractAddress,\\n        uint256 instanceId,\\n        BurnRedeemParameters calldata burnRedeemParameters\\n    ) external override {\\n        _validateAdmin(creatorContractAddress);\\n        _initialize(creatorContractAddress, 0, instanceId, burnRedeemParameters);\\n\\n        // Mint a new token with amount '0' to the creator\\n        address[] memory receivers = new address[](1);\\n        receivers[0] = msg.sender;\\n        string[] memory uris = new string[](1);\\n        uint256[] memory amounts = new uint256[](1);\\n        uint256[] memory newTokenIds = IERC1155CreatorCore(creatorContractAddress).mintExtensionNew(receivers, amounts, uris);\\n        _redeemTokenIds[creatorContractAddress][instanceId] = newTokenIds[0];\\n        _redeemInstanceIds[creatorContractAddress][newTokenIds[0]] = instanceId;\\n    }\\n\\n    /**\\n     * See {IERC1155BurnRedeem-updateBurnRedeem}.\\n     */\\n    function updateBurnRedeem(\\n        address creatorContractAddress,\\n        uint256 instanceId,\\n        BurnRedeemParameters calldata burnRedeemParameters\\n    ) external override {\\n        _validateAdmin(creatorContractAddress);\\n        _update(creatorContractAddress, instanceId, burnRedeemParameters);\\n    }\\n\\n    /**\\n     * See {IERC1155BurnRedeem-updateURI}.\\n     */\\n    function updateURI(\\n        address creatorContractAddress,\\n        uint256 instanceId,\\n        StorageProtocol storageProtocol,\\n        string calldata location\\n    ) external override {\\n        _validateAdmin(creatorContractAddress);\\n        BurnRedeem storage burnRedeemInstance = _getBurnRedeem(creatorContractAddress, instanceId);\\n        burnRedeemInstance.storageProtocol = storageProtocol;\\n        burnRedeemInstance.location = location;\\n        emit BurnRedeemLib.BurnRedeemUpdated(creatorContractAddress, instanceId);\\n    }\\n\\n    /**\\n     * Helper to mint multiple redeem tokens\\n     */\\n    function _redeem(address creatorContractAddress, uint256 instanceId, BurnRedeem storage burnRedeemInstance, address to, uint32 count, bytes memory data) internal override {\\n        address[] memory addresses = new address[](1);\\n        addresses[0] = to;\\n        uint256[] memory tokenIds = new uint256[](1);\\n        tokenIds[0] = _redeemTokenIds[creatorContractAddress][instanceId];\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = burnRedeemInstance.redeemAmount * count;\\n        \\n        IERC1155CreatorCore(creatorContractAddress).mintExtensionExisting(addresses, tokenIds, values);\\n        burnRedeemInstance.redeemedCount += uint32(values[0]);\\n\\n        emit BurnRedeemLib.BurnRedeemMint(creatorContractAddress, instanceId, tokenIds[0], uint32(values[0]), data);\\n    }\\n\\n    /**\\n     * See {ICreatorExtensionTokenURI-tokenURI}.\\n     */\\n    function tokenURI(address creatorContractAddress, uint256 tokenId) external override view returns(string memory uri) {\\n        uint256 instanceId = _getRedeemInstanceId(creatorContractAddress, tokenId);\\n        BurnRedeem memory burnRedeem = _burnRedeems[creatorContractAddress][instanceId];\\n\\n        string memory prefix = \\\"\\\";\\n        if (burnRedeem.storageProtocol == StorageProtocol.ARWEAVE) {\\n            prefix = ARWEAVE_PREFIX;\\n        } else if (burnRedeem.storageProtocol == StorageProtocol.IPFS) {\\n            prefix = IPFS_PREFIX;\\n        }\\n        uri = string(abi.encodePacked(prefix, burnRedeem.location));\\n    }\\n\\n    /**\\n     * See {IBurnRedeemCore-getBurnRedeemForToken}.\\n     */\\n    function getBurnRedeemForToken(address creatorContractAddress, uint256 tokenId) external override view returns(uint256 instanceId, BurnRedeem memory burnRedeem) {\\n        instanceId = _getRedeemInstanceId(creatorContractAddress, tokenId);\\n        burnRedeem = _burnRedeems[creatorContractAddress][instanceId];\\n    }\\n\\n    /**\\n     * See {IBurnRedeemCore-getBurnRedeemToken}.\\n     */\\n    function getBurnRedeemToken(address creatorContractAddress, uint256 instanceId) external override view returns(uint256 tokenId) {\\n        tokenId = _redeemTokenIds[creatorContractAddress][instanceId];\\n        if (tokenId == 0) {\\n            revert BurnRedeemDoesNotExist(instanceId);\\n        }\\n    }\\n\\n    function _getRedeemInstanceId(address creatorContractAddress, uint256 tokenId) internal view returns(uint256 instanceId) {\\n        instanceId = _redeemInstanceIds[creatorContractAddress][tokenId];\\n        if (instanceId == 0) {\\n            revert InvalidToken(tokenId);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/creator-core-solidity/contracts/core/IERC1155CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./CreatorCore.sol\\\";\\n\\n/**\\n * @dev Core ERC1155 creator interface\\n */\\ninterface IERC1155CreatorCore is ICreatorCore {\\n\\n    /**\\n     * @dev mint a token with no extension. Can only be called by an admin.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintBaseNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintBaseNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintBaseNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token with no extension. Can only be called by an admin.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintBaseExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintBaseExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintBaseExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev mint a token from an extension. Can only be called by a registered extension.\\n     *\\n     * @param to       - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param amounts  - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     * @param uris     - If no elements, all tokens use the default uri.\\n     *                   If any element is an empty string, the corresponding token uses the default uri.\\n     *\\n     *\\n     * Requirements: If to is a multi-element array, then uris must be empty or single element array\\n     *               If to is a multi-element array, then amounts must be a single element array or a multi-element array of the same size\\n     *               If to is a single element array, uris must be empty or the same length as amounts\\n     *\\n     * Examples:\\n     *    mintExtensionNew(['0x....1', '0x....2'], [1], [])\\n     *        Mints a single new token, and gives 1 each to '0x....1' and '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1', '0x....2'], [1, 2], [])\\n     *        Mints a single new token, and gives 1 to '0x....1' and 2 to '0x....2'.  Token uses default uri.\\n     *    \\n     *    mintExtensionNew(['0x....1'], [1, 2], [\\\"\\\", \\\"http://token2.com\\\"])\\n     *        Mints two new tokens to '0x....1'. 1 of the first token, 2 of the second.  1st token uses default uri, second uses \\\"http://token2.com\\\".\\n     *    \\n     * @return Returns list of tokenIds minted\\n     */\\n    function mintExtensionNew(address[] calldata to, uint256[] calldata amounts, string[] calldata uris) external returns (uint256[] memory);\\n\\n    /**\\n     * @dev batch mint existing token from extension. Can only be called by a registered extension.\\n     *\\n     * @param to        - Can be a single element array (all tokens go to same address) or multi-element array (single token to many recipients)\\n     * @param tokenIds  - Can be a single element array (all recipients get the same token) or a multi-element array\\n     * @param amounts   - Can be a single element array (all recipients get the same amount) or a multi-element array\\n     *\\n     * Requirements: If any of the parameters are multi-element arrays, they need to be the same length as other multi-element arrays\\n     *\\n     * Examples:\\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10])\\n     *        Mints 10 of tokenId 1 to each of '0x....1' and '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 2 to '0x....2'.\\n     *    \\n     *    mintExtensionExisting(['0x....1'], [1, 2], [10, 20])\\n     *        Mints 10 of tokenId 1 and 20 of tokenId 2 to '0x....1'.\\n     *    \\n     *    mintExtensionExisting(['0x....1', '0x....2'], [1], [10, 20])\\n     *        Mints 10 of tokenId 1 to '0x....1' and 20 of tokenId 1 to '0x....2'.\\n     *    \\n     */\\n    function mintExtensionExisting(address[] calldata to, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev burn tokens. Can only be called by token owner or approved address.\\n     * On burn, calls back to the registered extension's onBurn method\\n     */\\n    function burn(address account, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given tokenId.\\n     */\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/burnredeem/BurnRedeemCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                 //\\n//                                                                                 //\\n//                                     .%(#.                                       //\\n//                                      #(((#%,                                    //\\n//                                      (#(((((#%*                                 //\\n//                                      /#((((((((##*                              //\\n//                                      (#((((((((((##%.                           //\\n//                                     ,##(/*/(////((((#%*                         //\\n//                                   .###(//****/////(((##%,                       //\\n//                  (,          ,%#((((((///******/////((##%(                      //\\n//                *((,         ,##(///////*********////((###%*                     //\\n//              /((((         ,##(//////************/(((((###%                     //\\n//             /((((         ,##((////***************/((((###%                     //\\n//             (((          .###((///*****************((((####                     //\\n//             .            (##((//*******************((((##%*                     //\\n//               (#.       .###((/********************((((##%.      %.             //\\n//             ,%(#.       .###(/********,,,,,,,*****/(((###%#     ((%,            //\\n//            /%#/(/       /###(//****,,,,,,,,,,,****/((((((##%%%%#((#%.           //\\n//           /##(//(#.    ,###((/****,,,,,,,,,,,,,***/((/(((((((((#####%           //\\n//          *%##(/////((###((((/***,,,,,,,,,,,,,,,***//((((((((((####%%%/          //\\n//          ####(((//////(//////**,,,,,,.....,,,,,,****/(((((//((####%%%%          //\\n//         .####(((/((((((/////**,,,,,.......,,,,,,,,*****/////(#####%%%%          //\\n//         .#%###((////(((//***,,,,,,..........,,,,,,,,*****//((#####%%%%          //\\n//          /%%%###/////*****,,,,,,,..............,,,,,,,****/(((####%%%%          //\\n//           /%%###(////****,,,,,,.....        ......,,,,,,**(((####%%%%           //\\n//            ,#%###(///****,,,,,....            .....,,,,,***/(/(##%%(            //\\n//              (####(//****,,....                 ....,,,,,***/(####              //\\n//                (###(/***,,,...                    ...,,,,***(##/                //\\n//             #.   (#((/**,,,,..                    ...,,,,*((#,                  //\\n//               ,#(##(((//,,,,..                   ...,,,*/(((#((/                //\\n//                  *#(((///*,,....                ....,*//((((                    //\\n//                      *(///***,....            ...,***//,                        //\\n//                           ,//***,...       ..,,*,                               //\\n//                                                                                 //\\n//                                                                                 //\\n/////////////////////////////////////////////////////////////////////////////////////\\n\\nimport \\\"@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\\\";\\nimport \\\"@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\".././libraries/manifold-membership/IManifoldMembership.sol\\\";\\nimport \\\"./BurnRedeemLib.sol\\\";\\nimport \\\"./IBurnRedeemCore.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\n\\n/**\\n * @title Burn Redeem Core\\n * @author manifold.xyz\\n * @notice Core logic for Burn Redeem shared extensions.\\n */\\nabstract contract BurnRedeemCore is ERC165, AdminControl, ReentrancyGuard, IBurnRedeemCore, ICreatorExtensionTokenURI {\\n    using Strings for uint256;\\n\\n    uint256 public constant BURN_FEE = 690000000000000;\\n    uint256 public constant MULTI_BURN_FEE = 990000000000000;\\n\\n    string internal constant ARWEAVE_PREFIX = \\\"https://arweave.net/\\\";\\n    string internal constant IPFS_PREFIX = \\\"ipfs://\\\";\\n\\n    uint256 internal constant MAX_UINT_16 = 0xffff;\\n    uint256 internal constant MAX_UINT_24 = 0xffffff;\\n    uint256 internal constant MAX_UINT_32 = 0xffffffff;\\n    uint256 internal constant MAX_UINT_56 = 0xffffffffffffff;\\n    uint256 internal constant MAX_UINT_256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    // { creatorContractAddress => { instanceId => BurnRedeem } }\\n    mapping(address => mapping(uint256 => BurnRedeem)) internal _burnRedeems;\\n\\n    address public manifoldMembershipContract;\\n\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165, AdminControl) returns (bool) {\\n        return interfaceId == type(IBurnRedeemCore).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(ICreatorExtensionTokenURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice This extension is shared, not single-creator. So we must ensure\\n     * that a burn redeems's initializer is an admin on the creator contract\\n     * @param creatorContractAddress    the address of the creator contract to check the admin against\\n     */\\n    function _validateAdmin(address creatorContractAddress) internal view {\\n        if (!IAdminControl(creatorContractAddress).isAdmin(msg.sender)) {\\n            revert NotAdmin(creatorContractAddress);\\n        }\\n    }\\n\\n    /**\\n     * Initialiazes a burn redeem with base parameters\\n     */\\n    function _initialize(\\n        address creatorContractAddress,\\n        uint8 creatorContractVersion,\\n        uint256 instanceId,\\n        BurnRedeemParameters calldata burnRedeemParameters\\n    ) internal {\\n        BurnRedeemLib.initialize(creatorContractAddress, creatorContractVersion, instanceId, _burnRedeems[creatorContractAddress][instanceId], burnRedeemParameters);\\n    }\\n\\n    /**\\n     * Updates a burn redeem with base parameters\\n     */\\n    function _update(\\n        address creatorContractAddress,\\n        uint256 instanceId,\\n        BurnRedeemParameters calldata burnRedeemParameters\\n    ) internal {\\n        BurnRedeemLib.update(creatorContractAddress, instanceId, _getBurnRedeem(creatorContractAddress, instanceId), burnRedeemParameters);\\n    }\\n\\n    /**\\n     * See {IBurnRedeemCore-getBurnRedeem}.\\n     */\\n    function getBurnRedeem(address creatorContractAddress, uint256 instanceId) external override view returns(BurnRedeem memory) {\\n        return _getBurnRedeem(creatorContractAddress, instanceId);\\n    }\\n\\n    /**\\n     * Helper to get burn redeem instance\\n     */\\n    function _getBurnRedeem(address creatorContractAddress, uint256 instanceId) internal view returns(BurnRedeem storage burnRedeemInstance) {\\n        burnRedeemInstance = _burnRedeems[creatorContractAddress][instanceId];\\n        if (burnRedeemInstance.storageProtocol == StorageProtocol.INVALID) {\\n            revert BurnRedeemDoesNotExist(instanceId);\\n        }\\n    }\\n\\n    /**\\n     * Helper to get active burn redeem instance\\n     */\\n    function _getActiveBurnRedeem(address creatorContractAddress, uint256 instanceId) private view returns(BurnRedeem storage burnRedeemInstance) {\\n        burnRedeemInstance = _getBurnRedeem(creatorContractAddress, instanceId);\\n        if (burnRedeemInstance.startDate > block.timestamp || (block.timestamp >= burnRedeemInstance.endDate && burnRedeemInstance.endDate != 0)) {\\n            revert BurnRedeemInactive(instanceId);\\n        }\\n    }\\n\\n    /**\\n     * See {IBurnRedeemCore-burnRedeem}.\\n     */\\n    function burnRedeem(address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens) external payable override nonReentrant {\\n        uint256 payableCost = _burnRedeem(msg.value, creatorContractAddress, instanceId, burnRedeemCount, burnTokens, _isActiveMember(msg.sender), true, \\\"\\\");\\n        if (msg.value > payableCost) {\\n            _forwardValue(payable(msg.sender), msg.value - payableCost);\\n        }\\n    }\\n\\n    /**\\n     * (Batch overload) see {IBurnRedeemCore-burnRedeem}.\\n     */\\n    function burnRedeem(address[] calldata creatorContractAddresses, uint256[] calldata instanceIds, uint32[] calldata burnRedeemCounts, BurnToken[][] calldata burnTokens) external payable override nonReentrant {\\n        if (creatorContractAddresses.length != instanceIds.length ||\\n            creatorContractAddresses.length != burnRedeemCounts.length ||\\n            creatorContractAddresses.length != burnTokens.length) {\\n            revert InvalidInput();\\n        }\\n\\n        bool isActiveMember = _isActiveMember(msg.sender);\\n        uint256 msgValueRemaining = msg.value;\\n        for (uint256 i; i < creatorContractAddresses.length;) {\\n            msgValueRemaining -= _burnRedeem(msgValueRemaining, creatorContractAddresses[i], instanceIds[i], burnRedeemCounts[i], burnTokens[i], isActiveMember, false, \\\"\\\");\\n            unchecked { ++i; }\\n        }\\n\\n        if (msgValueRemaining != 0) {\\n            _forwardValue(payable(msg.sender), msgValueRemaining);\\n        }\\n    }\\n\\n    /**\\n     * See {IBurnRedeemCore-burnRedeemWithData}.\\n     */\\n    function burnRedeemWithData(address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens, bytes calldata data) external payable override nonReentrant {\\n        uint256 payableCost = _burnRedeem(msg.value, creatorContractAddress, instanceId, burnRedeemCount, burnTokens, _isActiveMember(msg.sender), true, data);\\n        if (msg.value > payableCost) {\\n            _forwardValue(payable(msg.sender), msg.value - payableCost);\\n        }\\n    }\\n\\n    /**\\n     * See {IBurnRedeemCore-airdrop}.\\n     */\\n    function airdrop(address creatorContractAddress, uint256 instanceId, address[] calldata recipients, uint32[] calldata amounts) external override {\\n        _validateAdmin(creatorContractAddress);\\n        if (recipients.length != amounts.length) {\\n            revert InvalidInput();\\n        }\\n        BurnRedeem storage burnRedeemInstance = _getBurnRedeem(creatorContractAddress, instanceId);\\n\\n        uint256 totalAmount;\\n        for (uint256 i; i < amounts.length;) {\\n            totalAmount += amounts[i] * burnRedeemInstance.redeemAmount;\\n            unchecked{ ++i; }\\n        }\\n        if (totalAmount + burnRedeemInstance.redeemedCount > MAX_UINT_32) {\\n            revert InvalidRedeemAmount();\\n        }\\n\\n        // Airdrop the tokens\\n        for (uint256 i; i < recipients.length;) {\\n            _redeem(creatorContractAddress, instanceId, burnRedeemInstance, recipients[i], amounts[i], \\\"\\\");\\n            unchecked{ ++i; }\\n        }\\n\\n        BurnRedeemLib.syncTotalSupply(burnRedeemInstance);\\n    }\\n\\n    function _burnRedeem(uint256 msgValue, address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens, bool isActiveMember, bool revertNoneRemaining, bytes memory data) private returns (uint256) {\\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\\n\\n        // Get the amount that can be burned\\n        burnRedeemCount = _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, burnRedeemCount, revertNoneRemaining);\\n        if (burnRedeemCount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 payableCost = burnRedeemInstance.cost;\\n        uint256 cost = burnRedeemInstance.cost;\\n        if (!isActiveMember) {\\n            payableCost += burnTokens.length <= 1 ? BURN_FEE : MULTI_BURN_FEE;\\n        }\\n        if (burnRedeemCount > 1) {\\n            payableCost *= burnRedeemCount;\\n            cost *= burnRedeemCount;\\n        }\\n        if (payableCost > msgValue) {\\n            revert InvalidPaymentAmount();\\n        }\\n        if (cost > 0) {\\n            _forwardValue(burnRedeemInstance.paymentReceiver, cost);\\n        }\\n\\n        // Do burn redeem\\n        _burnTokens(burnRedeemInstance, burnTokens, burnRedeemCount, msg.sender, data);\\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, msg.sender, burnRedeemCount, data);\\n\\n        return payableCost;\\n    }\\n\\n    /**\\n     * @dev See {IBurnRedeemCore-recoverERC721}.\\n     */\\n    function recoverERC721(address tokenAddress, uint256 tokenId, address destination) external override adminRequired {\\n        IERC721(tokenAddress).transferFrom(address(this), destination, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IBurnRedeemCore-withdraw}.\\n     */\\n    function withdraw(address payable recipient, uint256 amount) external override adminRequired {\\n        _forwardValue(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev See {IBurnRedeemCore-setManifoldMembership}.\\n     */\\n    function setMembershipAddress(address addr) external override adminRequired {\\n        manifoldMembershipContract = addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external override nonReentrant returns(bytes4) {\\n        _onERC721Received(from, id, data);\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override nonReentrant returns(bytes4) {\\n        // Check calldata is valid\\n        if (data.length % 32 != 0) {\\n            revert InvalidData();\\n        }\\n\\n        address creatorContractAddress;\\n        uint256 instanceId;\\n        uint32 burnRedeemCount;\\n        uint256 burnItemIndex;\\n        bytes32[] memory merkleProof;\\n        (creatorContractAddress, instanceId, burnRedeemCount, burnItemIndex, merkleProof) = abi.decode(data, (address, uint256, uint32, uint256, bytes32[]));\\n\\n        // Do burn redeem\\n        _onERC1155Received(from, id, value, creatorContractAddress, instanceId, burnRedeemCount, burnItemIndex, merkleProof);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override nonReentrant returns(bytes4) {\\n        // Check calldata is valid\\n        if (data.length % 32 != 0) {\\n            revert InvalidData();\\n        }\\n\\n        address creatorContractAddress;\\n        uint256 instanceId;\\n        uint32 burnRedeemCount;\\n        BurnToken[] memory burnTokens;\\n        (creatorContractAddress, instanceId, burnRedeemCount, burnTokens) = abi.decode(data, (address, uint256, uint32, BurnToken[]));\\n\\n        // Do burn redeem\\n        _onERC1155BatchReceived(from, ids, values, creatorContractAddress, instanceId, burnRedeemCount, burnTokens);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @notice ERC721 token transfer callback\\n     * @param from      the person sending the tokens\\n     * @param id        the token id of the burn token\\n     * @param data      bytes indicating the target burnRedeem and, optionally, a merkle proof that the token is valid\\n     */\\n    function _onERC721Received(\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) private {\\n        // Check calldata is valid\\n        if (data.length % 32 != 0) {\\n            revert InvalidData();\\n        }\\n\\n        address creatorContractAddress;\\n        uint256 instanceId;\\n        uint256 burnItemIndex;\\n        bytes32[] memory merkleProof;\\n        (creatorContractAddress, instanceId, burnItemIndex, merkleProof) = abi.decode(data, (address, uint256, uint256, bytes32[]));\\n\\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\\n\\n        // A single ERC721 can only be sent in directly for a burn if:\\n        // 1. There is no cost to the burn (because no payment can be sent with a transfer)\\n        // 2. The burn only requires one NFT (one burnSet element and one count)\\n        // 3. They are an active member (because no fee payment can be sent with a transfer)\\n        _validateReceivedInput(burnRedeemInstance.cost, burnRedeemInstance.burnSet.length, burnRedeemInstance.burnSet[0].requiredCount, from);\\n\\n        _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, 1, true);\\n\\n        // Check that the burn token is valid\\n        BurnItem memory burnItem = burnRedeemInstance.burnSet[0].items[burnItemIndex];\\n\\n        // Can only take in one burn item\\n        if (burnItem.tokenSpec != TokenSpec.ERC721) {\\n            revert InvalidInput();\\n        }\\n        BurnRedeemLib.validateBurnItem(burnItem, msg.sender, id, merkleProof);\\n\\n        // Do burn and redeem\\n        _burn(burnItem, address(this), msg.sender, id, 1, \\\"\\\");\\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, from, 1, \\\"\\\");\\n    }\\n\\n    /**\\n     * Execute onERC1155Received burn/redeem\\n     */\\n    function _onERC1155Received(address from, uint256 tokenId, uint256 value, address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, uint256 burnItemIndex, bytes32[] memory merkleProof) private {\\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\\n\\n        // A single 1155 can only be sent in directly for a burn if:\\n        // 1. There is no cost to the burn (because no payment can be sent with a transfer)\\n        // 2. The burn only requires one NFT (one burn set element and one required count in the set)\\n        // 3. They are an active member (because no fee payment can be sent with a transfer)\\n        _validateReceivedInput(burnRedeemInstance.cost, burnRedeemInstance.burnSet.length, burnRedeemInstance.burnSet[0].requiredCount, from);\\n\\n        uint32 availableBurnRedeemCount = _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, burnRedeemCount, true);\\n\\n        // Check that the burn token is valid\\n        BurnItem memory burnItem = burnRedeemInstance.burnSet[0].items[burnItemIndex];\\n        if (value != burnItem.amount * burnRedeemCount) {\\n            revert InvalidBurnAmount();\\n        }\\n        BurnRedeemLib.validateBurnItem(burnItem, msg.sender, tokenId, merkleProof);\\n\\n        _burn(burnItem, address(this), msg.sender, tokenId, availableBurnRedeemCount, \\\"\\\");\\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, from, availableBurnRedeemCount, \\\"\\\");\\n\\n        // Return excess amount\\n        if (availableBurnRedeemCount != burnRedeemCount) {\\n            IERC1155(msg.sender).safeTransferFrom(address(this), from, tokenId, (burnRedeemCount - availableBurnRedeemCount) * burnItem.amount, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * Execute onERC1155BatchReceived burn/redeem\\n     */\\n    function _onERC1155BatchReceived(address from, uint256[] calldata tokenIds, uint256[] calldata values, address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] memory burnTokens) private {\\n        BurnRedeem storage burnRedeemInstance = _getActiveBurnRedeem(creatorContractAddress, instanceId);\\n\\n        // A single 1155 can only be sent in directly for a burn if:\\n        // 1. There is no cost to the burn (because no payment can be sent with a transfer)\\n        // 2. We have the right data length\\n        // 3. They are an active member (because no fee payment can be sent with a transfer)\\n        if (burnRedeemInstance.cost != 0 || burnTokens.length != tokenIds.length || !_isActiveMember(from)) {\\n            revert InvalidInput();\\n        }\\n        uint32 availableBurnRedeemCount = _getAvailableBurnRedeemCount(burnRedeemInstance.totalSupply, burnRedeemInstance.redeemedCount, burnRedeemInstance.redeemAmount, burnRedeemCount, true);\\n\\n        // Verify the values match what is needed\\n        uint256[] memory returnValues = new uint256[](tokenIds.length);\\n        for (uint256 i; i < burnTokens.length;) {\\n            BurnToken memory burnToken = burnTokens[i];\\n            BurnItem memory burnItem = burnRedeemInstance.burnSet[burnToken.groupIndex].items[burnToken.itemIndex];\\n            if (burnToken.id != tokenIds[i]) {\\n                revert InvalidToken(tokenIds[i]);\\n            }\\n            if (burnItem.amount * burnRedeemCount != values[i]) {\\n                revert InvalidRedeemAmount();\\n            }\\n            if (availableBurnRedeemCount != burnRedeemCount) {\\n                returnValues[i] = values[i] - burnItem.amount * availableBurnRedeemCount;\\n            }\\n            unchecked { ++i; }\\n        }\\n\\n        // Do burn redeem\\n        _burnTokens(burnRedeemInstance, burnTokens, availableBurnRedeemCount, address(this), \\\"\\\");\\n        _redeem(creatorContractAddress, instanceId, burnRedeemInstance, from, availableBurnRedeemCount, \\\"\\\");\\n\\n        // Return excess amount\\n        if (availableBurnRedeemCount != burnRedeemCount) {\\n            IERC1155(msg.sender).safeBatchTransferFrom(address(this), from, tokenIds, returnValues, \\\"\\\");\\n        }\\n    }\\n\\n    function _validateReceivedInput(uint256 cost, uint256 length, uint256 requiredCount, address from) private view {\\n        if (cost != 0 || length != 1 || requiredCount != 1 || !_isActiveMember(from)) {\\n            revert InvalidInput();\\n        }\\n    }\\n\\n    /**\\n     * Send funds to receiver\\n     */\\n    function _forwardValue(address payable receiver, uint256 amount) private {\\n        (bool sent, ) = receiver.call{value: amount}(\\\"\\\");\\n        if (!sent) {\\n            revert TransferFailure();\\n        }\\n    }\\n\\n    /**\\n     * Burn all listed tokens and check that the burn set is satisfied\\n     */\\n    function _burnTokens(BurnRedeem storage burnRedeemInstance, BurnToken[] memory burnTokens, uint256 burnRedeemCount, address owner, bytes memory data) private {\\n        // Check that each group in the burn set is satisfied\\n        uint256[] memory groupCounts = new uint256[](burnRedeemInstance.burnSet.length);\\n\\n        for (uint256 i; i < burnTokens.length;) {\\n            BurnToken memory burnToken = burnTokens[i];\\n            BurnItem memory burnItem = burnRedeemInstance.burnSet[burnToken.groupIndex].items[burnToken.itemIndex];\\n\\n            BurnRedeemLib.validateBurnItem(burnItem, burnToken.contractAddress, burnToken.id, burnToken.merkleProof);\\n\\n            _burn(burnItem, owner, burnToken.contractAddress, burnToken.id, burnRedeemCount, data);\\n            groupCounts[burnToken.groupIndex] += burnRedeemCount;\\n\\n            unchecked { ++i; }\\n        }\\n\\n        for (uint256 i; i < groupCounts.length;) {\\n            if (groupCounts[i] != burnRedeemInstance.burnSet[i].requiredCount * burnRedeemCount) {\\n                revert InvalidBurnAmount();\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * Helper to check if the sender holds an active Manifold membership\\n     */\\n    function _isActiveMember(address sender) private view returns(bool) {\\n        return manifoldMembershipContract != address(0) &&\\n            IManifoldMembership(manifoldMembershipContract).isActiveMember(sender);\\n    }\\n\\n    /**\\n     * Helper to get the number of burn redeems the person can accomplish\\n     */\\n    function _getAvailableBurnRedeemCount(uint32 totalSupply, uint32 redeemedCount, uint32 redeemAmount, uint32 desiredCount, bool revertNoneRemaining) internal pure returns(uint32 burnRedeemCount) {\\n        if (totalSupply == 0) {\\n            burnRedeemCount = desiredCount;\\n        } else {\\n            uint32 remainingCount = (totalSupply - redeemedCount) / redeemAmount;\\n            if (remainingCount > desiredCount) {\\n                burnRedeemCount = desiredCount;\\n            } else {\\n                burnRedeemCount = remainingCount;\\n            }\\n        }\\n\\n        if (revertNoneRemaining && burnRedeemCount == 0) {\\n            revert InvalidRedeemAmount();\\n        }\\n    }\\n\\n    /** \\n     * Abstract helper to mint multiple redeem tokens. To be implemented by inheriting contracts.\\n     */\\n    function _redeem(address creatorContractAddress, uint256 instanceId, BurnRedeem storage burnRedeemInstance, address to, uint32 count, bytes memory data) internal virtual;\\n\\n    /**\\n     * Helper to burn token\\n     */\\n    function _burn(BurnItem memory burnItem, address from, address contractAddress, uint256 tokenId, uint256 burnRedeemCount, bytes memory data) private {\\n        if (burnItem.tokenSpec == TokenSpec.ERC1155) {\\n            uint256 amount = burnItem.amount * burnRedeemCount;\\n\\n            if (burnItem.burnSpec == BurnSpec.NONE) {\\n                // Send to 0xdEaD to burn if contract doesn't have burn function\\n                IERC1155(contractAddress).safeTransferFrom(from, address(0xdEaD), tokenId, amount, data);\\n\\n            } else if (burnItem.burnSpec == BurnSpec.MANIFOLD) {\\n                // Burn using the creator core's burn function\\n                uint256[] memory tokenIds = new uint256[](1);\\n                tokenIds[0] = tokenId;\\n                uint256[] memory amounts = new uint256[](1);\\n                amounts[0] = amount;\\n                Manifold1155(contractAddress).burn(from, tokenIds, amounts);\\n\\n            } else if (burnItem.burnSpec == BurnSpec.OPENZEPPELIN) {\\n                // Burn using OpenZeppelin's burn function\\n                OZBurnable1155(contractAddress).burn(from, tokenId, amount);\\n\\n            } else {\\n                revert InvalidBurnSpec();\\n            }\\n        } else if (burnItem.tokenSpec == TokenSpec.ERC721) {\\n            if (burnRedeemCount != 1) {\\n                revert InvalidBurnAmount();\\n            } \\n            if (burnItem.burnSpec == BurnSpec.NONE) {\\n                // Send to 0xdEaD to burn if contract doesn't have burn function\\n                IERC721(contractAddress).safeTransferFrom(from, address(0xdEaD), tokenId, data);\\n\\n            } else if (burnItem.burnSpec == BurnSpec.MANIFOLD || burnItem.burnSpec == BurnSpec.OPENZEPPELIN) {\\n                if (from != address(this)) {\\n                    // 721 `burn` functions do not have a `from` parameter, so we must verify the owner\\n                    if (IERC721(contractAddress).ownerOf(tokenId) != from) {\\n                        revert TransferFailure();\\n                    }\\n                }\\n                // Burn using the contract's burn function\\n                Burnable721(contractAddress).burn(tokenId);\\n\\n            } else {\\n                revert InvalidBurnSpec();\\n            }\\n        } else {\\n            revert InvalidTokenSpec();\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/burnredeem/BurnRedeemLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/////////////////////////////////////////////////////////////////////////////////////\\n//                                                                                 //\\n//                                                                                 //\\n//                                     .%(#.                                       //\\n//                                      #(((#%,                                    //\\n//                                      (#(((((#%*                                 //\\n//                                      /#((((((((##*                              //\\n//                                      (#((((((((((##%.                           //\\n//                                     ,##(/*/(////((((#%*                         //\\n//                                   .###(//****/////(((##%,                       //\\n//                  (,          ,%#((((((///******/////((##%(                      //\\n//                *((,         ,##(///////*********////((###%*                     //\\n//              /((((         ,##(//////************/(((((###%                     //\\n//             /((((         ,##((////***************/((((###%                     //\\n//             (((          .###((///*****************((((####                     //\\n//             .            (##((//*******************((((##%*                     //\\n//               (#.       .###((/********************((((##%.      %.             //\\n//             ,%(#.       .###(/********,,,,,,,*****/(((###%#     ((%,            //\\n//            /%#/(/       /###(//****,,,,,,,,,,,****/((((((##%%%%#((#%.           //\\n//           /##(//(#.    ,###((/****,,,,,,,,,,,,,***/((/(((((((((#####%           //\\n//          *%##(/////((###((((/***,,,,,,,,,,,,,,,***//((((((((((####%%%/          //\\n//          ####(((//////(//////**,,,,,,.....,,,,,,****/(((((//((####%%%%          //\\n//         .####(((/((((((/////**,,,,,.......,,,,,,,,*****/////(#####%%%%          //\\n//         .#%###((////(((//***,,,,,,..........,,,,,,,,*****//((#####%%%%          //\\n//          /%%%###/////*****,,,,,,,..............,,,,,,,****/(((####%%%%          //\\n//           /%%###(////****,,,,,,.....        ......,,,,,,**(((####%%%%           //\\n//            ,#%###(///****,,,,,....            .....,,,,,***/(/(##%%(            //\\n//              (####(//****,,....                 ....,,,,,***/(####              //\\n//                (###(/***,,,...                    ...,,,,***(##/                //\\n//             #.   (#((/**,,,,..                    ...,,,,*((#,                  //\\n//               ,#(##(((//,,,,..                   ...,,,*/(((#((/                //\\n//                  *#(((///*,,....                ....,*//((((                    //\\n//                      *(///***,....            ...,***//,                        //\\n//                           ,//***,...       ..,,*,                               //\\n//                                                                                 //\\n//                                                                                 //\\n/////////////////////////////////////////////////////////////////////////////////////\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"./IBurnRedeemCore.sol\\\";\\n\\n/**\\n * @title Burn Redeem Lib\\n * @author manifold.xyz\\n * @notice Library for Burn Redeem shared extensions.\\n */\\nlibrary BurnRedeemLib {\\n\\n    event BurnRedeemInitialized(address indexed creatorContract, uint256 indexed instanceId, address initializer);\\n    event BurnRedeemUpdated(address indexed creatorContract, uint256 indexed instanceId);\\n    event BurnRedeemMint(address indexed creatorContract, uint256 indexed instanceId, uint256 indexed tokenId, uint32 redeemedCount, bytes data);\\n\\n    error BurnRedeemAlreadyInitialized();\\n    error InvalidBurnItem();\\n    error InvalidBurnToken();\\n    error InvalidMerkleProof();\\n    error InvalidStorageProtocol();\\n    error InvalidPaymentReceiver();\\n    error InvalidDates();\\n    error InvalidInput();\\n\\n    /**\\n     * Initialiazes a burn redeem with base parameters\\n     */\\n    function initialize(\\n        address creatorContractAddress,\\n        uint8 creatorContractVersion,\\n        uint256 instanceId,\\n        IBurnRedeemCore.BurnRedeem storage burnRedeemInstance,\\n        IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters\\n    ) public {\\n        // Sanity checks\\n        if (burnRedeemInstance.storageProtocol != IBurnRedeemCore.StorageProtocol.INVALID) {\\n            revert BurnRedeemAlreadyInitialized();\\n        }\\n        _validateParameters(burnRedeemParameters);\\n\\n        // Create the burn redeem\\n        burnRedeemInstance.contractVersion = creatorContractVersion;\\n        _setParameters(burnRedeemInstance, burnRedeemParameters);\\n        _setBurnGroups(burnRedeemInstance, burnRedeemParameters.burnSet);\\n\\n        emit BurnRedeemInitialized(creatorContractAddress, instanceId, msg.sender);\\n    }\\n\\n    /**\\n     * Updates a burn redeem with base parameters\\n     */\\n    function update(\\n        address creatorContractAddress,\\n        uint256 instanceId,\\n        IBurnRedeemCore.BurnRedeem storage burnRedeemInstance,\\n        IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters\\n    ) public {\\n        // Sanity checks\\n        if (burnRedeemInstance.storageProtocol == IBurnRedeemCore.StorageProtocol.INVALID) {\\n            revert IBurnRedeemCore.BurnRedeemDoesNotExist(instanceId);\\n        }\\n        _validateParameters(burnRedeemParameters);\\n        // The current redeemedCount must be divisible by redeemAmount\\n        if (burnRedeemInstance.redeemedCount % burnRedeemParameters.redeemAmount != 0) {\\n            revert IBurnRedeemCore.InvalidRedeemAmount();\\n        }\\n\\n        // Overwrite the existing burnRedeem\\n        _setParameters(burnRedeemInstance, burnRedeemParameters);\\n        _setBurnGroups(burnRedeemInstance, burnRedeemParameters.burnSet);\\n        syncTotalSupply(burnRedeemInstance);\\n        emit BurnRedeemUpdated(creatorContractAddress, instanceId);\\n    }\\n\\n    /**\\n     * Helper to update total supply if redeemedCount exceeds totalSupply after airdrop or instance update.\\n     */\\n    function syncTotalSupply(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance) public {\\n        if (\\n            burnRedeemInstance.totalSupply != 0 &&\\n            burnRedeemInstance.redeemedCount > burnRedeemInstance.totalSupply\\n        ) {\\n            burnRedeemInstance.totalSupply = burnRedeemInstance.redeemedCount;\\n        }\\n    }\\n\\n    /*\\n     * Helper to validate burn item\\n     */\\n    function validateBurnItem(IBurnRedeemCore.BurnItem memory burnItem, address contractAddress, uint256 tokenId, bytes32[] memory merkleProof) public pure {\\n        if (burnItem.validationType == IBurnRedeemCore.ValidationType.ANY) {\\n            return;\\n        }\\n        if (contractAddress != burnItem.contractAddress) {\\n            revert InvalidBurnToken();\\n        }\\n        if (burnItem.validationType == IBurnRedeemCore.ValidationType.CONTRACT) {\\n            return;\\n        } else if (burnItem.validationType == IBurnRedeemCore.ValidationType.RANGE) {\\n            if (tokenId < burnItem.minTokenId || tokenId > burnItem.maxTokenId) {\\n                revert IBurnRedeemCore.InvalidToken(tokenId);\\n            }\\n            return;\\n        } else if (burnItem.validationType == IBurnRedeemCore.ValidationType.MERKLE_TREE) {\\n            bytes32 leaf = keccak256(abi.encodePacked(tokenId));\\n            if (!MerkleProof.verify(merkleProof, burnItem.merkleRoot, leaf)) {\\n                revert InvalidMerkleProof();\\n            }\\n            return;\\n        }\\n        revert InvalidBurnItem();\\n    }\\n\\n        /**\\n     * Helper to validate the parameters for a burn redeem\\n     */\\n    function _validateParameters(IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters) internal pure {\\n        if (burnRedeemParameters.storageProtocol == IBurnRedeemCore.StorageProtocol.INVALID) {\\n            revert InvalidStorageProtocol();\\n        }\\n        if (burnRedeemParameters.paymentReceiver == address(0)) {\\n            revert InvalidPaymentReceiver();\\n        }\\n        if (burnRedeemParameters.endDate != 0 && burnRedeemParameters.startDate >= burnRedeemParameters.endDate) {\\n            revert InvalidDates();\\n        }\\n        if (burnRedeemParameters.totalSupply % burnRedeemParameters.redeemAmount != 0) {\\n            revert IBurnRedeemCore.InvalidRedeemAmount();\\n        }\\n    }\\n\\n    /**\\n     * Helper to set top level properties for a burn redeem\\n     */\\n    function _setParameters(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance, IBurnRedeemCore.BurnRedeemParameters calldata burnRedeemParameters) private {\\n        burnRedeemInstance.startDate = burnRedeemParameters.startDate;\\n        burnRedeemInstance.endDate = burnRedeemParameters.endDate;\\n        burnRedeemInstance.redeemAmount = burnRedeemParameters.redeemAmount;\\n        burnRedeemInstance.totalSupply = burnRedeemParameters.totalSupply;\\n        burnRedeemInstance.storageProtocol = burnRedeemParameters.storageProtocol;\\n        burnRedeemInstance.location = burnRedeemParameters.location;\\n        burnRedeemInstance.cost = burnRedeemParameters.cost;\\n        burnRedeemInstance.paymentReceiver = burnRedeemParameters.paymentReceiver;\\n    }\\n\\n    /**\\n     * Helper to set the burn groups for a burn redeem\\n     */\\n    function _setBurnGroups(IBurnRedeemCore.BurnRedeem storage burnRedeemInstance, IBurnRedeemCore.BurnGroup[] calldata burnGroups) private {\\n        delete burnRedeemInstance.burnSet;\\n        for (uint256 i; i < burnGroups.length;) {\\n            burnRedeemInstance.burnSet.push();\\n            IBurnRedeemCore.BurnGroup storage burnGroup = burnRedeemInstance.burnSet[i];\\n            if (burnGroups[i].requiredCount == 0 || burnGroups[i].requiredCount > burnGroups[i].items.length) {\\n                revert InvalidInput();\\n            }\\n            burnGroup.requiredCount = burnGroups[i].requiredCount;\\n            for (uint256 j; j < burnGroups[i].items.length;) {\\n                IBurnRedeemCore.BurnItem memory burnItem = burnGroups[i].items[j];\\n                IBurnRedeemCore.TokenSpec tokenSpec = burnItem.tokenSpec;\\n                uint256 amount = burnItem.amount;\\n                if (\\n                    !(\\n                        (tokenSpec == IBurnRedeemCore.TokenSpec.ERC1155 && amount > 0) ||\\n                        (tokenSpec == IBurnRedeemCore.TokenSpec.ERC721 && amount == 0)\\n                    ) || \\n                    burnItem.validationType == IBurnRedeemCore.ValidationType.INVALID\\n                ) {\\n                    revert InvalidInput();\\n                }\\n                burnGroup.items.push(burnGroups[i].items[j]);\\n                unchecked { ++j; }\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/burnredeem/IERC1155BurnRedeem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"./IBurnRedeemCore.sol\\\";\\n\\ninterface IERC1155BurnRedeem is IBurnRedeemCore {\\n    struct ExtendedConfig {\\n        uint256 redeemTokenId;\\n    }\\n\\n    /**\\n     * @notice initialize a new burn redeem, emit initialize event\\n     * @param creatorContractAddress    the creator contract the burn will mint redeem tokens for\\n     * @param instanceId                the instanceId of the burnRedeem for the creator contract\\n     * @param burnRedeemParameters      the parameters which will affect the minting behavior of the burn redeem\\n     */\\n    function initializeBurnRedeem(address creatorContractAddress, uint256 instanceId, BurnRedeemParameters calldata burnRedeemParameters) external;\\n\\n    /**\\n     * @notice update an existing burn redeem\\n     * @param creatorContractAddress    the creator contract corresponding to the burn redeem\\n     * @param instanceId                the instanceId of the burnRedeem for the creator contract\\n     * @param burnRedeemParameters      the parameters which will affect the minting behavior of the burn redeem\\n     */\\n    function updateBurnRedeem(address creatorContractAddress, uint256 instanceId, BurnRedeemParameters calldata burnRedeemParameters) external;\\n\\n    /**\\n     * @notice update an existing burn redeem\\n     * @param creatorContractAddress    the creator contract corresponding to the burn redeem\\n     * @param instanceId                the instanceId of the burnRedeem for the creator contract\\n     * @param storageProtocol           the storage protocol for the metadata\\n     * @param location                  the location of the metadata\\n     */\\n    function updateURI(address creatorContractAddress, uint256 instanceId, StorageProtocol storageProtocol, string calldata location) external;\\n\\n    /**\\n     * @notice get the redeem token ID for a burn redeem\\n     */\\n    function getBurnRedeemToken(address creatorContractAddress, uint256 instanceId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/creator-core-solidity/contracts/core/CreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport \\\"../extensions/ICreatorExtensionTokenURI.sol\\\";\\nimport \\\"../extensions/ICreatorExtensionRoyalties.sol\\\";\\n\\nimport \\\"./ICreatorCore.sol\\\";\\n\\n/**\\n * @dev Core creator implementation\\n */\\nabstract contract CreatorCore is ReentrancyGuard, ICreatorCore, ERC165 {\\n    using Strings for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    uint256 internal _tokenCount = 0;\\n\\n    // Base approve transfers address location\\n    address internal _approveTransferBase;\\n\\n    // Track registered extensions data\\n    EnumerableSet.AddressSet internal _extensions;\\n    EnumerableSet.AddressSet internal _blacklistedExtensions;\\n\\n    // The baseURI for a given extension\\n    mapping (address => string) private _extensionBaseURI;\\n    mapping (address => bool) private _extensionBaseURIIdentical;\\n\\n    // The prefix for any tokens with a uri configured\\n    mapping (address => string) private _extensionURIPrefix;\\n\\n    // Mapping for individual token URIs\\n    mapping (uint256 => string) internal _tokenURIs;\\n\\n    // Royalty configurations\\n    struct RoyaltyConfig {\\n        address payable receiver;\\n        uint16 bps;\\n    }\\n    mapping (address => RoyaltyConfig[]) internal _extensionRoyalty;\\n    mapping (uint256 => RoyaltyConfig[]) internal _tokenRoyalty;\\n\\n    bytes4 private constant _CREATOR_CORE_V1 = 0x28f10a21;\\n\\n    /**\\n     * External interface identifiers for royalties\\n     */\\n\\n    /**\\n     *  @dev CreatorCore\\n     *\\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\\n     *\\n     *  => 0xbb3bafd6 = 0xbb3bafd6\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_CREATORCORE = 0xbb3bafd6;\\n\\n    /**\\n     *  @dev Rarible: RoyaltiesV1\\n     *\\n     *  bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\\n     *  bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\\n     *\\n     *  => 0xb9c4d9fb ^ 0x0ebd4c7f = 0xb7799584\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_RARIBLE = 0xb7799584;\\n\\n    /**\\n     *  @dev Foundation\\n     *\\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\\n     *\\n     *  => 0xd5a06d4c = 0xd5a06d4c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_FOUNDATION = 0xd5a06d4c;\\n\\n    /**\\n     *  @dev EIP-2981\\n     *\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    bytes4 private constant _INTERFACE_ID_ROYALTIES_EIP2981 = 0x2a55205a;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(ICreatorCore).interfaceId || interfaceId == _CREATOR_CORE_V1 || super.supportsInterface(interfaceId)\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_CREATORCORE || interfaceId == _INTERFACE_ID_ROYALTIES_RARIBLE\\n            || interfaceId == _INTERFACE_ID_ROYALTIES_FOUNDATION || interfaceId == _INTERFACE_ID_ROYALTIES_EIP2981;\\n    }\\n\\n    /**\\n     * @dev Only allows registered extensions to call the specified function\\n     */\\n    function requireExtension() internal view {\\n        require(_extensions.contains(msg.sender), \\\"Must be registered extension\\\");\\n    }\\n\\n    /**\\n     * @dev Only allows non-blacklisted extensions\\n     */\\n    function requireNonBlacklist(address extension) internal view {\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n    }   \\n\\n    /**\\n     * @dev See {ICreatorCore-getExtensions}.\\n     */\\n    function getExtensions() external view override returns (address[] memory extensions) {\\n        extensions = new address[](_extensions.length());\\n        for (uint i; i < _extensions.length();) {\\n            extensions[i] = _extensions.at(i);\\n            unchecked { ++i; }\\n        }\\n        return extensions;\\n    }\\n\\n    /**\\n     * @dev Register an extension\\n     */\\n    function _registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) internal virtual {\\n        require(extension != address(this) && extension.isContract(), \\\"Invalid\\\");\\n        emit ExtensionRegistered(extension, msg.sender);\\n        _extensionBaseURI[extension] = baseURI;\\n        _extensionBaseURIIdentical[extension] = baseURIIdentical;\\n        _extensions.add(extension);\\n        _setApproveTransferExtension(extension, true);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-setApproveTransferExtension}.\\n     */\\n    function setApproveTransferExtension(bool enabled) external override {\\n        requireExtension();\\n        _setApproveTransferExtension(msg.sender, enabled);\\n    }\\n\\n    /**\\n     * @dev Set whether or not tokens minted by the extension defers transfer approvals to the extension\\n     */\\n    function _setApproveTransferExtension(address extension, bool enabled) internal virtual;\\n\\n    /**\\n     * @dev Unregister an extension\\n     */\\n    function _unregisterExtension(address extension) internal {\\n        emit ExtensionUnregistered(extension, msg.sender);\\n        _extensions.remove(extension);\\n    }\\n\\n    /**\\n     * @dev Blacklist an extension\\n     */\\n    function _blacklistExtension(address extension) internal {\\n       require(extension != address(0) && extension != address(this), \\\"Cannot blacklist yourself\\\");\\n       if (_extensions.contains(extension)) {\\n           emit ExtensionUnregistered(extension, msg.sender);\\n           _extensions.remove(extension);\\n       }\\n       if (!_blacklistedExtensions.contains(extension)) {\\n           emit ExtensionBlacklisted(extension, msg.sender);\\n           _blacklistedExtensions.add(extension);\\n       }\\n    }\\n\\n    /**\\n     * @dev Set base token uri for an extension\\n     */\\n    function _setBaseTokenURIExtension(string calldata uri, bool identical) internal {\\n        _extensionBaseURI[msg.sender] = uri;\\n        _extensionBaseURIIdentical[msg.sender] = identical;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for an extension\\n     */\\n    function _setTokenURIPrefixExtension(string calldata prefix) internal {\\n        _extensionURIPrefix[msg.sender] = prefix;\\n    }\\n\\n    /**\\n     * @dev Set token uri for a token of an extension\\n     */\\n    function _setTokenURIExtension(uint256 tokenId, string calldata uri) internal {\\n        require(_tokenExtension(tokenId) == msg.sender, \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Set base token uri for tokens with no extension\\n     */\\n    function _setBaseTokenURI(string calldata uri) internal {\\n        _extensionBaseURI[address(0)] = uri;\\n    }\\n\\n    /**\\n     * @dev Set token uri prefix for tokens with no extension\\n     */\\n    function _setTokenURIPrefix(string calldata prefix) internal {\\n        _extensionURIPrefix[address(0)] = prefix;\\n    }\\n\\n\\n    /**\\n     * @dev Set token uri for a token with no extension\\n     */\\n    function _setTokenURI(uint256 tokenId, string calldata uri) internal {\\n        require(tokenId > 0 && tokenId <= _tokenCount && _tokenExtension(tokenId) == address(0), \\\"Invalid token\\\");\\n        _tokenURIs[tokenId] = uri;\\n    }\\n\\n    /**\\n     * @dev Retrieve a token's URI\\n     */\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\n        require(tokenId > 0 && tokenId <= _tokenCount, \\\"Invalid token\\\");\\n\\n        address extension = _tokenExtension(tokenId);\\n        require(!_blacklistedExtensions.contains(extension), \\\"Extension blacklisted\\\");\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            if (bytes(_extensionURIPrefix[extension]).length != 0) {\\n                return string(abi.encodePacked(_extensionURIPrefix[extension], _tokenURIs[tokenId]));\\n            }\\n            return _tokenURIs[tokenId];\\n        }\\n\\n        if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionTokenURI).interfaceId)) {\\n            return ICreatorExtensionTokenURI(extension).tokenURI(address(this), tokenId);\\n        }\\n\\n        if (!_extensionBaseURIIdentical[extension]) {\\n            return string(abi.encodePacked(_extensionBaseURI[extension], tokenId.toString()));\\n        } else {\\n            return _extensionBaseURI[extension];\\n        }\\n    }\\n\\n    /**\\n     * Helper to get royalties for a token\\n     */\\n    function _getRoyalties(uint256 tokenId) view internal returns (address payable[] memory receivers, uint256[] memory bps) {\\n\\n        // Get token level royalties\\n        RoyaltyConfig[] memory royalties = _tokenRoyalty[tokenId];\\n        if (royalties.length == 0) {\\n            // Get extension specific royalties\\n            address extension = _tokenExtension(tokenId);\\n            if (extension != address(0)) {\\n                if (ERC165Checker.supportsInterface(extension, type(ICreatorExtensionRoyalties).interfaceId)) {\\n                    (receivers, bps) = ICreatorExtensionRoyalties(extension).getRoyalties(address(this), tokenId);\\n                    // Extension override exists, just return that\\n                    if (receivers.length > 0) return (receivers, bps);\\n                }\\n                royalties = _extensionRoyalty[extension];\\n            }\\n        }\\n        if (royalties.length == 0) {\\n            // Get the default royalty\\n            royalties = _extensionRoyalty[address(0)];\\n        }\\n        \\n        if (royalties.length > 0) {\\n            receivers = new address payable[](royalties.length);\\n            bps = new uint256[](royalties.length);\\n            for (uint i; i < royalties.length;) {\\n                receivers[i] = royalties[i].receiver;\\n                bps[i] = royalties[i].bps;\\n                unchecked { ++i; }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Helper to get royalty receivers for a token\\n     */\\n    function _getRoyaltyReceivers(uint256 tokenId) view internal returns (address payable[] memory recievers) {\\n        (recievers, ) = _getRoyalties(tokenId);\\n    }\\n\\n    /**\\n     * Helper to get royalty basis points for a token\\n     */\\n    function _getRoyaltyBPS(uint256 tokenId) view internal returns (uint256[] memory bps) {\\n        (, bps) = _getRoyalties(tokenId);\\n    }\\n\\n    function _getRoyaltyInfo(uint256 tokenId, uint256 value) view internal returns (address receiver, uint256 amount){\\n        (address payable[] memory receivers, uint256[] memory bps) = _getRoyalties(tokenId);\\n        require(receivers.length <= 1, \\\"More than 1 royalty receiver\\\");\\n        \\n        if (receivers.length == 0) {\\n            return (address(this), 0);\\n        }\\n        return (receivers[0], bps[0]*value/10000);\\n    }\\n\\n    /**\\n     * Set royalties for a token\\n     */\\n    function _setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n       _checkRoyalties(receivers, basisPoints);\\n        delete _tokenRoyalty[tokenId];\\n        _setRoyalties(receivers, basisPoints, _tokenRoyalty[tokenId]);\\n        emit RoyaltiesUpdated(tokenId, receivers, basisPoints);\\n    }\\n\\n    /**\\n     * Set royalties for all tokens of an extension\\n     */\\n    function _setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) internal {\\n        _checkRoyalties(receivers, basisPoints);\\n        delete _extensionRoyalty[extension];\\n        _setRoyalties(receivers, basisPoints, _extensionRoyalty[extension]);\\n        if (extension == address(0)) {\\n            emit DefaultRoyaltiesUpdated(receivers, basisPoints);\\n        } else {\\n            emit ExtensionRoyaltiesUpdated(extension, receivers, basisPoints);\\n        }\\n    }\\n\\n    /**\\n     * Helper function to check that royalties provided are valid\\n     */\\n    function _checkRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) private pure {\\n        require(receivers.length == basisPoints.length, \\\"Invalid input\\\");\\n        uint256 totalBasisPoints;\\n        for (uint i; i < basisPoints.length;) {\\n            totalBasisPoints += basisPoints[i];\\n            unchecked { ++i; }\\n        }\\n        require(totalBasisPoints < 10000, \\\"Invalid total royalties\\\");\\n    }\\n\\n    /**\\n     * Helper function to set royalties\\n     */\\n    function _setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints, RoyaltyConfig[] storage royalties) private {\\n        for (uint i; i < basisPoints.length;) {\\n            royalties.push(\\n                RoyaltyConfig(\\n                    {\\n                        receiver: receivers[i],\\n                        bps: uint16(basisPoints[i])\\n                    }\\n                )\\n            );\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the base contract's approve transfer contract location\\n     */\\n    function _setApproveTransferBase(address extension) internal {\\n        _approveTransferBase = extension;\\n        emit ApproveTransferUpdated(extension);\\n    }\\n\\n    /**\\n     * @dev See {ICreatorCore-getApproveTransfer}.\\n     */\\n    function getApproveTransfer() external view override returns (address) {\\n        return _approveTransferBase;\\n    }\\n\\n    /**\\n     * @dev Get the extension for the given token\\n     */\\n    function _tokenExtension(uint256 tokenId) internal virtual view returns(address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionTokenURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable URI's\\n */\\ninterface ICreatorExtensionTokenURI is IERC165 {\\n\\n    /**\\n     * Get the uri for a given creator/tokenId\\n     */\\n    function tokenURI(address creator, uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/libraries-solidity/contracts/access/AdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IAdminControl.sol\\\";\\n\\nabstract contract AdminControl is Ownable, IAdminControl, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Track registered admins\\n    EnumerableSet.AddressSet private _admins;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAdminControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Only allows approved admins to call the specified function\\n     */\\n    modifier adminRequired() {\\n        require(owner() == msg.sender || _admins.contains(msg.sender), \\\"AdminControl: Must be owner or admin\\\");\\n        _;\\n    }   \\n\\n    /**\\n     * @dev See {IAdminControl-getAdmins}.\\n     */\\n    function getAdmins() external view override returns (address[] memory admins) {\\n        admins = new address[](_admins.length());\\n        for (uint i = 0; i < _admins.length(); i++) {\\n            admins[i] = _admins.at(i);\\n        }\\n        return admins;\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-approveAdmin}.\\n     */\\n    function approveAdmin(address admin) external override onlyOwner {\\n        if (!_admins.contains(admin)) {\\n            emit AdminApproved(admin, msg.sender);\\n            _admins.add(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-revokeAdmin}.\\n     */\\n    function revokeAdmin(address admin) external override onlyOwner {\\n        if (_admins.contains(admin)) {\\n            emit AdminRevoked(admin, msg.sender);\\n            _admins.remove(admin);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IAdminControl-isAdmin}.\\n     */\\n    function isAdmin(address admin) public override view returns (bool) {\\n        return (owner() == admin || _admins.contains(admin));\\n    }\\n\\n}\"\r\n    },\r\n    \"node_modules/@manifoldxyz/libraries-solidity/contracts/access/IAdminControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for admin control\\n */\\ninterface IAdminControl is IERC165 {\\n\\n    event AdminApproved(address indexed account, address indexed sender);\\n    event AdminRevoked(address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev gets address of all admins\\n     */\\n    function getAdmins() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an admin.  Can only be called by contract owner.\\n     */\\n    function approveAdmin(address admin) external;\\n\\n    /**\\n     * @dev remove an admin.  Can only be called by contract owner.\\n     */\\n    function revokeAdmin(address admin) external;\\n\\n    /**\\n     * @dev checks whether or not given address is an admin\\n     * Returns True if they are\\n     */\\n    function isAdmin(address admin) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/manifold-membership/IManifoldMembership.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\n/**\\n * Manifold Membership interface\\n */\\ninterface IManifoldMembership {\\n   function isActiveMember(address sender) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/burnredeem/IBurnRedeemCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * Burn Redeem Core interface\\n */\\ninterface IBurnRedeemCore is IERC165, IERC721Receiver, IERC1155Receiver  {\\n    error NotAdmin(address);\\n    error UnsupportedContractVersion();\\n    error InvalidToken(uint256);\\n    error InvalidInput();\\n    error InvalidTokenSpec();\\n    error InvalidBurnSpec();\\n    error InvalidData();\\n    error TransferFailure();\\n    \\n    error BurnRedeemDoesNotExist(uint256);\\n    error BurnRedeemInactive(uint256);\\n\\n    error InvalidBurnAmount();\\n    error InvalidRedeemAmount();\\n    error InvalidPaymentAmount();\\n\\n\\n    enum StorageProtocol { INVALID, NONE, ARWEAVE, IPFS }\\n\\n    /**\\n     * @notice the validation type used for a `BurnItem`\\n     * CONTRACT                 any token from a specific contract is valid\\n     * RANGE                    token IDs within a range (inclusive) are valid\\n     * MERKLE_TREE              various individual token IDs included in a merkle tree are valid\\n     * ANY                      any token from any contract\\n     */\\n    enum ValidationType { INVALID, CONTRACT, RANGE, MERKLE_TREE, ANY }\\n\\n    enum TokenSpec { INVALID, ERC721, ERC1155 }\\n    enum BurnSpec { NONE, MANIFOLD, OPENZEPPELIN }\\n\\n    /**\\n     * @notice a `BurnItem` indicates which tokens are eligible to be burned\\n     * @param validationType    which type of validation used to check that the burn item is \\n     *                          satisfied\\n     * @param tokenSpec         whether the token is an ERC721 or ERC1155\\n     * @param burnSpec          whether the contract for a token has a `burn` function and, if so,\\n     *                          what interface\\n     * @param amount            (only for ERC1155 tokens) the amount (value) required to burn\\n     * @param minTokenId        (only for RANGE validation) the minimum valid token ID\\n     * @param maxTokenId        (only for RANGE validation) the maximum valid token ID\\n     * @param merkleRoot        (only for MERKLE_TREE validation) the root of the merkle tree of\\n     *                          valid token IDs\\n     */\\n    struct BurnItem {\\n        ValidationType validationType;\\n        address contractAddress;\\n        TokenSpec tokenSpec;\\n        BurnSpec burnSpec;\\n        uint72 amount;\\n        uint256 minTokenId;\\n        uint256 maxTokenId;\\n        bytes32 merkleRoot;\\n    }\\n\\n    /**\\n     * @notice a `BurnGroup` is a group of valid `BurnItem`s\\n     * @param requiredCount     the number of `BurnItem`s (0 < requiredCount <= items.length) that \\n     *                          need to be included in a burn\\n     * @param items             the list of `BurnItem`s\\n     */\\n    struct BurnGroup {\\n        uint256 requiredCount;\\n        BurnItem[] items;\\n    }\\n\\n    /**\\n     * @notice parameters for burn redeem intialization/updates\\n     * @param paymentReceiver   the address to forward proceeds from paid burn redeems\\n     * @param storageProtocol   the type of storage used for the redeem token URIs\\n     * @param redeemAmount      the number of redeem tokens to mint for each burn redeem\\n     * @param totalSupply       the maximum number of redeem tokens to mint (0 for unlimited)\\n     * @param startDate         the starting time for the burn redeem (0 for immediately)\\n     * @param endDate           the end time for the burn redeem (0 for never)\\n     * @param cost              the cost for each burn redeem\\n     * @param location          used to construct the token URI (Arweave hash, full URI, etc.)\\n     * @param burnSet           a list of `BurnGroup`s that must each be satisfied for a burn redeem\\n     */\\n    struct BurnRedeemParameters {\\n        address payable paymentReceiver;\\n        StorageProtocol storageProtocol;\\n        uint16 redeemAmount;\\n        uint32 totalSupply;\\n        uint48 startDate;\\n        uint48 endDate;\\n        uint160 cost;\\n        string location;\\n        BurnGroup[] burnSet;\\n    }\\n\\n    struct BurnRedeem {\\n        address payable paymentReceiver;\\n        StorageProtocol storageProtocol;\\n        uint32 redeemedCount;\\n        uint16 redeemAmount;\\n        uint32 totalSupply;\\n        uint8 contractVersion;\\n        uint48 startDate;\\n        uint48 endDate;\\n        uint160 cost;\\n        string location;\\n        BurnGroup[] burnSet;\\n    }\\n\\n    /**\\n     * @notice a pointer to a `BurnItem` in a `BurnGroup` used in calls to `burnRedeem`\\n     * @param groupIndex        the index of the `BurnGroup` in `BurnRedeem.burnSet`\\n     * @param itemIndex         the index of the `BurnItem` in `BurnGroup.items`\\n     * @param contractAddress   the address of the contract for the token\\n     * @param id                the token ID\\n     * @param merkleProof       the merkle proof for the token ID (only for MERKLE_TREE validation)\\n     */\\n    struct BurnToken {\\n        uint48 groupIndex;\\n        uint48 itemIndex;\\n        address contractAddress;\\n        uint256 id;\\n        bytes32[] merkleProof;\\n    }\\n\\n    /**\\n     * @notice get a burn redeem corresponding to a creator contract and instanceId\\n     * @param creatorContractAddress    the address of the creator contract\\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\\n     * @return BurnRedeem               the burn redeem object\\n     */\\n    function getBurnRedeem(address creatorContractAddress, uint256 instanceId) external view returns(BurnRedeem memory);\\n    \\n    /**\\n     * @notice get a burn redeem corresponding to a creator contract and tokenId\\n     * @param creatorContractAddress    the address of the creator contract\\n     * @param tokenId                   the token to retrieve the burn redeem for\\n     * @return                          the burn redeem instanceId and burn redeem object\\n     */\\n    function getBurnRedeemForToken(address creatorContractAddress, uint256 tokenId) external view returns(uint256, BurnRedeem memory);\\n\\n    /**\\n     * @notice burn tokens and mint a redeem token\\n     * @param creatorContractAddress    the address of the creator contract\\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\\n     * @param burnRedeemCount           the number of burn redeems we want to do\\n     * @param burnTokens                the tokens to burn with pointers to the corresponding BurnItem requirement\\n     */\\n    function burnRedeem(address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens) external payable;\\n\\n    /**\\n     * @notice burn tokens and mint redeem tokens multiple times in a single transaction\\n     * @param creatorContractAddresses  the addresses of the creator contracts\\n     * @param instanceIds               the instanceIds of the burn redeems for the corresponding creator contract\\n     * @param burnRedeemCounts          the burn redeem counts for each burn\\n     * @param burnTokens                the tokens to burn for each burn redeem with pointers to the corresponding BurnItem requirement\\n     */\\n    function burnRedeem(address[] calldata creatorContractAddresses, uint256[] calldata instanceIds, uint32[] calldata burnRedeemCounts, BurnToken[][] calldata burnTokens) external payable;\\n\\n    /**\\n     * @notice burn tokens and mint a redeem token\\n     * @param creatorContractAddress    the address of the creator contract\\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\\n     * @param burnRedeemCount           the number of burn redeems we want to do\\n     * @param burnTokens                the tokens to burn with pointers to the corresponding BurnItem requirement\\n     * @param data                      the data to emit with the BurnRedeemMint event\\n     */\\n    function burnRedeemWithData(address creatorContractAddress, uint256 instanceId, uint32 burnRedeemCount, BurnToken[] calldata burnTokens, bytes calldata data) external payable;\\n\\n    /**\\n     * @notice allow admin to airdrop arbitrary tokens \\n     * @param creatorContractAddress    the creator contract to mint tokens for\\n     * @param instanceId                the instanceId of the burn redeem for the creator contract\\n     * @param recipients                addresses to airdrop to\\n     * @param amounts                   number of redeems to perform for each address in recipients\\n     */\\n    function airdrop(address creatorContractAddress, uint256 instanceId, address[] calldata recipients, uint32[] calldata amounts) external;\\n\\n    /**\\n     * @notice recover a token that was sent to the contract without safeTransferFrom\\n     * @param tokenAddress              the address of the token contract\\n     * @param tokenId                   the id of the token\\n     * @param destination               the address to send the token to\\n     */\\n    function recoverERC721(address tokenAddress, uint256 tokenId, address destination) external;\\n\\n    /**\\n     * @notice withdraw Manifold fee proceeds from the contract\\n     * @param recipient                 recepient of the funds\\n     * @param amount                    amount to withdraw in Wei\\n     */\\n    function withdraw(address payable recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice set the Manifold Membership contract address\\n     * @param addr                      the address of the Manifold Membership contract \\n     */\\n    function setMembershipAddress(address addr) external;\\n}\\n\"\r\n    },\r\n    \"contracts/burnredeem/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface Burnable721 {\\n    function burn(uint256 tokenId) external;\\n}\\n\\ninterface OZBurnable1155 {\\n    function burn(address account, uint256 id, uint256 value) external;\\n}\\n\\ninterface Manifold1155 {\\n    function burn(address account, uint256[] memory tokenIds, uint256[] memory amounts) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/creator-core-solidity/contracts/extensions/ICreatorExtensionRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Implement this if you want your extension to have overloadable royalties\\n */\\ninterface ICreatorExtensionRoyalties is IERC165 {\\n\\n    /**\\n     * Get the royalties for a given creator/tokenId\\n     */\\n    function getRoyalties(address creator, uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Core creator interface\\n */\\ninterface ICreatorCore is IERC165 {\\n\\n    event ExtensionRegistered(address indexed extension, address indexed sender);\\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\\n    event ApproveTransferUpdated(address extension);\\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\\n\\n    /**\\n     * @dev gets address of all extensions\\n     */\\n    function getExtensions() external view returns (address[] memory);\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * extension address must point to a contract implementing ICreatorExtension.\\n     * Returns True if newly added, False if already added.\\n     */\\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\\n\\n    /**\\n     * @dev add an extension.  Can only be called by contract owner or admin.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function unregisterExtension(address extension) external;\\n\\n    /**\\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\\n     * This function will destroy all ability to reference the metadata of any tokens created\\n     * by the specified extension. It will also unregister the extension if needed.\\n     * Returns True if removed, False if already removed.\\n     */\\n    function blacklistExtension(address extension) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     */\\n    function setBaseTokenURIExtension(string calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\\n\\n    /**\\n     * @dev set the common prefix of an extension.  Can only be called by extension.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefixExtension(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\\n     */\\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\\n\\n    /**\\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\\n     * For tokens with no uri configured, tokenURI will return \\\"uri+tokenId\\\"\\n     */\\n    function setBaseTokenURI(string calldata uri) external;\\n\\n    /**\\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\\n     * If configured, and a token has a uri set, tokenURI will return \\\"prefixURI+tokenURI\\\"\\n     * Useful if you want to use ipfs/arweave\\n     */\\n    function setTokenURIPrefix(string calldata prefix) external;\\n\\n    /**\\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\\n\\n    /**\\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\\n     */\\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\\n\\n    /**\\n     * @dev set a permissions contract for an extension.  Used to control minting.\\n     */\\n    function setMintPermissions(address extension, address permissions) external;\\n\\n    /**\\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\\n     * from the extension before transferring\\n     */\\n    function setApproveTransferExtension(bool enabled) external;\\n\\n    /**\\n     * @dev get the extension of a given token\\n     */\\n    function tokenExtension(uint256 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Set default royalties\\n     */\\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of a token\\n     */\\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Set royalties of an extension\\n     */\\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\\n\\n    /**\\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\\n     */\\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    \\n    // Royalty support for various other standards\\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n\\n    /**\\n     * @dev Set the default approve transfer contract location.\\n     */\\n    function setApproveTransfer(address extension) external; \\n\\n    /**\\n     * @dev Get the default approve transfer contract location.\\n     */\\n    function getApproveTransfer() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@manifoldxyz/=node_modules/@manifoldxyz/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"create2-helpers/=lib/create2-helpers/src/\",\r\n      \"create2-scripts/=lib/create2-helpers/script/\",\r\n      \"creator-core-solidity/=lib/creator-core-solidity/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"libraries-solidity/=lib/libraries-solidity/contracts/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"operator-filter-registry/=node_modules/operator-filter-registry/\",\r\n      \"truffle/=node_modules/truffle/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/murky:ds-test/=lib/murky/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/murky:forge-std/=lib/murky/lib/forge-std/src/\",\r\n      \"lib/murky:openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts:openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:forge-std/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/src/\",\r\n      \"lib/openzeppelin-contracts-upgradeable:openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"lib/operator-filter-registry:ds-test/=lib/operator-filter-registry/lib/ds-test/src/\",\r\n      \"lib/operator-filter-registry:erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/operator-filter-registry:forge-std/=lib/operator-filter-registry/lib/forge-std/src/\",\r\n      \"lib/operator-filter-registry:openzeppelin-contracts-upgradeable/=lib/operator-filter-registry/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"lib/operator-filter-registry:openzeppelin-contracts/=lib/operator-filter-registry/lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 150\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"contracts/burnredeem/BurnRedeemLib.sol\": {\r\n        \"BurnRedeemLib\": \"0x70b4070953cdf0cf33d69322495df78a83b734e9\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BurnRedeemDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BurnRedeemInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurnSpec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPaymentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRedeemAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenSpec\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedContractVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AdminRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTI_BURN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"amounts\",\"type\":\"uint32[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"approveAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"creatorContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"instanceIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"burnRedeemCounts\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"groupIndex\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"itemIndex\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnToken[][]\",\"name\":\"burnTokens\",\"type\":\"tuple[][]\"}],\"name\":\"burnRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"burnRedeemCount\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"groupIndex\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"itemIndex\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnToken[]\",\"name\":\"burnTokens\",\"type\":\"tuple[]\"}],\"name\":\"burnRedeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"burnRedeemCount\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"groupIndex\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"itemIndex\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnToken[]\",\"name\":\"burnTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burnRedeemWithData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"admins\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"}],\"name\":\"getBurnRedeem\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"redeemedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"redeemAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"totalSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"contractVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"uint160\",\"name\":\"cost\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IBurnRedeemCore.ValidationType\",\"name\":\"validationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.TokenSpec\",\"name\":\"tokenSpec\",\"type\":\"uint8\"},{\"internalType\":\"enum IBurnRedeemCore.BurnSpec\",\"name\":\"burnSpec\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBurnRedeemCore.BurnItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnGroup[]\",\"name\":\"burnSet\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnRedeem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBurnRedeemForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"redeemedCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"redeemAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"totalSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"contractVersion\",\"type\":\"uint8\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"uint160\",\"name\":\"cost\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IBurnRedeemCore.ValidationType\",\"name\":\"validationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.TokenSpec\",\"name\":\"tokenSpec\",\"type\":\"uint8\"},{\"internalType\":\"enum IBurnRedeemCore.BurnSpec\",\"name\":\"burnSpec\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBurnRedeemCore.BurnItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnGroup[]\",\"name\":\"burnSet\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnRedeem\",\"name\":\"burnRedeem\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"}],\"name\":\"getBurnRedeemToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"redeemAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"totalSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"uint160\",\"name\":\"cost\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IBurnRedeemCore.ValidationType\",\"name\":\"validationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.TokenSpec\",\"name\":\"tokenSpec\",\"type\":\"uint8\"},{\"internalType\":\"enum IBurnRedeemCore.BurnSpec\",\"name\":\"burnSpec\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBurnRedeemCore.BurnItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnGroup[]\",\"name\":\"burnSet\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnRedeemParameters\",\"name\":\"burnRedeemParameters\",\"type\":\"tuple\"}],\"name\":\"initializeBurnRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manifoldMembershipContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"recoverERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMembershipAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"redeemAmount\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"totalSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"startDate\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endDate\",\"type\":\"uint48\"},{\"internalType\":\"uint160\",\"name\":\"cost\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"requiredCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum IBurnRedeemCore.ValidationType\",\"name\":\"validationType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum IBurnRedeemCore.TokenSpec\",\"name\":\"tokenSpec\",\"type\":\"uint8\"},{\"internalType\":\"enum IBurnRedeemCore.BurnSpec\",\"name\":\"burnSpec\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"amount\",\"type\":\"uint72\"},{\"internalType\":\"uint256\",\"name\":\"minTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBurnRedeemCore.BurnItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnGroup[]\",\"name\":\"burnSet\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBurnRedeemCore.BurnRedeemParameters\",\"name\":\"burnRedeemParameters\",\"type\":\"tuple\"}],\"name\":\"updateBurnRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"},{\"internalType\":\"enum IBurnRedeemCore.StorageProtocol\",\"name\":\"storageProtocol\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"}],\"name\":\"updateURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC1155BurnRedeem", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "150", "ConstructorArguments": "000000000000000000000000a8863bf1c8933f649e7b03eb72109e5e187505ea", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}