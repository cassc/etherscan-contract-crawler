{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ArtifestPresale.sol\": {\r\n      \"content\": \"// Submitted for verification at Etherscan.io on 2024-02-10\\r\\n//\\r\\n//  \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n//  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\r\\n//  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\\r\\n//  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\\r\\n//  \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\\r\\n//  \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\\r\\n// \\r\\n// Website: https://artifest.world\\r\\n// Twitter: https://twitter.com/artifest_world\\r\\n// Telegram: https://t.me/artifest.io\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./interface/Aggregator.sol\\\";\\r\\nimport \\\"./interface/IERC20.sol\\\";\\r\\nimport \\\"./interface/IERC20Metadata.sol\\\";\\r\\nimport \\\"./library/Address.sol\\\";\\r\\n\\r\\ncontract Artifest_Presale is ReentrancyGuard, Ownable {\\r\\n    uint256 public overalllRaised; uint256 public presaleId; uint256 public USDT_MULTIPLIER; uint256 public ETH_MULTIPLIER; address public fundReceiver; uint256 public uniqueBuyers;\\r\\n\\r\\n    struct PresaleData { uint256 startTime; uint256 endTime; uint256 price; uint256 nextStagePrice; uint256 Sold; uint256 tokensToSell; uint256 UsdtHardcap; uint256 amountRaised; bool Active; bool isEnableClaim; }\\r\\n    struct VestingData { uint256 vestingStartTime; uint256 initialClaimPercent; uint256 vestingTime; uint256 vestingPercentage; uint256 totalClaimCycles; }\\r\\n    struct UserData { uint256 investedAmount; uint256 claimAt; uint256 claimAbleAmount; uint256 claimedVestingAmount; uint256 claimedAmount; uint256 claimCount; uint256 activePercentAmount; }\\r\\n\\r\\n    IERC20Metadata public USDTInterface;\\r\\n    Aggregator internal aggregatorInterface;\\r\\n\\r\\n    mapping(uint256 => bool) public paused;\\r\\n    mapping(uint256 => PresaleData) public presale;\\r\\n    mapping(uint256 => VestingData) public vesting;\\r\\n    mapping(address => mapping(uint256 => UserData)) public userClaimData;\\r\\n    mapping(address => bool) public isExcludeMinToken;\\r\\n    mapping(address => bool) public isBlackList;\\r\\n    mapping(address => bool) public isExist;\\r\\n\\r\\n    uint256 public MinTokenTobuy;\\r\\n    uint256 public currentSale;\\r\\n    address public SaleToken;\\r\\n\\r\\n    event PresaleCreated( uint256 indexed _id, uint256 _totalTokens, uint256 _startTime, uint256 _endTime );\\r\\n    event PresaleUpdated( bytes32 indexed key, uint256 prevValue, uint256 newValue, uint256 timestamp );\\r\\n    event TokensBought( address indexed user, uint256 indexed id, address indexed purchaseToken, uint256 tokensBought, uint256 amountPaid, uint256 timestamp );\\r\\n    event TokensClaimed( address indexed user, uint256 indexed id, uint256 amount, uint256 timestamp );\\r\\n    event PresaleTokenAddressUpdated( address indexed prevValue, address indexed newValue, uint256 timestamp );\\r\\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\\r\\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\\r\\n\\r\\n    constructor( address _oracle, address _usdt, address _SaleToken, uint256 _MinTokenTobuy ) {\\r\\n        aggregatorInterface = Aggregator(_oracle);\\r\\n        SaleToken = _SaleToken;\\r\\n        MinTokenTobuy = _MinTokenTobuy;\\r\\n        USDTInterface = IERC20Metadata(_usdt);\\r\\n        ETH_MULTIPLIER = (10**18);\\r\\n        USDT_MULTIPLIER = (10**6);\\r\\n        fundReceiver = msg.sender;\\r\\n    }\\r\\n\\r\\n    function createPresale( uint256 _price, uint256 _nextStagePrice, uint256 _tokensToSell, uint256 _UsdtHardcap ) external onlyOwner {\\r\\n        require(_price > 0, \\\"Zero price\\\");\\r\\n        require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\r\\n        presaleId++;\\r\\n        presale[presaleId] = PresaleData( 0, 0, _price, _nextStagePrice, 0, _tokensToSell, _UsdtHardcap, 0, false, false );\\r\\n        emit PresaleCreated(presaleId, _tokensToSell, 0, 0);\\r\\n    }\\r\\n\\r\\n    function setPresaleStage(uint256 _id) public onlyOwner {\\r\\n        require(presale[_id].tokensToSell > 0, \\\"Presale don't exist\\\");\\r\\n        if (currentSale != 0) {\\r\\n            presale[currentSale].endTime = block.timestamp;\\r\\n            presale[currentSale].Active = false;\\r\\n        }\\r\\n        presale[_id].startTime = block.timestamp;\\r\\n        presale[_id].Active = true;\\r\\n        currentSale = _id;\\r\\n    }\\r\\n\\r\\n    function setPresaleVesting( uint256[] memory _id, uint256[] memory vestingStartTime, uint256[] memory _initialClaimPercent, uint256[] memory _vestingTime, uint256[] memory _vestingPercentage ) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _id.length; i++) {\\r\\n            vesting[_id[i]] = VestingData( vestingStartTime[i], _initialClaimPercent[i], _vestingTime[i], _vestingPercentage[i], (1000 - _initialClaimPercent[i]) / _vestingPercentage[i] );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updatePresaleVesting( uint256 _id, uint256 _vestingStartTime, uint256 _initialClaimPercent, uint256 _vestingTime, uint256 _vestingPercentage ) public onlyOwner {\\r\\n        vesting[_id].vestingStartTime = _vestingStartTime;\\r\\n        vesting[_id].initialClaimPercent = _initialClaimPercent;\\r\\n        vesting[_id].vestingTime = _vestingTime;\\r\\n        vesting[_id].vestingPercentage = _vestingPercentage;\\r\\n        vesting[_id].totalClaimCycles = (100 - _initialClaimPercent) / _vestingPercentage;\\r\\n    }\\r\\n\\r\\n    uint256 initialClaimPercent;\\r\\n    uint256 vestingTime;\\r\\n    uint256 vestingPercentage;\\r\\n    uint256 totalClaimCycles;\\r\\n\\r\\n    function enableClaim(uint256 _id, bool _status) public onlyOwner {\\r\\n        presale[_id].isEnableClaim = _status;\\r\\n    }\\r\\n\\r\\n    function updatePresale( uint256 _id, uint256 _price, uint256 _nextStagePrice, uint256 _tokensToSell, uint256 _Hardcap, bool isclaimAble ) external onlyOwner {\\r\\n        require(_price > 0, \\\"Zero price\\\");\\r\\n        require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\r\\n        require(_Hardcap > 0, \\\"Zero harcap\\\");\\r\\n        presale[_id].price = _price;\\r\\n        presale[_id].nextStagePrice = _nextStagePrice;\\r\\n        presale[_id].tokensToSell = _tokensToSell;\\r\\n        presale[_id].UsdtHardcap = _Hardcap;\\r\\n        presale[_id].isEnableClaim = isclaimAble;\\r\\n    }\\r\\n\\r\\n    function changeFundWallet(address _wallet) external onlyOwner {\\r\\n        require(_wallet != address(0), \\\"Invalid parameters\\\");\\r\\n        fundReceiver = _wallet;\\r\\n    }\\r\\n\\r\\n    function changeUSDTToken(address _newAddress) external onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"Zero token address\\\");\\r\\n        USDTInterface = IERC20Metadata(_newAddress);\\r\\n    }\\r\\n\\r\\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\\r\\n        require(!paused[_id], \\\"Already paused\\\");\\r\\n        paused[_id] = true;\\r\\n        emit PresalePaused(_id, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function unPausePresale(uint256 _id)\\r\\n        external\\r\\n        checkPresaleId(_id)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(paused[_id], \\\"Not paused\\\");\\r\\n        paused[_id] = false;\\r\\n        emit PresaleUnpaused(_id, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function getLatestPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\\r\\n        price = (price * (10**10));\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n    modifier checkPresaleId(uint256 _id) {\\r\\n        require(_id > 0 && _id == currentSale, \\\"Invalid presale id\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkSaleState(uint256 _id, uint256 amount) {\\r\\n        require(presale[_id].Active == true, \\\"Presale not Active\\\");\\r\\n        require( amount > 0 && amount <= presale[_id].tokensToSell - presale[_id].Sold, \\\"Invalid sale amount\\\" );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function ExcludeAccouctFromMinBuy(address _user, bool _status) external onlyOwner {\\r\\n        isExcludeMinToken[_user] = _status;\\r\\n    }\\r\\n\\r\\n    function buyWithUSDT(uint256 usdAmount) external checkPresaleId(currentSale) checkSaleState(currentSale, usdtToTokens(currentSale, usdAmount)) nonReentrant returns (bool) {\\r\\n        require(!paused[currentSale], \\\"Presale paused\\\");\\r\\n        require( presale[currentSale].Active == true, \\\"Presale is not active yet\\\" );\\r\\n        require(!isBlackList[msg.sender], \\\"Account is blackListed\\\");\\r\\n        require( presale[currentSale].amountRaised + usdAmount <= presale[currentSale].UsdtHardcap, \\\"Amount should be less than leftHardcap\\\");\\r\\n\\r\\n        if (!isExist[msg.sender]) {\\r\\n            isExist[msg.sender] = true;\\r\\n            uniqueBuyers++;\\r\\n        }\\r\\n        uint256 tokens = usdtToTokens(currentSale, usdAmount);\\r\\n        presale[currentSale].Sold += tokens;\\r\\n        presale[currentSale].amountRaised += usdAmount;\\r\\n        overalllRaised += usdAmount;\\r\\n\\r\\n        if (isExcludeMinToken[msg.sender] == false) {\\r\\n            require(tokens >= MinTokenTobuy, \\\"Less than min amount\\\");\\r\\n        }\\r\\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\\r\\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\\r\\n            userClaimData[_msgSender()][currentSale].investedAmount += usdAmount;\\r\\n        } else {\\r\\n            userClaimData[_msgSender()][currentSale] = UserData( usdAmount, 0, tokens, 0, 0, 0, 0 );\\r\\n        }\\r\\n\\r\\n        uint256 ourAllowance = USDTInterface.allowance( _msgSender(), address(this) );\\r\\n        require(usdAmount <= ourAllowance, \\\"Make sure to add enough allowance\\\");\\r\\n        (bool success, ) = address(USDTInterface).call(\\r\\n            abi.encodeWithSignature( \\\"transferFrom(address,address,uint256)\\\", _msgSender(), fundReceiver, usdAmount )\\r\\n        );\\r\\n        require(success, \\\"Token payment failed\\\");\\r\\n        emit TokensBought( _msgSender(), currentSale, address(USDTInterface), tokens, usdAmount, block.timestamp );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeClaimAddress(address _oldAddress, address _newWallet) public onlyOwner {\\r\\n        for (uint256 i = 1; i < presaleId; i++) {\\r\\n            require(isExist[_oldAddress], \\\"User not a participant\\\");\\r\\n            userClaimData[_newWallet][i].claimAbleAmount = userClaimData[\\r\\n                _oldAddress\\r\\n            ][i].claimAbleAmount;\\r\\n            userClaimData[_oldAddress][i].claimAbleAmount = 0;\\r\\n        }\\r\\n        isExist[_oldAddress] = false;\\r\\n        isExist[_newWallet] = true;\\r\\n    }\\r\\n\\r\\n    function blackListUser(address _user, bool _value) public onlyOwner {\\r\\n        isBlackList[_user] = _value;\\r\\n    }\\r\\n\\r\\n    function buyWithEth() external payable checkPresaleId(currentSale) checkSaleState(currentSale, ethToTokens(currentSale, msg.value)) nonReentrant returns (bool) {\\r\\n        uint256 usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) /\\r\\n            (ETH_MULTIPLIER * ETH_MULTIPLIER);\\r\\n        require( presale[currentSale].amountRaised + usdAmount <= presale[currentSale].UsdtHardcap, \\\"Amount should be less than leftHardcap\\\" );\\r\\n        require(!isBlackList[msg.sender], \\\"Account is blackListed\\\");\\r\\n        require(!paused[currentSale], \\\"Presale paused\\\");\\r\\n        require( presale[currentSale].Active == true, \\\"Presale is not active yet\\\" );\\r\\n        if (!isExist[msg.sender]) {\\r\\n            isExist[msg.sender] = true;\\r\\n            uniqueBuyers++;\\r\\n        }\\r\\n\\r\\n        uint256 tokens = usdtToTokens(currentSale, usdAmount);\\r\\n        if (isExcludeMinToken[msg.sender] == false) {\\r\\n            require(tokens >= MinTokenTobuy, \\\"Insufficient amount!\\\");\\r\\n        }\\r\\n        presale[currentSale].Sold += tokens;\\r\\n        presale[currentSale].amountRaised += usdAmount;\\r\\n        overalllRaised += usdAmount;\\r\\n\\r\\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\\r\\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\\r\\n            userClaimData[_msgSender()][currentSale].investedAmount += usdAmount;\\r\\n        } else {\\r\\n            userClaimData[_msgSender()][currentSale] = UserData( usdAmount, 0, tokens, 0, 0, 0, 0 );\\r\\n        }\\r\\n\\r\\n        sendValue(payable(fundReceiver), msg.value);\\r\\n        emit TokensBought( _msgSender(), currentSale, address(0), tokens, msg.value, block.timestamp );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function ethBuyHelper(uint256 _id, uint256 amount) external view returns (uint256 ethAmount) {\\r\\n        uint256 usdPrice = (amount * getLatestPrice()) / 1;\\r\\n        ethAmount = (usdPrice * presale[_id].price) / ETH_MULTIPLIER;\\r\\n    }\\r\\n\\r\\n    function usdtBuyHelper(uint256 _id, uint256 amount) external view returns (uint256 usdPrice) {\\r\\n        usdPrice = (amount * presale[_id].price) / 10**IERC20Metadata(SaleToken).decimals();\\r\\n    }\\r\\n\\r\\n    function ethToTokens(uint256 _id, uint256 amount) public view returns (uint256 _tokens) {\\r\\n        uint256 usdAmount = (amount * getLatestPrice() * USDT_MULTIPLIER) / (ETH_MULTIPLIER * ETH_MULTIPLIER); \\r\\n        _tokens = usdtToTokens(_id, usdAmount);\\r\\n    }\\r\\n\\r\\n    function usdtToTokens(uint256 _id, uint256 amount) public view returns (uint256 _tokens) {\\r\\n        _tokens = (amount * presale[_id].price) / USDT_MULTIPLIER;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Low balance\\\");\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"ETH Payment failed\\\");\\r\\n    }\\r\\n\\r\\n    function claimableAmount(address user, uint256 _id) public view returns (uint256) {\\r\\n        UserData memory _user = userClaimData[user][_id];\\r\\n\\r\\n        require(_user.claimAbleAmount > 0, \\\"Nothing to claim\\\");\\r\\n        uint256 amount = _user.claimAbleAmount;\\r\\n        require(amount > 0, \\\"Already claimed\\\");\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function claimAmount(uint256 _id) public returns (bool) {\\r\\n        require(isExist[_msgSender()], \\\"User not a participant\\\");\\r\\n        uint256 amount = claimableAmount(msg.sender, _id);\\r\\n        require(amount > 0, \\\"No claimable amount\\\");\\r\\n        require(!isBlackList[msg.sender], \\\"Account is blackListed\\\");\\r\\n        require(SaleToken != address(0), \\\"Presale token address not set\\\");\\r\\n        require( amount <= IERC20(SaleToken).balanceOf(address(this)), \\\"Not enough tokens in the contract\\\" );\\r\\n        require((presale[_id].isEnableClaim == true), \\\"Claim is not enable\\\");\\r\\n        require((vesting[_id].initialClaimPercent) > 0, \\\"No claim percentage set\\\");\\r\\n        uint256 transferAmount;\\r\\n        if (userClaimData[msg.sender][_id].claimCount == 0) {\\r\\n            transferAmount = (amount * (vesting[_id].initialClaimPercent)) / 1000;\\r\\n            require(transferAmount > 0, \\\"Please wait till next claim\\\");\\r\\n            userClaimData[msg.sender][_id].activePercentAmount = (amount * vesting[_id].vestingPercentage) / 1000;\\r\\n            bool status = IERC20(SaleToken).transfer( msg.sender, transferAmount );\\r\\n            require(status, \\\"Token transfer failed\\\");\\r\\n            userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount;\\r\\n            userClaimData[msg.sender][_id].claimedAmount += transferAmount;\\r\\n            userClaimData[msg.sender][_id].claimCount++;\\r\\n        } else if (\\r\\n            userClaimData[msg.sender][_id].claimAbleAmount >\\r\\n            userClaimData[msg.sender][_id].activePercentAmount\\r\\n        ) {\\r\\n            uint256 duration = block.timestamp - vesting[_id].vestingStartTime;\\r\\n            uint256 multiplier = duration / vesting[_id].vestingTime;\\r\\n            if (multiplier > vesting[_id].totalClaimCycles) {\\r\\n                multiplier = vesting[_id].totalClaimCycles;\\r\\n            }\\r\\n            uint256 _amount = multiplier * userClaimData[msg.sender][_id].activePercentAmount;\\r\\n            transferAmount = _amount - userClaimData[msg.sender][_id].claimedVestingAmount;\\r\\n            require(transferAmount > 0, \\\"Please wait till next claim\\\");\\r\\n            bool status = IERC20(SaleToken).transfer( msg.sender, transferAmount );\\r\\n            require(status, \\\"Token transfer failed\\\");\\r\\n            userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount;\\r\\n            userClaimData[msg.sender][_id].claimedVestingAmount += transferAmount;\\r\\n            userClaimData[msg.sender][_id].claimedAmount += transferAmount;\\r\\n            userClaimData[msg.sender][_id].claimCount++;\\r\\n        } else {\\r\\n            uint256 duration = block.timestamp - vesting[_id].vestingStartTime;\\r\\n            uint256 multiplier = duration / vesting[_id].vestingTime;\\r\\n            if (multiplier > vesting[_id].totalClaimCycles + 1) {\\r\\n                transferAmount = userClaimData[msg.sender][_id].claimAbleAmount;\\r\\n                require(transferAmount > 0, \\\"Please wait till next claim\\\");\\r\\n                bool status = IERC20(SaleToken).transfer( msg.sender, transferAmount );\\r\\n                require(status, \\\"Token transfer failed\\\");\\r\\n                userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount;\\r\\n                userClaimData[msg.sender][_id].claimedAmount += transferAmount;\\r\\n                userClaimData[msg.sender][_id].claimedVestingAmount += transferAmount;\\r\\n                userClaimData[msg.sender][_id].claimCount++;\\r\\n            } else {\\r\\n                revert(\\\"Wait for next claim\\\");\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function WithdrawTokens(address _token, uint256 amount) external onlyOwner {\\r\\n        IERC20(_token).transfer(fundReceiver, amount);\\r\\n    }\\r\\n\\r\\n    function WithdrawContractFunds(uint256 amount) external onlyOwner {\\r\\n        sendValue(payable(fundReceiver), amount);\\r\\n    }\\r\\n\\r\\n    function ChangeTokenToSell(address _token) public onlyOwner {\\r\\n        SaleToken = _token;\\r\\n    }\\r\\n\\r\\n    function EditMinTokenToBuy(uint256 _amount) public onlyOwner {\\r\\n        MinTokenTobuy = _amount;\\r\\n    }\\r\\n\\r\\n    function ChangeOracleAddress(address _oracle) public onlyOwner {\\r\\n        aggregatorInterface = Aggregator(_oracle);\\r\\n    }\\r\\n\\r\\n    function blockStamp() public view returns(uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interface/Aggregator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface Aggregator {\\r\\n    function latestRoundData() external view returns ( uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound );\\r\\n}\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval( address indexed owner, address indexed spender, uint256 value );\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom( address from, address to, uint256 amount ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20Metadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"\r\n    },\r\n    \"contracts/library/Address.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nlibrary Address {\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require( address(this).balance >= amount, \\\"Address: insufficient balance\\\" );\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require( success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue( target, data, 0, \\\"Address: low-level call failed\\\" );\\r\\n    }\\r\\n\\r\\n    function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue( target, data, value, \\\"Address: low-level call with value failed\\\" );\\r\\n    }\\r\\n\\r\\n    function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) {\\r\\n        require( address(this).balance >= value, \\\"Address: insufficient balance for call\\\" );\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}( data );\\r\\n        return verifyCallResultFromTarget( target, success, returndata, errorMessage );\\r\\n    }\\r\\n\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall( target, data, \\\"Address: low-level static call failed\\\" );\\r\\n    }\\r\\n\\r\\n    function functionStaticCall( address target, bytes memory data, string memory errorMessage ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget( target, success, returndata, errorMessage );\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall( address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall( target, data, \\\"Address: low-level delegate call failed\\\" );\\r\\n    }\\r\\n\\r\\n    function functionDelegateCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget( target, success, returndata, errorMessage );\\r\\n    }\\r\\n\\r\\n    function verifyCallResultFromTarget( address target, bool success, bytes memory returndata, string memory errorMessage ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function verifyCallResult( bool success, bytes memory returndata, string memory errorMessage ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        if (returndata.length > 0) {\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred( address indexed previousOwner, address indexed newOwner );\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require( newOwner != address(0), \\\"Ownable: new owner is the zero address\\\" );\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nabstract contract ReentrancyGuard {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SaleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MinTokenTobuy\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"ChangeOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ChangeTokenToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EditMinTokenToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeAccouctFromMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinTokenTobuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"blackListUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeClaimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UsdtHardcap\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeMinToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overalllRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UsdtHardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnableClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setPresaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestingStartTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialClaimPercent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingPercentage\",\"type\":\"uint256[]\"}],\"name\":\"setPresaleVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueBuyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Hardcap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isclaimAble\",\"type\":\"bool\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePresaleVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAbleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedVestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activePercentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCycles\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Artifest_Presale", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a2eb51990d82e0ad9a07b79bb27d64a0778cf91d0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}