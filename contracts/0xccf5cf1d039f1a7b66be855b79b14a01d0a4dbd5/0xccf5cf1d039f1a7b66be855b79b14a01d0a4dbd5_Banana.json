{"SourceCode": "/**\r\n    Banana\r\n    Website: bananagun.io\r\n    Twitter: twitter.com/BananaGunBot\r\n    Telegram: https://t.me/Banana_Gun_Portal\r\n    Bot: t.me/BananaGunSniper_bot\r\n**/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external;\r\n}\r\n\r\ninterface Presale {\r\n    function setTokenAddress(address tokenNew) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract Banana is Ownable {\r\n    string private constant _name = unicode\"Banana\";\r\n    string private constant _symbol = unicode\"BANANA\";\r\n    uint256 private constant _totalSupply = 10_000_000 * 1e18;\r\n\r\n    uint256 public maxTransactionAmount = 100_000 * 1e18;\r\n    uint256 public maxWallet = 100_000 * 1e18;\r\n    uint256 public swapTokensAtAmount = (_totalSupply * 5) / 10000;\r\n\r\n    address private revWallet = 0x9ef0F6F745B79949BBdDE900013FCA359bcFd59A;\r\n    address private treasuryWallet = 0x7d35f092baD40CBAEEC9Ea518C2DAa3335076E8f;\r\n    address private teamWallet = 0x37aAb97476bA8dC785476611006fD5dDA4eed66B;\r\n    address private constant presaleAddress = 0xFC932F4a6e3aaf6dc4fEFdAf89d3602c5581f58D;\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    uint8 public buyTotalFees = 40;\r\n    uint8 public sellTotalFees = 40;\r\n\r\n    uint8 public revFee = 50;\r\n    uint8 public treasuryFee = 25;\r\n    uint8 public teamFee = 25;\r\n\r\n    bool private swapping;\r\n    bool public limitsInEffect = true;\r\n    bool private launched;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n    mapping(address => bool) private automatedMarketMakerPairs;\r\n\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 teamETH, uint256 revETH, uint256 TreasuryETH);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    IUniswapV2Router02 public constant uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public immutable uniswapV2Pair;\r\n\r\n    constructor() {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), WETH);\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n\r\n        address airdropWallet = 0x49af319F1243613e575C2DF6CBd9988400675Cd0;\r\n\r\n        setExcludedFromFees(owner(), true);\r\n        setExcludedFromFees(address(this), true);\r\n        setExcludedFromFees(address(0xdead), true);\r\n        setExcludedFromFees(teamWallet, true);\r\n        setExcludedFromFees(revWallet, true);\r\n        setExcludedFromFees(treasuryWallet, true);\r\n        setExcludedFromFees(presaleAddress, true);\r\n        setExcludedFromFees(0xC4A0C91Ca415887174b63d76c132284b2E7Ff8B6, true);\r\n        setExcludedFromFees(0xF7A3285664BdfAeA0b52B0EcA30cdC99C86EC98B, true);\r\n        setExcludedFromFees(0x1C0435144EC9E27a0Adbd51732849191Fd898f92, true);\r\n        setExcludedFromFees(0x37AF2967fB932B5291Efe053ba98c78b9B540e60, true);\r\n        setExcludedFromFees(0x30AF1239A4995e8be511176981e66ec39c29E89f, true);\r\n        setExcludedFromFees(0x74B29E90005D29f1Fa9069697fF87Ea8e33F0580, true);\r\n        setExcludedFromFees(0x1aC69aFABB3D4416dA019369980921002E04dEAa, true);\r\n        setExcludedFromFees(0x3846180aC8fc4c86CC0586f3d670D543d1a2cb1F, true);\r\n        setExcludedFromFees(0x2e67Db3906d7765ff6A663Cf0b47eD29326903e1, true);\r\n        setExcludedFromFees(0x64568fb777d17D1fce7bB02e845b087Fb23aa01b, true);\r\n\r\n        setExcludedFromMaxTransaction(owner(), true);\r\n        setExcludedFromMaxTransaction(address(uniswapV2Router), true);\r\n        setExcludedFromMaxTransaction(address(this), true);\r\n        setExcludedFromMaxTransaction(address(0xdead), true);\r\n        setExcludedFromMaxTransaction(address(uniswapV2Pair), true);\r\n        setExcludedFromMaxTransaction(airdropWallet, true);\r\n        setExcludedFromMaxTransaction(teamWallet, true);\r\n        setExcludedFromMaxTransaction(revWallet, true);\r\n        setExcludedFromMaxTransaction(treasuryWallet, true);\r\n        setExcludedFromMaxTransaction(0xC4A0C91Ca415887174b63d76c132284b2E7Ff8B6, true);\r\n        setExcludedFromMaxTransaction(0xF7A3285664BdfAeA0b52B0EcA30cdC99C86EC98B, true);\r\n        setExcludedFromMaxTransaction(0x1C0435144EC9E27a0Adbd51732849191Fd898f92, true);\r\n        setExcludedFromMaxTransaction(0x37AF2967fB932B5291Efe053ba98c78b9B540e60, true);\r\n        setExcludedFromMaxTransaction(0x30AF1239A4995e8be511176981e66ec39c29E89f, true);\r\n        setExcludedFromMaxTransaction(0x74B29E90005D29f1Fa9069697fF87Ea8e33F0580, true);\r\n        setExcludedFromMaxTransaction(0x1aC69aFABB3D4416dA019369980921002E04dEAa, true);\r\n        setExcludedFromMaxTransaction(0x3846180aC8fc4c86CC0586f3d670D543d1a2cb1F, true);\r\n        setExcludedFromMaxTransaction(0x2e67Db3906d7765ff6A663Cf0b47eD29326903e1, true);\r\n        setExcludedFromMaxTransaction(0x64568fb777d17D1fce7bB02e845b087Fb23aa01b, true);\r\n\r\n        maxTransactionAmount = 100 * 1e18;\r\n        maxWallet = 100 * 1e18;\r\n\r\n        _balances[address(this)] = 500_000 * 1e18;\r\n        emit Transfer(address(0), address(this), _balances[address(this)]);\r\n        _balances[airdropWallet] = 120_000 * 1e18;\r\n        emit Transfer(address(0), airdropWallet, _balances[airdropWallet]);\r\n        _balances[treasuryWallet] = 6_380_000 * 1e18;\r\n        emit Transfer(address(0), treasuryWallet, _balances[treasuryWallet]);\r\n        _balances[presaleAddress] = 2_000_000 * 1e18;\r\n        emit Transfer(address(0), presaleAddress, _balances[presaleAddress]);\r\n        _balances[0xC4A0C91Ca415887174b63d76c132284b2E7Ff8B6] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0xC4A0C91Ca415887174b63d76c132284b2E7Ff8B6, _balances[0xC4A0C91Ca415887174b63d76c132284b2E7Ff8B6]);\r\n        _balances[0xF7A3285664BdfAeA0b52B0EcA30cdC99C86EC98B] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0xF7A3285664BdfAeA0b52B0EcA30cdC99C86EC98B, _balances[0xF7A3285664BdfAeA0b52B0EcA30cdC99C86EC98B]);\r\n        _balances[0x1C0435144EC9E27a0Adbd51732849191Fd898f92] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x1C0435144EC9E27a0Adbd51732849191Fd898f92, _balances[0x1C0435144EC9E27a0Adbd51732849191Fd898f92]);\r\n        _balances[0x37AF2967fB932B5291Efe053ba98c78b9B540e60] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x37AF2967fB932B5291Efe053ba98c78b9B540e60, _balances[0x37AF2967fB932B5291Efe053ba98c78b9B540e60]);\r\n        _balances[0x30AF1239A4995e8be511176981e66ec39c29E89f] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x30AF1239A4995e8be511176981e66ec39c29E89f, _balances[0x30AF1239A4995e8be511176981e66ec39c29E89f]);\r\n        _balances[0x74B29E90005D29f1Fa9069697fF87Ea8e33F0580] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x74B29E90005D29f1Fa9069697fF87Ea8e33F0580, _balances[0x74B29E90005D29f1Fa9069697fF87Ea8e33F0580]);\r\n        _balances[0x1aC69aFABB3D4416dA019369980921002E04dEAa] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x1aC69aFABB3D4416dA019369980921002E04dEAa, _balances[0x1aC69aFABB3D4416dA019369980921002E04dEAa]);\r\n        _balances[0x3846180aC8fc4c86CC0586f3d670D543d1a2cb1F] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x3846180aC8fc4c86CC0586f3d670D543d1a2cb1F, _balances[0x3846180aC8fc4c86CC0586f3d670D543d1a2cb1F]);\r\n        _balances[0x2e67Db3906d7765ff6A663Cf0b47eD29326903e1] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x2e67Db3906d7765ff6A663Cf0b47eD29326903e1, _balances[0x2e67Db3906d7765ff6A663Cf0b47eD29326903e1]);\r\n        _balances[0x64568fb777d17D1fce7bB02e845b087Fb23aa01b] = 100_000 * 1e18;\r\n        emit Transfer(address(0), 0x64568fb777d17D1fce7bB02e845b087Fb23aa01b, _balances[0x64568fb777d17D1fce7bB02e845b087Fb23aa01b]);\r\n\r\n        Presale(presaleAddress).setTokenAddress(address(this));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public pure returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external {\r\n        _approve(msg.sender, spender, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external {\r\n        _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient,uint256 amount) external {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (limitsInEffect) {\r\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {\r\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\r\n                    require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTx\");\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                } else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\r\n                    require(amount <= maxTransactionAmount,\"Sell transfer amount exceeds the maxTx\");\r\n                } else if (!_isExcludedMaxTransactionAmount[to] && (from != presaleAddress)) {\r\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\r\n                }\r\n            }\r\n        }\r\n\r\n        bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n\r\n        if (canSwap && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n            swapBack();\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\r\n                fees = (amount * sellTotalFees) / 1000;\r\n            } else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\r\n                fees = (amount * buyTotalFees) / 1000;\r\n            }\r\n\r\n            if (fees > 0) {\r\n                amount = amount - fees;\r\n                unchecked {\r\n                    _balances[address(this)] += fees;\r\n                }\r\n                emit Transfer(from, address(this), fees);\r\n            }\r\n        }\r\n\r\n        uint256 senderBalance = _balances[from];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = senderBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        limitsInEffect = false;\r\n    }\r\n\r\n    function setDistributionFees(uint8 _RevFee, uint8 _TreasuryFee, uint8 _teamFee) external onlyOwner {\r\n        revFee = _RevFee;\r\n        treasuryFee = _TreasuryFee;\r\n        teamFee = _teamFee;\r\n        require((revFee + treasuryFee + teamFee) == 100, \"Distribution have to be equal to 100%\");\r\n    }\r\n\r\n    function setFees(uint8 _buyTotalFees, uint8 _sellTotalFees) external onlyOwner {\r\n        require(_buyTotalFees <= 40, \"Buy fees must be less than or equal to 4%\");\r\n        require(_sellTotalFees <= 40, \"Sell fees must be less than or equal to 4%\");\r\n        buyTotalFees = _buyTotalFees;\r\n        sellTotalFees = _sellTotalFees;\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function setExcludedFromMaxTransaction(address account, bool excluded) public onlyOwner {\r\n        _isExcludedMaxTransactionAmount[account] = excluded;\r\n    }\r\n\r\n    function unleashTheBanana() external payable onlyOwner {\r\n        require(!launched, \"Already launched\");\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            _balances[address(this)],\r\n            0,\r\n            0,\r\n            teamWallet,\r\n            block.timestamp\r\n        );\r\n        launched = true;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"The pair cannot be removed\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function setSwapAtAmount(uint256 newSwapAmount) external onlyOwner {\r\n        require(newSwapAmount >= (totalSupply() * 1) / 100000, \"Swap amount cannot be lower than 0.001% of the supply\");\r\n        require(newSwapAmount <= (totalSupply() * 5) / 1000, \"Swap amount cannot be higher than 0.5% of the supply\");\r\n        swapTokensAtAmount = newSwapAmount;\r\n    }\r\n\r\n    function setMaxTxnAmount(uint256 newMaxTx) external onlyOwner {\r\n        require(newMaxTx >= ((totalSupply() * 1) / 100000) / 1e18, \"Cannot set max transaction lower than 0.001%\");\r\n        maxTransactionAmount = newMaxTx * (10**18);\r\n    }\r\n\r\n    function setMaxWalletAmount(uint256 newMaxWallet) external onlyOwner {\r\n        require(newMaxWallet >= ((totalSupply() * 1) / 100000) / 1e18, \"Cannot set max wallet lower than 0.001%\");\r\n        maxWallet = newMaxWallet * (10**18);\r\n    }\r\n\r\n    function setMaxTxnAndWallet(uint256 newMax) external onlyOwner {\r\n        require(newMax >= ((totalSupply() * 1) / 100000) / 1e18, \"Cannot set max transaction and wallet lower than 0.001%\");\r\n        maxTransactionAmount = newMax * (10**18);\r\n        maxWallet = newMax * (10**18);\r\n    }\r\n\r\n    function updateRevWallet(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Address cannot be zero\");\r\n        revWallet = newAddress;\r\n    }\r\n\r\n    function updateTreasuryWallet(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Address cannot be zero\");\r\n        treasuryWallet = newAddress;\r\n    }\r\n\r\n    function updateTeamWallet(address newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Address cannot be zero\");\r\n        teamWallet = newAddress;\r\n    }\r\n\r\n    function excludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawStuckToken(address token, address to) external onlyOwner {\r\n        uint256 _contractBalance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(to, _contractBalance);\r\n    }\r\n\r\n    function withdrawStuckETH(address addr) external onlyOwner {\r\n        require(addr != address(0), \"Invalid address\");\r\n\r\n        (bool success, ) = addr.call{value: address(this).balance}(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n\r\n    function swapBack() private {\r\n        uint256 swapThreshold = swapTokensAtAmount;\r\n        bool success;\r\n\r\n        if (balanceOf(address(this)) > swapTokensAtAmount * 20) {\r\n            swapThreshold = swapTokensAtAmount * 20;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(swapThreshold, 0, path, address(this), block.timestamp);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            uint256 ethForRev = (ethBalance * revFee) / 100;\r\n            uint256 ethForTeam = (ethBalance * teamFee) / 100;\r\n            uint256 ethForTreasury = (ethBalance * treasuryFee) / 100;\r\n\r\n            (success, ) = address(teamWallet).call{value: ethForTeam}(\"\");\r\n            (success, ) = address(treasuryWallet).call{value: ethForTreasury}(\"\");\r\n            (success, ) = address(revWallet).call{value: ethForRev}(\"\");\r\n\r\n            emit SwapAndLiquify(swapThreshold, ethForTeam, ethForRev, ethForTreasury);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TreasuryETH\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_RevFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_TreasuryFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_teamFee\",\"type\":\"uint8\"}],\"name\":\"setDistributionFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyTotalFees\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_sellTotalFees\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTx\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAndWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unleashTheBanana\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Banana", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c1392e9a413e68f5d9f9c3b3caa1fd993fd6a1fb59fbc7b0ae11549aeb272e42"}