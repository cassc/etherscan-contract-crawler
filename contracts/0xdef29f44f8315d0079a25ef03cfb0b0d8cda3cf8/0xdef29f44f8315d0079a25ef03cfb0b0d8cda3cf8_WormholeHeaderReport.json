{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/adapters/Wormhole/IWormhole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nstruct Signature {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    uint8 guardianIndex;\\n}\\n\\nstruct VM {\\n    uint8 version;\\n    uint32 timestamp;\\n    uint32 nonce;\\n    uint16 emitterChainId;\\n    bytes32 emitterAddress;\\n    uint64 sequence;\\n    uint8 consistencyLevel;\\n    bytes payload;\\n    uint32 guardianSetIndex;\\n    Signature[] signatures;\\n    bytes32 hash;\\n}\\n\\ninterface IWormhole {\\n    /// @dev Publish a message to be attested by the Wormhole network.\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    /// @dev parseAndVerifyVM serves to parse an encodedVM and wholy validate it for consumption\\n    function parseAndVerifyVM(\\n        bytes calldata encodedVM\\n    ) external view returns (VM memory vm, bool valid, string memory reason);\\n}\\n\"\r\n    },\r\n    \"contracts/adapters/Wormhole/WormholeHeaderReporter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { IHeaderStorage } from \\\"../../interfaces/IHeaderStorage.sol\\\";\\nimport { IWormhole } from \\\"./IWormhole.sol\\\";\\n\\ncontract WormholeHeaderReporter {\\n    IWormhole public immutable wormhole;\\n    IHeaderStorage public immutable headerStorage;\\n\\n    constructor(IWormhole wormhole_, IHeaderStorage headerStorage_) {\\n        wormhole = wormhole_;\\n        headerStorage = headerStorage_;\\n    }\\n\\n    /// @dev Reports the given block header to the adapter via the Wormhole.\\n    /// @param blockNumbers Uint256 array of block numbers to pass over the Wormhole.\\n    /// @param sequence Uint64 value used to retrive generated VAA from the wormhole network.\\n    function reportHeaders(uint256[] calldata blockNumbers) external returns (uint64 sequence) {\\n        bytes32[] memory blockHeaders = new bytes32[](blockNumbers.length);\\n        for (uint256 i = 0; i < blockNumbers.length; i++) {\\n            blockHeaders[i] = headerStorage.storeBlockHeader(blockNumbers[i]);\\n        }\\n        bytes memory payload = abi.encode(blockNumbers, blockHeaders);\\n        uint32 nonce = 0;\\n        uint8 consistencyLevel = 201;\\n        sequence = wormhole.publishMessage(nonce, payload, consistencyLevel);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHeaderStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.17;\\n\\ninterface IHeaderStorage {\\n    event HeaderStored(uint256 indexed blockNumber, bytes32 indexed blockHeader);\\n\\n    error HeaderOutOfRange(address emitter, uint256 blockNumber);\\n\\n    function storeBlockHeader(uint256 blockNumber) external returns (bytes32 blockHeader);\\n\\n    function storeBlockHeaders(uint256[] memory blockNumbers) external returns (bytes32[] memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"wormhole_\",\"type\":\"address\"},{\"internalType\":\"contract IHeaderStorage\",\"name\":\"headerStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"headerStorage\",\"outputs\":[{\"internalType\":\"contract IHeaderStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"blockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"reportHeaders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WormholeHeaderReporter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "00000000000000000000000098f3c9e6e3face36baad05fe09d375ef1464288b00000000000000000000000022f1fc71a505c0b2bf4d5075801cc5e0ec84b09e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}