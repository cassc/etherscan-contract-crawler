{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Astro.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IBEP20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function getOwner() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address _owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ncontract ScarabICO is Initializable {\\n    //define the admin of ICO\\n    address public owner;\\n    address public fundWallet;\\n    //  address public inputtoken;\\n    address public outputtoken;\\n\\n    bool public claimenabled ;\\n    bool public investingenabled ;\\n    uint8 icoindex;\\n\\n    mapping(address => bool) public claimBlocked;\\n    address[] public whitelistaddressesTier1;\\n    address[] public whitelistaddressesTier2;\\n\\n    mapping(address => uint256) public UserTier;\\n\\n    uint256 public totalsupply;\\n\\n    uint256 public round ;\\n\\n    mapping(address => uint256) public userinvested;\\n    address[] public investors;\\n    mapping(address => bool) public existinguser;\\n    mapping(address => uint256) public userremaininigClaim;\\n    mapping(address => uint8) public userclaimround;\\n\\n    uint256 public Tier1maxInvestment ;\\n    uint256 public Tier2maxInvestment ;\\n\\n    bool tierInitialized ;\\n\\n    uint256 public tokenPrice;\\n\\n    uint256 public idoTime;\\n    uint256 public claimTime;\\n\\n    //hardcap\\n    uint256 public icoTarget;\\n\\n    //define a state variable to track the funded amount\\n    uint256 public receivedFund;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"callable not owner\\\");\\n        _;\\n    }\\n    function Initialize(\\n        address _fundWallet //admin wallet\\n\\n    ) public initializer {\\n        require(_fundWallet != address(0), \\\"address can't be 0\\\");\\n        owner = msg.sender;\\n        fundWallet=_fundWallet;\\n    }\\n\\n    function checkTier(address _user) public view returns (uint256 _tier) {\\n        require(_user != address(0), \\\"null address\\\");\\n        uint256 tier = 0;\\n        tier = UserTier[_user];\\n        return tier;\\n    }\\n\\n    function checkMaxInvestment(address _user)\\n        public\\n        view\\n        returns (uint256 _maxInv)\\n    {\\n        uint256 tier = checkTier(_user);\\n\\n        uint256 maxInv = 0;\\n        if (round == 1 || round == 0) {\\n            if (\\n                (round == 1 && tier == 1) ||\\n                (round == 0 && checkWhitelistTierWise(_user, 1))\\n            ) {\\n                maxInv = Tier1maxInvestment;\\n            } else if (\\n                (round == 1 && tier == 2) ||\\n                (round == 0 && checkWhitelistTierWise(_user, 2))\\n            ) {\\n                maxInv = Tier2maxInvestment;\\n            }\\n        } else {\\n            uint256 _balance = address(msg.sender).balance;\\n            maxInv = Tier1maxInvestment;\\n            if (_balance < Tier1maxInvestment) {\\n                maxInv = _balance;\\n            }\\n        }\\n        return maxInv;\\n    }\\n\\n    function checkWhitelistTierWise(address _user, uint256 _tier)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (_tier == 1) {\\n            address[] memory users = whitelistaddressesTier1;\\n            for (uint256 i = 0; i < users.length; i++) {\\n                if (users[i] == _user) {\\n                    return true;\\n                }\\n            }\\n            return false;\\n        } else if (_tier == 2) {\\n            address[] memory users = whitelistaddressesTier2;\\n            for (uint256 i = 0; i < users.length; i++) {\\n                if (users[i] == _user) {\\n                    return true;\\n                }\\n            }\\n            return false;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkWhitelist(address _user) public view returns (bool) {\\n        uint256 tier = UserTier[_user];\\n\\n        if (tier == 1) {\\n            address[] memory users = whitelistaddressesTier1;\\n            for (uint256 i = 0; i < users.length; i++) {\\n                if (users[i] == _user) {\\n                    return true;\\n                }\\n            }\\n            return false;\\n        } else if (tier == 2) {\\n            address[] memory users = whitelistaddressesTier2;\\n            for (uint256 i = 0; i < users.length; i++) {\\n                if (users[i] == _user) {\\n                    return true;\\n                }\\n            }\\n            return false;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function Investing() external payable {\\n        require(investingenabled == true, \\\"ICO in not active\\\");\\n        uint256 _amount = msg.value;\\n        if (round == 0) {\\n            bool iswhitelisted = checkWhitelist(msg.sender);\\n            require(iswhitelisted == true, \\\"Not whitelisted address\\\");\\n            uint256 Tier = UserTier[msg.sender];\\n            if (Tier == 1) {\\n                require(\\n                    _amount <= Tier1maxInvestment,\\n                    \\\"Investment not in allowed range\\\"\\n                );\\n            } else if (Tier == 2) {\\n                require(\\n                    _amount <= Tier2maxInvestment,\\n                    \\\"Investment not in allowed range\\\"\\n                );\\n            }\\n        } else if (round == 1) {\\n            uint256 Tier = UserTier[msg.sender];\\n\\n            if (Tier == 1) {\\n                require(\\n                    _amount <= Tier1maxInvestment,\\n                    \\\"Investment not in allowed range\\\"\\n                );\\n                UserTier[msg.sender] = 1;\\n            } else if (Tier == 2) {\\n                require(\\n                    _amount <= Tier2maxInvestment,\\n                    \\\"Investment not in allowed range\\\"\\n                );\\n                UserTier[msg.sender] = 1;\\n            }\\n        } else if (round == 2) {\\n            require(\\n                _amount <= Tier1maxInvestment,\\n                \\\"Investment not in allowed range\\\"\\n            );\\n            UserTier[msg.sender] = 2;\\n        }\\n\\n        // check claim Status\\n        require(claimenabled == false, \\\"Claim active\\\");\\n        //check for hard cap\\n        require(\\n            icoTarget >= receivedFund + _amount,\\n            \\\"Target Achieved. Investment not accepted\\\"\\n        );\\n        require(_amount > 0, \\\"min Investment not zero\\\");\\n        require(\\n            _amount <= remainingContribution(msg.sender),\\n            \\\"max Investment reached\\\"\\n        );\\n\\n        existinguser[msg.sender] = true;\\n        investors.push(msg.sender);\\n        userinvested[msg.sender] += _amount;\\n        receivedFund = receivedFund + _amount;\\n        userremaininigClaim[msg.sender] = ((userinvested[msg.sender] *\\n            tokenPrice) / 1000);\\n        (bool sucess, ) = fundWallet.call{value: _amount}(\\\"\\\");\\n        require(sucess, \\\"failed withdarwInputToken\\\");\\n        \\n    }\\n\\n    function remainingContribution(address _account)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _rem = checkMaxInvestment(_account) - userinvested[_account];\\n        return _rem;\\n    }\\n\\n    function claimTokens() public {\\n        // check anti-bot\\n        require(claimenabled == true, \\\"Claim not start\\\");\\n\\n        require(investingenabled == false, \\\"Ico active\\\");\\n\\n        require(\\n            claimBlocked[msg.sender] == false,\\n            \\\"Sorry, Bot address not allowed\\\"\\n        );\\n\\n        // check ico Status\\n\\n        // check claim Status\\n\\n        // bool iswhitelisted = checkWhitelist(msg.sender);\\n        uint256 redeemtokens = userremaininigClaim[msg.sender];\\n        require(redeemtokens > 0, \\\"No tokens to Claim\\\");\\n        require(existinguser[msg.sender] == true, \\\"Already claim\\\");\\n        existinguser[msg.sender] = false;\\n        userinvested[msg.sender] = 0;\\n        userremaininigClaim[msg.sender] = 0;\\n        userclaimround[msg.sender] = 0;\\n        UserTier[msg.sender] = 0;\\n        IBEP20(outputtoken).transfer(\\n            msg.sender,\\n            userremaininigClaim[msg.sender]\\n        );\\n\\n    }\\n\\n    function checkICObalance(uint8 _token)\\n        public\\n        view\\n        returns (uint256 _balance)\\n    {\\n        if (_token == 1) {\\n            return IBEP20(outputtoken).balanceOf(address(this));\\n        } else if (_token == 2) {\\n            return address(this).balance;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function withdarwInputToken(address _admin) public onlyOwner {\\n        uint256 raisedamount = address(this).balance;\\n        require(raisedamount > 0, \\\"no token to withdraw\\\");\\n        (bool sucess, ) = _admin.call{value: raisedamount}(\\\"\\\");\\n        require(sucess, \\\"failed withdarwInputToken\\\");\\n    }\\n\\n    function startIco() external onlyOwner {\\n        require(claimenabled == false, \\\"Claim live\\\");\\n        require(icoindex == 0, \\\"Cannot restart ico\\\");\\n        investingenabled = true;\\n    }\\n\\n    function stopIco() external onlyOwner {\\n        require(claimenabled == false, \\\"Claim live\\\");\\n        investingenabled = false;\\n    }\\n\\n    function startClaim() external onlyOwner {\\n        claimenabled = true;\\n        investingenabled = false;\\n        icoindex = icoindex + 1;\\n    }\\n\\n    function setIdoTime(uint256 _time) external onlyOwner {\\n        idoTime = _time;\\n    }\\n\\n    function setClaimTime(uint256 _time) external onlyOwner {\\n        claimTime = _time;\\n    }\\n\\n    function stopClaim() external onlyOwner {\\n        claimenabled = false;\\n    }\\n\\n    function startAstroshotRound() public onlyOwner {\\n        round = 1; //privateround\\n    }\\n\\n\\n    function startNormalRound() public onlyOwner {\\n        round = 2; //publicround\\n    }\\n\\n    function blockClaim(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            claimBlocked[_users[i]] = true;\\n        }\\n    }\\n\\n    function unblockClaim(address user) external onlyOwner {\\n        claimBlocked[user] = false;\\n    }\\n\\n    function addWhitelistTier1(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelistaddressesTier1.push(_users[i]);\\n            UserTier[_users[i]] = 1;\\n        }\\n    }\\n\\n    function addWhitelistTier2(address[] calldata _users) external onlyOwner {\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            whitelistaddressesTier2.push(_users[i]);\\n            UserTier[_users[i]] = 2;\\n        }\\n    }\\n\\n    function withdrawOutputToken(address _admin, uint256 _amount)\\n        public\\n        onlyOwner\\n    {\\n        uint256 remainingamount = IBEP20(outputtoken).balanceOf(address(this));\\n        require(remainingamount >= _amount, \\\"Not enough token to withdraw\\\");\\n        IBEP20(outputtoken).transfer(_admin, _amount);\\n    }\\n\\n    function initializeTier(uint256 _val1, uint256 _val2) external onlyOwner {\\n        require(\\n            tierInitialized == false,\\n            \\\"Max Investment already, initialized\\\"\\n        );\\n\\n        Tier1maxInvestment = _val1; //200\\n        Tier2maxInvestment = _val2; //425\\n        tierInitialized = true;\\n    }\\n\\n    function resetICO() public onlyOwner {\\n        for (uint256 i = 0; i < investors.length; i++) {\\n            if (existinguser[investors[i]] == true) {\\n                existinguser[investors[i]] = false;\\n                userinvested[investors[i]] = 0;\\n                userremaininigClaim[investors[i]] = 0;\\n                userclaimround[investors[i]] = 0;\\n                UserTier[investors[i]] = 0;\\n            }\\n        }\\n\\n        address[] memory whitelistaddress1 = whitelistaddressesTier1;\\n        for (uint256 i = 0; i < whitelistaddress1.length; i++) {\\n            if (existinguser[whitelistaddress1[i]] == true) {\\n                existinguser[whitelistaddress1[i]] = false;\\n                userinvested[whitelistaddress1[i]] = 0;\\n                userremaininigClaim[whitelistaddress1[i]] = 0;\\n                userclaimround[whitelistaddress1[i]] = 0;\\n                UserTier[whitelistaddress1[i]] = 0;\\n            }\\n        }\\n\\n        address[] memory whitelistaddress2 = whitelistaddressesTier2;\\n        for (uint256 i = 0; i < whitelistaddress2.length; i++) {\\n            if (existinguser[whitelistaddress2[i]] == true) {\\n                existinguser[whitelistaddress2[i]] = false;\\n                userinvested[whitelistaddress2[i]] = 0;\\n                userremaininigClaim[whitelistaddress2[i]] = 0;\\n                userclaimround[whitelistaddress2[i]] = 0;\\n                UserTier[whitelistaddress2[i]] = 0;\\n            }\\n        }\\n\\n        require(\\n            IBEP20(outputtoken).balanceOf(address(this)) <= 0,\\n            \\\"Ico is not empty\\\"\\n        );\\n        totalsupply = 0;\\n        icoTarget = 0;\\n        receivedFund = 0;\\n        Tier1maxInvestment = 0;\\n        Tier2maxInvestment = 0;\\n        outputtoken = 0x0000000000000000000000000000000000000000;\\n        tokenPrice = 0;\\n        claimenabled = false;\\n        investingenabled = false;\\n        tierInitialized = false;\\n        icoindex = 0;\\n        round = 0;\\n        delete whitelistaddressesTier1;\\n        delete whitelistaddressesTier2;\\n        delete investors;\\n    }\\n\\n    function initializeICO(address _outputtoken, uint256 _tokenprice)\\n        public\\n        onlyOwner\\n    {\\n        require(_tokenprice > 0, \\\"Token price must be greater than 0\\\");\\n        outputtoken = _outputtoken;\\n        tokenPrice = _tokenprice;\\n        require(\\n            IBEP20(outputtoken).balanceOf(address(this)) > 0,\\n            \\\"Please first give Tokens to ICO\\\"\\n        );\\n        require(\\n            IBEP20(outputtoken).decimals() == 18,\\n            \\\"Only 18 decimal output token allowed\\\"\\n        );\\n        totalsupply = IBEP20(outputtoken).balanceOf(address(this));\\n        icoTarget = ((totalsupply / _tokenprice) * 1000);\\n    }\\n    \\n    function getInvestorsCount() external view returns (uint256) {\\n        return investors.length;\\n    }\\n\\n    function updateFundWallet(address _updateFundWallet) external onlyOwner {\\n        require(_updateFundWallet!=address(0),\\\"null address\\\");\\n        fundWallet = _updateFundWallet;\\n    }\\n\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        address oldOwner = newOwner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n\\n    }\\n\\n\\n \\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundWallet\",\"type\":\"address\"}],\"name\":\"Initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Investing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Tier1maxInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Tier2maxInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTier1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addWhitelistTier2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"blockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_token\",\"type\":\"uint8\"}],\"name\":\"checkICObalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkMaxInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxInv\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"}],\"name\":\"checkWhitelistTierWise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimenabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"existinguser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"icoTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outputtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenprice\",\"type\":\"uint256\"}],\"name\":\"initializeICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_val2\",\"type\":\"uint256\"}],\"name\":\"initializeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investingenabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivedFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"remainingContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setClaimTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setIdoTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAstroshotRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNormalRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopIco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalsupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unblockClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updateFundWallet\",\"type\":\"address\"}],\"name\":\"updateFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userclaimround\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userinvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userremaininigClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistaddressesTier1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistaddressesTier2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"withdarwInputToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOutputToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScarabICO", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}