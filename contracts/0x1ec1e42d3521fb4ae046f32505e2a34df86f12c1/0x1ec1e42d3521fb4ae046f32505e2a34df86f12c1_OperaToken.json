{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"OperaToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Auth.sol\\\";\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"IDEXRouter.sol\\\";\\nimport \\\"IDEXFactory.sol\\\";\\nimport \\\"OperaRevenue.sol\\\";\\n\\n//This Token was deployed using the Opera Protocol\\n//The Opera Protocol is a token deployer with the ability to deploy using borrowed initial liquidity\\n//This token can be configured at construction to have NO taxes or to HAVE taxes\\n//If the taxable variable (this cannot be updated after deployment) is true then this token is taxed\\n//If the borrowedLP variable (this cannot be updated after deployment) is true then the max tax is 10% buy / sell, otherwise the max can be 50% buy / sell\\n//Swap Threshold must be between 0.2% and 5% of supply, only if the token is taxable\\n//The Opera Dao will control the LP tokens for tokens that borrow Liquidity\\n\\ncontract OperaToken is IERC20, Auth {\\n    using SafeMath for uint256;\\n\\n    string _name;\\n    string _symbol;\\n    string _telegram;\\n    string _website;\\n\\n    uint8 constant _decimals = 9;\\n\\n    uint256 public _totalSupply;\\n\\n    uint256 public _maxWalletToken;\\n    uint256 public _swapThreshold;\\n\\n    uint256 public _operaTax;\\n    uint256 public _marketingBuyTax;\\n    uint256 public _marketingSellTax;\\n    uint256 public _devBuyTax;\\n    uint256 public _devSellTax;\\n    uint256 public _liquidityBuyTax;\\n    uint256 public _liquiditySellTax;\\n\\n    mapping(address => uint256) _balances;\\n    mapping(address => mapping(address => uint256)) _allowances;\\n    mapping(address => bool) isFeeExempt;\\n\\n    address public pair;\\n    address public routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public _devAddress;\\n    address public _marketingAddress;\\n    address public OperaRevenueAddress;\\n    address public OperaFactoryAddress;\\n    address public WETHAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    IDEXRouter public router;\\n\\n    bool inSwap;\\n    bool public taxable;\\n    bool public borrowedLP;\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n    event AutoLiquify(uint256 amountETH, uint256 amountCoin);\\n\\n    constructor(\\n        string[] memory _stringData,\\n        address[] memory _addressData,\\n        uint256[] memory _intData,\\n        address rewardsAddress\\n    ) Auth(msg.sender) {\\n        require(_stringData.length == 4, \\\"String List needs 4 string inputs\\\");\\n        require(\\n            _addressData.length == 2,\\n            \\\"Address List needs 2 address inputs\\\"\\n        );\\n        require(_intData.length == 11, \\\"Int List needs 11 int inputs\\\");\\n        if (_intData[9] == 1) {\\n            taxable = true;\\n        }\\n        if (_intData[10] == 1 && _intData[9] == 1) {\\n            borrowedLP = true;\\n        }\\n        OperaRevenueAddress = rewardsAddress;\\n        OperaFactoryAddress = msg.sender;\\n        router = IDEXRouter(routerAddress);\\n        pair = IDEXFactory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n\\n        authorizations[routerAddress] = true;\\n\\n        _name = _stringData[0];\\n        _symbol = _stringData[1];\\n        _telegram = _stringData[2];\\n        _website = _stringData[3];\\n\\n        require(_intData[0] > 0 && _intData[0] < 999999999999999999);\\n        _totalSupply = _intData[0] * 10 ** _decimals;\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n\\n        _maxWalletToken = (_totalSupply * _intData[1]) / 1000;\\n        if (taxable) {\\n            _devAddress = _addressData[0];\\n            _marketingAddress = _addressData[1];\\n            _swapThreshold = (_totalSupply * _intData[2]) / 1000;\\n            _marketingBuyTax = _intData[3];\\n            _marketingSellTax = _intData[4];\\n            _devBuyTax = _intData[5];\\n            _devSellTax = _intData[6];\\n            _liquidityBuyTax = _intData[7];\\n            _liquiditySellTax = _intData[8];\\n            if (borrowedLP) {\\n                if (getTotalTax() > 192) {\\n                    _operaTax = 20;\\n                } else {\\n                    _operaTax = 4;\\n                }\\n            } else {\\n                _operaTax = 2;\\n            }\\n\\n            require(\\n                _swapThreshold <= (_totalSupply / 20) &&\\n                    _swapThreshold >= (_totalSupply / 500),\\n                \\\"Swap Threshold must be less than 5% of total supply, or greater than 0.2%.\\\"\\n            );\\n            require(getSellTax() <= 500, \\\"Sell tax can't be greater than 50%.\\\");\\n            require(getBuyTax() <= 500, \\\"Buy tax can't be greater than 50%.\\\");\\n            require(\\n                _devAddress != address(0) && _marketingAddress != address(0),\\n                \\\"Reciever wallets can't be Zero address.\\\"\\n            );\\n        }\\n\\n        _allowances[address(this)][address(router)] = _totalSupply;\\n\\n        require(\\n            _maxWalletToken >= (_totalSupply / 500),\\n            \\\"Max Wallet must be greater than 0.2%.\\\"\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function decimals() external pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function getOwner() external view override returns (address) {\\n        return owner;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, _totalSupply);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        if (owner == msg.sender) {\\n            return _basicTransfer(msg.sender, recipient, amount);\\n        } else {\\n            return _transferFrom(msg.sender, recipient, amount);\\n        }\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"Insufficient Balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        if (_allowances[sender][msg.sender] != _totalSupply) {\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\\n                .sub(amount, \\\"Insufficient Allowance\\\");\\n        }\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        if (authorizations[sender] || authorizations[recipient]) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        if (inSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        checkLimits(sender, recipient, amount);\\n        if (shouldTokenSwap(recipient)) {\\n            tokenSwap();\\n        }\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"Insufficient Balance\\\"\\n        );\\n        uint256 amountReceived = (taxable &&\\n            (recipient == pair || sender == pair))\\n            ? takeFee(sender, recipient, amount)\\n            : amount;\\n\\n        _balances[recipient] = _balances[recipient].add(amountReceived);\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) {\\n            return amount;\\n        }\\n        if (recipient == OperaFactoryAddress) {\\n            return amount;\\n        }\\n        uint256 _totalFee;\\n\\n        _totalFee = (recipient == pair) ? getSellTax() : getBuyTax();\\n\\n        uint256 feeAmount = amount.mul(_totalFee).div(1000);\\n\\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\\n\\n        emit Transfer(sender, address(this), feeAmount);\\n\\n        return amount.sub(feeAmount);\\n    }\\n\\n    function getBuyTax() public view returns (uint) {\\n        return _liquidityBuyTax + _devBuyTax + _marketingBuyTax + _operaTax;\\n    }\\n\\n    function getSellTax() public view returns (uint) {\\n        return _liquiditySellTax + _devSellTax + _marketingSellTax + _operaTax;\\n    }\\n\\n    function getTotalTax() public view returns (uint) {\\n        return getSellTax() + getBuyTax();\\n    }\\n\\n    function setTaxes(\\n        uint256 _marketingBuyPercent,\\n        uint256 _marketingSellPercent,\\n        uint256 _devBuyPercent,\\n        uint256 _devSellPercent,\\n        uint256 _liquidityBuyPercent,\\n        uint256 _liquiditySellPercent\\n    ) external onlyOwner {\\n        require(inSwap == false, \\\"Cannot call when in swap\\\");\\n        require(taxable, \\\"This token has no taxes.\\\");\\n        uint256 amount = _balances[address(this)];\\n        if (_operaTax == 20) {\\n            if (amount > 0) {\\n                tokenSwap();\\n            }\\n\\n            _operaTax = 4;\\n        }\\n        _marketingBuyTax = _marketingBuyPercent;\\n        _liquidityBuyTax = _liquidityBuyPercent;\\n        _devBuyTax = _devBuyPercent;\\n        _marketingSellTax = _marketingSellPercent;\\n        _liquiditySellTax = _liquiditySellPercent;\\n        _devSellTax = _devSellPercent;\\n        require(\\n            getBuyTax() <= (borrowedLP ? 100 : 500),\\n            \\\"Buy tax can't be greater than 10% if borrowed lp and 50% if not.\\\"\\n        );\\n        require(\\n            getSellTax() <= (borrowedLP ? 100 : 500),\\n            \\\"Sell tax can't be greater than 10% if borrowed lp and 50% if not.\\\"\\n        );\\n    }\\n\\n    function tokenSwap() internal swapping {\\n        uint256 amount = _balances[address(this)];\\n\\n        uint256 amountToLiquify = (_liquidityBuyTax + _liquiditySellTax > 0)\\n            ? amount\\n                .mul(_liquidityBuyTax + _liquiditySellTax)\\n                .div(getTotalTax())\\n                .div(2)\\n            : 0;\\n\\n        uint256 amountToSwap = amount.sub(amountToLiquify);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = WETHAddress;\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        bool tmpSuccess;\\n\\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\\n        uint256 totalETHFee = (_liquidityBuyTax + _liquiditySellTax > 0)\\n            ? getTotalTax().sub((_liquidityBuyTax + _liquiditySellTax).div(2))\\n            : getTotalTax();\\n\\n        uint256 amountETHLiquidity = amountETH\\n            .mul(_liquidityBuyTax + _liquiditySellTax)\\n            .div(totalETHFee)\\n            .div(2);\\n        if (_devBuyTax + _devSellTax > 0) {\\n            uint256 amountETHDev = amountETH.mul(_devBuyTax + _devSellTax).div(\\n                totalETHFee\\n            );\\n            (tmpSuccess, ) = payable(_devAddress).call{\\n                value: amountETHDev,\\n                gas: 100000\\n            }(\\\"\\\");\\n            tmpSuccess = false;\\n        }\\n\\n        if (_marketingBuyTax + _marketingSellTax > 0) {\\n            uint256 amountETHMarketing = amountETH\\n                .mul(_marketingBuyTax + _marketingSellTax)\\n                .div(totalETHFee);\\n            (tmpSuccess, ) = payable(_marketingAddress).call{\\n                value: amountETHMarketing,\\n                gas: 100000\\n            }(\\\"\\\");\\n            tmpSuccess = false;\\n        }\\n\\n        if (amountToLiquify > 0) {\\n            address liqAddress = borrowedLP\\n                ? OperaFactoryAddress\\n                : _marketingAddress;\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                liqAddress,\\n                block.timestamp\\n            );\\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\\n        }\\n        uint256 operaFee = amountETH.mul(_operaTax.mul(2)).div(totalETHFee);\\n\\n        OperaRevenue rewardContract = OperaRevenue(\\n            payable(OperaRevenueAddress)\\n        );\\n        rewardContract.recieveRewards{value: operaFee}();\\n    }\\n\\n    function shouldTokenSwap(address recipient) internal view returns (bool) {\\n        return ((recipient == pair) &&\\n            taxable &&\\n            !inSwap &&\\n            _balances[address(this)] >= _swapThreshold);\\n    }\\n\\n    function checkLimits(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal view {\\n        if (\\n            !authorizations[sender] &&\\n            !authorizations[recipient] &&\\n            recipient != address(this) &&\\n            sender != address(this) &&\\n            recipient != 0x000000000000000000000000000000000000dEaD &&\\n            recipient != pair &&\\n            recipient != _marketingAddress &&\\n            recipient != _devAddress &&\\n            recipient != OperaFactoryAddress\\n        ) {\\n            uint256 heldTokens = balanceOf(recipient);\\n            require(\\n                (heldTokens + amount) <= _maxWalletToken,\\n                \\\"Total Holding is currently limited, you can not buy that much.\\\"\\n            );\\n        }\\n    }\\n\\n    function setMaxWallet(uint256 percent) external onlyOwner {\\n        require(inSwap == false, \\\"Cannot call when in swap\\\");\\n        _maxWalletToken = (_totalSupply * percent) / 1000;\\n        require(\\n            _maxWalletToken >= (_totalSupply / 500),\\n            \\\"Max Wallet must be greater than 0.2%.\\\"\\n        );\\n    }\\n\\n    function setTokenSwapSettings(uint256 percent) external onlyOwner {\\n        require(inSwap == false, \\\"Cannot call when in swap\\\");\\n        require(taxable, \\\"This token has no taxes.\\\");\\n        _swapThreshold = (_totalSupply * percent) / 1000;\\n        require(\\n            _swapThreshold <= (_totalSupply / 20) &&\\n                _swapThreshold >= (_totalSupply / 500),\\n            \\\"Swap Threshold must be less than 5% of total supply, or greater than 0.2%.\\\"\\n        );\\n    }\\n\\n    // function getAddress() external view returns (address) {\\n    //     return address(this);\\n    // }\\n\\n    function aboutMe() external view returns (string memory, string memory) {\\n        return (_telegram, _website);\\n    }\\n\\n    function updateAboutMe(\\n        string memory telegram,\\n        string memory website\\n    ) external onlyOwner {\\n        _telegram = telegram;\\n        _website = website;\\n    }\\n\\n    function setAddresses(\\n        address marketingAddress,\\n        address devAddress\\n    ) external onlyOwner {\\n        require(inSwap == false, \\\"Cannot call when in swap\\\");\\n        require(taxable, \\\"This token has no taxes.\\\");\\n        if (marketingAddress != address(0)) {\\n            _marketingAddress = marketingAddress;\\n        }\\n        if (devAddress != address(0)) {\\n            _devAddress = devAddress;\\n        }\\n\\n        require(\\n            _devAddress != address(0) && _marketingAddress != address(0),\\n            \\\"Reciever wallets can't be Zero address.\\\"\\n        );\\n    }\\n\\n    function setFeeExemption(address user, bool status) external onlyOwner {\\n        isFeeExempt[user] = status;\\n    }\\n\\n    function clearStuckBalance() external onlyOwner {\\n        require(inSwap == false, \\\"Cannot call when in swap\\\");\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function getOwner() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address _owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"Auth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nabstract contract Auth {\\n    address internal owner;\\n    mapping(address => bool) internal authorizations;\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n        authorizations[_owner] = true;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"!OWNER\\\");\\n        _;\\n    }\\n\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"!AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n\\n    function isOwner(address account) public view returns (bool) {\\n        return account == owner;\\n    }\\n\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n\\n    function transferOwnership(address payable adr) public onlyOwner {\\n        owner = adr;\\n        authorizations[adr] = true;\\n        emit OwnershipTransferred(adr);\\n    }\\n\\n    event OwnershipTransferred(address owner);\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"IDEXRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IDEXFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDEXFactory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"OperaRevenue.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n\\n//SPDX-License-Identifier: MIT\\nimport \\\"OperaToken.sol\\\";\\nimport \\\"OperaLendingPool.sol\\\";\\nimport \\\"IERC20.sol\\\";\\n\\n// import \\\"Math.sol\\\";\\n\\ncontract OperaRevenue {\\n    address public owner;\\n    address public teamAlpha;\\n    address public teamBeta = 0xB0241BD37223F8c55096A2e15A13534A57938716;\\n    uint256 public revenueShareAmount;\\n    uint256 public lendersCut;\\n    uint256 public teamsCut;\\n    uint256 public revShareCut;\\n    mapping(address => uint256) public claimableRewardsForAddress;\\n    address public lendingPoolAddress;\\n    event rewardsMoved(\\n        address account,\\n        uint256 amount,\\n        uint256 blocktime,\\n        bool incoming\\n    );\\n    event rewardsAwarded(address user, uint256 amount, uint256 blocktime);\\n\\n    constructor(address _lendingPool) {\\n        owner = msg.sender;\\n        teamAlpha = msg.sender;\\n        lendingPoolAddress = _lendingPool;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"only owner\\\");\\n        _;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    function requestReward() external {\\n        uint256 usersRewardAmount = claimableRewardsForAddress[msg.sender];\\n        require(usersRewardAmount > 0, \\\"You have no rewards.\\\");\\n        claimableRewardsForAddress[msg.sender] = 0;\\n        payable(msg.sender).transfer(usersRewardAmount);\\n        emit rewardsMoved(\\n            msg.sender,\\n            usersRewardAmount,\\n            block.timestamp,\\n            false\\n        );\\n    }\\n\\n    function setLendingPoolAddress(address addy) external onlyOwner {\\n        lendingPoolAddress = addy;\\n    }\\n\\n    function setBetaAddress(address addy) external onlyOwner {\\n        teamBeta = addy;\\n    }\\n\\n    function setAlphaAddress(address addy) external onlyOwner {\\n        teamAlpha = addy;\\n    }\\n\\n    function getAddressBalance(address _address) public view returns (uint256) {\\n        return _address.balance;\\n    }\\n\\n    function removeRevenueShare() external onlyOwner {\\n        uint256 amount = revenueShareAmount;\\n        revenueShareAmount = 0;\\n        payable(owner).transfer(amount);\\n    }\\n\\n    function awardRevenue(address user) external payable onlyOwner {\\n        claimableRewardsForAddress[user] += msg.value;\\n    }\\n\\n    function changeFees(\\n        uint256 lenders,\\n        uint256 team,\\n        uint256 revShare\\n    ) external payable onlyOwner {\\n        lendersCut = lenders;\\n        teamsCut = team;\\n        revShareCut = revShare;\\n        require(\\n            100 == lendersCut + teamsCut + teamsCut + revShareCut,\\n            \\\"Fees have to equal 100%\\\"\\n        );\\n    }\\n\\n    receive() external payable {}\\n\\n    function recieveRewards() external payable {\\n        OperaPool lender = OperaPool(payable(lendingPoolAddress));\\n        uint256 totalEthLent = lender.totalEthLent();\\n        if (totalEthLent == 0) {\\n            uint256 getTeamFee = (msg.value * 50) / 100;\\n            claimableRewardsForAddress[teamAlpha] += getTeamFee;\\n            claimableRewardsForAddress[teamBeta] += getTeamFee;\\n        } else {\\n            uint256 numberOfLenders = lender.numberOfLenders();\\n            uint256 getLenderFee = (msg.value * 60) / 100;\\n            uint256 getTeamFee = (msg.value * 10) / 100;\\n            uint256 getRevenueFee = (msg.value * 20) / 100;\\n            uint256 rewardsPerShare = getLenderFee / totalEthLent;\\n            address tempAddress;\\n            uint256 tempLentAmount;\\n            claimableRewardsForAddress[teamAlpha] += getTeamFee;\\n            claimableRewardsForAddress[teamBeta] += getTeamFee;\\n            revenueShareAmount += getRevenueFee;\\n            for (uint256 i = 0; i < numberOfLenders; i++) {\\n                tempAddress = lender.lenderIdToAddress(i + 1);\\n                tempLentAmount = lender.usersCurrentLentAmount(tempAddress);\\n                claimableRewardsForAddress[tempAddress] +=\\n                    tempLentAmount *\\n                    rewardsPerShare;\\n                emit rewardsAwarded(\\n                    tempAddress,\\n                    tempLentAmount * rewardsPerShare,\\n                    block.timestamp\\n                );\\n            }\\n        }\\n\\n        emit rewardsMoved(msg.sender, msg.value, block.timestamp, true);\\n    }\\n}\\n\"\r\n    },\r\n    \"OperaLendingPool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n//SPDX-License-Identifier: MIT\\nimport \\\"Auth.sol\\\";\\nimport \\\"IERC20.sol\\\";\\n\\ncontract OperaPool is Auth {\\n    uint256 public totalEthLent;\\n    uint256 public totalAvailableEth;\\n    uint256 public numberOfLenders;\\n    uint256 public borrowLimit = 3;\\n    uint256 public _tokenDecimals = 1 * 10 ** 18;\\n    bool public borrowingEnable = true;\\n    mapping(address => uint256) public usersCurrentLentAmount;\\n    mapping(uint256 => address) public lenderIdToAddress;\\n    mapping(address => uint256) public lenderAddressToId;\\n    mapping(address => bool) public authorizedFactoryAddresses;\\n\\n    event ethMoved(\\n        address account,\\n        uint256 amount,\\n        uint256 code,\\n        uint256 blocktime\\n    ); // 1 lent 2 borrowed 3 returned 4 withdrawn\\n\\n    event factoryStatusChange(address factoryAddress, bool status);\\n\\n    constructor() Auth(msg.sender) {}\\n\\n    modifier onlyFactoryAuthorized() {\\n        require(\\n            authorizedFactoryAddresses[msg.sender],\\n            \\\"only factory contracts can borrow eth\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateFactoryAuthorization(\\n        address addy,\\n        bool status\\n    ) external onlyOwner {\\n        authorizedFactoryAddresses[addy] = status;\\n        emit factoryStatusChange(addy, status);\\n    }\\n\\n    function updateBorrowLimit(uint256 limit) external onlyOwner {\\n        borrowLimit = limit;\\n    }\\n\\n    function updateBorrowingEnabled(bool status) external onlyOwner {\\n        borrowingEnable = status;\\n    }\\n\\n    function lendForAddress(address addy) external payable returns (bool) {\\n        require(\\n            msg.value > 0 && msg.value % _tokenDecimals == 0,\\n            \\\"Only send full ether.\\\"\\n        );\\n        if (lenderAddressToId[addy] == 0) {\\n            lenderAddressToId[addy] = numberOfLenders + 1;\\n            lenderIdToAddress[numberOfLenders + 1] = addy;\\n            numberOfLenders += 1;\\n        }\\n        uint256 amountReceived = msg.value / _tokenDecimals;\\n        emit ethMoved(addy, amountReceived, 1, block.timestamp);\\n        totalEthLent += amountReceived;\\n\\n        usersCurrentLentAmount[addy] += amountReceived;\\n        totalAvailableEth += amountReceived;\\n\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function lendEth() external payable returns (bool) {\\n        require(\\n            msg.value > 0 && msg.value % _tokenDecimals == 0,\\n            \\\"Only send full ether.\\\"\\n        );\\n        if (lenderAddressToId[msg.sender] == 0) {\\n            lenderAddressToId[msg.sender] = numberOfLenders + 1;\\n            lenderIdToAddress[numberOfLenders + 1] = msg.sender;\\n            numberOfLenders += 1;\\n        }\\n        uint256 amountReceived = msg.value / _tokenDecimals;\\n        emit ethMoved(msg.sender, amountReceived, 1, block.timestamp);\\n        totalEthLent += amountReceived;\\n\\n        usersCurrentLentAmount[msg.sender] += amountReceived;\\n        totalAvailableEth += amountReceived;\\n\\n        return true;\\n    }\\n\\n    function borrowEth(uint256 _amount) external onlyFactoryAuthorized {\\n        require(_amount <= totalAvailableEth, \\\"Not Enough eth to borrow\\\");\\n        require(_amount > 0, \\\"Cannot borrow 0\\\");\\n        require(borrowingEnable, \\\"Borrowing is not enabled.\\\");\\n        require(_amount <= borrowLimit, \\\"Can't borrow that much.\\\");\\n        totalAvailableEth -= _amount;\\n        payable(msg.sender).transfer(_amount * _tokenDecimals);\\n        emit ethMoved(msg.sender, _amount, 2, block.timestamp);\\n    }\\n\\n    function returnLentEth(uint256 amountEth) external payable returns (bool) {\\n        require(\\n            (amountEth * _tokenDecimals) - msg.value == 0,\\n            \\\"Did not send enough eth.\\\"\\n        );\\n\\n        emit ethMoved(msg.sender, amountEth, 3, block.timestamp);\\n        totalAvailableEth += amountEth;\\n\\n        return true;\\n    }\\n\\n    function withdrawLentEth(uint256 _amountEther) external payable {\\n        require(\\n            usersCurrentLentAmount[msg.sender] >= _amountEther,\\n            \\\"You Did not lend that much.\\\"\\n        );\\n\\n        require(_amountEther > 0, \\\"Cant withdraw 0.\\\");\\n        require(_amountEther <= totalAvailableEth, \\\"Not enough eth available.\\\");\\n        if (usersCurrentLentAmount[msg.sender] == _amountEther) {\\n            uint256 tempIdOfUser = lenderAddressToId[msg.sender];\\n            address addressOfLastUser = lenderIdToAddress[numberOfLenders];\\n            if (addressOfLastUser != msg.sender) {\\n                delete lenderAddressToId[msg.sender];\\n                lenderAddressToId[addressOfLastUser] = tempIdOfUser;\\n                lenderIdToAddress[tempIdOfUser] = addressOfLastUser;\\n                delete lenderIdToAddress[numberOfLenders];\\n                numberOfLenders -= 1;\\n            } else {\\n                delete lenderAddressToId[msg.sender];\\n                delete lenderIdToAddress[tempIdOfUser];\\n                numberOfLenders -= 1;\\n            }\\n        }\\n        usersCurrentLentAmount[msg.sender] -= _amountEther;\\n        totalAvailableEth -= _amountEther;\\n        totalEthLent -= _amountEther;\\n        payable(msg.sender).transfer(_amountEther * _tokenDecimals);\\n        emit ethMoved(msg.sender, _amountEther, 4, block.timestamp);\\n    }\\n\\n    //safe gaurd so no funds get locked\\n    function withdraw(uint256 amount) external onlyOwner {\\n        payable(owner).transfer(amount);\\n    }\\n\\n    function rescueToken(address token, uint256 amount) external onlyOwner {\\n        IERC20 tokenToRescue = IERC20(token);\\n        tokenToRescue.transfer(owner, amount);\\n    }\\n\\n    function removeExcess() external payable onlyOwner {\\n        require(\\n            address(this).balance > totalAvailableEth * _tokenDecimals,\\n            \\\"There is no excess eth\\\"\\n        );\\n        uint256 excessAmount = address(this).balance -\\n            (totalAvailableEth * _tokenDecimals);\\n        payable(owner).transfer(excessAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"Math.sol\": {\r\n      \"content\": \"/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\ncontract DSMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint x, uint y) internal pure returns (uint z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int x, int y) internal pure returns (int z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int x, int y) internal pure returns (int z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint constant WAD = 10 ** 18;\\n    uint constant RAY = 10 ** 27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint x, uint n) internal pure returns (uint z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"OperaToken.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_stringData\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_addressData\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_intData\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"rewardsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCoin\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OperaFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OperaRevenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquiditySellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operaTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aboutMe\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowedLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setFeeExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingBuyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingSellPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devBuyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devSellPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityBuyPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquiditySellPercent\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"}],\"name\":\"updateAboutMe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OperaToken", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002800000000000000000000000001ff1e20052a9e4bc180305a773474eded0c5844e0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000ca6b6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d6265ed5fd18904e7d8043d987dfd64f4a7d3851000000000000000000000000d6265ed5fd18904e7d8043d987dfd64f4a7d3851000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000003eersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}