{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IEpochUtils.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\ninterface IEpochUtils {\r\n    function epochPeriodInSeconds() external view returns (uint256);\r\n\r\n    function firstEpochStartTimestamp() external view returns (uint256);\r\n\r\n    function getCurrentEpochNumber() external view returns (uint256);\r\n\r\n    function getEpochNumber(uint256 timestamp) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IKyberDao.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IKyberDao is IEpochUtils {\r\n    event Voted(\r\n        address indexed staker,\r\n        uint256 indexed epoch,\r\n        uint256 indexed campaignID,\r\n        uint256 option\r\n    );\r\n\r\n    function getLatestNetworkFeeDataWithCache()\r\n        external\r\n        returns (uint256 feeInBps, uint256 expiryTimestamp);\r\n\r\n    function getLatestBRRDataWithCache()\r\n        external\r\n        returns (\r\n            uint256 burnInBps,\r\n            uint256 rewardInBps,\r\n            uint256 rebateInBps,\r\n            uint256 epoch,\r\n            uint256 expiryTimestamp\r\n        );\r\n\r\n    function handleWithdrawal(address staker, uint256 penaltyAmount) external;\r\n\r\n    function vote(uint256 campaignID, uint256 option) external;\r\n\r\n    function getLatestNetworkFeeData()\r\n        external\r\n        view\r\n        returns (uint256 feeInBps, uint256 expiryTimestamp);\r\n\r\n    function shouldBurnRewardForEpoch(uint256 epoch)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev  return staker's reward percentage in precision for a past epoch only\r\n     *       fee handler should call this function when a staker wants to claim reward\r\n     *       return 0 if staker has no votes or stakes\r\n     */\r\n    function getPastEpochRewardPercentageInPrecision(\r\n        address staker,\r\n        uint256 epoch\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev  return staker's reward percentage in precision for the current epoch\r\n     *       reward percentage is not finalized until the current epoch is ended\r\n     */\r\n    function getCurrentEpochRewardPercentageInPrecision(address staker)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IExtendedKyberDao.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IExtendedKyberDao is IKyberDao {\r\n    function kncToken() external view returns (address);\r\n\r\n    function staking() external view returns (address);\r\n\r\n    function feeHandler() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IKyberFeeHandler.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IKyberFeeHandler {\r\n    event RewardPaid(\r\n        address indexed staker,\r\n        uint256 indexed epoch,\r\n        IERC20 indexed token,\r\n        uint256 amount\r\n    );\r\n    event RebatePaid(\r\n        address indexed rebateWallet,\r\n        IERC20 indexed token,\r\n        uint256 amount\r\n    );\r\n    event PlatformFeePaid(\r\n        address indexed platformWallet,\r\n        IERC20 indexed token,\r\n        uint256 amount\r\n    );\r\n    event KncBurned(uint256 kncTWei, IERC20 indexed token, uint256 amount);\r\n\r\n    function handleFees(\r\n        IERC20 token,\r\n        address[] calldata eligibleWallets,\r\n        uint256[] calldata rebatePercentages,\r\n        address platformWallet,\r\n        uint256 platformFee,\r\n        uint256 networkFee\r\n    ) external payable;\r\n\r\n    function claimReserveRebate(address rebateWallet)\r\n        external\r\n        returns (uint256);\r\n\r\n    function claimPlatformFee(address platformWallet)\r\n        external\r\n        returns (uint256);\r\n\r\n    function claimStakerReward(address staker, uint256 epoch)\r\n        external\r\n        returns (uint256 amount);\r\n}\r\n\r\n// File: contracts/interfaces/IExtendedKyberFeeHandler.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IExtendedKyberFeeHandler is IKyberFeeHandler {\r\n    function rewardsPerEpoch(uint256) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IKyberStaking.sol\r\n\r\npragma solidity 0.6.6;\r\n\r\n\r\ninterface IKyberStaking is IEpochUtils {\r\n    event Delegated(\r\n        address indexed staker,\r\n        address indexed representative,\r\n        uint256 indexed epoch,\r\n        bool isDelegated\r\n    );\r\n    event Deposited(uint256 curEpoch, address indexed staker, uint256 amount);\r\n    event Withdraw(\r\n        uint256 indexed curEpoch,\r\n        address indexed staker,\r\n        uint256 amount\r\n    );\r\n\r\n    function initAndReturnStakerDataForCurrentEpoch(address staker)\r\n        external\r\n        returns (\r\n            uint256 stake,\r\n            uint256 delegatedStake,\r\n            address representative\r\n        );\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function delegate(address dAddr) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    /**\r\n     * @notice return combine data (stake, delegatedStake, representative) of a staker\r\n     * @dev allow to get staker data up to current epoch + 1\r\n     */\r\n    function getStakerData(address staker, uint256 epoch)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 stake,\r\n            uint256 delegatedStake,\r\n            address representative\r\n        );\r\n\r\n    function getLatestStakerData(address staker)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 stake,\r\n            uint256 delegatedStake,\r\n            address representative\r\n        );\r\n\r\n    /**\r\n     * @notice return raw data of a staker for an epoch\r\n     *         WARN: should be used only for initialized data\r\n     *          if data has not been initialized, it will return all 0\r\n     *          pool master shouldn't use this function to compute/distribute rewards of pool members\r\n     */\r\n    function getStakerRawData(address staker, uint256 epoch)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 stake,\r\n            uint256 delegatedStake,\r\n            address representative\r\n        );\r\n}\r\n\r\n// File: contracts/KyberPoolMaster.sol\r\n\r\npragma solidity 0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Kyber PoolMaster contract\r\n * @author Protofire\r\n * @dev Contract that allows pool masters to let pool members claim their designated rewards trustlessly and update fees\r\n *      with sufficient notice times while maintaining full trustlessness.\r\n */\r\ncontract KyberPoolMaster is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant MINIMUM_EPOCH_NOTICE = 1;\r\n    uint256 internal constant MAX_DELEGATION_FEE = 10000;\r\n    uint256 internal constant PRECISION = (10**18);\r\n    IERC20 internal constant ETH_TOKEN_ADDRESS = IERC20(\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n    );\r\n\r\n    // Number of epochs after which a change on delegationFee will be applied\r\n    uint256 public immutable epochNotice;\r\n\r\n    // Mapping of if staker has claimed reward for Epoch in a feeHandler\r\n    // epoch -> member -> feeHandler -> true | false\r\n    mapping(uint256 => mapping(address => mapping(address => bool)))\r\n        public claimedDelegateReward;\r\n\r\n    struct Claim {\r\n        bool claimedByPool;\r\n        uint256 totalRewards;\r\n        uint256 totalStaked;\r\n    }\r\n    //epoch -> feeHandler -> Claim\r\n    mapping(uint256 => mapping(address => Claim)) public epochFeeHandlerClaims;\r\n\r\n    // Fee charged by poolMasters to poolMembers for services\r\n    // Denominated in 1e4 units\r\n    // 100 = 1%\r\n    struct DFeeData {\r\n        uint256 fromEpoch;\r\n        uint256 fee;\r\n        bool applied;\r\n    }\r\n\r\n    DFeeData[] public delegationFees;\r\n\r\n    IERC20 public immutable kncToken;\r\n    IExtendedKyberDao public immutable kyberDao;\r\n    IKyberStaking public immutable kyberStaking;\r\n\r\n    address[] public feeHandlersList;\r\n    mapping(address => IERC20) public rewardTokenByFeeHandler;\r\n\r\n    uint256 public immutable firstEpoch;\r\n\r\n    mapping(address => bool) public successfulClaimByFeeHandler;\r\n\r\n    struct RewardInfo {\r\n        IExtendedKyberFeeHandler kyberFeeHandler;\r\n        IERC20 rewardToken;\r\n        uint256 totalRewards;\r\n        uint256 totalFee;\r\n        uint256 rewardsAfterFee;\r\n        uint256 poolMembersShare;\r\n        uint256 poolMasterShare;\r\n    }\r\n\r\n    struct UnclaimedRewardData {\r\n        uint256 epoch;\r\n        address feeHandler;\r\n        uint256 rewards;\r\n        IERC20 rewardToken;\r\n    }\r\n\r\n    /*** Events ***/\r\n    event CommitNewFees(uint256 deadline, uint256 feeRate);\r\n    event NewFees(uint256 fromEpoch, uint256 feeRate);\r\n\r\n    event MemberClaimReward(\r\n        uint256 indexed epoch,\r\n        address indexed poolMember,\r\n        address indexed feeHandler,\r\n        IERC20 rewardToken,\r\n        uint256 reward\r\n    );\r\n\r\n    event MasterClaimReward(\r\n        uint256 indexed epoch,\r\n        address indexed feeHandler,\r\n        address indexed poolMaster,\r\n        IERC20 rewardToken,\r\n        uint256 totalRewards,\r\n        uint256 feeApplied,\r\n        uint256 feeAmount,\r\n        uint256 poolMasterShare\r\n    );\r\n\r\n    event AddFeeHandler(address indexed feeHandler, IERC20 indexed rewardToken);\r\n\r\n    event RemoveFeeHandler(address indexed feeHandler);\r\n\r\n    /**\r\n     * @notice Address deploying this contract should be able to receive ETH, owner can be changed using transferOwnership method\r\n     * @param _kyberDao KyberDao contract address\r\n     * @param _epochNotice Number of epochs after which a change on deledatioFee is will be applied\r\n     * @param _delegationFee Fee charged by poolMasters to poolMembers for services - Denominated in 1e4 units - 100 = 1%\r\n     * @param _kyberFeeHandlers Array of FeeHandlers\r\n     * @param _rewardTokens Array of ERC20 tokens used by FeeHandlers to pay reward. Use zero address if FeeHandler pays ETH\r\n     */\r\n    constructor(\r\n        address _kyberDao,\r\n        uint256 _epochNotice,\r\n        uint256 _delegationFee,\r\n        address[] memory _kyberFeeHandlers,\r\n        IERC20[] memory _rewardTokens\r\n    ) public {\r\n        require(_kyberDao != address(0), \"ctor: kyberDao is missing\");\r\n        require(\r\n            _epochNotice >= MINIMUM_EPOCH_NOTICE,\r\n            \"ctor: Epoch Notice too low\"\r\n        );\r\n        require(\r\n            _delegationFee <= MAX_DELEGATION_FEE,\r\n            \"ctor: Delegation Fee greater than 100%\"\r\n        );\r\n        require(\r\n            _kyberFeeHandlers.length > 0,\r\n            \"ctor: at least one _kyberFeeHandlers required\"\r\n        );\r\n        require(\r\n            _kyberFeeHandlers.length == _rewardTokens.length,\r\n            \"ctor: _kyberFeeHandlers and _rewardTokens uneven\"\r\n        );\r\n\r\n        IExtendedKyberDao _kyberDaoContract = IExtendedKyberDao(_kyberDao);\r\n        kyberDao = _kyberDaoContract;\r\n\r\n        kncToken = IERC20(_kyberDaoContract.kncToken());\r\n        kyberStaking = IKyberStaking(_kyberDaoContract.staking());\r\n\r\n        epochNotice = _epochNotice;\r\n\r\n        uint256 _firstEpoch = _kyberDaoContract.getCurrentEpochNumber();\r\n        firstEpoch = _firstEpoch;\r\n\r\n        delegationFees.push(DFeeData(_firstEpoch, _delegationFee, true));\r\n\r\n        for (uint256 i = 0; i < _kyberFeeHandlers.length; i++) {\r\n            require(\r\n                _kyberFeeHandlers[i] != address(0),\r\n                \"ctor: feeHandler is missing\"\r\n            );\r\n            require(\r\n                rewardTokenByFeeHandler[_kyberFeeHandlers[i]] ==\r\n                    IERC20(address(0)),\r\n                \"ctor: repeated feeHandler\"\r\n            );\r\n\r\n            feeHandlersList.push(_kyberFeeHandlers[i]);\r\n            rewardTokenByFeeHandler[_kyberFeeHandlers[i]] = _rewardTokens[i];\r\n\r\n            emit AddFeeHandler(\r\n                _kyberFeeHandlers[i],\r\n                rewardTokenByFeeHandler[_kyberFeeHandlers[i]]\r\n            );\r\n        }\r\n\r\n        emit CommitNewFees(_firstEpoch, _delegationFee);\r\n        emit NewFees(_firstEpoch, _delegationFee);\r\n    }\r\n\r\n    /**\r\n     * @dev adds a new FeeHandler\r\n     * @param _feeHandler FeeHandler address\r\n     * @param _rewardToken Rewards Token address\r\n     */\r\n    function addFeeHandler(address _feeHandler, IERC20 _rewardToken)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _feeHandler != address(0),\r\n            \"addFeeHandler: _feeHandler is missing\"\r\n        );\r\n        require(\r\n            rewardTokenByFeeHandler[_feeHandler] == IERC20(address(0)),\r\n            \"addFeeHandler: already added\"\r\n        );\r\n\r\n        feeHandlersList.push(_feeHandler);\r\n        rewardTokenByFeeHandler[_feeHandler] = _rewardToken;\r\n\r\n        emit AddFeeHandler(_feeHandler, rewardTokenByFeeHandler[_feeHandler]);\r\n    }\r\n\r\n    /**\r\n     * @dev removes a FeeHandler\r\n     * @param _feeHandler FeeHandler address\r\n     */\r\n    function removeFeeHandler(address _feeHandler) external onlyOwner {\r\n        require(\r\n            rewardTokenByFeeHandler[_feeHandler] != IERC20(address(0)),\r\n            \"removeFeeHandler: not added\"\r\n        );\r\n        require(\r\n            !successfulClaimByFeeHandler[_feeHandler],\r\n            \"removeFeeHandler: can not remove FeeHandler successfully claimed\"\r\n        );\r\n\r\n        if (feeHandlersList[feeHandlersList.length - 1] != _feeHandler) {\r\n            for (uint256 i = 0; i < feeHandlersList.length; i++) {\r\n                if (feeHandlersList[i] == _feeHandler) {\r\n                    feeHandlersList[i] = feeHandlersList[feeHandlersList\r\n                        .length - 1];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        feeHandlersList.pop();\r\n        delete rewardTokenByFeeHandler[_feeHandler];\r\n\r\n        emit RemoveFeeHandler(_feeHandler);\r\n    }\r\n\r\n    /**\r\n     * @dev call to stake more KNC for poolMaster\r\n     * @param amount amount of KNC to stake\r\n     */\r\n    function masterDeposit(uint256 amount) external onlyOwner {\r\n        require(\r\n            amount > 0,\r\n            \"masterDeposit: amount to deposit should be positive\"\r\n        );\r\n\r\n        require(\r\n            kncToken.transferFrom(msg.sender, address(this), amount),\r\n            \"masterDeposit: can not get token\"\r\n        );\r\n\r\n        // approve\r\n        kncToken.approve(address(kyberStaking), amount);\r\n\r\n        // deposit in KyberStaking\r\n        kyberStaking.deposit(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev call to withdraw KNC from staking\r\n     * @param amount amount of KNC to withdraw\r\n     */\r\n    function masterWithdraw(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"masterWithdraw: amount is 0\");\r\n\r\n        // withdraw from KyberStaking\r\n        kyberStaking.withdraw(amount);\r\n\r\n        // transfer KNC back to pool master\r\n        require(\r\n            kncToken.transfer(msg.sender, amount),\r\n            \"masterWithdraw: can not transfer knc to the pool master\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev  vote for an option of a campaign\r\n     *       options are indexed from 1 to number of options\r\n     * @param campaignID id of campaign to vote for\r\n     * @param option id of options to vote for\r\n     */\r\n    function vote(uint256 campaignID, uint256 option) external onlyOwner {\r\n        kyberDao.vote(campaignID, option);\r\n    }\r\n\r\n    /**\r\n     * @dev  set a new delegation fee to be applied in current epoch + epochNotice\r\n     * @param _fee new fee\r\n     */\r\n    function commitNewFee(uint256 _fee) external onlyOwner {\r\n        require(\r\n            _fee <= MAX_DELEGATION_FEE,\r\n            \"commitNewFee: Delegation Fee greater than 100%\"\r\n        );\r\n\r\n        uint256 curEpoch = kyberDao.getCurrentEpochNumber();\r\n        uint256 fromEpoch = curEpoch.add(epochNotice);\r\n\r\n        DFeeData storage lastFee = delegationFees[delegationFees.length - 1];\r\n\r\n        if (lastFee.fromEpoch > curEpoch) {\r\n            lastFee.fromEpoch = fromEpoch;\r\n            lastFee.fee = _fee;\r\n        } else {\r\n            if (!lastFee.applied) {\r\n                applyFee(lastFee);\r\n            }\r\n\r\n            delegationFees.push(DFeeData(fromEpoch, _fee, false));\r\n        }\r\n        emit CommitNewFees(fromEpoch.sub(1), _fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Applies the pending new fee\r\n     */\r\n    function applyPendingFee() public {\r\n        DFeeData storage lastFee = delegationFees[delegationFees.length - 1];\r\n        uint256 curEpoch = kyberDao.getCurrentEpochNumber();\r\n\r\n        if (lastFee.fromEpoch <= curEpoch && !lastFee.applied) {\r\n            applyFee(lastFee);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Applies a pending fee\r\n     * @param fee to be applied\r\n     */\r\n    function applyFee(DFeeData storage fee) internal {\r\n        fee.applied = true;\r\n        emit NewFees(fee.fromEpoch, fee.fee);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the id of the delegation fee corresponding to the given epoch\r\n     * @param _epoch for which epoch is querying delegation fee\r\n     * @param _from delegationFees starting index\r\n     */\r\n    function getEpochDFeeDataId(uint256 _epoch, uint256 _from)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (delegationFees[_from].fromEpoch > _epoch) {\r\n            return _from;\r\n        }\r\n\r\n        uint256 left = _from;\r\n        uint256 right = delegationFees.length;\r\n\r\n        while (left < right) {\r\n            uint256 m = (left + right).div(2);\r\n            if (delegationFees[m].fromEpoch > _epoch) {\r\n                right = m;\r\n            } else {\r\n                left = m + 1;\r\n            }\r\n        }\r\n\r\n        return right - 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the the delegation fee data corresponding to the given epoch\r\n     * @param epoch for which epoch is querying delegation fee\r\n     */\r\n    function getEpochDFeeData(uint256 epoch)\r\n        public\r\n        view\r\n        returns (DFeeData memory epochDFee)\r\n    {\r\n        epochDFee = delegationFees[getEpochDFeeDataId(epoch, 0)];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the the delegation fee data corresponding to the current epoch\r\n     */\r\n    function delegationFee() public view returns (DFeeData memory) {\r\n        uint256 curEpoch = kyberDao.getCurrentEpochNumber();\r\n        return getEpochDFeeData(curEpoch);\r\n    }\r\n\r\n    /**\r\n     * @dev  Queries the amount of unclaimed rewards for the pool in a given epoch and feeHandler\r\n     *       return 0 if PoolMaster has calledRewardMaster\r\n     *       return 0 if staker's reward percentage in precision for the epoch is 0\r\n     *       return 0 if total reward for the epoch is 0\r\n     * @param _epoch for which epoch is querying unclaimed reward\r\n     * @param _feeHandler FeeHandler address\r\n     */\r\n    function getUnclaimedRewards(\r\n        uint256 _epoch,\r\n        IExtendedKyberFeeHandler _feeHandler\r\n    ) public view returns (uint256) {\r\n        if (epochFeeHandlerClaims[_epoch][address(_feeHandler)].claimedByPool) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 perInPrecision = kyberDao\r\n            .getPastEpochRewardPercentageInPrecision(address(this), _epoch);\r\n        if (perInPrecision == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 rewardsPerEpoch = _feeHandler.rewardsPerEpoch(_epoch);\r\n        if (rewardsPerEpoch == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return rewardsPerEpoch.mul(perInPrecision).div(PRECISION);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns data related to all epochs and feeHandlers with unclaimed rewards, for the pool.\r\n     */\r\n    function getUnclaimedRewardsData()\r\n        external\r\n        view\r\n        returns (UnclaimedRewardData[] memory)\r\n    {\r\n        uint256 currentEpoch = kyberDao.getCurrentEpochNumber();\r\n        uint256 maxEpochNumber = currentEpoch.sub(firstEpoch);\r\n        uint256[] memory epochGroup = new uint256[](maxEpochNumber);\r\n        uint256 e = 0;\r\n        for (uint256 epoch = firstEpoch; epoch < currentEpoch; epoch++) {\r\n            epochGroup[e] = epoch;\r\n            e++;\r\n        }\r\n\r\n        return _getUnclaimedRewardsData(epochGroup, feeHandlersList);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns data related to all epochs and feeHandlers, from the given groups, with unclaimed rewards, for the pool.\r\n     */\r\n    function getUnclaimedRewardsData(\r\n        uint256[] calldata _epochGroup,\r\n        address[] calldata _feeHandlerGroup\r\n    ) external view returns (UnclaimedRewardData[] memory) {\r\n        return _getUnclaimedRewardsData(_epochGroup, _feeHandlerGroup);\r\n    }\r\n\r\n    function _getUnclaimedRewardsData(\r\n        uint256[] memory _epochGroup,\r\n        address[] memory _feeHandlerGroup\r\n    ) internal view returns (UnclaimedRewardData[] memory) {\r\n\r\n            UnclaimedRewardData[] memory epochFeeHanlderRewards\r\n         = new UnclaimedRewardData[](\r\n            _epochGroup.length.mul(_feeHandlerGroup.length)\r\n        );\r\n        uint256 rewardsCounter = 0;\r\n        for (uint256 e = 0; e < _epochGroup.length; e++) {\r\n            for (uint256 f = 0; f < _feeHandlerGroup.length; f++) {\r\n                uint256 unclaimed = getUnclaimedRewards(\r\n                    _epochGroup[e],\r\n                    IExtendedKyberFeeHandler(_feeHandlerGroup[f])\r\n                );\r\n\r\n                if (unclaimed > 0) {\r\n                    epochFeeHanlderRewards[rewardsCounter] = UnclaimedRewardData(\r\n                        _epochGroup[e],\r\n                        _feeHandlerGroup[f],\r\n                        unclaimed,\r\n                        rewardTokenByFeeHandler[_feeHandlerGroup[f]]\r\n                    );\r\n                    rewardsCounter++;\r\n                }\r\n            }\r\n        }\r\n\r\n        UnclaimedRewardData[] memory result = new UnclaimedRewardData[](\r\n            rewardsCounter\r\n        );\r\n        for (uint256 i = 0; i < (rewardsCounter); i++) {\r\n            result[i] = epochFeeHanlderRewards[i];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev  Claims rewards for a given group of epochs in all feeHandlers, distribute fees and its share to poolMaster\r\n     * @param _epochGroup An array of epochs for which rewards are being claimed. Asc order and uniqueness is required.\r\n     */\r\n    function claimRewardsMaster(uint256[] memory _epochGroup) public {\r\n        claimRewardsMaster(_epochGroup, feeHandlersList);\r\n    }\r\n\r\n    /**\r\n     * @dev  Claims rewards for a given group of epochs and a given group of feeHandlers, distribute fees and its share to poolMaster\r\n     * @param _epochGroup An array of epochs for which rewards are being claimed. Asc order and uniqueness is required.\r\n     * @param _feeHandlerGroup An array of FeeHandlers for which rewards are being claimed.\r\n     */\r\n    function claimRewardsMaster(\r\n        uint256[] memory _epochGroup,\r\n        address[] memory _feeHandlerGroup\r\n    ) public {\r\n        require(_epochGroup.length > 0, \"cRMaster: _epochGroup required\");\r\n        require(\r\n            isOrderedSet(_epochGroup),\r\n            \"cRMaster: order and uniqueness required\"\r\n        );\r\n        require(\r\n            _feeHandlerGroup.length > 0,\r\n            \"cRMaster: _feeHandlerGroup required\"\r\n        );\r\n\r\n        uint256[] memory accruedByFeeHandler = new uint256[](\r\n            _feeHandlerGroup.length\r\n        );\r\n\r\n        uint256 feeId = 0;\r\n\r\n        for (uint256 j = 0; j < _epochGroup.length; j++) {\r\n            uint256 _epoch = _epochGroup[j];\r\n            feeId = getEpochDFeeDataId(_epoch, feeId);\r\n            DFeeData storage epochDFee = delegationFees[feeId];\r\n\r\n            if (!epochDFee.applied) {\r\n                applyFee(epochDFee);\r\n            }\r\n\r\n            (uint256 stake, uint256 delegatedStake, ) = kyberStaking\r\n                .getStakerRawData(address(this), _epoch);\r\n\r\n            for (uint256 i = 0; i < _feeHandlerGroup.length; i++) {\r\n                RewardInfo memory rewardInfo = _claimRewardsFromKyber(\r\n                    _epoch,\r\n                    _feeHandlerGroup[i],\r\n                    epochDFee,\r\n                    stake,\r\n                    delegatedStake\r\n                );\r\n\r\n                if (rewardInfo.totalRewards == 0) {\r\n                    continue;\r\n                }\r\n\r\n                accruedByFeeHandler[i] = accruedByFeeHandler[i].add(\r\n                    rewardInfo.poolMasterShare\r\n                );\r\n\r\n                if (!successfulClaimByFeeHandler[_feeHandlerGroup[i]]) {\r\n                    successfulClaimByFeeHandler[_feeHandlerGroup[i]] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        address poolMaster = owner();\r\n        for (uint256 k = 0; k < accruedByFeeHandler.length; k++) {\r\n            _sendTokens(\r\n                rewardTokenByFeeHandler[_feeHandlerGroup[k]],\r\n                poolMaster,\r\n                accruedByFeeHandler[k],\r\n                \"cRMaster: poolMaster share transfer failed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function _claimRewardsFromKyber(\r\n        uint256 _epoch,\r\n        address _feeHandlerAddress,\r\n        DFeeData memory epochDFee,\r\n        uint256 stake,\r\n        uint256 delegatedStake\r\n    ) internal returns (RewardInfo memory rewardInfo) {\r\n        rewardInfo.kyberFeeHandler = IExtendedKyberFeeHandler(\r\n            _feeHandlerAddress\r\n        );\r\n        uint256 unclaimed = getUnclaimedRewards(\r\n            _epoch,\r\n            rewardInfo.kyberFeeHandler\r\n        );\r\n\r\n        if (unclaimed > 0) {\r\n            rewardInfo\r\n                .rewardToken = rewardTokenByFeeHandler[_feeHandlerAddress];\r\n\r\n            rewardInfo.kyberFeeHandler.claimStakerReward(address(this), _epoch);\r\n\r\n            rewardInfo.totalRewards = unclaimed;\r\n\r\n            rewardInfo.totalFee = rewardInfo\r\n                .totalRewards\r\n                .mul(epochDFee.fee)\r\n                .div(MAX_DELEGATION_FEE);\r\n            rewardInfo.rewardsAfterFee = rewardInfo.totalRewards.sub(\r\n                rewardInfo.totalFee\r\n            );\r\n\r\n            rewardInfo.poolMembersShare = calculateRewardsShare(\r\n                delegatedStake,\r\n                stake.add(delegatedStake),\r\n                rewardInfo.rewardsAfterFee\r\n            );\r\n            rewardInfo.poolMasterShare = rewardInfo.totalRewards.sub(\r\n                rewardInfo.poolMembersShare\r\n            ); // fee + poolMaster stake share\r\n\r\n            epochFeeHandlerClaims[_epoch][_feeHandlerAddress] = Claim(\r\n                true,\r\n                rewardInfo.poolMembersShare,\r\n                delegatedStake\r\n            );\r\n\r\n            emit MasterClaimReward(\r\n                _epoch,\r\n                _feeHandlerAddress,\r\n                payable(owner()),\r\n                rewardInfo.rewardToken,\r\n                rewardInfo.totalRewards,\r\n                epochDFee.fee,\r\n                rewardInfo.totalFee,\r\n                rewardInfo.poolMasterShare.sub(rewardInfo.totalFee)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Helper method to transfer tokens\r\n     * @param _token address of the token\r\n     * @param _receiver account that will receive the transfer\r\n     * @param _value the amount of tokens to transfer\r\n     * @param _errorMsg error msg in case transfer of native tokens fails\r\n     */\r\n    function _sendTokens(\r\n        IERC20 _token,\r\n        address _receiver,\r\n        uint256 _value,\r\n        string memory _errorMsg\r\n    ) internal {\r\n        if (_value == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_token == ETH_TOKEN_ADDRESS) {\r\n            (bool success, ) = _receiver.call{value: _value}(\"\");\r\n            require(success, _errorMsg);\r\n        } else {\r\n            SafeERC20.safeTransfer(_token, _receiver, _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev  Queries the amount of unclaimed rewards for the pool member in a given epoch and feeHandler\r\n     *       return 0 if PoolMaster has not called claimRewardMaster\r\n     *       return 0 if PoolMember has previously claimed reward for the epoch\r\n     *       return 0 if PoolMember has not stake for the epoch\r\n     *       return 0 if PoolMember has not delegated it stake to this contract for the epoch\r\n     * @param _poolMember address of pool member\r\n     * @param _epoch for which epoch the member is querying unclaimed reward\r\n     * @param _feeHandler FeeHandler address\r\n     */\r\n    function getUnclaimedRewardsMember(\r\n        address _poolMember,\r\n        uint256 _epoch,\r\n        address _feeHandler\r\n    ) public view returns (uint256) {\r\n        if (\r\n            !epochFeeHandlerClaims[_epoch][address(_feeHandler)].claimedByPool\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        if (claimedDelegateReward[_epoch][_poolMember][_feeHandler]) {\r\n            return 0;\r\n        }\r\n\r\n        (uint256 stake, , address representative) = kyberStaking.getStakerData(\r\n            _poolMember,\r\n            _epoch\r\n        );\r\n\r\n        if (stake == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (representative != address(this)) {\r\n            return 0;\r\n        }\r\n\r\n\r\n            Claim memory rewardForEpoch\r\n         = epochFeeHandlerClaims[_epoch][_feeHandler];\r\n\r\n        return\r\n            calculateRewardsShare(\r\n                stake,\r\n                rewardForEpoch.totalStaked,\r\n                rewardForEpoch.totalRewards\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev  Returns data related to all epochs and feeHandlers with unclaimed rewards, for a the poolMember. From initial to current epoch.\r\n     * @param _poolMember address of pool member\r\n     */\r\n    function getAllUnclaimedRewardsDataMember(address _poolMember)\r\n        external\r\n        view\r\n        returns (UnclaimedRewardData[] memory)\r\n    {\r\n        uint256 currentEpoch = kyberDao.getCurrentEpochNumber();\r\n        return\r\n            _getAllUnclaimedRewardsDataMember(\r\n                _poolMember,\r\n                firstEpoch,\r\n                currentEpoch\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns data related to all epochs and feeHandlers with unclaimed rewards, for a the poolMember.\r\n     * @param _poolMember address of pool member\r\n     * @param _fromEpoch initial epoch parameter\r\n     * @param _toEpoch end epoch parameter\r\n     */\r\n    function getAllUnclaimedRewardsDataMember(\r\n        address _poolMember,\r\n        uint256 _fromEpoch,\r\n        uint256 _toEpoch\r\n    ) external view returns (UnclaimedRewardData[] memory) {\r\n        return\r\n            _getAllUnclaimedRewardsDataMember(\r\n                _poolMember,\r\n                _fromEpoch,\r\n                _toEpoch\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Queries data related to epochs and feeHandlers with unclaimed rewards, for a the poolMember\r\n     * @param _poolMember address of pool member\r\n     * @param _fromEpoch initial epoch parameter\r\n     * @param _toEpoch end epoch parameter\r\n     */\r\n    function _getAllUnclaimedRewardsDataMember(\r\n        address _poolMember,\r\n        uint256 _fromEpoch,\r\n        uint256 _toEpoch\r\n    ) internal view returns (UnclaimedRewardData[] memory) {\r\n        uint256 maxEpochNumber = _toEpoch.sub(_fromEpoch).add(1);\r\n        uint256[] memory epochGroup = new uint256[](maxEpochNumber);\r\n        uint256 e = 0;\r\n        for (uint256 epoch = _fromEpoch; epoch <= _toEpoch; epoch++) {\r\n            epochGroup[e] = epoch;\r\n            e++;\r\n        }\r\n\r\n        return\r\n            _getUnclaimedRewardsDataMember(\r\n                _poolMember,\r\n                epochGroup,\r\n                feeHandlersList\r\n            );\r\n    }\r\n\r\n    function _getUnclaimedRewardsDataMember(\r\n        address _poolMember,\r\n        uint256[] memory _epochGroup,\r\n        address[] memory _feeHandlerGroup\r\n    ) internal view returns (UnclaimedRewardData[] memory) {\r\n\r\n            UnclaimedRewardData[] memory epochFeeHanlderRewards\r\n         = new UnclaimedRewardData[](\r\n            _epochGroup.length.mul(_feeHandlerGroup.length)\r\n        );\r\n\r\n        uint256 rewardsCounter = 0;\r\n        for (uint256 e = 0; e < _epochGroup.length; e++) {\r\n            for (uint256 f = 0; f < _feeHandlerGroup.length; f++) {\r\n                uint256 unclaimed = getUnclaimedRewardsMember(\r\n                    _poolMember,\r\n                    _epochGroup[e],\r\n                    _feeHandlerGroup[f]\r\n                );\r\n\r\n                if (unclaimed > 0) {\r\n                    epochFeeHanlderRewards[rewardsCounter] = UnclaimedRewardData(\r\n                        _epochGroup[e],\r\n                        _feeHandlerGroup[f],\r\n                        unclaimed,\r\n                        rewardTokenByFeeHandler[_feeHandlerGroup[f]]\r\n                    );\r\n                    rewardsCounter++;\r\n                }\r\n            }\r\n        }\r\n\r\n        UnclaimedRewardData[] memory result = new UnclaimedRewardData[](\r\n            rewardsCounter\r\n        );\r\n        for (uint256 i = 0; i < (rewardsCounter); i++) {\r\n            result[i] = epochFeeHanlderRewards[i];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Someone claims rewards for a PoolMember in a given group of epochs in all feeHandlers.\r\n     *      It will transfer rewards where epoch->feeHandler has been claimed by the pool and not yet by the member.\r\n     *      This contract will keep locked remainings from rounding at a wei level.\r\n     * @param _epochGroup An array of epochs for which rewards are being claimed\r\n     * @param _poolMember PoolMember address to claim rewards for\r\n     */\r\n    function claimRewardsMember(\r\n        address _poolMember,\r\n        uint256[] memory _epochGroup\r\n    ) public {\r\n        _claimRewardsMember(_poolMember, _epochGroup, feeHandlersList);\r\n    }\r\n\r\n    /**\r\n     * @dev Someone claims rewards for a PoolMember in a given group of epochs in a given group of feeHandlers.\r\n     *      It will transfer rewards where epoch->feeHandler has been claimed by the pool and not yet by the member.\r\n     *      This contract will keep locked remainings from rounding at a wei level.\r\n     * @param _epochGroup An array of epochs for which rewards are being claimed\r\n     * @param _feeHandlerGroup An array of FeeHandlers for which rewards are being claimed\r\n     * @param _poolMember PoolMember address to claim rewards for\r\n     */\r\n    function claimRewardsMember(\r\n        address _poolMember,\r\n        uint256[] memory _epochGroup,\r\n        address[] memory _feeHandlerGroup\r\n    ) public {\r\n        _claimRewardsMember(_poolMember, _epochGroup, _feeHandlerGroup);\r\n    }\r\n\r\n    function _claimRewardsMember(\r\n        address _poolMember,\r\n        uint256[] memory _epochGroup,\r\n        address[] memory _feeHandlerGroup\r\n    ) internal {\r\n        require(_epochGroup.length > 0, \"cRMember: _epochGroup required\");\r\n        require(\r\n            _feeHandlerGroup.length > 0,\r\n            \"cRMember: _feeHandlerGroup required\"\r\n        );\r\n\r\n        uint256[] memory accruedByFeeHandler = new uint256[](\r\n            _feeHandlerGroup.length\r\n        );\r\n\r\n        for (uint256 j = 0; j < _epochGroup.length; j++) {\r\n            uint256 _epoch = _epochGroup[j];\r\n\r\n            for (uint256 i = 0; i < _feeHandlerGroup.length; i++) {\r\n                uint256 poolMemberShare = getUnclaimedRewardsMember(\r\n                    _poolMember,\r\n                    _epoch,\r\n                    _feeHandlerGroup[i]\r\n                );\r\n\r\n\r\n                    IERC20 rewardToken\r\n                 = rewardTokenByFeeHandler[_feeHandlerGroup[i]];\r\n\r\n                if (poolMemberShare == 0) {\r\n                    continue;\r\n                }\r\n\r\n                accruedByFeeHandler[i] = accruedByFeeHandler[i].add(\r\n                    poolMemberShare\r\n                );\r\n\r\n                claimedDelegateReward[_epoch][_poolMember][_feeHandlerGroup[i]] = true;\r\n\r\n                emit MemberClaimReward(\r\n                    _epoch,\r\n                    _poolMember,\r\n                    _feeHandlerGroup[i],\r\n                    rewardToken,\r\n                    poolMemberShare\r\n                );\r\n            }\r\n        }\r\n\r\n        // distribute _poolMember rewards share\r\n        for (uint256 k = 0; k < accruedByFeeHandler.length; k++) {\r\n            _sendTokens(\r\n                rewardTokenByFeeHandler[_feeHandlerGroup[k]],\r\n                _poolMember,\r\n                accruedByFeeHandler[k],\r\n                \"cRMember: poolMember share transfer failed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    // Utils\r\n\r\n    /**\r\n     * @dev Calculates rewards share based on the stake over the total stake\r\n     */\r\n    function calculateRewardsShare(\r\n        uint256 stake,\r\n        uint256 totalStake,\r\n        uint256 rewards\r\n    ) internal pure returns (uint256) {\r\n        return stake.mul(rewards).div(totalStake);\r\n    }\r\n\r\n    /**\r\n     * @dev Queries the number of elements in delegationFees\r\n     */\r\n    function delegationFeesLength() public view returns (uint256) {\r\n        return delegationFees.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Queries the number of elements in feeHandlersList\r\n     */\r\n    function feeHandlersListLength() public view returns (uint256) {\r\n        return feeHandlersList.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if elements in array are ordered and unique\r\n     */\r\n    function isOrderedSet(uint256[] memory numbers)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        bool isOrdered = true;\r\n\r\n        if (numbers.length > 1) {\r\n            for (uint256 i = 0; i < numbers.length - 1; i++) {\r\n                // strict inequality ensures both ordering and uniqueness\r\n                if (numbers[i] >= numbers[i + 1]) {\r\n                    isOrdered = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isOrdered;\r\n    }\r\n\r\n    /**\r\n     * @dev Enables the contract to receive ETH\r\n     */\r\n    receive() external payable {\r\n        require(\r\n            rewardTokenByFeeHandler[msg.sender] == ETH_TOKEN_ADDRESS,\r\n            \"only accept ETH from a KyberFeeHandler\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyberDao\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochNotice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegationFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_kyberFeeHandlers\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"AddFeeHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"CommitNewFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolMaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeApplied\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolMasterShare\",\"type\":\"uint256\"}],\"name\":\"MasterClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"MemberClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"NewFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"}],\"name\":\"RemoveFeeHandler\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeHandler\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addFeeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyPendingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_epochGroup\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeHandlerGroup\",\"type\":\"address[]\"}],\"name\":\"claimRewardsMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_epochGroup\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolMember\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_epochGroup\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeHandlerGroup\",\"type\":\"address[]\"}],\"name\":\"claimRewardsMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolMember\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_epochGroup\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardsMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedDelegateReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"commitNewFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"internalType\":\"struct KyberPoolMaster.DFeeData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationFeesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochFeeHandlerClaims\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimedByPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNotice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeHandlersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeHandlersListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toEpoch\",\"type\":\"uint256\"}],\"name\":\"getAllUnclaimedRewardsDataMember\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct KyberPoolMaster.UnclaimedRewardData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolMember\",\"type\":\"address\"}],\"name\":\"getAllUnclaimedRewardsDataMember\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct KyberPoolMaster.UnclaimedRewardData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getEpochDFeeData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"applied\",\"type\":\"bool\"}],\"internalType\":\"struct KyberPoolMaster.DFeeData\",\"name\":\"epochDFee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"contract IExtendedKyberFeeHandler\",\"name\":\"_feeHandler\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnclaimedRewardsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct KyberPoolMaster.UnclaimedRewardData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_epochGroup\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_feeHandlerGroup\",\"type\":\"address[]\"}],\"name\":\"getUnclaimedRewardsData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeHandler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"struct KyberPoolMaster.UnclaimedRewardData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeHandler\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewardsMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kncToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberDao\",\"outputs\":[{\"internalType\":\"contract IExtendedKyberDao\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberStaking\",\"outputs\":[{\"internalType\":\"contract IKyberStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"masterDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"masterWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeHandler\",\"type\":\"address\"}],\"name\":\"removeFeeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenByFeeHandler\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"successfulClaimByFeeHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KyberPoolMaster", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000049bdd8854481005bba4acebabf6e06cd5f6312e90000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d3d2b5643e506c6d9b7099e9116d7aaa941114fe0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e3b4553c22227bb4c69423e6d0071303564640de84dd8ef8cf5fa9c7adb4e5bb"}