{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.8/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWomDepositor {\\n    function deposit(uint256 _amount, address _stakeAddress) external returns (bool);\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\\ninterface IWmxLocker {\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    struct LockedBalance {\\n        uint112 amount;\\n        uint32 unlockTime;\\n    }\\n\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n\\n    function balances(address _account) external view returns (uint112 locked, uint32 nextUnlockIndex);\\n\\n    function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards);\\n\\n    function getVotes(address account) external view returns (uint256);\\n\\n    function getPastVotes(address account, uint256 timestamp) external view returns (uint256 votes);\\n\\n    function lockedBalances(address _user) external view returns (\\n        uint256 total,\\n        uint256 unlockable,\\n        uint256 locked,\\n        LockedBalance[] memory lockData\\n    );\\n\\n    function addReward(address _rewardsToken, address _distributor) external;\\n\\n    function approveRewardDistributor(\\n        address _rewardsToken,\\n        address _distributor,\\n        bool _approved\\n    ) external;\\n\\n    function modifyBlacklist(address _account, bool _blacklisted) external;\\n\\n    function setKickIncentive(uint256 _rate, uint256 _delay) external;\\n\\n    function shutdown() external;\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external;\\n}\\n\\ninterface IOwnable {\\n    function transferOwnership(address _newOwner) external;\\n}\\n\\ninterface IRewardsManager {\\n    function onNewRewardToken(address _token) external;\\n}\\n\\ninterface IWmxLockerExt {\\n    struct LockerRewardData {\\n        uint32 periodFinish;\\n        uint32 lastUpdateTime;\\n        uint96 rewardRate;\\n        uint96 rewardPerTokenStored;\\n    }\\n\\n    function rewardData(address token) external view returns (LockerRewardData memory);\\n}\\n\\ninterface IBribeVoter {\\n    function vote(IERC20[] calldata _lpVote, int256[] calldata _deltas) external returns (uint256[][] memory bribeRewards);\\n    function votes(address _user, address _lpToken) external view returns (uint256);\\n    function infos(address _lpToken) external view returns (uint104 supplyBaseIndex, uint104 supplyVoteIndex, uint40 nextEpochStartTime, uint128 claimable, bool whitelist, address gaugeManager, address bribe);\\n    function weights(address _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\\n    function getUserVotes(address _user, address _lpToken) external view returns (uint256);\\n}\\n\\ninterface IMasterWombatRewarder {\\n    function rewardTokens() external view returns (address[] memory tokens);\\n}\\n\\ninterface IExtraRewardsDistributor {\\n    function addReward(address _token, uint256 _amount) external;\\n}\\n\\ninterface IWomDepositorWrapper {\\n    function getMinOut(uint256, uint256) external view returns (uint256);\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        bool,\\n        address _stakeAddress\\n    ) external;\\n}\\n\\ninterface ITokenFactory{\\n    function CreateDepositToken(address) external returns(address);\\n    function CreateBribesVotingToken() external returns(address);\\n}\\n\\ninterface IBribesRewardFactory {\\n    function CreateBribesRewards(address _stakingToken, address _lptoken, bool _callOperatorOnGetReward) external returns (address);\\n}\\n\\ninterface IRewards{\\n    function asset() external returns(address);\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function withdraw(uint256 assets, address receiver, address owner) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(address, uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address _token, address _account) external view returns (uint256);\\n    function updateOperatorData(address operator_, uint256 pid_) external;\\n    function setRewardTokenPaused(address token_, bool paused_) external;\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n    function rewardTokensList() external view returns (address[] memory);\\n    function tokenRewards(address _token) external view returns (address token, uint256 periodFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored, uint256 queuedRewards, uint256 currentRewards, uint256 historicalRewards, bool paused);\\n}\\n\\ninterface IGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n\\n    function rewardInfo(uint256 i) external view returns (IERC20 rewardToken, uint96 tokenPerSec, uint128 accTokenPerShare, uint128 distributedAmount);\\n}\\n\\ninterface IVe {\\n    function vote(address user, int256 voteDelta) external;\\n}\\n\\ninterface INftLocker {\\n    function voteBoost(address _account) external view returns (uint256);\\n}\\n\\ninterface IBribeRewardsPool is IRewards {\\n    function withdrawAndUnwrapFrom(address _from, uint256 _amount, address _claimRecipient) external returns(bool);\\n    function updateBribesConfig(bool _callOperatorOnGetReward) external;\\n    function updateRatioConfig(uint256 _duration, uint256 _maxRewardRatio) external;\\n}\\n\\ninterface ITokenMinter is IERC20 {\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n    function setOperator(address) external;\\n    function updateOperator(address) external;\\n    function getFactAmounMint(uint256 _amount) external view returns(uint256 amount);\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdrawLp(address, address, uint256) external returns (bool);\\n    function withdrawAllLp(address, address) external returns (bool);\\n    function lock(uint256 _lockDays) external;\\n    function releaseLock(uint256 _slot) external returns(uint256);\\n    function getGaugeRewardTokens(address _lptoken, address _gauge) external returns (address[] memory tokens);\\n    function claimCrv(address, uint256) external returns (address[] memory tokens, uint256[] memory balances);\\n    function balanceOfPool(address, address) external view returns (uint256);\\n    function lpTokenToPid(address, address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function depositor() external view returns (address);\\n    function wom() external view returns (address);\\n    function veWom() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function setDepositor(address _depositor) external;\\n    function setOwner(address _owner) external;\\n}\\n\\ninterface IPool {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function quotePotentialWithdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity\\n    ) external view virtual returns (uint256 amount, uint256 withdrewAmount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function getTokens() external view returns (address[] memory);\\n}\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        bool shutdown;\\n    }\\n\\n    function crv() external view returns (address);\\n    function cvx() external view returns (address);\\n    function owner() external view returns (address);\\n    function voterProxy() external view returns (address);\\n    function earmarkDelegate() external view returns (address);\\n    function poolLength() external view returns (uint256);\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n    function depositFor(uint256 _pid, uint256 _amount, bool _stake, address _receiver) external returns (bool);\\n    function setOwner(address _owner) external;\\n    function setPoolManager(address _poolManager) external;\\n    function voterProxyClaimRewards(uint256 _pid, address[] memory pendingTokens) external returns (uint256[] memory pendingRewards);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function approveDistribution(address _distro, address[] memory _distributionTokens, uint256 _amount) external;\\n    function approvePoolsCrvRewardsDistribution(address _token) external;\\n    function distributeRewards(uint256 _pid, address _lpToken, address _rewardToken, address[] memory _transferTo, uint256[] memory _transferAmount, bool[] memory _callQueue) external;\\n    function lpPendingRewards(address _lptoken, address _token) external view returns (uint256);\\n    function earmarkRewards(uint256 _pid) external;\\n    function earmarkRewardsIfAvailable(uint256 _pid) external;\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n    function forceShutdownPool(uint256 _pid) external returns (bool);\\n    function gaugeMigrate(address _newGauge, uint256[] memory migratePids) external;\\n    function voteExecute(address _voting, uint256 _value, bytes calldata _data) external returns (bytes memory);\\n    function setVotingValid(address _voting, bool _value) external;\\n    function mintRatio() external view returns (uint256);\\n    function customMintRatio(uint256 _pid) external view returns (uint256);\\n    function crvLockRewards() external view returns (address);\\n    function cvxLocker() external view returns (address);\\n    function minterMint(address _address, uint256 _amount) external returns(bool);\\n}\\n\\ninterface IBoosterEarmark {\\n    function earmarkIncentive() external view returns (uint256);\\n    function distributionByTokenLength(address _token) external view returns (uint256);\\n    function distributionByTokens(address, uint256) external view returns (address, uint256, bool);\\n    function distributionTokenList() external view returns (address[] memory);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function isEarmarkAvailable(uint256 _pid) external view returns(bool);\\n    function isEarmarkPoolAvailable(uint256 _pid, IBooster.PoolInfo memory _pool) external view returns (bool);\\n    function earmarkRewards(uint256[] memory _pids) external;\\n    function earmarkPeriod() external view returns (uint256);\\n    function lastEarmarkAt(uint256 pid) external view returns (uint256);\\n    function getEarmarkPoolExecuteOn(uint256 pid) external view returns (uint256);\\n    function getEarmarkPoolExecuteOn(uint256 _pid, IBooster.PoolInfo calldata _pool) external view returns (uint256);\\n    function updateDistributionByTokens(\\n        address _token,\\n        address[] memory _distros,\\n        uint256[] memory _shares,\\n        bool[] memory _callQueue\\n    ) external;\\n}\\n\\ninterface ISwapRouter {\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n}\\n\\ninterface IWomSwapDepositor {\\n    function pool() external view returns (address);\\n    function deposit(uint256 _amount, address _stakeAddress, uint256 _minAmountOut, uint256 _deadline) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface of the MasterWombatV2\\n */\\ninterface IMasterWombatV2 {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (\\n        uint256 pendingRewards,\\n        IERC20[] memory bonusTokenAddresses,\\n        string[] memory bonusTokenSymbols,\\n        uint256[] memory pendingBonusRewards\\n    );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n    external\\n    view\\n    returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(uint256[] memory _pids)\\n    external\\n    returns (\\n        uint256 transfered,\\n        uint256[] memory rewards,\\n        uint256[][] memory additionalRewards\\n    );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n\\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint96 allocPoint, IMasterWombatRewarder rewarder, uint256 sumOfFactors, uint104 accWomPerShare, uint104 accWomPerFactorShare, uint40 lastRewardTimestamp);\\n}\\n\\ninterface IMasterWombatV3 {\\n    struct PoolInfoV3 {\\n        address lpToken; // Address of LP token contract.\\n        ////\\n        address rewarder;\\n        uint40 periodFinish;\\n        ////\\n        uint128 sumOfFactors; // 20.18 fixed point. the sum of all boosted factors by all of the users in the pool\\n        uint128 rewardRate; // 20.18 fixed point.\\n        ////\\n        uint104 accWomPerShare; // 19.12 fixed point. Accumulated WOM per share, times 1e12.\\n        uint104 accWomPerFactorShare; // 19.12 fixed point. Accumulated WOM per factor share\\n        uint40 lastRewardTimestamp;\\n    }\\n\\n    function poolInfoV3(uint256 _index) external view returns (PoolInfoV3 memory);\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        // storage slot 1\\n        uint128 amount; // 20.18 fixed point. How many LP tokens the user has provided.\\n        uint128 factor; // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\\n        // storage slot 2\\n        uint128 rewardDebt; // 20.18 fixed point. Reward debt. See explanation below.\\n        uint128 pendingWom; // 20.18 fixed point. Amount of pending wom\\n    }\\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\\n}\\n\"\r\n    },\r\n    \"contracts/WombexLensUI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\nimport \\\"./Interfaces.sol\\\";\\n\\ninterface IUniswapV2Router01 {\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface FraxRouter {\\n    function getAmountsOutWithTwamm(uint amountIn, address[] memory path) external returns (uint[] memory amounts);\\n}\\n\\ninterface QuoterV2 {\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\\ninterface IWmx {\\n    function getFactAmounMint(uint256) external view returns (uint256);\\n}\\n\\ninterface IWomAsset {\\n    function pool() external view returns (address);\\n    function underlyingToken() external view returns (address);\\n}\\n\\ninterface IWomPool {\\n    function quotePotentialWithdraw(address _token, uint256 _liquidity) external view returns (uint256);\\n    function quotePotentialWithdrawFromOtherAsset(address fromToken, address toToken, uint256 liquidity) external view virtual returns (uint256 amount, uint256 withdrewAmount);\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n    function getTokens() external view returns (address[] memory);\\n}\\n\\ninterface IBaseRewardPool4626 {\\n    struct RewardState {\\n        address token;\\n        uint256 periodFinish;\\n        uint256 rewardRate;\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n        uint256 queuedRewards;\\n        uint256 currentRewards;\\n        uint256 historicalRewards;\\n        bool paused;\\n    }\\n    function totalSupply() external view returns (uint256);\\n    function asset() external view returns (address);\\n    function stakingToken() external view returns (address);\\n    function rewardTokensList() external view returns (address[] memory);\\n    function tokenRewards(address _token) external view returns (RewardState memory);\\n    function claimableRewards(address _account)\\n        external view returns (address[] memory tokens, uint256[] memory amounts);\\n}\\n\\ncontract WombexLensUI is Ownable {\\n    address public UNISWAP_ROUTER;\\n    address public UNISWAP_V3_QUOTER;\\n\\n    address public MAIN_STABLE_TOKEN;\\n    uint8 public MAIN_STABLE_TOKEN_DECIMALS;\\n\\n    address public WETH_TOKEN;\\n    address public WMX_WOM_TOKEN;\\n    address public WOM_TOKEN;\\n    address public WMX_TOKEN;\\n    address public WMX_MINTER;\\n\\n    mapping(address => address) public swapTokenByPool;\\n    mapping(address => bool) public isUsdStableToken;\\n    mapping(address => address) public poolToToken;\\n    mapping(address => address) public tokenToRouter;\\n    mapping(address => uint24) public tokenUniV3Fee;\\n    mapping(address => address[]) public tokenSwapThroughTokens;\\n    mapping(address => address) public tokenSwapToTargetStable;\\n\\n    struct PoolValuesTokenApr {\\n        address token;\\n        uint128 rewardRate;\\n        uint128 apr;\\n        bool isPeriodFinish;\\n    }\\n\\n    struct RewardContractData {\\n        address poolAddress;\\n        uint128 lpBalance;\\n        uint128 underlyingBalance;\\n        uint128 usdBalance;\\n        uint8 decimals;\\n        RewardItem[] rewards;\\n    }\\n\\n    struct RewardItem {\\n        address rewardToken;\\n        uint128 amount;\\n        uint128 usdAmount;\\n        uint8 decimals;\\n        uint128 periodFinish;\\n    }\\n\\n    constructor(\\n        address _UNISWAP_ROUTER,\\n        address _UNISWAP_V3_ROUTER,\\n        address _MAIN_STABLE_TOKEN,\\n        address _WOM_TOKEN,\\n        address _WMX_TOKEN,\\n        address _WMX_MINTER,\\n        address _WETH_TOKEN,\\n        address _WMX_WOM_TOKEN\\n    ) {\\n        UNISWAP_ROUTER = _UNISWAP_ROUTER;\\n        UNISWAP_V3_QUOTER = _UNISWAP_V3_ROUTER;\\n        MAIN_STABLE_TOKEN = _MAIN_STABLE_TOKEN;\\n        MAIN_STABLE_TOKEN_DECIMALS = getTokenDecimals(_MAIN_STABLE_TOKEN);\\n        WOM_TOKEN = _WOM_TOKEN;\\n        WMX_TOKEN = _WMX_TOKEN;\\n        WMX_MINTER = _WMX_MINTER;\\n        WETH_TOKEN = _WETH_TOKEN;\\n        WMX_WOM_TOKEN = _WMX_WOM_TOKEN;\\n    }\\n\\n    function setUsdStableTokens(address[] memory _tokens, bool _isStable) external onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            isUsdStableToken[_tokens[i]] = _isStable;\\n        }\\n    }\\n\\n    function setSwapTokenByPool(address[] memory _tokens, address _pool) external onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            swapTokenByPool[_tokens[i]] = _pool;\\n        }\\n    }\\n\\n    function setPoolsForToken(address[] memory _pools, address _token) external onlyOwner {\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            poolToToken[_pools[i]] = _token;\\n        }\\n    }\\n\\n    function setTokensToRouter(address[] memory _tokens, address _router) external onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokenToRouter[_tokens[i]] = _router;\\n        }\\n    }\\n\\n    function setTokenUniV3Fee(address[] memory _tokens, uint24 _tokenUniV3Fee) external onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokenUniV3Fee[_tokens[i]] = _tokenUniV3Fee;\\n        }\\n    }\\n\\n    function setTokenSwapThroughToken(address[] memory _tokens, address[] memory _throughTokens) external onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokenSwapThroughTokens[_tokens[i]] = _throughTokens;\\n        }\\n    }\\n\\n    function setTokensTargetStable(address[] memory _tokens, address _targetStable) external onlyOwner {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            tokenSwapToTargetStable[_tokens[i]] = _targetStable;\\n        }\\n    }\\n\\n    struct RewardPoolInput {\\n        IBooster booster;\\n        uint256 poolId;\\n        address lpToken;\\n        address crvRewards;\\n        uint256[] rewardTokenPrices;\\n    }\\n    struct RewardPoolApyOutput {\\n        PoolValuesTokenApr[] aprs;\\n        uint256 aprTotal;\\n        uint256 aprItem;\\n        uint256 wmxApr;\\n        uint256 tvl;\\n    }\\n\\n    function getRewardPoolApys(RewardPoolInput[] memory input) public returns (RewardPoolApyOutput[] memory output) {\\n        output = new RewardPoolApyOutput[](input.length);\\n        uint256 wmxPrice = estimateInBUSDEther(WMX_TOKEN, 1 ether, uint8(18));\\n        for (uint256 i = 0; i < input.length; i++) {\\n            output[i].tvl = IBaseRewardPool4626(input[i].crvRewards).totalSupply() * getLpUsdOut(IWomAsset(input[i].lpToken).pool(), IWomAsset(input[i].lpToken).underlyingToken(), 1 ether) / 1 ether;\\n            (output[i].aprs, output[i].aprTotal, output[i].aprItem, output[i].wmxApr) = getRewardPoolApys(\\n                IBaseRewardPool4626(input[i].crvRewards),\\n                output[i].tvl,\\n                address(input[i].booster) == address(0) ? 0 : wmxPrice,\\n                address(input[i].booster) == address(0) ? 0 : getPoolMintRatio(input[i].booster, input[i].poolId, input[i].booster.mintRatio()),\\n                input[i].rewardTokenPrices\\n            );\\n        }\\n    }\\n\\n    function getRewardPoolApys(\\n        IBaseRewardPool4626 crvRewards,\\n        uint256 poolTvl,\\n        uint256 wmxUsdPrice,\\n        uint256 mintRatio,\\n        uint256[] memory rewardTokenPrices\\n    ) public returns(\\n        PoolValuesTokenApr[] memory aprs,\\n        uint256 aprTotal,\\n        uint256 aprItem,\\n        uint256 wmxApr\\n    ) {\\n        address[] memory rewardTokens = crvRewards.rewardTokensList();\\n        uint256 len = rewardTokens.length;\\n        aprs = new PoolValuesTokenApr[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            aprs[i].token = rewardTokens[i];\\n            IBaseRewardPool4626.RewardState memory rewardState = crvRewards.tokenRewards(aprs[i].token);\\n            aprs[i].isPeriodFinish = rewardState.periodFinish < block.timestamp;\\n            if (aprs[i].isPeriodFinish) {\\n                continue;\\n            }\\n\\n            if (aprs[i].token == WOM_TOKEN && poolTvl > 0) {\\n                uint256 factAmountMint = IWmx(WMX_MINTER).getFactAmounMint(rewardState.rewardRate * 365 days);\\n                uint256 wmxRate = factAmountMint;\\n                if (mintRatio > 0) {\\n                    wmxRate = factAmountMint * mintRatio / 10_000;\\n                }\\n\\n                wmxApr += wmxRate * wmxUsdPrice * 100 / poolTvl / 1e16;\\n            }\\n\\n            uint8 decimals = getTokenDecimals(aprs[i].token);\\n            uint256 usdPrice = rewardTokenPrices.length == 0 ? estimateInBUSDEther(aprs[i].token, 10 ** decimals, decimals) : rewardTokenPrices[i];\\n            aprs[i].rewardRate = uint128(rewardState.rewardRate * 10 ** (18 - decimals));\\n            aprs[i].apr = poolTvl == 0 ? 0 : uint128(uint256(aprs[i].rewardRate) * 365 days * usdPrice * 100 / poolTvl / 1e16);\\n            aprItem += uint256(aprs[i].rewardRate) * 365 days * usdPrice / 1e16;\\n            aprTotal += aprs[i].apr;\\n        }\\n        aprTotal += wmxApr;\\n    }\\n\\n    function getRewardPoolTotalApr128(\\n        IBaseRewardPool4626 crvRewards,\\n        uint256 poolTvl,\\n        uint256 wmxUsdPrice,\\n        uint256 mintRatio\\n    ) public returns(uint128 aprItem128, uint128 aprTotal128) {\\n        uint256[] memory prices = new uint256[](0);\\n        (, uint256 aprTotal, uint256 aprItem, ) = getRewardPoolApys(crvRewards, poolTvl, wmxUsdPrice, mintRatio, prices);\\n        aprTotal128 = uint128(aprTotal);\\n        aprItem128 = uint128(aprItem);\\n    }\\n\\n    function getBribeApys(\\n        address voterProxy,\\n        IBribeVoter bribesVoter,\\n        address lpToken,\\n        uint256 poolTvl,\\n        uint256 allPoolsTvl,\\n        uint256 veWomBalance,\\n        uint256[] memory rewardTokenPrices\\n    ) public returns(\\n        PoolValuesTokenApr[] memory aprs,\\n        uint256 aprItem,\\n        uint256 aprTotal\\n    ) {\\n        (, , , , , , address bribe) = bribesVoter.infos(lpToken);\\n        if (bribe == address(0)) {\\n            return (new PoolValuesTokenApr[](0), 0, 0);\\n        }\\n        (, uint128 voteWeight) = bribesVoter.weights(lpToken);\\n        uint256 userVotes = bribesVoter.getUserVotes(voterProxy, lpToken);\\n        if (userVotes == 0) {\\n            userVotes = 1 ether;\\n        }\\n        IERC20[] memory rewardTokens = IBribe(bribe).rewardTokens();\\n        aprs = new PoolValuesTokenApr[](rewardTokens.length);\\n\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            aprs[i].token = address(rewardTokens[i]);\\n\\n            (, aprs[i].rewardRate, , ) = IBribe(bribe).rewardInfo(i);\\n            uint8 decimals = getTokenDecimals(aprs[i].token);\\n            uint256 price = rewardTokenPrices.length == 0 ? estimateInBUSDEther(aprs[i].token, 10 ** decimals, decimals) : rewardTokenPrices[i];\\n            uint256 usdPerSec = price * uint256(aprs[i].rewardRate) / (10 ** decimals);\\n            if (veWomBalance != 0 && poolTvl != 0 && voteWeight / poolTvl > 0) {\\n                aprs[i].apr = uint128(usdPerSec * 365 days * 10e3 / (voteWeight * allPoolsTvl / veWomBalance));\\n                // 365 * 24 * 60 * 60 * rewardInfo.tokenPerSec * tokenUsdcPrice * userVotes / weight / (rewardPoolTotalSupply * wmxPrice) * 100,\\n                aprItem += usdPerSec * 365 days * userVotes * 100 / voteWeight;\\n            }\\n            aprTotal += aprs[i].apr;\\n        }\\n    }\\n\\n    function getBribeTotalApr128(\\n        address voterProxy,\\n        IBribeVoter bribesVoter,\\n        address lpToken,\\n        uint256 poolTvl,\\n        uint256 allPoolsTvl,\\n        uint256 veWomBalance\\n    ) public returns(uint128 aprItem128, uint128 aprTotal128, PoolValuesTokenApr[] memory aprs) {\\n        uint256[] memory prices = new uint256[](0);\\n        uint256 aprItem;\\n        uint256 aprTotal;\\n        (aprs, aprItem, aprTotal) = getBribeApys(voterProxy, bribesVoter, lpToken, poolTvl, allPoolsTvl, veWomBalance, prices);\\n        aprItem128 = uint128(aprItem);\\n        aprTotal128 = uint128(aprTotal);\\n    }\\n\\n\\n    function getTokenToWithdrawFromPool(address _womPool) public view returns (address tokenOut) {\\n        tokenOut = poolToToken[_womPool];\\n        if (tokenOut == address(0)) {\\n            address[] memory tokens;\\n            try IWomPool(_womPool).getTokens() returns (address[] memory _tokens) {\\n                tokens = _tokens;\\n            } catch {\\n                return address(0);\\n            }\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                if (isUsdStableToken[tokens[i]]) {\\n                    tokenOut = tokens[i];\\n                    break;\\n                }\\n            }\\n            if (tokenOut == address(0)) {\\n                address[] memory tokens = IWomPool(_womPool).getTokens();\\n                for (uint256 i = 0; i < tokens.length; i++) {\\n                    if (tokens[i] == WOM_TOKEN || tokens[i] == WMX_TOKEN || tokens[i] == WETH_TOKEN) {\\n                        tokenOut = tokens[i];\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function getLpUsdOut(\\n        address _womPool,\\n        address _fromToken,\\n        uint256 _lpTokenAmountIn\\n    ) public returns (uint256 result) {\\n        address tokenOut = getTokenToWithdrawFromPool(_womPool);\\n        if (tokenOut == address(0)) {\\n            return 0;\\n        }\\n        return quotePotentialWithdrawalTokenToBUSD(_womPool, _fromToken, tokenOut, _lpTokenAmountIn);\\n    }\\n\\n    function getTokensPrices(address[] memory _tokens) public returns (uint256[] memory prices) {\\n        uint256 len = _tokens.length;\\n        prices = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            address underlyingToken = getTokenUnderlying(_tokens[i]);\\n            if (underlyingToken == address(0)) {\\n                uint8 decimals = getTokenDecimals(_tokens[i]);\\n                prices[i] = estimateInBUSDEther(_tokens[i], 10 ** decimals, decimals);\\n            } else {\\n                address womPool = IWomAsset(_tokens[i]).pool();\\n                uint8 decimals = getTokenDecimals(underlyingToken);\\n                prices[i] = getLpUsdOut(womPool, underlyingToken, 1 ether);\\n            }\\n        }\\n    }\\n\\n    function quotePotentialWithdrawalTokenToBUSD(address _womPool, address _fromToken, address _tokenOut, uint256 _lpTokenAmountIn) public returns (uint256) {\\n        if (_fromToken == _tokenOut) {\\n            try IWomPool(_womPool).quotePotentialWithdraw(_tokenOut, _lpTokenAmountIn) returns (uint256 tokenAmountOut) {\\n                uint8 decimals = getTokenDecimals(_tokenOut);\\n                return estimateInBUSDEther(_tokenOut, tokenAmountOut, decimals);\\n            } catch {}\\n        } else {\\n            try IWomPool(_womPool).quotePotentialWithdrawFromOtherAsset(_fromToken, _tokenOut, _lpTokenAmountIn) returns (uint256 tokenAmountOut, uint256 withdrewAmount) {\\n                uint8 decimals = getTokenDecimals(_tokenOut);\\n                return estimateInBUSDEther(_tokenOut, tokenAmountOut, decimals);\\n            } catch {}\\n        }\\n        return 0;\\n    }\\n\\n    function tokenToPoolToken(address _token, uint256 _tokenAmount) public view returns (uint256 resAmount, address resToken) {\\n        address pool = swapTokenByPool[_token];\\n        resToken = poolToToken[pool];\\n        if (_tokenAmount == 0) {\\n            return (0, resToken);\\n        }\\n        uint8 decimals = getTokenDecimals(_token);\\n        try IWomPool(pool).quotePotentialSwap(_token, resToken, int256(10 ** decimals)) returns (uint256 potentialOutcome, uint256 haircut) {\\n            resAmount = potentialOutcome * _tokenAmount / (10 ** decimals);\\n        } catch {}\\n    }\\n\\n    function estimateInBUSDEther(address _token, uint256 _amountIn, uint256 _decimals) public returns (uint256 result) {\\n        return _estimateInBUSD(_token, _amountIn, _decimals) * 10 ** (18 - _decimals);\\n    }\\n\\n    // Estimates a token equivalent in USD (BUSD) using a Uniswap-compatible router\\n    function _estimateInBUSD(address _token, uint256 _amountIn, uint256 _decimals) internal returns (uint256 result) {\\n        if (_amountIn == 0) {\\n            return 0;\\n        }\\n        // 1. All the USD stable tokens are roughly estimated as $1.\\n        if (isUsdStableToken[_token]) {\\n            return _amountIn;\\n        }\\n\\n        if (swapTokenByPool[_token] != address(0)) {\\n            (_amountIn, _token) = tokenToPoolToken(_token, _amountIn);\\n        }\\n\\n        address router = UNISWAP_ROUTER;\\n        if (tokenToRouter[_token] != address(0)) {\\n            router = tokenToRouter[_token];\\n        }\\n\\n        address targetStable = MAIN_STABLE_TOKEN;\\n        uint8 targetStableDecimals = MAIN_STABLE_TOKEN_DECIMALS;\\n        if (tokenSwapToTargetStable[_token] != address(0)) {\\n            targetStable = tokenSwapToTargetStable[_token];\\n            targetStableDecimals = getTokenDecimals(targetStable);\\n        }\\n\\n        address[] memory path;\\n        address[] memory throughTokens = tokenSwapThroughTokens[_token];\\n        if (throughTokens.length > 0) {\\n            path = new address[](2 + throughTokens.length);\\n            path[0] = _token;\\n            for(uint256 i = 0; i < throughTokens.length; i++) {\\n                path[1 + i] = throughTokens[i];\\n            }\\n            path[path.length - 1] = targetStable;\\n        } else {\\n            path = new address[](2);\\n            path[0] = _token;\\n            path[1] = targetStable;\\n        }\\n\\n        uint256 oneUnit = 10 ** _decimals;\\n        _amountIn = _amountIn * 10 ** (_decimals - targetStableDecimals);\\n        if (router == 0xCAAaB0A72f781B92bA63Af27477aA46aB8F653E7) { // frax router\\n            try FraxRouter(router).getAmountsOutWithTwamm(oneUnit, path) returns (uint256[] memory amountsOut) {\\n                result = _amountIn * amountsOut[amountsOut.length - 1] / oneUnit;\\n            } catch {}\\n        } else if (tokenUniV3Fee[_token] != 0) {\\n            QuoterV2.QuoteExactInputSingleParams memory params = QuoterV2.QuoteExactInputSingleParams(_token, targetStable, oneUnit, tokenUniV3Fee[_token], 0);\\n            try QuoterV2(UNISWAP_V3_QUOTER).quoteExactInputSingle(params) returns (uint256 amountOut, uint160 sqrtPriceX96After, uint32 initializedTicksCrossed, uint256 gasEstimate) {\\n                result = _amountIn * amountOut / oneUnit;\\n            } catch {}\\n        } else {\\n            try IUniswapV2Router01(router).getAmountsOut(oneUnit, path) returns (uint256[] memory amountsOut) {\\n                result = _amountIn * amountsOut[amountsOut.length - 1] / oneUnit;\\n            } catch {}\\n        }\\n    }\\n\\n    /*** USER DETAILS ***/\\n\\n    function getUserBalancesDefault(\\n        IBooster _booster,\\n        address _user\\n    ) public returns(\\n        RewardContractData[] memory pools,\\n        RewardContractData memory wmxWom,\\n        RewardContractData memory locker\\n    ) {\\n        pools = getUserBalances(_booster, _user, allBoosterPoolIds(_booster));\\n        wmxWom = _getUserWmxWom(_booster, _booster.crvLockRewards(), _user);\\n        locker = _getUserLocker(_booster.cvxLocker(), _user);\\n    }\\n\\n    function allBoosterPoolIds(IBooster _booster) public view returns (uint256[] memory) {\\n        uint256 len = _booster.poolLength();\\n        uint256[] memory poolIds = new uint256[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            poolIds[i] = i;\\n        }\\n        return poolIds;\\n    }\\n\\n    function _getUserWmxWom(\\n        IBooster _booster,\\n        address _crvLockRewards,\\n        address _user\\n    ) internal returns (RewardContractData memory data) {\\n        RewardItem[] memory rewards = getUserPendingRewards(_booster.mintRatio(), _crvLockRewards, _user);\\n        uint256 wmxWomBalance = ERC20(_crvLockRewards).balanceOf(_user);\\n        (uint256 womBalance, ) = tokenToPoolToken(WMX_WOM_TOKEN, wmxWomBalance);\\n        data = RewardContractData(_crvLockRewards, uint128(wmxWomBalance), uint128(womBalance), uint128(0), uint8(18), rewards);\\n        data.usdBalance = uint128(_estimateInBUSD(WMX_WOM_TOKEN, data.underlyingBalance, uint8(18)));\\n    }\\n\\n    function _getUserLocker(\\n        address _locker,\\n        address _user\\n    ) internal returns (RewardContractData memory data) {\\n        RewardItem[] memory rewards = _getUserLockerPendingRewards(_locker, _user);\\n        (uint256 balance, , , ) = IWmxLocker(_locker).lockedBalances(_user);\\n        data = RewardContractData(_locker, uint128(balance), uint128(balance), uint128(0), uint8(18), rewards);\\n        data.usdBalance = uint128(_estimateInBUSD(WMX_TOKEN, data.underlyingBalance, uint8(18)));\\n    }\\n\\n    function getUserBalances(\\n        IBooster _booster,\\n        address _user,\\n        uint256[] memory _poolIds\\n    ) public returns(RewardContractData[] memory rewardContractData) {\\n        uint256 len = _poolIds.length;\\n        rewardContractData = new RewardContractData[](len);\\n        uint256 mintRatio = _booster.mintRatio();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IBooster.PoolInfo memory poolInfo = _booster.poolInfo(_poolIds[i]);\\n\\n            // 1. Earned rewards\\n            RewardItem[] memory rewardTokens = getUserPendingRewards(\\n                getPoolMintRatio(_booster, _poolIds[i], mintRatio),\\n                poolInfo.crvRewards,\\n                _user\\n            );\\n\\n            // 2. LP token balance\\n            uint256 lpTokenBalance = ERC20(poolInfo.crvRewards).balanceOf(_user);\\n\\n            // 3. Underlying balance\\n            address womPool = IWomAsset(poolInfo.lptoken).pool();\\n            address underlyingToken = IWomAsset(poolInfo.lptoken).underlyingToken();\\n\\n            rewardContractData[i] = RewardContractData(poolInfo.crvRewards, uint128(lpTokenBalance), uint128(0), uint128(0), getTokenDecimals(underlyingToken), rewardTokens);\\n\\n            try IWomPool(womPool).quotePotentialWithdraw(underlyingToken, lpTokenBalance) returns (uint256 underlyingBalance) {\\n                rewardContractData[i].underlyingBalance = uint128(underlyingBalance);\\n\\n                // 4. Usd outs\\n                if (isUsdStableToken[underlyingToken]) {\\n                    uint8 decimals = getTokenDecimals(underlyingToken);\\n                    underlyingBalance *= 10 ** (18 - decimals);\\n                    rewardContractData[i].usdBalance = uint128(underlyingBalance);\\n                } else {\\n                    rewardContractData[i].usdBalance = uint128(getLpUsdOut(womPool, underlyingToken, lpTokenBalance));\\n                }\\n            } catch {}\\n        }\\n    }\\n\\n    function getPoolMintRatio(IBooster _booster, uint256 pid, uint256 defaultMintRatio) public view returns (uint256 resMintRatio) {\\n        resMintRatio = defaultMintRatio;\\n        try _booster.customMintRatio(pid) returns (uint256 _customMintRatio) {\\n            resMintRatio = _customMintRatio == 0 ? defaultMintRatio : _customMintRatio;\\n        } catch {}\\n    }\\n\\n    function getTokenDecimals(address _token) public view returns (uint8) {\\n        (bool success, bytes memory data) = _token.staticcall(abi.encodeWithSelector(ERC20.decimals.selector));\\n\\n        if (!success) {\\n            return uint8(18);\\n        }\\n\\n        if (data.length == 1) {\\n            return uint8(data[0]);\\n        } else if (data.length == 32) {\\n            uint256 decimalsValue;\\n            assembly {\\n                decimalsValue := mload(add(data, 32))\\n            }\\n            return uint8(decimalsValue);\\n        } else {\\n            return uint8(18);\\n        }\\n    }\\n\\n    function getTokenUnderlying(address _token) public view returns (address) {\\n        (bool success, bytes memory data) = _token.staticcall(abi.encodeWithSelector(IWomAsset.underlyingToken.selector));\\n\\n        if (!success || data.length != 32) {\\n            return address(0);\\n        }\\n        address result;\\n        assembly {\\n            result := mload(add(data, 32))\\n        }\\n        return result;\\n    }\\n\\n    function getUserPendingRewards(uint256 _mintRatio, address _rewardsPool, address _user) public\\n        returns (RewardItem[] memory rewards)\\n    {\\n        (address[] memory rewardTokens, uint256[] memory earnedRewards) = IBaseRewardPool4626(_rewardsPool)\\n            .claimableRewards(_user);\\n\\n        uint256 len = rewardTokens.length;\\n        rewards = new RewardItem[](len + 1);\\n        uint256 earnedWom;\\n        uint256 womPeriodFinish;\\n        for (uint256 i = 0; i < earnedRewards.length; i++) {\\n            IBaseRewardPool4626.RewardState memory tokenRewards = IBaseRewardPool4626(_rewardsPool).tokenRewards(rewardTokens[i]);\\n            if (rewardTokens[i] == WOM_TOKEN) {\\n                earnedWom = earnedRewards[i];\\n                womPeriodFinish = tokenRewards.periodFinish;\\n            }\\n            uint8 decimals = getTokenDecimals(rewardTokens[i]);\\n            rewards[i] = RewardItem(\\n                rewardTokens[i],\\n                uint128(earnedRewards[i]),\\n                uint128(estimateInBUSDEther(rewardTokens[i], earnedRewards[i], decimals)),\\n                decimals,\\n                uint128(tokenRewards.periodFinish)\\n            );\\n        }\\n        if (earnedWom > 0) {\\n            uint256 earned = ITokenMinter(WMX_MINTER).getFactAmounMint(earnedWom);\\n            earned = _mintRatio > 0 ? earned * _mintRatio / 10000 : earned;\\n            rewards[len] = RewardItem(WMX_TOKEN, uint128(earned), uint128(_estimateInBUSD(WMX_TOKEN, earned, uint8(18))), uint8(18), uint128(womPeriodFinish));\\n        }\\n    }\\n\\n    function _getUserLockerPendingRewards(address _locker, address _user) internal\\n        returns (RewardItem[] memory rewards)\\n    {\\n        IWmxLocker.EarnedData[] memory userRewards = IWmxLocker(_locker).claimableRewards(_user);\\n\\n        rewards = new RewardItem[](userRewards.length);\\n        for (uint256 i = 0; i < userRewards.length; i++) {\\n            IWmxLockerExt.LockerRewardData memory tokenRewards = IWmxLockerExt(_locker).rewardData(userRewards[i].token);\\n            uint8 decimals = getTokenDecimals(userRewards[i].token);\\n            rewards[i] = RewardItem(\\n                userRewards[i].token,\\n                uint128(userRewards[i].amount),\\n                uint128(estimateInBUSDEther(userRewards[i].token, userRewards[i].amount, decimals)),\\n                decimals,\\n                uint128(tokenRewards.periodFinish)\\n            );\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_UNISWAP_ROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNISWAP_V3_ROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MAIN_STABLE_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WOM_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WMX_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WMX_MINTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH_TOKEN\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WMX_WOM_TOKEN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAIN_STABLE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAIN_STABLE_TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_QUOTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WMX_MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WMX_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WMX_WOM_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WOM_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"_booster\",\"type\":\"address\"}],\"name\":\"allBoosterPoolIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"estimateInBUSDEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterProxy\",\"type\":\"address\"},{\"internalType\":\"contract IBribeVoter\",\"name\":\"bribesVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allPoolsTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"veWomBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardTokenPrices\",\"type\":\"uint256[]\"}],\"name\":\"getBribeApys\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"apr\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPeriodFinish\",\"type\":\"bool\"}],\"internalType\":\"struct WombexLensUI.PoolValuesTokenApr[]\",\"name\":\"aprs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"aprItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aprTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterProxy\",\"type\":\"address\"},{\"internalType\":\"contract IBribeVoter\",\"name\":\"bribesVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allPoolsTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"veWomBalance\",\"type\":\"uint256\"}],\"name\":\"getBribeTotalApr128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"aprItem128\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"aprTotal128\",\"type\":\"uint128\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"apr\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPeriodFinish\",\"type\":\"bool\"}],\"internalType\":\"struct WombexLensUI.PoolValuesTokenApr[]\",\"name\":\"aprs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_womPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"getLpUsdOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultMintRatio\",\"type\":\"uint256\"}],\"name\":\"getPoolMintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resMintRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IBooster\",\"name\":\"booster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardTokenPrices\",\"type\":\"uint256[]\"}],\"internalType\":\"struct WombexLensUI.RewardPoolInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"getRewardPoolApys\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"apr\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPeriodFinish\",\"type\":\"bool\"}],\"internalType\":\"struct WombexLensUI.PoolValuesTokenApr[]\",\"name\":\"aprs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"aprTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aprItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wmxApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"internalType\":\"struct WombexLensUI.RewardPoolApyOutput[]\",\"name\":\"output\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBaseRewardPool4626\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wmxUsdPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardTokenPrices\",\"type\":\"uint256[]\"}],\"name\":\"getRewardPoolApys\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"rewardRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"apr\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isPeriodFinish\",\"type\":\"bool\"}],\"internalType\":\"struct WombexLensUI.PoolValuesTokenApr[]\",\"name\":\"aprs\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"aprTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aprItem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wmxApr\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBaseRewardPool4626\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wmxUsdPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintRatio\",\"type\":\"uint256\"}],\"name\":\"getRewardPoolTotalApr128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"aprItem128\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"aprTotal128\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_womPool\",\"type\":\"address\"}],\"name\":\"getTokenToWithdrawFromPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokensPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lpBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"periodFinish\",\"type\":\"uint128\"}],\"internalType\":\"struct WombexLensUI.RewardItem[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct WombexLensUI.RewardContractData[]\",\"name\":\"rewardContractData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserBalancesDefault\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lpBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"periodFinish\",\"type\":\"uint128\"}],\"internalType\":\"struct WombexLensUI.RewardItem[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct WombexLensUI.RewardContractData[]\",\"name\":\"pools\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lpBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"periodFinish\",\"type\":\"uint128\"}],\"internalType\":\"struct WombexLensUI.RewardItem[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct WombexLensUI.RewardContractData\",\"name\":\"wmxWom\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"lpBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"underlyingBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"periodFinish\",\"type\":\"uint128\"}],\"internalType\":\"struct WombexLensUI.RewardItem[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"internalType\":\"struct WombexLensUI.RewardContractData\",\"name\":\"locker\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardsPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"usdAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"periodFinish\",\"type\":\"uint128\"}],\"internalType\":\"struct WombexLensUI.RewardItem[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUsdStableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_womPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawalTokenToBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setPoolsForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setSwapTokenByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_throughTokens\",\"type\":\"address[]\"}],\"name\":\"setTokenSwapThroughToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint24\",\"name\":\"_tokenUniV3Fee\",\"type\":\"uint24\"}],\"name\":\"setTokenUniV3Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_targetStable\",\"type\":\"address\"}],\"name\":\"setTokensTargetStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setTokensToRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"}],\"name\":\"setUsdStableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTokenByPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSwapThroughTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapToTargetStable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tokenToPoolToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenUniV3Fee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WombexLensUI", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000061ffe014ba17989e743c5f6cb21bf9697530b21e000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c0b314a8c08637685fc3dafc477b92028c540cfb000000000000000000000000fa66478296841b636d72a3b31da9cdc77e902bf100000000000000000000000096ff1506f7ac06b95486e09529c7efb9dfef601e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eff2b1353cdcaa2c3279c2bfde72120c7ffb5e24", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}