{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/P33rEscrowV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title P33rEscrowV1\\n * @author Jasper Gabriel\\n * @dev P33R escrow contract; handles deposits, withdrawals, and refunds.\\n * @notice This version is intended as a MVP. Originally derived from OpenZeppelin.\\n *\\n * OpenZeppelin Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract P33rEscrowV1 is Ownable, ReentrancyGuard {\\n    // REVIEW: Set maximum limit (shouldn't exceed 100%) and check computations\\n    uint256 public immutable _fee;\\n\\n    // For future consideration: add _transactionsOf?\\n    mapping(bytes32 => Transaction) public _transactions;\\n\\n    // ERC20 fee balance\\n    mapping(address => uint256) public _feeBalance;\\n\\n    // REVIEW: \\\"packing structs\\\"\\n    struct Transaction {\\n        address depositor;\\n        address token;\\n        uint256 amount;\\n        uint256 timestamp;\\n        TransactionStatus status;\\n    }\\n\\n    enum TransactionStatus {\\n        PENDING,\\n        SUCCESS,\\n        FAILED,\\n        WITHDRAWN,\\n        REFUNDED\\n    }\\n\\n    event Deposited(\\n        bytes32 indexed referenceId,\\n        address indexed depositor,\\n        address token,\\n        uint256 amount,\\n        TransactionStatus status\\n    );\\n\\n    event Withdrawn(\\n        bytes32 indexed referenceId,\\n        address indexed recipient,\\n        address token,\\n        uint256 amount,\\n        TransactionStatus status\\n    );\\n\\n    event Refunded(\\n        bytes32 indexed referenceId,\\n        address indexed depositor,\\n        address token,\\n        uint256 amount,\\n        TransactionStatus status\\n    );\\n\\n    event WithdrawnFee(\\n        address indexed recipient,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    event TransactionStatusUpdated(\\n        bytes32 indexed referenceId,\\n        TransactionStatus status\\n    );\\n\\n    event Fallback(address indexed depositor, uint256 amount);\\n\\n    error InvalidAmount();\\n    error NotExpired();\\n\\n    /**\\n     * @dev Invalid transaction status. Current transaction status is `current`,\\n     * but required status to be `required`.\\n     *\\n     * @param current current status of transaction.\\n     * @param required required status of transaction.\\n     */\\n    error InvalidTransactionStatus(\\n        TransactionStatus current,\\n        TransactionStatus required\\n    );\\n\\n    constructor(uint256 fee) {\\n        _fee = fee;\\n    }\\n\\n    /**\\n     * @dev Deposits the sent token amount and creates a transaction.\\n     *\\n     * @param referenceId The reference id of the transaction.\\n     * @param depositor The source address of the funds.\\n     * @param token The address of specified ERC20 token.\\n     * @param amount The amount of specified ERC20 token in wei.\\n     *\\n     * Emits a {Deposited} event.\\n     */\\n    function deposit(\\n        bytes32 referenceId,\\n        address depositor,\\n        address token,\\n        uint256 amount\\n    ) external onlyOwner nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n\\n        _transactions[referenceId] = Transaction(\\n            depositor,\\n            token,\\n            amount,\\n            block.timestamp,\\n            TransactionStatus.PENDING\\n        );\\n\\n        IERC20(token).transferFrom(depositor, address(this), amount);\\n\\n        emit Deposited(\\n            referenceId,\\n            depositor,\\n            token,\\n            amount,\\n            TransactionStatus.PENDING\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraws transaction token amount for a recipient, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param referenceId The reference id of the transaction.\\n     * @param recipient The address whose funds will be withdrawn and transferred to.\\n     *\\n     * Emits a {Withdrawn} event.\\n     */\\n    function withdraw(\\n        bytes32 referenceId,\\n        address recipient\\n    ) external onlyOwner nonReentrant {\\n        Transaction storage transaction = _transactions[referenceId];\\n\\n        if (transaction.status != TransactionStatus.SUCCESS)\\n            revert InvalidTransactionStatus(\\n                transaction.status,\\n                TransactionStatus.SUCCESS\\n            );\\n\\n        // Withdraw depositor balance minus fees\\n        uint256 fee = (transaction.amount * _fee) / 100;\\n        uint256 withdrawnAmount = transaction.amount - fee;\\n        address token = transaction.token;\\n\\n        _feeBalance[token] += fee;\\n        transaction.amount = 0;\\n        updateTransactionStatus(referenceId, TransactionStatus.WITHDRAWN);\\n\\n        IERC20(token).transfer(recipient, withdrawnAmount);\\n\\n        emit Withdrawn(\\n            referenceId,\\n            recipient,\\n            token,\\n            withdrawnAmount,\\n            TransactionStatus.WITHDRAWN\\n        );\\n    }\\n\\n    /**\\n     * @dev Refund transaction token amount for depositor.\\n     *\\n     * @param referenceId The reference id of the transaction.\\n     *\\n     * Emits a {Refunded} event.\\n     */\\n    function refund(bytes32 referenceId) external onlyOwner nonReentrant {\\n        Transaction storage transaction = _transactions[referenceId];\\n\\n        if (transaction.status != TransactionStatus.FAILED)\\n            revert InvalidTransactionStatus(\\n                transaction.status,\\n                TransactionStatus.FAILED\\n            );\\n\\n        address depositor = transaction.depositor;\\n        address token = transaction.token;\\n        uint256 refundedAmount = transaction.amount;\\n\\n        transaction.amount = 0;\\n        updateTransactionStatus(referenceId, TransactionStatus.REFUNDED);\\n\\n        IERC20(token).transfer(depositor, refundedAmount);\\n\\n        emit Refunded(\\n            referenceId,\\n            depositor,\\n            token,\\n            refundedAmount,\\n            TransactionStatus.REFUNDED\\n        );\\n    }\\n\\n    /**\\n     * @dev Refund transaction token amount for depositor after 24 hrs.\\n     *\\n     * @param referenceId The reference id of the transaction.\\n     *\\n     * Emits a {Refunded} event.\\n     */\\n    function refundAfterExpiry(bytes32 referenceId) external nonReentrant {\\n        Transaction storage transaction = _transactions[referenceId];\\n\\n        // revert if transaction is not yet expired\\n        // expiry is 1 day after creation\\n        if (block.timestamp < transaction.timestamp + 1 days) {\\n            revert NotExpired();\\n        }\\n        // revert if transaction is not stuck at pending\\n        if (transaction.status != TransactionStatus.PENDING)\\n            revert InvalidTransactionStatus(\\n                transaction.status,\\n                TransactionStatus.PENDING\\n            );\\n\\n        address depositor = transaction.depositor;\\n        address token = transaction.token;\\n        uint256 refundedAmount = transaction.amount;\\n\\n        transaction.amount = 0;\\n        transaction.status = TransactionStatus.REFUNDED;\\n\\n        IERC20(token).transfer(depositor, refundedAmount);\\n\\n        emit Refunded(\\n            referenceId,\\n            depositor,\\n            token,\\n            refundedAmount,\\n            TransactionStatus.REFUNDED\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraws accumulated fee for a token.\\n     *\\n     * @param recipient The source address of the funds.\\n     * @param token The address of specified ERC20 token.\\n     *\\n     * Emits a {WithdrawnFee} event.\\n     */\\n    function withdrawFee(\\n        address recipient,\\n        address token\\n    ) external onlyOwner nonReentrant {\\n        uint256 amount = _feeBalance[token];\\n\\n        _feeBalance[token] = 0;\\n\\n        IERC20(token).transfer(recipient, amount);\\n\\n        emit WithdrawnFee(recipient, token, amount);\\n    }\\n\\n    /**\\n     * @dev Updates status of transaction.\\n     *\\n     * @param referenceId The reference id of the transaction.\\n     * @param status The status of the transaction.\\n     *\\n     * Emits a {TransactionStatusUpdated} event.\\n     */\\n    function updateTransactionStatus(\\n        bytes32 referenceId,\\n        TransactionStatus status\\n    ) public onlyOwner {\\n        _transactions[referenceId].status = status;\\n\\n        emit TransactionStatusUpdated(referenceId, status);\\n    }\\n\\n    // REVIEW: consider fallback functions and ways to rescue unintended ERC20 transfers...\\n}\\n\"\r\n    },\r\n    \"interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/token/ERC20/IERC20.sol\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"required\",\"type\":\"uint8\"}],\"name\":\"InvalidTransactionStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"TransactionStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"}],\"name\":\"refundAfterExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"internalType\":\"enum P33rEscrowV1.TransactionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"updateTransactionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"referenceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "P33rEscrowV1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}