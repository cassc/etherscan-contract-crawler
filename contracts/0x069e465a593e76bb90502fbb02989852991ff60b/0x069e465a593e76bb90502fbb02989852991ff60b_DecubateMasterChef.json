{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/DecubateMasterChef.sol\": {\r\n      \"content\": \"//** Decubate Staking Contract */\\n//** Author : Aceson */\\n\\n//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"./libraries/InterestHelper.sol\\\";\\nimport \\\"./interfaces/IDecubateMasterChef.sol\\\";\\n\\ncontract DecubateMasterChef is\\n  Initializable,\\n  OwnableUpgradeable,\\n  InterestHelper,\\n  IDecubateMasterChef\\n{\\n  using SafeMathUpgradeable for uint256;\\n  using SafeMathUpgradeable for uint16;\\n\\n  /**\\n   *\\n   * @dev PoolInfo reflects the info of each pools\\n   *\\n   * If APY is 12%, we provide 120 as input. lockPeriodInDays\\n   * would be the number of days which the claim is locked.\\n   * So if we want to lock claim for 1 month, lockPeriodInDays would be 30.\\n   *\\n   * @param {apy} Percentage of yield produced by the pool\\n   * @param {nft} Multiplier for apy if user holds nft\\n   * @param {lockPeriodInDays} Amount of time claim will be locked\\n   * @param {totalDeposit} Total deposit in the pool\\n   * @param {startDate} starting time of pool\\n   * @param {endDate} ending time of pool in unix timestamp\\n   * @param {minContrib} Minimum amount to be staked\\n   * @param {maxContrib} Maximum amount that can be staked\\n   * @param {hardCap} Maximum amount a pool can hold\\n   * @param {token} Token used as deposit/reward\\n   *\\n   */\\n\\n  struct Pool {\\n    uint256 apy;\\n    uint256 lockPeriodInDays;\\n    uint256 totalDeposit;\\n    uint256 startDate;\\n    uint256 endDate;\\n    uint256 hardCap;\\n    address token;\\n  }\\n\\n  address public compounderContract; //Auto compounder\\n  address private feeAddress; //Address which receives fee\\n  uint8 private feePercent; //Percentage of fee deducted (/1000)\\n\\n  mapping(uint256 => mapping(address => User)) public users;\\n  mapping(address => uint256) public maxTransferAmount;\\n\\n  Pool[] public poolInfo;\\n  NFTMultiplier[] public nftInfo;\\n\\n  event Stake(address indexed addr, uint256 amount, uint256 time);\\n  event Claim(address indexed addr, uint256 amount, uint256 time);\\n  event Reinvest(address indexed addr, uint256 amount, uint256 time);\\n  event Unstake(address indexed addr, uint256 amount, uint256 time);\\n\\n  function initialize() external initializer {\\n    __Ownable_init();\\n    feeAddress = msg.sender;\\n    feePercent = 5;\\n  }\\n\\n  /**\\n   *\\n   * @dev update fee values\\n   *\\n   */\\n  function updateFeeValues(uint8 _feePercent, address _feeWallet) external onlyOwner {\\n    feePercent = _feePercent;\\n    feeAddress = _feeWallet;\\n  }\\n\\n  /**\\n   *\\n   * @dev update compounder contract\\n   *\\n   */\\n  function updateCompounder(address _compounder) external override onlyOwner {\\n    compounderContract = _compounder;\\n  }\\n\\n  /**\\n   *\\n   * @dev Allow owner to transfer token from contract\\n   *\\n   * @param {address} contract address of corresponding token\\n   * @param {uint256} amount of token to be transferred\\n   *\\n   * This is a generalized function which can be used to transfer any accidentally\\n   * sent (including DCB) out of the contract to wowner\\n   *\\n   */\\n  function transferToken(address _addr, uint256 _amount) external onlyOwner returns (bool) {\\n    IERC20Upgradeable token = IERC20Upgradeable(_addr);\\n    bool success = token.transfer(address(owner()), _amount);\\n    return success;\\n  }\\n\\n  /**\\n   *\\n   * @dev add new period to the pool, only available for owner\\n   *\\n   */\\n  function add(\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    uint256 _hardCap,\\n    address _token\\n  ) external override onlyOwner {\\n    poolInfo.push(\\n      Pool({\\n        apy: _apy,\\n        lockPeriodInDays: _lockPeriodInDays,\\n        totalDeposit: 0,\\n        startDate: block.timestamp,\\n        endDate: _endDate,\\n        hardCap: _hardCap,\\n        token: _token\\n      })\\n    );\\n\\n    //Init nft struct with dummy data\\n    nftInfo.push(\\n      NFTMultiplier({\\n        active: false,\\n        name: \\\"\\\",\\n        contractAdd: address(0),\\n        startIdx: 0,\\n        endIdx: 0,\\n        multiplier: 10\\n      })\\n    );\\n\\n    maxTransferAmount[_token] = ~uint256(0);\\n    _stake(poolLength() - 1, compounderContract, 0, false); //Mock deposit for compounder\\n  }\\n\\n  /**\\n   *\\n   * @dev update the given pool's Info\\n   *\\n   */\\n  function set(\\n    uint256 _pid,\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    uint256 _hardCap,\\n    uint256 _maxTransfer,\\n    address _token\\n  ) external override onlyOwner {\\n    require(_pid < poolLength(), \\\"Invalid pool Id\\\");\\n\\n    poolInfo[_pid].apy = _apy;\\n    poolInfo[_pid].lockPeriodInDays = _lockPeriodInDays;\\n    poolInfo[_pid].endDate = _endDate;\\n    poolInfo[_pid].hardCap = _hardCap;\\n    poolInfo[_pid].token = _token;\\n\\n    maxTransferAmount[_token] = _maxTransfer;\\n  }\\n\\n  /**\\n   *\\n   * @dev update the given pool's nft info\\n   *\\n   */\\n  function setNFT(\\n    uint256 _pid,\\n    string calldata _name,\\n    address _contractAdd,\\n    bool _isUsed,\\n    uint16 _multiplier,\\n    uint16 _startIdx,\\n    uint16 _endIdx\\n  ) external override onlyOwner {\\n    NFTMultiplier storage nft = nftInfo[_pid];\\n\\n    nft.name = _name;\\n    nft.contractAdd = _contractAdd;\\n    nft.active = _isUsed;\\n    nft.multiplier = _multiplier;\\n    nft.startIdx = _startIdx;\\n    nft.endIdx = _endIdx;\\n  }\\n\\n  /**\\n   *\\n   * @dev depsoit tokens to staking for TOKEN allocation\\n   *\\n   * @param {_pid} Id of the pool\\n   * @param {_amount} Amount to be staked\\n   *\\n   * @return {bool} Status of stake\\n   *\\n   */\\n  function stake(uint256 _pid, uint256 _amount) external override returns (bool) {\\n    Pool memory pool = poolInfo[_pid];\\n    IERC20Upgradeable token = IERC20Upgradeable(pool.token);\\n\\n    require(\\n      token.allowance(msg.sender, address(this)) >= _amount,\\n      \\\"Decubate : Set allowance first!\\\"\\n    );\\n\\n    bool success = token.transferFrom(msg.sender, address(this), _amount);\\n    require(success, \\\"Decubate : Transfer failed\\\");\\n\\n    reinvest(_pid);\\n\\n    _stake(_pid, msg.sender, _amount, false);\\n\\n    return success;\\n  }\\n\\n  /**\\n   *\\n   * @dev Handle NFT boost of users from compounder\\n   *\\n   * @param {_pid} id of the pool\\n   * @param {_user} user eligible for NFT boost\\n   * @param {_rewardAmount} Amount of rewards generated\\n   *\\n   * @return {uint256} Status of stake\\n   *\\n   */\\n  function handleNFTMultiplier(\\n    uint256 _pid,\\n    address _user,\\n    uint256 _rewardAmount\\n  ) external override returns (uint256) {\\n    require(msg.sender == compounderContract, \\\"Only for compounder\\\");\\n    uint16 multi = calcMultiplier(_pid, _user);\\n\\n    uint256 multipliedAmount = _rewardAmount.mul(multi).div(10).sub(_rewardAmount);\\n\\n    if (multipliedAmount > 0) {\\n      safeTOKENTransfer(poolInfo[_pid].token, _user, multipliedAmount);\\n    }\\n\\n    return multipliedAmount;\\n  }\\n\\n  /**\\n   *\\n   * @dev claim accumulated TOKEN reward for a single pool\\n   *\\n   * @param {_pid} pool identifier\\n   *\\n   * @return {bool} status of claim\\n   */\\n\\n  function claim(uint256 _pid) public override returns (bool) {\\n    require(canClaim(_pid, msg.sender), \\\"Reward still in locked state\\\");\\n\\n    _claim(_pid, msg.sender);\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev Reinvest accumulated TOKEN reward for a single pool\\n   *\\n   * @param {_pid} pool identifier\\n   *\\n   * @return {bool} status of reinvest\\n   */\\n\\n  function reinvest(uint256 _pid) public override returns (bool) {\\n    uint256 amount = payout(_pid, msg.sender);\\n    if (amount > 0) {\\n      _stake(_pid, msg.sender, amount, true);\\n      emit Reinvest(msg.sender, amount, block.timestamp);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev Reinvest accumulated TOKEN reward for all pools\\n   *\\n   * @return {bool} status of reinvest\\n   */\\n\\n  function reinvestAll() public override returns (bool) {\\n    uint256 len = poolInfo.length;\\n    for (uint256 pid = 0; pid < len; ++pid) {\\n      reinvest(pid);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev claim accumulated TOKEN reward from all pools\\n   *\\n   * Beware of gas fee!\\n   *\\n   */\\n  function claimAll() public override returns (bool) {\\n    uint256 len = poolInfo.length;\\n\\n    for (uint256 pid = 0; pid < len; ++pid) {\\n      if (canClaim(pid, msg.sender)) {\\n        _claim(pid, msg.sender);\\n      }\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev withdraw tokens from Staking\\n   *\\n   * @param {_pid} id of the pool\\n   * @param {_amount} amount to be unstaked\\n   *\\n   * @return {bool} Status of stake\\n   *\\n   */\\n  function unStake(uint256 _pid, uint256 _amount) public override returns (bool) {\\n    User storage user = users[_pid][msg.sender];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    require(user.totalInvested >= _amount, \\\"You don't have enough funds\\\");\\n\\n    require(canClaim(_pid, msg.sender), \\\"Stake still in locked state\\\");\\n\\n    _claim(_pid, msg.sender);\\n\\n    safeTOKENTransfer(pool.token, msg.sender, _amount);\\n\\n    pool.totalDeposit = pool.totalDeposit.sub(_amount);\\n    user.totalInvested = user.totalInvested.sub(_amount);\\n\\n    emit Unstake(msg.sender, _amount, block.timestamp);\\n\\n    return true;\\n  }\\n\\n  /**\\n   *\\n   * @dev check whether user can claim or not\\n   *\\n   * @param {_pid}  id of the pool\\n   * @param {_addr} address of the user\\n   *\\n   * @return {bool} Status of claim\\n   *\\n   */\\n\\n  function canClaim(uint256 _pid, address _addr) public view override returns (bool) {\\n    User storage user = users[_pid][_addr];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    if (msg.sender == compounderContract) {\\n      return true;\\n    }\\n\\n    return (block.timestamp >= user.depositTime.add(pool.lockPeriodInDays.mul(1 days)));\\n  }\\n\\n  /**\\n   *\\n   * @dev check whether user have NFT multiplier\\n   *\\n   * @param _pid  id of the pool\\n   * @param _addr address of the user\\n   *\\n   * @return multi Value of multiplier\\n   *\\n   */\\n\\n  function calcMultiplier(uint256 _pid, address _addr) public view override returns (uint16 multi) {\\n    NFTMultiplier memory nft = nftInfo[_pid];\\n\\n    if (nft.active && ownsCorrectNFT(_addr, _pid) && _addr != compounderContract) {\\n      multi = nft.multiplier;\\n    } else {\\n      multi = 10;\\n    }\\n  }\\n\\n  function ownsCorrectNFT(address _addr, uint256 _pid) public view returns (bool) {\\n    NFTMultiplier memory nft = nftInfo[_pid];\\n\\n    uint256[] memory ids = walletOfOwner(nft.contractAdd, _addr);\\n    for (uint256 i = 0; i < ids.length; i++) {\\n      if (ids[i] >= nft.startIdx && ids[i] <= nft.endIdx) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function payout(uint256 _pid, address _addr) public view override returns (uint256 value) {\\n    User storage user = users[_pid][_addr];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    uint256 from = user.lastPayout > user.depositTime ? user.lastPayout : user.depositTime;\\n    uint256 to = block.timestamp > pool.endDate ? pool.endDate : block.timestamp;\\n\\n    uint256 multiplier = calcMultiplier(_pid, _addr);\\n\\n    if (from < to) {\\n      uint256 rayValue = yearlyRateToRay((pool.apy * 10 ** 18) / 1000);\\n      value = (accrueInterest(user.totalInvested, rayValue, to.sub(from))).sub(user.totalInvested);\\n    }\\n\\n    value = value.mul(multiplier).div(10);\\n\\n    return value;\\n  }\\n\\n  /**\\n   *\\n   * @dev get length of the pools\\n   *\\n   * @return {uint256} length of the pools\\n   *\\n   */\\n  function poolLength() public view override returns (uint256) {\\n    return poolInfo.length;\\n  }\\n\\n  /**\\n   *\\n   * @dev get info of all pools\\n   *\\n   * @return {PoolInfo[]} Pool info struct\\n   *\\n   */\\n  function getPools() public view returns (Pool[] memory) {\\n    return poolInfo;\\n  }\\n\\n  /**\\n   *\\n   * @dev safe TOKEN transfer function, require to have enough TOKEN to transfer\\n   *\\n   */\\n  function safeTOKENTransfer(address _token, address _to, uint256 _amount) internal {\\n    IERC20Upgradeable token = IERC20Upgradeable(_token);\\n    uint256 bal = token.balanceOf(address(this));\\n\\n    require(bal >= _amount, \\\"Not enough funds in treasury\\\");\\n\\n    uint256 maxTx = maxTransferAmount[_token];\\n    uint256 amount = _amount;\\n\\n    while (amount > maxTx) {\\n      token.transfer(_to, maxTx);\\n      amount = amount - maxTx;\\n    }\\n\\n    if (amount > 0) {\\n      token.transfer(_to, amount);\\n    }\\n  }\\n\\n  function _claim(uint256 _pid, address _addr) internal {\\n    User storage user = users[_pid][_addr];\\n    Pool memory pool = poolInfo[_pid];\\n\\n    uint256 amount = payout(_pid, _addr);\\n\\n    if (amount > 0) {\\n      user.totalWithdrawn = user.totalWithdrawn.add(amount);\\n\\n      uint256 feeAmount = amount.mul(feePercent).div(1000);\\n\\n      safeTOKENTransfer(pool.token, feeAddress, feeAmount);\\n\\n      amount = amount.sub(feeAmount);\\n\\n      safeTOKENTransfer(pool.token, _addr, amount);\\n\\n      user.lastPayout = block.timestamp;\\n\\n      user.totalClaimed = user.totalClaimed.add(amount);\\n    }\\n\\n    emit Claim(_addr, amount, block.timestamp);\\n  }\\n\\n  function _stake(uint256 _pid, address _sender, uint256 _amount, bool _isReinvest) internal {\\n    User storage user = users[_pid][_sender];\\n    Pool storage pool = poolInfo[_pid];\\n\\n    if (!_isReinvest || _sender != compounderContract) {\\n      user.depositTime = block.timestamp;\\n      if (_sender != compounderContract) {\\n        require(pool.totalDeposit.add(_amount) <= pool.hardCap, \\\"Pool is full\\\");\\n        uint256 stopDepo = pool.endDate.sub(pool.lockPeriodInDays.mul(1 days));\\n        require(block.timestamp <= stopDepo, \\\"Staking is disabled for this pool\\\");\\n      }\\n    }\\n\\n    user.totalInvested = user.totalInvested.add(_amount);\\n    pool.totalDeposit = pool.totalDeposit.add(_amount);\\n    user.lastPayout = block.timestamp;\\n\\n    emit Stake(_sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   *\\n   *\\n   * @dev Fetching nfts owned by a user\\n   *\\n   */\\n  function walletOfOwner(\\n    address _contract,\\n    address _owner\\n  ) internal view returns (uint256[] memory) {\\n    IERC721EnumerableUpgradeable nft = IERC721EnumerableUpgradeable(_contract);\\n    uint256 tokenCount = nft.balanceOf(_owner);\\n\\n    uint256[] memory tokensId = new uint256[](tokenCount);\\n    for (uint256 i; i < tokenCount; i++) {\\n      tokensId[i] = nft.tokenOfOwnerByIndex(_owner, i);\\n    }\\n    return tokensId;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/libraries/InterestHelper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ncontract DSMath {\\n  uint256 internal constant WAD = 10 ** 18;\\n  uint256 internal constant RAY = 10 ** 27;\\n\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n  }\\n\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n  }\\n\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n  }\\n\\n  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n    return x <= y ? x : y;\\n  }\\n\\n  function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n    return x >= y ? x : y;\\n  }\\n\\n  function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n  }\\n\\n  // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n  // and calculates x^n with x as fixed-point and n as regular unsigned.\\n  //\\n  // It's O(log n), instead of O(n) for naive repeated multiplication.\\n  //\\n  // These facts are why it works:\\n  //\\n  //  If n is even, then x^n = (x^2)^(n/2).\\n  //  If n is odd,  then x^n = x * x^(n-1),\\n  //   and applying the equation for even x gives\\n  //    x^n = x * (x^2)^((n-1) / 2).\\n  //\\n  //  Also, EVM division is flooring and\\n  //    floor[(n-1) / 2] = floor[n / 2].\\n  //\\n  function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rmul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rmul(z, x);\\n      }\\n    }\\n  }\\n}\\n\\n// Using DSMath from DappHub https://github.com/dapphub/ds-math\\n// More info on DSMath and fixed point arithmetic in Solidity:\\n// https://medium.com/dapphub/introducing-ds-math-an-innovative-safe-math-library-d58bc88313da\\n\\n/**\\n * @title Interest\\n * @author Nick Ward\\n * @dev Uses DSMath's wad and ray math to implement (approximately)\\n * continuously compounding interest by calculating discretely compounded\\n * interest compounded every second.\\n */\\ncontract InterestHelper is DSMath {\\n  /**\\n   * @dev Uses an approximation of continuously compounded interest\\n   * (discretely compounded every second)\\n   * @param _principal The principal to calculate the interest on.\\n   *   Accepted in wei.\\n   * @param _rate The interest rate. Accepted as a ray representing\\n   *   1 + the effective interest rate per second, compounded every\\n   *   second. As an example:\\n   *   I want to accrue interest at a nominal rate (i) of 5.0% per year\\n   *   compounded continuously. (Effective Annual Rate of 5.127%).\\n   *   This is approximately equal to 5.0% per year compounded every\\n   *   second (to 8 decimal places, if max precision is essential,\\n   *   calculate nominal interest per year compounded every second from\\n   *   your desired effective annual rate). Effective Rate Per Second =\\n   *   Nominal Rate Per Second compounded every second = Nominal Rate\\n   *   Per Year compounded every second * conversion factor from years\\n   *   to seconds\\n   *   Effective Rate Per Second = 0.05 / (365 days/yr * 86400 sec/day)\\n   *                             = 1.5854895991882 * 10 ** -9\\n   *   The value we want to send this function is\\n   *   1 * 10 ** 27 + Effective Rate Per Second * 10 ** 27\\n   *   = 1000000001585489599188229325\\n   *   This will return 5.1271096334354555 Dai on a 100 Dai principal\\n   *   over the course of one year (31536000 seconds)\\n   * @param _age The time period over which to accrue interest. Accepted\\n   *   in seconds.\\n   * @return The new principal as a wad. Equal to original principal +\\n   *   interest accrued\\n   */\\n  function accrueInterest(\\n    uint256 _principal,\\n    uint256 _rate,\\n    uint256 _age\\n  ) public pure returns (uint256) {\\n    return rmul(_principal, rpow(_rate, _age));\\n  }\\n\\n  /**\\n   * @dev Takes in the desired nominal interest rate per year, compounded\\n   *   every second (this is approximately equal to nominal interest rate\\n   *   per year compounded continuously). Returns the ray value expected\\n   *   by the accrueInterest function\\n   * @param _rateWad A wad of the desired nominal interest rate per year,\\n   *   compounded continuously. Converting from ether to wei will effectively\\n   *   convert from a decimal value to a wad. So 5% rate = 0.05\\n   *   should be input as yearlyRateToRay( 0.05 ether )\\n   * @return 1 * 10 ** 27 + Effective Interest Rate Per Second * 10 ** 27\\n   */\\n  function yearlyRateToRay(uint256 _rateWad) public pure returns (uint256) {\\n    return add(wadToRay(1 ether), rdiv(wadToRay(_rateWad), weiToRay(365 * 86400)));\\n  }\\n\\n  //// Fixed point scale factors\\n  // wei -> the base unit\\n  // wad -> wei * 10 ** 18. 1 ether = 1 wad, so 0.5 ether can be used\\n  //      to represent a decimal wad of 0.5\\n  // ray -> wei * 10 ** 27\\n\\n  // Go from wad (10**18) to ray (10**27)\\n  function wadToRay(uint256 _wad) internal pure returns (uint256) {\\n    return mul(_wad, 10 ** 9);\\n  }\\n\\n  // Go from wei to ray (10**27)\\n  function weiToRay(uint256 _wei) internal pure returns (uint256) {\\n    return mul(_wei, 10 ** 27);\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IDecubateMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface IDecubateMasterChef {\\n  struct NFTMultiplier {\\n    bool active;\\n    string name;\\n    address contractAdd;\\n    uint16 multiplier;\\n    uint16 startIdx;\\n    uint16 endIdx;\\n  }\\n\\n  /**\\n   *\\n   * @dev User reflects the info of each user\\n   *\\n   *\\n   * @param {totalInvested} how many tokens the user staked\\n   * @param {totalWithdrawn} how many tokens withdrawn so far\\n   * @param {lastPayout} time at which last claim was done\\n   * @param {depositTime} Time of last deposit\\n   * @param {totalClaimed} Total claimed by the user\\n   *\\n   */\\n  struct User {\\n    uint256 totalInvested;\\n    uint256 totalWithdrawn;\\n    uint256 lastPayout;\\n    uint256 depositTime;\\n    uint256 totalClaimed;\\n  }\\n\\n  function add(\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    uint256 _hardCap,\\n    address token\\n  ) external;\\n\\n  function set(\\n    uint256 _pid,\\n    uint256 _apy,\\n    uint256 _lockPeriodInDays,\\n    uint256 _endDate,\\n    uint256 _hardCap,\\n    uint256 _maxTransfer,\\n    address token\\n  ) external;\\n\\n  function setNFT(\\n    uint256 _pid,\\n    string calldata _name,\\n    address _contractAdd,\\n    bool _isUsed,\\n    uint16 _multiplier,\\n    uint16 _startIdx,\\n    uint16 _endIdx\\n  ) external;\\n\\n  function stake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n  function claim(uint256 _pid) external returns (bool);\\n\\n  function reinvest(uint256 _pid) external returns (bool);\\n\\n  function reinvestAll() external returns (bool);\\n\\n  function claimAll() external returns (bool);\\n\\n  function handleNFTMultiplier(\\n    uint256 _pid,\\n    address _user,\\n    uint256 _rewardAmount\\n  ) external returns (uint256);\\n\\n  function unStake(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n  function updateCompounder(address _compounder) external;\\n\\n  function canClaim(uint256 _pid, address _addr) external view returns (bool);\\n\\n  function calcMultiplier(uint256 _pid, address _addr) external view returns (uint16);\\n\\n  function payout(uint256 _pid, address _addr) external view returns (uint256 value);\\n\\n  function poolInfo(\\n    uint256\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 apy,\\n      uint256 lockPeriodInDays,\\n      uint256 totalDeposit,\\n      uint256 startDate,\\n      uint256 endDate,\\n      uint256 hardCap,\\n      address token\\n    );\\n\\n  function users(\\n    uint256,\\n    address\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalInvested,\\n      uint256 totalWithdrawn,\\n      uint256 lastPayout,\\n      uint256 depositTime,\\n      uint256 totalClaimed\\n    );\\n\\n  function poolLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"}],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"calcMultiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"multi\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compounderContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct DecubateMasterChef.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"}],\"name\":\"handleNFTMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAdd\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"endIdx\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"ownsCorrectNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransfer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_contractAdd\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isUsed\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"_multiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_startIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_endIdx\",\"type\":\"uint16\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_compounder\",\"type\":\"address\"}],\"name\":\"updateCompounder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feePercent\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"updateFeeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateWad\",\"type\":\"uint256\"}],\"name\":\"yearlyRateToRay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "DecubateMasterChef", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}