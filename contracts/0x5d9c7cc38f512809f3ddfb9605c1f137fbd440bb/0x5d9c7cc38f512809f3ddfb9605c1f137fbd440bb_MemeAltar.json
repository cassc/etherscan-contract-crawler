{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/MemeAltar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Bloodline} from \\\"./Bloodline.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ILiquidityOwner.sol\\\";\\nimport \\\"./interfaces/IRewardLocker.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// Attempt to access admin functionality from unauthorized address.\\nerror NotAdmin();\\n/// LiquidityOwner initialization is one time action.\\nerror LiquidityOwnerAlreadyInitialized();\\n/// Provided arrays must be the same length.\\nerror ArraysHaveDifferentLength();\\n/// Meme cannot be removed, because it is not in a list.\\nerror MemeIsNotInAList();\\n/// Uniswap V2 pool address cannot be switched for a not set meme.\\nerror SwitchRequiresMemeBeSet();\\n/// Token is not accepted to be a sacrificable.\\nerror TokenIsNotInSacrificableList();\\n/// Amount provided to be sacrificed equal 0.\\nerror NothingToSacrifice();\\n/// Unfortunately, the uniswap pool `uniV2Pool` is out of liquidity.\\nerror UniV2PoolWithoutLiquidity(address uniV2Pool);\\n/// Attempt to sell sacrificed meme resulted in receiving less ETH than was initially expected.\\nerror InsufficientOutputAmount();\\n/// Reward did not registered.\\nerror RewardRegistrationFailed();\\n/// Cycle completed did not registered.\\nerror CycleCompletedRegistrationFailed();\\n/// Next cycle did not registered.\\nerror NextCycleRegistrationFailed();\\n/// Liquidity Owner trigger call failed.\\nerror LiquidityOwnerTriggerFailed();\\n/// Swaps entirely within 0-liquidity regions are not supported\\nerror SwapWithinZeroLiquidity();\\n/// Attempt to call uniswap v3 swap callback.\\nerror SwapCallbackCanBeCalledOnlyByPool();\\n/// Attempt to buy BDL resulted in receiving less BDL than was initially expected.\\nerror TooLittleReceived();\\n/// Attempt to buy BDL resulted in requesting different WETH amount than was initially expected.\\nerror NotExactInput();\\n/// Goal cannot be set to zero value, breaks invariants.\\nerror GoalCannotBeZero();\\n\\n/**\\n * @title MemeAltar - Place, users come to sacrifice their meme tokens to and get\\n *                    rewarded. Admin is able to add/remove meme tokens; adjust\\n *                    default goal, cycle duration limit, reward defining points.\\n */\\ncontract MemeAltar {\\n    struct SacrificedMeme {\\n        uint112 achieved;\\n        bool cycleParticipant;\\n    }\\n\\n    struct Cycle {\\n        uint112 goal;\\n        /// @notice total amount of ETH used to buy BDL from Uniswap v3 pool to recover the price in a cycle.\\n        uint112 ethUsedToBuy;\\n        uint32 expirationTimestamp;\\n        mapping(address => SacrificedMeme) sacrificedMemes;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n    event NewAdmin(address indexed newAdmin);\\n\\n    event MemeAddedToSacrificableList(\\n        uint256 indexed cycleNumber, address indexed meme, address indexed memeMarket\\n    );\\n\\n    event MemeRemovedFromSacrificableList(uint256 indexed cycleNumber, address indexed meme);\\n\\n    event NewDefaultCycleGoal(uint256 indexed newDefaultGoal);\\n\\n    event NewCycleDurationLimit(uint256 indexed newDurationLimit);\\n\\n    event NewBM(uint64 indexed b, uint64 indexed m);\\n\\n    event MemeSacrificed(\\n        address indexed sacrificer,\\n        address indexed sacrificedToken,\\n        uint256 indexed sacrificedAmount\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev The minimum sqrt price value. Equivalent to MIN_TICK = -887200.\\n    uint160 internal constant MIN_SQRT_RATIO = 4_310_618_293;\\n    /// @dev The maximum sqrt price value. Equivalent to MAX_TICK = 887200.\\n    uint160 internal constant MAX_SQRT_RATIO =\\n        1_456_195_216_270_955_103_206_513_029_158_776_779_468_408_838_535;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        MEME ALTAR STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n    /// @notice Contract WETH9 - ERC20 Wrapped Ether.\\n    address public weth;\\n    /// @notice ERC20 which is a reward token.\\n    Bloodline public bloodline;\\n    /// @notice Uniswap V3 pool: WETH and Bloodline.\\n    address public uniV3Pool;\\n    /// @notice Contract that stores the rewards and is triggered when cycle is completed.\\n    address public rewardLocker;\\n    /// @notice Contract that stores weth (weth is transfered to) and provides liquidity.\\n    address public liquidityOwner;\\n    /// @notice Address, which is allowed to call onlyAdmin functions.\\n    address public admin;\\n\\n    /// @notice The number of the current cycle.\\n    uint112 public currentCycle = 1;\\n    /// @notice The value used as a cycle goal, if no cycle goal was set.\\n    uint112 public defaultGoal;\\n    /// @notice Cycle completes without a winner after this duration limit is expired.\\n    uint32 public cycleDurationLimit = 7 days;\\n    /// @notice Stores the data related to the cycles.\\n    /// @dev cycleNumber -> Cycle struct\\n    mapping(uint112 => Cycle) public cycles;\\n    /// @notice Stores uniswap v2 pair (WETH-Meme) addresses.\\n    /// @dev meme -> uniV2 pair\\n    mapping(address => address) public memesUniV2Pools;\\n    /// @notice Stores a list of meme addresses, which are sacrificable in a next cycle.\\n    address[] public memeList;\\n    /// @notice y-intercept of linear functions, which defines the reward factor.\\n    uint64 public b = 95;\\n    /// @notice Slope of linear functions, which defines the reward factor.\\n    uint64 public m = 30;\\n    /// @notice a ratio between BLOOD token and ETH, used as a base to calculate reward.\\n    uint128 public issuancePrice = 32_000;\\n\\n    modifier onlyAdmin() {\\n        if (msg.sender != admin) {\\n            revert NotAdmin();\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Constructor sets storage values, initialize rewardLocker, registers first cycle.\\n     * @param sacrificableList an array of ERC20 meme addresses, which are sacrificable.\\n     * @param uniV2pools an array of uniswap v2 pair (WETH-Meme) addresses related to list above.\\n     * @param _weth WETH9 (ERC20 Wrapped Ether) contract address.\\n     * @param _admin address, which is allowed to adjust memeList, defaultGoal, cycle duration limit, BM.\\n     * @param _rewardLocker RewardLocker contract address.\\n     * @param _bloodline ERC20 reward token address.\\n     * @param _devLiquidityHolder Receiver of minted 3% BLOOD developer fee.\\n     * @param _defaultGoal a cycle goal competitors have to achieve, denominated in ETH.\\n     */\\n    constructor(\\n        address[] memory sacrificableList,\\n        address[] memory uniV2pools,\\n        address _weth,\\n        address _admin,\\n        address _rewardLocker,\\n        address _bloodline,\\n        address _devLiquidityHolder,\\n        uint112 _defaultGoal\\n    ) {\\n        if (sacrificableList.length != uniV2pools.length) {\\n            revert ArraysHaveDifferentLength();\\n        }\\n\\n        weth = _weth;\\n        defaultGoal = _defaultGoal;\\n        admin = _admin;\\n        rewardLocker = _rewardLocker;\\n        memeList = sacrificableList;\\n        bloodline = Bloodline(_bloodline);\\n        uniV3Pool = bloodline.uniV3Pool();\\n\\n        Cycle storage cycle = cycles[1];\\n        cycle.expirationTimestamp = uint32(block.timestamp) + 7 days;\\n        cycle.goal = _defaultGoal;\\n\\n        for (uint256 i = 0; i < sacrificableList.length; i++) {\\n            memesUniV2Pools[sacrificableList[i]] = uniV2pools[i];\\n            SacrificedMeme storage meme = cycle.sacrificedMemes[sacrificableList[i]];\\n            meme.cycleParticipant = true;\\n            emit MemeAddedToSacrificableList(currentCycle, sacrificableList[i], uniV2pools[i]);\\n        }\\n\\n        IRewardLocker(_rewardLocker).init(address(this), _bloodline, _devLiquidityHolder);\\n        IRewardLocker(_rewardLocker).registerNextCycle(currentCycle, sacrificableList);\\n    }\\n\\n    /**\\n     * @notice Method initialize liquidityOwner.\\n     * @param _liquidityOwner address of LiquidityOwner contract.\\n     */\\n    function setLiquidityOwner(address _liquidityOwner) external {\\n        if (liquidityOwner != address(0)) {\\n            revert LiquidityOwnerAlreadyInitialized();\\n        }\\n        liquidityOwner = _liquidityOwner;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        ADMINISTRATION LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Method switches `admin` to 'newAdmin' admin address.\\n     * @param newAdmin address of new admin.\\n     * @return True\\n     */\\n    function switchAdmin(address newAdmin) external onlyAdmin returns (bool) {\\n        admin = newAdmin;\\n        emit NewAdmin(newAdmin);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Method adds new meme token to a list of sacrificable tokens.\\n     *         Applied in the next cycles.\\n     * @param meme address of meme token, which will become sacrificable in next cycles.\\n     * @param uniV2Pool uniswap v2 pair (WETH-Meme) address.\\n     * @return True\\n     */\\n    function addMemeToList(\\n        address meme,\\n        address uniV2Pool\\n    )\\n        external\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        memesUniV2Pools[meme] = uniV2Pool;\\n\\n        uint256 lastSacrificableIndex = memeList.length - 1;\\n        while (memesUniV2Pools[memeList[lastSacrificableIndex]] == address(0)) {\\n            lastSacrificableIndex--;\\n        }\\n\\n        memeList.push(meme);\\n\\n        if (lastSacrificableIndex != memeList.length - 2) {\\n            // need to replace\\n            memeList[memeList.length - 1] = memeList[lastSacrificableIndex + 1];\\n            memeList[lastSacrificableIndex + 1] = meme;\\n        }\\n\\n        emit MemeAddedToSacrificableList(currentCycle + 1, meme, uniV2Pool);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Method removes meme token from a list of sacrificable tokens.\\n     *         Applied in the next cycles.\\n     * @param meme address of meme token, which is not sacrificable in next cycles.\\n     * @return True\\n     */\\n    function removeMemeFromList(address meme) external onlyAdmin returns (bool) {\\n        // define last sacrificable index\\n        uint256 lastSacrificableIndex = memeList.length - 1;\\n        while (memesUniV2Pools[memeList[lastSacrificableIndex]] == address(0)) {\\n            lastSacrificableIndex--;\\n        }\\n        if (memeList[lastSacrificableIndex] != meme) {\\n            // try to find array index\\n            uint256 indexId;\\n            for (uint256 index = 0; index < lastSacrificableIndex + 1; index++) {\\n                if (memeList[index] == meme) {\\n                    indexId = index;\\n                    break;\\n                }\\n            }\\n            // check if element exist\\n            if (memeList[indexId] != meme) {\\n                revert MemeIsNotInAList();\\n            }\\n            // replace last\\n            memeList[indexId] = memeList[lastSacrificableIndex];\\n            memeList[lastSacrificableIndex] = meme;\\n        }\\n\\n        memesUniV2Pools[meme] = address(0);\\n        emit MemeRemovedFromSacrificableList(currentCycle, meme);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Method replaces meme uniswap v2 pool to new one.\\n     *         Applied immidiately.\\n     * @param meme address of meme token, which pool should be switched.\\n     * @param newUniV2Pool uniswap v2 pair (WETH-Meme) address.\\n     * @return True\\n     */\\n    function switchUniV2Pool(\\n        address meme,\\n        address newUniV2Pool\\n    )\\n        external\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        if (memesUniV2Pools[meme] == address(0)) {\\n            revert SwitchRequiresMemeBeSet();\\n        }\\n        memesUniV2Pools[meme] = newUniV2Pool;\\n        return true;\\n    }\\n\\n    /// @notice Method adjust y-intercept and slope of linear functions. Applied immidiately.\\n    function adjustBM(uint64 newB, uint64 newM) external onlyAdmin returns (bool) {\\n        b = newB;\\n        m = newM;\\n        emit NewBM(newB, newM);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Method adjust default goal value. Applied in the next cycles.\\n     * @param newDefaultGoal new value of a default goal.\\n     * @return True\\n     */\\n    function adjustDefaultGoal(uint112 newDefaultGoal) external onlyAdmin returns (bool) {\\n        if (newDefaultGoal == uint112(0)) {\\n            revert GoalCannotBeZero();\\n        }\\n        defaultGoal = newDefaultGoal;\\n        emit NewDefaultCycleGoal(newDefaultGoal);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Method adjust cycles duration limit. Applied in the next cycles.\\n     * @param newDurationLimit duration in seconds.\\n     * @return True\\n     */\\n    function adjustCycleDurationLimit(uint32 newDurationLimit)\\n        external\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        cycleDurationLimit = newDurationLimit;\\n        emit NewCycleDurationLimit(newDurationLimit);\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n              SACRIFICE LOGIC: sacrificeMeme and internals\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Method sacrifices `memeToSacrifice` tokens and rewards with Bloodline tokens.\\n     *         `memeToSacrifice` token preapproval is required.\\n     * @param memeToSacrifice address of meme token from the sacrificable list.\\n     * @param amountToSacrifice amount of sacrificable meme token to be sacrificed.\\n     * @param minETH minimum amount of ETH to receive for selling meme.\\n     * @return reward amount for sacrificing in Bloodline tokens.\\n     */\\n    function sacrificeMeme(\\n        address memeToSacrifice,\\n        uint256 amountToSacrifice,\\n        uint112 minETH\\n    )\\n        external\\n        returns (uint128 reward)\\n    {\\n        if (amountToSacrifice == 0) {\\n            revert NothingToSacrifice();\\n        }\\n        Cycle storage cycle = cycles[currentCycle];\\n        if (!cycle.sacrificedMemes[memeToSacrifice].cycleParticipant) {\\n            revert TokenIsNotInSacrificableList();\\n        }\\n\\n        uint112 amountOfWETH = _sellToUniV2(memeToSacrifice, amountToSacrifice, minETH);\\n        uint112 amountWithoutDevFee = amountOfWETH * 97 / 100;\\n\\n        // calculate reward\\n        bool cycleCompleted;\\n        uint112 extraAmount;\\n        (reward, extraAmount, cycleCompleted) =\\n            _calculateRewardFor(memeToSacrifice, amountWithoutDevFee);\\n\\n        if (!IRewardLocker(rewardLocker).registerReward(msg.sender, memeToSacrifice, reward)) {\\n            revert RewardRegistrationFailed();\\n        }\\n\\n        if (cycleCompleted) {\\n            if (\\n                !IRewardLocker(rewardLocker).registerCycleCompleted(\\n                    currentCycle, memeToSacrifice\\n                )\\n            ) {\\n                revert CycleCompletedRegistrationFailed();\\n            }\\n        }\\n\\n        if (!cycleCompleted && cycle.expirationTimestamp <= block.timestamp) {\\n            // complete cycle without winner\\n            if (!IRewardLocker(rewardLocker).registerCycleCompleted(currentCycle, address(0)))\\n            {\\n                revert CycleCompletedRegistrationFailed();\\n            }\\n        }\\n\\n        if (cycleCompleted || cycle.expirationTimestamp <= block.timestamp) {\\n            (uint112 nextCycleNumber, uint112 collectedEthInCycle) =\\n                _registerCycleCompleted(cycle);\\n\\n            if (!IRewardLocker(rewardLocker).registerNextCycle(nextCycleNumber, memeList)) {\\n                revert NextCycleRegistrationFailed();\\n            }\\n\\n            issuancePrice =\\n                uint128(ILiquidityOwner(liquidityOwner).provideLiquidity(collectedEthInCycle));\\n\\n            // cover extra amount\\n            if (extraAmount > 0) {\\n                reward += _handleExtraAmount(memeToSacrifice, extraAmount);\\n            }\\n        }\\n\\n        // ask liquidity owner to pay developer fee\\n        ILiquidityOwner(liquidityOwner).payDeveloperFee(amountOfWETH - amountWithoutDevFee);\\n\\n        emit MemeSacrificed(msg.sender, memeToSacrifice, amountToSacrifice);\\n    }\\n\\n    /// @notice sells meme `memeToSell` token to `uniV2Pool` uniswap v2 pool for ETH.\\n    function _sellToUniV2(\\n        address memeToSell,\\n        uint256 amountToSell,\\n        uint112 minETH\\n    )\\n        internal\\n        returns (uint112)\\n    {\\n        address uniV2Pool = memesUniV2Pools[memeToSell];\\n        if (uniV2Pool == address(0)) {\\n            revert TokenIsNotInSacrificableList();\\n        }\\n        bool token0 = memeToSell < weth;\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(uniV2Pool).getReserves();\\n\\n        if (reserve0 == 0 || reserve1 == 0) {\\n            revert UniV2PoolWithoutLiquidity(uniV2Pool);\\n        }\\n\\n        uint256 amountInWithFee = amountToSell * 997;\\n        uint256 numerator = amountInWithFee * (token0 ? reserve1 : reserve0);\\n        uint256 denominator = amountInWithFee + ((token0 ? reserve0 : reserve1) * 1000);\\n        uint256 amountOut = numerator / denominator;\\n\\n        if (minETH > amountOut) {\\n            revert InsufficientOutputAmount();\\n        }\\n\\n        // transfer tokens directly from msg.sender to uniswapV2 pool\\n        /// @dev requires memeToSacrifice transferFrom returns bool.\\n        require(IERC20(memeToSell).transferFrom(msg.sender, uniV2Pool, amountToSell));\\n\\n        // make a swap, transfer ETH to LiquidityOwner\\n        token0\\n            ? IUniswapV2Pair(uniV2Pool).swap(0, amountOut, liquidityOwner, \\\"\\\")\\n            : IUniswapV2Pair(uniV2Pool).swap(amountOut, 0, liquidityOwner, \\\"\\\");\\n\\n        return uint112(amountOut);\\n    }\\n\\n    /**\\n     * @notice Calculates reward amount based on a cycle goal, ETH received for\\n     *         selling meme tokens and this `memeToSacrifice` token previous achievements.\\n     * @param memeToSacrifice address of meme token from the sacrificable list.\\n     * @param amountOfWETH ETH amount received for selling, minus developer fee.\\n     * @return reward calculated amount of BLOOD tokens.\\n     * @return extraAmount If amountOfWETH is enough to complete two cycles in a row,\\n     *         only one cycle is completed, next cycle achieved is set 95%, extra amount is returned in meme.\\n     * @return cycleCompleted True, if amount of ETH was enough to reach a cycle goal.\\n     */\\n    function _calculateRewardFor(\\n        address memeToSacrifice,\\n        uint112 amountOfWETH\\n    )\\n        internal\\n        returns (uint128 reward, uint112 extraAmount, bool cycleCompleted)\\n    {\\n        Cycle storage cycle = cycles[currentCycle];\\n        SacrificedMeme storage sacrificedMeme = cycle.sacrificedMemes[memeToSacrifice];\\n\\n        uint112 achievement = amountOfWETH;\\n        if (sacrificedMeme.achieved + amountOfWETH >= cycle.goal) {\\n            achievement = cycle.goal - sacrificedMeme.achieved;\\n            extraAmount = amountOfWETH - achievement;\\n            cycleCompleted = true;\\n        }\\n\\n        reward = _calculateReward(cycle.goal, sacrificedMeme.achieved, achievement);\\n        sacrificedMeme.achieved += achievement;\\n    }\\n\\n    /// @notice general function to calculate reward\\n    function _calculateReward(\\n        uint256 goal,\\n        uint256 achieved,\\n        uint256 amount\\n    )\\n        internal\\n        view\\n        returns (uint128)\\n    {\\n        return\\n            uint128(_calculateTripleLinearReward(goal, achieved, amount, issuancePrice, b, m));\\n    }\\n\\n    /// @notice Sets current cycle, defines total collected ETH in a completed cycle,\\n    /// removes removed memes from a meme list, sets expiration timestamp, goal, and participants in a coming cycle.\\n    function _registerCycleCompleted(Cycle storage cycleCompleted)\\n        internal\\n        returns (uint112 nextCycleNumber, uint112 ethCollectedInCycle)\\n    {\\n        // storage write\\n        currentCycle += 1;\\n        nextCycleNumber = currentCycle;\\n\\n        Cycle storage cycleComing = cycles[nextCycleNumber];\\n        uint256 numberOfMemes = memeList.length;\\n        bool sacrificable = false;\\n        // loop through a list of completed cycle memes\\n        for (uint256 i = numberOfMemes; i > 0; i--) {\\n            address meme = memeList[i - 1];\\n            SacrificedMeme storage memeCompletedCycle = cycleCompleted.sacrificedMemes[meme];\\n            // add meme ETH achievement to totalCollectedETH in a completed cycle\\n            ethCollectedInCycle += memeCompletedCycle.achieved;\\n            // remove from list memes, which were removed by admin\\n            if (!sacrificable) {\\n                if (memesUniV2Pools[meme] == address(0)) {\\n                    memeList.pop();\\n                } else {\\n                    sacrificable = true;\\n                }\\n            }\\n            // set as participants in coming cycle all sacrificable memes (all not removed and newly added memes by admin)\\n            if (sacrificable) {\\n                SacrificedMeme storage memeComingCycle = cycleComing.sacrificedMemes[meme];\\n                memeComingCycle.cycleParticipant = true;\\n            }\\n        }\\n        // subtract ETH used to buy BLOOD from totalCollectedETH in a completed cycle\\n        ethCollectedInCycle -= cycleCompleted.ethUsedToBuy;\\n\\n        // set coming cycle state\\n        cycleComing.expirationTimestamp = uint32(block.timestamp) + cycleDurationLimit;\\n        cycleComing.goal = defaultGoal;\\n    }\\n\\n    /// @notice Handle extra ETH over required to complete cycle.\\n    /// Returns extra reward, which is registered for a next cycle, if meme is its participant.\\n    //  Buys meme back, if meme is not participant or extra amount is enough to complete next cycle (complete two cycles in 1 tx is dissalowed).\\n    function _handleExtraAmount(\\n        address meme,\\n        uint112 extraAmount\\n    )\\n        internal\\n        returns (uint128 extraReward)\\n    {\\n        // no extraReward, if extraAmount is less than gas cost spent on extraReward\\n        if (extraAmount < 100_000 * (tx.gasprice > 120 gwei ? 120 gwei : tx.gasprice)) {\\n            return extraReward;\\n        }\\n        // check meme participant in coming cycle\\n        Cycle storage cycle = cycles[currentCycle];\\n        SacrificedMeme storage sacrificedMeme = cycle.sacrificedMemes[meme];\\n        if (sacrificedMeme.cycleParticipant) {\\n            uint112 achievement = extraAmount;\\n            if (extraAmount >= cycle.goal) {\\n                // consume only 95%\\n                achievement = cycle.goal * 95 / 100;\\n                _buyBack(extraAmount - achievement, meme);\\n            }\\n            extraReward = _calculateReward(cycle.goal, sacrificedMeme.achieved, achievement);\\n            // storage write\\n            sacrificedMeme.achieved += achievement;\\n            if (!IRewardLocker(rewardLocker).registerReward(msg.sender, meme, extraReward)) {\\n                revert RewardRegistrationFailed();\\n            }\\n        } else {\\n            _buyBack(extraAmount, meme);\\n        }\\n    }\\n\\n    /// @notice Expected to be a rare case. Buys sacrificed meme tokens back and returns them to msg.sender.\\n    ///  Case 1. Amount received from selling was bigger than required to complete cycle and sacrificed meme is not a participant in next cycle.\\n    ///  Case 2. Amount received from selling was bigger than required to complete two cycles in a row.\\n    function _buyBack(uint256 extraAmount, address memeToBuy) internal {\\n        bool token0 = memeToBuy < weth;\\n        address uniV2Pool = memesUniV2Pools[memeToBuy];\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(uniV2Pool).getReserves();\\n\\n        uint256 amountInWithFee = extraAmount * 997;\\n        uint256 numerator = amountInWithFee * (token0 ? reserve0 : reserve1);\\n        uint256 denominator = amountInWithFee + ((token0 ? reserve1 : reserve0) * 1000);\\n        uint256 amountOut = numerator / denominator;\\n\\n        ILiquidityOwner(liquidityOwner).payWETHToUniswapPool(uniV2Pool, extraAmount);\\n\\n        // make a swap and transfer tokens directly to sacrificer\\n        token0\\n            ? IUniswapV2Pair(uniV2Pool).swap(amountOut, 0, msg.sender, \\\"\\\")\\n            : IUniswapV2Pair(uniV2Pool).swap(0, amountOut, msg.sender, \\\"\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n        SACRIFICE LOGIC: sacrificeMemeAndBuyBLOOD and internals\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Method sacrifice `memeToSacrifice` tokens and buys Bloodline reward tokens\\n     *         from Uniswap V3 pool to maximize user profit and to recover the price, burns bought amount and register\\n     *         the same reward amount for a user in a current cycle, increases meme cycle achievements.\\n     *         `memeToSacrifice` token preapproval is required.\\n     * @param memeToSacrifice address of meme token from the sacrificable list.\\n     * @param amountToSacrifice amount of sacrificeable meme token to be sacrificed.\\n     * @param minBLOOD minimum amount of BDL, which should be received by buying from a pool (includes slippage - calculated on frontend side).\\n     * @return reward amount of the default reward for sacrificing in Bloodline tokens.\\n     */\\n    function sacrificeMemeAndBuyBLOOD(\\n        address memeToSacrifice,\\n        uint256 amountToSacrifice,\\n        uint256 minBLOOD\\n    )\\n        external\\n        returns (uint256 reward)\\n    {\\n        if (amountToSacrifice == 0) {\\n            revert NothingToSacrifice();\\n        }\\n        Cycle storage cycle = cycles[currentCycle];\\n        if (!cycle.sacrificedMemes[memeToSacrifice].cycleParticipant) {\\n            revert TokenIsNotInSacrificableList();\\n        }\\n        // set minETH 0, because we have minBLOOD protecting against sandwitch attack, which implicitly includes a minETH value - no need to double check\\n        uint112 amountOfWETH = _sellToUniV2(memeToSacrifice, amountToSacrifice, 0);\\n        uint112 amountWithoutDevFee = amountOfWETH * 97 / 100;\\n\\n        // buy BLOOD from Uniswap v3\\n        reward = _buyBloodline(amountWithoutDevFee, minBLOOD);\\n\\n        (bool cycleCompleted, uint256 burnAmount, uint256 transferAmount) =\\n            _increaseAchievedCompareGoal(memeToSacrifice, amountWithoutDevFee, reward, cycle);\\n\\n        // burn BLOOD received from a pool to register it as a reward\\n        require(bloodline.burn(burnAmount));\\n\\n        if (transferAmount > 0) {\\n            // transfer extra BLOOD bought for ETH over required to complete cycle\\n            bloodline.transfer(msg.sender, transferAmount);\\n        }\\n\\n        // register reward\\n        if (\\n            !IRewardLocker(rewardLocker).registerReward(msg.sender, memeToSacrifice, burnAmount)\\n        ) {\\n            revert RewardRegistrationFailed();\\n        }\\n\\n        if (cycleCompleted) {\\n            if (\\n                !IRewardLocker(rewardLocker).registerCycleCompleted(\\n                    currentCycle, memeToSacrifice\\n                )\\n            ) {\\n                revert CycleCompletedRegistrationFailed();\\n            }\\n        }\\n\\n        if (!cycleCompleted && cycle.expirationTimestamp <= block.timestamp) {\\n            // complete cycle without winner\\n            if (!IRewardLocker(rewardLocker).registerCycleCompleted(currentCycle, address(0)))\\n            {\\n                revert CycleCompletedRegistrationFailed();\\n            }\\n        }\\n\\n        if (cycleCompleted || cycle.expirationTimestamp <= block.timestamp) {\\n            (uint112 nextCycleNumber, uint112 collectedEthInCycle) =\\n                _registerCycleCompleted(cycle);\\n\\n            if (!IRewardLocker(rewardLocker).registerNextCycle(nextCycleNumber, memeList)) {\\n                revert NextCycleRegistrationFailed();\\n            }\\n\\n            issuancePrice =\\n                uint128(ILiquidityOwner(liquidityOwner).provideLiquidity(collectedEthInCycle));\\n        }\\n\\n        // ask liquidity owner to pay developer fee\\n        ILiquidityOwner(liquidityOwner).payDeveloperFee(amountOfWETH - amountWithoutDevFee);\\n\\n        emit MemeSacrificed(msg.sender, memeToSacrifice, amountToSacrifice);\\n    }\\n\\n    function _buyBloodline(\\n        uint256 ethIn,\\n        uint256 minBDLOut\\n    )\\n        internal\\n        returns (uint256 bdlOut)\\n    {\\n        bytes memory callbackData = abi.encode(ethIn, minBDLOut);\\n        bool wethToken0 = weth < address(bloodline);\\n        (int256 amount0, int256 amount1) = IUniswapV3Pool(uniV3Pool).swap(\\n            address(this),\\n            wethToken0,\\n            int256(ethIn),\\n            wethToken0 ? MIN_SQRT_RATIO : MAX_SQRT_RATIO,\\n            callbackData\\n        );\\n\\n        bdlOut = wethToken0 ? uint256(-amount1) : uint256(-amount0);\\n    }\\n\\n    /// @notice Adds ETH to meme achievements, defines if cycle is completed,\\n    /// based on result defines amounts of BLOOD to burn and to transfer to sacrificer.\\n    function _increaseAchievedCompareGoal(\\n        address meme,\\n        uint112 amountOfWETH,\\n        uint256 reward,\\n        Cycle storage cycle\\n    )\\n        internal\\n        returns (bool cycleCompleted, uint256 burnAmount, uint256 transferAmount)\\n    {\\n        SacrificedMeme storage sacrificedMeme = cycle.sacrificedMemes[meme];\\n        uint112 achievement = amountOfWETH;\\n        if (sacrificedMeme.achieved + amountOfWETH >= cycle.goal) {\\n            achievement = cycle.goal - sacrificedMeme.achieved;\\n            cycleCompleted = true;\\n            burnAmount = reward * achievement / amountOfWETH;\\n            transferAmount = reward - burnAmount;\\n        } else {\\n            burnAmount = reward;\\n        }\\n        // storage writes\\n        sacrificedMeme.achieved += achievement;\\n        cycle.ethUsedToBuy += achievement;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            VIEW FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice View method returns meme token participation and already achieved\\n     *         amount on its way to a cycle `cycleNumber` goal.\\n     * @param cycleNumber token data is requested for.\\n     * @param meme address of a meme token, data is requested for.\\n     * @return participation True, if token is eligable participant in a cycle `cycleNumber`.\\n     * @return amountAchieved amount in ETH, achived already on a token way to a cycle goal.\\n     */\\n    function getSacrificedMeme(\\n        uint112 cycleNumber,\\n        address meme\\n    )\\n        external\\n        view\\n        returns (bool participation, uint256 amountAchieved)\\n    {\\n        Cycle storage cycle = cycles[cycleNumber];\\n        SacrificedMeme storage sacrificedMeme = cycle.sacrificedMemes[meme];\\n        participation = sacrificedMeme.cycleParticipant;\\n        amountAchieved = sacrificedMeme.achieved;\\n    }\\n\\n    /**\\n     * @notice View method returns giving reward amount for sacrificing this amount\\n     *         `amountToSacrifice` of this `memeToSacrifice` meme token now (time/action sensitive data).\\n     * @param memeToSacrifice address of meme token from the sacrificable list.\\n     * @param amountToSacrifice amount of sacrificable meme token to calculate current reward for.\\n     * @return rewardCurrentCycle reward amount for sacrificing in Bloodline tokens in current cycle.\\n     * @return rewardNextCycle reward amount for sacrificing in Bloodline tokens in next cycle (not accurate, as doesn't consider issuancePrice adjustments).\\n     */\\n    function getRewardForSacrifice(\\n        address memeToSacrifice,\\n        uint256 amountToSacrifice\\n    )\\n        external\\n        view\\n        returns (uint256 rewardCurrentCycle, uint256 rewardNextCycle)\\n    {\\n        Cycle storage cycle = cycles[currentCycle];\\n        SacrificedMeme storage sacrificedMeme = cycle.sacrificedMemes[memeToSacrifice];\\n        (uint256 amountETHBase,) = getAmountETHBase(\\n            memeToSacrifice, amountToSacrifice, sacrificedMeme.cycleParticipant\\n        );\\n        rewardCurrentCycle =\\n            _calculateReward(cycle.goal, sacrificedMeme.achieved, amountETHBase);\\n        if (amountETHBase > cycle.goal - sacrificedMeme.achieved) {\\n            uint256 amountForCurrentCycle = cycle.goal - sacrificedMeme.achieved;\\n            rewardCurrentCycle =\\n                _calculateReward(cycle.goal, sacrificedMeme.achieved, amountForCurrentCycle);\\n            amountETHBase -= amountForCurrentCycle;\\n            if (amountETHBase >= defaultGoal) {\\n                amountETHBase = defaultGoal * 95 / 100;\\n            }\\n            rewardNextCycle = _calculateReward(defaultGoal, 0, amountETHBase);\\n        }\\n    }\\n\\n    /**\\n     * @notice View method returns useful amount of ETH for sacrificing this amount\\n     *         `amountToSacrifice` of this `memeToSacrifice` meme token now (time/action sensitive data).\\n     *         Useful ETH is an ETH, which is used as a base to calculate reward or buy BLOOD from Uniswap V3 Pool, amount excludes developer fee.\\n     * @param memeToSacrifice address of meme token from the sacrificable list.\\n     * @param amountToSacrifice amount of sacrificable meme token to calculate current reward for.\\n     * @param cycleParticipant True, if meme token is participant of current cycle.\\n     */\\n    function getAmountETHBase(\\n        address memeToSacrifice,\\n        uint256 amountToSacrifice,\\n        bool cycleParticipant\\n    )\\n        public\\n        view\\n        returns (uint256 amountETHBase, uint256 amountETHForSelling)\\n    {\\n        bool token0 = memeToSacrifice < weth;\\n        address uniV2Pool = memesUniV2Pools[memeToSacrifice];\\n\\n        if (uniV2Pool == address(0)) {\\n            return (amountETHBase, amountETHForSelling);\\n        }\\n\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(uniV2Pool).getReserves();\\n\\n        if (!cycleParticipant || (reserve0 == 0 || reserve1 == 0)) {\\n            return (amountETHBase, amountETHForSelling);\\n        }\\n\\n        uint256 amountInWithFee = amountToSacrifice * 997;\\n        uint256 numerator = amountInWithFee * (token0 ? reserve1 : reserve0);\\n        uint256 denominator = amountInWithFee + ((token0 ? reserve0 : reserve1) * 1000);\\n        amountETHForSelling = numerator / denominator;\\n        amountETHBase = amountETHForSelling * 97 / 100;\\n    }\\n\\n    /// @notice Returns a cycle `cycleNumber` goal denominated in BLOOD (reward) tokens.\\n    function getGoalInBLOOD(uint112 cycleNumber) external view returns (uint256) {\\n        Cycle storage cycle = cycles[cycleNumber];\\n        if (cycle.goal == uint112(0)) {\\n            return 0;\\n        }\\n        return _calculateReward(cycle.goal, 0, cycle.goal);\\n    }\\n\\n    /**\\n     * @notice View method returns required amount of meme `memeToSacrifice` token\\n     *         to sacrifice to complete cycle.\\n     * @param memeToSacrifice address of meme token from the sacrificable list.\\n     */\\n    function getAmountToReachGoal(address memeToSacrifice) public view returns (uint256) {\\n        Cycle storage cycle = cycles[currentCycle];\\n        SacrificedMeme storage sacrificedMeme = cycle.sacrificedMemes[memeToSacrifice];\\n        if (!sacrificedMeme.cycleParticipant) {\\n            return 0;\\n        }\\n        bool token0 = memeToSacrifice < weth;\\n        address uniV2Pool = memesUniV2Pools[memeToSacrifice];\\n        if (uniV2Pool == address(0)) {\\n            return 0;\\n        }\\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(uniV2Pool).getReserves();\\n\\n        if (reserve0 == 0 || reserve1 == 0) {\\n            return 0;\\n        }\\n\\n        uint256 amountOut = 1 + ((cycle.goal - sacrificedMeme.achieved) * 100 / 97);\\n        uint256 numerator = amountOut * 1000 * (token0 ? reserve0 : reserve1);\\n        uint256 denominator = ((token0 ? reserve1 : reserve0) - amountOut) * 997;\\n        uint256 amountIn = (numerator / denominator) + 1;\\n\\n        return amountIn;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                  REWARD CALCULATION INTERNAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Triple LINEAR function. 3 lines - 3 sectors.\\n    /// sector 1: 0-5% goal range. decreasing line.\\n    /// sector 2: 5-95% goal range. straight line.\\n    /// sector 3: 95%-100% goal range. increasing line.\\n    /// @dev b = 95, m = 30 -> mints 96.5% - 3.5% deflation against issuancePrice.\\n    /// @dev rewardFactors must be divided by 10 ** 18 after multiplied by price and amount\\n    function _calculateTripleLinearReward(\\n        uint256 goal,\\n        uint256 achieved,\\n        uint256 amount,\\n        uint256 price,\\n        uint256 _b,\\n        uint256 _m\\n    )\\n        internal\\n        pure\\n        returns (uint256 reward)\\n    {\\n        // start and finish points can be in same or different sectors.\\n        uint256 startPoint = achieved * 100 / goal;\\n        uint256 finishPoint = (achieved + amount) * 100 / goal;\\n\\n        uint256 rewardFactor;\\n        uint256 tempGoal = 5 * goal / 100;\\n        uint256 tempAmount = amount;\\n\\n        if (startPoint < 5) {\\n            if (finishPoint >= 5) {\\n                // start: sector 1. finish: sector 2, sector 3.\\n                // fully filled 0-5% goal range, add reward for that, move to next sector.\\n                tempAmount = tempGoal - achieved;\\n                amount -= tempAmount;\\n                rewardFactor = (_b + _m) * 10 ** 16\\n                    - (_m * 10 ** 16 * (achieved + (achieved + tempAmount)) / tempGoal)\\n                        / uint256(2);\\n                reward += rewardFactor * tempAmount * price / 10 ** 18;\\n                achieved += tempAmount;\\n            } else {\\n                // start: sector 1. finish: sector 1.\\n                // return reward for a partially filling 0-5% goal range.\\n                rewardFactor = (_b + _m) * 10 ** 16\\n                    - (_m * 10 ** 16 * (achieved + (achieved + tempAmount)) / tempGoal)\\n                        / uint256(2);\\n                reward += rewardFactor * tempAmount * price / 10 ** 18;\\n                return reward;\\n            }\\n        }\\n\\n        if (finishPoint < 95) {\\n            // start: sector 1, sector 2. finish: sector 2.\\n            // return reward for a partially filling 5-95% goal range.\\n            rewardFactor = _b * 10 ** 16;\\n            reward += rewardFactor * amount * price / 10 ** 18;\\n            return reward;\\n        } else if (startPoint < 95) {\\n            // start: sector 1, sector 2. finish: sector 3.\\n            // fully filled 5-95% goal range, add reward, move to next sector.\\n            tempGoal = 95 * goal / 100;\\n            tempAmount = tempGoal - achieved;\\n            amount -= tempAmount;\\n            achieved += tempAmount;\\n            rewardFactor = _b * 10 ** 16;\\n            reward += rewardFactor * tempAmount * price / 10 ** 18;\\n        }\\n        // start: sector 1, sector 2, sector 3. finish: sector 3.\\n        // fully or partially fill 95%-100% goal range, add reward.\\n        achieved -= 95 * goal / 100;\\n        tempGoal = 5 * goal / 100;\\n        rewardFactor = _b * 10 ** 16\\n            + (_m * 10 ** 16 * (achieved + (achieved + amount)) / tempGoal) / uint256(2);\\n        reward += rewardFactor * amount * price / 10 ** 18;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                CALLBACKS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata _data\\n    )\\n        external\\n    {\\n        if (amount0Delta <= 0 && amount1Delta <= 0) {\\n            revert SwapWithinZeroLiquidity();\\n        }\\n        if (msg.sender != uniV3Pool) {\\n            revert SwapCallbackCanBeCalledOnlyByPool();\\n        }\\n\\n        (uint256 ethIn, uint256 minBDLOut) = abi.decode(_data, (uint256, uint256));\\n        (bool isExactInput, uint256 amountToPay, uint256 amountReceived) = amount0Delta > 0\\n            ? (weth < address(bloodline), uint256(amount0Delta), uint256(-amount1Delta))\\n            : (address(bloodline) < weth, uint256(amount1Delta), uint256(-amount0Delta));\\n\\n        // check input amount\\n        if (!isExactInput || amountToPay != ethIn) {\\n            revert NotExactInput();\\n        }\\n        // check the output amount\\n        if (amountReceived < minBDLOut) {\\n            revert TooLittleReceived();\\n        }\\n        // transfer eth to univ3 pool\\n        ILiquidityOwner(liquidityOwner).payWETHToUniswapPool(msg.sender, amountToPay);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Bloodline.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPoolInitializer.sol\\\";\\n\\n/// Permission to mint tokens is not exist.\\nerror NotAllowedToMint();\\n\\n/**\\n * @title Bloodline - an ERC20 token that is allowed to be minted only by `rewardLocker`.\\n */\\ncontract Bloodline is ERC20 {\\n    /// @notice Contract which is allowed to mint tokens.\\n    address public rewardLocker;\\n    /// @notice Uniswap V3 pool with 1% fee, underlying tokens: WETH and this.\\n    address public uniV3Pool;\\n\\n    /**\\n     * @notice Constructor initialize solmate ERC20 and deploys Uniswap V3 pool.\\n     * @param _weth address of WETH9 contract.\\n     * @param _nfPositionManager address of NonfungiblePositionManager (Uniswap V3) contract.\\n     * @param _sqrtPricesX96 an array of 2 initial prices for Uniswap V3 pool:\\n     *                       first price is picked if WETH9 is token1,\\n     *                       second price is picked if WETH9 is token0.\\n     */\\n    constructor(\\n        address _rewardLocker,\\n        address _weth,\\n        address _nfPositionManager,\\n        uint160[2] memory _sqrtPricesX96\\n    )\\n        ERC20(\\\"Bloodline\\\", \\\"BLOOD\\\", uint8(18))\\n    {\\n        rewardLocker = _rewardLocker;\\n        if (address(this) < _weth) {\\n            uniV3Pool = IPoolInitializer(_nfPositionManager).createAndInitializePoolIfNecessary(\\n                address(this), _weth, uint24(10_000), _sqrtPricesX96[0]\\n            );\\n        } else {\\n            uniV3Pool = IPoolInitializer(_nfPositionManager).createAndInitializePoolIfNecessary(\\n                _weth, address(this), uint24(10_000), _sqrtPricesX96[1]\\n            );\\n        }\\n        require(uniV3Pool != address(0));\\n    }\\n\\n    /**\\n     * @notice Method mints tokens.\\n     * @dev Method could be called only by `rewardLocker`.\\n     * @param account address which should receive newly minted tokens.\\n     * @param amount of tokens which should be minted.\\n     */\\n    function mintBloodline(address account, uint256 amount) external {\\n        if (msg.sender != rewardLocker) {\\n            revert NotAllowedToMint();\\n        }\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @notice Method burns tokens.\\n     * @param amount of tokens which should be burned.\\n     */\\n    function burn(uint256 amount) external returns (bool) {\\n        _burn(msg.sender, amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Burns the `value` of tokens in existence.\\n     */\\n    function burn(uint256 value) external;\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILiquidityOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface ILiquidityOwner {\\n    function payWETHToUniswapPool(address uniswapPool, uint256 extraAmount) external;\\n    function payDeveloperFee(uint256 developerFee) external;\\n    function provideLiquidity(uint112 collectedEthInCycle)\\n        external\\n        returns (uint256 issuancePrice);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRewardLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IRewardLocker {\\n    function init(\\n        address _memeAltar,\\n        address _bloodline,\\n        address _devLiquidityHolder\\n    )\\n        external;\\n    function registerReward(\\n        address user,\\n        address sacrificedToken,\\n        uint256 reward\\n    )\\n        external\\n        returns (bool);\\n    function registerNextCycle(\\n        uint256 cycleIndex,\\n        address[] calldata sacrificableTokens\\n    )\\n        external\\n        returns (bool);\\n    function registerCycleCompleted(\\n        uint256 cycleIndex,\\n        address winnerToken\\n    )\\n        external\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolErrors,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/v3-periphery/contracts/interfaces/IPoolInitializer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Creates and initializes V3 Pools\\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\\n/// require the pool to exist.\\ninterface IPoolInitializer {\\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\\n    /// @param token0 The contract address of token0 of the pool\\n    /// @param token1 The contract address of token1 of the pool\\n    /// @param fee The fee amount of the v3 pool for the specified token pair\\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// @return observationIndex The index of the last oracle observation that was written,\\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @return The liquidity at the current price of the pool\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper\\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return liquidity The amount of liquidity in the position,\\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// @return initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Errors emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolErrors {\\n    error LOK();\\n    error TLU();\\n    error TLM();\\n    error TUM();\\n    error AI();\\n    error M0();\\n    error M1();\\n    error AS();\\n    error IIA();\\n    error L();\\n    error F0();\\n    error F1();\\n}\\n\"\r\n    },\r\n    \"lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"abdk/=lib/abdk-libraries-solidity/\",\r\n      \"@uniswap/v2-core/=lib/v2-core/\",\r\n      \"abdk-libraries-solidity/=lib/abdk-libraries-solidity/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"v2-core/=lib/v2-core/contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sacrificableList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"uniV2pools\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardLocker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bloodline\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devLiquidityHolder\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"_defaultGoal\",\"type\":\"uint112\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysHaveDifferentLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CycleCompletedRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GoalCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityOwnerAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MemeIsNotInAList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NextCycleRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExactInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToSacrifice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardRegistrationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapCallbackCanBeCalledOnlyByPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapWithinZeroLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwitchRequiresMemeBeSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsNotInSacrificableList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV2Pool\",\"type\":\"address\"}],\"name\":\"UniV2PoolWithoutLiquidity\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"meme\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memeMarket\",\"type\":\"address\"}],\"name\":\"MemeAddedToSacrificableList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"meme\",\"type\":\"address\"}],\"name\":\"MemeRemovedFromSacrificableList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sacrificer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sacrificedToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sacrificedAmount\",\"type\":\"uint256\"}],\"name\":\"MemeSacrificed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"b\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"m\",\"type\":\"uint64\"}],\"name\":\"NewBM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDurationLimit\",\"type\":\"uint256\"}],\"name\":\"NewCycleDurationLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDefaultGoal\",\"type\":\"uint256\"}],\"name\":\"NewDefaultCycleGoal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"meme\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniV2Pool\",\"type\":\"address\"}],\"name\":\"addMemeToList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newB\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newM\",\"type\":\"uint64\"}],\"name\":\"adjustBM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newDurationLimit\",\"type\":\"uint32\"}],\"name\":\"adjustCycleDurationLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"newDefaultGoal\",\"type\":\"uint112\"}],\"name\":\"adjustDefaultGoal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"b\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bloodline\",\"outputs\":[{\"internalType\":\"contract Bloodline\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycleDurationLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"name\":\"cycles\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"goal\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"ethUsedToBuy\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"expirationTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGoal\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memeToSacrifice\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSacrifice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"cycleParticipant\",\"type\":\"bool\"}],\"name\":\"getAmountETHBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETHBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHForSelling\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memeToSacrifice\",\"type\":\"address\"}],\"name\":\"getAmountToReachGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"cycleNumber\",\"type\":\"uint112\"}],\"name\":\"getGoalInBLOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memeToSacrifice\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSacrifice\",\"type\":\"uint256\"}],\"name\":\"getRewardForSacrifice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardCurrentCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNextCycle\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"cycleNumber\",\"type\":\"uint112\"},{\"internalType\":\"address\",\"name\":\"meme\",\"type\":\"address\"}],\"name\":\"getSacrificedMeme\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"participation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountAchieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuancePrice\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memeList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memesUniV2Pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"meme\",\"type\":\"address\"}],\"name\":\"removeMemeFromList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memeToSacrifice\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSacrifice\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"minETH\",\"type\":\"uint112\"}],\"name\":\"sacrificeMeme\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"reward\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memeToSacrifice\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToSacrifice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBLOOD\",\"type\":\"uint256\"}],\"name\":\"sacrificeMemeAndBuyBLOOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityOwner\",\"type\":\"address\"}],\"name\":\"setLiquidityOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"switchAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"meme\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newUniV2Pool\",\"type\":\"address\"}],\"name\":\"switchUniV2Pool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3Pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MemeAltar", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000070ef29d2789cd910150d12259a373ff4d1aff86a000000000000000000000000be449268d7b8d985d010c4b7d808c4629af3fd27000000000000000000000000be6e8250ad32ab69a7e382f8f40ef6ab4e6286ea000000000000000000000000790229c765c5bbc6e50fcb12be454e909164b84200000000000000000000000000000000000000000000000ad78ebc5ac620000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000006982508145454ce325ddbe47a25d4ec3d231193300000000000000000000000095ad61b0a150d79219dcf64e1e6cc01f0b64c4ce000000000000000000000000761d38e5ddf6ccf6cf7c55759d5210750b5d60f30000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a43fe16908251ee70ef74718545e4fe6c5ccec9f000000000000000000000000cf6daab95c476106eca715d48de4b13287ffdeaa0000000000000000000000007b73644935b8e68019ac6356c40661e1bc315860", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}