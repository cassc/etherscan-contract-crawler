{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"solidity/contracts/geyser/KeepVault.sol\": {\r\n      \"content\": \"/**\\n\u2593\u2593\u258c \u2593\u2593 \u2590\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2584\\n\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n  \u2593\u2593\u2593\u2593\u2593\u2593    \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2580    \u2590\u2593\u2593\u2593\u2593\u2593\u2593    \u2590\u2593\u2593\u2593\u2593\u2593   \u2593\u2593\u2593\u2593\u2593\u2593     \u2593\u2593\u2593\u2593\u2593   \u2590\u2593\u2593\u2593\u2593\u2593\u258c   \u2590\u2593\u2593\u2593\u2593\u2593\u2593\\n  \u2593\u2593\u2593\u2593\u2593\u2593\u2584\u2584\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2580      \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2584\u2584\u2584\u2584         \u2593\u2593\u2593\u2593\u2593\u2593\u2584\u2584\u2584\u2584         \u2590\u2593\u2593\u2593\u2593\u2593\u258c   \u2590\u2593\u2593\u2593\u2593\u2593\u2593\\n  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2580        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593         \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u258c        \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n  \u2593\u2593\u2593\u2593\u2593\u2593\u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2584       \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2580\u2580\u2580\u2580         \u2593\u2593\u2593\u2593\u2593\u2593\u2580\u2580\u2580\u2580         \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2580\\n  \u2593\u2593\u2593\u2593\u2593\u2593   \u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2584     \u2590\u2593\u2593\u2593\u2593\u2593\u2593     \u2593\u2593\u2593\u2593\u2593   \u2593\u2593\u2593\u2593\u2593\u2593     \u2593\u2593\u2593\u2593\u2593   \u2590\u2593\u2593\u2593\u2593\u2593\u258c\\n\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593 \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593  \u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\\n\\n                           Trust math, not hardware.\\n*/\\n\\npragma solidity 0.5.17;\\n\\nimport \\\"./KeepTokenGeyser.sol\\\";\\nimport \\\"../KeepToken.sol\\\";\\n\\n/// @title KEEP Vault\\n/// @dev A smart-contract based mechanism to distribute tokens over time.\\n/// It accepts KEEP token as stake and distributes KEEP as rewards for staking.\\ncontract KeepVault is KeepTokenGeyser {\\n    /// @param _keepToken KEEP token contract address. It is a token that is accepted\\n    /// as user's stake and that will be distributed as rewards.\\n    /// @param _maxUnlockSchedules Max number of unlock stages, to guard against\\n    /// hitting gas limit.\\n    /// @param _startBonus Starting time bonus, BONUS_DECIMALS fixed point.\\n    /// e.g. 25% means user gets 25% of max distribution tokens.\\n    /// @param _bonusPeriodSec Length of time for bonus to increase linearly to max.\\n    /// @param _initialSharesPerToken Number of shares to mint per staking token\\n    /// on first stake.\\n    /// @param _durationSec Length of time to linear unlock the rewards tokens.\\n    constructor(\\n        KeepToken _keepToken,\\n        uint256 _maxUnlockSchedules,\\n        uint256 _startBonus,\\n        uint256 _bonusPeriodSec,\\n        uint256 _initialSharesPerToken,\\n        uint256 _durationSec\\n    )\\n        public\\n        KeepTokenGeyser(\\n            _keepToken,\\n            _keepToken,\\n            _maxUnlockSchedules,\\n            _startBonus,\\n            _bonusPeriodSec,\\n            _initialSharesPerToken,\\n            _durationSec\\n        )\\n    {}\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/geyser/KeepTokenGeyser.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"./TokenGeyser.sol\\\";\\nimport \\\"../KeepToken.sol\\\";\\nimport {IStakerRewards, StakerRewardsBeneficiary} from \\\"../PhasedEscrow.sol\\\";\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title KEEP Token Geyser\\n/// @dev A smart-contract based mechanism to distribute tokens over time, based\\n/// on implementation of ampleforth's TokenGeyser contract (see: [token-geyser]).\\n///\\n/// Token that users stake is any ERC20 token defined on contract deployment.\\n/// Users are rewarded in distribution tokens, which in this case will be KEEP.\\n///\\n/// Account holding Reward Distribution role locks tokens for distribution.\\n/// The role can be transferred to any account or contract (e.g. Escrow) by the\\n/// contract owner.\\n///\\n/// [token-geyser]: https://github.com/ampleforth/token-geyser/\\ncontract KeepTokenGeyser is TokenGeyser, IStakerRewards {\\n    event DurationSecUpdated(uint256 oldDurationSec, uint256 newDurationSec);\\n\\n    uint256 public durationSec;\\n\\n    /// @param _stakingToken The token users deposit as a stake.\\n    /// @param _distributionToken The token users are rewarded in and receive it\\n    /// as they unstake.\\n    /// @param _maxUnlockSchedules Max number of unlock stages, to guard against\\n    /// hitting gas limit.\\n    /// @param _startBonus Starting time bonus, BONUS_DECIMALS fixed point.\\n    /// e.g. 25% means user gets 25% of max distribution tokens.\\n    /// @param _bonusPeriodSec Length of time for bonus to increase linearly to max.\\n    /// @param _initialSharesPerToken Number of shares to mint per staking token\\n    /// on first stake.\\n    /// @param _durationSec Length of time to linear unlock the rewards tokens.\\n    constructor(\\n        IERC20 _stakingToken,\\n        KeepToken _distributionToken,\\n        uint256 _maxUnlockSchedules,\\n        uint256 _startBonus,\\n        uint256 _bonusPeriodSec,\\n        uint256 _initialSharesPerToken,\\n        uint256 _durationSec\\n    )\\n        public\\n        TokenGeyser(\\n            _stakingToken,\\n            _distributionToken,\\n            _maxUnlockSchedules,\\n            _startBonus,\\n            _bonusPeriodSec,\\n            _initialSharesPerToken\\n        )\\n    {\\n        durationSec = _durationSec;\\n    }\\n\\n    /// @notice Receives an approval of token transfer and locks the approved\\n    /// amount for rewards.\\n    /// @dev Requires the provided token contract to be the same as the distribution\\n    /// token supported by this contract.\\n    /// @param _from The owner of the tokens who approved them to stake.\\n    /// @param _value Approved amount of tokens for the transfer.\\n    /// @param _token Token contract address.\\n    /// @param _extraData Ignored.\\n    function receiveApproval(\\n        address _from,\\n        uint256 _value,\\n        address _token,\\n        bytes calldata _extraData\\n    ) external {\\n        require(\\n            KeepToken(_token) == getDistributionToken(),\\n            \\\"Token is not supported distribution token\\\"\\n        );\\n\\n        lockTokens(_value, durationSec);\\n    }\\n\\n    function setDurationSec(uint256 _newDurationSec) external onlyOwner {\\n        require(\\n            _newDurationSec > 0,\\n            \\\"New duration has to be greater than zero\\\"\\n        );\\n\\n        emit DurationSecUpdated(durationSec, _newDurationSec);\\n\\n        durationSec = _newDurationSec;\\n    }\\n}\\n\\n/// @title KeepTokenGeyserRewardsEscrowBeneficiary\\n/// @notice Intermediate contract used to transfer tokens from PhasedEscrow to a\\n/// designated KeepTokenGeyser contract.\\ncontract KeepTokenGeyserRewardsEscrowBeneficiary is StakerRewardsBeneficiary {\\n    constructor(IERC20 _token, IStakerRewards _stakerRewards)\\n        public\\n        StakerRewardsBeneficiary(_token, _stakerRewards)\\n    {}\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/geyser/TokenGeyser.sol\": {\r\n      \"content\": \"/**\\n This code is copied from:\\n https://github.com/ampleforth/token-geyser/tree/d8352f62a0432494c39416d090e68582e13b2b22/contracts\\n with some modifications:\\n  - updated pragma to reflect the one used by the project,\\n  - aligned functions ordering to meet project's linting requirements,\\n  - defined a separate role for rewards tokens locking.\\n*/\\npragma solidity 0.5.17;\\n\\nimport \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\n\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"./TokenPool.sol\\\";\\n\\n/**\\n * @title Token Geyser\\n * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\\n *      Compound and Uniswap.\\n *\\n *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\\n *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\\n *      claimed by users.\\n *\\n *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\\n *      is a function of the number of tokens deposited as well as the length of time deposited.\\n *      Specifically, a user's share of the currently-unlocked pool equals their \\\"deposit-seconds\\\"\\n *      divided by the global \\\"deposit-seconds\\\". This aligns the new token distribution with long\\n *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\\n *\\n *      More background and motivation available at:\\n *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\\n */\\ncontract TokenGeyser is IStaking, Ownable {\\n    using SafeMath for uint256;\\n\\n    event Staked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 total,\\n        bytes data\\n    );\\n    event Unstaked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 total,\\n        bytes data\\n    );\\n    event TokensClaimed(address indexed user, uint256 amount);\\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\\n    // amount: Unlocked tokens, total: Total locked tokens\\n    event TokensUnlocked(uint256 amount, uint256 total);\\n    event RewardDistributionRoleTransferred(\\n        address oldRewardDistribution,\\n        address newRewardDistribution\\n    );\\n\\n    TokenPool private _stakingPool;\\n    TokenPool private _unlockedPool;\\n    TokenPool private _lockedPool;\\n\\n    // Address that is expected to fund the contract with tokens to distribute.\\n    address public rewardDistribution;\\n\\n    //\\n    // Time-bonus params\\n    //\\n    uint256 public constant BONUS_DECIMALS = 2;\\n    uint256 public startBonus = 0;\\n    uint256 public bonusPeriodSec = 0;\\n\\n    //\\n    // Global accounting state\\n    //\\n    uint256 public totalLockedShares = 0;\\n    uint256 public totalStakingShares = 0;\\n    uint256 private _totalStakingShareSeconds = 0;\\n    uint256 private _lastAccountingTimestampSec = now;\\n    uint256 private _maxUnlockSchedules = 0;\\n    uint256 private _initialSharesPerToken = 0;\\n\\n    //\\n    // User accounting state\\n    //\\n    // Represents a single stake for a user. A user may have multiple.\\n    struct Stake {\\n        uint256 stakingShares;\\n        uint256 timestampSec;\\n    }\\n\\n    // Caches aggregated values from the User->Stake[] map to save computation.\\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\\n    struct UserTotals {\\n        uint256 stakingShares;\\n        uint256 stakingShareSeconds;\\n        uint256 lastAccountingTimestampSec;\\n    }\\n\\n    // Aggregated staking values per user\\n    mapping(address => UserTotals) private _userTotals;\\n\\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\\n    mapping(address => Stake[]) private _userStakes;\\n\\n    //\\n    // Locked/Unlocked Accounting state\\n    //\\n    struct UnlockSchedule {\\n        uint256 initialLockedShares;\\n        uint256 unlockedShares;\\n        uint256 lastUnlockTimestampSec;\\n        uint256 endAtSec;\\n        uint256 durationSec;\\n    }\\n\\n    UnlockSchedule[] public unlockSchedules;\\n\\n    /**\\n     * @param stakingToken The token users deposit as stake.\\n     * @param distributionToken The token users receive as they unstake.\\n     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\\n     * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point.\\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\\n     */\\n    constructor(\\n        IERC20 stakingToken,\\n        IERC20 distributionToken,\\n        uint256 maxUnlockSchedules,\\n        uint256 startBonus_,\\n        uint256 bonusPeriodSec_,\\n        uint256 initialSharesPerToken\\n    ) public {\\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\\n        require(\\n            startBonus_ <= 10**BONUS_DECIMALS,\\n            \\\"TokenGeyser: start bonus too high\\\"\\n        );\\n        // If no period is desired, instead set startBonus = 100%\\n        // and bonusPeriod to a small value like 1sec.\\n        require(bonusPeriodSec_ != 0, \\\"TokenGeyser: bonus period is zero\\\");\\n        require(\\n            initialSharesPerToken > 0,\\n            \\\"TokenGeyser: initialSharesPerToken is zero\\\"\\n        );\\n\\n        _stakingPool = new TokenPool(stakingToken);\\n        _unlockedPool = new TokenPool(distributionToken);\\n        _lockedPool = new TokenPool(distributionToken);\\n        startBonus = startBonus_;\\n        bonusPeriodSec = bonusPeriodSec_;\\n        _maxUnlockSchedules = maxUnlockSchedules;\\n        _initialSharesPerToken = initialSharesPerToken;\\n        rewardDistribution = owner(); // By default owner is expected to fund the contract.\\n    }\\n\\n    /**\\n     * @dev Transfers amount of deposit tokens from the user.\\n     * @param amount Number of deposit tokens to stake.\\n     * @param data Not used.\\n     */\\n    function stake(uint256 amount, bytes calldata data) external {\\n        _stakeFor(msg.sender, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\\n     * @param user User address who gains credit for this stake operation.\\n     * @param amount Number of deposit tokens to stake.\\n     * @param data Not used.\\n     */\\n    function stakeFor(\\n        address user,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _stakeFor(msg.sender, user, amount);\\n    }\\n\\n    /**\\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\\n     * alotted number of distribution tokens.\\n     * @param amount Number of deposit tokens to unstake / withdraw.\\n     * @param data Not used.\\n     */\\n    function unstake(uint256 amount, bytes calldata data) external {\\n        _unstake(amount);\\n    }\\n\\n    /**\\n     * @dev Note that this application has a staking token as well as a distribution token, which\\n     * may be different. This function is required by EIP-900.\\n     * @return The deposit token used for staking.\\n     */\\n    function token() external view returns (address) {\\n        return address(getStakingToken());\\n    }\\n\\n    /**\\n     * @dev Transfers reward distribution role to a new address.\\n     * Can only be called by the owner.\\n     * @param newRewardDistribution New reward distribution address.\\n     */\\n    function setRewardDistribution(address newRewardDistribution)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newRewardDistribution != address(0),\\n            \\\"New reward distribution is the zero address\\\"\\n        );\\n\\n        emit RewardDistributionRoleTransferred(\\n            rewardDistribution,\\n            newRewardDistribution\\n        );\\n\\n        rewardDistribution = newRewardDistribution;\\n    }\\n\\n    /**\\n     * @dev This function allows the reward distribution to add more locked distribution tokens, along\\n     *      with the associated \\\"unlock schedule\\\". These locked tokens immediately begin unlocking\\n     *      linearly over the duration of durationSec timeframe.\\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\\n     * @param durationSec Length of time to linear unlock the tokens.\\n     */\\n    function lockTokens(uint256 amount, uint256 durationSec)\\n        public\\n        onlyRewardDistribution\\n    {\\n        require(\\n            unlockSchedules.length < _maxUnlockSchedules,\\n            \\\"TokenGeyser: reached maximum unlock schedules\\\"\\n        );\\n\\n        // Update lockedTokens amount before using it in computations after.\\n        updateAccounting();\\n\\n        uint256 lockedTokens = totalLocked();\\n        uint256 mintedLockedShares =\\n            (lockedTokens > 0)\\n                ? totalLockedShares.mul(amount).div(lockedTokens)\\n                : amount.mul(_initialSharesPerToken);\\n\\n        UnlockSchedule memory schedule;\\n        schedule.initialLockedShares = mintedLockedShares;\\n        schedule.lastUnlockTimestampSec = now;\\n        schedule.endAtSec = now.add(durationSec);\\n        schedule.durationSec = durationSec;\\n        unlockSchedules.push(schedule);\\n\\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\\n\\n        require(\\n            _lockedPool.token().transferFrom(\\n                msg.sender,\\n                address(_lockedPool),\\n                amount\\n            ),\\n            \\\"TokenGeyser: transfer into locked pool failed\\\"\\n        );\\n        emit TokensLocked(amount, durationSec, totalLocked());\\n    }\\n\\n    /**\\n     * @param amount Number of deposit tokens to unstake / withdraw.\\n     * @return The total number of distribution tokens that would be rewarded.\\n     */\\n    function unstakeQuery(uint256 amount) public returns (uint256) {\\n        return _unstake(amount);\\n    }\\n\\n    /**\\n     * @return The token users deposit as stake.\\n     */\\n    function getStakingToken() public view returns (IERC20) {\\n        return _stakingPool.token();\\n    }\\n\\n    /**\\n     * @return The token users receive as they unstake.\\n     */\\n    function getDistributionToken() public view returns (IERC20) {\\n        assert(_unlockedPool.token() == _lockedPool.token());\\n        return _unlockedPool.token();\\n    }\\n\\n    /**\\n     * @param addr The user to look up staking information for.\\n     * @return The number of staking tokens deposited for addr.\\n     */\\n    function totalStakedFor(address addr) public view returns (uint256) {\\n        return\\n            totalStakingShares > 0\\n                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\\n                    totalStakingShares\\n                )\\n                : 0;\\n    }\\n\\n    /**\\n     * @return The total number of deposit tokens staked globally, by all users.\\n     */\\n    function totalStaked() public view returns (uint256) {\\n        return _stakingPool.balance();\\n    }\\n\\n    /**\\n     * @dev A globally callable function to update the accounting state of the system.\\n     *      Global state and state for the caller are updated.\\n     * @return [0] balance of the locked pool\\n     * @return [1] balance of the unlocked pool\\n     * @return [2] caller's staking share seconds\\n     * @return [3] global staking share seconds\\n     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\\n     * @return [5] block timestamp\\n     */\\n    function updateAccounting()\\n        public\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        unlockTokens();\\n\\n        // Global accounting\\n        uint256 newStakingShareSeconds =\\n            now.sub(_lastAccountingTimestampSec).mul(totalStakingShares);\\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\\n            newStakingShareSeconds\\n        );\\n        _lastAccountingTimestampSec = now;\\n\\n        // User Accounting\\n        UserTotals storage totals = _userTotals[msg.sender];\\n        uint256 newUserStakingShareSeconds =\\n            now.sub(totals.lastAccountingTimestampSec).mul(\\n                totals.stakingShares\\n            );\\n        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\\n            newUserStakingShareSeconds\\n        );\\n        totals.lastAccountingTimestampSec = now;\\n\\n        uint256 totalUserRewards =\\n            (_totalStakingShareSeconds > 0)\\n                ? totalUnlocked().mul(totals.stakingShareSeconds).div(\\n                    _totalStakingShareSeconds\\n                )\\n                : 0;\\n\\n        return (\\n            totalLocked(),\\n            totalUnlocked(),\\n            totals.stakingShareSeconds,\\n            _totalStakingShareSeconds,\\n            totalUserRewards,\\n            now\\n        );\\n    }\\n\\n    /**\\n     * @return Total number of locked distribution tokens.\\n     */\\n    function totalLocked() public view returns (uint256) {\\n        return _lockedPool.balance();\\n    }\\n\\n    /**\\n     * @return Total number of unlocked distribution tokens.\\n     */\\n    function totalUnlocked() public view returns (uint256) {\\n        return _unlockedPool.balance();\\n    }\\n\\n    /**\\n     * @return Number of unlock schedules.\\n     */\\n    function unlockScheduleCount() public view returns (uint256) {\\n        return unlockSchedules.length;\\n    }\\n\\n    /**\\n     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\\n     *      previously defined unlock schedules. Publicly callable.\\n     * @return Number of newly unlocked distribution tokens.\\n     */\\n    function unlockTokens() public returns (uint256) {\\n        uint256 unlockedTokens = 0;\\n        uint256 lockedTokens = totalLocked();\\n\\n        if (totalLockedShares == 0) {\\n            unlockedTokens = lockedTokens;\\n        } else {\\n            uint256 unlockedShares = 0;\\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\\n                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\\n            }\\n            unlockedTokens = unlockedShares.mul(lockedTokens).div(\\n                totalLockedShares\\n            );\\n            totalLockedShares = totalLockedShares.sub(unlockedShares);\\n        }\\n\\n        if (unlockedTokens > 0) {\\n            require(\\n                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\\n                \\\"TokenGeyser: transfer out of locked pool failed\\\"\\n            );\\n            emit TokensUnlocked(unlockedTokens, totalLocked());\\n        }\\n\\n        return unlockedTokens;\\n    }\\n\\n    /**\\n     * @dev Lets the owner rescue funds air-dropped to the staking pool.\\n     * @param tokenToRescue Address of the token to be rescued.\\n     * @param to Address to which the rescued funds are to be sent.\\n     * @param amount Amount of tokens to be rescued.\\n     * @return Transfer success.\\n     */\\n    function rescueFundsFromStakingPool(\\n        address tokenToRescue,\\n        address to,\\n        uint256 amount\\n    ) public onlyOwner returns (bool) {\\n        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\\n    }\\n\\n    /**\\n     * @dev Private implementation of staking methods.\\n     * @param staker User address who deposits tokens to stake.\\n     * @param beneficiary User address who gains credit for this stake operation.\\n     * @param amount Number of deposit tokens to stake.\\n     */\\n    function _stakeFor(\\n        address staker,\\n        address beneficiary,\\n        uint256 amount\\n    ) private {\\n        require(amount > 0, \\\"TokenGeyser: stake amount is zero\\\");\\n        require(\\n            beneficiary != address(0),\\n            \\\"TokenGeyser: beneficiary is zero address\\\"\\n        );\\n        require(\\n            totalStakingShares == 0 || totalStaked() > 0,\\n            \\\"TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do\\\"\\n        );\\n\\n        uint256 mintedStakingShares =\\n            (totalStakingShares > 0)\\n                ? totalStakingShares.mul(amount).div(totalStaked())\\n                : amount.mul(_initialSharesPerToken);\\n        require(\\n            mintedStakingShares > 0,\\n            \\\"TokenGeyser: Stake amount is too small\\\"\\n        );\\n\\n        updateAccounting();\\n\\n        // 1. User Accounting\\n        UserTotals storage totals = _userTotals[beneficiary];\\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\\n        totals.lastAccountingTimestampSec = now;\\n\\n        Stake memory newStake = Stake(mintedStakingShares, now);\\n        _userStakes[beneficiary].push(newStake);\\n\\n        // 2. Global Accounting\\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\\n        // Already set in updateAccounting()\\n        // _lastAccountingTimestampSec = now;\\n\\n        // interactions\\n        require(\\n            _stakingPool.token().transferFrom(\\n                staker,\\n                address(_stakingPool),\\n                amount\\n            ),\\n            \\\"TokenGeyser: transfer into staking pool failed\\\"\\n        );\\n\\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\\n     * alotted number of distribution tokens.\\n     * @param amount Number of deposit tokens to unstake / withdraw.\\n     * @return The total number of distribution tokens rewarded.\\n     */\\n    function _unstake(uint256 amount) private returns (uint256) {\\n        updateAccounting();\\n\\n        // checks\\n        require(amount > 0, \\\"TokenGeyser: unstake amount is zero\\\");\\n        require(\\n            totalStakedFor(msg.sender) >= amount,\\n            \\\"TokenGeyser: unstake amount is greater than total user stakes\\\"\\n        );\\n        uint256 stakingSharesToBurn =\\n            totalStakingShares.mul(amount).div(totalStaked());\\n        require(\\n            stakingSharesToBurn > 0,\\n            \\\"TokenGeyser: Unable to unstake amount this small\\\"\\n        );\\n\\n        // 1. User Accounting\\n        UserTotals storage totals = _userTotals[msg.sender];\\n        Stake[] storage accountStakes = _userStakes[msg.sender];\\n\\n        // Redeem from most recent stake and go backwards in time.\\n        uint256 stakingShareSecondsToBurn = 0;\\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\\n        uint256 rewardAmount = 0;\\n        while (sharesLeftToBurn > 0) {\\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\\n            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\\n            uint256 newStakingShareSecondsToBurn = 0;\\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\\n                // fully redeem a past stake\\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\\n                    stakeTimeSec\\n                );\\n                rewardAmount = computeNewReward(\\n                    rewardAmount,\\n                    newStakingShareSecondsToBurn,\\n                    stakeTimeSec\\n                );\\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\\n                    newStakingShareSecondsToBurn\\n                );\\n                sharesLeftToBurn = sharesLeftToBurn.sub(\\n                    lastStake.stakingShares\\n                );\\n                accountStakes.length--;\\n            } else {\\n                // partially redeem a past stake\\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\\n                    stakeTimeSec\\n                );\\n                rewardAmount = computeNewReward(\\n                    rewardAmount,\\n                    newStakingShareSecondsToBurn,\\n                    stakeTimeSec\\n                );\\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\\n                    newStakingShareSecondsToBurn\\n                );\\n                lastStake.stakingShares = lastStake.stakingShares.sub(\\n                    sharesLeftToBurn\\n                );\\n                sharesLeftToBurn = 0;\\n            }\\n        }\\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\\n            stakingShareSecondsToBurn\\n        );\\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\\n        // Already set in updateAccounting\\n        // totals.lastAccountingTimestampSec = now;\\n\\n        // 2. Global Accounting\\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\\n            stakingShareSecondsToBurn\\n        );\\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\\n        // Already set in updateAccounting\\n        // _lastAccountingTimestampSec = now;\\n\\n        // interactions\\n        require(\\n            _stakingPool.transfer(msg.sender, amount),\\n            \\\"TokenGeyser: transfer out of staking pool failed\\\"\\n        );\\n        require(\\n            _unlockedPool.transfer(msg.sender, rewardAmount),\\n            \\\"TokenGeyser: transfer out of unlocked pool failed\\\"\\n        );\\n\\n        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), \\\"\\\");\\n        emit TokensClaimed(msg.sender, rewardAmount);\\n\\n        require(\\n            totalStakingShares == 0 || totalStaked() > 0,\\n            \\\"TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do\\\"\\n        );\\n        return rewardAmount;\\n    }\\n\\n    /**\\n     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\\n     *      encourage long-term deposits instead of constant unstake/restakes.\\n     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\\n     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\\n     * @param currentRewardTokens The current number of distribution tokens already alotted for this\\n     *                            unstake op. Any bonuses are already applied.\\n     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\\n     *                            distribution tokens.\\n     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\\n     *                     the time-bonus.\\n     * @return Updated amount of distribution tokens to award, with any bonus included on the\\n     *         newly added tokens.\\n     */\\n    function computeNewReward(\\n        uint256 currentRewardTokens,\\n        uint256 stakingShareSeconds,\\n        uint256 stakeTimeSec\\n    ) private view returns (uint256) {\\n        uint256 newRewardTokens =\\n            totalUnlocked().mul(stakingShareSeconds).div(\\n                _totalStakingShareSeconds\\n            );\\n\\n        if (stakeTimeSec >= bonusPeriodSec) {\\n            return currentRewardTokens.add(newRewardTokens);\\n        }\\n\\n        uint256 oneHundredPct = 10**BONUS_DECIMALS;\\n        uint256 bonusedReward =\\n            startBonus\\n                .add(\\n                oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(\\n                    bonusPeriodSec\\n                )\\n            )\\n                .mul(newRewardTokens)\\n                .div(oneHundredPct);\\n        return currentRewardTokens.add(bonusedReward);\\n    }\\n\\n    /**\\n     * @dev Returns the number of unlockable shares from a given schedule. The returned value\\n     *      depends on the time since the last unlock. This function updates schedule accounting,\\n     *      but does not actually transfer any tokens.\\n     * @param s Index of the unlock schedule.\\n     * @return The number of unlocked shares.\\n     */\\n    function unlockScheduleShares(uint256 s) private returns (uint256) {\\n        UnlockSchedule storage schedule = unlockSchedules[s];\\n\\n        if (schedule.unlockedShares >= schedule.initialLockedShares) {\\n            return 0;\\n        }\\n\\n        uint256 sharesToUnlock = 0;\\n        // Special case to handle any leftover dust from integer division\\n        if (now >= schedule.endAtSec) {\\n            sharesToUnlock = (\\n                schedule.initialLockedShares.sub(schedule.unlockedShares)\\n            );\\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\\n        } else {\\n            sharesToUnlock = now\\n                .sub(schedule.lastUnlockTimestampSec)\\n                .mul(schedule.initialLockedShares)\\n                .div(schedule.durationSec);\\n            schedule.lastUnlockTimestampSec = now;\\n        }\\n\\n        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\\n        return sharesToUnlock;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the reward distribution.\\n     */\\n    modifier onlyRewardDistribution() {\\n        require(\\n            rewardDistribution == msg.sender,\\n            \\\"Caller is not the reward distribution\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/geyser/TokenPool.sol\": {\r\n      \"content\": \"/**\\n This code is copied from:\\n https://github.com/ampleforth/token-geyser/tree/d8352f62a0432494c39416d090e68582e13b2b22/contracts\\n */\\npragma solidity 0.5.17;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title A simple holder of tokens.\\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\\n * needs to hold multiple distinct pools of the same token.\\n */\\ncontract TokenPool is Ownable {\\n    IERC20 public token;\\n\\n    constructor(IERC20 _token) public {\\n        token = _token;\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        return token.transfer(to, value);\\n    }\\n\\n    function rescueFunds(\\n        address tokenToRescue,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner returns (bool) {\\n        require(\\n            address(token) != tokenToRescue,\\n            \\\"TokenPool: Cannot claim token held by the contract\\\"\\n        );\\n\\n        return IERC20(tokenToRescue).transfer(to, amount);\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/geyser/IStaking.sol\": {\r\n      \"content\": \"/**\\n This code is copied from:\\n https://github.com/ampleforth/token-geyser/tree/d8352f62a0432494c39416d090e68582e13b2b22/contracts\\n */\\npragma solidity 0.5.17;\\n\\n/**\\n * @title Staking interface, as defined by EIP-900.\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\\n */\\ncontract IStaking {\\n    event Staked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 total,\\n        bytes data\\n    );\\n    event Unstaked(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 total,\\n        bytes data\\n    );\\n\\n    function stake(uint256 amount, bytes calldata data) external;\\n\\n    function stakeFor(\\n        address user,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function unstake(uint256 amount, bytes calldata data) external;\\n\\n    function token() external view returns (address);\\n\\n    /**\\n     * @return False. This application does not support staking history.\\n     */\\n    function supportsHistory() external pure returns (bool) {\\n        return false;\\n    }\\n\\n    function totalStakedFor(address addr) public view returns (uint256);\\n\\n    function totalStaked() public view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/KeepToken.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\\";\\n\\n/// @dev Interface of recipient contract for approveAndCall pattern.\\ninterface tokenRecipient {\\n    function receiveApproval(\\n        address _from,\\n        uint256 _value,\\n        address _token,\\n        bytes calldata _extraData\\n    ) external;\\n}\\n\\n/// @title KEEP Token\\n/// @dev Standard ERC20Burnable token\\ncontract KeepToken is ERC20Burnable, ERC20Detailed {\\n    string public constant NAME = \\\"KEEP Token\\\";\\n    string public constant SYMBOL = \\\"KEEP\\\";\\n    uint8 public constant DECIMALS = 18; // The number of digits after the decimal place when displaying token values on-screen.\\n    uint256 public constant INITIAL_SUPPLY = 10**27; // 1 billion tokens, 18 decimal places.\\n\\n    /// @dev Gives msg.sender all of existing tokens.\\n    constructor() public ERC20Detailed(NAME, SYMBOL, DECIMALS) {\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n\\n    /// @notice Set allowance for other address and notify.\\n    /// Allows `_spender` to spend no more than `_value` tokens\\n    /// on your behalf and then ping the contract about it.\\n    /// @param _spender The address authorized to spend.\\n    /// @param _value The max amount they can spend.\\n    /// @param _extraData Extra information to send to the approved contract.\\n    function approveAndCall(\\n        address _spender,\\n        uint256 _value,\\n        bytes memory _extraData\\n    ) public returns (bool success) {\\n        tokenRecipient spender = tokenRecipient(_spender);\\n        if (approve(_spender, _value)) {\\n            spender.receiveApproval(\\n                msg.sender,\\n                _value,\\n                address(this),\\n                _extraData\\n            );\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/PhasedEscrow.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./Escrow.sol\\\";\\n\\ninterface IBeneficiaryContract {\\n    function __escrowSentTokens(uint256 amount) external;\\n}\\n\\n/// @title PhasedEscrow\\n/// @notice A token holder contract allowing contract owner to set beneficiary of\\n///         tokens held by the contract and allowing the owner to withdraw the\\n///         tokens to that beneficiary in phases.\\ncontract PhasedEscrow is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event BeneficiaryUpdated(address beneficiary);\\n    event TokensWithdrawn(address beneficiary, uint256 amount);\\n\\n    IERC20 public token;\\n    IBeneficiaryContract public beneficiary;\\n\\n    constructor(IERC20 _token) public {\\n        token = _token;\\n    }\\n\\n    /// @notice Sets the provided address as a beneficiary allowing it to\\n    ///         withdraw all tokens from escrow. This function can be called only\\n    ///         by escrow owner.\\n    function setBeneficiary(IBeneficiaryContract _beneficiary)\\n        external\\n        onlyOwner\\n    {\\n        beneficiary = _beneficiary;\\n        emit BeneficiaryUpdated(address(beneficiary));\\n    }\\n\\n    /// @notice Withdraws the specified number of tokens from escrow to the\\n    ///         beneficiary. If the beneficiary is not set, or there are\\n    ///         insufficient tokens in escrow, the function fails.\\n    function withdraw(uint256 amount) external onlyOwner {\\n        require(address(beneficiary) != address(0), \\\"Beneficiary not assigned\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n        require(amount <= balance, \\\"Not enough tokens for withdrawal\\\");\\n\\n        token.safeTransfer(address(beneficiary), amount);\\n        emit TokensWithdrawn(address(beneficiary), amount);\\n\\n        beneficiary.__escrowSentTokens(amount);\\n    }\\n\\n    /// @notice Funds the escrow by transferring all of the approved tokens\\n    ///         to the escrow.\\n    function receiveApproval(\\n        address _from,\\n        uint256 _value,\\n        address _token,\\n        bytes memory\\n    ) public {\\n        require(IERC20(_token) == token, \\\"Unsupported token\\\");\\n        token.safeTransferFrom(_from, address(this), _value);\\n    }\\n\\n    /// @notice Withdraws all funds from a non-phased Escrow passed as\\n    ///         a parameter. For this function to succeed, this PhasedEscrow\\n    ///         has to be set as a beneficiary of the non-phased Escrow.\\n    function withdrawFromEscrow(Escrow _escrow) public {\\n        _escrow.withdraw();\\n    }\\n}\\n\\n/// @title BatchedPhasedEscrow\\n/// @notice A token holder contract allowing contract owner to approve a set of\\n///         beneficiaries of tokens held by the contract, to appoint a separate\\n///         drawee role, and allowing that drawee to withdraw tokens to approved\\n///         beneficiaries in phases.\\ncontract BatchedPhasedEscrow is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event BeneficiaryApproved(address beneficiary);\\n    event TokensWithdrawn(address beneficiary, uint256 amount);\\n    event DraweeRoleTransferred(address oldDrawee, address newDrawee);\\n\\n    IERC20 public token;\\n    address public drawee;\\n    mapping(address => bool) private approvedBeneficiaries;\\n\\n    modifier onlyDrawee() {\\n        require(drawee == msg.sender, \\\"Caller is not the drawee\\\");\\n        _;\\n    }\\n\\n    constructor(IERC20 _token) public {\\n        token = _token;\\n        drawee = msg.sender;\\n    }\\n\\n    /// @notice Approves the provided address as a beneficiary of tokens held by\\n    ///         the escrow. Can be called only by escrow owner.\\n    function approveBeneficiary(IBeneficiaryContract _beneficiary)\\n        external\\n        onlyOwner\\n    {\\n        address beneficiaryAddress = address(_beneficiary);\\n        require(\\n            beneficiaryAddress != address(0),\\n            \\\"Beneficiary can not be zero address\\\"\\n        );\\n        approvedBeneficiaries[beneficiaryAddress] = true;\\n        emit BeneficiaryApproved(beneficiaryAddress);\\n    }\\n\\n    /// @notice Returns `true` if the given address has been approved as a\\n    ///         beneficiary of the escrow, `false` otherwise.\\n    function isBeneficiaryApproved(IBeneficiaryContract _beneficiary)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return approvedBeneficiaries[address(_beneficiary)];\\n    }\\n\\n    /// @notice Transfers the role of drawee to another address. Can be called\\n    ///         only by the contract owner.\\n    function setDrawee(address newDrawee) public onlyOwner {\\n        require(newDrawee != address(0), \\\"New drawee can not be zero address\\\");\\n        emit DraweeRoleTransferred(drawee, newDrawee);\\n        drawee = newDrawee;\\n    }\\n\\n    /// @notice Funds the escrow by transferring all of the approved tokens\\n    ///         to the escrow.\\n    function receiveApproval(\\n        address _from,\\n        uint256 _value,\\n        address _token,\\n        bytes memory\\n    ) public {\\n        require(IERC20(_token) == token, \\\"Unsupported token\\\");\\n        token.safeTransferFrom(_from, address(this), _value);\\n    }\\n\\n    /// @notice Withdraws tokens from escrow to selected beneficiaries,\\n    ///         transferring to each beneficiary the amount of tokens specified\\n    ///         as a parameter. Only beneficiaries previously approved by escrow\\n    ///         owner can receive funds.\\n    function batchedWithdraw(\\n        IBeneficiaryContract[] memory beneficiaries,\\n        uint256[] memory amounts\\n    ) public onlyDrawee {\\n        require(\\n            beneficiaries.length == amounts.length,\\n            \\\"Mismatched arrays length\\\"\\n        );\\n\\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\\n            IBeneficiaryContract beneficiary = beneficiaries[i];\\n            require(\\n                isBeneficiaryApproved(beneficiary),\\n                \\\"Beneficiary was not approved\\\"\\n            );\\n            withdraw(beneficiary, amounts[i]);\\n        }\\n    }\\n\\n    function withdraw(IBeneficiaryContract beneficiary, uint256 amount)\\n        private\\n    {\\n        token.safeTransfer(address(beneficiary), amount);\\n        emit TokensWithdrawn(address(beneficiary), amount);\\n        beneficiary.__escrowSentTokens(amount);\\n    }\\n}\\n\\n// Interface representing staking pool rewards contract such as CurveRewards\\n// contract deployed for Keep (0xAF379f0228ad0d46bB7B4f38f9dc9bCC1ad0360c) or\\n// LPRewards contract from keep-ecdsa repository deployed for Uniswap.\\ninterface IStakingPoolRewards {\\n    function notifyRewardAmount(uint256 amount) external;\\n}\\n\\n/// @title StakingPoolRewardsEscrowBeneficiary\\n/// @notice A beneficiary contract that can receive a withdrawal phase from a\\n///         PhasedEscrow contract. Immediately stakes the received tokens on a\\n///         designated IStakingPoolRewards contract.\\ncontract StakingPoolRewardsEscrowBeneficiary is Ownable, IBeneficiaryContract {\\n    IERC20 public token;\\n    IStakingPoolRewards public rewards;\\n\\n    constructor(IERC20 _token, IStakingPoolRewards _rewards) public {\\n        token = _token;\\n        rewards = _rewards;\\n    }\\n\\n    function __escrowSentTokens(uint256 amount) external onlyOwner {\\n        token.approve(address(rewards), amount);\\n        rewards.notifyRewardAmount(amount);\\n    }\\n}\\n\\n/// @dev Interface of recipient contract for approveAndCall pattern.\\ninterface IStakerRewards {\\n    function receiveApproval(\\n        address _from,\\n        uint256 _value,\\n        address _token,\\n        bytes calldata _extraData\\n    ) external;\\n}\\n\\n/// @title StakerRewardsBeneficiary\\n/// @notice An abstract beneficiary contract that can receive a withdrawal phase\\n///         from a PhasedEscrow contract. The received tokens are immediately\\n///         funded for a designated rewards escrow beneficiary contract.\\ncontract StakerRewardsBeneficiary is Ownable {\\n    IERC20 public token;\\n    IStakerRewards public stakerRewards;\\n\\n    constructor(IERC20 _token, IStakerRewards _stakerRewards) public {\\n        token = _token;\\n        stakerRewards = _stakerRewards;\\n    }\\n\\n    function __escrowSentTokens(uint256 amount) external onlyOwner {\\n        bool success = token.approve(address(stakerRewards), amount);\\n        require(success, \\\"Token transfer approval failed\\\");\\n\\n        stakerRewards.receiveApproval(\\n            address(this),\\n            amount,\\n            address(token),\\n            \\\"\\\"\\n        );\\n    }\\n}\\n\\n/// @title BeaconBackportRewardsEscrowBeneficiary\\n/// @notice Transfer the received tokens to a designated\\n///         BeaconBackportRewardsEscrowBeneficiary contract.\\ncontract BeaconBackportRewardsEscrowBeneficiary is StakerRewardsBeneficiary {\\n    constructor(IERC20 _token, IStakerRewards _stakerRewards)\\n        public\\n        StakerRewardsBeneficiary(_token, _stakerRewards)\\n    {}\\n}\\n\\n/// @title BeaconRewardsEscrowBeneficiary\\n/// @notice Transfer the received tokens to a designated\\n///         BeaconRewardsEscrowBeneficiary contract.\\ncontract BeaconRewardsEscrowBeneficiary is StakerRewardsBeneficiary {\\n    constructor(IERC20 _token, IStakerRewards _stakerRewards)\\n        public\\n        StakerRewardsBeneficiary(_token, _stakerRewards)\\n    {}\\n}\\n\"\r\n    },\r\n    \"solidity/contracts/Escrow.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"openzeppelin-solidity/contracts/ownership/Ownable.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n// @title Escrow\\n// @notice A token holder contract allowing contract owner to set beneficiary of\\n// all tokens held by the contract and allowing the beneficiary to withdraw\\n// the tokens.\\ncontract Escrow is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event BeneficiaryUpdated(address beneficiary);\\n    event TokensWithdrawn(address beneficiary, uint256 amount);\\n\\n    IERC20 public token;\\n    address public beneficiary;\\n\\n    constructor(IERC20 _token) public {\\n        token = _token;\\n    }\\n\\n    // @notice Sets the provided address as a beneficiary allowing it to\\n    // withdraw all tokens from escrow. This function can be called only\\n    // by escrow owner.\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiaryUpdated(beneficiary);\\n    }\\n\\n    // @notice Withdraws all tokens from escrow to the beneficiary.\\n    // If the beneficiary is not set, caller is not the beneficiary, or there\\n    // are no tokens in escrow, function fails.\\n    function withdraw() public {\\n        require(beneficiary != address(0), \\\"Beneficiary not assigned\\\");\\n        require(msg.sender == beneficiary, \\\"Caller is not the beneficiary\\\");\\n\\n        uint256 amount = token.balanceOf(address(this));\\n        require(amount > 0, \\\"No tokens to withdraw\\\");\\n\\n        token.safeTransfer(beneficiary, amount);\\n        emit TokensWithdrawn(beneficiary, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\n     * execution of a contract's constructor, its address will be reported as\\n     * not containing a contract.\\n     *\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\n     * function returns false is an externally-owned account (EOA) and not a\\n     * contract.\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract KeepToken\",\"name\":\"_keepToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxUnlockSchedules\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusPeriodSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSharesPerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationSec\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDurationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDurationSec\",\"type\":\"uint256\"}],\"name\":\"DurationSecUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRewardDistribution\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardDistribution\",\"type\":\"address\"}],\"name\":\"RewardDistributionRoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"BONUS_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPeriodSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFundsFromStakingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDurationSec\",\"type\":\"uint256\"}],\"name\":\"setDurationSec\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardDistribution\",\"type\":\"address\"}],\"name\":\"setRewardDistribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStakingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockScheduleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialLockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTimestampSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAtSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAccounting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeepVault", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000085eee30c52b0b379b046fb0f85f4f3dc3009afec000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000278d00", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://db3a633c1081079d0cc0971393919d8bf3d93acf4ca8fb8364314f92ddd7139d"}