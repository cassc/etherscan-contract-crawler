{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n    pragma solidity ^0.8.0;\r\n\r\n    interface IERC20 {       \r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library SafeMath {\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n        {    return a + b; }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n        {    return a - b; }\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n        {    return a * b; }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n        {    return a / b; }\r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b <= a, errorMessage);\r\n                return a - b;\r\n            }\r\n        }\r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            unchecked {\r\n                require(b > 0, errorMessage);\r\n                return a / b;\r\n            }\r\n        }  \r\n    }\r\n\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) \r\n        {    return msg.sender; }\r\n\r\n        function _msgData() internal view virtual returns (bytes calldata) \r\n        {  \r\n             this; \r\n            return msg.data;\r\n        }\r\n    }\r\n\r\n    abstract contract Ownable is Context {\r\n        address internal _owner;\r\n        address private _previousOwner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n        constructor () {\r\n            _owner = _msgSender();\r\n            emit OwnershipTransferred(address(0), _owner);\r\n        }\r\n        function owner() public view virtual returns (address) {\r\n            return _owner;\r\n        }\r\n        modifier onlyOwner() {\r\n            require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n    interface IERC20Metadata is IERC20 \r\n    {\r\n         function name() external view returns (string memory);\r\n         function symbol() external view returns (string memory);\r\n         function decimals() external view returns (uint8);\r\n    }\r\n\r\n    contract ERC20 is Context,Ownable, IERC20, IERC20Metadata {\r\n        using SafeMath for uint256;\r\n\r\n        mapping(address => uint256) private _balances;\r\n        mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n        uint256 private _totalSupply;\r\n\r\n        string private _name;\r\n        string private _symbol;\r\n        \r\n        constructor(string memory name_, string memory symbol_) {\r\n            _name = name_;\r\n            _symbol = symbol_;\r\n        }\r\n        function name() public view virtual override returns (string memory) {\r\n            return _name;\r\n        }\r\n        function symbol() public view virtual override returns (string memory) {\r\n            return _symbol;\r\n        }\r\n        function decimals() public view virtual override returns (uint8) {\r\n            return 18;\r\n        }\r\n        function totalSupply() public view virtual override returns (uint256) {\r\n            return _totalSupply;\r\n        }\r\n        function balanceOf(address account) public view virtual override returns (uint256) {\r\n            return _balances[account];\r\n        }\r\n        function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n        function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) public virtual override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n            return true;\r\n        }\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n            _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n            return true;\r\n        }\r\n        function _transfer(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n            _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        function _mint(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n            _beforeTokenTransfer(address(0), account, amount);\r\n\r\n            _totalSupply = _totalSupply.add(amount);\r\n            _balances[account] = _balances[account].add(amount);\r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n        function _burn(address account, uint256 amount) internal virtual {\r\n            require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n            _beforeTokenTransfer(account, address(0), amount);\r\n\r\n            _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n            _totalSupply = _totalSupply.sub(amount);\r\n            emit Transfer(account, address(0), amount);\r\n        }\r\n        function _approve(\r\n            address owner,\r\n            address spender,\r\n            uint256 amount\r\n        ) internal virtual {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n        function _beforeTokenTransfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {}\r\n    }\r\n\r\n\r\n    interface IUniswapV2Factory {\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    }\r\n\r\n    interface IUniswapV2Pair {\r\n        function factory() external view returns (address);\r\n    }\r\n\r\n    interface IUniswapV2Router01 {\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    }\r\n\r\n    interface IUniswapV2Router02 is IUniswapV2Router01 {     \r\n       function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n    }\r\n\r\n    contract SHOEY is ERC20 {\r\n        \r\n        using SafeMath for uint256;\r\n\r\n        mapping (address => bool) private _isExcludedFromFee;\r\n        mapping(address => bool) public blacklists;\r\n\r\n        address constant taxWalletAddress = 0xba79070019bBEd38D84Ff7351EFDcA53a317f22D;\r\n\r\n        uint256 public buyFee = 33;  \r\n        uint256 public sellFee = 33; \r\n\r\n        IUniswapV2Router02 public uniswapV2Router;\r\n        address public uniswapV2Pair;\r\n        \r\n        constructor () ERC20(\"Shoey\", \"$SHOEY\"){\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this), _uniswapV2Router.WETH());\r\n            uniswapV2Router = _uniswapV2Router;\r\n\r\n            _isExcludedFromFee[_msgSender()] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n            \r\n            blacklists[0x6b75d8AF000000e20B7a7DDf000Ba900b4009A80] = true;\r\n            blacklists[0xb0baBabE78a9be0810fAdf99Dd2eD31ed12568bE] = true;\r\n\r\n            _mint(owner(), 333000000000000  * 10 ** decimals());\r\n\r\n        }\r\n\r\n        function excludeFromFee(address account) public onlyOwner \r\n        { _isExcludedFromFee[account] = true;}\r\n        \r\n        function includeInFee(address account) public onlyOwner \r\n        { _isExcludedFromFee[account] = false;}\r\n\r\n        function blacklist(address _address, bool _isBlacklisting) external onlyOwner {\r\n          blacklists[_address] = _isBlacklisting;\r\n        }\r\n\r\n        function setFee(\r\n            uint256 bFee,\r\n            uint256 sFee\r\n        ) external onlyOwner \r\n        {   \r\n            buyFee = bFee;\r\n            sellFee = sFee;\r\n        }\r\n        \r\n        function isExcludedFromFee(address account) public view returns(bool) {\r\n            return _isExcludedFromFee[account];\r\n        }\r\n\r\n        function isBlacklisted(address account) public view returns(bool) {\r\n            return blacklists[account];\r\n        }\r\n\r\n        function _transfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal override {\r\n            require(from != address(0), \"ERC20: transfer from the zero address\");\r\n            require(to != address(0), \"ERC20: transfer to the zero address\");\r\n            require(amount > 0, \"Transfer amount must be greater than zero\");\r\n            require(!blacklists[to] && !blacklists[from], \"ERC20: This address blacklisted.\");\r\n\r\n          \r\n            bool takeFee = true;\r\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n                super._transfer(from, to, amount);\r\n                takeFee = false;\r\n            } else {\r\n            if (from == uniswapV2Pair) {\r\n                // Buy\r\n                uint256 taxTokens = amount.mul(buyFee).div(10000);\r\n                amount= amount.sub(taxTokens);\r\n                super._transfer(from, taxWalletAddress, taxTokens);\r\n                super._transfer(from, to, amount);\r\n\r\n            } else if (to == uniswapV2Pair) {\r\n                // Sell\r\n                uint256 taxTokens = amount.mul(sellFee).div(10000);\r\n                amount= amount.sub(taxTokens);\r\n                super._transfer(from, taxWalletAddress, taxTokens);\r\n                super._transfer(from, to, amount);\r\n            } else {\r\n                // Transfer\r\n                super._transfer(from, to, amount);\r\n            }       \r\n        }\r\n        }\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SHOEY", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5046ee4c5493cfbe4012a2c6060f649988d504eb588b649500145acf34137680"}