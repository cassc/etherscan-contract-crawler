{"SourceCode": "# @version 0.3.7\r\n\"\"\"\r\n@title Curve LP Module\r\n@author 0xkorin, Yearn Finance\r\n@license Copyright (c) Yearn Finance, 2023 - all rights reserved\r\n@notice\r\n    Module to manage the POL's yETH/ETH position.\r\n    Controlled by two roles: management and operator.\r\n    Operator can deposit/withdraw into Curve and subsequently into gauge/Convex/yVault.\r\n    Management can set relevant addresses\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\ninterface POL:\r\n    def receive_native(): payable\r\n    def send_native(_receiver: address, _amount: uint256): nonpayable\r\n    def mint(_amount: uint256): nonpayable\r\n    def burn(_amount: uint256): nonpayable\r\n\r\n# https://github.com/curvefi/curve-factory/blob/master/contracts/implementations/plain-2/Plain2ETHEMA.vy\r\ninterface CurvePool:\r\n    def add_liquidity(_amounts: uint256[2], _min_mint_amount: uint256) -> uint256: payable\r\n    def remove_liquidity(_burn_amount: uint256, _min_amounts: uint256[2]) -> uint256[2]: nonpayable\r\n    def remove_liquidity_imbalance(_amounts: uint256[2], _max_burn_amount: uint256) -> uint256: nonpayable\r\n\r\n# https://github.com/curvefi/curve-factory/blob/master/contracts/LiquidityGauge.vy\r\ninterface CurveGauge:\r\n    def set_rewards_receiver(_receiver: address): nonpayable\r\n    def deposit(_value: uint256): nonpayable\r\n    def withdraw(_value: uint256): nonpayable\r\n\r\n# https://github.com/convex-eth/platform/blob/main/contracts/contracts/Booster.sol\r\ninterface ConvexBooster:\r\n    def deposit(_pid: uint256, _amount: uint256, _stake: bool) -> bool: nonpayable\r\n    def withdraw(_pid: uint256, _amount: uint256) -> bool: nonpayable\r\n\r\n# https://github.com/convex-eth/platform/blob/main/contracts/contracts/BaseRewardPool.sol\r\ninterface ConvexRewards:\r\n    def stake(_amount: uint256): nonpayable\r\n    def withdraw(_amount: uint256, _claim: bool): nonpayable\r\n    def withdrawAndUnwrap(_amount: uint256, _claim: bool): nonpayable\r\n\r\n# https://github.com/yearn/yearn-vaults/blob/master/contracts/Vault.vy\r\ninterface YVault:\r\n    def deposit(_amount: uint256) -> uint256: nonpayable\r\n    def withdraw(_shares: uint256, _recipient: address, _max_loss: uint256) -> uint256: nonpayable\r\n\r\ntoken: public(immutable(address))\r\npol: public(immutable(address))\r\nmanagement: public(address)\r\npending_management: public(address)\r\noperator: public(address)\r\npending_operator: public(address)\r\npool: public(address)\r\ngauge: public(address)\r\nconvex_booster: public(address)\r\nconvex_pool_id: public(uint256)\r\nconvex_token: public(address)\r\nconvex_rewards: public(address)\r\nyvault: public(address)\r\n\r\nevent SetAddress:\r\n    index: indexed(uint256)\r\n    value: address\r\n\r\nevent SetConvexPoolId:\r\n    pool_id: indexed(uint256)\r\n\r\nevent PendingManagement:\r\n    management: indexed(address)\r\n\r\nevent SetManagement:\r\n    management: indexed(address)\r\n\r\nevent PendingOperator:\r\n    operator: indexed(address)\r\n\r\nevent SetOperator:\r\n    operator: indexed(address)\r\n\r\nevent FromPOL:\r\n    token: indexed(address)\r\n    amount: uint256\r\n\r\nevent ToPOL:\r\n    token: indexed(address)\r\n    amount: uint256\r\n\r\nevent AddLiquidity:\r\n    amounts_in: uint256[2]\r\n    amount_out: uint256\r\n\r\nevent RemoveLiquidity:\r\n    amount_in: uint256\r\n    amounts_out: uint256[2]\r\n\r\nevent Deposit:\r\n    pool: indexed(uint256)\r\n    amount_in: uint256\r\n    amount_out: uint256\r\n\r\nevent Withdraw:\r\n    pool: indexed(uint256)\r\n    amount_in: uint256\r\n    amount_out: uint256\r\n\r\nNATIVE: constant(address) = 0x0000000000000000000000000000000000000000\r\nMINT: constant(address)   = 0x0000000000000000000000000000000000000001\r\nBURN: constant(address)   = 0x0000000000000000000000000000000000000002\r\n\r\n@external\r\ndef __init__(_token: address, _pol: address):\r\n    \"\"\"\r\n    @notice Constructor\r\n    @param _token yETH token address\r\n    @param _pol POL address\r\n    \"\"\"\r\n    token = _token\r\n    pol = _pol\r\n    self.management = msg.sender\r\n    self.operator = msg.sender\r\n\r\n@external\r\n@payable\r\ndef __default__():\r\n    \"\"\"\r\n    @notice Receive ETH\r\n    \"\"\"\r\n    pass\r\n\r\n@external\r\ndef from_pol(_token: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Transfer `_amount` of `_token` from POL to this contract\r\n    @param _token \r\n        Token to transfer out of POL.\r\n        Use special designated values to mint/burn yETH or transfer ETH\r\n    @param _amount Amount of tokens to transfer\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    if _token == NATIVE:\r\n        POL(pol).send_native(self, _amount)\r\n    elif _token == MINT:\r\n        POL(pol).mint(_amount)\r\n    elif _token == BURN:\r\n        POL(pol).burn(_amount)\r\n    else:\r\n        assert ERC20(_token).transferFrom(pol, self, _amount, default_return_value=True)\r\n    log FromPOL(_token, _amount)\r\n\r\n@external\r\ndef to_pol(_token: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Transfer `_amount` of `_token` to POL from this contract\r\n    @param _token \r\n        Token to transfer into POL.\r\n        Use special designated value to transfer ETH\r\n    @param _amount Amount of tokens to transfer\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    if _token == NATIVE:\r\n        POL(pol).receive_native(value=_amount)\r\n    else:\r\n        assert ERC20(_token).transfer(pol, _amount, default_return_value=True)\r\n    log ToPOL(_token, _amount)\r\n\r\n@external\r\ndef set_operator(_operator: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending operator address.\r\n        Needs to be accepted by that account separately to transfer operator over\r\n    @param _operator New pending operator address\r\n    \"\"\"\r\n    assert msg.sender == self.operator or msg.sender == self.management\r\n    self.pending_operator = _operator\r\n    log PendingOperator(_operator)\r\n\r\n@external\r\ndef accept_operator():\r\n    \"\"\"\r\n    @notice \r\n        Accept operator role.\r\n        Can only be called by account previously marked as pending operator by current operator\r\n    \"\"\"\r\n    assert msg.sender == self.pending_operator\r\n    self.pending_operator = empty(address)\r\n    self.operator = msg.sender\r\n    log SetOperator(msg.sender)\r\n\r\n@external\r\ndef set_management(_management: address):\r\n    \"\"\"\r\n    @notice \r\n        Set the pending management address.\r\n        Needs to be accepted by that account separately to transfer management over\r\n    @param _management New pending management address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pending_management = _management\r\n    log PendingManagement(_management)\r\n\r\n@external\r\ndef accept_management():\r\n    \"\"\"\r\n    @notice \r\n        Accept management role.\r\n        Can only be called by account previously marked as pending management by current management\r\n    \"\"\"\r\n    assert msg.sender == self.pending_management\r\n    self.pending_management = empty(address)\r\n    self.management = msg.sender\r\n    log SetManagement(msg.sender)\r\n\r\n@external\r\ndef remove_allowance(_token: address, _spender: address):\r\n    assert msg.sender == self.operator\r\n    assert ERC20(_token).approve(_spender, 0, default_return_value=True)\r\n\r\n# CURVE POOL FUNCTIONS\r\n\r\n@external\r\ndef set_pool(_pool: address):\r\n    \"\"\"\r\n    @notice Set Curve yETH/ETH pool\r\n    @param _pool Pool address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.pool = _pool\r\n    log SetAddress(0, _pool)\r\n\r\n@external\r\ndef approve_pool(_amount: uint256):\r\n    \"\"\"\r\n    @notice Approve Curve pool to transfer yETH\r\n    @param _amount Amount of tokens to approve\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    assert self.pool != empty(address)\r\n    assert ERC20(token).approve(self.pool, _amount, default_return_value=True)\r\n\r\n@external\r\ndef add_liquidity(_amounts: uint256[2], _min_lp: uint256):\r\n    \"\"\"\r\n    @notice Add liquidity to the Curve pool\r\n    @param _amounts ETH and yETH amounts\r\n    @param _min_lp Minimum amount of LP tokens to receive\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    lp: uint256 = CurvePool(self.pool).add_liquidity(_amounts, _min_lp, value=_amounts[0])\r\n    log AddLiquidity(_amounts, lp)\r\n\r\n@external\r\ndef remove_liquidity(_lp_amount: uint256, _min_amounts: uint256[2], _pool: address = empty(address)):\r\n    \"\"\"\r\n    @notice Remove liquidity from the Curve pool\r\n    @param _lp_amount Amount of LP tokens to redeem\r\n    @param _min_amounts Minimum amounts of ETH and yETH to receive\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    pool: address = _pool\r\n    if _pool == empty(address):\r\n        pool = self.pool\r\n\r\n    amounts: uint256[2] = CurvePool(pool).remove_liquidity(_lp_amount, _min_amounts)\r\n    log RemoveLiquidity(_lp_amount, amounts)\r\n\r\n@external\r\ndef remove_liquidity_imbalance(_amounts: uint256[2], _max_lp: uint256, _pool: address = empty(address)):\r\n    \"\"\"\r\n    @notice Remove liquidity from the Curve pool in an imbalanced way\r\n    @param _amounts Amounts of ETH and yETH to receive\r\n    @param _max_lp Maximum amount of LP tokens to redeem\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    pool: address = _pool\r\n    if _pool == empty(address):\r\n        pool = self.pool\r\n\r\n    lp: uint256 = CurvePool(pool).remove_liquidity_imbalance(_amounts, _max_lp)\r\n    log RemoveLiquidity(lp, _amounts)\r\n\r\n# GAUGE FUNCTIONS\r\n\r\n@external\r\ndef set_gauge(_gauge: address):\r\n    \"\"\"\r\n    @notice Set Curve gauge address\r\n    @param _gauge Gauge address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.gauge = _gauge\r\n    log SetAddress(1, _gauge)\r\n\r\n@external\r\ndef approve_gauge(_amount: uint256):\r\n    \"\"\"\r\n    @notice Approve gauge to transfer yETH\r\n    @param _amount Amount of tokens to approve\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    assert self.gauge != empty(address)\r\n    assert ERC20(self.pool).approve(self.gauge, _amount, default_return_value=True)\r\n\r\n@external\r\ndef gauge_rewards_receiver():\r\n    \"\"\"\r\n    @notice Set POL as Curve gauge rewards receiver\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    CurveGauge(self.gauge).set_rewards_receiver(pol)\r\n\r\n@external\r\ndef deposit_gauge(_amount: uint256):\r\n    \"\"\"\r\n    @notice Deposit LP tokens into gauge\r\n    @param _amount Amount of tokens to deposit\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    CurveGauge(self.gauge).deposit(_amount)\r\n    log Deposit(0, _amount, _amount)\r\n\r\n@external\r\ndef withdraw_gauge(_amount: uint256, _gauge: address = empty(address)):\r\n    \"\"\"\r\n    @notice Withdraw LP tokens from gauge\r\n    @param _amount Amount of tokens to withdraw\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    gauge: address = _gauge\r\n    if _gauge == empty(address):\r\n        gauge = self.gauge\r\n\r\n    CurveGauge(gauge).withdraw(_amount)\r\n    log Withdraw(0, _amount, _amount)\r\n    \r\n# CONVEX FUNCTIONS\r\n\r\n@external\r\ndef set_convex_booster(_booster: address):\r\n    \"\"\"\r\n    @notice Set Convex booster address\r\n    @param _booster Booster address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.convex_booster = _booster\r\n    log SetAddress(2, _booster)\r\n\r\n@external\r\ndef set_convex_pool_id(_pool_id: uint256):\r\n    \"\"\"\r\n    @notice Set pool id for yETH/ETH pool\r\n    @param _pool_id Pool id\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.convex_pool_id = _pool_id\r\n    log SetConvexPoolId(_pool_id)\r\n\r\n@external\r\ndef set_convex_token(_token: address):\r\n    \"\"\"\r\n    @notice Set Convex pool token\r\n    @param _token Token address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.convex_token = _token\r\n    log SetAddress(3, _token)\r\n\r\n@external\r\ndef set_convex_rewards(_rewards: address):\r\n    \"\"\"\r\n    @notice Set Convex rewards address\r\n    @param _rewards Rewards address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.convex_rewards = _rewards\r\n    log SetAddress(4, _rewards)\r\n\r\n@external\r\ndef approve_convex_booster(_amount: uint256):\r\n    \"\"\"\r\n    @notice Approve Convex booster to transfer LP tokens\r\n    @param _amount Amount of tokens to approve\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    assert self.convex_booster != empty(address)\r\n    assert ERC20(self.pool).approve(self.convex_booster, _amount, default_return_value=True)\r\n\r\n@external\r\ndef deposit_convex_booster(_amount: uint256, _stake: bool):\r\n    \"\"\"\r\n    @notice Deposit LP tokens into Convex\r\n    @param _amount Amount of tokens to deposit\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    assert self.convex_pool_id != 0\r\n    ConvexBooster(self.convex_booster).deposit(self.convex_pool_id, _amount, _stake)\r\n    log Deposit(1, _amount, _amount)\r\n\r\n@external\r\ndef withdraw_convex_booster(_amount: uint256, _booster: address = empty(address), _pool_id: uint256 = 0):\r\n    \"\"\"\r\n    @notice Withdraw LP tokens from Convex\r\n    @param _amount Amount of tokens to withdraw\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    booster: address = _booster\r\n    if _booster == empty(address):\r\n        booster = self.convex_booster\r\n    pool_id: uint256 = _pool_id\r\n    if _pool_id == 0:\r\n        pool_id = self.convex_pool_id\r\n        assert pool_id != 0\r\n\r\n    ConvexBooster(booster).withdraw(pool_id, _amount)\r\n    log Withdraw(1, _amount, _amount)\r\n\r\n@external\r\ndef approve_convex_rewards(_amount: uint256):\r\n    \"\"\"\r\n    @notice Approve Convex rewards contract to transfer Convex LP tokens\r\n    @param _amount Amount of tokens to approve\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    assert self.convex_rewards != empty(address)\r\n    assert ERC20(self.convex_token).approve(self.convex_rewards, _amount, default_return_value=True)\r\n\r\n@external\r\ndef deposit_convex_rewards(_amount: uint256):\r\n    \"\"\"\r\n    @notice Deposit Convex LP tokens into rewards contract\r\n    @param _amount Amount of tokens to deposit\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    ConvexRewards(self.convex_rewards).stake(_amount)\r\n    log Deposit(2, _amount, _amount)\r\n\r\n@external\r\ndef withdraw_convex_rewards(_amount: uint256, _unwrap: bool, _rewards: address = empty(address)):\r\n    \"\"\"\r\n    @notice Withdraw Convex LP tokens from rewards contract\r\n    @param _amount Amount of tokens to withdraw\r\n    @param _unwrap True to also withdraw from Convex booster, False otherwise\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    rewards: address = _rewards\r\n    if _rewards == empty(address):\r\n        rewards = self.convex_rewards\r\n\r\n    if _unwrap:\r\n        ConvexRewards(rewards).withdrawAndUnwrap(_amount, True)\r\n        log Withdraw(1, _amount, _amount)\r\n    else:\r\n        ConvexRewards(rewards).withdraw(_amount, True)\r\n    log Withdraw(2, _amount, _amount)\r\n\r\n# YVAULT FUNCTIONS\r\n\r\n@external\r\ndef set_yvault(_yvault: address):\r\n    \"\"\"\r\n    @notice Set yearn vault contract\r\n    @param _yvault Yearn vault address\r\n    \"\"\"\r\n    assert msg.sender == self.management\r\n    self.yvault = _yvault\r\n    log SetAddress(5, _yvault)\r\n\r\n@external\r\ndef approve_yvault(_amount: uint256):\r\n    \"\"\"\r\n    @notice Approve Yearn vault to transfer LP tokens\r\n    @param _amount Amount of tokens to approve\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    assert self.yvault != empty(address)\r\n    assert ERC20(self.pool).approve(self.yvault, _amount, default_return_value=True)\r\n\r\n@external\r\ndef deposit_yvault(_amount: uint256):\r\n    \"\"\"\r\n    @notice Deposit LP tokens into Yearn vault\r\n    @param _amount Amount of tokens to deposit\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    shares: uint256 = YVault(self.yvault).deposit(_amount)\r\n    log Deposit(3, _amount, shares)\r\n\r\n@external\r\ndef withdraw_yvault(_shares: uint256, _max_loss: uint256, _vault: address = empty(address)):\r\n    \"\"\"\r\n    @notice Withdraw LP tokens from Yearn vault\r\n    @param _shares Amount of shares to withdraw\r\n    @param _max_loss Max loss during withdrawal\r\n    \"\"\"\r\n    assert msg.sender == self.operator\r\n    vault: address = _vault\r\n    if _vault == empty(address):\r\n        vault = self.yvault\r\n\r\n    amount: uint256 = YVault(vault).withdraw(_shares, self, _max_loss)\r\n    log Withdraw(3, _shares, amount)", "ABI": "[{\"name\":\"SetAddress\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"value\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetConvexPoolId\",\"inputs\":[{\"name\":\"pool_id\",\"type\":\"uint256\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetManagement\",\"inputs\":[{\"name\":\"management\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PendingOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FromPOL\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ToPOL\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddLiquidity\",\"inputs\":[{\"name\":\"amounts_in\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"amount_out\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidity\",\"inputs\":[{\"name\":\"amount_in\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amounts_out\",\"type\":\"uint256[2]\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Deposit\",\"inputs\":[{\"name\":\"pool\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"amount_in\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount_out\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Withdraw\",\"inputs\":[{\"name\":\"pool\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"amount_in\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"amount_out\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_pol\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"from_pol\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"to_pol\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_operator\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_operator\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_management\",\"inputs\":[{\"name\":\"_management\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_management\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_allowance\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_pool\",\"inputs\":[{\"name\":\"_pool\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve_pool\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_min_lp\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_lp_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_lp_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_pool\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_lp\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_lp\",\"type\":\"uint256\"},{\"name\":\"_pool\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_gauge\",\"inputs\":[{\"name\":\"_gauge\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve_gauge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"gauge_rewards_receiver\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit_gauge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_gauge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_gauge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_gauge\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_convex_booster\",\"inputs\":[{\"name\":\"_booster\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_convex_pool_id\",\"inputs\":[{\"name\":\"_pool_id\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_convex_token\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_convex_rewards\",\"inputs\":[{\"name\":\"_rewards\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve_convex_booster\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit_convex_booster\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_stake\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_convex_booster\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_convex_booster\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_booster\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_convex_booster\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_booster\",\"type\":\"address\"},{\"name\":\"_pool_id\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve_convex_rewards\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit_convex_rewards\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_convex_rewards\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unwrap\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_convex_rewards\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unwrap\",\"type\":\"bool\"},{\"name\":\"_rewards\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_yvault\",\"inputs\":[{\"name\":\"_yvault\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve_yvault\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deposit_yvault\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_yvault\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_max_loss\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_yvault\",\"inputs\":[{\"name\":\"_shares\",\"type\":\"uint256\"},{\"name\":\"_max_loss\",\"type\":\"uint256\"},{\"name\":\"_vault\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_management\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"operator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pending_operator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pool\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"gauge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convex_booster\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convex_pool_id\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convex_token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"convex_rewards\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"yvault\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Curve LP Module", "CompilerVersion": "vyper:0.3.7", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000001bed97cbc3c24a4fb5c069c6e311a967386131f7000000000000000000000000929401e30aab6bd648def2d30ff44952bab04478", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}