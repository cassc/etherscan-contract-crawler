{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/WETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"openzeppelin-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IOmniToken.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\nimport \\\"./interfaces/IWithUnderlying.sol\\\";\\nimport \\\"./SubAccount.sol\\\";\\n\\n/**\\n * @title WETHGateway\\n * @notice Handles native ETH deposits directly to contract through WETH, but does not handle native ETH withdrawals.\\n * @dev This contract serves as a gateway for handling deposits of native ETH, which are then wrapped into WETH tokens.\\n */\\ncontract WETHGateway is Initializable {\\n    using SubAccount for address;\\n\\n    address public oweth;\\n    address public weth;\\n    uint96 private constant SUBACCOUNT_ID = 0;\\n\\n    event Deposit(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n\\n    /**\\n     * @notice Initializes the contract with the OWETH contract address.\\n     * @param _oweth The address of the OWETH contract.\\n     */\\n    function initialize(address _oweth) external initializer {\\n        address _weth = IWithUnderlying(_oweth).underlying();\\n        IWETH9(_weth).approve(_oweth, type(uint256).max);\\n        oweth = _oweth;\\n        weth = _weth;\\n    }\\n\\n    /**\\n     * @notice Deposits native ETH to the contract, wraps it into WETH tokens, and handles the deposit operation\\n     * through the Omni Token contract.\\n     * @dev The function is payable to accept ETH deposits.\\n     * @param _subId The subscription ID related to the depositor's account.\\n     * @param _trancheId The identifier of the tranche where the deposit is occurring.\\n     * @return share The number of shares received in exchange for the deposited ETH.\\n     */\\n    function deposit(uint96 _subId, uint8 _trancheId) external payable returns (uint256 share) {\\n        bytes32 to = msg.sender.toAccount(_subId);\\n        IWETH9(weth).deposit{value: msg.value}();\\n        share = IOmniToken(oweth).deposit(SUBACCOUNT_ID, _trancheId, msg.value);\\n        IOmniToken(oweth).transfer(SUBACCOUNT_ID, to, _trancheId, share);\\n        emit Deposit(to, _trancheId, msg.value, share);\\n    }\\n\\n    /**\\n     * @notice Fallback function that reverts if ETH is sent directly to the contract.\\n     * @dev Any attempts to send ETH directly to the contract will cause a transaction revert.\\n     */\\n    receive() external payable {\\n        revert(\\\"This contract should not accept ETH directly.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IOmniTokenBase.sol\\\";\\n\\n/**\\n * @title IOmniToken\\n * @notice Interface for the OmniToken contract which manages deposits, withdrawals, borrowings, and repayments within the Omni protocol.\\n */\\ninterface IOmniToken is IOmniTokenBase {\\n    /// Events\\n    event Accrue();\\n    event Deposit(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Withdraw(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Borrow(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Repay(bytes32 indexed account, address indexed payer, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Seize(bytes32 indexed account, bytes32 indexed to, uint256 amount, uint256[] seizedShares);\\n    event SetTrancheCount(uint8 trancheCount);\\n    event SetTrancheBorrowCaps(uint256[] borrowCaps);\\n    event SocializedLoss(bytes32 indexed account, uint8 indexed trancheId, uint256 amount, uint256 share);\\n    event Transfer(bytes32 indexed from, bytes32 indexed to, uint8 indexed trancheId, uint256 share);\\n\\n    /**\\n     * @notice Gets the address of the OmniPool contract.\\n     * @return The address of the OmniPool contract.\\n     */\\n    function omniPool() external view returns (address);\\n\\n    /**\\n     * @notice Gets the address of the Interest Rate Model (IRM) contract.\\n     * @return The address of the IRM contract.\\n     */\\n    function irm() external view returns (address);\\n\\n    /**\\n     * @notice Gets the last accrual time.\\n     * @return The timestamp of the last accrual time.\\n     */\\n    function lastAccrualTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the count of tranches.\\n     * @return The total number of tranches.\\n     */\\n    function trancheCount() external view returns (uint8);\\n\\n    /**\\n     * @notice Gets the reserve receiver.\\n     * @return The bytes32 identifier of the reserve receiver.\\n     */\\n    function reserveReceiver() external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the borrow cap for a specific tranche.\\n     * @param _trancheId The ID of the tranche for which to retrieve the borrow cap.\\n     * @return The borrow cap for the specified tranche.\\n     */\\n    function getBorrowCap(uint8 _trancheId) external view returns (uint256);\\n\\n    /**\\n     * @notice Accrues interest for all tranches, calculates and distributes the interest among the depositors and updates tranche balances.\\n     * The function also handles reserve payments. This method needs to be called before any deposit, withdrawal, borrow, or repayment actions to update the state of the contract.\\n     * @dev Interest is paid out proportionately to more risky tranche deposits per tranche\\n     */\\n    function accrue() external;\\n\\n    /**\\n     * @notice Deposits a specified amount into a specified tranche.\\n     * @param _subId Sub-account identifier for the depositor.\\n     * @param _trancheId Identifier of the tranche to deposit into.\\n     * @param _amount Amount to deposit.\\n     * @return share Amount of deposit shares received in exchange for the deposit.\\n     */\\n    function deposit(uint96 _subId, uint8 _trancheId, uint256 _amount) external returns (uint256 share);\\n\\n    /**\\n     * @notice Withdraws funds from a specified tranche.\\n     * @param _subId The ID of the sub-account.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _share The share of the user in the tranche.\\n     * @return amount The amount of funds withdrawn.\\n     */\\n    function withdraw(uint96 _subId, uint8 _trancheId, uint256 _share) external returns (uint256 amount);\\n\\n    /**\\n     * @notice Borrows funds from a specified tranche.\\n     * @param _account The account of the user.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to borrow.\\n     * @return share The share of the borrowed amount in the tranche.\\n     */\\n    function borrow(bytes32 _account, uint8 _trancheId, uint256 _amount) external returns (uint256 share);\\n\\n    /**\\n     * @notice Repays borrowed funds.\\n     * @param _account The account of the user.\\n     * @param _payer The account that will pay the borrowed amount.\\n     * @param _trancheId The ID of the tranche.\\n     * @param _amount The amount to repay.\\n     * @return amount The amount of the repaid amount in the tranche.\\n     */\\n    function repay(bytes32 _account, address _payer, uint8 _trancheId, uint256 _amount)\\n        external\\n        returns (uint256 amount);\\n\\n    /**\\n     * @notice Transfers specified shares from one account to another within a specified tranche.\\n     * @param _subId The subscription ID related to the sender's account.\\n     * @param _to The account identifier to which shares are being transferred.\\n     * @param _trancheId The identifier of the tranche where the transfer is occurring.\\n     * @param _shares The amount of shares to transfer.\\n     * @return A boolean value indicating whether the transfer was successful.\\n     */\\n    function transfer(uint96 _subId, bytes32 _to, uint8 _trancheId, uint256 _shares) external returns (bool);\\n\\n    /**\\n     * @notice Distributes the bad debt loss in a tranche among all tranche members. This function should only be called by the OmniPool.\\n     * @param _account The account that incurred a loss.\\n     * @param _trancheId The ID of the tranche.\\n     */\\n    function socializeLoss(bytes32 _account, uint8 _trancheId) external;\\n\\n    /**\\n     * @notice Computes the borrowing amount of a specific account in the underlying asset for a given borrow tier.\\n     * @dev The division is ceiling division.\\n     * @param _account The account identifier for which the borrowing amount is to be computed.\\n     * @param _borrowTier The borrow tier identifier from which the borrowing amount is to be computed.\\n     * @return The borrowing amount of the account in the underlying asset for the given borrow tier.\\n     */\\n    function getAccountBorrowInUnderlying(bytes32 _account, uint8 _borrowTier) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the deposit and borrow shares for a specific account in a specific tranche.\\n     * @param _account The account identifier.\\n     * @param _trancheId The tranche identifier.\\n     * @return depositShare The deposit share.\\n     * @return borrowShare The borrow share.\\n     */\\n    function getAccountSharesByTranche(bytes32 _account, uint8 _trancheId)\\n        external\\n        view\\n        returns (uint256 depositShare, uint256 borrowShare);\\n\\n    /**\\n     * @notice Sets the borrow caps for each tranche.\\n     * @param _borrowCaps An array of borrow caps in the underlying's decimals.\\n     */\\n    function setTrancheBorrowCaps(uint256[] calldata _borrowCaps) external;\\n\\n    /**\\n     * @notice Sets the number of tranches.\\n     * @param _trancheCount The new tranche count.\\n     */\\n    function setTrancheCount(uint8 _trancheCount) external;\\n\\n    /**\\n     * @notice Fetches and updates the reserve receiver from the OmniPool contract.\\n     */\\n    function fetchReserveReceiver() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWithUnderlying.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IWithUnderlying\\n * @notice Interface for the WithUnderlying contract to handle the inflow and outflow of ERC20 tokens.\\n */\\ninterface IWithUnderlying {\\n    /**\\n     * @notice Gets the address of the underlying ERC20 token.\\n     * @return The address of the underlying ERC20 token.\\n     */\\n    function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/SubAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title SubAccount\\n * @notice This library provides utility functions to handle sub-accounts using bytes32 types, where id is most significant bytes.\\n */\\nlibrary SubAccount {\\n    /**\\n     * @notice Combines an address and a sub-account identifier into a bytes32 account representation.\\n     * @param _sender The address component.\\n     * @param _subId The sub-account identifier component.\\n     * @return A bytes32 representation of the account.\\n     */\\n    function toAccount(address _sender, uint96 _subId) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_sender)) | (uint256(_subId) << 160));\\n    }\\n\\n    /**\\n     * @notice Extracts the address component from a bytes32 account representation.\\n     * @param _account The bytes32 representation of the account.\\n     * @return The address component.\\n     */\\n    function toAddress(bytes32 _account) internal pure returns (address) {\\n        return address(uint160(uint256(_account)));\\n    }\\n\\n    /**\\n     * @notice Extracts the sub-account identifier component from a bytes32 account representation.\\n     * @param _account The bytes32 representation of the account.\\n     * @return The sub-account identifier component.\\n     */\\n    function toSubId(bytes32 _account) internal pure returns (uint96) {\\n        return uint96(uint256(_account) >> 160);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOmniTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title IOmniTokenBase\\n * @notice Base interface shared by the IOmniToken and IOmniTokenNoBorrow interfaces.\\n */\\ninterface IOmniTokenBase {\\n    /**\\n     * @notice Retrieves the total deposit amount for a specific account.\\n     * @param _account The account identifier.\\n     * @return The total deposit amount.\\n     */\\n    function getAccountDepositInUnderlying(bytes32 _account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the total deposited amount for a specific owner across sub-accounts. This funciton is for wallets and Etherscan to pick up balances.\\n     * @param _owner The address of the owner.\\n     * @return The total deposited amount.\\n     */\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Seizes funds from a user's account in the event of a liquidation. This is a priveleged function only callable by the OmniPool and must be implemented carefully.\\n     * @param _account The account from which funds will be seized.\\n     * @param _to The account to which seized funds will be sent.\\n     * @param _amount The amount of funds to seize.\\n     * @return The shares seized from each tranche.\\n     */\\n    function seize(bytes32 _account, bytes32 _to, uint256 _amount) external returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"trancheId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_subId\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"_trancheId\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oweth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oweth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WETHGateway", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}