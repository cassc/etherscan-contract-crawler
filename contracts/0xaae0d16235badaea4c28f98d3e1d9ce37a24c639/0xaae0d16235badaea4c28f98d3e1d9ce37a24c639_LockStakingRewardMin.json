{"SourceCode": "pragma solidity =0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface INimbusRouter {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Ownable: Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address transferOwner) public onlyOwner {\r\n        require(transferOwner != newOwner);\r\n        newOwner = transferOwner;\r\n    }\r\n\r\n    function acceptOwnership() virtual public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in construction, \r\n        // since the code is only stored at the end of the constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\ninterface ILockStakingRewards {\r\n    function earned(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function stake(uint256 amount) external;\r\n    function stakeFor(uint256 amount, address user) external;\r\n    function getReward() external;\r\n    function withdraw(uint256 nonce) external;\r\n    function withdrawAndGetReward(uint256 nonce) external;\r\n}\r\n\r\ninterface IERC20Permit {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\ncontract LockStakingRewardMinAmountFixedAPY is ILockStakingRewards, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public immutable rewardsToken;\r\n    IERC20 public immutable stakingToken;\r\n    uint256 public rewardRate; \r\n    uint256 public immutable lockDuration; \r\n    uint256 public constant rewardDuration = 365 days; \r\n    \r\n    INimbusRouter public swapRouter;\r\n    address public swapToken;                       \r\n    uint public swapTokenAmountThresholdForStaking;\r\n\r\n    mapping(address => uint256) public weightedStakeDate;\r\n    mapping(address => mapping(uint256 => uint256)) public stakeLocks;\r\n    mapping(address => mapping(uint256 => uint256)) public stakeAmounts;\r\n    mapping(address => mapping(uint256 => uint256)) public stakeAmountsRewardEquivalent;\r\n    mapping(address => uint256) public stakeNonces;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _totalSupplyRewardEquivalent;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _balancesRewardEquivalent;\r\n\r\n    event RewardUpdated(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event Rescue(address to, uint amount);\r\n    event RescueToken(address to, address token, uint amount);\r\n\r\n    constructor(\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        uint _rewardRate,\r\n        uint _lockDuration,\r\n        address _swapRouter,\r\n        address _swapToken,\r\n        uint _swapTokenAmount\r\n    ) {\r\n        rewardsToken = IERC20(_rewardsToken);\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardRate = _rewardRate;\r\n        lockDuration = _lockDuration;\r\n        swapRouter = INimbusRouter(_swapRouter);\r\n        swapToken = _swapToken;\r\n        swapTokenAmountThresholdForStaking = _swapTokenAmount;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalSupplyRewardEquivalent() external view returns (uint256) {\r\n        return _totalSupplyRewardEquivalent;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function balanceOfRewardEquivalent(address account) external view returns (uint256) {\r\n        return _balancesRewardEquivalent[account];\r\n    }\r\n\r\n    function earned(address account) public view override returns (uint256) {\r\n        return (_balancesRewardEquivalent[account].mul(block.timestamp.sub(weightedStakeDate[account])).mul(rewardRate)) / (100 * rewardDuration);\r\n    }\r\n\r\n    function isAmountMeetsMinThreshold(uint amount) public view returns (bool) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(stakingToken);\r\n        path[1] = swapToken;\r\n        uint tokenAmount = swapRouter.getAmountsOut(amount, path)[1];\r\n        return tokenAmount >= swapTokenAmountThresholdForStaking;\r\n    }\r\n\r\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\r\n        require(amount > 0, \"LockStakingRewardMinAmountFixedAPY: Cannot stake 0\");\r\n        // permit\r\n        IERC20Permit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n        _stake(amount, msg.sender);\r\n    }\r\n\r\n    function stake(uint256 amount) external override nonReentrant {\r\n        require(amount > 0, \"LockStakingRewardMinAmountFixedAPY: Cannot stake 0\");\r\n        _stake(amount, msg.sender);\r\n    }\r\n\r\n    function stakeFor(uint256 amount, address user) external override nonReentrant {\r\n        require(amount > 0, \"LockStakingRewardMinAmountFixedAPY: Cannot stake 0\");\r\n        _stake(amount, user);\r\n    }\r\n\r\n    function _stake(uint256 amount, address user) private {\r\n        require(isAmountMeetsMinThreshold(amount), \"LockStakingRewardMinAmountFixedAPY: Amount is less than min stake\");\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        uint amountRewardEquivalent = getEquivalentAmount(amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _totalSupplyRewardEquivalent = _totalSupplyRewardEquivalent.add(amountRewardEquivalent);\r\n        uint previousAmount = _balances[user];\r\n        uint newAmount = previousAmount.add(amount);\r\n        weightedStakeDate[user] = (weightedStakeDate[user].mul(previousAmount) / newAmount).add(block.timestamp.mul(amount) / newAmount);\r\n        _balances[user] = newAmount;\r\n\r\n        uint stakeNonce = stakeNonces[user]++;\r\n        stakeAmounts[user][stakeNonce] = amount;\r\n        stakeLocks[user][stakeNonce] = block.timestamp + lockDuration;\r\n        \r\n        stakeAmountsRewardEquivalent[user][stakeNonce] = amountRewardEquivalent;\r\n        _balancesRewardEquivalent[user] = _balancesRewardEquivalent[user].add(amountRewardEquivalent);\r\n        emit Staked(user, amount);\r\n    }\r\n\r\n\r\n    //A user can withdraw its staking tokens even if there is no rewards tokens on the contract account\r\n    function withdraw(uint256 nonce) public override nonReentrant {\r\n        require(stakeAmounts[msg.sender][nonce] > 0, \"LockStakingRewardMinAmountFixedAPY: This stake nonce was withdrawn\");\r\n        require(stakeLocks[msg.sender][nonce] < block.timestamp, \"LockStakingRewardMinAmountFixedAPY: Locked\");\r\n        uint amount = stakeAmounts[msg.sender][nonce];\r\n        uint amountRewardEquivalent = stakeAmountsRewardEquivalent[msg.sender][nonce];\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _totalSupplyRewardEquivalent = _totalSupplyRewardEquivalent.sub(amountRewardEquivalent);\r\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n        _balancesRewardEquivalent[msg.sender] = _balancesRewardEquivalent[msg.sender].sub(amountRewardEquivalent);\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        stakeAmounts[msg.sender][nonce] = 0;\r\n        stakeAmountsRewardEquivalent[msg.sender][nonce] = 0;\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function getReward() public override nonReentrant {\r\n        uint256 reward = earned(msg.sender);\r\n        if (reward > 0) {\r\n            weightedStakeDate[msg.sender] = block.timestamp;\r\n            rewardsToken.safeTransfer(msg.sender, reward);\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function withdrawAndGetReward(uint256 nonce) external override {\r\n        getReward();\r\n        withdraw(nonce);\r\n    }\r\n\r\n    function getEquivalentAmount(uint amount) public view returns (uint) {\r\n        address[] memory path = new address[](2);\r\n\r\n        uint equivalent;\r\n        if (stakingToken != rewardsToken) {\r\n            path[0] = address(stakingToken);            \r\n            path[1] = address(rewardsToken);\r\n            equivalent = swapRouter.getAmountsOut(amount, path)[1];\r\n        } else {\r\n            equivalent = amount;   \r\n        }\r\n        \r\n        return equivalent;\r\n    }\r\n\r\n\r\n    function updateRewardAmount(uint256 reward) external onlyOwner {\r\n        rewardRate = reward;\r\n        emit RewardUpdated(reward);\r\n    }\r\n\r\n    function updateSwapRouter(address newSwapRouter) external onlyOwner {\r\n        require(newSwapRouter != address(0), \"LockStakingRewardMinAmountFixedAPY: Address is zero\");\r\n        swapRouter = INimbusRouter(newSwapRouter);\r\n    }\r\n\r\n    function updateSwapToken(address newSwapToken) external onlyOwner {\r\n        require(newSwapToken != address(0), \"LockStakingRewardMinAmountFixedAPY: Address is zero\");\r\n        swapToken = newSwapToken;\r\n    }\r\n\r\n    function updateStakeSwapTokenAmountThreshold(uint threshold) external onlyOwner {\r\n        swapTokenAmountThresholdForStaking = threshold;\r\n    }\r\n\r\n    function rescue(address to, address token, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"LockStakingRewardMinAmountFixedAPY: Cannot rescue to the zero address\");\r\n        require(amount > 0, \"LockStakingRewardMinAmountFixedAPY: Cannot rescue 0\");\r\n        require(token != address(stakingToken), \"LockStakingRewardMinAmountFixedAPY: Cannot rescue staking token\");\r\n        //owner can rescue rewardsToken if there is spare unused tokens on staking contract balance\r\n\r\n        IERC20(token).safeTransfer(to, amount);\r\n        emit RescueToken(to, address(token), amount);\r\n    }\r\n\r\n    function rescue(address payable to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"LockStakingRewardMinAmountFixedAPY: Cannot rescue to the zero address\");\r\n        require(amount > 0, \"LockStakingRewardMinAmountFixedAPY: Cannot rescue 0\");\r\n\r\n        to.transfer(amount);\r\n        emit Rescue(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rescue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEquivalentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isAmountMeetsMinThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeAmountsRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract INimbusRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokenAmountThresholdForStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyRewardEquivalent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updateRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"updateStakeSwapTokenAmountThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapToken\",\"type\":\"address\"}],\"name\":\"updateSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weightedStakeDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"withdrawAndGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LockStakingRewardMinAmountFixedAPY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000eb58343b36c7528f23caae63a150240241310049000000000000000000000000639ae8f3eed18690bf451229d14953a5a5627b72000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000076a70000000000000000000000000005f6bb6b96ca657a3666d2f1bca302b999a671b4000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000009502f900", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7052a2669f688e44304a9b3c51f035d21341762f358557a921068f26216855ec"}