{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\ninterface IERC20Errors {\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n    error ERC20InvalidSender(address sender);\r\n    error ERC20InvalidReceiver(address receiver);\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n    error ERC20InvalidApprover(address approver);\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    event DataDelivery(address indexed _from, address indexed _to, uint256 _value, bytes data);\r\n    mapping(address account => uint256) private _balances;\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n    function transfer(address to, uint256 value, bytes calldata _data) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        emit DataDelivery(msg.sender, to, value, _data);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _tokenTransferBefore(from, to, value);\r\n        _update(from, to, value);\r\n        _tokenTransferAfter(from, to, value);\r\n    }\r\n    function _tokenTransferBefore(address _from, address _to, uint256 value) internal virtual  {}\r\n    function _tokenTransferAfter(address _from, address _to, uint256 value) internal virtual {}\r\n\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IToken{\r\n    function mint(address _to, uint256 _value)external;\r\n    function burn(address _from, uint256 _value)external;\r\n}\r\ninterface ITokenTransferCallBack{\r\n    function tokenTransferBefore(address, address, uint256)external;\r\n    function tokenTransferAfter(address, address, uint256)external;\r\n}\r\ncontract Token is ERC20, IToken {\r\n    uint8 private decimals_;\r\n    address public callBack;\r\n    address public factory;\r\n    uint256 public maxSupply;\r\n\r\n    modifier onlyFactory{\r\n        require(msg.sender == factory, \"Token: Only factory!\");\r\n        _;\r\n    }\r\n    modifier onlyController(address _account){\r\n       require(IFactory(factory).isController(_account), \"Token: Only Controller!\");\r\n       _;\r\n    }\r\n\r\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol){\r\n        factory = msg.sender;\r\n    }\r\n\r\n    function decimals() public view  override returns(uint8)  {\r\n        return decimals_;\r\n    }\r\n\r\n    function initialize(uint256 _maxSupply, uint8 _decimals) external onlyFactory {\r\n        decimals_ = _decimals;\r\n        maxSupply = _maxSupply;\r\n    }\r\n    function _tokenTransferBefore(address _from,  address _to, uint256 _value) internal override   {\r\n        bool _tokenPaused = IFactory(factory).isPaused(address(this));\r\n        bool _blockedFrom = IFactory(factory).isBlocked(address(this), _from);\r\n        bool _blockedTo = IFactory(factory).isBlocked(address(this), _to);\r\n        require(\r\n            _tokenPaused == false \r\n            && _blockedFrom == false\r\n            && _blockedTo   == false,\r\n            \"Token: token transfer not allow!\"\r\n        );\r\n         if(callBack != address(0)) {\r\n            ITokenTransferCallBack(callBack).tokenTransferBefore(_from, _to, _value);\r\n         }\r\n    }\r\n    function _tokenTransferAfter(address _from,  address _to, uint256 _value) internal override  {\r\n        if(callBack != address(0)) {\r\n          ITokenTransferCallBack(callBack).tokenTransferAfter(_from, _to, _value);\r\n        }\r\n    }\r\n\r\n    function mint(address _to, uint256 _value) external override onlyController(msg.sender) {\r\n        if(maxSupply !=0) {\r\n           require(totalSupply() + _value <= maxSupply, \"Token: exceeded the maximum value\");\r\n        }\r\n        _mint(_to, _value);\r\n    }\r\n    function burn(address _from, uint256 _value) external override onlyController(msg.sender) {\r\n        _burn(_from, _value);\r\n    }\r\n    function setCallBack(address _callBack) external onlyController(msg.sender) {\r\n        callBack = _callBack;\r\n    }\r\n}\r\n\r\ninterface IFactory{\r\n    function isController(address _controller) external view returns(bool);\r\n    function isBlocked(address _token, address _account) external view returns(bool);\r\n    function isPaused(address _token)  external view returns(bool);\r\n    function owner() external view returns(address);\r\n    function createToken(string memory _name, string memory _symbol, uint8 _decimals, uint256 _maxSupply) external returns(address);\r\n}\r\n\r\ncontract Factory is IFactory{\r\n    event TokenCreated(\r\n         address indexed _token\r\n    );\r\n\r\n    address public owner;\r\n    address[] public tokens;\r\n\r\n    mapping (address => string) public tokenSymbol; // address => symbol\r\n    mapping (bytes => address) public tokenAddress; // symbol => address\r\n\r\n    mapping (address => bool) public allTokenBlocked; // account => isBlocked\r\n    mapping (address => mapping (address=> bool) ) public singleTokenBlocked;\r\n\r\n    mapping (address => bool) public tokenControllers;  // allTokenController => isController;\r\n\r\n    bool public allTokenPaused;\r\n    mapping (address=>bool) public singleTokenPaused;\r\n\r\n    modifier onlyOwnerOrTokenController{\r\n        require(msg.sender == owner || tokenControllers[msg.sender], \"Factory: Only owner or controller!\");\r\n        _;\r\n    }\r\n    modifier onlyOwner{\r\n        require(msg.sender == owner, \"Factory: Only owner!\");\r\n        _;\r\n    }\r\n    constructor(address _owner){\r\n        owner = _owner;\r\n    }\r\n\r\n    function tokenAddressByName(string memory _symbol, string memory _name ) public view returns(address){\r\n        bytes memory symbol_name = abi.encodePacked(_symbol, _name);\r\n        return tokenAddress[symbol_name];\r\n    }\r\n\r\n    function isController(address _controller) public override view returns(bool) {\r\n        return tokenControllers[_controller];\r\n    }\r\n\r\n    function isBlocked(address _token, address _account)  public override view returns(bool) {\r\n        return singleTokenBlocked[_token][_account] || allTokenBlocked[_account];\r\n    }\r\n\r\n    function isPaused(address _token)  public override view returns(bool){\r\n        return singleTokenPaused[_token] || allTokenPaused;\r\n    }\r\n\r\n    function createToken(string memory _name, string memory _symbol, uint8 _decimals, uint256 _maxSupply) public onlyOwnerOrTokenController returns(address) {\r\n        bytes memory symbol_name = bytes(abi.encodePacked(_symbol, _name));\r\n        require(tokenAddress[symbol_name]  == address(0), \"Factory: Token created\");\r\n        Token token = new Token(_name, _symbol);\r\n        token.initialize(_maxSupply, _decimals);\r\n        tokens.push(address(token));\r\n        tokenSymbol[address(token)] = _symbol;\r\n        tokenAddress[symbol_name] = address(token);\r\n        emit TokenCreated(address(token));\r\n        return address(token);\r\n    }\r\n\r\n    function setBlock(address _token, address _account, bool _block) public {\r\n        require(tokenControllers[msg.sender], \"Factory: Only all token controller!\");\r\n        if(_token == address(0)) { // block all token\r\n            allTokenBlocked[_account] = _block;\r\n        }else {\r\n            singleTokenBlocked[_token][_account] = _block;\r\n        }\r\n    }\r\n    function pauseToken(address _token, bool _pause) public {\r\n        require(tokenControllers[msg.sender], \"Factory: Only all token controller!\");\r\n        if(_token == address(0)) {\r\n            allTokenPaused = _pause;\r\n        }else{\r\n            singleTokenPaused[_token] = _pause;\r\n        }\r\n    }\r\n    function setController(address _account, bool _isController) onlyOwner public{\r\n        tokenControllers[_account] = _isController;\r\n    }\r\n    function transferOwnerShip(address _newOwner) onlyOwner public {\r\n        owner = _newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allTokenBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokenPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"setBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isController\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"singleTokenBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"singleTokenPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"tokenAddressByName\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenControllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Factory", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cd66ae3529D74cD1D7185fe6882A3B80b791F875", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e33c083ade6a1492faf11c45206aea065b4b8405029396f406f1e69c95e8e457"}