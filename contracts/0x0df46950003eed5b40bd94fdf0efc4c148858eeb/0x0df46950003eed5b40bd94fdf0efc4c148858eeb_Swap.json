{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.9;\\n\\nimport \\\"solmate/tokens/ERC20.sol\\\";\\nimport \\\"solmate/utils/SafeTransferLib.sol\\\";\\nimport \\\"./external/uniswap/ISwapRouter02.sol\\\";\\nimport \\\"./external/sushiswap/ISushiRouter.sol\\\";\\nimport {IAsset, IVault} from \\\"./external/balancer/IVault.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./libraries/Path.sol\\\";\\n\\n/**\\n * @notice\\n * Swap contract used by strategies to:\\n * 1. swap strategy rewards to 'asset'\\n * 2. zap similar tokens to asset (e.g. USDT to USDC)\\n */\\ncontract Swap is Ownable {\\n    using SafeTransferLib for ERC20;\\n    using Path for bytes;\\n\\n    enum Route {\\n        Unsupported,\\n        UniswapV2,\\n        UniswapV3Direct,\\n        UniswapV3Path,\\n        SushiSwap,\\n        BalancerBatch,\\n        BalancerSingle\\n    }\\n\\n    /**\\n     * @dev info depends on route:\\n     * \\t\\tUniswapV2: address[] path\\n     * \\t\\tUniswapV3Direct: uint24 fee\\n     * \\t\\tUniswapV3Path: bytes path (address, uint24 fee, address, uint24 fee, address)\\n     */\\n    struct RouteInfo {\\n        Route route;\\n        bytes info;\\n    }\\n\\n    ISushiRouter internal constant sushiswap = ISushiRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n    /// @dev single address which supports both uniswap v2 and v3 routes\\n    ISwapRouter02 internal constant uniswap = ISwapRouter02(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\n\\n    IVault internal constant balancer = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n\\n    /// @dev tokenIn => tokenOut => routeInfo\\n    mapping(address => mapping(address => RouteInfo)) public routes;\\n\\n    /*//////////////////\\n    /      Events      /\\n    //////////////////*/\\n\\n    event RouteSet(address indexed tokenIn, address indexed tokenOut, RouteInfo routeInfo);\\n    event RouteRemoved(address indexed tokenIn, address indexed tokenOut);\\n\\n    /*//////////////////\\n    /      Errors      /\\n    //////////////////*/\\n\\n    error UnsupportedRoute(address tokenIn, address tokenOut);\\n    error InvalidRouteInfo();\\n\\n    constructor() Ownable() {\\n        address CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n        address CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n        address LDO = 0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32;\\n\\n        address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n        address STG = 0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6;\\n        address USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n        address USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n        address BAL = 0xba100000625a3754423978a60c9317c58a424e3D;\\n        address AURA = 0xC0c293ce456fF0ED870ADd98a0828Dd4d2903DBF;\\n\\n        _setRoute(CRV, WETH, RouteInfo({route: Route.UniswapV3Direct, info: abi.encode(uint24(3_000))}));\\n        _setRoute(CVX, WETH, RouteInfo({route: Route.UniswapV3Direct, info: abi.encode(uint24(10_000))}));\\n        _setRoute(LDO, WETH, RouteInfo({route: Route.UniswapV3Direct, info: abi.encode(uint24(3_000))}));\\n\\n        _setRoute(CRV, USDC, RouteInfo({route: Route.UniswapV3Direct, info: abi.encode(uint24(10_000))}));\\n        _setRoute(\\n            CVX,\\n            USDC,\\n            RouteInfo({route: Route.UniswapV3Path, info: abi.encodePacked(CVX, uint24(10_000), WETH, uint24(500), USDC)})\\n        );\\n\\n        _setRoute(USDC, USDT, RouteInfo({route: Route.UniswapV3Direct, info: abi.encode(uint24(100))}));\\n\\n        _setRoute(\\n            STG,\\n            USDC,\\n            RouteInfo({\\n                route: Route.BalancerSingle,\\n                info: abi.encode(0x3ff3a210e57cfe679d9ad1e9ba6453a716c56a2e0002000000000000000005d5)\\n            })\\n        );\\n        IAsset[] memory stgWethAssets = new IAsset[](4);\\n        stgWethAssets[0] = IAsset(STG);\\n        stgWethAssets[1] = IAsset(USDC);\\n        stgWethAssets[2] = IAsset(0x79c58f70905F734641735BC61e45c19dD9Ad60bC); // 3pool\\n        stgWethAssets[3] = IAsset(WETH);\\n\\n        bytes32[] memory stgWethPoolIds = new bytes32[](3);\\n        stgWethPoolIds[0] = 0x3ff3a210e57cfe679d9ad1e9ba6453a716c56a2e0002000000000000000005d5; // STG/USDC\\n        stgWethPoolIds[1] = 0x79c58f70905f734641735bc61e45c19dd9ad60bc0000000000000000000004e7; // 3pool\\n        stgWethPoolIds[2] = 0x08775ccb6674d6bdceb0797c364c2653ed84f3840002000000000000000004f0; // 3pool/WETH\\n\\n        IVault.BatchSwapStep[] memory stgWethSteps = _constructBalancerBatchSwapSteps(stgWethPoolIds);\\n\\n        _setRoute(STG, WETH, RouteInfo({route: Route.BalancerBatch, info: abi.encode(stgWethSteps, stgWethAssets)}));\\n\\n        bytes32 balWethPoolId = 0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014;\\n        _setRoute(BAL, WETH, RouteInfo({route: Route.BalancerSingle, info: abi.encode(balWethPoolId)}));\\n\\n        bytes32 auraWethPoolId = 0xcfca23ca9ca720b6e98e3eb9b6aa0ffc4a5c08b9000200000000000000000274;\\n        _setRoute(AURA, WETH, RouteInfo({route: Route.BalancerSingle, info: abi.encode(auraWethPoolId)}));\\n    }\\n\\n    /*///////////////////////\\n    /      Public View      /\\n    ///////////////////////*/\\n\\n    function getRoute(address _tokenIn, address _tokenOut) external view returns (RouteInfo memory routeInfo) {\\n        return routes[_tokenIn][_tokenOut];\\n    }\\n\\n    /*////////////////////////////\\n    /      Public Functions      /\\n    ////////////////////////////*/\\n\\n    function swapTokens(address _tokenIn, address _tokenOut, uint256 _amount, uint256 _minReceived)\\n        external\\n        returns (uint256 received)\\n    {\\n        RouteInfo memory routeInfo = routes[_tokenIn][_tokenOut];\\n\\n        ERC20 tokenIn = ERC20(_tokenIn);\\n        tokenIn.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        Route route = routeInfo.route;\\n        bytes memory info = routeInfo.info;\\n\\n        if (route == Route.UniswapV2) {\\n            received = _uniswapV2(_amount, _minReceived, info);\\n        } else if (route == Route.UniswapV3Direct) {\\n            received = _uniswapV3Direct(_tokenIn, _tokenOut, _amount, _minReceived, info);\\n        } else if (route == Route.UniswapV3Path) {\\n            received = _uniswapV3Path(_amount, _minReceived, info);\\n        } else if (route == Route.SushiSwap) {\\n            received = _sushiswap(_amount, _minReceived, info);\\n        } else if (route == Route.BalancerBatch) {\\n            received = _balancerBatch(_amount, _minReceived, info);\\n        } else if (route == Route.BalancerSingle) {\\n            received = _balancerSingle(_tokenIn, _tokenOut, _amount, _minReceived, info);\\n        } else {\\n            revert UnsupportedRoute(_tokenIn, _tokenOut);\\n        }\\n\\n        // return unswapped amount to sender\\n        uint256 balance = tokenIn.balanceOf(address(this));\\n        if (balance > 0) tokenIn.safeTransfer(msg.sender, balance);\\n    }\\n\\n    /*///////////////////////////////////////////\\n    /      Restricted Functions: onlyOwner      /\\n    ///////////////////////////////////////////*/\\n\\n    function setRoute(address _tokenIn, address _tokenOut, RouteInfo memory _routeInfo) external onlyOwner {\\n        _setRoute(_tokenIn, _tokenOut, _routeInfo);\\n    }\\n\\n    function unsetRoute(address _tokenIn, address _tokenOut) external onlyOwner {\\n        delete routes[_tokenIn][_tokenOut];\\n        emit RouteRemoved(_tokenIn, _tokenOut);\\n    }\\n\\n    /*//////////////////////////////\\n    /      Internal Functions      /\\n    //////////////////////////////*/\\n\\n    function _setRoute(address _tokenIn, address _tokenOut, RouteInfo memory _routeInfo) internal {\\n        Route route = _routeInfo.route;\\n        bytes memory info = _routeInfo.info;\\n\\n        if (route == Route.UniswapV2 || route == Route.SushiSwap) {\\n            address[] memory path = abi.decode(info, (address[]));\\n\\n            if (path[0] != _tokenIn) revert InvalidRouteInfo();\\n            if (path[path.length - 1] != _tokenOut) revert InvalidRouteInfo();\\n        }\\n\\n        // just check that this doesn't throw an error\\n        if (route == Route.UniswapV3Direct) abi.decode(info, (uint24));\\n\\n        if (route == Route.UniswapV3Path) {\\n            bytes memory path = info;\\n\\n            // check first tokenIn\\n            (address tokenIn,,) = path.decodeFirstPool();\\n            if (tokenIn != _tokenIn) revert InvalidRouteInfo();\\n\\n            // check last tokenOut\\n            while (path.hasMultiplePools()) path = path.skipToken();\\n            (, address tokenOut,) = path.decodeFirstPool();\\n            if (tokenOut != _tokenOut) revert InvalidRouteInfo();\\n        }\\n\\n        // just check that these don't throw an error, i.e. the poolId contains both _tokenIn\\n        if (route == Route.BalancerSingle) {\\n            bytes32 poolId = abi.decode(info, (bytes32));\\n            balancer.getPoolTokenInfo(poolId, _tokenIn);\\n            balancer.getPoolTokenInfo(poolId, _tokenOut);\\n        }\\n\\n        address router = _getRouterAddress(route);\\n\\n        ERC20(_tokenIn).safeApprove(router, 0);\\n        ERC20(_tokenIn).safeApprove(router, type(uint256).max);\\n\\n        routes[_tokenIn][_tokenOut] = _routeInfo;\\n        emit RouteSet(_tokenIn, _tokenOut, _routeInfo);\\n    }\\n\\n    function _uniswapV2(uint256 _amount, uint256 _minReceived, bytes memory _path) internal returns (uint256) {\\n        address[] memory path = abi.decode(_path, (address[]));\\n\\n        return uniswap.swapExactTokensForTokens(_amount, _minReceived, path, msg.sender);\\n    }\\n\\n    function _sushiswap(uint256 _amount, uint256 _minReceived, bytes memory _path) internal returns (uint256) {\\n        address[] memory path = abi.decode(_path, (address[]));\\n\\n        uint256[] memory received =\\n            sushiswap.swapExactTokensForTokens(_amount, _minReceived, path, msg.sender, type(uint256).max);\\n\\n        return received[received.length - 1];\\n    }\\n\\n    function _uniswapV3Direct(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amount,\\n        uint256 _minReceived,\\n        bytes memory _info\\n    ) internal returns (uint256) {\\n        uint24 fee = abi.decode(_info, (uint24));\\n\\n        return uniswap.exactInputSingle(\\n            ISwapRouter02.ExactInputSingleParams({\\n                tokenIn: _tokenIn,\\n                tokenOut: _tokenOut,\\n                fee: fee,\\n                recipient: msg.sender,\\n                amountIn: _amount,\\n                amountOutMinimum: _minReceived,\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n    }\\n\\n    function _uniswapV3Path(uint256 _amount, uint256 _minReceived, bytes memory _path) internal returns (uint256) {\\n        return uniswap.exactInput(\\n            ISwapRouter02.ExactInputParams({\\n                path: _path,\\n                recipient: msg.sender,\\n                amountIn: _amount,\\n                amountOutMinimum: _minReceived\\n            })\\n        );\\n    }\\n\\n    function _balancerBatch(uint256 _amount, uint256 _minReceived, bytes memory _info) internal returns (uint256) {\\n        (IVault.BatchSwapStep[] memory steps, IAsset[] memory assets) =\\n            abi.decode(_info, (IVault.BatchSwapStep[], IAsset[]));\\n\\n        steps[0].amount = _amount;\\n\\n        int256[] memory limits = new int256[](assets.length);\\n\\n        limits[0] = int256(_amount);\\n        limits[limits.length - 1] = -int256(_minReceived);\\n\\n        int256[] memory received = balancer.batchSwap(\\n            IVault.SwapKind.GIVEN_IN,\\n            steps,\\n            assets,\\n            IVault.FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(address(msg.sender)),\\n                toInternalBalance: false\\n            }),\\n            limits,\\n            type(uint256).max\\n        );\\n\\n        return uint256(-received[received.length - 1]);\\n    }\\n\\n    function _balancerSingle(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amount,\\n        uint256 _minReceived,\\n        bytes memory _info\\n    ) internal returns (uint256) {\\n        bytes32 poolId = abi.decode(_info, (bytes32));\\n\\n        return balancer.swap(\\n            IVault.SingleSwap({\\n                poolId: poolId,\\n                kind: IVault.SwapKind.GIVEN_IN,\\n                assetIn: IAsset(_tokenIn),\\n                assetOut: IAsset(_tokenOut),\\n                amount: _amount,\\n                userData: \\\"\\\"\\n            }),\\n            IVault.FundManagement({\\n                sender: address(this),\\n                fromInternalBalance: false,\\n                recipient: payable(address(msg.sender)),\\n                toInternalBalance: false\\n            }),\\n            _minReceived,\\n            type(uint256).max\\n        );\\n    }\\n\\n    function _getRouterAddress(Route _route) internal pure returns (address) {\\n        if (_route == Route.SushiSwap) {\\n            return address(sushiswap);\\n        } else if (_route == Route.UniswapV2 || _route == Route.UniswapV3Direct || _route == Route.UniswapV3Path) {\\n            return address(uniswap);\\n        } else if (_route == Route.BalancerBatch || _route == Route.BalancerSingle) {\\n            return address(balancer);\\n        } else {\\n            revert InvalidRouteInfo();\\n        }\\n    }\\n\\n    function _constructBalancerBatchSwapSteps(bytes32[] memory _poolIds)\\n        internal\\n        pure\\n        returns (IVault.BatchSwapStep[] memory steps)\\n    {\\n        uint256 length = _poolIds.length;\\n        steps = new IVault.BatchSwapStep[](length);\\n\\n        for (uint8 i = 0; i < length; ++i) {\\n            steps[i] = IVault.BatchSwapStep({\\n                poolId: _poolIds[i],\\n                assetInIndex: i,\\n                assetOutIndex: i + 1,\\n                amount: 0,\\n                userData: \\\"\\\"\\n            });\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/external/uniswap/ISwapRouter02.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// https://github.com/Uniswap/swap-router-contracts/blob/main/contracts/interfaces/ISwapRouter02.sol\\n\\ninterface ISwapRouter02 {\\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"src/external/sushiswap/ISushiRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// https://etherscan.io/address/0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f\\n// it's actually a UniswapV2Router02 but renamed for clarity vs actual uniswap\\n\\ninterface ISushiRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"src/external/balancer/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.9;\\n\\n/// https://etherscan.io/address/0xBA12222222228d8Ba445958a75a0704d566BF2C8#code\\n\\ninterface IAsset {}\\n\\ninterface IVault {\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    enum PoolSpecialization {\\n        GENERAL,\\n        MINIMAL_SWAP_INFO,\\n        TWO_TOKEN\\n    }\\n\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory balances, uint256 lastChangeBlock);\\n\\n    function getPoolTokenInfo(bytes32 poolId, address token)\\n        external\\n        view\\n        returns (uint256 cash, uint256 managed, uint256 lastChangedBlock, address assetManager);\\n\\n    function queryExit(bytes32 poolId, address sender, address recipient, IVault.ExitPoolRequest memory request)\\n        external\\n        returns (uint256 bptIn, uint256[] memory amountsOut);\\n\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function swap(SingleSwap memory singleSwap, FundManagement memory funds, uint256 limit, uint256 deadline)\\n        external\\n        returns (uint256 amountCalculated);\\n\\n    function exitPool(bytes32 poolId, address sender, address payable recipient, ExitPoolRequest memory request)\\n        external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nabstract contract Ownable {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    error Unauthorized();\\n\\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Public Functions\\n\\n    function acceptOwnership() external {\\n        if (msg.sender != nominatedOwner) revert Unauthorized();\\n        emit OwnerChanged(owner, msg.sender);\\n        owner = msg.sender;\\n        nominatedOwner = address(0);\\n    }\\n\\n    // Restricted Functions: onlyOwner\\n\\n    /// @dev nominating zero address revokes a pending nomination\\n    function nominateOwnership(address _newOwner) external onlyOwner {\\n        nominatedOwner = _newOwner;\\n    }\\n\\n    // Modifiers\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert Unauthorized();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Path.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\n// https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\\n\\nimport \\\"./BytesLib.sol\\\";\\n\\n/// @title Functions for manipulating path data for multihop swaps\\nlibrary Path {\\n    using BytesLib for bytes;\\n\\n    /// @dev The length of the bytes encoded address\\n    uint256 private constant ADDR_SIZE = 20;\\n    /// @dev The length of the bytes encoded fee\\n    uint256 private constant FEE_SIZE = 3;\\n\\n    /// @dev The offset of a single token address and pool fee\\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\\n    /// @dev The offset of an encoded pool key\\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\\n    /// @dev The minimum length of an encoding that contains 2 or more pools\\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\\n\\n    /// @notice Returns true iff the path contains two or more pools\\n    /// @param path The encoded swap path\\n    /// @return True if path contains two or more pools, otherwise false\\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\\n    }\\n\\n    /// @notice Returns the number of pools in the path\\n    /// @param path The encoded swap path\\n    /// @return The number of pools in the path\\n    function numPools(bytes memory path) internal pure returns (uint256) {\\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\\n    }\\n\\n    /// @notice Decodes the first pool in path\\n    /// @param path The bytes encoded swap path\\n    /// @return tokenA The first token of the given pool\\n    /// @return tokenB The second token of the given pool\\n    /// @return fee The fee level of the pool\\n    function decodeFirstPool(bytes memory path) internal pure returns (address tokenA, address tokenB, uint24 fee) {\\n        tokenA = path.toAddress(0);\\n        fee = path.toUint24(ADDR_SIZE);\\n        tokenB = path.toAddress(NEXT_OFFSET);\\n    }\\n\\n    /// @notice Gets the segment corresponding to the first pool in the path\\n    /// @param path The bytes encoded swap path\\n    /// @return The segment containing all data necessary to target the first pool in the path\\n    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(0, POP_OFFSET);\\n    }\\n\\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\\n    /// @param path The swap path\\n    /// @return The remaining token + fee elements in the path\\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n\\n//https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidRouteInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"UnsupportedRoute\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"RouteRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Swap.Route\",\"name\":\"route\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"info\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Swap.RouteInfo\",\"name\":\"routeInfo\",\"type\":\"tuple\"}],\"name\":\"RouteSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getRoute\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Swap.Route\",\"name\":\"route\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"info\",\"type\":\"bytes\"}],\"internalType\":\"struct Swap.RouteInfo\",\"name\":\"routeInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"nominateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"enum Swap.Route\",\"name\":\"route\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"info\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum Swap.Route\",\"name\":\"route\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"info\",\"type\":\"bytes\"}],\"internalType\":\"struct Swap.RouteInfo\",\"name\":\"_routeInfo\",\"type\":\"tuple\"}],\"name\":\"setRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReceived\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"unsetRoute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Swap", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}