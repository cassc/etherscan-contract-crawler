{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n/* --------- Access Control --------- */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor(){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n    bool isclaimable = false;\r\n    \r\n    function startClaim()\r\n        external\r\n        onlyOwner\r\n    {\r\n        isclaimable = true;\r\n    }\r\n\r\n    function stopClaim()\r\n        external\r\n        onlyOwner\r\n    {\r\n        isclaimable = false;\r\n    }\r\n\r\n\r\n    function getClaimStatus()\r\n        external view returns(bool)\r\n    {\r\n        return isclaimable;\r\n    }\r\n\r\n    modifier isClaim() {\r\n        require(isclaimable, \"Claim is not available now.\");\r\n        _;\r\n    }\r\n\r\n    function claimToken(address tokenAddress, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC20(tokenAddress).transfer(owner(), amount);\r\n    }\r\n\r\n    function claimETH(uint256 amount) external onlyOwner {\r\n        (bool sent, ) = owner().call{value: amount}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}\r\n\r\ninterface Aggregator {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\n\r\ncontract Presale is Claimable {\r\n    event Buy(address to, uint256 amount);\r\n    event Claim(address to, uint256 amount);\r\n    address public tokenAddress;\r\n    uint256 price;\r\n    uint256 public startTime;\r\n    uint256 public totalSaled;\r\n\r\n    address aggregatorInterface = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n    address USDTInterface = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    uint256 public baseDecimal = 1000000;\r\n\r\n    mapping(address => uint256) public userDeposits;\r\n\r\n    constructor(\r\n        address _tokenAddress,\r\n        uint256 _price\r\n    ) {\r\n        tokenAddress = _tokenAddress;\r\n        price = _price;\r\n        startTime = block.timestamp;\r\n        totalSaled = 0;\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 ethPrice, , , ) = Aggregator(aggregatorInterface).latestRoundData();\r\n        ethPrice = (ethPrice * (10 ** 10));\r\n        return uint256(ethPrice);\r\n    }\r\n\r\n    function ethBuyHelper(\r\n        uint256 ethAmount\r\n    ) public view returns (uint256 amount) {\r\n        amount = ethAmount * getLatestPrice() * price/(1e6  * 10 **18) ;\r\n    }\r\n\r\n    function resetPrice(uint256 _price) public onlyOwner {\r\n        price = _price;\r\n    }\r\n    function resetStartTime() public onlyOwner {\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function buy() public payable {\r\n        uint256 tokenAmount = ethBuyHelper(msg.value);\r\n        userDeposits[_msgSender()] += tokenAmount;\r\n        totalSaled += tokenAmount;\r\n        (bool sent, ) = owner().call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n        emit Buy(msg.sender, tokenAmount);\r\n    }\r\n\r\n    function claimUserToken() public isClaim {\r\n        require(userDeposits[_msgSender()] >= 0, \"Please buy token.\");\r\n        IERC20(tokenAddress).transfer(msg.sender, userDeposits[_msgSender()]);\r\n        userDeposits[_msgSender()] = 0;\r\n        emit Claim(msg.sender, userDeposits[_msgSender()]);\r\n    }\r\n\r\n    function getClaimAmount(address userAddress) public view returns (uint256 claimAmount) {\r\n        claimAmount = userDeposits[userAddress];\r\n    }\r\n\r\n    function usdtBuyHelper(\r\n        uint256 usdPrice\r\n    ) public view returns (uint256 amount) {\r\n        amount = usdPrice * price/baseDecimal ;\r\n    }\r\n\r\n    function buyWithUSDT(\r\n        uint256 usdtPrice\r\n    ) external returns (bool) {\r\n        uint256 amount = usdtBuyHelper(usdtPrice);\r\n        totalSaled += amount;\r\n        uint256 ourAllowance = IERC20(USDTInterface).allowance(\r\n            _msgSender(),\r\n            address(this)\r\n        );\r\n        require(usdtPrice <= ourAllowance, \"Make sure to add enough allowance\");\r\n        userDeposits[_msgSender()] += amount;        \r\n        return true;\r\n    }\r\n\r\n    function getPrice() public view returns (uint256 tokenPrice) {\r\n        tokenPrice = price;\r\n    }\r\n\r\n    receive() external payable {\r\n        buy();\r\n    }\r\n\r\n    fallback() external payable {\r\n        buy();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"baseDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUserToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"resetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d77812d31c188eff044fc6ae6077ea99baa34f700000000000000000000000000000000000000000000000000000004a817c800", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e023a7475d5f5bc4ddf775673bdbe3a7108a54627ae22739d27861efdc32464e"}