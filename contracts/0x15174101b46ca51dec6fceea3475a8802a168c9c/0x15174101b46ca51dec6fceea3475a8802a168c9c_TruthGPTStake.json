{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TruthGPTStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ninterface ITruthGPT {\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\\ncontract TruthGPTStake is ReentrancyGuard, Ownable {\\n  ITruthGPT public truthGPT;\\n\\n  struct Stake {\\n    uint256 amount;\\n    uint256 timestamp;\\n  }\\n\\n  uint256 public arp = 750;\\n  uint256 public minStakingPeriod = 30 days;\\n  uint256 public withdrawPenalty = 25;\\n\\n  mapping(address => Stake[]) private stakes;\\n  mapping(address => uint256) private stakingBalance;\\n  mapping(address => uint256) private lastClaimTime;\\n\\n  event Staked(address indexed from, uint256 amount);\\n  event Unstaked(address indexed to, uint256 amount, uint256 stakingperiod);\\n  event Penalty(address indexed to, uint256 amount);\\n  event RewardClaimed(address indexed to, uint256 amount);\\n\\n  constructor(address truthTokenAddress) Ownable() {\\n    truthGPT = ITruthGPT(truthTokenAddress);\\n  }\\n\\n  function setARP(uint256 _arp) external onlyOwner {\\n    require(_arp > 0, \\\"Amount cann't be zero\\\");\\n    arp = _arp;\\n  }\\n\\n  function setMinStakingPeriod(uint256 _minStakingPeriod) external onlyOwner {\\n    require(_minStakingPeriod > 0, \\\"Amount cann't be zero\\\");\\n    minStakingPeriod = _minStakingPeriod;\\n  }\\n\\n  function setWithdrawPenalty(uint256 _withdrawPenalty) external onlyOwner {\\n    require(_withdrawPenalty > 0, \\\"Amount cann't be zero\\\");\\n    withdrawPenalty = _withdrawPenalty;\\n  }\\n\\n  function stakingbalance(address _staker) public view returns (uint256) {\\n    return stakingBalance[_staker];\\n  }\\n\\n  function stakerdetails(address _staker, uint256 _index) public view returns (Stake memory) {\\n    return stakes[_staker][_index];\\n  }\\n\\n  function lastclaimtime(address _staker) public view returns (uint256) {\\n    return lastClaimTime[_staker];\\n  }\\n\\n  function allStaked(address _staker) public view returns (Stake[] memory) {\\n    return stakes[_staker];\\n  }\\n\\n  function widthdrawTruth(address _address, uint256 _amount) public onlyOwner {\\n    truthGPT.transfer(_address, _amount);\\n  }\\n\\n  function stake(uint256 _amount) public {\\n    require(_amount >= 1, \\\"Amount can't be zero\\\");\\n    require(truthGPT.balanceOf(msg.sender) >= _amount, 'Insufficient $TRUTH balance');\\n\\n    truthGPT.transferFrom(msg.sender, address(this), _amount);\\n    stakingBalance[msg.sender] += _amount;\\n    stakes[msg.sender].push(Stake(_amount, block.timestamp));\\n    emit Staked(msg.sender, _amount);\\n  }\\n\\n  function unstake(uint256 _index) public nonReentrant {\\n    require(stakes[msg.sender].length > 0, 'No stakes found for the address');\\n    require(stakes[msg.sender].length >= _index + 1, 'Stake does not exist');\\n    // uint256 totalStaked = stakingBalance[msg.sender];\\n    uint256 lastStakeIndex = _index;\\n    Stake memory lastStake = stakes[msg.sender][lastStakeIndex];\\n    uint256 timeStaked = block.timestamp - lastStake.timestamp;\\n    require(timeStaked >= minStakingPeriod, 'Minimum staking period not reached');\\n    uint256 latestStake = lastStake.amount;\\n    uint256 reward = (latestStake * arp) / 10000;\\n    uint256 payout = latestStake + reward;\\n    // Remove the stake at the given index\\n    for (uint256 i = _index; i < stakes[msg.sender].length - 1; i++) {\\n      stakes[msg.sender][i] = stakes[msg.sender][i + 1];\\n    }\\n    stakes[msg.sender].pop();\\n    stakingBalance[msg.sender] -= latestStake;\\n    lastClaimTime[msg.sender] = block.timestamp;\\n    truthGPT.transfer(msg.sender, payout);\\n    emit Unstaked(msg.sender, payout, timeStaked);\\n  }\\n\\n  function withdrawpenalty(uint256 _index) public nonReentrant {\\n    require(stakes[msg.sender].length > 0, 'No stakes found for the address');\\n    require(stakes[msg.sender].length >= _index + 1, 'Stake does not exist');\\n    uint256 lastStakeIndex = _index;\\n    Stake memory lastStake = stakes[msg.sender][lastStakeIndex];\\n    uint256 timeStaked = block.timestamp - lastStake.timestamp;\\n    uint256 latestStake = lastStake.amount;\\n    require(timeStaked <= minStakingPeriod, 'Withdraw with penalty time exceed you can now unstake token ');\\n    uint256 penalty = (latestStake * withdrawPenalty) / 100;\\n    // Remove the stake at the given index\\n    for (uint256 i = _index; i < stakes[msg.sender].length - 1; i++) {\\n      stakes[msg.sender][i] = stakes[msg.sender][i + 1];\\n    }\\n    stakes[msg.sender].pop();\\n    stakingBalance[msg.sender] -= latestStake;\\n    lastClaimTime[msg.sender] = block.timestamp;\\n    uint256 payout = latestStake - penalty;\\n    truthGPT.transfer(msg.sender, payout);\\n    emit Penalty(msg.sender, payout);\\n  }\\n\\n  function claimReward() public nonReentrant {\\n    require(stakes[msg.sender].length > 0, 'No stakes found for the address');\\n    uint256 totalStaked = stakingBalance[msg.sender];\\n    uint256 lastClaim = lastClaimTime[msg.sender];\\n    uint256 timeElapsed = block.timestamp - lastClaim;\\n    require(timeElapsed > 0, 'No rewards to claim');\\n    uint256 reward = (totalStaked * (arp / 365) * (timeElapsed / 1 days)) / 100;\\n    require(reward > 0, 'Not Eligible for reward');\\n    lastClaimTime[msg.sender] = block.timestamp;\\n    truthGPT.transfer(msg.sender, reward);\\n    emit RewardClaimed(msg.sender, reward);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"truthTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Penalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingperiod\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"allStaked\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TruthGPTStake.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"lastclaimtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arp\",\"type\":\"uint256\"}],\"name\":\"setARP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakingPeriod\",\"type\":\"uint256\"}],\"name\":\"setMinStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawPenalty\",\"type\":\"uint256\"}],\"name\":\"setWithdrawPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"stakerdetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct TruthGPTStake.Stake\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"stakingbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"truthGPT\",\"outputs\":[{\"internalType\":\"contract ITruthGPT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"widthdrawTruth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"withdrawpenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TruthGPTStake", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006293bbe52c3682057163172850002f18f993da6a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}