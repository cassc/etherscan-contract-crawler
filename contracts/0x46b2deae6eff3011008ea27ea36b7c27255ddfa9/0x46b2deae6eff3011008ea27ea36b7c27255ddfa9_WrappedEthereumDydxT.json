{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dependencies/open-zeppelin/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{value: amount}('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() virtual public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() virtual public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() virtual public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { SafeMath } from './SafeMath.sol';\\nimport { Address } from './Address.sol';\\n\\n/**\\n * @title SafeERC20\\n * @dev From https://github.com/OpenZeppelin/openzeppelin-contracts\\n * Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\n    );\\n    callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function callOptionalReturn(IERC20 token, bytes memory data) private {\\n    require(address(token).isContract(), 'SafeERC20: call to non-contract');\\n\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory returndata) = address(token).call(data);\\n    require(success, 'SafeERC20: low-level call failed');\\n\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/open-zeppelin/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, 'SafeMath: addition overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, 'SafeMath: subtraction overflow');\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, 'SafeMath: division by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, 'SafeMath: modulo by zero');\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/bridge/IBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n * @dev Interface of a bridge contract.\\n */\\ninterface IBridge {\\n  /**\\n   * @dev Emitted when a bridge event occurs.\\n   *\\n   * @param  id          Unique ID of the bridge event.\\n   * @param  amount      Amount of tokens bridged.\\n   * @param  from        The Ethereum address the tokens were transferred from.\\n   * @param  accAddress  The address to send to.\\n   * @param  data        Any arbitrary data.\\n   */\\n  event Bridge(\\n    uint256 indexed id,\\n    uint256 amount,\\n    address from,\\n    bytes accAddress,\\n    bytes data\\n  );\\n\\n  /**\\n   * @notice Bridge a token.\\n   *\\n   * @param  amount       The amount of tokens to bridge\\n   * @param  accAddress   The address to send to.\\n   * @param  memo         Arbitrary memo to include in the event.\\n   */\\n  function bridge(\\n    uint256 amount,\\n    bytes calldata accAddress,\\n    bytes calldata memo\\n  ) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/governance/bridge/WrappedEthereumDydxToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport { IBridge } from './IBridge.sol';\\nimport { ERC20 } from '../../dependencies/open-zeppelin/ERC20.sol';\\nimport { SafeERC20 } from '../../dependencies/open-zeppelin/SafeERC20.sol';\\nimport { SafeMath } from '../../dependencies/open-zeppelin/SafeMath.sol';\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { GovernancePowerDelegationERC20Mixin } from '../token/GovernancePowerDelegationERC20Mixin.sol';\\n\\n/**\\n * @title WrappedEthereumDydxToken\\n * @author dYdX\\n *\\n * @notice The Wrapped Ethereum DYDX governance token.\\n */\\ncontract WrappedEthereumDydxToken is\\n  GovernancePowerDelegationERC20Mixin,\\n  IBridge\\n{\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  // ============ Constants ============\\n\\n  string internal constant NAME = 'Wrapped Ethereum DYDX';\\n  string internal constant SYMBOL = 'wethDYDX';\\n\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n  bytes public constant EIP712_VERSION = '1';\\n  bytes32 public constant EIP712_DOMAIN = keccak256(\\n    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n  );\\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\\n    'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\\n  );\\n\\n  IERC20 public immutable DYDX_TOKEN;\\n\\n  // ============ Storage ============\\n\\n  /// @dev Mapping from (owner) => (next valid nonce) for EIP-712 signatures.\\n  mapping(address => uint256) internal _nonces;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\\n  mapping(address => uint256) public _votingSnapshotsCounts;\\n  mapping(address => address) public _votingDelegates;\\n\\n  mapping(address => mapping(uint256 => Snapshot)) public _propositionPowerSnapshots;\\n  mapping(address => uint256) public _propositionPowerSnapshotsCounts;\\n  mapping(address => address) public _propositionPowerDelegates;\\n\\n  /// @notice The next available (unused) id for the bridge event. Equal to the number of events.\\n  uint256 public _nextAvailableBridgeId;\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Constructor.\\n\\n   * @param  tokenAddress  The address of the token to bridge.\\n   */\\n  constructor(\\n    ERC20 tokenAddress\\n  )\\n    ERC20(NAME, SYMBOL)\\n  {\\n    uint256 chainId;\\n\\n    // solium-disable-next-line\\n    assembly {\\n      chainId := chainid()\\n    }\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN,\\n        keccak256(bytes(NAME)),\\n        keccak256(bytes(EIP712_VERSION)),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n\\n    DYDX_TOKEN = tokenAddress;\\n  }\\n\\n  /**\\n   * @notice Bridge the DYDX token and receive wethDYDX.\\n   *\\n   * @param  amount       The amount of tokens to bridge\\n   * @param  accAddress   The address to send to.\\n   * @param  memo         Arbitrary memo to include in the event. For possible future compatibility.\\n   */\\n  function bridge(\\n    uint256 amount,\\n    bytes calldata accAddress,\\n    bytes calldata memo\\n  )\\n    external\\n    override\\n  {\\n    // Wrap the tokens.\\n    DYDX_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n    _mint(msg.sender, amount);\\n\\n    // Emit the event and increase the nonce.\\n    uint256 nonce = _nextAvailableBridgeId;\\n    emit Bridge(\\n      nonce,\\n      amount,\\n      msg.sender,\\n      accAddress,\\n      memo\\n    );\\n    _nextAvailableBridgeId = nonce + 1;\\n  }\\n\\n  /**\\n   * @notice Implements the permit function as specified in EIP-2612.\\n   *\\n   * @param  owner     Address of the token owner.\\n   * @param  spender   Address of the spender.\\n   * @param  value     Amount of allowance.\\n   * @param  deadline  Expiration timestamp for the signature.\\n   * @param  v         Signature param.\\n   * @param  r         Signature param.\\n   * @param  s         Signature param.\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    external\\n  {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR,\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n      )\\n    );\\n\\n    require(owner == ecrecover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _nonces[owner] = currentValidNonce.add(1);\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @notice Get the next valid nonce for EIP-712 signatures.\\n   *\\n   *  This nonce should be used when signing for any of the following functions:\\n   *   - permit()\\n   *   - delegateByTypeBySig()\\n   *   - delegateBySig()\\n   */\\n  function nonces(address owner)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _nonces[owner];\\n  }\\n\\n  /**\\n   * @dev Writes a snapshot before any transfer operation, including: _transfer, _mint and _burn.\\n   *  - On _transfer, it writes snapshots for both 'from' and 'to'.\\n   *  - On _mint, only for `to`.\\n   *  - On _burn, only for `from`.\\n   *\\n   * @param  from    The sender.\\n   * @param  to      The recipient.\\n   * @param  amount  The amount being transfered.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  )\\n    internal\\n    override\\n  {\\n    address votingFromDelegatee = _getDelegatee(from, _votingDelegates);\\n    address votingToDelegatee = _getDelegatee(to, _votingDelegates);\\n\\n    _moveDelegatesByType(\\n      votingFromDelegatee,\\n      votingToDelegatee,\\n      amount,\\n      DelegationType.VOTING_POWER\\n    );\\n\\n    address propPowerFromDelegatee = _getDelegatee(from, _propositionPowerDelegates);\\n    address propPowerToDelegatee = _getDelegatee(to, _propositionPowerDelegates);\\n\\n    _moveDelegatesByType(\\n      propPowerFromDelegatee,\\n      propPowerToDelegatee,\\n      amount,\\n      DelegationType.PROPOSITION_POWER\\n    );\\n  }\\n\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    override\\n    view\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, // snapshots\\n      mapping(address => uint256) storage, // snapshots count\\n      mapping(address => address) storage // delegatees list\\n    )\\n  {\\n    if (delegationType == DelegationType.VOTING_POWER) {\\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\\n    } else {\\n      return (\\n        _propositionPowerSnapshots,\\n        _propositionPowerSnapshotsCounts,\\n        _propositionPowerDelegates\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Delegates specific governance power from signer to `delegatee` using an EIP-712 signature.\\n   *\\n   * @param  delegatee       The address to delegate votes to.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   * @param  nonce           The signer's nonce for EIP-712 signatures on this contract.\\n   * @param  expiry          Expiration timestamp for the signature.\\n   * @param  v               Signature param.\\n   * @param  r               Signature param.\\n   * @param  s               Signature param.\\n   */\\n  function delegateByTypeBySig(\\n    address delegatee,\\n    DelegationType delegationType,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    public\\n  {\\n    bytes32 structHash = keccak256(\\n      abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\\n    );\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signer = ecrecover(digest, v, r, s);\\n    require(signer != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signer]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signer, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Delegates both governance powers from signer to `delegatee` using an EIP-712 signature.\\n   *\\n   * @param  delegatee  The address to delegate votes to.\\n   * @param  nonce      The signer's nonce for EIP-712 signatures on this contract.\\n   * @param  expiry     Expiration timestamp for the signature.\\n   * @param  v          Signature param.\\n   * @param  r          Signature param.\\n   * @param  s          Signature param.\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  )\\n    public\\n  {\\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', DOMAIN_SEPARATOR, structHash));\\n    address signer = ecrecover(digest, v, r, s);\\n    require(signer != address(0), 'INVALID_SIGNATURE');\\n    require(nonce == _nonces[signer]++, 'INVALID_NONCE');\\n    require(block.timestamp <= expiry, 'INVALID_EXPIRATION');\\n    _delegateByType(signer, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(signer, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/token/GovernancePowerDelegationERC20Mixin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\nimport { ERC20 } from '../../dependencies/open-zeppelin/ERC20.sol';\\nimport { SafeMath } from '../../dependencies/open-zeppelin/SafeMath.sol';\\nimport {\\n  IGovernancePowerDelegationERC20\\n} from '../../interfaces/IGovernancePowerDelegationERC20.sol';\\n\\n/**\\n * @title GovernancePowerDelegationERC20Mixin\\n * @author dYdX\\n *\\n * @notice Provides support for two types of governance powers, both endowed by the governance\\n *  token, and separately delegatable. Provides functions for delegation and for querying a user's\\n *  power at a certain block number.\\n */\\nabstract contract GovernancePowerDelegationERC20Mixin is\\n  ERC20,\\n  IGovernancePowerDelegationERC20\\n{\\n  using SafeMath for uint256;\\n\\n  // ============ Constants ============\\n\\n  /// @notice EIP-712 typehash for delegation by signature of a specific governance power type.\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH = keccak256(\\n    'DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  /// @notice EIP-712 typehash for delegation by signature of all governance powers.\\n  bytes32 public constant DELEGATE_TYPEHASH = keccak256(\\n    'Delegate(address delegatee,uint256 nonce,uint256 expiry)'\\n  );\\n\\n  // ============ Structs ============\\n\\n  /// @dev Snapshot of a value on a specific block, used to track voting power for proposals.\\n  struct Snapshot {\\n    uint128 blockNumber;\\n    uint128 value;\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Delegates a specific governance power to a delegatee.\\n   *\\n   * @param  delegatee       The address to delegate power to.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function delegateByType(address delegatee, DelegationType delegationType)\\n    external\\n    override\\n  {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @notice Delegates all governance powers to a delegatee.\\n   *\\n   * @param  delegatee  The address to delegate power to.\\n   */\\n  function delegate(address delegatee)\\n    external\\n    override\\n  {\\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\\n  }\\n\\n  /**\\n   * @notice Returns the delegatee of a user.\\n   *\\n   * @param  delegator       The address of the delegator.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    override\\n    view\\n    returns (address)\\n  {\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    return _getDelegatee(delegator, delegates);\\n  }\\n\\n  /**\\n   * @notice Returns the current power of a user. The current power is the power delegated\\n   *  at the time of the last snapshot.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n      // delegates\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\\n  }\\n\\n  /**\\n   * @notice Returns the power of a user at a certain block.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  blockNumber     The block number at which to get the user's power.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  ) external override view returns (uint256) {\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n      // delegates\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @dev Delegates one specific power to a delegatee.\\n   *\\n   * @param  delegator       The user whose power to delegate.\\n   * @param  delegatee       The address to delegate power to.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function _delegateByType(\\n    address delegator,\\n    address delegatee,\\n    DelegationType delegationType\\n  ) internal {\\n    require(delegatee != address(0), 'INVALID_DELEGATEE');\\n\\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\\n\\n    uint256 delegatorBalance = balanceOf(delegator);\\n\\n    address previousDelegatee = _getDelegatee(delegator, delegates);\\n\\n    delegates[delegator] = delegatee;\\n\\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n\\n  /**\\n   * @dev Moves power from one user to another.\\n   *\\n   * @param  from            The user from which delegated power is moved.\\n   * @param  to              The user that will receive the delegated power.\\n   * @param  amount          The amount of power to be moved.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function _moveDelegatesByType(\\n    address from,\\n    address to,\\n    uint256 amount,\\n    DelegationType delegationType\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    (\\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n      mapping(address => uint256) storage snapshotsCounts,\\n      // delegates\\n    ) = _getDelegationDataByType(delegationType);\\n\\n    if (from != address(0)) {\\n      uint256 previous = 0;\\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\\n\\n      if (fromSnapshotsCount != 0) {\\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(from);\\n      }\\n\\n      uint256 newAmount = previous.sub(amount);\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        from,\\n        uint128(newAmount)\\n      );\\n\\n      emit DelegatedPowerChanged(from, newAmount, delegationType);\\n    }\\n\\n    if (to != address(0)) {\\n      uint256 previous = 0;\\n      uint256 toSnapshotsCount = snapshotsCounts[to];\\n      if (toSnapshotsCount != 0) {\\n        previous = snapshots[to][toSnapshotsCount - 1].value;\\n      } else {\\n        previous = balanceOf(to);\\n      }\\n\\n      uint256 newAmount = previous.add(amount);\\n      _writeSnapshot(\\n        snapshots,\\n        snapshotsCounts,\\n        to,\\n        uint128(newAmount)\\n      );\\n\\n      emit DelegatedPowerChanged(to, newAmount, delegationType);\\n    }\\n  }\\n\\n  /**\\n   * @dev Searches for a balance snapshot by block number using binary search.\\n   *\\n   * @param  snapshots        The mapping of snapshots by user.\\n   * @param  snapshotsCounts  The mapping of the number of snapshots by user.\\n   * @param  user             The user for which the snapshot is being searched.\\n   * @param  blockNumber      The block number being searched.\\n   */\\n  function _searchByBlockNumber(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address user,\\n    uint256 blockNumber\\n  ) internal view returns (uint256) {\\n    require(blockNumber <= block.number, 'INVALID_BLOCK_NUMBER');\\n\\n    uint256 snapshotsCount = snapshotsCounts[user];\\n\\n    if (snapshotsCount == 0) {\\n      return balanceOf(user);\\n    }\\n\\n    // First check most recent balance\\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\\n      return snapshots[user][snapshotsCount - 1].value;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (snapshots[user][0].blockNumber > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint256 lower = 0;\\n    uint256 upper = snapshotsCount - 1;\\n    while (upper > lower) {\\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Snapshot memory snapshot = snapshots[user][center];\\n      if (snapshot.blockNumber == blockNumber) {\\n        return snapshot.value;\\n      } else if (snapshot.blockNumber < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return snapshots[user][lower].value;\\n  }\\n\\n  /**\\n   * @dev Returns delegation data (snapshot, snapshotsCount, delegates) by delegation type.\\n   *\\n   *  Note: This mixin contract does not itself define any storage, and we require the inheriting\\n   *  contract to implement this method to provide access to the relevant mappings in storage.\\n   *  This pattern was implemented by Aave for legacy reasons and we have decided not to change it.\\n   *\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function _getDelegationDataByType(DelegationType delegationType)\\n    internal\\n    virtual\\n    view\\n    returns (\\n      mapping(address => mapping(uint256 => Snapshot)) storage, // snapshots\\n      mapping(address => uint256) storage, // snapshotsCount\\n      mapping(address => address) storage // delegates\\n    );\\n\\n  /**\\n   * @dev Writes a snapshot of a user's token/power balance.\\n   *\\n   * @param  snapshots        The mapping of snapshots by user.\\n   * @param  snapshotsCounts  The mapping of the number of snapshots by user.\\n   * @param  owner            The user whose power to snapshot.\\n   * @param  newValue         The new balance to snapshot at the current block.\\n   */\\n  function _writeSnapshot(\\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\\n    mapping(address => uint256) storage snapshotsCounts,\\n    address owner,\\n    uint128 newValue\\n  ) internal {\\n    uint128 currentBlock = uint128(block.number);\\n\\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\\n    mapping(uint256 => Snapshot) storage ownerSnapshots = snapshots[owner];\\n\\n    if (\\n      ownerSnapshotsCount != 0 &&\\n      ownerSnapshots[ownerSnapshotsCount - 1].blockNumber == currentBlock\\n    ) {\\n      // Doing multiple operations in the same block\\n      ownerSnapshots[ownerSnapshotsCount - 1].value = newValue;\\n    } else {\\n      ownerSnapshots[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the delegatee of a user. If a user never performed any delegation, their\\n   *  delegated address will be 0x0, in which case we return the user's own address.\\n   *\\n   * @param  delegator  The address of the user for which return the delegatee.\\n   * @param  delegates  The mapping of delegates for a particular type of delegation.\\n   */\\n  function _getDelegatee(\\n    address delegator,\\n    mapping(address => address) storage delegates\\n  )\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address previousDelegatee = delegates[delegator];\\n\\n    if (previousDelegatee == address(0)) {\\n      return delegator;\\n    }\\n\\n    return previousDelegatee;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\n/**\\n* @dev Interface of the ERC20 standard as defined in the EIP.\\n*/\\ninterface IERC20 {\\n  /**\\n    * @dev Returns the amount of tokens in existence.\\n    */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n    * @dev Returns the amount of tokens owned by `account`.\\n    */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Returns the remaining number of tokens that `spender` will be\\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n    * zero by default.\\n    *\\n    * This value changes when {approve} or {transferFrom} are called.\\n    */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n    * that someone may use both the old and the new allowance by unfortunate\\n    * transaction ordering. One possible solution to mitigate this race\\n    * condition is to first reduce the spender's allowance to 0 and set the\\n    * desired value afterwards:\\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    *\\n    * Emits an {Approval} event.\\n    */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n    * allowance mechanism. `amount` is then deducted from the caller's\\n    * allowance.\\n    *\\n    * Returns a boolean value indicating whether the operation succeeded.\\n    *\\n    * Emits a {Transfer} event.\\n    */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n    * another (`to`).\\n    *\\n    * Note that `value` may be zero.\\n    */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n    * a call to {approve}. `value` is the new allowance.\\n    */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernancePowerDelegationERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.5;\\n\\ninterface IGovernancePowerDelegationERC20 {\\n\\n  enum DelegationType {\\n    VOTING_POWER,\\n    PROPOSITION_POWER\\n  }\\n\\n  /**\\n   * @dev Emitted when a user delegates governance power to another user.\\n   *\\n   * @param  delegator       The delegator.\\n   * @param  delegatee       The delegatee.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    DelegationType delegationType\\n  );\\n\\n  /**\\n   * @dev Emitted when an action changes the delegated power of a user.\\n   *\\n   * @param  user            The user whose delegated power has changed.\\n   * @param  amount          The new amount of delegated power for the user.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\\n\\n  /**\\n   * @dev Delegates a specific governance power to a delegatee.\\n   *\\n   * @param  delegatee       The address to delegate power to.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\\n\\n  /**\\n   * @dev Delegates all governance powers to a delegatee.\\n   *\\n   * @param  delegatee  The user to which the power will be delegated.\\n   */\\n  function delegate(address delegatee) external virtual;\\n\\n  /**\\n   * @dev Returns the delegatee of an user.\\n   *\\n   * @param  delegator       The address of the delegator.\\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getDelegateeByType(address delegator, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (address);\\n\\n  /**\\n   * @dev Returns the current delegated power of a user. The current power is the power delegated\\n   *  at the time of the last snapshot.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getPowerCurrent(address user, DelegationType delegationType)\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n\\n  /**\\n   * @dev Returns the delegated power of a user at a certain block.\\n   *\\n   * @param  user            The user whose power to query.\\n   * @param  blockNumber     The block number at which to get the user's power.\\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\\n   */\\n  function getPowerAtBlock(\\n    address user,\\n    uint256 blockNumber,\\n    DelegationType delegationType\\n  )\\n    external\\n    view\\n    virtual\\n    returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"berlin\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"accAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Bridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DYDX_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nextAvailableBridgeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_propositionPowerDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_propositionPowerSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_propositionPowerSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votingSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"accAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"memo\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateByTypeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WrappedEthereumDydxToken", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000092d6c1e31e14520e676a687f0a93788b716beff5", "EVMVersion": "berlin", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}