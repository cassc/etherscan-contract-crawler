{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/deployer/Deployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { IDeployer } from \\\"../interfaces/IDeployer.sol\\\";\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\n\\nimport { Essence } from \\\"../core/Essence.sol\\\";\\nimport { Content } from \\\"../core/Content.sol\\\";\\nimport { W3st } from \\\"../core/W3st.sol\\\";\\n\\ncontract Deployer is IDeployer {\\n    DataTypes.DeployParameters public override params;\\n\\n    /// @inheritdoc IDeployer\\n    function deployEssence(\\n        bytes32 salt,\\n        address engine\\n    ) external override returns (address addr) {\\n        params.engine = engine;\\n        addr = address(new Essence{ salt: salt }());\\n        delete params;\\n    }\\n\\n    /// @inheritdoc IDeployer\\n    function deployContent(\\n        bytes32 salt,\\n        address engine\\n    ) external override returns (address addr) {\\n        params.engine = engine;\\n        addr = address(new Content{ salt: salt }());\\n        delete params;\\n    }\\n\\n    /// @inheritdoc IDeployer\\n    function deployW3st(\\n        bytes32 salt,\\n        address engine\\n    ) external override returns (address addr) {\\n        params.engine = engine;\\n        addr = address(new W3st{ salt: salt }());\\n        delete params;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title IDeployer\\n * @author CyberConnect\\n */\\ninterface IDeployer {\\n    /**\\n     * @notice Parameters when constructing a Content, Essence or W3ST.\\n     *\\n     * @return engine The engine address.\\n     */\\n    function params() external view returns (address engine);\\n\\n    /**\\n     * @notice Deploy a new Essence.\\n     *\\n     * @param salt The salt used to generate contract address in a deterministic way.\\n     * @param engine The CyberEngine address.\\n     *\\n     * @return addr The deployed essence address.\\n     */\\n    function deployEssence(\\n        bytes32 salt,\\n        address engine\\n    ) external returns (address addr);\\n\\n    /**\\n     * @notice Deploy a new Content\\n     *\\n     * @param salt The salt used to generate contract address in a deterministic way.\\n     * @param engine The CyberEngine address.\\n     *\\n     * @return addr The deployed content address.\\n     */\\n    function deployContent(\\n        bytes32 salt,\\n        address engine\\n    ) external returns (address addr);\\n\\n    /**\\n     * @notice Deploy a new W3ST\\n     *\\n     * @param salt The salt used to generate contract address in a deterministic way.\\n     * @param engine The CyberEngine address.\\n     *\\n     * @return addr The deployed W3ST address.\\n     */\\n    function deployW3st(\\n        bytes32 salt,\\n        address engine\\n    ) external returns (address addr);\\n}\\n\"\r\n    },\r\n    \"src/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nlibrary DataTypes {\\n    enum Category {\\n        Essence,\\n        Content,\\n        W3ST,\\n        Subscribe\\n    }\\n\\n    enum ContentType {\\n        Content,\\n        Comment,\\n        Share\\n    }\\n\\n    struct EIP712Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 deadline;\\n    }\\n\\n    struct RegisterEssenceParams {\\n        address account;\\n        string name;\\n        string symbol;\\n        string tokenURI;\\n        address mw;\\n        bool transferable;\\n    }\\n\\n    struct RegisterSubscriptionParams {\\n        address account;\\n        string name;\\n        string symbol;\\n        string tokenURI;\\n        uint256 dayPerSub;\\n        uint256 pricePerSub;\\n        address recipient;\\n    }\\n\\n    struct PublishContentParams {\\n        address account;\\n        string tokenURI;\\n        address mw;\\n        bool transferable;\\n    }\\n\\n    struct ShareParams {\\n        address account;\\n        address accountShared;\\n        uint256 idShared;\\n    }\\n\\n    struct InitParams {\\n        address soulAddr;\\n        address mwManagerAddr;\\n        address essImpl;\\n        address contentImpl;\\n        address w3stImpl;\\n        address subImpl;\\n        address adminAddr;\\n    }\\n\\n    struct CommentParams {\\n        address account;\\n        string tokenURI;\\n        address mw;\\n        bool transferable;\\n        address accountCommented;\\n        uint256 idCommented;\\n    }\\n\\n    struct IssueW3stParams {\\n        address account;\\n        string tokenURI;\\n        address mw;\\n        bool transferable;\\n    }\\n\\n    struct EssenceStruct {\\n        address essence;\\n        address mw;\\n        string name;\\n        string symbol;\\n        string tokenURI;\\n        bool transferable;\\n    }\\n\\n    struct SubscribeStruct {\\n        address subscribe;\\n        string name;\\n        string symbol;\\n        string tokenURI;\\n        uint256 dayPerSub;\\n        uint256 pricePerSub;\\n        address recipient;\\n    }\\n\\n    struct AccountStruct {\\n        uint256 essenceCount;\\n        address w3st;\\n        uint256 w3stCount;\\n        address content;\\n        uint256 contentCount;\\n    }\\n\\n    struct ContentStruct {\\n        address mw;\\n        string tokenURI;\\n        bool transferable;\\n        address srcAccount;\\n        uint256 srcId;\\n        ContentType contentType;\\n    }\\n\\n    struct W3stStruct {\\n        address mw;\\n        string tokenURI;\\n        bool transferable;\\n    }\\n\\n    struct CollectParams {\\n        address account;\\n        uint256 id;\\n        uint256 amount;\\n        address to;\\n        Category category;\\n    }\\n\\n    struct MwParams {\\n        address account;\\n        Category category;\\n        uint256 id;\\n        uint256 amount;\\n        address from;\\n        address to;\\n        address referrerAccount;\\n        bytes data;\\n    }\\n\\n    struct DeployParameters {\\n        address engine;\\n    }\\n\\n    struct MetadataPair {\\n        string key;\\n        string value;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/Essence.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { IEssence } from \\\"../interfaces/IEssence.sol\\\";\\nimport { ICyberEngine } from \\\"../interfaces/ICyberEngine.sol\\\";\\nimport { IDeployer } from \\\"../interfaces/IDeployer.sol\\\";\\n\\nimport { CyberNFT721 } from \\\"../base/CyberNFT721.sol\\\";\\nimport { LibString } from \\\"../libraries/LibString.sol\\\";\\n\\n/**\\n * @title Essence NFT\\n * @author CyberConnect\\n * @notice This contract defines Essence NFT in CyberConnect Protocol.\\n */\\ncontract Essence is CyberNFT721, IEssence {\\n    /*//////////////////////////////////////////////////////////////\\n                                STATES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public immutable ENGINE;\\n\\n    address internal _account;\\n    uint256 internal _essenceId;\\n    bool internal _transferable;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {\\n        address engine = IDeployer(msg.sender).params();\\n        require(engine != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        ENGINE = engine;\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EXTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IEssence\\n    function mint(address to) external override returns (uint256) {\\n        require(msg.sender == ENGINE, \\\"ONLY_ENGINE\\\");\\n        return super._mint(to);\\n    }\\n\\n    /// @inheritdoc IEssence\\n    function initialize(\\n        address account,\\n        uint256 essenceId,\\n        string calldata name,\\n        string calldata symbol,\\n        bool transferable\\n    ) external override initializer {\\n        _account = account;\\n        _essenceId = essenceId;\\n        _transferable = transferable;\\n\\n        super._initialize(name, symbol);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         EXTERNAL VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IEssence\\n    function isTransferable() external view override returns (bool) {\\n        return _transferable;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 PUBLIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// ERC721\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public override {\\n        if (!_transferable) {\\n            revert(\\\"TRANSFER_NOT_ALLOWED\\\");\\n        }\\n        super.transferFrom(from, to, id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            PUBLIC VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// ERC721\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n        string memory uri = ICyberEngine(ENGINE).getEssenceTokenURI(\\n            _account,\\n            _essenceId\\n        );\\n        return string(abi.encodePacked(uri, LibString.toString(tokenId)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/Content.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { IContent } from \\\"../interfaces/IContent.sol\\\";\\nimport { ICyberEngine } from \\\"../interfaces/ICyberEngine.sol\\\";\\nimport { IDeployer } from \\\"../interfaces/IDeployer.sol\\\";\\n\\nimport { CyberNFT1155 } from \\\"../base/CyberNFT1155.sol\\\";\\nimport { LibString } from \\\"../libraries/LibString.sol\\\";\\n\\n/**\\n * @title Content NFT\\n * @author CyberConnect\\n * @notice This contract defines Content NFT in CyberConnect Protocol.\\n */\\ncontract Content is CyberNFT1155, IContent {\\n    /*//////////////////////////////////////////////////////////////\\n                                STATES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public immutable ENGINE;\\n\\n    address internal _account;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {\\n        address engine = IDeployer(msg.sender).params();\\n        require(engine != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        ENGINE = engine;\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EXTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IContent\\n    function initialize(address account) external override initializer {\\n        _account = account;\\n    }\\n\\n    /// @inheritdoc IContent\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external override {\\n        require(msg.sender == ENGINE, \\\"ONLY_ENGINE\\\");\\n        return super._mint(to, id, amount, data);\\n    }\\n\\n    /// @inheritdoc IContent\\n    function isTransferable(\\n        uint256 tokenId\\n    ) external view override returns (bool) {\\n        return\\n            ICyberEngine(ENGINE).getContentTransferability(_account, tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 PUBLIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// ERC1155\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override {\\n        if (!ICyberEngine(ENGINE).getContentTransferability(_account, id)) {\\n            revert(\\\"TRANSFER_NOT_ALLOWED\\\");\\n        }\\n\\n        super.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /// ERC1155\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual override {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (\\n                !ICyberEngine(ENGINE).getContentTransferability(\\n                    _account,\\n                    ids[i]\\n                )\\n            ) {\\n                revert(\\\"TRANSFER_NOT_ALLOWED\\\");\\n            }\\n        }\\n\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            PUBLIC VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// ERC1155\\n    function uri(\\n        uint256 id\\n    ) public view virtual override returns (string memory) {\\n        return ICyberEngine(ENGINE).getContentTokenURI(_account, id);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/core/W3st.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { IW3st } from \\\"../interfaces/IW3st.sol\\\";\\nimport { ICyberEngine } from \\\"../interfaces/ICyberEngine.sol\\\";\\nimport { IDeployer } from \\\"../interfaces/IDeployer.sol\\\";\\n\\nimport { CyberNFT1155 } from \\\"../base/CyberNFT1155.sol\\\";\\nimport { LibString } from \\\"../libraries/LibString.sol\\\";\\n\\n/**\\n * @title W3st NFT\\n * @author CyberConnect\\n * @notice This contract defines W3st NFT in CyberConnect Protocol.\\n */\\ncontract W3st is CyberNFT1155, IW3st {\\n    /*//////////////////////////////////////////////////////////////\\n                                STATES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public immutable ENGINE;\\n    address internal _account;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {\\n        address engine = IDeployer(msg.sender).params();\\n        require(engine != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        ENGINE = engine;\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EXTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IW3st\\n    function initialize(address account) external override initializer {\\n        _account = account;\\n    }\\n\\n    /// @inheritdoc IW3st\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external override {\\n        require(msg.sender == ENGINE, \\\"ONLY_ENGINE\\\");\\n        return super._mint(to, id, amount, data);\\n    }\\n\\n    // @inheritdoc IW3st\\n    function isTransferable(\\n        uint256 tokenId\\n    ) external view override returns (bool) {\\n        return ICyberEngine(ENGINE).getW3stTransferability(_account, tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 PUBLIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// ERC1155\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual override {\\n        if (!ICyberEngine(ENGINE).getW3stTransferability(_account, id)) {\\n            revert(\\\"TRANSFER_NOT_ALLOWED\\\");\\n        }\\n\\n        super.safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /// ERC1155\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual override {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (\\n                !ICyberEngine(ENGINE).getW3stTransferability(_account, ids[i])\\n            ) {\\n                revert(\\\"TRANSFER_NOT_ALLOWED\\\");\\n            }\\n        }\\n\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            PUBLIC VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// ERC1155\\n    function uri(\\n        uint256 id\\n    ) public view virtual override returns (string memory) {\\n        return ICyberEngine(ENGINE).getW3stTokenURI(_account, id);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IEssence.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title IEssence\\n * @author CyberConnect\\n */\\ninterface IEssence {\\n    /**\\n     * @notice Mints the Essence.\\n     *\\n     * @param to The recipient address.\\n     * @return uint256 The token id.\\n     */\\n    function mint(address to) external returns (uint256);\\n\\n    /**\\n     * @notice Check if this essence NFT is transferable.\\n     *\\n     * @return bool Whether this Essence NFT is transferable.\\n     */\\n    function isTransferable() external returns (bool);\\n\\n    /**\\n     * @notice Initializes the Essence NFT.\\n     *\\n     * @param account The account address for the Essence NFT.\\n     * @param essenceId The essence ID for the Essence NFT.\\n     * @param name The name for the Essence NFT.\\n     * @param symbol The symbol for the Essence NFT.\\n     * @param transferable Whether the Essence NFT is transferable.\\n     */\\n    function initialize(\\n        address account,\\n        uint256 essenceId,\\n        string calldata name,\\n        string calldata symbol,\\n        bool transferable\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICyberEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { ICyberEngineEvents } from \\\"./ICyberEngineEvents.sol\\\";\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\n\\n/**\\n * @title ICyberEngine\\n * @author CyberConnect\\n */\\ninterface ICyberEngine is ICyberEngineEvents {\\n    /**\\n     * @notice Initialize the CyberEngine.\\n     *\\n     * @param params The params for init.\\n     */\\n    function initialize(DataTypes.InitParams calldata params) external;\\n\\n    /**\\n     * @notice Collect an CyberAccount's essence, content or w3st.\\n     *\\n     * @param params The params for collect.\\n     * @param data The collect data for pre process.\\n     * @return uint256 The collected nft id.\\n     */\\n    function collect(\\n        DataTypes.CollectParams calldata params,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Subscribe to a CyberAccount.\\n     *\\n     * @param account The account to subscribe.\\n     * @param to The address that will receive the subscription.\\n     * @return uint256 The new token id.\\n     */\\n    function subscribe(\\n        address account,\\n        address to\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Register an essence.\\n     *\\n     * @param params The params for registration.\\n     * @param initData The registration initial data.\\n     * @return uint256 The new essence count.\\n     */\\n    function registerEssence(\\n        DataTypes.RegisterEssenceParams calldata params,\\n        bytes calldata initData\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Register subscription.\\n     *\\n     * @param params The params for registration.\\n     */\\n    function registerSubscription(\\n        DataTypes.RegisterSubscriptionParams calldata params\\n    ) external;\\n\\n    /**\\n     * @notice Set subscription data.\\n     *\\n     * @param account The account to set.\\n     * @param uri The uri to set.\\n     * @param recipient The recipient to set.\\n     * @param pricePerSub The price per subscription to set.\\n     * @param dayPerSub The day per subscription to set.\\n     */\\n    function setSubscriptionData(\\n        address account,\\n        string calldata uri,\\n        address recipient,\\n        uint256 pricePerSub,\\n        uint256 dayPerSub\\n    ) external;\\n\\n    /**\\n     * @notice Publish a content.\\n     *\\n     * @param params The params for publishing content.\\n     * @param initData The registration initial data.\\n     * @return uint256 The new token id.\\n     */\\n    function publishContent(\\n        DataTypes.PublishContentParams calldata params,\\n        bytes calldata initData\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Share a content, comment or another share.\\n     *\\n     * @param params The params for sharing.\\n     * @return uint256 The new token id.\\n     */\\n    function share(\\n        DataTypes.ShareParams calldata params\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Comment a content, comment or share.\\n     *\\n     * @param params The params for commenting content.\\n     * @param initData The registration initial data.\\n     * @return uint256 The new token id.\\n     */\\n    function comment(\\n        DataTypes.CommentParams calldata params,\\n        bytes calldata initData\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Issue a w3st.\\n     *\\n     * @param params The params for issuing w3st.\\n     * @param initData The registration initial data.\\n     * @return uint256 The new token id.\\n     */\\n    function issueW3st(\\n        DataTypes.IssueW3stParams calldata params,\\n        bytes calldata initData\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Gets the Essence NFT token URI.\\n     *\\n     * @param account The account address.\\n     * @param essenceId The Essence ID.\\n     * @return string The Essence NFT token URI.\\n     */\\n    function getEssenceTokenURI(\\n        address account,\\n        uint256 essenceId\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the Essence NFT transferability.\\n     *\\n     * @param account The account address.\\n     * @param essenceId The Essence ID.\\n     */\\n    function getEssenceTransferability(\\n        address account,\\n        uint256 essenceId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Sets essence data.\\n     *\\n     * @param account The account address.\\n     * @param essenceId The essence ID.\\n     * @param tokenURI The new token URI.\\n     * @param mw The new middleware to be set.\\n     * @param data The data for middleware.\\n     */\\n    function setEssenceData(\\n        address account,\\n        uint256 essenceId,\\n        string calldata tokenURI,\\n        address mw,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Essence NFT address.\\n     *\\n     * @param account The account address.\\n     * @param essenceId The Essence ID.\\n     * @return address The Essence NFT address.\\n     */\\n    function getEssenceAddr(\\n        address account,\\n        uint256 essenceId\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Gets the Essence NFT middleware.\\n     *\\n     * @param account The account address.\\n     * @param essenceId The Essence ID.\\n     * @return address The Essence NFT middleware.\\n     */\\n    function getEssenceMw(\\n        address account,\\n        uint256 essenceId\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Gets how many Essence NFTs the account registered.\\n     *\\n     * @param account The account address.\\n     * @return uint256 The Essence NFT count.\\n     */\\n    function getEssenceCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Sets content data.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The content tokenId.\\n     * @param tokenURI The new token URI.\\n     * @param mw The new middleware to be set.\\n     * @param data The data for middleware.\\n     */\\n    function setContentData(\\n        address account,\\n        uint256 tokenId,\\n        string calldata tokenURI,\\n        address mw,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Sets w3st data.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The w3st tokenId.\\n     * @param tokenURI The new token URI.\\n     * @param mw The new middleware to be set.\\n     * @param data The data for middleware.\\n     */\\n    function setW3stData(\\n        address account,\\n        uint256 tokenId,\\n        string calldata tokenURI,\\n        address mw,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Gets the Content NFT token URI.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The Content NFT ID.\\n     * @return string The Content NFT token URI.\\n     */\\n    function getContentTokenURI(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the Content NFT address.\\n     *\\n     * @param account The account address.\\n     * @return address The Content NFT address.\\n     */\\n    function getContentAddr(address account) external view returns (address);\\n\\n    /**\\n     * @notice Gets the Content NFT transferability.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The Content NFT ID.\\n     */\\n    function getContentTransferability(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the Content source info.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The Content NFT ID.\\n     * @return address The source content owner.\\n     * @return uint256 The source content token ID.\\n     */\\n    function getContentSrcInfo(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (address, uint256);\\n\\n    /**\\n     * @notice Gets the Content NFT middleware.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The Content NFT ID.\\n     * @return address The Content NFT middleware.\\n     */\\n    function getContentMw(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Gets how many Content NFTs the account registered.\\n     *\\n     * @param account The account address.\\n     * @return uint256 The Content NFT count.\\n     */\\n    function getContentCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the w3st NFT token URI.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The w3st NFT ID.\\n     * @return string The w3st NFT token URI.\\n     */\\n    function getW3stTokenURI(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the w3st NFT address.\\n     *\\n     * @param account The account address.\\n     * @return address The w3st NFT address.\\n     */\\n    function getW3stAddr(address account) external view returns (address);\\n\\n    /**\\n     * @notice Gets the w3st NFT transferability.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The w3st NFT ID.\\n     */\\n    function getW3stTransferability(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the w3st NFT middleware.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The w3st NFT ID.\\n     * @return address The w3st NFT middleware.\\n     */\\n    function getW3stMw(\\n        address account,\\n        uint256 tokenId\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Gets how many w3st NFTs the account registered.\\n     *\\n     * @param account The account address.\\n     * @return uint256 The w3st NFT count.\\n     */\\n    function getW3stCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets if the account approved the operator to publish/set Content, Comment, Share, W3st, Subscription in the protocol.\\n     * @param account The account address.\\n     * @param operator The operator address.\\n     */\\n    function getOperatorApproval(\\n        address account,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Sets if the account approves the operator to publish/set Content, Comment, Share, W3st, Subscription in the protocol.\\n     * @param operator The operator address.\\n     * @param approved The approval status.\\n     */\\n    function setOperatorApproval(address operator, bool approved) external;\\n\\n    /**\\n     * @notice Gets the Subscribe NFT token URI.\\n     *\\n     * @param account The account address.\\n     */\\n    function getSubscriptionTokenURI(\\n        address account\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Gets the Subscription recipient address.\\n     *\\n     * @param account The account address.\\n     * @return address The Subscription recipient address.\\n     */\\n    function getSubscriptionRecipient(\\n        address account\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Gets the Subscription price per subscription.\\n     *\\n     * @param account The account address.\\n     * @return uint256 The Subscription price per subscription.\\n     */\\n    function getSubscriptionPricePerSub(\\n        address account\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the Subscription day per subscription.\\n     *\\n     * @param account The account address.\\n     * @return uint256 The Subscription day per subscription.\\n     */\\n    function getSubscriptionDayPerSub(\\n        address account\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the Subscribe NFT address.\\n     *\\n     * @param account The account address.\\n     * @return address The Subscribe NFT address.\\n     */\\n    function getSubscriptionAddr(\\n        address account\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Contract version number.\\n     *\\n     * @return uint256 The version number.\\n     */\\n    function version() external pure returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/base/CyberNFT721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { ERC721 } from \\\"../dependencies/solmate/ERC721.sol\\\";\\nimport { Initializable } from \\\"openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { ICyberNFT721 } from \\\"../interfaces/ICyberNFT721.sol\\\";\\n\\n/**\\n * @title Cyber 721 NFT Base\\n * @author CyberConnect\\n * @notice This contract is the base for all 721 NFT contracts.\\n */\\nabstract contract CyberNFT721 is ERC721, ICyberNFT721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                STATES\\n    //////////////////////////////////////////////////////////////*/\\n    uint256 internal _currentIndex;\\n    uint256 internal _totalSupply;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         EXTERNAL VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ICyberNFT721\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 PUBLIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ICyberNFT721\\n    function burn(uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(\\n            msg.sender == owner ||\\n                msg.sender == getApproved[tokenId] ||\\n                isApprovedForAll[owner][msg.sender],\\n            \\\"NOT_OWNER_OR_APPROVED\\\"\\n        );\\n        super._burn(tokenId);\\n        _totalSupply--;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _initialize(\\n        string calldata name,\\n        string calldata symbol\\n    ) internal onlyInitializing {\\n        ERC721.__ERC721_Init(name, symbol);\\n    }\\n\\n    function _mint(address _to) internal virtual returns (uint256) {\\n        uint256 mintedId = _currentIndex;\\n        super._safeMint(_to, mintedId);\\n\\n        _currentIndex++;\\n        _totalSupply++;\\n\\n        return mintedId;\\n    }\\n\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return _ownerOf[tokenId] != address(0);\\n    }\\n\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"NOT_MINTED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/LibString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\n// adapted from 721A contracts\\nlibrary LibString {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length,\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp {\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } {\\n                // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory str) {\\n        assembly {\\n            let start := mload(0x40)\\n            // We need length * 2 bytes for the digits, 2 bytes for the prefix,\\n            // and 32 bytes for the length. We add 32 to the total and round down\\n            // to a multiple of 32. (32 + 2 + 32) = 66.\\n            str := add(start, and(add(shl(1, length), 66), not(31)))\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n\\n            // Allocate the memory.\\n            mstore(0x40, str)\\n\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), byte(and(temp, 15), \\\"0123456789abcdef\\\"))\\n                mstore8(str, byte(and(shr(4, temp), 15), \\\"0123456789abcdef\\\"))\\n                temp := shr(8, temp)\\n                length := sub(length, 1)\\n            } length {\\n                length := sub(length, 1)\\n            } {\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), byte(and(temp, 15), \\\"0123456789abcdef\\\"))\\n                mstore8(str, byte(and(shr(4, temp), 15), \\\"0123456789abcdef\\\"))\\n                temp := shr(8, temp)\\n            }\\n\\n            if temp {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\") // Function selector of the error method.\\n                mstore(0x04, 0x20) // Offset of the error string.\\n                mstore(0x24, 23) // Length of the error string.\\n                mstore(0x44, \\\"HEX_LENGTH_INSUFFICIENT\\\") // The error string.\\n                revert(0x00, 0x64) // Revert with (offset, size).\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := add(sub(end, str), 2)\\n            // Move the pointer and write the \\\"0x\\\" prefix.\\n            str := sub(str, 32)\\n            mstore(str, 0x3078)\\n            // Move the pointer and write the length.\\n            str := sub(str, 2)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    function toHexString(\\n        uint256 value\\n    ) internal pure returns (string memory str) {\\n        assembly {\\n            let start := mload(0x40)\\n            // We need 32 bytes for the length, 2 bytes for the prefix,\\n            // and 64 bytes for the digits.\\n            // The next multiple of 32 above (32 + 2 + 64) is 128.\\n            str := add(start, 128)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n\\n            // Allocate the memory.\\n            mstore(0x40, str)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), byte(and(temp, 15), \\\"0123456789abcdef\\\"))\\n                mstore8(str, byte(and(shr(4, temp), 15), \\\"0123456789abcdef\\\"))\\n                temp := shr(8, temp)\\n            } temp {\\n                // prettier-ignore\\n            } {\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), byte(and(temp, 15), \\\"0123456789abcdef\\\"))\\n                mstore8(str, byte(and(shr(4, temp), 15), \\\"0123456789abcdef\\\"))\\n                temp := shr(8, temp)\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := add(sub(end, str), 2)\\n            // Move the pointer and write the \\\"0x\\\" prefix.\\n            str := sub(str, 32)\\n            mstore(str, 0x3078)\\n            // Move the pointer and write the length.\\n            str := sub(str, 2)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    function toHexString(\\n        address value\\n    ) internal pure returns (string memory str) {\\n        assembly {\\n            let start := mload(0x40)\\n            // We need 32 bytes for the length, 2 bytes for the prefix,\\n            // and 40 bytes for the digits.\\n            // The next multiple of 32 above (32 + 2 + 40) is 96.\\n            str := add(start, 96)\\n\\n            // Allocate the memory.\\n            mstore(0x40, str)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                let length := 20\\n                let temp := value\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), byte(and(temp, 15), \\\"0123456789abcdef\\\"))\\n                mstore8(str, byte(and(shr(4, temp), 15), \\\"0123456789abcdef\\\"))\\n                temp := shr(8, temp)\\n                length := sub(length, 1)\\n            } length {\\n                length := sub(length, 1)\\n            } {\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), byte(and(temp, 15), \\\"0123456789abcdef\\\"))\\n                mstore8(str, byte(and(shr(4, temp), 15), \\\"0123456789abcdef\\\"))\\n                temp := shr(8, temp)\\n            }\\n\\n            // Move the pointer and write the \\\"0x\\\" prefix.\\n            str := sub(str, 32)\\n            mstore(str, 0x3078)\\n            // Move the pointer and write the length.\\n            str := sub(str, 2)\\n            mstore(str, 42)\\n        }\\n    }\\n\\n    function toLower(string memory str) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(str);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            if ((bStr[i] >= \\\"A\\\") && (bStr[i] <= \\\"Z\\\")) {\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n\\n    function toUpper(string memory str) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(str);\\n        bytes memory bLower = new bytes(bStr.length);\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            if ((bStr[i] >= \\\"a\\\") && (bStr[i] <= \\\"z\\\")) {\\n                bLower[i] = bytes1(uint8(bStr[i]) - 32);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IContent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title IContent\\n * @author CyberConnect\\n */\\ninterface IContent {\\n    /**\\n     * @notice Initialize the contract.\\n     * @param account The Content creator.\\n     */\\n    function initialize(address account) external;\\n\\n    /**\\n     * @notice Mint a new token.\\n     * @param to The address to mint to.\\n     * @param id The token ID to mint.\\n     * @param amount The amount to mint.\\n     * @param data The data to pass if receiver is a contract.\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Check if the token is transferable.\\n     * @param tokenId The token ID to check.\\n     * @return True if the token is transferable.\\n     */\\n    function isTransferable(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/base/CyberNFT1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { ERC1155 } from \\\"../dependencies/solmate/ERC1155.sol\\\";\\n\\nimport { ICyberNFT1155 } from \\\"../interfaces/ICyberNFT1155.sol\\\";\\n\\n/**\\n * @title Cyber 1155 NFT Base\\n * @author CyberConnect\\n * @notice This contract is the base for all 1155 NFT contracts.\\n */\\nabstract contract CyberNFT1155 is ERC1155, ICyberNFT1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                STATES\\n    //////////////////////////////////////////////////////////////*/\\n    mapping(uint256 => uint256) internal _totalSupply;\\n    uint256 internal _totalSupplyAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         EXTERNAL VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ICyberNFT1155\\n    function totalSupply(\\n        uint256 tokenId\\n    ) external view virtual override returns (uint256) {\\n        return _totalSupply[tokenId];\\n    }\\n\\n    /// @inheritdoc ICyberNFT1155\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupplyAll;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 PUBLIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc ICyberNFT1155\\n    function burn(\\n        address account,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) public virtual override {\\n        require(\\n            msg.sender == account || isApprovedForAll[account][msg.sender],\\n            \\\"NOT_OWNER_OR_APPROVED\\\"\\n        );\\n        require(balanceOf[account][tokenId] >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n        _totalSupply[tokenId] -= amount;\\n        _totalSupplyAll -= amount;\\n\\n        super._burn(account, tokenId, amount);\\n    }\\n\\n    /// @inheritdoc ICyberNFT1155\\n    function burnBatch(\\n        address account,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) public virtual override {\\n        require(\\n            msg.sender == account || isApprovedForAll[account][msg.sender],\\n            \\\"NOT_OWNER_OR_APPROVED\\\"\\n        );\\n\\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 amount = amounts[i];\\n\\n            require(\\n                balanceOf[account][tokenId] >= amount,\\n                \\\"INSUFFICIENT_BALANCE\\\"\\n            );\\n\\n            _totalSupply[tokenId] -= amount;\\n            _totalSupplyAll -= amount;\\n        }\\n\\n        super._batchBurn(account, tokenIds, amounts);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              INTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        bytes memory _data\\n    ) internal virtual override {\\n        _totalSupplyAll += _amount;\\n        _totalSupply[_tokenId] += _amount;\\n\\n        super._mint(_to, _tokenId, _amount, _data);\\n    }\\n\\n    function _batchMint(\\n        address _to,\\n        uint256[] memory _tokenIds,\\n        uint256[] memory _amounts,\\n        bytes memory _data\\n    ) internal virtual override {\\n        for (uint256 i = 0; i < _tokenIds.length; ++i) {\\n            uint256 tokenId = _tokenIds[i];\\n            uint256 amount = _amounts[i];\\n\\n            _totalSupply[tokenId] += amount;\\n            _totalSupplyAll += amount;\\n        }\\n\\n        super._batchMint(_to, _tokenIds, _amounts, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IW3st.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title IW3st\\n * @author CyberConnect\\n */\\ninterface IW3st {\\n    /**\\n     * @notice Initializes the contract.\\n     * @param account The W3st creator.\\n     */\\n    function initialize(address account) external;\\n\\n    /**\\n     * @notice Mint a new token.\\n     * @param to The address to mint to.\\n     * @param id The token ID to mint.\\n     * @param amount The amount to mint.\\n     * @param data The data to pass if receiver is a contract.\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Check if the token is transferable.\\n     * @param tokenId The token ID to check.\\n     * @return True if the token is transferable.\\n     */\\n    function isTransferable(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICyberEngineEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\n\\n/**\\n * @title ICyberEngineEvents\\n * @author CyberConnect\\n */\\ninterface ICyberEngineEvents {\\n    /**\\n     * @notice Emitted when a CyberEngine has been created.\\n     *\\n     * @param soul The soul contract address.\\n     * @param mwManager The middleware contract address.\\n     * @param essImpl The essence impl address.\\n     * @param contentImpl The content impl address.\\n     * @param w3stImpl The w3st impl address.\\n     * @param subImpl The sub impl address.\\n     * @param admin The admin address to upgrade the contract.\\n     */\\n    event Initialize(\\n        address soul,\\n        address mwManager,\\n        address essImpl,\\n        address contentImpl,\\n        address w3stImpl,\\n        address subImpl,\\n        address indexed admin\\n    );\\n\\n    /**\\n     * @notice Emitted when a new essence has been created.\\n     *\\n     * @param account The account address.\\n     * @param essenceId The essence id.\\n     * @param name The essence name.\\n     * @param symbol The essence symbol.\\n     * @param tokenURI the essence tokenURI.\\n     * @param transferable The transferable flag.\\n     * @param essence the deployed EssenceNFT address.\\n     * @param mw The middleware.\\n     */\\n    event RegisterEssence(\\n        address indexed account,\\n        uint256 indexed essenceId,\\n        string name,\\n        string symbol,\\n        string tokenURI,\\n        bool transferable,\\n        address mw,\\n        address essence\\n    );\\n\\n    /**\\n     * @notice Emitted when a new Subscription has been registered.\\n     *\\n     * @param account The account address.\\n     * @param name The subscription name.\\n     * @param symbol The subscription symbol.\\n     * @param tokenURI the subscription tokenURI.\\n     * @param pricePerSub The price per subscription.\\n     * @param dayPerSub The day per subscription.\\n     * @param recipient The recipient address.\\n     * @param subscribe The subscribe NFT contract address.\\n     */\\n    event RegisterSubscription(\\n        address indexed account,\\n        string name,\\n        string symbol,\\n        string tokenURI,\\n        uint256 pricePerSub,\\n        uint256 dayPerSub,\\n        address recipient,\\n        address subscribe\\n    );\\n\\n    /**\\n     * @notice Emitted when a new content has been created.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The token id.\\n     * @param tokenURI the content tokenURI.\\n     * @param transferable The transferable flag.\\n     * @param mw The middleware.\\n     * @param content the deployed ContentNFT address.\\n     */\\n    event PublishContent(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        string tokenURI,\\n        bool transferable,\\n        address mw,\\n        address content\\n    );\\n\\n    /**\\n     * @notice Emitted when a new comment has been created.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The token id.\\n     * @param tokenURI the content tokenURI.\\n     * @param transferable The transferable flag.\\n     * @param content the deployed ContentNFT address.\\n     * @param mw The middleware.\\n     * @param accountCommented The commented account address.\\n     * @param idCommented The commented token id.\\n     */\\n    event Comment(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        string tokenURI,\\n        bool transferable,\\n        address mw,\\n        address content,\\n        address accountCommented,\\n        uint256 idCommented\\n    );\\n\\n    /**\\n     * @notice Emitted when a new share has been created.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The token id.\\n     * @param srcAccount the src account to share.\\n     * @param srcId the src id to share\\n     */\\n    event Share(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        address srcAccount,\\n        uint256 srcId\\n    );\\n\\n    /**\\n     * @notice Emitted when a new w3st has been created.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The token id.\\n     * @param tokenURI the content tokenURI.\\n     * @param transferable The transferable flag.\\n     * @param w3st the deployed W3ST address.\\n     * @param mw The middleware.\\n     */\\n    event IssueW3st(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        string tokenURI,\\n        bool transferable,\\n        address mw,\\n        address w3st\\n    );\\n\\n    /**\\n     * @notice Emitted when an essence has been collected.\\n     *\\n     * @param to The address that will receive the NFT.\\n     * @param from The address pays related fees.\\n     * @param account The account addresss.\\n     * @param id The id.\\n     * @param amount The amount to collect.\\n     * @param newTokenId The token id of the newly minted NFT (only for collecting Essence).\\n     * @param category The category to collect.\\n     */\\n    event Collect(\\n        address indexed to,\\n        address from,\\n        address indexed account,\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 newTokenId,\\n        DataTypes.Category category\\n    );\\n\\n    /**\\n     * @notice Emitted when essence data has been set to an account.\\n     *\\n     * @param account The account address.\\n     * @param essenceId The essence id.\\n     * @param tokenURI The new token URI.\\n     * @param mw The new middleware.\\n     */\\n    event SetEssenceData(\\n        address indexed account,\\n        uint256 indexed essenceId,\\n        string tokenURI,\\n        address mw\\n    );\\n\\n    /**\\n     * @notice Emitted when content data has been set to an account.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The token id.\\n     * @param tokenURI The new token URI.\\n     * @param mw The new middleware.\\n     */\\n    event SetContentData(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        string tokenURI,\\n        address mw\\n    );\\n\\n    /**\\n     * @notice Emitted when w3st data has been set to an account.\\n     *\\n     * @param account The account address.\\n     * @param tokenId The token id.\\n     * @param tokenURI The new token URI.\\n     * @param mw The new middleware.\\n     */\\n    event SetW3stData(\\n        address indexed account,\\n        uint256 indexed tokenId,\\n        string tokenURI,\\n        address mw\\n    );\\n\\n    /**\\n     * @notice Emitted when subscription data has been set to an account.\\n     *\\n     * @param account The account address.\\n     * @param tokenURI The new token URI.\\n     * @param recipient The new recipient address.\\n     * @param pricePerSub The new price per subscription.\\n     * @param dayPerSub The new day per subscription.\\n     */\\n    event SetSubscriptionData(\\n        address indexed account,\\n        string tokenURI,\\n        address recipient,\\n        uint256 pricePerSub,\\n        uint256 dayPerSub\\n    );\\n\\n    /**\\n     * @notice Emitted when a new operator has been approved.\\n     *\\n     * @param account The account address.\\n     * @param operator The operator address.\\n     * @param approved The approval status.\\n     */\\n    event SetOperatorApproval(\\n        address indexed account,\\n        address indexed operator,\\n        bool prevApproved,\\n        bool approved\\n    );\\n}\\n\"\r\n    },\r\n    \"src/dependencies/solmate/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport { Initializable } from \\\"openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/// @notice Adapted from Solmate's ERC721.sol with initializer replacing the constructor.\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 is Initializable {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed id\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 indexed id\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               INIT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function __ERC721_Init(\\n        string calldata _name,\\n        string calldata _symbol\\n    ) internal {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 id) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from ||\\n                isApprovedForAll[from][msg.sender] ||\\n                msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        if (to.code.length != 0)\\n            require(\\n                ERC721TokenReceiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    \\\"\\\"\\n                ) == ERC721TokenReceiver.onERC721Received.selector,\\n                \\\"UNSAFE_RECIPIENT\\\"\\n            );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        if (to.code.length != 0)\\n            require(\\n                ERC721TokenReceiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    data\\n                ) == ERC721TokenReceiver.onERC721Received.selector,\\n                \\\"UNSAFE_RECIPIENT\\\"\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        if (to.code.length != 0)\\n            require(\\n                ERC721TokenReceiver(to).onERC721Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    \\\"\\\"\\n                ) == ERC721TokenReceiver.onERC721Received.selector,\\n                \\\"UNSAFE_RECIPIENT\\\"\\n            );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        if (to.code.length != 0)\\n            require(\\n                ERC721TokenReceiver(to).onERC721Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    data\\n                ) == ERC721TokenReceiver.onERC721Received.selector,\\n                \\\"UNSAFE_RECIPIENT\\\"\\n            );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICyberNFT721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title ICyberNFT721\\n * @author CyberConnect\\n */\\ninterface ICyberNFT721 {\\n    /**\\n     * @notice Gets total number of tokens in existence, burned tokens will reduce the count.\\n     *\\n     * @return uint256 The total supply.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Burns a token.\\n     *\\n     * @param tokenId The token ID to burn.\\n     */\\n    function burn(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"src/dependencies/solmate/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport { Initializable } from \\\"openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 is Initializable {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        require(balanceOf[from][id] >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                ) == ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            require(balanceOf[from][id] >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(\\n                    msg.sender,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                ) == ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(\\n        address[] calldata owners,\\n        uint256[] calldata ids\\n    ) public view virtual returns (uint256[] memory balances) {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    amount,\\n                    data\\n                ) == ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(\\n                    msg.sender,\\n                    address(0),\\n                    ids,\\n                    amounts,\\n                    data\\n                ) == ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICyberNFT1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title ICyberNFT1155\\n * @author CyberConnect\\n */\\ninterface ICyberNFT1155 {\\n    /**\\n     * @notice Gets total supply for certain tokenID, burned tokens will reduce the count.\\n     *\\n     * @param tokenId The token ID to check.\\n     * @return uint256 The total supply.\\n     */\\n    function totalSupply(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets total supply for all, burned tokens will reduce the count.\\n     *\\n     * @return uint256 The total supply.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Burns a token.\\n     *\\n     * @param account The account address to burn.\\n     * @param tokenId The token ID to burn.\\n     * @param amount The amount to burn.\\n     */\\n    function burn(address account, uint256 tokenId, uint256 amount) external;\\n\\n    /**\\n     * @notice Batch burn token.\\n     *\\n     * @param account The account address to burn.\\n     * @param tokenIds The token IDs to burn.\\n     * @param amounts The amounts to burn.\\n     */\\n    function burnBatch(\\n        address account,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/kernel/lib/openzeppelin-contracts/\",\r\n      \"account-abstraction/=lib/account-abstraction/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"kernel/=lib/kernel/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solady/=lib/kernel/lib/solady/\",\r\n      \"solmate/=lib/solmate/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"}],\"name\":\"deployContent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"}],\"name\":\"deployEssence\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"}],\"name\":\"deployW3st\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Deployer", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}