{"SourceCode": "/**\r\n * Source Code first verified at https://etherscan.io on Friday, March 15, 2019\r\n (UTC) */\r\n\r\npragma solidity ^0.5.3;\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Owned contract\r\n    // ----------------------------------------------------------------------------\r\n    contract Owned {\r\n        address public owner;\r\n        address public newOwner;\r\n\r\n        event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        function transferOwnership(address _newOwner) public onlyOwner {\r\n            newOwner = _newOwner;\r\n        }\r\n        function acceptOwnership() public {\r\n            require(msg.sender == newOwner);\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            newOwner = address(0);\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Safe maths\r\n    // ----------------------------------------------------------------------------\r\n    library SafeMath {\r\n        function add(uint a, uint b) internal pure returns (uint c) {\r\n            c = a + b;\r\n            require(c >= a);\r\n        }\r\n        function sub(uint a, uint b) internal pure returns (uint c) {\r\n            require(b <= a);\r\n            c = a - b;\r\n        }\r\n        function mul(uint a, uint b) internal pure returns (uint c) {\r\n            c = a * b;\r\n            require(a == 0 || c / a == b);\r\n        }\r\n        function div(uint a, uint b) internal pure returns (uint c) {\r\n            require(b > 0);\r\n            c = a / b;\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // ERC Token Standard #20 Interface\r\n    // ----------------------------------------------------------------------------\r\n    contract ERC20Interface {\r\n        function totalSupply() public view returns (uint);\r\n        function balanceOf(address tokenOwner) public view returns (uint balance);\r\n        function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n        function transfer(address to, uint tokens) public returns (bool success);\r\n        function approve(address spender, uint tokens) public returns (bool success);\r\n        function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n        event Transfer(address indexed from, address indexed to, uint tokens);\r\n        event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // MPAY Token Contract\r\n    // ----------------------------------------------------------------------------\r\n    contract MPAY is ERC20Interface, Owned{\r\n        using SafeMath for uint;\r\n        \r\n        string public symbol;\r\n        string public name;\r\n        uint8 public decimals;\r\n        uint _totalSupply;\r\n        mapping(address => uint) balances;\r\n        mapping(address => mapping(address => uint)) allowed;\r\n        mapping(address => uint) unLockedCoins; // this will keep number of unLockedCoins per address\r\n        struct PC {\r\n        uint256 lockingPeriod;\r\n        uint256 coins;\r\n        bool added;\r\n        }\r\n        mapping(address => PC[]) record; // this will keep record of Locking periods and coins per address\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Constructor\r\n        // ------------------------------------------------------------------------\r\n        constructor(address _owner) public{\r\n            symbol = \"MPAY\";\r\n            name = \"MPAY\";\r\n            decimals = 18;\r\n            owner = _owner;\r\n            _totalSupply = 4e8; //400,000,000\r\n            balances[owner] = totalSupply();\r\n            emit Transfer(address(0),owner,totalSupply());\r\n        }\r\n\r\n        function totalSupply() public view returns (uint){\r\n        return _totalSupply * 10**uint(decimals);\r\n        }\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Get the token balance for account `tokenOwner`\r\n        // ------------------------------------------------------------------------\r\n        function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n            return balances[tokenOwner];\r\n        }\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Transfer the balance from token owner's account to `to` account\r\n        // - Owner's account must have sufficient balance to transfer\r\n        // - 0 value transfers are allowed\r\n        // ------------------------------------------------------------------------\r\n        function transfer(address to, uint tokens) public returns (bool success) {\r\n            // will update unLockedCoins based on time\r\n            if(msg.sender != owner){\r\n                _updateUnLockedCoins(msg.sender, tokens);\r\n                unLockedCoins[msg.sender] = unLockedCoins[msg.sender].sub(tokens);\r\n                unLockedCoins[to] = unLockedCoins[to].add(tokens);\r\n            }\r\n            // prevent transfer to 0x0, use burn instead\r\n            require(to != address(0));\r\n            require(balances[msg.sender] >= tokens );\r\n            require(balances[to] + tokens >= balances[to]);\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender,to,tokens);\r\n            return true;\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n        // from the token owner's account\r\n        // ------------------------------------------------------------------------\r\n        function approve(address spender, uint tokens) public returns (bool success){\r\n            allowed[msg.sender][spender] = tokens;\r\n            emit Approval(msg.sender,spender,tokens);\r\n            return true;\r\n        }\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Transfer `tokens` from the `from` account to the `to` account\r\n        // \r\n        // The calling account must already have sufficient tokens approve(...)\r\n        // for spending from the `from` account and\r\n        // - From account must have sufficient balance to transfer\r\n        // - Spender must have sufficient allowance to transfer\r\n        // - 0 value transfers are allowed\r\n        // ------------------------------------------------------------------------\r\n        function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n            // will update unLockedCoins based on time\r\n            if(msg.sender != owner){\r\n                _updateUnLockedCoins(from, tokens);\r\n                unLockedCoins[from] = unLockedCoins[from].sub(tokens);\r\n                unLockedCoins[to] = unLockedCoins[to].add(tokens);\r\n            }\r\n            require(tokens <= allowed[from][msg.sender]); //check allowance\r\n            require(balances[from] >= tokens);\r\n            balances[from] = balances[from].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            emit Transfer(from,to,tokens);\r\n            return true;\r\n        }\r\n        // ------------------------------------------------------------------------\r\n        // Returns the amount of tokens approved by the owner that can be\r\n        // transferred to the spender's account\r\n        // ------------------------------------------------------------------------\r\n        function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n            return allowed[tokenOwner][spender];\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Transfer the balance from token owner's account to `to` account\r\n        // - Owner's account must have sufficient balance to transfer\r\n        // - 0 value transfers are allowed\r\n        // - takes in locking Period to lock the tokens to be used\r\n        // - if want to transfer without locking enter 0 in lockingPeriod argument \r\n        // ------------------------------------------------------------------------\r\n        function distributeTokens(address to, uint tokens, uint256 lockingPeriod) onlyOwner public returns (bool success) {\r\n            // transfer tokens to the \"to\" address\r\n            transfer(to, tokens);\r\n            // if there is no lockingPeriod, add coins to unLockedCoins per address\r\n            if(lockingPeriod == 0)\r\n                unLockedCoins[to] = unLockedCoins[to].add(tokens);\r\n            // if there is a lockingPeriod, add coins to record mapping\r\n            else\r\n                _addRecord(to, tokens, lockingPeriod);\r\n            return true;\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Adds record of addresses with locking period and coins to lock\r\n        // ------------------------------------------------------------------------\r\n        function _addRecord(address to, uint tokens, uint256 lockingPeriod) private {\r\n                record[to].push(PC(lockingPeriod,tokens, false));\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Checks if there is any uunLockedCoins available\r\n        // ------------------------------------------------------------------------\r\n        function _updateUnLockedCoins(address _from, uint tokens) private returns (bool success) {\r\n            // if unLockedCoins are greater than \"tokens\" of \"to\", initiate transfer\r\n            if(unLockedCoins[_from] >= tokens){\r\n                return true;\r\n            }\r\n            // if unLockedCoins are less than \"tokens\" of \"to\", update unLockedCoins by checking record with \"now\" time\r\n            else{\r\n                _updateRecord(_from);\r\n                // check if unLockedCoins are greater than \"token\" of \"to\", initiate transfer\r\n                if(unLockedCoins[_from] >= tokens){\r\n                    return true;\r\n                }\r\n                // otherwise revert\r\n                else{\r\n                    revert();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Unlock the coins if lockingPeriod is expired\r\n        // ------------------------------------------------------------------------\r\n        function _updateRecord(address _address) private returns (bool success){\r\n            PC[] memory tempArray = record[_address];\r\n            uint tempCount = 0;\r\n            for(uint i=0; i < tempArray.length; i++){\r\n                if(tempArray[i].lockingPeriod < now && tempArray[i].added == false){\r\n                    tempCount = tempCount.add(tempArray[i].coins);\r\n                    tempArray[i].added = true;\r\n                    record[_address][i] = PC(tempArray[i].lockingPeriod, tempArray[i].coins, tempArray[i].added);\r\n                }\r\n            }\r\n            unLockedCoins[_address] = unLockedCoins[_address].add(tempCount);\r\n            return true;\r\n        }\r\n        \r\n    }", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"lockingPeriod\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "MPAY", "CompilerVersion": "v0.5.4+commit.9549d8ff", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000ebeba00bcb1be4fc58376d0906f1c255c597a0f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0c3bb5b5194f6f5205668cd0c9fc311106c392183dea6493eabc8f6a489f15cb"}