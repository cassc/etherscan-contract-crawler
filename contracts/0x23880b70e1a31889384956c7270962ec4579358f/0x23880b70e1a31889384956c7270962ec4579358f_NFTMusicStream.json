{"SourceCode": "pragma solidity ^0.8.10;\r\n// SPDX-License-Identifier: MIT\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract NFTMusicStream is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"NFTMUSIC.STREAM\";\r\n    string private constant _symbol = \"STREAMER\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    address public immutable deadAddress = address(0);\r\n\r\n    uint256 private constant _tTotal = 1000000000000 * 1e9; //\r\n    uint256 private _totalFee = 10;\r\n    uint256 private _storedTotalFee = _totalFee;\r\n\r\n    // For payout calculations\r\n    uint256 public _payoutAdmin = 20;\r\n    uint256 public _payoutMarketing = 40;\r\n    uint256 public _payoutAppDev = 40;\r\n\r\n    address payable private _adminAddress;\r\n    address payable private _marketingAddress;\r\n    address payable private _appDevAddress;\r\n    mapping(address => bool) private _isAdmin;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private supportLiquidity = false;\r\n\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address payable adminFunds, address payable marketingFunds, address payable appDevFunds) {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _adminAddress = adminFunds;\r\n        _marketingAddress = marketingFunds;\r\n        _appDevAddress = appDevFunds;\r\n        \r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isAdmin[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isAdmin[address(this)] = true;\r\n        _isExcludedFromFee[_adminAddress] = true;\r\n        _isAdmin[_adminAddress] = true;\r\n        _isExcludedFromFee[_marketingAddress] = true;\r\n        _isAdmin[_marketingAddress] = true;\r\n        _isExcludedFromFee[_appDevAddress] = true;\r\n        _isAdmin[_appDevAddress] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function removeAllFee() private {\r\n        if (_totalFee == 0) return;\r\n        _totalFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _totalFee = _storedTotalFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool takeFee;\r\n\r\n        if (!_isAdmin[from] && !_isAdmin[from]) {\r\n            require(tradingOpen);\r\n            takeFee = true;\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n\r\n                if (supportLiquidity) {\r\n                    uint256 liquidityPart = contractTokenBalance.div(2);\r\n                    swapTokensForEth(liquidityPart);\r\n                    uint256 newContractBalance = balanceOf(address(this));\r\n                    swapAndLiquify(newContractBalance);\r\n                } else {\r\n                    swapTokensForEth(contractTokenBalance);\r\n                }\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToWallets(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        restoreAllFee;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n      function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(half);\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n    \r\n\r\n    function sendETHToWallets(uint256 totalETHbeforeSplit) private {\r\n        if (_payoutAdmin != 0) {\r\n            uint256 adminCut = totalETHbeforeSplit.mul(_payoutAdmin).div(100);\r\n            _adminAddress.transfer(adminCut);\r\n        }\r\n\r\n        if (_payoutMarketing != 0) {\r\n            uint256 marketingCut = totalETHbeforeSplit.mul(_payoutMarketing).div(100);\r\n            _marketingAddress.transfer(marketingCut);\r\n        }\r\n\r\n        if (_payoutAppDev != 0) {\r\n            uint256 appDevCut = totalETHbeforeSplit.mul(_payoutAppDev).div(100);\r\n            _appDevAddress.transfer(appDevCut);\r\n        }\r\n    }\r\n    \r\n    function openTrading() public onlyOwner {\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function presaleFinished() external onlyOwner() {\r\n        swapEnabled = true;\r\n        supportLiquidity = true;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this), tokenAmount, 0, 0, address(this), block.timestamp);\r\n    }\r\n\r\n    function liquiditySupport(bool trueFalse) public onlyOwner {\r\n        supportLiquidity = trueFalse;\r\n    }\r\n\r\n    function manualTokenSwap() external {\r\n        require(_msgSender() == owner());\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function recoverEthFromContract() external {\r\n        require(_msgSender() == owner());\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToWallets(contractETHBalance);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 tTransferAmount, uint256 tTeam) = _getValues(tAmount);\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n        _takeTeam(tTeam);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        _balances[address(this)] = _balances[address(this)].add(tTeam);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tTeam) = _getTValues(tAmount, _totalFee);\r\n        return (tTransferAmount, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 teamFee) private pure returns (uint256, uint256) {\r\n        uint256 tTeam = tAmount.mul(teamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tTeam);\r\n        return (tTransferAmount, tTeam);\r\n    }\r\n\r\n    function manualBurn (uint256 amount) external onlyOwner() {\r\n        require(amount <= balanceOf(owner()), \"Amount exceeds available tokens balance\");\r\n        _tokenTransfer(msg.sender, deadAddress, amount, false);\r\n    }\r\n\r\n    function setRouterAddress(address newRouter) public onlyOwner() {\r\n        IUniswapV2Router02 _newUniRouter = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newUniRouter.factory()).createPair(address(this), _newUniRouter.WETH());\r\n        uniswapV2Router = _newUniRouter;\r\n    }\r\n\r\n    function setAddressAdmin(address payable newAdminAddress) external onlyOwner() {\r\n        _isExcludedFromFee[_adminAddress] = false;\r\n        _isAdmin[_adminAddress] = false;\r\n        _adminAddress = newAdminAddress;\r\n        _isExcludedFromFee[newAdminAddress] = true;\r\n        _isAdmin[newAdminAddress] = true;\r\n    }\r\n\r\n    function setAddressMarketing(address payable newMarketingAddress) external onlyOwner() {\r\n        _isExcludedFromFee[_marketingAddress] = false;\r\n        _isAdmin[_marketingAddress] = false;\r\n        _marketingAddress = newMarketingAddress;\r\n        _isExcludedFromFee[newMarketingAddress] = true;\r\n        _isAdmin[newMarketingAddress] = true;\r\n    }\r\n\r\n    function setAddressAppDev(address payable newAppDevAddress) external onlyOwner() {\r\n        _isExcludedFromFee[_appDevAddress] = false;\r\n        _isAdmin[_appDevAddress] = false;\r\n        _appDevAddress = newAppDevAddress;\r\n        _isExcludedFromFee[newAppDevAddress] = true;\r\n        _isAdmin[newAppDevAddress] = true;\r\n    }\r\n\r\n    function setPayouts(uint256 newAdminPayout, uint256 newMarketingPayout, uint256 newAppDevPayout) external onlyOwner {\r\n        require(newAdminPayout + newMarketingPayout + newAppDevPayout == 100, \"Values must equal 100\");\r\n        _payoutAdmin = newAdminPayout;\r\n        _payoutMarketing = newMarketingPayout;\r\n        _payoutAppDev = newAppDevPayout;\r\n    }\r\n    \r\n    function setFee(uint newFee) external onlyOwner {\r\n        require(newFee <= 10, \"Fee must be less than 10\");\r\n        _totalFee = newFee;\r\n        _storedTotalFee = newFee;\r\n    }\r\n\r\n    function setIsAdmin(address payable newIsAdminAddress) external onlyOwner () {\r\n      _isExcludedFromFee[newIsAdminAddress] = true;\r\n      _isAdmin[newIsAdminAddress] = true;\r\n    }\r\n\r\n    function removeIsAdmin(address payable oldIsAdminAddress) external onlyOwner () {\r\n      _isExcludedFromFee[oldIsAdminAddress] = false;\r\n      _isAdmin[oldIsAdminAddress] = false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adminFunds\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"marketingFunds\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"appDevFunds\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_payoutAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_payoutAppDev\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_payoutMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"trueFalse\",\"type\":\"bool\"}],\"name\":\"liquiditySupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEthFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"oldIsAdminAddress\",\"type\":\"address\"}],\"name\":\"removeIsAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAdminAddress\",\"type\":\"address\"}],\"name\":\"setAddressAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAppDevAddress\",\"type\":\"address\"}],\"name\":\"setAddressAppDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingAddress\",\"type\":\"address\"}],\"name\":\"setAddressMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newIsAdminAddress\",\"type\":\"address\"}],\"name\":\"setIsAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdminPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAppDevPayout\",\"type\":\"uint256\"}],\"name\":\"setPayouts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTMusicStream", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dd47a9394ff49d418c95776d883c62bb078e8320000000000000000000000000068592b9b40f02fad5e25b48dc019fdbb71ad26b0000000000000000000000001964ec38dadd38ad67f5af37bee7112141581d55", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d76dea0dd28bf28c39e36ac27b30ada715cb67229122e7274a0e3b56e56ed02"}