{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"HR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n//             .       .        .                .        .                           \\r\\n//     .    .         . .     .-               .  +     @              .   . +.+     \\r\\n//            .  .               .       .      :     @        .           .  . .    \\r\\n//       .      +    .   .  .    ..   .             *     #.       -.                \\r\\n//          *   @    .       -   .                            * -.=.   @       @ . . \\r\\n//.     .    *   :       .  =         .            -   .   @     .      :   . @    .  \\r\\n//                             .     .    .    -    +   =        .       .:.  .  .   \\r\\n//         .  #              . =    .            :    *                @-            \\r\\n// ..       .   @ @     *  *  .   .      .  ..  = * +     +   *     -@ .       .   . \\r\\n//           ..   @ % # .:.@ -         .  .  .  .       # *  %    @@ @           .   \\r\\n//   .   . .       -@.#      - % .          .   .*  # #    .. . @-@%      .. .       \\r\\n//           . ..    %@++..  : *           .   *.  +. ... =. +@@@     .  ..   .   .  \\r\\n//    .           ..   @@#-=.   .   .  .       @   :.  +- = @@@+         .  .    .   \\r\\n//* @:       .           @@@@-= . .:.         . *+  ..=%:.@@@*                   @   \\r\\n// .= -@@@           .     @@@+::@--  =       @* . -+=:#@@@    . .   .       @ @  @ .\\r\\n//        : @@@ ..            @@@%  : : +      @+: *=@@@@@.               +@# %   .   \\r\\n//   . .    . @@@#      .      @@@@%+   @    %@.#@@@@@@     .        @@@@ .        . \\r\\n//*- .    #   :  * @@@  .    . . @@@@@::@ .  @@+@@@@@         .  @@@+@ +.   @:.   .# \\r\\n//@:       @@   #@  + @@@@..       @@@@-@    @@@@@@         @@@@+@-  @.   @@     . - \\r\\n// :=   .    ..     %     @@@@@   .  @@@@@. @@@@@ .    @@@@@. #. **     #=    .      \\r\\n//.     . ..       ..    #    @@@@@+    @@  @@    :@@@@@@  :@@    *           ..  .  \\r\\n// .       .  +*=.      .      : .@@@@@@ @@@@ @@@@@@=@.              -=-             \\r\\n//.             -@@@@@@@@@@@@@@-%*        @@    %@@@@%%@@@@@@@@@@@@@*   .            \\r\\n//@@@=   .    . ..  .        .    .     @@  @@*        .    = .    %@@@@       .*%#% \\r\\n//.                . .               :@@@   :@@@@       =    :=   *         ..    .  \\r\\n//        .             .        .  @@@@+    @@@@@@       :    .  #*         .   .   \\r\\n//                .       .       @@@@@=.    =@@@@@@@    .         . . :- +@-        \\r\\n//              -  .            @@@@#*:      :+ #@@@@@@         .    -   @    -@   : \\r\\n//     .                 .    @@@ :-*..   ..  @* +-*%@@@@  .       ..                \\r\\n//            .             @@@%-++* :    .  .@*:*:=@@+@@@-      . .   .           . \\r\\n//.  .              . .   @@@%. ==+. *      . -%*:. .:-=%@@@+                      . \\r\\n//    .                 @@#**   *-=            **==  : : .%@@@@          .        .  \\r\\n//      .       . .  .*@ @ :- #:.        .      **+ :#  @  *-*@@@ .    .             \\r\\n//           .      @@ @ % :   +. . .          .@: : . # + * *@.@@%           .      \\r\\n//.        . .     @@-@.. @   . -   .    .      ..:+  +   :    .+@.%@@        .     . \\r\\n//              @ %# -   .  .  -     . . .         #=    - .- +  @@ -@@              \\r\\n//            @ @+ :  @  .                       *. * @     @   -  @   @      ..     \\r\\n// ..         * @    :      . .   ..  .            + #  #   *        @   =  . .      \\r\\n// .                     .      .          ..     = + @   #           .-  .          \\r\\n//.     %    .    .      .  .    .  .         .    .    #          .      .  .       \\r\\n//    @   .              .            . .    .            #  ..                #     \\r\\n//  %          .  .         .                       +                            = . \\r\\n//        .     .              .     .    ..   .         .   .  .                  . \\r\\n//  .     .  .    . .              .                      .    .  .       .          \\r\\n//. .              .         .               .    .          .                        \\r\\n//                       .                      .     .    .          .      .  \\r\\n\\r\\n// ERC-721 functions necessary for our interaction\\r\\ninterface IBlackHole is IERC721 {\\r\\n    function lastBurner() external view returns (address);\\r\\n    function withdraw() external;\\r\\n    function minted() external view returns (uint256);\\r\\n    function burnt() external view returns (uint256);\\r\\n    function burn(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ncontract HawkingRadiation {\\r\\n    IBlackHole public immutable blackHoleContract;\\r\\n    mapping(address => uint248) public burntViaHawking;\\r\\n    uint248 public totalBurntViaHawking;\\r\\n    bool public hasCollected = false;\\r\\n    \\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(address _blackHoleAddress) {\\r\\n        blackHoleContract = IBlackHole(_blackHoleAddress);\\r\\n    }\\r\\n\\r\\n    function transferAndBurnViaHawking(uint256 tokenId) external {\\r\\n        require(!hasCollected, \\\"ETH has been collected, cannot burn anymore\\\");\\r\\n\\r\\n        // Transfer the NFT to this contract\\r\\n        blackHoleContract.transferFrom(msg.sender, address(this), tokenId);\\r\\n        \\r\\n        // Burn the NFT\\r\\n        blackHoleContract.burn(tokenId);\\r\\n        \\r\\n        burntViaHawking[msg.sender] += 1;\\r\\n        totalBurntViaHawking += 1;\\r\\n    }\\r\\n\\r\\n    function collectBlackHoleETH() external {\\r\\n        require(!hasCollected, \\\"ETH already collected\\\");\\r\\n\\r\\n        blackHoleContract.withdraw();\\r\\n\\r\\n        hasCollected = true;\\r\\n    }\\r\\n\\r\\n    function claimETH() external {\\r\\n        require(hasCollected, \\\"ETH hasn't been collected yet\\\");\\r\\n    \\r\\n        uint248 userBurntCount = burntViaHawking[msg.sender];\\r\\n        require(userBurntCount > 0, \\\"You haven't burnt any NFT via HawkingRadiation\\\");\\r\\n\\r\\n        uint256 ethShare = (address(this).balance * userBurntCount) / totalBurntViaHawking;\\r\\n\\r\\n        require(ethShare > 0, \\\"No ETH to claim\\\");\\r\\n        \\r\\n        // Resetting the user's burnt count after claiming\\r\\n        burntViaHawking[msg.sender] = 0; \\r\\n\\r\\n        // Removing from total\\r\\n        totalBurntViaHawking -= userBurntCount;\\r\\n        \\r\\n        // Transfer the user's share of ETH\\r\\n        payable(msg.sender).transfer(ethShare);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackHoleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blackHoleContract\",\"outputs\":[{\"internalType\":\"contract IBlackHole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burntViaHawking\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectBlackHoleETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasCollected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurntViaHawking\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"\",\"type\":\"uint248\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferAndBurnViaHawking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HawkingRadiation", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000427ff8466230e3959568c03b5af5c1693b1ac01e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}