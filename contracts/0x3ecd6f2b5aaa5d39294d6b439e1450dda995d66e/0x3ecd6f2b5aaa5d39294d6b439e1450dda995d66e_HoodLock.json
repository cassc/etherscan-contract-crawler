{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract HoodLock is Context, Ownable {\r\n    event TokensLocked();\r\n    event TokensReleased(uint256 releaseAmount);\r\n\r\n    IERC20 public _token;\r\n\r\n    bool private _locked;\r\n    address public _beneficiary;\r\n    uint256 public _releasedAmount;\r\n    uint256 public _startTime;\r\n    uint256 public _cliffDuration;\r\n    uint256 public _cliffAmount;\r\n    uint256 public _numSteps;\r\n    uint256 public _stepDuration;\r\n    uint256 public _stepAmount;\r\n\r\n    constructor() {\r\n        _token = IERC20(0x04815313E9329e8905A77251A1781CfA7934259a);\r\n    }\r\n\r\n    function lockTokens(\r\n        address beneficiary,\r\n        uint256 startTime,\r\n        uint256 cliffDuration,\r\n        uint256 cliffAmount,\r\n        uint256 numSteps,\r\n        uint256 stepDuration,\r\n        uint256 stepAmount\r\n    ) external onlyOwner\r\n    {\r\n        require(!_locked, \"already locked\");\r\n        require(beneficiary != address(0), \"beneficiary is the zero address\");\r\n        require(startTime + cliffDuration > block.timestamp, \"cliff end time is before current time\");\r\n        require(cliffDuration > 0, \"cliffDuration is 0\");\r\n        require(cliffAmount > 0, \"cliffAmount is 0\");\r\n        require(numSteps > 0, \"numSteps is 0\");\r\n        require(stepDuration > 0, \"stepDuration is 0\");\r\n        require(stepAmount > 0, \"stepAmount is 0\");\r\n\r\n        _beneficiary = beneficiary;\r\n        _startTime = startTime;\r\n        _cliffDuration = cliffDuration;\r\n        _cliffAmount = cliffAmount;\r\n        _numSteps = numSteps;\r\n        _stepDuration = stepDuration;\r\n        _stepAmount = stepAmount;\r\n        _token.transferFrom(_msgSender(), address(this), totalAmount());\r\n        _locked = true;\r\n        emit TokensLocked();\r\n    }\r\n\r\n    function releaseTokens() external onlyOwner {\r\n        require(_locked, \"not locked\");\r\n        require(_beneficiary == _msgSender(), \"caller is not the beneficiary\");\r\n\r\n        require(_releasedAmount < totalAmount(), \"all tokens released\");\r\n\r\n        uint256 unlockedAmountValue = unlockedAmount();\r\n        require(unlockedAmountValue > 0, \"called before cliff end\");\r\n\r\n        uint256 releasableAmountValue = unlockedAmountValue - _releasedAmount;\r\n        require(releasableAmountValue > 0, \"called before current step end\");\r\n\r\n        _releasedAmount = _releasedAmount + releasableAmountValue;\r\n        _token.transfer(_beneficiary, releasableAmountValue);\r\n        emit TokensReleased(releasableAmountValue);\r\n    }\r\n\r\n    function totalAmount() public view returns (uint256) {\r\n        return _cliffAmount + (_stepAmount * _numSteps);\r\n    }\r\n\r\n    function unlockedAmount() public view returns (uint256) {\r\n        uint256 cliffEnd = _startTime + _cliffDuration;\r\n        if (block.timestamp < cliffEnd) {\r\n            return 0;\r\n        } else if (block.timestamp >= cliffEnd + (_stepDuration * _numSteps)) {\r\n            return totalAmount();\r\n        } else {\r\n            uint256 unlockedSteps = (block.timestamp - cliffEnd) / _stepDuration;\r\n            return _cliffAmount + (_stepAmount * unlockedSteps);\r\n        }\r\n    }\r\n\r\n    function releasableAmount() public view returns (uint256) {\r\n        return unlockedAmount() - _releasedAmount;\r\n    }\r\n\r\n    function cliffUnlockTime() public view returns (uint256) {\r\n        return _startTime + _cliffDuration;\r\n    }\r\n\r\n    function stepUnlockTime(uint256 stepNumber) public view returns (uint256) {\r\n        if (!_locked) {\r\n            return 0;\r\n        }\r\n        require(stepNumber > 0, \"stepNumber is 0\");\r\n        require(stepNumber <= _numSteps, \"stepNumber is greater than the number of steps\");\r\n        return cliffUnlockTime() + (_stepDuration * stepNumber);\r\n    }\r\n\r\n    function nextUnlockTime() public view returns (uint256) {\r\n        uint256 cliffEnd = cliffUnlockTime();\r\n        uint256 lastStepEnd = stepUnlockTime(_numSteps);\r\n        if (block.timestamp < cliffEnd) {\r\n            return cliffEnd;\r\n        } else if (block.timestamp >= lastStepEnd) {\r\n            return lastStepEnd;\r\n        } else {\r\n            uint256 unlockedSteps = (block.timestamp - cliffEnd) / _stepDuration;\r\n            return stepUnlockTime(unlockedSteps + 1);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cliffAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cliffDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numSteps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stepAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_stepDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepAmount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stepNumber\",\"type\":\"uint256\"}],\"name\":\"stepUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HoodLock", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90d656513c98bd970958d9aa423e10b74b2d3f4e21c1b7ee4674666f2b7b6c30"}