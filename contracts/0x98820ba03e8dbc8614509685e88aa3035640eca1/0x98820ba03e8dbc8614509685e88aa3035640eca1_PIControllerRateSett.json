{"SourceCode": "// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC, Reflexer Labs, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract OracleLike {\r\n    function getResultWithValidity() virtual external view returns (uint256, bool);\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual external returns (uint256);\r\n    function modifyParameters(bytes32,uint256) virtual external;\r\n}\r\nabstract contract PIController {\r\n    function update(int256) virtual external returns (int256, int256, int256);\r\n    function perSecondIntegralLeak() virtual external view returns (uint256);\r\n    function elapsed() virtual external view returns (uint256);\r\n    function getNextPiOutput(int error) virtual public view returns (int256, int256, int256);\r\n}\r\n\r\ncontract PIControllerRateSetter is GebMath {\r\n    // --- Auth ---\r\n    mapping(address => uint) public authorizedAccounts;\r\n\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether msg.sender can call an authed function\r\n     **/\r\n    modifier isAuthorized() {\r\n        require(\r\n            authorizedAccounts[msg.sender] == 1,\r\n            \"PIRateSetter/account-not-authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // When the price feed was last updated\r\n    uint256 public lastUpdateTime; // [timestamp]\r\n    // Enforced gap between calls\r\n    uint256 public updateRateDelay; // [seconds]\r\n\r\n    // --- System Dependencies ---\r\n    // OSM or medianizer for the system coin\r\n    OracleLike public orcl;\r\n    // OracleRelayer where the redemption price is stored\r\n    OracleRelayerLike public oracleRelayer;\r\n    // Controller for the redemption rate\r\n    PIController public piController;\r\n    // The minimum percentage deviation from the redemption price that allows the contract\r\n    // to calculate a non null redemption rate\r\n    uint256 public noiseBarrier; // [TWENTY_SEVEN_DECIMAL_NUMBER]\r\n\r\n    // Constants\r\n    uint256 internal constant NEGATIVE_RATE_LIMIT =\r\n        TWENTY_SEVEN_DECIMAL_NUMBER - 1;\r\n    uint256 internal constant EIGHTEEN_DECIMAL_NUMBER = 10 ** 18;\r\n    uint256 internal constant TWENTY_SEVEN_DECIMAL_NUMBER = 10 ** 27;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, address addr);\r\n    event ModifyParameters(bytes32 parameter, uint256 val);\r\n    event UpdateRedemptionRate(\r\n        uint marketPrice,\r\n        uint redemptionPrice,\r\n        uint redemptionRate,\r\n        int pOutput,\r\n        int iOutput\r\n    );\r\n    event FailUpdateRedemptionRate(\r\n        uint marketPrice,\r\n        uint redemptionPrice,\r\n        uint redemptionRate,\r\n        int pOutput,\r\n        int iOutput,\r\n        bytes reason\r\n    );\r\n\r\n    constructor(\r\n        address oracleRelayer_,\r\n        address orcl_,\r\n        address piController_,\r\n        uint256 noiseBarrier_,\r\n        uint256 updateRateDelay_\r\n    ) public {\r\n        require(\r\n            oracleRelayer_ != address(0),\r\n            \"PIRateSetter/null-oracle-relayer\"\r\n        );\r\n        require(orcl_ != address(0), \"PIRateSetter/null-orcl\");\r\n        require(piController_ != address(0), \"PIRateSetter/null-controller\");\r\n        require(\r\n            both(noiseBarrier_ >= 0, noiseBarrier_ <= 0.2E27),\r\n            \"PIRateSetter/invalid-noise-barrier\"\r\n        );\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        oracleRelayer = OracleRelayerLike(oracleRelayer_);\r\n        orcl = OracleLike(orcl_);\r\n        piController = PIController(piController_);\r\n        noiseBarrier = noiseBarrier_;\r\n\r\n        updateRateDelay = updateRateDelay_;\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"orcl\", orcl_);\r\n        emit ModifyParameters(\"noiseBarrier\", noiseBarrier_);\r\n        emit ModifyParameters(\"oracleRelayer\", oracleRelayer_);\r\n        emit ModifyParameters(\"piController\", piController_);\r\n        emit ModifyParameters(\"updateRateDelay\", updateRateDelay_);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly {\r\n            z := or(x, y)\r\n        }\r\n    }\r\n\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly {\r\n            z := and(x, y)\r\n        }\r\n    }\r\n\r\n    function absolute(int x) internal pure returns (uint z) {\r\n        z = (x < 0) ? uint(-x) : uint(x);\r\n    }\r\n\r\n    function addition(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require(\r\n            (b >= 0 && c >= a) || (b < 0 && c < a),\r\n            \"SignedSafeMath: addition overflow\"\r\n        );\r\n\r\n        return c;\r\n    }\r\n\r\n    function subtract(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require(\r\n            (b >= 0 && c <= a) || (b < 0 && c > a),\r\n            \"SignedSafeMath: subtraction overflow\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    // --- Management ---\r\n    /*\r\n     * @notify Modify the address of a contract that the setter is connected to\r\n     * @param parameter Contract name\r\n     * @param addr The new contract address\r\n     */\r\n    function modifyParameters(\r\n        bytes32 parameter,\r\n        address addr\r\n    ) external isAuthorized {\r\n        require(addr != address(0), \"PIRateSetter/null-addr\");\r\n        if (parameter == \"orcl\") orcl = OracleLike(addr);\r\n        else if (parameter == \"oracleRelayer\")\r\n            oracleRelayer = OracleRelayerLike(addr);\r\n        else if (parameter == \"piController\") {\r\n            piController = PIController(addr);\r\n        } else revert(\"PIRateSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n\r\n    /*\r\n     * @notify Modify a uint256 parameter\r\n     * @param parameter The parameter name\r\n     * @param val The new parameter value\r\n     */\r\n    function modifyParameters(\r\n        bytes32 parameter,\r\n        uint256 val\r\n    ) external isAuthorized {\r\n        if (parameter == \"updateRateDelay\") {\r\n            require(val > 0, \"PIRateSetter/null-update-delay\");\r\n            updateRateDelay = val;\r\n        } else if (parameter == \"noiseBarrier\") {\r\n            require(\r\n                both(val >= 0, val <= 0.2E27),\r\n                \"PIRateSetter/invalid-noise-barrier\"\r\n            );\r\n            noiseBarrier = val;\r\n        } else revert(\"PIRateSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, val);\r\n    }\r\n\r\n    int256 private constant _INT256_MIN = -2 ** 255;\r\n\r\n    function multiply(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(\r\n            !(a == -1 && b == _INT256_MIN),\r\n            \"SignedSafeMath: multiplication overflow\"\r\n        );\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /*\r\n     * @notice Calculates relativeError = (reference-measured)/reference\r\n     * @param measuredValue EIGHTEEEN_DECIMAL_NUMBER\r\n     * @param referenceValue TWENTY_SEVEN_DECIMAL_NUMBER\r\n     * @return relativeError TWENTY_SEVEN_DECIMAL_NUMBER\r\n     */\r\n    function relativeError(\r\n        uint256 measuredValue,\r\n        uint256 referenceValue\r\n    ) internal pure returns (int256) {\r\n        uint256 scaledMeasuredValue = multiply(measuredValue, 10 ** 9);\r\n        int256 error = multiply(\r\n            subtract(int(referenceValue), int(scaledMeasuredValue)),\r\n            int(TWENTY_SEVEN_DECIMAL_NUMBER)\r\n        ) / int(referenceValue);\r\n        return error;\r\n    }\r\n\r\n    /*\r\n     * @notice Convert per-second delta rate to per-second redemption rate\r\n     * @param piOutput TWENTY_SEVEN_DECIMAL_NUMBER\r\n     * @return redemptionRate TWENTY_SEVEN_DECIMAL_NUMBER\r\n     */\r\n    function getRedemptionRate(int256 piOutput) public pure returns (uint) {\r\n        return uint(addition(int(TWENTY_SEVEN_DECIMAL_NUMBER), piOutput));\r\n    }\r\n\r\n    /*\r\n     * @notice Relay a new redemption rate to the OracleRelayer\r\n     * @param redemptionRate The new redemption rate to relay TWENTY_SEVEN_DECIMAL_NUMBER\r\n     */\r\n    function relayRate(uint256 redemptionRate) internal {\r\n        oracleRelayer.modifyParameters(\"redemptionRate\", redemptionRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Compute and set a new redemption rate\r\n     **/\r\n    function updateRate() external {\r\n        // Check delay between calls\r\n        require(\r\n            either(\r\n                subtract(now, lastUpdateTime) >= updateRateDelay,\r\n                lastUpdateTime == 0\r\n            ),\r\n            \"PIControllerRateSetter/wait-more\"\r\n        );\r\n        // Get price feed updates\r\n        (uint256 marketPrice, bool hasValidValue) = orcl\r\n            .getResultWithValidity();\r\n        // If the oracle has a value\r\n        require(hasValidValue, \"PIControllerRateSetter/invalid-oracle-value\");\r\n        // If the price is non-zero\r\n        require(marketPrice > 0, \"PIControllerRateSetter/null-price\");\r\n        // Get the latest redemption price\r\n        uint redemptionPrice = oracleRelayer.redemptionPrice();\r\n\r\n        int256 error = relativeError(marketPrice, redemptionPrice);\r\n\r\n        if (absolute(error) <= noiseBarrier) {\r\n            error = 0;\r\n        }\r\n\r\n        // Controller output is per-second 'delta rate' st.\r\n        // 1 + output = per-second redemption rate\r\n        (int256 output, int256 pOutput, int256 iOutput) = piController.update(\r\n            error\r\n        );\r\n\r\n        uint newRedemptionRate = getRedemptionRate(output);\r\n\r\n        // Update rate\r\n        oracleRelayer.modifyParameters(\"redemptionRate\", newRedemptionRate);\r\n\r\n        // Store the timestamp of the update\r\n        lastUpdateTime = now;\r\n\r\n        // Emit success event\r\n        emit UpdateRedemptionRate(\r\n            ray(marketPrice),\r\n            redemptionPrice,\r\n            newRedemptionRate,\r\n            pOutput,\r\n            iOutput\r\n        );\r\n    }\r\n\r\n    // --- Getters ---\r\n    /**\r\n     * @notice Get the market price from the system coin oracle\r\n     **/\r\n    function getMarketPrice() external view returns (uint256) {\r\n        (uint256 marketPrice, ) = orcl.getResultWithValidity();\r\n        return marketPrice;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the redemption and the market prices for the system coin\r\n     **/\r\n    function getRedemptionAndMarketPrices()\r\n        external\r\n        returns (uint256 marketPrice, uint256 redemptionPrice)\r\n    {\r\n        (marketPrice, ) = orcl.getResultWithValidity();\r\n        redemptionPrice = oracleRelayer.redemptionPrice();\r\n    }\r\n\r\n    /*\r\n     * @notice Get next redemption rate\r\n     * @param marketPrice EIGHTEEEN_DECIMAL_NUMBER\r\n     * @param redemptionPrice TWENTY_SEVEN_DECIMAL_NUMBER\r\n     * @return nextRedemptionRate TWENTY_SEVEN_DECIMAL_NUMBER\r\n     */\r\n    function getNextRedemptionRate(\r\n        uint256 marketPrice,\r\n        uint256 redemptionPrice\r\n    ) public view returns (uint) {\r\n        int256 error = relativeError(marketPrice, redemptionPrice);\r\n\r\n        if (absolute(error) <= noiseBarrier) {\r\n            error = 0;\r\n        }\r\n\r\n        // Controller output is per-second 'delta rate' st.\r\n        // 1 + output = per-second redemption rate\r\n        (int256 output, int256 pOutput, int256 iOutput) = piController\r\n            .getNextPiOutput(error);\r\n\r\n        uint nextRedemptionRate = getRedemptionRate(output);\r\n\r\n        return nextRedemptionRate;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orcl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"piController_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"noiseBarrier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateRateDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pOutput\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"iOutput\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"FailUpdateRedemptionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pOutput\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"iOutput\",\"type\":\"int256\"}],\"name\":\"UpdateRedemptionRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"name\":\"getNextRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionAndMarketPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"piOutput\",\"type\":\"int256\"}],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noiseBarrier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orcl\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piController\",\"outputs\":[{\"internalType\":\"contract PIController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "PIControllerRateSetter", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006aa9d2f366beaaec40c3409e5926e831ea42dc82000000000000000000000000199751b039b4893ae26f7a0016c5f71e15a14a600000000000000000000000001f093c8a9d278e847abdf0ad0e6fe7ef857684230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a8c0", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5535a9cce3a408c5dd1dff0c3534e8aa2d3f146e4f1c4de58bca5dfc3d3b0f31"}