{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using AddressUpgradeable for address;\\n\\n    struct RoleData {\\n        EnumerableSetUpgradeable.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { AccessControlUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { IFxMarket } from \\\"../interfaces/f(x)/IFxMarket.sol\\\";\\nimport { IFxRebalancePoolRegistry } from \\\"../interfaces/f(x)/IFxRebalancePoolRegistry.sol\\\";\\nimport { IFxReservePool } from \\\"../interfaces/f(x)/IFxReservePool.sol\\\";\\nimport { IFxTreasury } from \\\"../interfaces/f(x)/IFxTreasury.sol\\\";\\n\\n// solhint-disable max-states-count\\n\\ncontract Market is AccessControlUpgradeable, ReentrancyGuardUpgradeable, IFxMarket {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using SafeMathUpgradeable for uint256;\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the fee ratio for minting fToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateMintFeeRatioFToken(uint128 defaultFeeRatio, int128 extraFeeRatio);\\n\\n  /// @notice Emitted when the fee ratio for minting xToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateMintFeeRatioXToken(uint128 defaultFeeRatio, int128 extraFeeRatio);\\n\\n  /// @notice Emitted when the fee ratio for redeeming fToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateRedeemFeeRatioFToken(uint128 defaultFeeRatio, int128 extraFeeRatio);\\n\\n  /// @notice Emitted when the fee ratio for redeeming xToken is updated.\\n  /// @param defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  event UpdateRedeemFeeRatioXToken(uint128 defaultFeeRatio, int128 extraFeeRatio);\\n\\n  /// @notice Emitted when the market config is updated.\\n  /// @param stabilityRatio The new start collateral ratio to enter system stability mode, multiplied by 1e18.\\n  /// @param liquidationRatio The new start collateral ratio to enter incentivized user liquidation mode, multiplied by 1e18.\\n  /// @param selfLiquidationRatio The new start collateral ratio to enter self liquidation mode, multiplied by 1e18.\\n  /// @param recapRatio The new start collateral ratio to enter recap mode, multiplied by 1e18.\\n  event UpdateMarketConfig(\\n    uint64 stabilityRatio,\\n    uint64 liquidationRatio,\\n    uint64 selfLiquidationRatio,\\n    uint64 recapRatio\\n  );\\n\\n  /// @notice Emitted when the incentive config is updated.\\n  /// @param stabilityIncentiveRatio The new incentive ratio for system stability mode, multiplied by 1e18.\\n  /// @param liquidationIncentiveRatio The new incentive ratio for incentivized user liquidation mode, multiplied by 1e18.\\n  /// @param selfLiquidationIncentiveRatio The new incentive ratio for self liquidation mode, multiplied by 1e18.\\n  event UpdateIncentiveConfig(\\n    uint64 stabilityIncentiveRatio,\\n    uint64 liquidationIncentiveRatio,\\n    uint64 selfLiquidationIncentiveRatio\\n  );\\n\\n  /// @notice Emitted when the whitelist status for settle is changed.\\n  /// @param account The address of account to change.\\n  /// @param status The new whitelist status.\\n  event UpdateLiquidationWhitelist(address account, bool status);\\n\\n  /// @notice Emitted when the platform contract is changed.\\n  /// @param platform The address of new platform.\\n  event UpdatePlatform(address platform);\\n\\n  /// @notice Emitted when the  reserve pool contract is changed.\\n  /// @param reservePool The address of new reserve pool.\\n  event UpdateReservePool(address reservePool);\\n\\n  /// @notice Emitted when the RebalancePoolRegistry contract is updated.\\n  /// @param registry The address of new RebalancePoolRegistry pool.\\n  event UpdateRebalancePoolRegistry(address registry);\\n\\n  /// @notice Pause or unpause mint.\\n  /// @param status The new status for mint.\\n  event PauseMint(bool status);\\n\\n  /// @notice Pause or unpause redeem.\\n  /// @param status The new status for redeem.\\n  event PauseRedeem(bool status);\\n\\n  /// @notice Pause or unpause fToken mint in system stability mode.\\n  /// @param status The new status for mint.\\n  event PauseFTokenMintInSystemStabilityMode(bool status);\\n\\n  /// @notice Pause or unpause xToken redeem in system stability mode.\\n  /// @param status The new status for redeem.\\n  event PauseXTokenRedeemInSystemStabilityMode(bool status);\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @notice The role for emergency dao.\\n  bytes32 public constant EMERGENCY_DAO_ROLE = keccak256(\\\"EMERGENCY_DAO_ROLE\\\");\\n\\n  /// @dev The precision used to compute nav.\\n  uint256 private constant PRECISION = 1e18;\\n\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  struct FeeRatio {\\n    // The default fee ratio, multiplied by 1e18.\\n    uint128 defaultFeeRatio;\\n    // The extra delta fee ratio, multiplied by 1e18.\\n    int128 extraFeeRatio;\\n  }\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  struct MarketConfig {\\n    // The start collateral ratio to enter system stability mode, multiplied by 1e18.\\n    uint64 stabilityRatio;\\n    // The start collateral ratio to enter incentivized user liquidation mode, multiplied by 1e18.\\n    uint64 liquidationRatio;\\n    // The start collateral ratio to enter self liquidation mode, multiplied by 1e18.\\n    uint64 selfLiquidationRatio;\\n    // The start collateral ratio to enter recap mode, multiplied by 1e18.\\n    uint64 recapRatio;\\n  }\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  struct IncentiveConfig {\\n    // The incentive ratio for system stability mode, multiplied by 1e18.\\n    uint64 stabilityIncentiveRatio;\\n    // The incentive ratio for incentivized user liquidation mode, multiplied by 1e18.\\n    uint64 liquidationIncentiveRatio;\\n    // The incentive ratio for self liquidation mode, multiplied by 1e18.\\n    uint64 selfLiquidationIncentiveRatio;\\n  }\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The address of Treasury contract.\\n  address public treasury;\\n\\n  /// @notice The address of platform contract;\\n  address public platform;\\n\\n  /// @notice The address base token;\\n  address public baseToken;\\n\\n  /// @notice The address fractional base token.\\n  address public fToken;\\n\\n  /// @notice The address leveraged base token.\\n  address public xToken;\\n\\n  /// @notice The market config in each mode.\\n  MarketConfig public marketConfig;\\n\\n  /// @notice The incentive config in each mode.\\n  IncentiveConfig public incentiveConfig;\\n\\n  /// @notice The mint fee ratio for fToken.\\n  FeeRatio public fTokenMintFeeRatio;\\n\\n  /// @notice The mint fee ratio for xToken.\\n  FeeRatio public xTokenMintFeeRatio;\\n\\n  /// @notice The redeem fee ratio for fToken.\\n  FeeRatio public fTokenRedeemFeeRatio;\\n\\n  /// @notice The redeem fee ratio for xToken.\\n  FeeRatio public xTokenRedeemFeeRatio;\\n\\n  /// @notice Whether the sender is allowed to do self liquidation.\\n  mapping(address => bool) public liquidationWhitelist;\\n\\n  /// @notice Whether the mint is paused.\\n  bool public mintPaused;\\n\\n  /// @notice Whether the redeem is paused.\\n  bool public redeemPaused;\\n\\n  /// @notice Whether to pause fToken mint in system stability mode\\n  bool public fTokenMintInSystemStabilityModePaused;\\n\\n  /// @notice Whether to pause xToken redeem in system stability mode\\n  bool public xTokenRedeemInSystemStabilityModePaused;\\n\\n  /// @notice The address of ReservePool contract.\\n  address public reservePool;\\n\\n  /// @notice The address of RebalancePoolRegistry contract.\\n  address public registry;\\n\\n  /************\\n   * Modifier *\\n   ************/\\n\\n  modifier onlyAdmin() {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"only Admin\\\");\\n    _;\\n  }\\n\\n  modifier onlyEmergencyDAO() {\\n    require(hasRole(EMERGENCY_DAO_ROLE, msg.sender), \\\"only Emergency DAO\\\");\\n    _;\\n  }\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  function initialize(address _treasury, address _platform) external initializer {\\n    AccessControlUpgradeable.__AccessControl_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    treasury = _treasury;\\n    platform = _platform;\\n\\n    baseToken = IFxTreasury(_treasury).baseToken();\\n    fToken = IFxTreasury(_treasury).fToken();\\n    xToken = IFxTreasury(_treasury).xToken();\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc IFxMarket\\n  function mint(\\n    uint256 _baseIn,\\n    address _recipient,\\n    uint256 _minFTokenMinted,\\n    uint256 _minXTokenMinted\\n  ) external override nonReentrant returns (uint256 _fTokenMinted, uint256 _xTokenMinted) {\\n    address _baseToken = baseToken;\\n    if (_baseIn == uint256(-1)) {\\n      _baseIn = IERC20Upgradeable(_baseToken).balanceOf(msg.sender);\\n    }\\n    require(_baseIn > 0, \\\"mint zero amount\\\");\\n\\n    IFxTreasury _treasury = IFxTreasury(treasury);\\n    require(_treasury.totalBaseToken() == 0, \\\"only initialize once\\\");\\n\\n    IERC20Upgradeable(_baseToken).safeTransferFrom(msg.sender, address(_treasury), _baseIn);\\n    (_fTokenMinted, _xTokenMinted) = _treasury.mint(\\n      _treasury.convertToUnwrapped(_baseIn),\\n      _recipient,\\n      IFxTreasury.MintOption.Both\\n    );\\n\\n    require(_fTokenMinted >= _minFTokenMinted, \\\"insufficient fToken output\\\");\\n    require(_xTokenMinted >= _minXTokenMinted, \\\"insufficient xToken output\\\");\\n\\n    emit Mint(msg.sender, _recipient, _baseIn, _fTokenMinted, _xTokenMinted, 0);\\n  }\\n\\n  /// @inheritdoc IFxMarket\\n  function mintFToken(\\n    uint256 _baseIn,\\n    address _recipient,\\n    uint256 _minFTokenMinted\\n  ) external override nonReentrant returns (uint256 _fTokenMinted) {\\n    require(!mintPaused, \\\"mint is paused\\\");\\n\\n    address _baseToken = baseToken;\\n    if (_baseIn == uint256(-1)) {\\n      _baseIn = IERC20Upgradeable(_baseToken).balanceOf(msg.sender);\\n    }\\n    require(_baseIn > 0, \\\"mint zero amount\\\");\\n\\n    IFxTreasury _treasury = IFxTreasury(treasury);\\n    (uint256 _maxBaseInBeforeSystemStabilityMode, ) = _treasury.maxMintableFToken(marketConfig.stabilityRatio);\\n    _maxBaseInBeforeSystemStabilityMode = _treasury.convertToWrapped(_maxBaseInBeforeSystemStabilityMode);\\n\\n    if (fTokenMintInSystemStabilityModePaused) {\\n      uint256 _collateralRatio = _treasury.collateralRatio();\\n      require(_collateralRatio > marketConfig.stabilityRatio, \\\"fToken mint paused\\\");\\n\\n      // bound maximum amount of base token to mint fToken.\\n      if (_baseIn > _maxBaseInBeforeSystemStabilityMode) {\\n        _baseIn = _maxBaseInBeforeSystemStabilityMode;\\n      }\\n    }\\n\\n    uint256 _amountWithoutFee = _deductFTokenMintFee(_baseIn, fTokenMintFeeRatio, _maxBaseInBeforeSystemStabilityMode);\\n\\n    IERC20Upgradeable(_baseToken).safeTransferFrom(msg.sender, address(_treasury), _amountWithoutFee);\\n    (_fTokenMinted, ) = _treasury.mint(\\n      _treasury.convertToUnwrapped(_amountWithoutFee),\\n      _recipient,\\n      IFxTreasury.MintOption.FToken\\n    );\\n    require(_fTokenMinted >= _minFTokenMinted, \\\"insufficient fToken output\\\");\\n\\n    emit Mint(msg.sender, _recipient, _baseIn, _fTokenMinted, 0, _baseIn - _amountWithoutFee);\\n  }\\n\\n  /// @inheritdoc IFxMarket\\n  function mintXToken(\\n    uint256 _baseIn,\\n    address _recipient,\\n    uint256 _minXTokenMinted\\n  ) external override nonReentrant returns (uint256 _xTokenMinted, uint256 _bonus) {\\n    require(!mintPaused, \\\"mint is paused\\\");\\n\\n    address _baseToken = baseToken;\\n    if (_baseIn == uint256(-1)) {\\n      _baseIn = IERC20Upgradeable(_baseToken).balanceOf(msg.sender);\\n    }\\n    require(_baseIn > 0, \\\"mint zero amount\\\");\\n\\n    IFxTreasury _treasury = IFxTreasury(treasury);\\n    (uint256 _maxBaseInBeforeSystemStabilityMode, ) = _treasury.maxMintableXToken(marketConfig.stabilityRatio);\\n    _maxBaseInBeforeSystemStabilityMode = _treasury.convertToWrapped(_maxBaseInBeforeSystemStabilityMode);\\n\\n    uint256 _amountWithoutFee = _deductXTokenMintFee(_baseIn, xTokenMintFeeRatio, _maxBaseInBeforeSystemStabilityMode);\\n\\n    IERC20Upgradeable(_baseToken).safeTransferFrom(msg.sender, address(_treasury), _amountWithoutFee);\\n    (, _xTokenMinted) = _treasury.mint(\\n      _treasury.convertToUnwrapped(_amountWithoutFee),\\n      _recipient,\\n      IFxTreasury.MintOption.XToken\\n    );\\n    require(_xTokenMinted >= _minXTokenMinted, \\\"insufficient xToken output\\\");\\n\\n    // give bnous\\n    if (_amountWithoutFee < _maxBaseInBeforeSystemStabilityMode) {\\n      _bonus = _amountWithoutFee;\\n    } else {\\n      _bonus = _maxBaseInBeforeSystemStabilityMode;\\n    }\\n    if (_bonus > 0 && IFxRebalancePoolRegistry(registry).totalSupply() == 0) {\\n      _bonus = IFxReservePool(reservePool).requestBonus(baseToken, _recipient, _bonus);\\n    } else {\\n      _bonus = 0;\\n    }\\n\\n    emit Mint(msg.sender, _recipient, _baseIn, 0, _xTokenMinted, _baseIn - _amountWithoutFee);\\n  }\\n\\n  /// @inheritdoc IFxMarket\\n  function addBaseToken(\\n    uint256 _baseIn,\\n    address _recipient,\\n    uint256 _minXTokenMinted\\n  ) external override nonReentrant returns (uint256 _xTokenMinted) {\\n    require(!mintPaused, \\\"mint is paused\\\");\\n\\n    IFxTreasury _treasury = IFxTreasury(treasury);\\n    uint256 _collateralRatio = _treasury.collateralRatio();\\n\\n    MarketConfig memory _marketConfig = marketConfig;\\n    require(\\n      _marketConfig.recapRatio <= _collateralRatio && _collateralRatio < _marketConfig.stabilityRatio,\\n      \\\"Not system stability mode\\\"\\n    );\\n\\n    (uint256 _maxBaseInBeforeSystemStabilityMode, ) = _treasury.maxMintableXTokenWithIncentive(\\n      _marketConfig.stabilityRatio,\\n      incentiveConfig.stabilityIncentiveRatio\\n    );\\n    _maxBaseInBeforeSystemStabilityMode = _treasury.convertToWrapped(_maxBaseInBeforeSystemStabilityMode);\\n\\n    // bound the amount of base token\\n    FeeRatio memory _ratio = xTokenMintFeeRatio;\\n    uint256 _feeRatio = uint256(int256(_ratio.defaultFeeRatio) + _ratio.extraFeeRatio);\\n    if (_baseIn * (PRECISION - _feeRatio) > _maxBaseInBeforeSystemStabilityMode * PRECISION) {\\n      _baseIn = (_maxBaseInBeforeSystemStabilityMode * PRECISION) / (PRECISION - _feeRatio);\\n    }\\n\\n    // take fee to platform\\n    if (_feeRatio > 0) {\\n      uint256 _fee = (_baseIn * _feeRatio) / PRECISION;\\n      IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, platform, _fee);\\n      _baseIn = _baseIn - _fee;\\n    }\\n\\n    IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, address(_treasury), _baseIn);\\n    _xTokenMinted = _treasury.addBaseToken(\\n      _treasury.convertToUnwrapped(_baseIn),\\n      incentiveConfig.stabilityIncentiveRatio,\\n      _recipient\\n    );\\n    require(_xTokenMinted >= _minXTokenMinted, \\\"insufficient xToken output\\\");\\n\\n    emit AddCollateral(msg.sender, _recipient, _baseIn, _xTokenMinted);\\n  }\\n\\n  /// @inheritdoc IFxMarket\\n  function redeem(\\n    uint256 _fTokenIn,\\n    uint256 _xTokenIn,\\n    address _recipient,\\n    uint256 _minBaseOut\\n  ) external override nonReentrant returns (uint256 _baseOut, uint256 _bonus) {\\n    require(!redeemPaused, \\\"redeem is paused\\\");\\n\\n    if (_fTokenIn == uint256(-1)) {\\n      _fTokenIn = IERC20Upgradeable(fToken).balanceOf(msg.sender);\\n    }\\n    if (_xTokenIn == uint256(-1)) {\\n      _xTokenIn = IERC20Upgradeable(xToken).balanceOf(msg.sender);\\n    }\\n    require(_fTokenIn > 0 || _xTokenIn > 0, \\\"redeem zero amount\\\");\\n    require(_fTokenIn == 0 || _xTokenIn == 0, \\\"only redeem single side\\\");\\n\\n    IFxTreasury _treasury = IFxTreasury(treasury);\\n    MarketConfig memory _marketConfig = marketConfig;\\n\\n    uint256 _feeRatio;\\n    uint256 _maxBaseOut;\\n    if (_fTokenIn > 0) {\\n      uint256 _maxFTokenInBeforeSystemStabilityMode;\\n      (_maxBaseOut, _maxFTokenInBeforeSystemStabilityMode) = _treasury.maxRedeemableFToken(\\n        _marketConfig.stabilityRatio\\n      );\\n      _feeRatio = _computeFTokenRedeemFeeRatio(_fTokenIn, fTokenRedeemFeeRatio, _maxFTokenInBeforeSystemStabilityMode);\\n    } else {\\n      (, uint256 _maxXTokenInBeforeSystemStabilityMode) = _treasury.maxRedeemableXToken(_marketConfig.stabilityRatio);\\n\\n      if (xTokenRedeemInSystemStabilityModePaused) {\\n        uint256 _collateralRatio = _treasury.collateralRatio();\\n        require(_collateralRatio > _marketConfig.stabilityRatio, \\\"xToken redeem paused\\\");\\n\\n        // bound maximum amount of xToken to redeem.\\n        if (_xTokenIn > _maxXTokenInBeforeSystemStabilityMode) {\\n          _xTokenIn = _maxXTokenInBeforeSystemStabilityMode;\\n        }\\n      }\\n\\n      _feeRatio = _computeXTokenRedeemFeeRatio(_xTokenIn, xTokenRedeemFeeRatio, _maxXTokenInBeforeSystemStabilityMode);\\n    }\\n\\n    _baseOut = _treasury.redeem(_fTokenIn, _xTokenIn, msg.sender);\\n    if (_fTokenIn > 0) {\\n      // give bonus when redeem fToken\\n      if (_baseOut < _maxBaseOut) {\\n        _bonus = _baseOut;\\n      } else {\\n        _bonus = _maxBaseOut;\\n      }\\n      // deduct fee\\n      {\\n        FeeRatio memory _ratio = fTokenRedeemFeeRatio;\\n        _bonus -= (_bonus * uint256(int256(_ratio.defaultFeeRatio) + _ratio.extraFeeRatio)) / PRECISION;\\n      }\\n      // request bonus\\n      if (_bonus > 0 && IFxRebalancePoolRegistry(registry).totalSupply() == 0) {\\n        _bonus = IFxReservePool(reservePool).requestBonus(baseToken, _recipient, _bonus);\\n      } else {\\n        _bonus = 0;\\n      }\\n    }\\n\\n    _baseOut = _treasury.convertToWrapped(_baseOut);\\n    uint256 _balance = IERC20Upgradeable(baseToken).balanceOf(address(this));\\n    // consider possible slippage\\n    if (_balance < _baseOut) {\\n      _baseOut = _balance;\\n    }\\n\\n    uint256 _fee = (_baseOut * _feeRatio) / PRECISION;\\n    if (_fee > 0) {\\n      IERC20Upgradeable(baseToken).safeTransfer(platform, _fee);\\n      _baseOut = _baseOut - _fee;\\n    }\\n    require(_baseOut >= _minBaseOut, \\\"insufficient base output\\\");\\n\\n    IERC20Upgradeable(baseToken).safeTransfer(_recipient, _baseOut);\\n\\n    emit Redeem(msg.sender, _recipient, _fTokenIn, _xTokenIn, _baseOut, _fee);\\n  }\\n\\n  /// @inheritdoc IFxMarket\\n  function liquidate(\\n    uint256 _fTokenIn,\\n    address _recipient,\\n    uint256 _minBaseOut\\n  ) external override nonReentrant returns (uint256 _baseOut) {\\n    require(!redeemPaused, \\\"redeem is paused\\\");\\n\\n    IFxTreasury _treasury = IFxTreasury(treasury);\\n    uint256 _collateralRatio = _treasury.collateralRatio();\\n\\n    MarketConfig memory _marketConfig = marketConfig;\\n    require(\\n      _marketConfig.recapRatio <= _collateralRatio && _collateralRatio < _marketConfig.liquidationRatio,\\n      \\\"Not liquidation mode\\\"\\n    );\\n\\n    // bound the amount of fToken\\n    (, uint256 _maxFTokenLiquidatable) = _treasury.maxLiquidatable(\\n      _marketConfig.liquidationRatio,\\n      incentiveConfig.liquidationIncentiveRatio\\n    );\\n    if (_fTokenIn > _maxFTokenLiquidatable) {\\n      _fTokenIn = _maxFTokenLiquidatable;\\n    }\\n\\n    _baseOut = _treasury.liquidate(_fTokenIn, incentiveConfig.liquidationIncentiveRatio, msg.sender);\\n    _baseOut = _treasury.convertToWrapped(_baseOut);\\n    uint256 _balance = IERC20Upgradeable(baseToken).balanceOf(address(this));\\n    // consider possible slippage\\n    if (_balance < _baseOut) {\\n      _baseOut = _balance;\\n    }\\n\\n    // take platform fee\\n    uint256 _feeRatio;\\n    {\\n      FeeRatio memory _ratio = fTokenRedeemFeeRatio;\\n      _feeRatio = uint256(int256(_ratio.defaultFeeRatio) + _ratio.extraFeeRatio);\\n    }\\n    uint256 _fee = (_baseOut * _feeRatio) / PRECISION;\\n    if (_fee > 0) {\\n      IERC20Upgradeable(baseToken).safeTransfer(platform, _fee);\\n      _baseOut = _baseOut - _fee;\\n    }\\n    require(_baseOut >= _minBaseOut, \\\"insufficient base output\\\");\\n\\n    IERC20Upgradeable(baseToken).safeTransfer(_recipient, _baseOut);\\n\\n    emit UserLiquidate(msg.sender, _recipient, _fTokenIn, _baseOut);\\n  }\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  /// @notice Update the fee ratio for redeeming.\\n  /// @param _defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param _extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  /// @param _isFToken Whether we are updating for fToken.\\n  function updateRedeemFeeRatio(\\n    uint128 _defaultFeeRatio,\\n    int128 _extraFeeRatio,\\n    bool _isFToken\\n  ) external onlyAdmin {\\n    require(_defaultFeeRatio <= PRECISION, \\\"default fee ratio too large\\\");\\n    if (_extraFeeRatio < 0) {\\n      require(uint128(-_extraFeeRatio) <= _defaultFeeRatio, \\\"delta fee too small\\\");\\n    } else {\\n      require(uint128(_extraFeeRatio) <= PRECISION - _defaultFeeRatio, \\\"total fee too large\\\");\\n    }\\n\\n    if (_isFToken) {\\n      fTokenRedeemFeeRatio = FeeRatio(_defaultFeeRatio, _extraFeeRatio);\\n      emit UpdateRedeemFeeRatioFToken(_defaultFeeRatio, _extraFeeRatio);\\n    } else {\\n      xTokenRedeemFeeRatio = FeeRatio(_defaultFeeRatio, _extraFeeRatio);\\n      emit UpdateRedeemFeeRatioXToken(_defaultFeeRatio, _extraFeeRatio);\\n    }\\n  }\\n\\n  /// @notice Update the fee ratio for minting.\\n  /// @param _defaultFeeRatio The new default fee ratio, multipled by 1e18.\\n  /// @param _extraFeeRatio The new extra fee ratio, multipled by 1e18.\\n  /// @param _isFToken Whether we are updating for fToken.\\n  function updateMintFeeRatio(\\n    uint128 _defaultFeeRatio,\\n    int128 _extraFeeRatio,\\n    bool _isFToken\\n  ) external onlyAdmin {\\n    require(_defaultFeeRatio <= PRECISION, \\\"default fee ratio too large\\\");\\n    if (_extraFeeRatio < 0) {\\n      require(uint128(-_extraFeeRatio) <= _defaultFeeRatio, \\\"delta fee too small\\\");\\n    } else {\\n      require(uint128(_extraFeeRatio) <= PRECISION - _defaultFeeRatio, \\\"total fee too large\\\");\\n    }\\n\\n    if (_isFToken) {\\n      fTokenMintFeeRatio = FeeRatio(_defaultFeeRatio, _extraFeeRatio);\\n      emit UpdateMintFeeRatioFToken(_defaultFeeRatio, _extraFeeRatio);\\n    } else {\\n      xTokenMintFeeRatio = FeeRatio(_defaultFeeRatio, _extraFeeRatio);\\n      emit UpdateMintFeeRatioXToken(_defaultFeeRatio, _extraFeeRatio);\\n    }\\n  }\\n\\n  /// @notice Update the market config.\\n  /// @param _stabilityRatio The start collateral ratio to enter system stability mode to update, multiplied by 1e18.\\n  /// @param _liquidationRatio The start collateral ratio to enter incentivized user liquidation mode to update, multiplied by 1e18.\\n  /// @param _selfLiquidationRatio The start collateral ratio to enter self liquidation mode to update, multiplied by 1e18.\\n  /// @param _recapRatio The start collateral ratio to enter recap mode to update, multiplied by 1e18.\\n  function updateMarketConfig(\\n    uint64 _stabilityRatio,\\n    uint64 _liquidationRatio,\\n    uint64 _selfLiquidationRatio,\\n    uint64 _recapRatio\\n  ) external onlyAdmin {\\n    require(\\n      _stabilityRatio > _liquidationRatio &&\\n        _liquidationRatio > _selfLiquidationRatio &&\\n        _selfLiquidationRatio > _recapRatio &&\\n        _recapRatio >= PRECISION,\\n      \\\"invalid market config\\\"\\n    );\\n\\n    marketConfig = MarketConfig(_stabilityRatio, _liquidationRatio, _selfLiquidationRatio, _recapRatio);\\n\\n    emit UpdateMarketConfig(_stabilityRatio, _liquidationRatio, _selfLiquidationRatio, _recapRatio);\\n  }\\n\\n  /// @notice Update the incentive config.\\n  /// @param _stabilityIncentiveRatio The incentive ratio for system stability mode to update, multiplied by 1e18.\\n  /// @param _liquidationIncentiveRatio The incentive ratio for incentivized user liquidation mode to update, multiplied by 1e18.\\n  /// @param _selfLiquidationIncentiveRatio The incentive ratio for self liquidation mode to update, multiplied by 1e18.\\n  function updateIncentiveConfig(\\n    uint64 _stabilityIncentiveRatio,\\n    uint64 _liquidationIncentiveRatio,\\n    uint64 _selfLiquidationIncentiveRatio\\n  ) external onlyAdmin {\\n    require(_stabilityIncentiveRatio > 0, \\\"incentive too small\\\");\\n    require(_selfLiquidationIncentiveRatio > 0, \\\"incentive too small\\\");\\n    require(_liquidationIncentiveRatio >= _selfLiquidationIncentiveRatio, \\\"invalid incentive config\\\");\\n\\n    incentiveConfig = IncentiveConfig(\\n      _stabilityIncentiveRatio,\\n      _liquidationIncentiveRatio,\\n      _selfLiquidationIncentiveRatio\\n    );\\n\\n    emit UpdateIncentiveConfig(_stabilityIncentiveRatio, _liquidationIncentiveRatio, _selfLiquidationIncentiveRatio);\\n  }\\n\\n  /// @notice Change address of platform contract.\\n  /// @param _platform The new address of platform contract.\\n  function updatePlatform(address _platform) external onlyAdmin {\\n    platform = _platform;\\n\\n    emit UpdatePlatform(_platform);\\n  }\\n\\n  /// @notice Change address of reserve pool contract.\\n  /// @param _reservePool The new address of reserve pool contract.\\n  function updateReservePool(address _reservePool) external onlyAdmin {\\n    reservePool = _reservePool;\\n\\n    emit UpdateReservePool(_reservePool);\\n  }\\n\\n  /// @notice Change address of RebalancePoolRegistry contract.\\n  /// @param _registry The new address of RebalancePoolRegistry contract.\\n  function updateRebalancePoolRegistry(address _registry) external onlyAdmin {\\n    registry = _registry;\\n\\n    emit UpdateRebalancePoolRegistry(_registry);\\n  }\\n\\n  /// @notice Update the whitelist status for self liquidation account.\\n  /// @param _account The address of account to update.\\n  /// @param _status The status of the account to update.\\n  function updateLiquidationWhitelist(address _account, bool _status) external onlyAdmin {\\n    liquidationWhitelist[_account] = _status;\\n\\n    emit UpdateLiquidationWhitelist(_account, _status);\\n  }\\n\\n  /// @notice Pause mint in this contract\\n  /// @param _status The pause status.\\n  function pauseMint(bool _status) external onlyEmergencyDAO {\\n    mintPaused = _status;\\n\\n    emit PauseMint(_status);\\n  }\\n\\n  /// @notice Pause redeem in this contract\\n  /// @param _status The pause status.\\n  function pauseRedeem(bool _status) external onlyEmergencyDAO {\\n    redeemPaused = _status;\\n\\n    emit PauseRedeem(_status);\\n  }\\n\\n  /// @notice Pause fToken mint in system stability mode.\\n  /// @param _status The pause status.\\n  function pauseFTokenMintInSystemStabilityMode(bool _status) external onlyEmergencyDAO {\\n    fTokenMintInSystemStabilityModePaused = _status;\\n\\n    emit PauseFTokenMintInSystemStabilityMode(_status);\\n  }\\n\\n  /// @notice Pause xToken redeem in system stability mode\\n  /// @param _status The pause status.\\n  function pauseXTokenRedeemInSystemStabilityMode(bool _status) external onlyEmergencyDAO {\\n    xTokenRedeemInSystemStabilityModePaused = _status;\\n\\n    emit PauseXTokenRedeemInSystemStabilityMode(_status);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to deduct fToken mint fee for base token.\\n  /// @param _baseIn The amount of base token.\\n  /// @param _ratio The mint fee ratio.\\n  /// @param _maxBaseInBeforeSystemStabilityMode The maximum amount of base token can be deposit before entering system stability mode.\\n  /// @return _baseInWithoutFee The amount of base token without fee.\\n  function _deductFTokenMintFee(\\n    uint256 _baseIn,\\n    FeeRatio memory _ratio,\\n    uint256 _maxBaseInBeforeSystemStabilityMode\\n  ) internal returns (uint256 _baseInWithoutFee) {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default + extra = fee_ratio_1\\n\\n    uint256 _feeRatio0 = _ratio.defaultFeeRatio;\\n    uint256 _feeRatio1 = uint256(int256(_ratio.defaultFeeRatio) + _ratio.extraFeeRatio);\\n\\n    _baseInWithoutFee = _deductMintFee(_baseIn, _feeRatio0, _feeRatio1, _maxBaseInBeforeSystemStabilityMode);\\n  }\\n\\n  /// @dev Internal function to deduct fToken mint fee for base token.\\n  /// @param _baseIn The amount of base token.\\n  /// @param _ratio The mint fee ratio.\\n  /// @param _maxBaseInBeforeSystemStabilityMode The maximum amount of base token can be deposit before entering system stability mode.\\n  /// @return _baseInWithoutFee The amount of base token without fee.\\n  function _deductXTokenMintFee(\\n    uint256 _baseIn,\\n    FeeRatio memory _ratio,\\n    uint256 _maxBaseInBeforeSystemStabilityMode\\n  ) internal returns (uint256 _baseInWithoutFee) {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default + extra = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default = fee_ratio_1\\n\\n    uint256 _feeRatio0 = uint256(int256(_ratio.defaultFeeRatio) + _ratio.extraFeeRatio);\\n    uint256 _feeRatio1 = _ratio.defaultFeeRatio;\\n\\n    _baseInWithoutFee = _deductMintFee(_baseIn, _feeRatio0, _feeRatio1, _maxBaseInBeforeSystemStabilityMode);\\n  }\\n\\n  function _deductMintFee(\\n    uint256 _baseIn,\\n    uint256 _feeRatio0,\\n    uint256 _feeRatio1,\\n    uint256 _maxBaseInBeforeSystemStabilityMode\\n  ) internal returns (uint256 _baseInWithoutFee) {\\n    uint256 _maxBaseIn = _maxBaseInBeforeSystemStabilityMode.mul(PRECISION).div(PRECISION - _feeRatio0);\\n\\n    // compute fee\\n    uint256 _fee;\\n    if (_baseIn <= _maxBaseIn) {\\n      _fee = _baseIn.mul(_feeRatio0).div(PRECISION);\\n    } else {\\n      _fee = _maxBaseIn.mul(_feeRatio0).div(PRECISION);\\n      _fee = _fee.add((_baseIn - _maxBaseIn).mul(_feeRatio1).div(PRECISION));\\n    }\\n\\n    _baseInWithoutFee = _baseIn.sub(_fee);\\n    // take fee to platform\\n    if (_fee > 0) {\\n      IERC20Upgradeable(baseToken).safeTransferFrom(msg.sender, platform, _fee);\\n    }\\n  }\\n\\n  /// @dev Internal function to deduct mint fee for base token.\\n  /// @param _amountIn The amount of fToken.\\n  /// @param _ratio The redeem fee ratio.\\n  /// @param _maxInBeforeSystemStabilityMode The maximum amount of fToken can be redeemed before leaving system stability mode.\\n  /// @return _feeRatio The computed fee ratio for base token redeemed.\\n  function _computeFTokenRedeemFeeRatio(\\n    uint256 _amountIn,\\n    FeeRatio memory _ratio,\\n    uint256 _maxInBeforeSystemStabilityMode\\n  ) internal pure returns (uint256 _feeRatio) {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default + extra = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default = fee_ratio_1\\n\\n    uint256 _feeRatio0 = uint256(int256(_ratio.defaultFeeRatio) + _ratio.extraFeeRatio);\\n    uint256 _feeRatio1 = _ratio.defaultFeeRatio;\\n\\n    _feeRatio = _computeRedeemFeeRatio(_amountIn, _feeRatio0, _feeRatio1, _maxInBeforeSystemStabilityMode);\\n  }\\n\\n  /// @dev Internal function to deduct mint fee for base token.\\n  /// @param _amountIn The amount of xToken.\\n  /// @param _ratio The redeem fee ratio.\\n  /// @param _maxInBeforeSystemStabilityMode The maximum amount of xToken can be redeemed before entering system stability mode.\\n  /// @return _feeRatio The computed fee ratio for base token redeemed.\\n  function _computeXTokenRedeemFeeRatio(\\n    uint256 _amountIn,\\n    FeeRatio memory _ratio,\\n    uint256 _maxInBeforeSystemStabilityMode\\n  ) internal pure returns (uint256 _feeRatio) {\\n    // [0, _maxBaseInBeforeSystemStabilityMode) => default = fee_ratio_0\\n    // [_maxBaseInBeforeSystemStabilityMode, infinity) => default + extra = fee_ratio_1\\n\\n    uint256 _feeRatio0 = _ratio.defaultFeeRatio;\\n    uint256 _feeRatio1 = uint256(int256(_ratio.defaultFeeRatio) + _ratio.extraFeeRatio);\\n\\n    _feeRatio = _computeRedeemFeeRatio(_amountIn, _feeRatio0, _feeRatio1, _maxInBeforeSystemStabilityMode);\\n  }\\n\\n  /// @dev Internal function to deduct mint fee for base token.\\n  /// @param _amountIn The amount of fToken or xToken.\\n  /// @param _feeRatio0 The default fee ratio.\\n  /// @param _feeRatio1 The second fee ratio.\\n  /// @param _maxInBeforeSystemStabilityMode The maximum amount of fToken/xToken can be redeemed before entering/leaving system stability mode.\\n  /// @return _feeRatio The computed fee ratio for base token redeemed.\\n  function _computeRedeemFeeRatio(\\n    uint256 _amountIn,\\n    uint256 _feeRatio0,\\n    uint256 _feeRatio1,\\n    uint256 _maxInBeforeSystemStabilityMode\\n  ) internal pure returns (uint256 _feeRatio) {\\n    if (_amountIn <= _maxInBeforeSystemStabilityMode) {\\n      return _feeRatio0;\\n    }\\n    uint256 _fee = _maxInBeforeSystemStabilityMode.mul(_feeRatio0);\\n    _fee = _fee.add((_amountIn - _maxInBeforeSystemStabilityMode).mul(_feeRatio1));\\n    return _fee.div(_amountIn);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxMarket {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when fToken or xToken is minted.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param fTokenOut The amount of fToken minted.\\n  /// @param xTokenOut The amount of xToken minted.\\n  /// @param mintFee The amount of mint fee charged.\\n  event Mint(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 baseTokenIn,\\n    uint256 fTokenOut,\\n    uint256 xTokenOut,\\n    uint256 mintFee\\n  );\\n\\n  /// @notice Emitted when someone redeem base token with fToken or xToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param xTokenBurned The amount of xToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param redeemFee The amount of redeem fee charged.\\n  event Redeem(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 fTokenBurned,\\n    uint256 xTokenBurned,\\n    uint256 baseTokenOut,\\n    uint256 redeemFee\\n  );\\n\\n  /// @notice Emitted when someone add more base token.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param xTokenMinted The amount of xToken minted.\\n  event AddCollateral(address indexed owner, address indexed recipient, uint256 baseTokenIn, uint256 xTokenMinted);\\n\\n  /// @notice Emitted when someone liquidate with fToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  event UserLiquidate(address indexed owner, address indexed recipient, uint256 fTokenBurned, uint256 baseTokenOut);\\n\\n  /// @notice Emitted when self liquidate with fToken.\\n  /// @param caller The address of caller.\\n  /// @param baseSwapAmt The amount of base token used to swap.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param fTokenBurned The amount of fToken liquidated.\\n  event SelfLiquidate(address indexed caller, uint256 baseSwapAmt, uint256 baseTokenOut, uint256 fTokenBurned);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint both fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token supplied.\\n  /// @param recipient The address of receiver for fToken and xToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n\\n  /// @notice Mint some fToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for fToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  function mintFToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted\\n  ) external returns (uint256 fTokenMinted);\\n\\n  /// @notice Mint some xToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  /// @return bonus The amount of base token as bonus.\\n  function mintXToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted, uint256 bonus);\\n\\n  /// @notice Mint some xToken by add some base token as collateral.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function addBaseToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted);\\n\\n  /// @notice Redeem base token with fToken and xToken.\\n  /// @param fTokenIn the amount of fToken to redeem, use `uint256(-1)` to redeem all fToken.\\n  /// @param xTokenIn the amount of xToken to redeem, use `uint256(-1)` to redeem all xToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of base token should be received.\\n  /// @return baseOut The amount of base token should be received.\\n  /// @return bonus The amount of base token as bonus.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut, uint256 bonus);\\n\\n  /// @notice Permissionless liquidate some fToken to increase the collateral ratio.\\n  /// @param fTokenIn the amount of fToken to supply, use `uint256(-1)` to liquidate all fToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of base token should be received.\\n  /// @return baseOut The amount of base token should be received.\\n  function liquidate(\\n    uint256 fTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxRebalancePoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxRebalancePoolRegistry {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when a new rebalance pool is added.\\n  /// @param pool The address of the rebalance pool.\\n  event RegisterPool(address indexed pool);\\n\\n  /// @notice Emitted when an exsited rebalance pool is removed.\\n  /// @param pool The address of the rebalance pool.\\n  event DeregisterPool(address indexed pool);\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address list of all registered RebalancePool.\\n  function getPools() external view returns (address[] memory pools);\\n\\n  /// @notice Return the total amount of asset managed by all registered RebalancePool.\\n  function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxReservePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IFxReservePool {\\n  /// @notice Request bonus token from Reserve Pool.\\n  /// @param token The address of token to request.\\n  /// @param receiver The address recipient for the bonus token.\\n  /// @param originalAmount The original amount of token used.\\n  /// @param bonus The amount of bonus token received.\\n  function requestBonus(\\n    address token,\\n    address receiver,\\n    uint256 originalAmount\\n  ) external returns (uint256 bonus);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/f(x)/IFxTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0 || ^0.8.0;\\n\\ninterface IFxTreasury {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the net asset value is updated.\\n  /// @param price The new price of base token.\\n  /// @param fNav The new net asset value of fToken.\\n  event ProtocolSettle(uint256 price, uint256 fNav);\\n\\n  /*********\\n   * Enums *\\n   *********/\\n\\n  enum MintOption {\\n    Both,\\n    FToken,\\n    XToken\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address of base token.\\n  function baseToken() external view returns (address);\\n\\n  /// @notice Return the address fractional base token.\\n  function fToken() external view returns (address);\\n\\n  /// @notice Return the address leveraged base token.\\n  function xToken() external view returns (address);\\n\\n  /// @notice Return the address of strategy contract.\\n  function strategy() external view returns (address);\\n\\n  /// @notice The last updated permissioned base token price.\\n  function lastPermissionedPrice() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token deposited.\\n  function totalBaseToken() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token managed by strategy.\\n  function strategyUnderlying() external view returns (uint256);\\n\\n  /// @notice Return the current collateral ratio of fToken, multipled by 1e18.\\n  function collateralRatio() external view returns (uint256);\\n\\n  /// @notice Internal function to convert unwrapped token amount to wrapped token amount.\\n  /// @param amount The unwrapped token amount.\\n  function convertToWrapped(uint256 amount) external view returns (uint256);\\n\\n  /// @notice Internal function to convert wrapped token amount to unwrapped token amount.\\n  /// @param amount The wrapped token amount.\\n  function convertToUnwrapped(uint256 amount) external view returns (uint256);\\n\\n  /// @notice Return current nav for base token, fToken and xToken.\\n  /// @return baseNav The nav for base token.\\n  /// @return fNav The nav for fToken.\\n  /// @return xNav The nav for xToken.\\n  function getCurrentNav()\\n    external\\n    view\\n    returns (\\n      uint256 baseNav,\\n      uint256 fNav,\\n      uint256 xNav\\n    );\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxFTokenMintable The amount of fToken can be minted.\\n  function maxMintableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxFTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio, with incentive.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXTokenWithIncentive(uint256 newCollateralRatio, uint256 incentiveRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of fToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxFTokenRedeemable The amount of fToken needed.\\n  function maxRedeemableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenRedeemable);\\n\\n  /// @notice Compute the amount of xToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxXTokenRedeemable The amount of xToken needed.\\n  function maxRedeemableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxXTokenRedeemable);\\n\\n  /// @notice Compute the maximum amount of fToken can be liquidated.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return maxBaseOut The maximum amount of base token can liquidate, without incentive.\\n  /// @return maxFTokenLiquidatable The maximum amount of fToken can be liquidated.\\n  function maxLiquidatable(uint256 newCollateralRatio, uint256 incentiveRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenLiquidatable);\\n\\n  /// @notice Return the exponential moving average of the leverage ratio.\\n  function leverageRatio() external view returns (uint256);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token deposited.\\n  /// @param recipient The address of receiver.\\n  /// @param option The mint option, xToken or fToken or both.\\n  /// @return fTokenOut The amount of fToken minted.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    MintOption option\\n  ) external returns (uint256 fTokenOut, uint256 xTokenOut);\\n\\n  /// @notice Redeem fToken and xToken to base tokne.\\n  /// @param fTokenIn The amount of fToken to redeem.\\n  /// @param xTokenIn The amount of xToken to redeem.\\n  /// @param owner The owner of the fToken or xToken.\\n  /// @param baseOut The amount of base token redeemed.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Add some base token to mint xToken with incentive.\\n  /// @param baseIn The amount of base token deposited.\\n  /// @param incentiveRatio The incentive ratio.\\n  /// @param recipient The address of receiver.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function addBaseToken(\\n    uint256 baseIn,\\n    uint256 incentiveRatio,\\n    address recipient\\n  ) external returns (uint256 xTokenOut);\\n\\n  /// @notice Liquidate fToken to base token with incentive.\\n  /// @param fTokenIn The amount of fToken to liquidate.\\n  /// @param incentiveRatio The incentive ratio.\\n  /// @param owner The owner of the fToken.\\n  /// @param baseOut The amount of base token liquidated.\\n  function liquidate(\\n    uint256 fTokenIn,\\n    uint256 incentiveRatio,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Settle the nav of base token, fToken and xToken.\\n  function protocolSettle() external;\\n\\n  /// @notice Transfer some base token to strategy contract.\\n  /// @param amount The amount of token to transfer.\\n  function transferToStrategy(uint256 amount) external;\\n\\n  /// @notice Notify base token profit from strategy contract.\\n  /// @param amount The amount of base token.\\n  function notifyStrategyProfit(uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokenMinted\",\"type\":\"uint256\"}],\"name\":\"AddCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseFTokenMintInSystemStabilityMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseXTokenRedeemInSystemStabilityMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseSwapAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fTokenBurned\",\"type\":\"uint256\"}],\"name\":\"SelfLiquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"stabilityIncentiveRatio\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"liquidationIncentiveRatio\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"selfLiquidationIncentiveRatio\",\"type\":\"uint64\"}],\"name\":\"UpdateIncentiveConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateLiquidationWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"stabilityRatio\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"liquidationRatio\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"selfLiquidationRatio\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"recapRatio\",\"type\":\"uint64\"}],\"name\":\"UpdateMarketConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"name\":\"UpdateMintFeeRatioFToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"name\":\"UpdateMintFeeRatioXToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"}],\"name\":\"UpdatePlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"UpdateRebalancePoolRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"name\":\"UpdateRedeemFeeRatioFToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"name\":\"UpdateRedeemFeeRatioXToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reservePool\",\"type\":\"address\"}],\"name\":\"UpdateReservePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fTokenBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenOut\",\"type\":\"uint256\"}],\"name\":\"UserLiquidate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minXTokenMinted\",\"type\":\"uint256\"}],\"name\":\"addBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fTokenMintFeeRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fTokenMintInSystemStabilityModePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fTokenRedeemFeeRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"stabilityIncentiveRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidationIncentiveRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"selfLiquidationIncentiveRatio\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBaseOut\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidationWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"stabilityRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidationRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"selfLiquidationRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"recapRatio\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minFTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minXTokenMinted\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minFTokenMinted\",\"type\":\"uint256\"}],\"name\":\"mintFToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minXTokenMinted\",\"type\":\"uint256\"}],\"name\":\"mintXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pauseFTokenMintInSystemStabilityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pauseRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pauseXTokenRedeemInSystemStabilityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBaseOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_stabilityIncentiveRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_liquidationIncentiveRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_selfLiquidationIncentiveRatio\",\"type\":\"uint64\"}],\"name\":\"updateIncentiveConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateLiquidationWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_stabilityRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_liquidationRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_selfLiquidationRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_recapRatio\",\"type\":\"uint64\"}],\"name\":\"updateMarketConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultFeeRatio\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"_extraFeeRatio\",\"type\":\"int128\"},{\"internalType\":\"bool\",\"name\":\"_isFToken\",\"type\":\"bool\"}],\"name\":\"updateMintFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"updateRebalancePoolRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_defaultFeeRatio\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"_extraFeeRatio\",\"type\":\"int128\"},{\"internalType\":\"bool\",\"name\":\"_isFToken\",\"type\":\"bool\"}],\"name\":\"updateRedeemFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reservePool\",\"type\":\"address\"}],\"name\":\"updateReservePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenMintFeeRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenRedeemFeeRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"defaultFeeRatio\",\"type\":\"uint128\"},{\"internalType\":\"int128\",\"name\":\"extraFeeRatio\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xTokenRedeemInSystemStabilityModePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Market", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}