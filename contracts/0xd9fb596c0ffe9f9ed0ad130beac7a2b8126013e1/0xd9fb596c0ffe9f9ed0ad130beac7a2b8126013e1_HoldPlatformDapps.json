{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\n/**\r\n\r\n\r\n\t\t\t\t\t.----------------.  .----------------.  .----------------.  .----------------. \r\n\t\t\t\t\t| .--------------. || .--------------. || .--------------. || .--------------. |\r\n\t\t\t\t\t| |  ____  ____  | || |     ____     | || |   _____      | || |  ________    | |\r\n\t\t\t\t\t| | |_   ||   _| | || |   .'    `.   | || |  |_   _|     | || | |_   ___ `.  | |\r\n\t\t\t\t\t| |   | |__| |   | || |  /  .--.  \\  | || |    | |       | || |   | |   `. \\ | |\r\n\t\t\t\t\t| |   |  __  |   | || |  | |    | |  | || |    | |   _   | || |   | |    | | | |\r\n\t\t\t\t\t| |  _| |  | |_  | || |  \\  `--'  /  | || |   _| |__/ |  | || |  _| |___.' / | |\r\n\t\t\t\t\t| | |____||____| | || |   `.____.'   | || |  |________|  | || | |________.'  | |\r\n\t\t\t\t\t| |              | || |              | || |              | || |              | |\r\n\t\t\t\t\t| '--------------' || '--------------' || '--------------' || '--------------' |\r\n\t\t\t\t\t'----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n**/\r\n\r\n\t/*==============================\r\n    =         LIVE VERSION         =\r\n    ==============================*/\r\n\t\r\ncontract EthereumSmartContract {    \r\n    address EthereumNodes; \r\n\t\r\n    constructor() public { \r\n        EthereumNodes = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == EthereumNodes);\r\n        _;\r\n    } \r\n\t\r\n    function GetEthereumNodes() public view returns (address owner) { return EthereumNodes; }\r\n}\r\n\r\ncontract HoldPlatformDapps is EthereumSmartContract {\r\n\t\r\n\t/*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\t\r\n\t// Ethereum User\r\n event onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\r\n event onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime);\t\t\r\n event onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime);\r\n event onUnlocktoken\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime);\r\n event onUtilityfee\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 decimal, uint256 endtime);\r\n event onReceiveAirdrop\t(address indexed hodler, uint256 amount, uint256 datetime);\t\r\n\r\n\t// Ethereum Nodes\r\n event onAddContract\t(address indexed hodler, address indexed tokenAddress, uint256 percent, string tokenSymbol, uint256 amount, uint256 endtime);\r\n event onTokenPrice\t\t(address indexed hodler, address indexed tokenAddress, uint256 Currentprice, uint256 ETHprice, uint256 ATHprice, uint256 ATLprice, uint256 ICOprice, uint256 Aprice, uint256 endtime);\r\n event onHoldAirdrop\t(address indexed hodler, address indexed tokenAddress, uint256 HPMstatus, uint256 d1, uint256 d2, uint256 d3,uint256 endtime);\r\n event onHoldDeposit\t(address indexed hodler, address indexed tokenAddress, uint256 amount, uint256 endtime);\r\n event onHoldWithdraw\t(address indexed hodler, address indexed tokenAddress, uint256 amount, uint256 endtime);\r\n event onUtilitySetting\t(address indexed hodler, address indexed tokenAddress, address indexed pwt, uint256 amount, uint256 ustatus, uint256 endtime);\r\n event onUtilityStatus\t(address indexed hodler, address indexed tokenAddress, uint256 ustatus, uint256 endtime);\r\n event onUtilityBurn\t(address indexed hodler, address indexed tokenAddress, uint256 uamount, uint256 bamount, uint256 endtime); \r\n \r\n\t/*==============================\r\n    =          Mechanism           =\r\n    ==============================*/   \r\n\r\n\t//-------o Burn = 2% o-------o Affiliate = 10% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72%\r\n\t\r\n\t//-------o Hold 36 Months, Unlock 0.067% Per day >>> 2% Per month \r\n\t//-------o Special Promo : Hold 24 Months, Unlock 0.1% Per day >>> 3% Permonth ( limited offer )\r\n\t\r\n\t\r\n\t/*==============================\r\n    =          VARIABLES           =\r\n    ==============================*/  \r\n\t\r\n\t// ---> Struct Database\r\n\r\n    struct Safe {\r\n        uint256 id;\t\t\t\t\t\t// [01] -- > Registration Number\r\n        uint256 amount;\t\t\t\t\t// [02] -- > Total amount of contribution to this transaction\r\n        uint256 endtime;\t\t\t\t// [03] -- > The Expiration Of A Hold Platform Based On Unix Time\r\n        address user;\t\t\t\t\t// [04] -- > The ETH address you are using\r\n        address tokenAddress;\t\t\t// [05] -- > The Token Contract Address That You Are Using\r\n\t\tstring  tokenSymbol;\t\t\t// [06] -- > The Token Symbol That You Are Using\r\n\t\tuint256 amountbalance; \t\t\t// [07] -- > 88% from Contribution / 72% Without Cashback\r\n\t\tuint256 cashbackbalance; \t\t// [08] -- > 16% from Contribution / 0% Without Cashback\r\n\t\tuint256 lasttime; \t\t\t\t// [09] -- > The Last Time You Withdraw Based On Unix Time\r\n\t\tuint256 percentage; \t\t\t// [10] -- > The percentage of tokens that are unlocked every month ( Default = 2% --> Promo = 3% )\r\n\t\tuint256 percentagereceive; \t\t// [11] -- > The Percentage You Have Received\r\n\t\tuint256 tokenreceive; \t\t\t// [12] -- > The Number Of Tokens You Have Received\r\n\t\tuint256 lastwithdraw; \t\t\t// [13] -- > The Last Amount You Withdraw\r\n\t\taddress referrer; \t\t\t\t// [14] -- > Your ETH referrer address\r\n\t\tbool \tcashbackstatus; \t\t// [15] -- > Cashback Status\r\n\t\tuint256 tokendecimal; \t\t\t// [16] -- > Token Decimals\r\n\t\tuint256 startime;\t\t\t\t// [17] -- > Registration time ( Based On Unix Time )\r\n    }\r\n\t\r\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// [01] -- > ID number ( Start from 500 )\t\t\t\t\r\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// [02] -- > Total Smart Contract User (TX)\t\t\t\t\t\r\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// [03] -- > Cashback Code \t\t\t\t\t\r\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// [04] -- > Search Address by ID\t\t\t\r\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// [05] -- > Affiliate List by ID\t\t\t\t\t\r\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// [06] -- > Contract Address Symbol\t\t\t\t\r\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// [07] -- > Struct safe database\t\r\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// [08] -- > Contract Address \t\r\n\tmapping(uint256 => uint256) \t\tpublic starttime; \t\t\t// [09] -- > Start Time by id number\r\n\r\n\tmapping (address => mapping (uint256 => uint256)) public Bigdata; \r\n\t\r\n\t/** Bigdata Mapping : \r\n\t[1] Percent (Monthly Unlocked tokens)\t\t[7] All Payments \t\t\t\t[13] Total TX Affiliate (Withdraw) \t\t[19] Total TX Burn\r\n\t[2] Holding Time (in seconds) \t\t\t\t[8] Active User \t\t\t\t[14] Current Price (USD)\t\t\t\t[20] ICO Price (ETH)\t\r\n\t[3] Token Balance \t\t\t\t\t\t\t[9] Total User \t\t\t\t\t[15] ATH Price (ETH)\t\t\t\t\t[21] Token Decimal\r\n\t[4] Total Burn\t\t\t\t\t\t\t\t[10] Total TX Hold \t\t\t\t[16] ATL Price (ETH)\t\t\t\t\t[22] Additional Price\r\n\t[5] Max Contribution \t\t\t\t\t\t[11] Total TX Unlock \t\t\t[17] Current ETH Price (ETH) \t\t\r\n\t[6] All Contribution \t\t\t\t\t\t[12] Total TX Airdrop\t\t\t[18] Date Register\t\t\t\t\r\n\t**/\r\n\t\r\n\t// ---> Statistics Mapping\t\r\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\r\n\t// [1] LifetimeContribution [2] LifetimePayments [3] Affiliatevault [4] Affiliateprofit [5] ActiveContribution\t[6] Burn [7] Active User \r\n\t\r\n\t// ---> Airdrop Mapping\t\t\r\n\taddress public Holdplatform_address;\t\t\t\t\t\t// [01] -- > Token contract address used for airdrop\t\t\t\t\t\r\n\tuint256 public Holdplatform_balance; \t\t\t\t\t\t// [02] -- > The remaining balance, to be used for airdrop\t\t\t\r\n\tmapping(address => uint256) public Holdplatform_status;\t\t// [03] -- > Current airdrop status ( 0 = Disabled, 1 = Active )\r\n\t\r\n\tmapping(address => mapping (uint256 => uint256)) public Holdplatform_divider; \t\r\n\t// Holdplatform_divider = [1] Lock Airdrop\t[2] Unlock Airdrop\t[3] Affiliate Airdrop\r\n\r\n\t// ---> Utility Mapping\r\n\tmapping(address => uint256) public U_status;\t\t\t\t\t\t\t// [01] -- > Status for utility fee payments \r\n\tmapping(address => uint256) public U_amount;\t\t\t\t\t\t\t// [02] -- > The amount of utility fee that must be paid for every hold\r\n\tmapping(address => address) public U_paywithtoken;\t\t\t\t\t\t// [03] -- > Tokens used to pay fees\r\n\tmapping(address => mapping (address => uint256)) public U_userstatus; \t// [04] -- > The status of the user has paid or not\r\n\t\r\n\tmapping(address => mapping (uint256 => uint256)) public U_statistics;\r\n\t// U_statistics = [1] Utility Vault [2] Utility Profit [3] Utility Burn\r\n\t\r\n\taddress public Utility_address;\r\n\t\r\n\t/*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/  \t\r\n   \r\n    constructor() public {     \t \t\r\n        idnumber \t\t\t\t= 500;\r\n\t\tHoldplatform_address\t= 0x49a6123356b998EF9478C495E3D162A2F4eC4363;\t\r\n    }\r\n    \r\n\t\r\n\t/*==============================\r\n    =    AVAILABLE FOR EVERYONE    =\r\n    ==============================*/  \r\n\r\n//-------o Function 01 - Ethereum Payable\r\n    function () public payable {  \r\n\t\tif (msg.value == 0) {\r\n\t\t\ttothe_moon();\r\n\t\t} else { revert(); }\r\n    }\r\n    function tothemoon() public payable {  \r\n\t\tif (msg.value == 0) {\r\n\t\t\ttothe_moon();\r\n\t\t} else { revert(); }\r\n    }\r\n\tfunction tothe_moon() private {  \r\n\t\tfor(uint256 i = 1; i < idnumber; i++) {            \r\n\t\tSafe storage s = _safes[i];\r\n\t\t\r\n\t\t\t// Send all unlocked tokens\r\n\t\t\tif (s.user == msg.sender && s.amountbalance > 0) {\r\n\t\t\tUnlocktoken(s.tokenAddress, s.id);\r\n\t\t\t\r\n\t\t\t\t// Send all affiliate bonus\r\n\t\t\t\tif (Statistics[s.user][s.tokenAddress][3] > 0) {\t\t// [3] Affiliatevault\r\n\t\t\t\tWithdrawAffiliate(s.user, s.tokenAddress);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\t\r\n//-------o Function 02 - Cashback Code\r\n\r\n    function CashbackCode(address _cashbackcode) public {\t\t\r\n\t\trequire(_cashbackcode != msg.sender);\t\t\t\r\n\t\t\r\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 && Bigdata[_cashbackcode][8] == 1) { // [8] Active User \r\n\t\tcashbackcode[msg.sender] = _cashbackcode; }\r\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\r\n\t\t\r\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\r\n    } \r\n\t\r\n//-------o Function 03 - Contribute \r\n\r\n\t//--o 01\r\n    function Holdplatform(address tokenAddress, uint256 amount) public {\r\n\t\trequire(amount >= 1 );\r\n\t\trequire(add(Statistics[msg.sender][tokenAddress][5], amount) <= Bigdata[tokenAddress][5] ); \r\n\t\t// [5] ActiveContribution && [5] Max Contribution\t\r\n\t\t\r\n\t\tif (cashbackcode[msg.sender] == 0x0000000000000000000000000000000000000000 ) { \r\n\t\t\tcashbackcode[msg.sender] \t= EthereumNodes;\r\n\t\t} \r\n\t\t\r\n\t\tif (Bigdata[msg.sender][18] == 0) { // [18] Date Register\r\n\t\t\tBigdata[msg.sender][18] = now;\r\n\t\t} \r\n\t\t\r\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \r\n\t\t\r\n\t\t\tif (U_status[tokenAddress] == 2 ) {  // 0 = Disabled , 1 = Enabled, 2 = Merger with Hold\r\n\r\n\t\t\t\tif (U_userstatus[msg.sender][tokenAddress] == 0 ) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tuint256 Fee\t\t\t\t\t\t\t\t= U_amount[tokenAddress];\r\n\t\t\t\t\tuint256 HalfFee\t\t\t\t\t\t\t= div(Fee, 2);\r\n\t\t\t\t\tBigdata[tokenAddress][3]\t\t\t\t= add(Bigdata[tokenAddress][3], Fee);\r\n\t\t\t\t\tU_statistics[tokenAddress][1]\t\t\t= add(U_statistics[tokenAddress][1], HalfFee);\t// [1] Utility Vault\r\n\t\t\t\t\tU_statistics[tokenAddress][2]\t\t\t= add(U_statistics[tokenAddress][2], HalfFee);\t// [2] Utility Profit\r\n\t\t\t\t\tU_statistics[tokenAddress][3]\t\t\t= add(U_statistics[tokenAddress][3], HalfFee);\t// [3] Utility Burn\r\n\t\t\t\r\n\t\t\t\t\tuint256 totalamount\t\t\t\t\t\t= sub(amount, Fee);\r\n\t\t\t\t\tU_userstatus[msg.sender][tokenAddress] \t= 1;\r\n\t\t\t\t\t\r\n\t\t\t\t} else { \r\n\t\t\t\ttotalamount\t= amount; \r\n\t\t\t\tU_userstatus[msg.sender][tokenAddress] \t= 1; }\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t} else { \t\r\n\t\t\r\n\t\t\t\tif (U_status[tokenAddress] == 1 && U_userstatus[msg.sender][tokenAddress] == 0 ) { revert(); } \r\n\t\t\t\telse { totalamount\t= amount; }\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \r\n\t\t\trequire(token.transferFrom(msg.sender, address(this), amount));\t\r\n\t\t\r\n\t\t\tHodlTokens2(tokenAddress, totalamount);\r\n\t\t\tAirdrop(msg.sender, tokenAddress, totalamount, 1);\t\t// 1 = Hold, 2 = Unhold, 3 = Affiliate Withdraw\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t//--o 02\t\r\n    function HodlTokens2(address ERC, uint256 amount) private {\r\n\t\t\r\n\t\taddress ref\t\t\t\t\t\t= cashbackcode[msg.sender];\r\n\t\tuint256 ReferrerContribution \t= Statistics[ref][ERC][5];\t\t\t\t\t\t\t// [5] ActiveContribution\r\n\t\tuint256 AffiliateContribution \t= Statistics[msg.sender][ERC][5];\t\t\t\t\t// [5] ActiveContribution\r\n\t\tuint256 MyContribution \t\t\t= add(AffiliateContribution, amount); \r\n\t\t\r\n\t  \tif (ref == EthereumNodes && Bigdata[msg.sender][8] == 0 ) { \t\t\t\t\t\t// [8] Active User \r\n\t\t\tuint256 nodecomission \t\t= div(mul(amount, 26), 100);\r\n\t\t\tStatistics[ref][ERC][3] \t= add(Statistics[ref][ERC][3], nodecomission ); \t// [3] Affiliatevault \r\n\t\t\tStatistics[ref][ERC][4] \t= add(Statistics[ref][ERC][4], nodecomission );\t\t// [4] Affiliateprofit \r\n\t\t\t\r\n\t\t} else { \r\n\t\t\t\r\n\t\t\tuint256 affcomission_one \t= div(mul(amount, 10), 100); \r\n\t\t\t\r\n\t\t\tif (ReferrerContribution >= MyContribution) { //--o  if referrer contribution >= My contribution\r\n\r\n\t\t\t\tStatistics[ref][ERC][3] \t\t= add(Statistics[ref][ERC][3], affcomission_one); \t\t\t\t\t\t// [3] Affiliatevault \r\n\t\t\t\tStatistics[ref][ERC][4] \t\t= add(Statistics[ref][ERC][4], affcomission_one); \t\t\t\t\t\t// [4] Affiliateprofit \r\n\r\n\t\t\t} else {\r\n\t\t\t\t\tif (ReferrerContribution > AffiliateContribution  ) { \t\r\n\t\t\t\t\t\tif (amount <= add(ReferrerContribution,AffiliateContribution)  ) { \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tuint256 AAA\t\t\t\t\t= sub(ReferrerContribution, AffiliateContribution );\r\n\t\t\t\t\t\tuint256 affcomission_two\t= div(mul(AAA, 10), 100); \r\n\t\t\t\t\t\tuint256 affcomission_three\t= sub(affcomission_one, affcomission_two);\t\t\r\n\t\t\t\t\t\t} else {\t\r\n\t\t\t\t\t\tuint256 BBB\t\t\t\t\t= sub(sub(amount, ReferrerContribution), AffiliateContribution);\r\n\t\t\t\t\t\taffcomission_three\t\t\t= div(mul(BBB, 10), 100); \r\n\t\t\t\t\t\taffcomission_two\t\t\t= sub(affcomission_one, affcomission_three); } \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else { affcomission_two\t= 0; \taffcomission_three\t= affcomission_one; } \r\n\t\t\t\t\t\r\n\t\t\t\tStatistics[ref][ERC][3] \t\t= add(Statistics[ref][ERC][3], affcomission_two); \t\t\t\t\t\t// [3] Affiliatevault \r\n\t\t\t\tStatistics[ref][ERC][4] \t\t= add(Statistics[ref][ERC][4], affcomission_two); \t\t\t\t\t\t// [4] Affiliateprofit \r\n\t\r\n\t\t\t\tStatistics[EthereumNodes][ERC][3] \t\t= add(Statistics[EthereumNodes][ERC][3], affcomission_three); \t// [3] Affiliatevault \r\n\t\t\t\tStatistics[EthereumNodes][ERC][4] \t\t= add(Statistics[EthereumNodes][ERC][4], affcomission_three);\t// [4] Affiliateprofit \r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\tHodlTokens3(ERC, amount, ref); \t\r\n\t}\r\n\t//--o 03\t\r\n    function HodlTokens3(address ERC, uint256 amount, address ref) private {\r\n\t    \r\n\t\tuint256 AvailableBalances \t\t= div(mul(amount, 72), 100);\r\n\t\t\r\n\t\tif (ref == EthereumNodes && Bigdata[msg.sender][8] == 0 ) \t\t\t\t\t\t\t\t\t\t// [8] Active User \r\n\t\t{ uint256\tAvailableCashback = 0; } else { AvailableCashback = div(mul(amount, 16), 100);}\r\n\t\t\r\n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\t\r\n\t\tuint256 HodlTime\t\t= add(now, Bigdata[ERC][2]);\t\t\t\t\t\t\t\t\t\t\t// [2] Holding Time (in seconds) \t\r\n\t\t\r\n\t\t_safes[idnumber] = Safe(idnumber, amount, HodlTime, msg.sender, ERC, token.symbol(), AvailableBalances, AvailableCashback, now, Bigdata[ERC][1], 0, 0, 0, ref, false, Bigdata[ERC][21], now);\t\t\t// [1] Percent (Monthly Unlocked tokens)\t\r\n\t\t\t\t\r\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], amount); \t\t\t// [1] LifetimeContribution\r\n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], amount); \t\t\t// [5] ActiveContribution\r\n\t\t\r\n\t\tuint256 Burn \t\t\t\t\t\t\t= div(mul(amount, 2), 100);\r\n\t\tStatistics[msg.sender][ERC][6]  \t\t= add(Statistics[msg.sender][ERC][6], Burn); \t\t\t// [6] Burn \t\r\n\t\tBigdata[ERC][6] \t\t\t\t\t\t= add(Bigdata[ERC][6], amount);   \t\t\t\t\t\t// [6] All Contribution \r\n        Bigdata[ERC][3]\t\t\t\t\t\t\t= add(Bigdata[ERC][3], amount);  \t\t\t\t\t\t// [3] Token Balance \r\n\r\n\t\tif(Bigdata[msg.sender][8] == 1 ) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [8] Active User \r\n\t\tstarttime[idnumber] = now;\r\n        idaddress[msg.sender].push(idnumber); idnumber++; Bigdata[ERC][10]++;  }\t\t\t\t\t\t// [10] Total TX Hold \t\r\n\t\telse { \r\n\t\tstarttime[idnumber] = now;\r\n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; \r\n\t\tBigdata[ERC][9]++; Bigdata[ERC][10]++; TotalUser++;   }\t\t\t\t\t\t\t\t\t\t\t// [9] Total User & [10] Total TX Hold \r\n\t\t\r\n\t\tBigdata[msg.sender][8] \t\t\t= 1;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [8] Active User \r\n\t\tStatistics[msg.sender][ERC][7]\t= 1;\t\t\r\n\t\t// [7] Active User \r\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), amount, Bigdata[ERC][21], HodlTime);\t\r\n\t\t\r\n\t\tamount\t= 0;\tAvailableBalances = 0;\t\tAvailableCashback = 0;\r\n\t\t\r\n\t\tU_userstatus[msg.sender][ERC] \t\t= 0; // Meaning that the utility fee has been used and returned to 0\r\n\t\t\r\n\t}\r\n\t\r\n\r\n//-------o Function 05 - Claim Token That Has Been Unlocked\r\n    function Unlocktoken(address tokenAddress, uint256 id) public {\r\n        require(tokenAddress != 0x0);\r\n        require(id != 0);        \r\n        \r\n        Safe storage s = _safes[id];\r\n        require(s.user == msg.sender);  \r\n\t\trequire(s.tokenAddress == tokenAddress);\r\n\t\t\r\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\r\n    }\r\n    //--o 01\r\n    function UnlockToken2(address ERC, uint256 id) private {\r\n        Safe storage s = _safes[id];      \r\n        require(s.tokenAddress == ERC);\t\t\r\n\t\t     \r\n        if(s.endtime < now){ //--o  Hold Complete \r\n        \r\n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\r\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\t// [5] ActiveContribution\t\r\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= amounttransfer;   s.amountbalance = 0;   s.lasttime = now; \r\n\r\n \t\tAirdrop(s.user, s.tokenAddress, amounttransfer, 2);\t\t// 1 = Hold, 2 = Unhold, 3 = Affiliate Withdraw  \r\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \r\n\t\t\r\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\r\n            s.tokenreceive \t\t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\r\n\t\t\ts.cashbackbalance \t= 0;\t\r\n\t\t\ts.cashbackstatus \t= true ;\r\n            }\r\n\t\t\telse {\r\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\r\n\t\t\t}\r\n\t\r\n\t\temit onUnlocktoken(msg.sender, s.tokenAddress, s.tokenSymbol, amounttransfer, Bigdata[ERC][21], now);\r\n\t\t\r\n        } else { UnlockToken3(ERC, s.id); }\r\n        \r\n    }   \r\n\t//--o 02\r\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\r\n\t\tSafe storage s = _safes[id];\r\n        require(s.tokenAddress == ERC);\t\t\r\n\t\t\t\r\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \r\n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\r\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\r\n\t\t                         \r\n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\r\n\t\t\t\r\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\r\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\r\n\t\t\t\r\n\t\t//--o Maximum withdraw = User Amount Balance   \r\n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 lastwithdraw = s.amountbalance; } else { lastwithdraw = MaxAccumulation; }\r\n\t\t\t\r\n\t\ts.lastwithdraw \t\t\t\t= lastwithdraw; \t\t\t\r\n\t\ts.amountbalance \t\t\t= sub(s.amountbalance, lastwithdraw);\r\n\t\t\r\n\t\tif (s.cashbackbalance > 0) { \r\n\t\ts.cashbackstatus \t= true ; \r\n\t\ts.lastwithdraw \t\t= add(s.cashbackbalance, lastwithdraw); \r\n\t\t} \r\n\t\t\r\n\t\ts.cashbackbalance \t\t\t= 0; \r\n\t\ts.lasttime \t\t\t\t\t= now; \t\t\r\n\t\t\t\r\n\t\tUnlockToken4(ERC, id, s.amountbalance, s.lastwithdraw );\t\t\r\n    }   \r\n\t//--o 03\r\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\r\n        Safe storage s = _safes[id];\r\n        require(s.tokenAddress == ERC);\t\r\n\r\n\t\tuint256 affiliateandburn \t= div(mul(s.amount, 12), 100) ; \r\n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ;\r\n\r\n\t\tuint256 firstid = s.id;\r\n\t\t\r\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes && idaddress[msg.sender][0] == firstid ) {\r\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, affiliateandburn), maxcashback), newamountbalance) ;\t\r\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, affiliateandburn), newamountbalance) ;}\r\n\t\t\t\r\n\t\ts.percentagereceive \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\r\n\t\ts.tokenreceive \t\t\t= tokenreceived; \t\r\n\r\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\r\n\t\temit onUnlocktoken(msg.sender, s.tokenAddress, s.tokenSymbol, realAmount, Bigdata[ERC][21], now);\r\n\t\t\r\n\t\tAirdrop(s.user, s.tokenAddress, realAmount, 2); \t// 1 = Hold, 2 = Unhold, 3 = Affiliate Withdraw  \r\n    } \r\n\t//--o Pay Token\r\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\r\n        \r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n\t\t\r\n\t\ttoken.transfer(user, amount);\r\n\t\tuint256 burn\t= 0;\r\n\t\t\r\n        if (Statistics[user][tokenAddress][6] > 0) {\t\t\t\t\t\t\t\t\t\t\t\t// [6] Burn  \r\n\r\n\t\tburn = Statistics[user][tokenAddress][6];\t\t\t\t\t\t\t\t\t\t\t\t\t// [6] Burn  \r\n        Statistics[user][tokenAddress][6] = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [6] Burn  \r\n\t\t\r\n\t\ttoken.transfer(0x000000000000000000000000000000000000dEaD, burn); \r\n\t\tBigdata[tokenAddress][4]\t\t\t= add(Bigdata[tokenAddress][4], burn);\t\t\t\t\t// [4] Total Burn\r\n\t\t\r\n\t\tBigdata[tokenAddress][19]++;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [19] Total TX Burn\r\n\t\t}\r\n\t\t\r\n\t\tBigdata[tokenAddress][3]\t\t\t= sub(sub(Bigdata[tokenAddress][3], amount), burn); \t// [3] Token Balance \t\r\n\t\tBigdata[tokenAddress][7]\t\t\t= add(Bigdata[tokenAddress][7], amount);\t\t\t\t// [7] All Payments \r\n\t\tStatistics[user][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \t\t// [2] LifetimePayments\r\n\t\t\r\n\t\tBigdata[tokenAddress][11]++;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [11] Total TX Unlock \r\n\t\t\r\n\t}\r\n\t\r\n//-------o Function 05 - Airdrop\r\n\r\n    function Airdrop(address user, address tokenAddress, uint256 amount, uint256 divfrom) private {\r\n\t\t\r\n\t\tuint256 divider\t\t\t= Holdplatform_divider[tokenAddress][divfrom];\r\n\t\t\r\n\t\tif (Holdplatform_status[tokenAddress] == 1) {\r\n\t\t\t\r\n\t\t\tif (Holdplatform_balance > 0 && divider > 0) {\r\n\t\t\t\t\r\n\t\t\t\tif (Bigdata[tokenAddress][21] == 18 ) { uint256 airdrop\t\t\t= div(amount, divider);\r\n\t\t\t\t\r\n\t\t\t\t} else { \r\n\t\t\t\t\r\n\t\t\t\tuint256 difference \t\t\t= sub(18, Bigdata[tokenAddress][21]);\r\n\t\t\t\tuint256 decimalmultipler\t= ( 10 ** difference );\r\n\t\t\t\tuint256 decimalamount\t\t= mul(decimalmultipler, amount);\r\n\t\t\t\t\r\n\t\t\t\tairdrop = div(decimalamount, divider); \r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\taddress airdropaddress\t= Holdplatform_address;\r\n\t\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \r\n\t\t\ttoken.transfer(user, airdrop);\r\n\t\t\r\n\t\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\r\n\t\t\tBigdata[tokenAddress][12]++;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [12] Total TX Airdrop\t\r\n\t\t\r\n\t\t\temit onReceiveAirdrop(user, airdrop, now);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\t\r\n\t}\r\n\t\r\n//-------o Function 06 - Total Contribute\r\n\r\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\r\n        return idaddress[hodler].length;\r\n    }\r\n\t\r\n//-------o Function 07 - Total Affiliate \r\n\r\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\r\n        return afflist[hodler].length;\r\n    }\r\n    \r\n//-------o Function 08 - Get complete data from each user\r\n\tfunction GetSafe(uint256 _id) public view\r\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, uint256 tokendecimal, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\r\n    {\r\n        Safe storage s = _safes[_id];\r\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokendecimal, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\r\n    }\r\n\t\r\n//-------o Function 09 - Withdraw Affiliate Bonus\r\n\r\n    function WithdrawAffiliate(address user, address tokenAddress) public { \r\n\t\trequire(user == msg.sender); \t\r\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\t\t\t\t\t\t\t\t\t\t\t\t// [3] Affiliatevault\r\n\t\t\r\n\t\tuint256 amount \t= Statistics[msg.sender][tokenAddress][3];\t\t\t\t\t\t\t\t\t\t// [3] Affiliatevault\r\n\r\n        ERC20Interface token = ERC20Interface(tokenAddress);        \r\n        require(token.balanceOf(address(this)) >= amount);\r\n        token.transfer(user, amount);\r\n\t\t\r\n\t\tBigdata[tokenAddress][3] \t\t\t\t= sub(Bigdata[tokenAddress][3], amount); \t\t\t\t// [3] Token Balance \t\r\n\t\tBigdata[tokenAddress][7] \t\t\t\t= add(Bigdata[tokenAddress][7], amount);\t\t\t\t// [7] All Payments\r\n\t\tStatistics[user][tokenAddress][3] \t\t= 0;\t\t\t\t\t\t\t\t\t\t\t\t\t// [3] Affiliatevault\r\n\t\tStatistics[user][tokenAddress][2] \t\t= add(Statistics[user][tokenAddress][2], amount);\t\t// [2] LifetimePayments\r\n\r\n\t\tBigdata[tokenAddress][13]++;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [13] Total TX Affiliate (Withdraw)\r\n\t\temit onAffiliateBonus(msg.sender, tokenAddress, ContractSymbol[tokenAddress], amount, Bigdata[tokenAddress][21], now);\r\n\t\t\r\n\t\tAirdrop(user, tokenAddress, amount, 3); \t// 1 = Hold, 2 = Unhold, 3 = Affiliate Withdraw\r\n    } \r\n\r\n\t//-------o Function 10 - Utility Fee\r\n\r\n\tfunction Utility_fee(address tokenAddress) public {\r\n\t\t\r\n\t\tuint256 Fee\t\t= U_amount[tokenAddress];\t\r\n\t\taddress pwt \t= U_paywithtoken[tokenAddress];\r\n\t\t\r\n\t\tif (U_status[tokenAddress] == 0 || U_status[tokenAddress] == 2 || U_userstatus[msg.sender][tokenAddress] == 1  ) { revert(); } else { \r\n\r\n\t\tERC20Interface token \t\t\t= ERC20Interface(pwt);       \r\n\t\trequire(token.transferFrom(msg.sender, address(this), Fee));\r\n\r\n\t\tBigdata[pwt][3]\t\t\t= add(Bigdata[pwt][3], Fee); \t\t\r\n\t\t\r\n\t\tuint256 utilityvault \t= U_statistics[pwt][1];\t\t\t\t// [1] Utility Vault\r\n\t\tuint256 utilityprofit \t= U_statistics[pwt][2];\t\t\t\t// [2] Utility Profit\r\n\t\tuint256 Burn \t\t\t= U_statistics[pwt][3];\t\t\t\t// [3] Utility Burn\r\n\t\r\n\t\tuint256 percent50\t= div(Fee, 2);\r\n\t\r\n\t\tU_statistics[pwt][1]\t= add(utilityvault, percent50);\t\t// [1] Utility Vault\r\n\t\tU_statistics[pwt][2]\t= add(utilityprofit, percent50);\t// [2] Utility Profit\r\n\t\tU_statistics[pwt][3]\t= add(Burn, percent50);\t\t\t\t// [3] Utility Burn\r\n\t\r\n\t\r\n\t\tU_userstatus[msg.sender][tokenAddress] \t= 1;\t\r\n\t\temit onUtilityfee(msg.sender, pwt, token.symbol(), U_amount[tokenAddress], Bigdata[tokenAddress][21], now);\t\r\n\t\t\r\n\t\t}\t\t\r\n\t\r\n\t}\r\n\r\n\r\n\t/*==============================\r\n    =          RESTRICTED          =\r\n    ==============================*/  \t\r\n\r\n//-------o 01 - Add Contract Address\t\r\n    function AddContractAddress(address tokenAddress, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _TokenDecimal) public restricted {\r\n\t\t\r\n\t\tuint256 decimalsmultipler\t= ( 10 ** _TokenDecimal );\r\n\t\tuint256 maxlimit\t\t\t= mul(10000000, decimalsmultipler); \t// >= 10,000,000 Token\r\n\t\t\r\n\t\trequire(_maxcontribution >= maxlimit);\t\r\n\t\trequire(_PercentPermonth >= 2 && _PercentPermonth <= 12);\r\n\t\t\r\n\t\tBigdata[tokenAddress][1] \t\t= _PercentPermonth;\t\t\t\t\t\t\t// [1] Percent (Monthly Unlocked tokens)\r\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\r\n\t\tBigdata[tokenAddress][5] \t\t= _maxcontribution;\t\t\t\t\t\t\t// [5] Max Contribution \r\n\t\t\r\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, _PercentPermonth), 30);\r\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\r\n\t\tBigdata[tokenAddress][2]\t\t= HodlTime;\t\t\t\t\t\t\t\t\t// [2] Holding Time (in seconds) \t\r\n\t\t\r\n\t\tif (Bigdata[tokenAddress][21]  == 0  ) { Bigdata[tokenAddress][21]  = _TokenDecimal; }\t// [21] Token Decimal\r\n\t\t\r\n\t\tcontractaddress[tokenAddress] \t= true;\r\n\t\t\r\n\t\temit onAddContract(msg.sender, tokenAddress, _PercentPermonth, _ContractSymbol, _maxcontribution, now);\r\n    }\r\n\t\r\n//-------o 02 - Update Token Price (USD)\r\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ETHprice, uint256 ATHprice, uint256 ATLprice, uint256 ICOprice, uint256 Aprice ) public restricted  {\r\n\t\t\r\n\t\tif (Currentprice > 0  ) { Bigdata[tokenAddress][14] = Currentprice; }\t\t// [14] Current Price (USD)\r\n\t\tif (ATHprice > 0  ) \t{ Bigdata[tokenAddress][15] = ATHprice; }\t\t\t// [15] All Time High (ETH) \r\n\t\tif (ATLprice > 0  ) \t{ Bigdata[tokenAddress][16] = ATLprice; }\t\t\t// [16] All Time Low (ETH) \r\n\t\tif (ETHprice > 0  ) \t{ Bigdata[tokenAddress][17] = ETHprice; }\t\t\t// [17] Current ETH Price (ETH) \r\n\t\tif (ICOprice > 0  ) \t{ Bigdata[tokenAddress][20] = ICOprice; }\t\t\t// [20] ICO Price (ETH) \r\n\t\tif (Aprice > 0  ) \t\t{ Bigdata[tokenAddress][22] = Aprice; }\t\t\t\t// [22] Additional Price\r\n\t\t\t\r\n\t\temit onTokenPrice(msg.sender, tokenAddress, Currentprice, ETHprice, ATHprice, ATLprice, ICOprice, Aprice, now);\r\n\r\n    }\r\n\t\r\n//-------o 03 - Hold Platform\r\n    function Holdplatform_Airdrop(address tokenAddress, uint256 HPM_status, uint256 HPM_divider1, uint256 HPM_divider2, uint256 HPM_divider3 ) public restricted {\r\n\t\t\r\n\t\t//require(HPM_divider1 >= 1000 && HPM_divider1 >= 1000 && HPM_divider1 >= 1000);\r\n\t\t\r\n\t\tHoldplatform_status[tokenAddress] \t\t= HPM_status;\t\r\n\t\tHoldplatform_divider[tokenAddress][1]\t= HPM_divider1; \t\t// [1] Hold Airdrop\t\r\n\t\tHoldplatform_divider[tokenAddress][2]\t= HPM_divider2; \t\t// [2] Unhold Airdrop\r\n\t\tHoldplatform_divider[tokenAddress][3]\t= HPM_divider3; \t\t// [3] Affiliate Airdrop\r\n\t\t\r\n\t\temit onHoldAirdrop(msg.sender, tokenAddress, HPM_status, HPM_divider1, HPM_divider2, HPM_divider3, now);\r\n\t\r\n    }\t\r\n\t//--o Deposit\r\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\r\n        \r\n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \r\n        require(token.transferFrom(msg.sender, address(this), amount));\r\n\t\t\r\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\r\n\t\tHoldplatform_balance \t= newbalance;\r\n\t\t\r\n\t\temit onHoldDeposit(msg.sender, Holdplatform_address, amount, now);\r\n    }\r\n\t//--o Withdraw\r\n\tfunction Holdplatform_Withdraw() restricted public {\r\n\t\tERC20Interface token = ERC20Interface(Holdplatform_address);\r\n        token.transfer(msg.sender, Holdplatform_balance);\r\n\t\tHoldplatform_balance = 0;\r\n\t\t\r\n\t\temit onHoldWithdraw(msg.sender, Holdplatform_address, Holdplatform_balance, now);\r\n    }\r\n\t\r\n//-------o 04 - Utility Function\r\n\r\n\t//--o Utility Address\r\n\tfunction Utility_Address(address tokenAddress) public restricted {\r\n\t\t\r\n\t\tif (Utility_address == 0x0000000000000000000000000000000000000000) {  Utility_address = tokenAddress; } else { revert(); }\t\r\n\t\t\r\n\t\t// Only valid for a onetime update, cannot be changed!\r\n\t\t\r\n    }\r\n\r\n\t//--o Setting\r\n\tfunction Utility_Setting(address tokenAddress, address _U_paywithtoken, uint256 _U_amount, uint256 _U_status) public restricted {\r\n\t\t\r\n\t\tuint256 decimal \t\t\t= Bigdata[_U_paywithtoken][21];\r\n\t\tuint256 decimalmultipler\t= ( 10 ** decimal );\r\n\t\tuint256 maxfee\t\t\t\t= mul(10000, decimalmultipler);\t// <= 10.000 Token\r\n\t\t\r\n\t\trequire(_U_amount <= maxfee ); \r\n\t\trequire(_U_status == 0 || _U_status == 1 || _U_status == 2);\t// 0 = Disabled , 1 = Enabled, 2 = Merger with Hold\t\r\n\t\t\r\n\t\trequire(_U_paywithtoken != 0x0000000000000000000000000000000000000000); \r\n\t\trequire(_U_paywithtoken == tokenAddress || _U_paywithtoken == Utility_address); \r\n\t\t\r\n\t\tU_paywithtoken[tokenAddress]\t= _U_paywithtoken; \r\n\t\tU_status[tokenAddress] \t\t\t= _U_status;\t\r\n\t\tU_amount[tokenAddress]\t\t\t= _U_amount; \t\r\n\r\n\temit onUtilitySetting(msg.sender, tokenAddress, _U_paywithtoken, _U_amount, _U_status, now);\t\r\n\t\r\n    }\r\n\t//--o Status\r\n\tfunction Utility_Status(address tokenAddress, uint256 Newstatus) public restricted {\r\n\t\trequire(Newstatus == 0 || Newstatus == 1 || Newstatus == 2);\r\n\t\t\r\n\t\taddress upwt\t= U_paywithtoken[tokenAddress];\r\n\t\trequire(upwt != 0x0000000000000000000000000000000000000000);\r\n\t\t\r\n\t\tU_status[tokenAddress] = Newstatus;\r\n\t\t\r\n\t\temit onUtilityStatus(msg.sender, tokenAddress, U_status[tokenAddress], now);\r\n\t\t\r\n    }\r\n\t//--o Burn\r\n\tfunction Utility_Burn(address tokenAddress) public restricted {\r\n\t\t\r\n\t\tif (U_statistics[tokenAddress][1] > 0 || U_statistics[tokenAddress][3] > 0) { \r\n\t\t\r\n\t\tuint256 utilityamount \t\t= U_statistics[tokenAddress][1];\t\t\t\t\t// [1] Utility Vault\r\n\t\tuint256 burnamount \t\t\t= U_statistics[tokenAddress][3]; \t\t\t\t\t// [3] Utility Burn\r\n\t\t\r\n\t\tuint256 fee \t\t\t\t= add(utilityamount, burnamount);\r\n\t\t\r\n\t\tERC20Interface token \t= ERC20Interface(tokenAddress);      \r\n        require(token.balanceOf(address(this)) >= fee);\r\n\t\t\r\n\t\tBigdata[tokenAddress][3]\t\t= sub(Bigdata[tokenAddress][3], fee); \r\n\t\tBigdata[tokenAddress][7]\t\t= add(Bigdata[tokenAddress][7], fee); \t\t\r\n\t\t\t\r\n\t\ttoken.transfer(EthereumNodes, utilityamount);\r\n\t\tU_statistics[tokenAddress][1] \t= 0;\t\t\t\t\t\t\t\t\t\t\t// [1] Utility Vault\r\n\t\t\r\n\t\ttoken.transfer(0x000000000000000000000000000000000000dEaD, burnamount);\r\n\t\tBigdata[tokenAddress][4]\t\t= add(burnamount, Bigdata[tokenAddress][4]);\t// [4] Total Burn\r\n\t\tU_statistics[tokenAddress][3] \t= 0;\r\n\r\n\t\temit onUtilityBurn(msg.sender, tokenAddress, utilityamount, burnamount, now);\t\t\r\n\r\n\t\t}\r\n    }\r\n\t\r\n\t\r\n\t/*==============================\r\n    =      SAFE MATH FUNCTIONS     =\r\n    ==============================*/  \t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}\r\n\r\n\r\n\t/*==============================\r\n    =        ERC20 Interface       =\r\n    ==============================*/ \r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetTotalAffiliate\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ContractSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bigdata\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"Currentprice\",\"type\":\"uint256\"},{\"name\":\"ETHprice\",\"type\":\"uint256\"},{\"name\":\"ATHprice\",\"type\":\"uint256\"},{\"name\":\"ATLprice\",\"type\":\"uint256\"},{\"name\":\"ICOprice\",\"type\":\"uint256\"},{\"name\":\"Aprice\",\"type\":\"uint256\"}],\"name\":\"TokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Statistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Utility_fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Unlocktoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetEthereumNodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"U_statistics\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"WithdrawAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"GetSafe\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"endtime\",\"type\":\"uint256\"},{\"name\":\"tokendecimal\",\"type\":\"uint256\"},{\"name\":\"amountbalance\",\"type\":\"uint256\"},{\"name\":\"cashbackbalance\",\"type\":\"uint256\"},{\"name\":\"lasttime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"},{\"name\":\"percentagereceive\",\"type\":\"uint256\"},{\"name\":\"tokenreceive\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"U_userstatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cashbackcode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cashbackcode\",\"type\":\"address\"}],\"name\":\"CashbackCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"U_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"afflist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"U_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_maxcontribution\",\"type\":\"uint256\"},{\"name\":\"_ContractSymbol\",\"type\":\"string\"},{\"name\":\"_PercentPermonth\",\"type\":\"uint256\"},{\"name\":\"_TokenDecimal\",\"type\":\"uint256\"}],\"name\":\"AddContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tothemoon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Holdplatform_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"U_paywithtoken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hodler\",\"type\":\"address\"}],\"name\":\"GetUserSafesLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"starttime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"HPM_status\",\"type\":\"uint256\"},{\"name\":\"HPM_divider1\",\"type\":\"uint256\"},{\"name\":\"HPM_divider2\",\"type\":\"uint256\"},{\"name\":\"HPM_divider3\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_Airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Utility_Burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_U_paywithtoken\",\"type\":\"address\"},{\"name\":\"_U_amount\",\"type\":\"uint256\"},{\"name\":\"_U_status\",\"type\":\"uint256\"}],\"name\":\"Utility_Setting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Holdplatform_Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"Newstatus\",\"type\":\"uint256\"}],\"name\":\"Utility_Status\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Utility_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdplatform_status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Holdplatform_divider\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Utility_Address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cashbackcode\",\"type\":\"address\"}],\"name\":\"onCashbackCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAffiliateBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHoldplatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onUnlocktoken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"decimal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onUtilityfee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"datetime\",\"type\":\"uint256\"}],\"name\":\"onReceiveAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onAddContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"Currentprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ETHprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ATHprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ATLprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ICOprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Aprice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"HPMstatus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"d1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"d2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"d3\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHoldAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHoldDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onHoldWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pwt\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ustatus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onUtilitySetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ustatus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onUtilityStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"hodler\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"uamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endtime\",\"type\":\"uint256\"}],\"name\":\"onUtilityBurn\",\"type\":\"event\"}]", "ContractName": "HoldPlatformDapps", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5cd92e803863cc861f730158834dca1d1be57e6aae90349394018e604b866368"}