{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IORChallengeSpv.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IORChallengeSpv {\\n    struct VerifyInfoSlot {\\n        address account; // Contract address\\n        bytes32 key;\\n        uint value;\\n    }\\n\\n    struct VerifyInfo {\\n        uint[] data;\\n        VerifyInfoSlot[] slots;\\n    }\\n\\n    function verifyChallenge(\\n        bytes calldata proof,\\n        bytes32[2] calldata spvBlockHashs,\\n        bytes32 verifyInfoHash\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOREventBinding.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {RuleLib} from \\\"../library/RuleLib.sol\\\";\\n\\ninterface IOREventBinding {\\n    struct AmountParams {\\n        uint dealerIndex;\\n        uint ebcIndex;\\n        uint chainIdIndex;\\n    }\\n\\n    function getSecurityCode(uint amount) external pure returns (uint);\\n\\n    function splitSecurityCode(uint securityCode) external pure returns (uint[] memory);\\n\\n    function getAmountParams(uint amount) external pure returns (AmountParams memory);\\n\\n    function getResponseIntent(uint amount, RuleLib.RuleOneway calldata ro) external pure returns (bytes memory);\\n\\n    function getResponseAmountFromIntent(bytes calldata intent) external pure returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IORMakerDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IORChallengeSpv} from \\\"./IORChallengeSpv.sol\\\";\\nimport {BridgeLib} from \\\"../library/BridgeLib.sol\\\";\\nimport {RuleLib} from \\\"../library/RuleLib.sol\\\";\\n\\ninterface IORMakerDeposit {\\n    struct ChallengeInfo {\\n        uint sourceTxFrom; // From of the source tx. Uint to support other networks\\n        uint64 sourceTxTime; // Timestamp of the source tx\\n        address challenger; // Challenger\\n        address freezeToken; // Freeze token on L1\\n        uint64 challengeUserRatio; // Manager's _challengeUserRatio\\n        uint freezeAmount0; // Owner's freeze amount\\n        uint freezeAmount1; // Challenger's freeze amount\\n        uint64 challengeTime; // Time of challenge\\n        uint64 abortTime; // Time of abort caused by checkChallenge\\n        uint64 verifiedTime0; // Time of verifyChallengeSource. Greater than 0 means verification passed\\n        uint64 verifiedTime1; // Time of verifyChallengeDest. Greater than 0 means verification passed\\n        bytes32 verifiedDataHash0; // Data's hash of verifyChallengeSource\\n    }\\n\\n    event ColumnArrayUpdated(\\n        address indexed impl,\\n        bytes32 columnArrayHash,\\n        address[] dealers,\\n        address[] ebcs,\\n        uint64[] chainIds\\n    );\\n    event SpvUpdated(address indexed impl, uint64 chainId, address spv);\\n    event ResponseMakersUpdated(address indexed impl, uint[] responseMakers);\\n    event RulesRootUpdated(address indexed impl, address ebc, RuleLib.RootWithVersion rootWithVersion);\\n    event ChallengeInfoUpdated(bytes32 indexed challengeId, ChallengeInfo challengeInfo);\\n\\n    function initialize(address owner_) external;\\n\\n    function owner() external view returns (address);\\n\\n    function mdcFactory() external view returns (address);\\n\\n    function columnArrayHash() external view returns (bytes32);\\n\\n    function updateColumnArray(\\n        uint64 enableTime,\\n        address[] calldata dealers,\\n        address[] calldata ebcs,\\n        uint64[] calldata chainIds\\n    ) external;\\n\\n    function spv(uint64 chainId) external view returns (address);\\n\\n    function updateSpvs(uint64 enableTime, address[] calldata spvs, uint64[] calldata chainIds) external;\\n\\n    function responseMakersHash() external view returns (bytes32);\\n\\n    function updateResponseMakers(uint64 enableTime, bytes[] calldata responseMakerSignatures) external;\\n\\n    function freezeAssets(address token) external view returns (uint);\\n\\n    function deposit(address token, uint amount) external payable;\\n\\n    function withdraw(address token, uint amount) external;\\n\\n    function rulesRoot(address ebc) external view returns (RuleLib.RootWithVersion memory);\\n\\n    function updateRulesRoot(\\n        uint64 enableTime,\\n        address ebc,\\n        RuleLib.Rule[] calldata rules,\\n        RuleLib.RootWithVersion calldata rootWithVersion,\\n        uint64[] calldata sourceChainIds,\\n        uint[] calldata pledgeAmounts\\n    ) external payable;\\n\\n    function updateRulesRootERC20(\\n        uint64 enableTime,\\n        address ebc,\\n        RuleLib.Rule[] calldata rules,\\n        RuleLib.RootWithVersion calldata rootWithVersion,\\n        uint64[] calldata sourceChainIds,\\n        uint[] calldata pledgeAmounts,\\n        address token\\n    ) external;\\n\\n    // function challenge(\\n    //     uint64 sourceChainId,\\n    //     bytes32 sourceTxHash,\\n    //     uint64 sourceTxTime,\\n    //     address freezeToken,\\n    //     uint freezeAmount1\\n    // ) external payable;\\n\\n    // function checkChallenge(uint64 sourceChainId, bytes32 sourceTxHash, uint[] calldata verifiedData0) external;\\n\\n    // function verifyChallengeSource(\\n    //     address spvAddress,\\n    //     bytes calldata proof,\\n    //     bytes32[2] calldata spvBlockHashs,\\n    //     IORChallengeSpv.VerifyInfo calldata verifyInfo,\\n    //     bytes calldata rawDatas\\n    // ) external;\\n\\n    // function verifyChallengeDest(\\n    //     address spvAddress,\\n    //     bytes calldata proof,\\n    //     bytes32[2] calldata spvBlockHashs,\\n    //     IORChallengeSpv.VerifyInfo calldata verifyInfo,\\n    //     uint[] calldata verifiedData0,\\n    //     bytes calldata rawDatas\\n    // ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IORManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {BridgeLib} from \\\"../library/BridgeLib.sol\\\";\\n\\ninterface IORManager {\\n    event ChainInfoUpdated(uint64 indexed id, BridgeLib.ChainInfo chainInfo);\\n    event ChainTokenUpdated(uint64 indexed id, BridgeLib.TokenInfo tokenInfo);\\n    event EbcsUpdated(address[] ebcs, bool[] statuses);\\n    event SubmitterFeeUpdated(address submitter);\\n    event ProtocolFeeUpdated(uint64 protocolFee);\\n    event MinChallengeRatioUpdated(uint64 minChallengeRatio);\\n    event ChallengeUserRatioUpdated(uint64 challengeUserRatio);\\n    event FeeChallengeSecondUpdated(uint64 feeChallengeSecond);\\n    event FeeTakeOnChallengeSecondUpdated(uint64 feeTakeOnChallengeSecond);\\n    event MaxMDCLimitUpdated(uint64 maxMDCLimit);\\n    event ExtraTransferContractsUpdated(uint64[] chainIds, uint[] extraTransferContracts);\\n\\n    function registerChains(uint64 enableTime, BridgeLib.ChainInfo[] calldata chains_) external;\\n\\n    function updateChainSpvs(uint64 enableTime, uint64 id, address[] calldata spvs, uint[] calldata indexs) external;\\n\\n    function getChainInfo(uint64 id) external view returns (BridgeLib.ChainInfo memory);\\n\\n    function updateChainTokens(\\n        uint64 enableTime,\\n        uint64[] memory ids,\\n        BridgeLib.TokenInfo[] calldata tokenInfos\\n    ) external;\\n\\n    function getChainTokenInfo(uint64 id, uint token) external view returns (BridgeLib.TokenInfo memory);\\n\\n    function ebcIncludes(address ebc) external view returns (bool);\\n\\n    function updateEbcs(address[] calldata ebcs_, bool[] calldata statuses) external;\\n\\n    function submitter() external view returns (address);\\n\\n    function updateSubmitter(uint64 enableTime, address submitter_) external;\\n\\n    function protocolFee() external view returns (uint64);\\n\\n    function updateProtocolFee(uint64 enableTime, uint64 protocolFee_) external;\\n\\n    function minChallengeRatio() external view returns (uint64);\\n\\n    function updateMinChallengeRatio(uint64 enableTime, uint64 minChallengeRatio_) external;\\n\\n    function challengeUserRatio() external view returns (uint64);\\n\\n    function updateChallengeUserRatio(uint64 enableTime, uint64 challengeUserRatio_) external;\\n\\n    function feeChallengeSecond() external view returns (uint64);\\n\\n    function updateFeeChallengeSecond(uint64 enableTime, uint64 feeChallengeSecond_) external;\\n\\n    function feeTakeOnChallengeSecond() external view returns (uint64);\\n\\n    function updateFeeTakeOnChallengeSecond(uint64 enableTime, uint64 feeTakeOnChallengeSecond_) external;\\n\\n    function maxMDCLimit() external view returns (uint64);\\n\\n    function updateMaxMDCLimit(uint64 maxMDCLimit_) external;\\n\\n    function getExtraTransferContract(uint64 chainId) external view returns (uint);\\n\\n    function updateExtraTransferContracts(\\n        uint64 enableTime,\\n        uint64[] calldata chainIds,\\n        uint[] calldata extraTransferContracts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IORMDCFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport \\\"./IORManager.sol\\\";\\n\\ninterface IORMDCFactory {\\n    event MDCCreated(address maker, address mdc);\\n\\n    function manager() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function mdcCreatedTotal() external view returns (uint);\\n\\n    function createMDC() external;\\n\\n    function predictMDCAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/library/BridgeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BridgeLib {\\n    struct TokenInfo {\\n        uint token; // uint160(address) will overflow in the token used for starknet\\n        address mainnetToken;\\n        uint8 decimals;\\n    }\\n\\n    struct ChainInfo {\\n        uint64 id;\\n        uint192 batchLimit;\\n        uint64 minVerifyChallengeSourceTxSecond;\\n        uint64 maxVerifyChallengeSourceTxSecond;\\n        uint64 minVerifyChallengeDestTxSecond;\\n        uint64 maxVerifyChallengeDestTxSecond;\\n        uint nativeToken;\\n        address[] spvs;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/ConstantsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary ConstantsLib {\\n    uint constant RATIO_MULTIPLE = 1000000;\\n\\n    uint constant MIN_ENABLE_DELAY = 120; // Unit: second\\n\\n    uint constant DEALER_WITHDRAW_DELAY = 3600; // Unit: second\\n\\n    uint constant WITHDRAW_DURATION = 3360; // Unit: second\\n\\n    uint constant LOCK_DURATION = 240; // Unit: second\\n    // uint constant DEALER_WITHDRAW_DELAY = 30; // Unit: second for test off-chain\\n\\n    // uint constant WITHDRAW_DURATION = 300; // Unit: second for test off-chain\\n\\n    // uint constant LOCK_DURATION = 180; // Unit: second for test off-chain\\n\\n    uint constant EBC_AMOUNT_PARAMS_MODULUS = 10000;\\n}\\n\"\r\n    },\r\n    \"contracts/library/HelperLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nlibrary HelperLib {\\n    function hash(bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(data);\\n    }\\n\\n    function includes(uint[] memory arr, uint element) internal pure returns (bool) {\\n        for (uint i = 0; i < arr.length; ) {\\n            if (element == arr[i]) {\\n                return true;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function arrayIncludes(uint[] memory arr, uint[] memory elements) internal pure returns (bool) {\\n        for (uint i = 0; i < elements.length; i++) {\\n            bool ic = false;\\n            for (uint j = 0; j < arr.length; ) {\\n                if (elements[i] == arr[j]) {\\n                    ic = true;\\n                    break;\\n                }\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            if (!ic) return false;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function includes(address[] memory arr, address element) internal pure returns (bool) {\\n        for (uint i = 0; i < arr.length; ) {\\n            if (element == arr[i]) {\\n                return true;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function arrayIncludes(address[] memory arr, address[] memory elements) internal pure returns (bool) {\\n        for (uint i = 0; i < elements.length; i++) {\\n            bool ic = false;\\n            for (uint j = 0; j < arr.length; ) {\\n                if (elements[i] == arr[j]) {\\n                    ic = true;\\n                    break;\\n                }\\n                unchecked {\\n                    j++;\\n                }\\n            }\\n\\n            if (!ic) return false;\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/RuleLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {ConstantsLib} from \\\"./ConstantsLib.sol\\\";\\n\\nlibrary RuleLib {\\n    struct Rule {\\n        uint64 chainId0; // 59144\\n        uint64 chainId1; // 10\\n        uint8 status0;\\n        uint8 status1;\\n        uint token0;\\n        uint token1;\\n        uint128 minPrice0;\\n        uint128 minPrice1;\\n        uint128 maxPrice0;\\n        uint128 maxPrice1;\\n        uint128 withholdingFee0;\\n        uint128 withholdingFee1;\\n        uint32 tradingFee0;\\n        uint32 tradingFee1;\\n        uint32 responseTime0;\\n        uint32 responseTime1;\\n        uint32 compensationRatio0;\\n        uint32 compensationRatio1;\\n    }\\n\\n    struct RootWithVersion {\\n        bytes32 root;\\n        uint32 version;\\n    }\\n\\n    struct RuleOneway {\\n        uint64 sourceChainId;\\n        uint64 destChainId;\\n        uint8 status;\\n        uint sourceToken;\\n        uint destToken;\\n        uint128 minPrice;\\n        uint128 maxPrice;\\n        uint128 withholdingFee;\\n        uint32 tradingFee;\\n        uint32 responseTime;\\n        uint32 compensationRatio;\\n    }\\n\\n    function checkChainIds(uint64 chainId0, uint64 chainId1) internal pure {\\n        require(chainId0 < chainId1, \\\"C0LC1\\\");\\n    }\\n\\n    function checkWithholdingFees(uint128 withholdingFee0, uint128 withholdingFee1) internal pure {\\n        require(withholdingFee0 % ConstantsLib.EBC_AMOUNT_PARAMS_MODULUS == 0, \\\"WFI0\\\");\\n        require(withholdingFee1 % ConstantsLib.EBC_AMOUNT_PARAMS_MODULUS == 0, \\\"WFI1\\\");\\n    }\\n\\n    function convertToOneway(\\n        Rule memory rule,\\n        uint64 sourceChainId\\n    ) internal pure returns (RuleOneway memory ruleOneway) {\\n        require(sourceChainId == rule.chainId0 || sourceChainId == rule.chainId1, \\\"SCI\\\");\\n\\n        if (sourceChainId == rule.chainId0) {\\n            return\\n                RuleOneway(\\n                    rule.chainId0,\\n                    rule.chainId1,\\n                    rule.status0,\\n                    rule.token0,\\n                    rule.token1,\\n                    rule.minPrice0,\\n                    rule.maxPrice0,\\n                    rule.withholdingFee0,\\n                    rule.tradingFee0,\\n                    rule.responseTime0,\\n                    rule.compensationRatio0\\n                );\\n        } else {\\n            return\\n                RuleOneway(\\n                    rule.chainId1,\\n                    rule.chainId0,\\n                    rule.status1,\\n                    rule.token1,\\n                    rule.token0,\\n                    rule.minPrice1,\\n                    rule.maxPrice1,\\n                    rule.withholdingFee1,\\n                    rule.tradingFee1,\\n                    rule.responseTime1,\\n                    rule.compensationRatio1\\n                );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ORMakerDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IORMakerDeposit} from \\\"./interface/IORMakerDeposit.sol\\\";\\nimport {IORManager} from \\\"./interface/IORManager.sol\\\";\\nimport {IORMDCFactory} from \\\"./interface/IORMDCFactory.sol\\\";\\nimport {IORChallengeSpv} from \\\"./interface/IORChallengeSpv.sol\\\";\\nimport {IOREventBinding} from \\\"./interface/IOREventBinding.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {HelperLib} from \\\"./library/HelperLib.sol\\\";\\nimport {RuleLib} from \\\"./library/RuleLib.sol\\\";\\nimport {ConstantsLib} from \\\"./library/ConstantsLib.sol\\\";\\nimport {BridgeLib} from \\\"./library/BridgeLib.sol\\\";\\nimport {VersionAndEnableTime} from \\\"./VersionAndEnableTime.sol\\\";\\n\\ncontract ORMakerDeposit is IORMakerDeposit, VersionAndEnableTime {\\n    using HelperLib for uint[];\\n    using HelperLib for address[];\\n    using HelperLib for bytes;\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    // VersionAndEnableTime._version and _enableTime use a slot\\n\\n    // Warning: the following order and type changes will cause state verification changes\\n    address private _owner;\\n    IORMDCFactory private _mdcFactory;\\n    bytes32 private _columnArrayHash;\\n    mapping(uint64 => address) private _spvs; // chainId => spvAddress\\n    bytes32 private _responseMakersHash; // hash(response maker list), not just owner, to improve tps\\n    mapping(address => RuleLib.RootWithVersion) private _rulesRoots; // ebc => merkleRoot(rules), version\\n    mapping(bytes32 => uint) private _pledgeBalances; // hash(ebc, sourceChainId, sourceToken) => pledgeBalance\\n    mapping(address => uint) private _freezeAssets; // token(ETH: 0) => freezeAmount\\n    mapping(bytes32 => ChallengeInfo) private _challenges; // hash(sourceChainId, transactionHash) => ChallengeInfo\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function initialize(address owner_) external {\\n        require(_owner == address(0), \\\"_ONZ\\\");\\n        require(owner_ != address(0), \\\"OZ\\\");\\n\\n        _owner = owner_;\\n        _mdcFactory = IORMDCFactory(msg.sender);\\n    }\\n\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    function mdcFactory() external view returns (address) {\\n        return address(_mdcFactory);\\n    }\\n\\n    function columnArrayHash() external view returns (bytes32) {\\n        return _columnArrayHash;\\n    }\\n\\n    function updateColumnArray(\\n        uint64 enableTime,\\n        address[] calldata dealers,\\n        address[] calldata ebcs,\\n        uint64[] calldata chainIds\\n    ) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        require(dealers.length < 100 && ebcs.length < 10 && chainIds.length < 100, \\\"DECOF\\\");\\n\\n        IORManager manager = IORManager(_mdcFactory.manager());\\n        for (uint i = 0; i < ebcs.length; ) {\\n            require(manager.ebcIncludes(ebcs[i]), \\\"EI\\\"); // Has invalid ebc\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        for (uint i = 0; i < chainIds.length; ) {\\n            BridgeLib.ChainInfo memory chainInfo = manager.getChainInfo(chainIds[i]);\\n            require(chainInfo.id > 0, \\\"CI\\\"); // Invalid chainId\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        _columnArrayHash = abi.encodePacked(dealers, ebcs, chainIds).hash();\\n        emit ColumnArrayUpdated(_mdcFactory.implementation(), _columnArrayHash, dealers, ebcs, chainIds);\\n    }\\n\\n    function spv(uint64 chainId) external view returns (address) {\\n        return _spvs[chainId];\\n    }\\n\\n    function updateSpvs(uint64 enableTime, address[] calldata spvs, uint64[] calldata chainIds) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        IORManager manager = IORManager(_mdcFactory.manager());\\n        address impl = _mdcFactory.implementation();\\n\\n        for (uint i = 0; i < chainIds.length; i++) {\\n            BridgeLib.ChainInfo memory chainInfo = manager.getChainInfo(chainIds[i]);\\n            require(chainInfo.id > 0, \\\"CI\\\"); // Invalid chainId\\n            require(chainInfo.spvs.includes(spvs[i]), \\\"SI\\\"); // Invalid spv\\n\\n            _spvs[chainIds[i]] = spvs[i];\\n\\n            emit SpvUpdated(impl, chainIds[i], spvs[i]);\\n        }\\n    }\\n\\n    function responseMakersHash() external view returns (bytes32) {\\n        return _responseMakersHash;\\n    }\\n\\n    function updateResponseMakers(uint64 enableTime, bytes[] calldata responseMakerSignatures) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        bytes32 data = abi.encode(address(this)).hash();\\n\\n        uint[] memory responseMakers_ = new uint[](responseMakerSignatures.length);\\n        for (uint i = 0; i < responseMakerSignatures.length; i++) {\\n            responseMakers_[i] = uint(uint160(data.toEthSignedMessageHash().recover(responseMakerSignatures[i])));\\n        }\\n\\n        _responseMakersHash = abi.encode(responseMakers_).hash();\\n        emit ResponseMakersUpdated(_mdcFactory.implementation(), responseMakers_);\\n    }\\n\\n    function freezeAssets(address token) external view returns (uint) {\\n        return _freezeAssets[token];\\n    }\\n\\n    function deposit(address token, uint amount) external payable {\\n        // TODO: This method is useless if it does not need to throw an event\\n        // ETH received by default\\n        // ERC20 calls safeTransferFrom, can also call `transfer` send assets to address(this)\\n        if (token != address(0)) {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function withdraw(address token, uint amount) external onlyOwner {\\n        if (token == address(0)) {\\n            require(address(this).balance - _freezeAssets[token] >= amount, \\\"ETH: IF\\\");\\n\\n            (bool sent, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n            require(sent, \\\"ETH: SE\\\");\\n        } else {\\n            uint balance = IERC20(token).balanceOf(address(this));\\n            require(balance - _freezeAssets[token] >= amount, \\\"ERC20: IF\\\");\\n\\n            IERC20(token).safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function rulesRoot(address ebc) external view returns (RuleLib.RootWithVersion memory) {\\n        return _rulesRoots[ebc];\\n    }\\n\\n    function updateRulesRoot(\\n        uint64 enableTime,\\n        address ebc,\\n        RuleLib.Rule[] calldata rules,\\n        RuleLib.RootWithVersion calldata rootWithVersion,\\n        uint64[] calldata sourceChainIds,\\n        uint[] calldata pledgeAmounts\\n    ) external payable onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _updateRulesRoot(ebc, rules, rootWithVersion);\\n\\n        require(sourceChainIds.length == pledgeAmounts.length, \\\"SPL\\\");\\n\\n        uint increaseAmount;\\n        for (uint i = 0; i < sourceChainIds.length; ) {\\n            // TODO: Must save pledge amount by sourceChainId?\\n            //       Is it feasible to only by token?\\n            bytes32 k = abi.encode(ebc, sourceChainIds[i], address(0)).hash();\\n\\n            if (pledgeAmounts[i] > _pledgeBalances[k]) {\\n                uint _d = pledgeAmounts[i] - _pledgeBalances[k];\\n                increaseAmount += _d;\\n            }\\n\\n            _pledgeBalances[k] = pledgeAmounts[i];\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        require(increaseAmount <= msg.value, \\\"IV\\\"); // Insufficient value\\n    }\\n\\n    function updateRulesRootERC20(\\n        uint64 enableTime,\\n        address ebc,\\n        RuleLib.Rule[] calldata rules,\\n        RuleLib.RootWithVersion calldata rootWithVersion,\\n        uint64[] calldata sourceChainIds,\\n        uint[] calldata pledgeAmounts,\\n        address token\\n    ) external onlyOwner {\\n        versionIncreaseAndEnableTime(enableTime);\\n\\n        _updateRulesRoot(ebc, rules, rootWithVersion);\\n\\n        require(sourceChainIds.length == pledgeAmounts.length, \\\"SPL\\\");\\n\\n        for (uint i = 0; i < sourceChainIds.length; ) {\\n            bytes32 k = abi.encode(ebc, sourceChainIds[i], token).hash();\\n\\n            if (pledgeAmounts[i] > _pledgeBalances[k]) {\\n                IERC20(token).safeTransferFrom(msg.sender, address(this), pledgeAmounts[i] - _pledgeBalances[k]);\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function _updateRulesRoot(\\n        address ebc,\\n        RuleLib.Rule[] calldata rules,\\n        RuleLib.RootWithVersion calldata rootWithVersion\\n    ) private {\\n        for (uint i = 0; i < rules.length; ) {\\n            RuleLib.checkChainIds(rules[i].chainId0, rules[i].chainId1);\\n            RuleLib.checkWithholdingFees(rules[i].withholdingFee0, rules[i].withholdingFee1);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        IORManager manager = IORManager(_mdcFactory.manager());\\n        require(manager.ebcIncludes(ebc), \\\"EI\\\"); // Invalid ebc\\n\\n        require(rootWithVersion.root != bytes32(0), \\\"RZ\\\");\\n        unchecked {\\n            require(_rulesRoots[ebc].version + 1 == rootWithVersion.version, \\\"VE\\\");\\n        }\\n\\n        _rulesRoots[ebc] = rootWithVersion;\\n\\n        emit RulesRootUpdated(_mdcFactory.implementation(), ebc, rootWithVersion);\\n    }\\n\\n    // function challenge(\\n    //     uint64 sourceChainId,\\n    //     bytes32 sourceTxHash,\\n    //     uint64 sourceTxTime,\\n    //     address freezeToken,\\n    //     uint freezeAmount1\\n    // ) external payable {\\n    //     bytes32 challengeId = abi.encodePacked(sourceChainId, sourceTxHash).hash();\\n    //     require(_challenges[challengeId].challengeTime == 0, \\\"CE\\\");\\n\\n    //     // Make sure the source timestamp is before the challenge\\n    //     require(uint64(block.timestamp) >= sourceTxTime, \\\"STOF\\\");\\n\\n    //     if (freezeToken == address(0)) {\\n    //         require(freezeAmount1 == msg.value, \\\"IF\\\");\\n    //     } else {\\n    //         IERC20(freezeToken).safeTransferFrom(msg.sender, address(this), freezeAmount1);\\n    //     }\\n\\n    //     // TODO: Currently it is assumed that the pledged assets of the challenger and the owner are the same\\n    //     uint freezeAmount0 = freezeAmount1;\\n\\n    //     // Freeze mdc's owner assets and the assets in of challenger\\n    //     _freezeAssets[freezeToken] += freezeAmount0 + freezeAmount1;\\n\\n    //     _challenges[challengeId] = ChallengeInfo(\\n    //         sourceTxTime,\\n    //         0,\\n    //         msg.sender,\\n    //         freezeToken,\\n    //         0,\\n    //         freezeAmount0,\\n    //         freezeAmount1,\\n    //         uint64(block.timestamp),\\n    //         0,\\n    //         0,\\n    //         0,\\n    //         0\\n    //     );\\n\\n    //     emit ChallengeInfoUpdated(challengeId, _challenges[challengeId]);\\n    // }\\n\\n    // function checkChallenge(uint64 sourceChainId, bytes32 sourceTxHash, uint[] calldata verifiedData0) external {\\n    //     bytes32 challengeId = abi.encodePacked(uint64(sourceChainId), sourceTxHash).hash();\\n    //     ChallengeInfo memory challengeInfo = _challenges[challengeId];\\n\\n    //     // Make sure the challenge exists\\n    //     require(challengeInfo.challengeTime > 0, \\\"CNE\\\");\\n\\n    //     // Make sure verifyChallengeDest is not done yet\\n    //     require(challengeInfo.verifiedTime1 == 0, \\\"VT1NZ\\\");\\n\\n    //     IORManager manager = IORManager(_mdcFactory.manager());\\n\\n    //     if (challengeInfo.verifiedTime0 == 0) {\\n    //         BridgeLib.ChainInfo memory chainInfo = manager.getChainInfo(sourceChainId);\\n\\n    //         require(block.timestamp > chainInfo.maxVerifyChallengeSourceTxSecond + challengeInfo.sourceTxTime, \\\"VCST\\\");\\n\\n    //         _challengerFailed(challengeInfo);\\n    //     } else {\\n    //         // Ensure the correctness of verifiedData0\\n    //         require(abi.encode(verifiedData0).hash() == challengeInfo.verifiedDataHash0, \\\"VDH\\\");\\n\\n    //         BridgeLib.ChainInfo memory chainInfo = manager.getChainInfo(uint64(verifiedData0[0]));\\n    //         require(block.timestamp > chainInfo.maxVerifyChallengeDestTxSecond + challengeInfo.sourceTxTime, \\\"VCDT\\\");\\n\\n    //         _makerFailed(challengeInfo);\\n    //     }\\n    //     _challenges[challengeId].abortTime = uint64(block.timestamp);\\n\\n    //     emit ChallengeInfoUpdated(challengeId, _challenges[challengeId]);\\n    // }\\n\\n    // /**\\n    //  *\\n    //  * @param spvAddress The spv's address\\n    //  * @param proof The zk's proof\\n    //  * @param spvBlockHashs If the blocks of the state proof and tx proof are not in the same segment, need to verify the two blocks\\n    //  * @param verifyInfo The public inputs preimage for zk proofs\\n    //  *        verifyInfo.data: [chainId, txHash, from, to, token, amount, nonce, timestamp, ruleHash, dest, destToken]\\n    //  *        verifyInfo.slots: [...see code]\\n    //  * @param rawDatas The raw data list in preimage. [dealers, ebcs, chainIds, ebc, rule]\\n    //  */\\n    // function verifyChallengeSource(\\n    //     address spvAddress,\\n    //     bytes calldata proof,\\n    //     bytes32[2] calldata spvBlockHashs,\\n    //     IORChallengeSpv.VerifyInfo calldata verifyInfo,\\n    //     bytes calldata rawDatas\\n    // ) external {\\n    //     require(IORChallengeSpv(spvAddress).verifyChallenge(proof, spvBlockHashs, abi.encode(verifyInfo).hash()), \\\"VF\\\");\\n\\n    //     // Check chainId, hash, timestamp\\n    //     bytes32 challengeId = abi.encodePacked(uint64(verifyInfo.data[0]), verifyInfo.data[1]).hash();\\n    //     require(_challenges[challengeId].challengeTime > 0, \\\"CTZ\\\");\\n    //     require(_challenges[challengeId].verifiedTime0 == 0, \\\"VT0NZ\\\");\\n    //     require(uint64(verifyInfo.data[7]) == _challenges[challengeId].sourceTxTime, \\\"ST\\\");\\n\\n    //     // Check to address equal owner\\n    //     // TODO: Not compatible with starknet network\\n    //     require(uint160(verifyInfo.data[2]) == uint160(_owner), \\\"TNEO\\\");\\n\\n    //     // Parse rawDatas\\n    //     (\\n    //         address[] memory dealers,\\n    //         address[] memory ebcs,\\n    //         uint64[] memory chainIds,\\n    //         address ebc,\\n    //         RuleLib.Rule memory rule\\n    //     ) = abi.decode(rawDatas, (address[], address[], uint64[], address, RuleLib.Rule));\\n\\n    //     // Check manager's chainInfo.minVerifyChallengeSourceTxSecond,maxVerifyChallengeSourceTxSecond\\n    //     // Get minVerifyChallengeDestTxSecond, maxVerifyChallengeDestTxSecond\\n    //     {\\n    //         require(verifyInfo.slots[0].account == _mdcFactory.manager(), \\\"VCSTA\\\");\\n    //         uint slotK = uint(abi.encode(verifyInfo.data[0], 2).hash()); // abi.encode no need to convert type\\n    //         require(uint(verifyInfo.slots[0].key) == slotK + 1, \\\"VCSTK\\\");\\n\\n    //         uint timeDiff = block.timestamp - verifyInfo.data[7];\\n    //         require(timeDiff >= uint64(verifyInfo.slots[0].value), \\\"MINTOF\\\");\\n    //         require(timeDiff <= uint64(verifyInfo.slots[0].value >> 64), \\\"MAXTOF\\\");\\n    //     }\\n\\n    //     // Check freezeToken, freezeAmount\\n    //     {\\n    //         // FreezeToken\\n    //         require(verifyInfo.slots[1].account == _mdcFactory.manager(), \\\"FTA\\\");\\n    //         uint slotK = uint(\\n    //             abi.encode(abi.encodePacked(uint64(verifyInfo.data[0]), verifyInfo.data[4]).hash(), 3).hash()\\n    //         );\\n    //         require(uint(verifyInfo.slots[1].key) == slotK + 1, \\\"FTK\\\");\\n    //         require(_challenges[challengeId].freezeToken == address(uint160(verifyInfo.slots[1].value)), \\\"FTV\\\");\\n\\n    //         // FreezeAmount\\n    //         require(verifyInfo.slots[2].account == _mdcFactory.manager(), \\\"FAA\\\");\\n    //         require(uint(verifyInfo.slots[2].key) == 6, \\\"FAK\\\");\\n    //         uint64 _minChallengeRatio = uint64(verifyInfo.slots[2].value);\\n    //         require(\\n    //             _challenges[challengeId].freezeAmount1 >=\\n    //                 (verifyInfo.data[5] * _minChallengeRatio) / ConstantsLib.RATIO_MULTIPLE,\\n    //             \\\"FALV\\\"\\n    //         );\\n    //     }\\n\\n    //     // Check _columnArrayHash\\n    //     {\\n    //         bytes32 cah = abi.encodePacked(dealers, ebcs, chainIds).hash();\\n    //         require(verifyInfo.slots[3].account == address(this), \\\"CAHA\\\");\\n    //         require(uint(verifyInfo.slots[3].key) == 2, \\\"CAHK\\\");\\n    //         require(bytes32(verifyInfo.slots[3].value) == cah, \\\"CAHV\\\");\\n    //     }\\n\\n    //     // Check ebc address, destChainId\\n    //     uint destChainId;\\n    //     {\\n    //         IOREventBinding.AmountParams memory ap = IOREventBinding(ebc).getAmountParams(verifyInfo.data[5]);\\n    //         require(ebc == ebcs[ap.ebcIndex - 1], \\\"ENE\\\");\\n\\n    //         require(ap.chainIdIndex <= chainIds.length, \\\"COF\\\");\\n    //         destChainId = chainIds[ap.chainIdIndex - 1];\\n    //     }\\n\\n    //     // Check dest token\\n    //     {\\n    //         require(verifyInfo.slots[4].account == _mdcFactory.manager(), \\\"DTA\\\");\\n    //         uint slotK = uint(abi.encode(abi.encodePacked(uint64(destChainId), verifyInfo.data[10]).hash(), 3).hash());\\n    //         require(uint(verifyInfo.slots[4].key) == slotK + 1, \\\"DTK\\\");\\n\\n    //         // TODO: At present, freezeToken and mainnetToken remain the same, and may change later\\n    //         require(_challenges[challengeId].freezeToken == address(uint160(verifyInfo.slots[4].value)), \\\"DTV\\\");\\n    //     }\\n\\n    //     // Check _responseMakersHash\\n    //     {\\n    //         require(verifyInfo.slots[5].account == address(this), \\\"RMHA\\\");\\n    //         require(uint(verifyInfo.slots[5].key) == 5, \\\"RMHK\\\");\\n    //     }\\n\\n    //     // Check ruleRoot key and rule\\n    //     {\\n    //         // Sure rule root storage position\\n    //         // Warnning: In the circuit, it is necessary to ensure that the rule exists in the mpt\\n    //         require(verifyInfo.slots[6].account == address(this), \\\"RRA\\\");\\n    //         uint slotK = uint(abi.encode(ebc, 6).hash());\\n    //         require(uint(verifyInfo.slots[6].key) == slotK, \\\"RRK\\\");\\n\\n    //         // Rule\\n    //         require(uint(abi.encode(rule).hash()) == verifyInfo.data[8], \\\"RH\\\");\\n    //     }\\n\\n    //     // Calculate dest amount\\n    //     // TODO: Is there a more general solution. Not only amount\\n    //     RuleLib.RuleOneway memory ro = RuleLib.convertToOneway(rule, uint64(verifyInfo.data[0]));\\n    //     uint destAmount = IOREventBinding(ebc).getResponseAmountFromIntent(\\n    //         IOREventBinding(ebc).getResponseIntent(verifyInfo.data[5], ro)\\n    //     );\\n\\n    //     // Save tx'from address, and compensate tx'from on the mainnet when the maker failed\\n    //     _challenges[challengeId].sourceTxFrom = verifyInfo.data[7];\\n\\n    //     // Save manager._challengeUserRatio\\n    //     _challenges[challengeId].challengeUserRatio = uint64(verifyInfo.slots[2].value >> 64);\\n\\n    //     _challenges[challengeId].verifiedTime0 = uint64(block.timestamp);\\n\\n    //     // Save verified data's hash.\\n    //     // [minVerifyChallengeDestTxSecond, maxVerifyChallengeDestTxSecond, nonce, destChainId, destAddress, destToken, destAmount, responeMakersHash]\\n    //     _challenges[challengeId].verifiedDataHash0 = abi\\n    //         .encode(\\n    //             [\\n    //                 uint64(verifyInfo.slots[0].value >> 128),\\n    //                 uint64(verifyInfo.slots[0].value >> 128),\\n    //                 verifyInfo.data[0],\\n    //                 destChainId,\\n    //                 verifyInfo.data[9],\\n    //                 verifyInfo.data[10],\\n    //                 destAmount,\\n    //                 verifyInfo.slots[3].value\\n    //             ]\\n    //         )\\n    //         .hash();\\n\\n    //     emit ChallengeInfoUpdated(challengeId, _challenges[challengeId]);\\n    // }\\n\\n    // /**\\n    //  *\\n    //  * @param spvAddress The spv's address\\n    //  * @param proof The zk's proof\\n    //  * @param spvBlockHashs If the blocks of the state proof and tx proof are not in the same segment, you need to verify the two blocks\\n    //  * @param verifyInfo The public inputs preimage for zk proofs\\n    //  *        verifyInfo.data: [chainId, txHash, from, to, token, amount, nonce, timestamp]\\n    //  *        verifyInfo.slots: [...see code]\\n    //  * @param verifiedData0 [minVerifyChallengeDestTxSecond, maxVerifyChallengeDestTxSecond, nonce, destChainId, destAddress, destToken, destAmount, responeMakersHash]\\n    //  * @param rawDatas The raw data list in preimage. [responeMakers]\\n    //  */\\n    // function verifyChallengeDest(\\n    //     address spvAddress,\\n    //     bytes calldata proof,\\n    //     bytes32[2] calldata spvBlockHashs,\\n    //     IORChallengeSpv.VerifyInfo calldata verifyInfo,\\n    //     uint[] calldata verifiedData0,\\n    //     bytes calldata rawDatas\\n    // ) external {\\n    //     require(IORChallengeSpv(spvAddress).verifyChallenge(proof, spvBlockHashs, abi.encode(verifyInfo).hash()), \\\"VF\\\");\\n\\n    //     bytes32 challengeId = abi.encodePacked(uint64(verifyInfo.data[0]), verifyInfo.data[1]).hash();\\n    //     require(_challenges[challengeId].verifiedTime0 > 0, \\\"VT0Z\\\");\\n    //     require(_challenges[challengeId].verifiedTime1 == 0, \\\"VT1NZ\\\");\\n\\n    //     // Parse rawDatas\\n    //     uint[] memory responseMakers = abi.decode(rawDatas, (uint[]));\\n\\n    //     // Check verifiedData0\\n    //     require(abi.encode(verifiedData0).hash() == _challenges[challengeId].verifiedDataHash0, \\\"VDH0\\\");\\n    //     require(abi.encode(responseMakers).hash() == bytes32(verifiedData0[7]), \\\"RMH\\\");\\n\\n    //     // Check minVerifyChallengeDestTxSecond, maxVerifyChallengeDestTxSecond\\n    //     {\\n    //         uint timeDiff = block.timestamp - _challenges[challengeId].sourceTxTime;\\n    //         require(timeDiff >= verifiedData0[0], \\\"MINTOF\\\");\\n    //         require(timeDiff <= verifiedData0[1], \\\"MAXTOF\\\");\\n    //     }\\n\\n    //     // Check dest chainId\\n    //     require(verifyInfo.data[0] == verifiedData0[3], \\\"DCID\\\");\\n\\n    //     // Check dest from address in responseMakers\\n    //     require(responseMakers.includes(verifyInfo.data[2]), \\\"MIC\\\");\\n\\n    //     // Check dest address\\n    //     require(verifiedData0[4] == verifyInfo.data[3], \\\"DADDR\\\");\\n\\n    //     // Check dest token\\n    //     require(verifiedData0[5] == verifyInfo.data[4], \\\"DT\\\");\\n\\n    //     // Check dest amount (Warning: The nonce is at the end of the amount)\\n    //     require(verifiedData0[6] - verifiedData0[2] == verifyInfo.data[5], \\\"DT\\\");\\n\\n    //     // TODO: check responseTime. Source tx timestamp may be more than dest tx timestamp.\\n\\n    //     _challengerFailed(_challenges[challengeId]);\\n\\n    //     _challenges[challengeId].verifiedTime1 = uint64(block.timestamp);\\n\\n    //     emit ChallengeInfoUpdated(challengeId, _challenges[challengeId]);\\n    // }\\n\\n    // function _challengerFailed(ChallengeInfo memory challengeInfo) internal {\\n    //     // Unfreeze\\n    //     _freezeAssets[challengeInfo.freezeToken] -= (challengeInfo.freezeAmount0 + challengeInfo.freezeAmount1);\\n    // }\\n\\n    // function _makerFailed(ChallengeInfo memory challengeInfo) internal {\\n    //     uint challengeUserAmount = (challengeInfo.freezeAmount0 * challengeInfo.challengeUserRatio) /\\n    //         ConstantsLib.RATIO_MULTIPLE;\\n    //     require(challengeUserAmount <= challengeInfo.freezeAmount0, \\\"UAOF\\\");\\n\\n    //     uint challengerAmount = challengeInfo.freezeAmount0 + challengeInfo.freezeAmount1 - challengeUserAmount;\\n\\n    //     // TODO: Not compatible with starknet network\\n    //     address user = address(uint160(challengeInfo.sourceTxFrom));\\n\\n    //     if (challengeInfo.freezeToken == address(0)) {\\n    //         (bool sent1, ) = payable(user).call{value: challengeUserAmount}(\\\"\\\");\\n    //         require(sent1, \\\"ETH: SE1\\\");\\n\\n    //         (bool sent2, ) = payable(challengeInfo.challenger).call{value: challengerAmount}(\\\"\\\");\\n    //         require(sent2, \\\"ETH: SE2\\\");\\n    //     } else {\\n    //         IERC20(challengeInfo.freezeToken).safeTransfer(user, challengeUserAmount);\\n\\n    //         IERC20(challengeInfo.freezeToken).safeTransfer(challengeInfo.challenger, challengerAmount);\\n    //     }\\n\\n    //     // Unfreeze\\n    //     _freezeAssets[challengeInfo.freezeToken] -= (challengeInfo.freezeAmount0 + challengeInfo.freezeAmount1);\\n    // }\\n}\\n\"\r\n    },\r\n    \"contracts/VersionAndEnableTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ConstantsLib} from \\\"./library/ConstantsLib.sol\\\";\\n\\ncontract VersionAndEnableTime {\\n    uint192 private _version;\\n    uint64 private _enableTime;\\n\\n    // TODO: modify requires more gas\\n    // modifier versionIncreaseAndEnableTime(uint64 enableTime) {\\n    //     require(enableTime - block.timestamp >= ConstantsLib.MIN_ENABLE_DELAY, \\\"OFET\\\");\\n\\n    //     _;\\n    //     _version += 1;\\n\\n    //     _enableTime = enableTime;\\n    // }\\n\\n    function versionIncreaseAndEnableTime(uint64 enableTime) public {\\n        require(enableTime - block.timestamp >= ConstantsLib.MIN_ENABLE_DELAY, \\\"OFET\\\");\\n\\n        _version += 1;\\n        _enableTime = enableTime;\\n    }\\n\\n    function getVersionAndEnableTime() external view returns (uint192 version, uint64 enableTime) {\\n        return (_version, _enableTime);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"challengeId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sourceTxFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"sourceTxTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"freezeToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"challengeUserRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"freezeAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeAmount1\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"challengeTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"abortTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"verifiedTime0\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"verifiedTime1\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"verifiedDataHash0\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct IORMakerDeposit.ChallengeInfo\",\"name\":\"challengeInfo\",\"type\":\"tuple\"}],\"name\":\"ChallengeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"columnArrayHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"dealers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"ebcs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"}],\"name\":\"ColumnArrayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"responseMakers\",\"type\":\"uint256[]\"}],\"name\":\"ResponseMakersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ebc\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct RuleLib.RootWithVersion\",\"name\":\"rootWithVersion\",\"type\":\"tuple\"}],\"name\":\"RulesRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spv\",\"type\":\"address\"}],\"name\":\"SpvUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"columnArrayHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"freezeAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersionAndEnableTime\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"version\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mdcFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"responseMakersHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ebc\",\"type\":\"address\"}],\"name\":\"rulesRoot\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"}],\"internalType\":\"struct RuleLib.RootWithVersion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"spv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"dealers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"ebcs\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"}],\"name\":\"updateColumnArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"responseMakerSignatures\",\"type\":\"bytes[]\"}],\"name\":\"updateResponseMakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"ebc\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId0\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"chainId1\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"status0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status1\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minPrice0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPrice1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withholdingFee0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withholdingFee1\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"tradingFee0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingFee1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"responseTime0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"responseTime1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"compensationRatio0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"compensationRatio1\",\"type\":\"uint32\"}],\"internalType\":\"struct RuleLib.Rule[]\",\"name\":\"rules\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"}],\"internalType\":\"struct RuleLib.RootWithVersion\",\"name\":\"rootWithVersion\",\"type\":\"tuple\"},{\"internalType\":\"uint64[]\",\"name\":\"sourceChainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pledgeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateRulesRoot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"ebc\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId0\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"chainId1\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"status0\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status1\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"token0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minPrice0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minPrice1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxPrice1\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withholdingFee0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"withholdingFee1\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"tradingFee0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tradingFee1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"responseTime0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"responseTime1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"compensationRatio0\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"compensationRatio1\",\"type\":\"uint32\"}],\"internalType\":\"struct RuleLib.Rule[]\",\"name\":\"rules\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"version\",\"type\":\"uint32\"}],\"internalType\":\"struct RuleLib.RootWithVersion\",\"name\":\"rootWithVersion\",\"type\":\"tuple\"},{\"internalType\":\"uint64[]\",\"name\":\"sourceChainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pledgeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateRulesRootERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"spvs\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"}],\"name\":\"updateSpvs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"enableTime\",\"type\":\"uint64\"}],\"name\":\"versionIncreaseAndEnableTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ORMakerDeposit", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}