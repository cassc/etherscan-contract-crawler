{"SourceCode": "//SPDX-License-Identifier: Unlicensed\r\n// Twitter: https://twitter.com/WeAreLuffyErc\r\n// Telegram: https://t.me/WeAreLuffyErc\r\n// Website: https://WeAreLuffy.com\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Luffy is Context, IERC20 {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => bool) feeExcluded;\r\n    mapping(address => bool) maxTransactionExcluded;\r\n    mapping(address => bool) pairs;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 supply;\r\n    uint256 maxTransactionAmount;\r\n    uint256 swapAmount;\r\n    uint256 taxAmount;\r\n    uint16 tax;\r\n    uint16 public sellTax;\r\n    uint16 public buyTax;\r\n    uint16 public transferTax;\r\n    uint16 taxDivisor = 1000;\r\n\r\n    bool swapEnabled;\r\n    bool taxEnabled;\r\n    bool _inSwap;\r\n    bool limits;\r\n\r\n    IRouter router;\r\n    address ownerWallet;\r\n    address public taxWallet;\r\n    address public pair;\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == ownerWallet);\r\n        _;\r\n    }\r\n\r\n    constructor(string memory name_, string memory symbol_, uint256 startingSupply, address _taxWallet) {\r\n        ownerWallet = _msgSender();\r\n        taxWallet = _taxWallet;\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _mint(_msgSender(), startingSupply * (10**9));\r\n\r\n        maxTransactionAmount = (supply * 2) / 100;\r\n\r\n        setSwap(true, 10);\r\n        buyTax = 100;\r\n        sellTax = 200;\r\n        taxEnabled = true;\r\n\r\n        router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pair = IFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        pairs[pair] = true;\r\n\r\n        _approve(address(this), address(router), type(uint256).max);\r\n        _approve(_msgSender(), address(router), type(uint256).max);\r\n\r\n        maxTransactionExcluded[_msgSender()] = true;\r\n        maxTransactionExcluded[address(this)] = true;\r\n        maxTransactionExcluded[pair] = true;\r\n        feeExcluded[address(this)] = true;\r\n        feeExcluded[_msgSender()] = true;\r\n        feeExcluded[address(router)] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function owner() public view returns (address) {\r\n        return ownerWallet;\r\n    }\r\n\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return supply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        address _owner = _msgSender();\r\n        _transfer(_owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        address _owner = _msgSender();\r\n        _approve(_owner, spender, amount);\r\n        return true;\r\n    }\r\n     \r\n    function renounceOwnership() external onlyOwner {\r\n        ownerWallet = address(0);\r\n        maxTransactionAmount = supply;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address, use renounceOwnership Function\");\r\n\r\n        if(balanceOf(ownerWallet) > 0) _transfer(ownerWallet, newOwner, balanceOf(ownerWallet));\r\n\r\n        ownerWallet = newOwner;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\r\n        supply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            supply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address _owner, address spender, uint256 amount) internal {\r\n        uint256 currentAllowance = allowance(_owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(_owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        address _owner = _msgSender();\r\n        _approve(_owner, spender, allowance(_owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        address _owner = _msgSender();\r\n        uint256 currentAllowance = allowance(_owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal view {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_balances[from] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        if (limits) {\r\n            if (!maxTransactionExcluded[to]) {\r\n                require(\r\n                    amount <= maxTransactionAmount,\r\n                    \"TOKEN: Amount exceeds Transaction size\"\r\n                );\r\n            } else if (pairs[to] && !maxTransactionExcluded[from]) {\r\n                require(\r\n                    amount <= maxTransactionAmount,\r\n                    \"TOKEN: Amount exceeds Transaction size\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n\r\n        if( from != pair\r\n        && swapEnabled \r\n        && _balances[address(this)] >= swapAmount) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = router.WETH();\r\n\r\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                swapAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n    \r\n            uint256 balance = address(this).balance;\r\n            payable(taxWallet).transfer(balance);\r\n        \r\n        }\r\n\r\n        uint256 amountReceived = taxEnabled && !feeExcluded[from] ? takeFee(from, to, amount) : amount;\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        unchecked {\r\n            _balances[from] = fromBalance - amountReceived;\r\n            _balances[to] += amountReceived;\r\n        }\r\n        emit Transfer(from, to, amountReceived);\r\n    }\r\n\r\n    function takeFee(address sender, address receiver, uint256 amount) internal returns (uint256) {\r\n        if (feeExcluded[receiver]) {\r\n            return amount;\r\n        }\r\n        if(pairs[receiver]) {   \r\n            tax = sellTax;         \r\n        } else if(pairs[sender]){\r\n            tax = buyTax;    \r\n        } else {\r\n            tax = transferTax;\r\n        }\r\n\r\n        if(tax == 0) {return amount;}\r\n        taxAmount = (amount * tax) / taxDivisor;\r\n        uint256 senderBalance = _balances[sender];\r\n        unchecked {\r\n            _balances[sender] = senderBalance - taxAmount;\r\n            _balances[address(this)] += taxAmount;\r\n        }\r\n\r\n        emit Transfer(sender, address(this), taxAmount);\r\n\r\n        return amount - taxAmount;\r\n    }\r\n\r\n    function clearStuckBalance(uint256 percent) external onlyOwner {\r\n        require(percent <= 100);\r\n        uint256 amountEth = (address(this).balance * percent) / 100;\r\n        payable(taxWallet).transfer(amountEth);\r\n    }\r\n\r\n    function clearStuckTokens(address _token, address _to) external onlyOwner returns (bool _sent) {\r\n        require(_token != address(0) && _token != address(this));\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function setFeeExclusion(address holder, bool fee) external onlyOwner(){\r\n        feeExcluded[holder] = fee;\r\n    }\r\n\r\n    function setPair(address pairing, bool lpPair) external onlyOwner {\r\n        pairs[pairing] = lpPair;\r\n    }\r\n\r\n    function setTransactionAmount(uint256 amount) external onlyOwner {\r\n        require(amount <= supply / 100 );\r\n        maxTransactionAmount = amount;\r\n    }\r\n\r\n    function setTax(uint16 _buyTax, uint16 _sellTax, uint16 _transferTax, bool _taxEnabled) external onlyOwner {\r\n        require(_buyTax + _sellTax + transferTax <= 200);\r\n        buyTax = _buyTax;\r\n        sellTax = _sellTax;\r\n        transferTax = _transferTax;\r\n        taxEnabled = _taxEnabled;\r\n    }\r\n\r\n    function setTaxWallet(address _taxWallet) external onlyOwner {\r\n        taxWallet = _taxWallet;\r\n    }\r\n    \r\n    function setSwap(bool _enabled, uint256 _amount) public onlyOwner{\r\n        swapEnabled = _enabled;\r\n        swapAmount = _amount * (10**9);\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startingSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"clearStuckTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"name\":\"setFeeExclusion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairing\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lpPair\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_buyTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_sellTax\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_transferTax\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_taxEnabled\",\"type\":\"bool\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Luffy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000006030e1829866a7e8154d128820c9f6cd0322ca2300000000000000000000000000000000000000000000000000000000000000054c5546465900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054c55464659000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8006ad072355af833e4684661bcf93f632c04eb76752e61aded38e3a9e77834a"}