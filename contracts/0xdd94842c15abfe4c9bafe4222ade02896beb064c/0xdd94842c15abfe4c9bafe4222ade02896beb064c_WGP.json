{"SourceCode": "pragma solidity 0.5.4;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint256 total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\r\n  function approve(address spender, uint256 value)public returns (bool ok);\r\n  function transfer(address to, uint256 value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract WGP is ERC20 { \r\n    using SafeMath for uint256;\r\n    //--- Token configurations ----// \r\n    string private constant _name = \"W GREEN PAY\";\r\n    string private constant _symbol = \"WGP\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _maxCap = 600000000 ether;\r\n    uint256 private _icoStartDate = 1538366400;   // 01-10-2018 12:00 GMT+8\r\n    uint256 private _icoEndDate = 1539489600;     // 14-10-2018 12:00 GMT+8\r\n    \r\n    //--- Token allocations -------//\r\n    uint256 private _totalsupply;\r\n\r\n    //--- Address -----------------//\r\n    address private _owner;\r\n    address payable private _ethFundMain;\r\n   \r\n    //--- Variables ---------------//\r\n    bool private _lockToken = false;\r\n    bool private _allowICO = true;\r\n    \r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowed;\r\n    mapping(address => bool) private locked;\r\n    \r\n    event Mint(address indexed from, address indexed to, uint256 amount);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event ChangeReceiveWallet(address indexed newAddress);\r\n    event ChangeOwnerShip(address indexed newOwner);\r\n    event ChangeLockStatusFrom(address indexed investor, bool locked);\r\n    event ChangeTokenLockStatus(bool locked);\r\n    event ChangeAllowICOStatus(bool allow);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only owner is allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyICO() {\r\n        require(now >= _icoStartDate && now < _icoEndDate, \"CrowdSale is not running\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinishedICO() {\r\n        require(now >= _icoEndDate, \"CrowdSale is running\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyAllowICO() {\r\n        require(_allowICO, \"ICO stopped\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyUnlockToken() {\r\n        require(!_lockToken, \"Token locked\");\r\n        _;\r\n    }\r\n\r\n    constructor() public\r\n    {\r\n        _owner = msg.sender;\r\n    }\r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function maxCap() public pure returns (uint256) {\r\n        return _maxCap;\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    function ethFundMain() public view returns (address) {\r\n        return _ethFundMain;\r\n    }\r\n    \r\n    function icoStartDate() public view returns (uint256) {\r\n        return _icoStartDate;\r\n    }\r\n    \r\n    function icoEndDate() public view returns (uint256) {\r\n        return _icoEndDate;\r\n    }\r\n    \r\n    function lockToken() public view returns (bool) {\r\n        return _lockToken;\r\n    }\r\n    \r\n    function allowICO() public view returns (bool) {\r\n        return _allowICO;\r\n    }\r\n    \r\n    function lockStatusOf(address investor) public view returns (bool) {\r\n        return locked[investor];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalsupply;\r\n    }\r\n    \r\n    function balanceOf(address investor) public view returns (uint256) {\r\n        return balances[investor];\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _amount) public onlyFinishedICO onlyUnlockToken returns (bool)  {\r\n        require( _spender != address(0), \"Address can not be 0x0\");\r\n        require(balances[msg.sender] >= _amount, \"Balance does not have enough tokens\");\r\n        require(!locked[msg.sender], \"Sender address is locked\");\r\n        require(!locked[_spender], \"Spender address is locked\");\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _from, address _spender) public view returns (uint256) {\r\n        return allowed[_from][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public onlyFinishedICO onlyUnlockToken returns (bool) {\r\n        require( _to != address(0), \"Receiver can not be 0x0\");\r\n        require(balances[msg.sender] >= _amount, \"Balance does not have enough tokens\");\r\n        require(!locked[msg.sender], \"Sender address is locked\");\r\n        require(!locked[_to], \"Receiver address is locked\");\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom( address _from, address _to, uint256 _amount ) public onlyFinishedICO onlyUnlockToken returns (bool)  {\r\n        require( _to != address(0), \"Receiver can not be 0x0\");\r\n        require(balances[_from] >= _amount, \"Source's balance is not enough\");\r\n        require(allowed[_from][msg.sender] >= _amount, \"Allowance is not enough\");\r\n        require(!locked[_from], \"From address is locked\");\r\n        require(!locked[_to], \"Receiver address is locked\");\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public onlyOwner returns (bool) {\r\n        require(balances[msg.sender] >= _value, \"Balance does not have enough tokens\");   \r\n        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \r\n        _totalsupply = _totalsupply.sub(_value);                     \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function stopTransferToken() external onlyOwner onlyFinishedICO {\r\n        _lockToken = true;\r\n        emit ChangeTokenLockStatus(true);\r\n    }\r\n\r\n    function startTransferToken() external onlyOwner onlyFinishedICO {\r\n        _lockToken = false;\r\n        emit ChangeTokenLockStatus(false);\r\n    }\r\n\r\n    function () external payable onlyICO onlyAllowICO {\r\n        \r\n    }\r\n\r\n    function manualMint(address receiver, uint256 _value) public onlyOwner{\r\n        uint256 value = _value.mul(10 ** 18);\r\n        mint(_owner, receiver, value);\r\n    }\r\n\r\n    function mint(address from, address receiver, uint256 value) internal {\r\n        require(receiver != address(0), \"Address can not be 0x0\");\r\n        require(value > 0, \"Value should larger than 0\");\r\n        balances[receiver] = balances[receiver].add(value);\r\n        _totalsupply = _totalsupply.add(value);\r\n        require(_totalsupply <= _maxCap, \"CrowdSale hit max cap\");\r\n        emit Mint(from, receiver, value);\r\n        emit Transfer(address(0), receiver, value);\r\n    }\r\n    \r\n    function haltCrowdSale() external onlyOwner {\r\n        _allowICO = false;\r\n        emit ChangeAllowICOStatus(false);\r\n    }\r\n\r\n    function resumeCrowdSale() external onlyOwner {\r\n        _allowICO = true;\r\n        emit ChangeAllowICOStatus(true);\r\n    }\r\n\r\n    function changeReceiveWallet(address payable newAddress) external onlyOwner {\r\n        require(newAddress != address(0), \"Address can not be 0x0\");\r\n        _ethFundMain = newAddress;\r\n        emit ChangeReceiveWallet(newAddress);\r\n    }\r\n\r\n\tfunction assignOwnership(address newOwner) external onlyOwner {\r\n\t    require(newOwner != address(0), \"Address can not be 0x0\");\r\n\t    _owner = newOwner;\r\n\t    emit ChangeOwnerShip(newOwner);\r\n\t}\r\n\r\n    function forwardFunds() external onlyOwner {\r\n        require(_ethFundMain != address(0));\r\n        _ethFundMain.transfer(address(this).balance);\r\n    }\r\n\r\n    function haltTokenTransferFromAddress(address investor) external onlyOwner {\r\n        locked[investor] = true;\r\n        emit ChangeLockStatusFrom(investor, true);\r\n    }\r\n\r\n    function resumeTokenTransferFromAddress(address investor) external onlyOwner {\r\n        locked[investor] = false;\r\n        emit ChangeLockStatusFrom(investor, false);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"lockStatusOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"haltTokenTransferFromAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundMain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"resumeTokenTransferFromAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forwardFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeReceiveWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"assignOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ChangeReceiveWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwnerShip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"ChangeLockStatusFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"ChangeTokenLockStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"ChangeAllowICOStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "WGP", "CompilerVersion": "v0.5.4+commit.9549d8ff", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://b90ddb2336626bedbdfc2fb4285d7077361285a41d92f41b21e2431b6887e2fc"}