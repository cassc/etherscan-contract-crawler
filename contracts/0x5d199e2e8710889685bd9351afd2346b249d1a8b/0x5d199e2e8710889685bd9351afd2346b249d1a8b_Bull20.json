{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Bull20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./interfaces/IRateProvider.sol\\\";\\nimport \\\"./helpers/Holder.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/IBull20.sol\\\";\\nimport \\\"./interfaces/Stage.sol\\\";\\nimport \\\"./helpers/Proxy.sol\\\";\\n\\ncontract Bull20 is IBull20, Proxy {\\n    event Airdrop(address indexed wallet, uint256 amount);\\n    event Purchase(address indexed wallet, uint256 cost, address token, uint256 amount);\\n    event Received(address, uint256);\\n\\n    bool private _enabled = false;\\n    IRateProvider private _rateProvider;\\n    Stage[] private _stages;\\n    // wallet->stage->balance\\n    mapping(address => mapping(uint => uint256)) private _presale;\\n    address[] private _holders;\\n\\n    constructor(address proxy_) payable Proxy(proxy_) {}\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    function holders() external view onlyFromProxy returns (address[] memory) {\\n        return _holders;\\n    }\\n\\n    function enabled() external view onlyFromProxy returns (bool) {\\n        return _enabled;\\n    }\\n\\n    function rateProvider() external view onlyFromProxy returns (IRateProvider) {\\n        return _rateProvider;\\n    }\\n\\n    function stages() public view onlyFromProxy returns (Stage[] memory) {\\n        return _stages;\\n    }\\n\\n    function activeStage() public view onlyFromProxy returns (Stage memory) {\\n        Stage[] memory cachedStages = _stages;\\n        uint256 stagesLength = cachedStages.length;\\n\\n        require(stagesLength != 0, \\\"Stages are not set up\\\");\\n\\n        for (uint i = 0; i < stagesLength; ++i) {\\n            if (cachedStages[i].expectedValue > cachedStages[i].raisedValue) {\\n                return cachedStages[i];\\n            }\\n        }\\n\\n        return cachedStages[cachedStages.length - 1];\\n    }\\n\\n    function totalRaised() external view onlyFromProxy returns (uint256) {\\n        uint256 total = 0;\\n        Stage[] memory cachedStages = _stages;\\n        uint256 stagesLength = cachedStages.length;\\n\\n        for (uint i = 0; i < stagesLength; ++i) {\\n            total += cachedStages[i].raisedValue;\\n            if (cachedStages[i].expectedValue > cachedStages[i].raisedValue) {\\n                break;\\n            }\\n        }\\n\\n        return total;\\n    }\\n\\n    function presaleAmount(address _wallet) external view onlyFromProxy returns (uint256) {\\n        uint256 amount = 0;\\n        uint256 stagesLength = _stages.length;\\n\\n        for (uint i = 0; i < stagesLength; ++i) {\\n            amount += _presale[_wallet][i];\\n        }\\n\\n        return amount;\\n    }\\n\\n    function buy(uint256 amount, address token, uint256 msgValue, address msgSender) external payable onlyFromProxy {\\n        require(amount != 0, \\\"Amount should be > 0\\\");\\n        uint256 costUSD = activeStage().price * amount;\\n        uint256 value = _rateProvider.getAmountForUSD(token, costUSD);\\n\\n        emit Purchase(\\n            msgSender,\\n            value,\\n            token,\\n            amount\\n        );\\n\\n        // If native currency\\n        if (token == address(0x0)) {\\n            require(msgValue == value, \\\"Incorrect amount\\\");\\n            _airdrop(msgSender, amount, costUSD);\\n        } else {\\n            require(msgValue == 0, \\\"Value should be 0\\\");\\n            _airdrop(msgSender, amount, costUSD);\\n            bool success = IToken(token).transferFrom(msgSender, address(this), value);\\n            require(success, \\\"Buy failed\\\");\\n        }\\n    }\\n\\n    function disable() external onlyFromProxy {\\n        _enabled = false;\\n    }\\n\\n    function enable() external onlyFromProxy {\\n        _enabled = true;\\n    }\\n\\n    function setRateProvider(address rateProvider_) public onlyFromProxy {\\n        require(rateProvider_.code.length != 0, \\\"Invalid contract\\\");\\n        _rateProvider = IRateProvider(rateProvider_);\\n    }\\n\\n    function addStages(uint256[] memory prices, uint256[] memory expectedValues) external onlyFromProxy {\\n        uint256 pricesLength = prices.length;\\n        require(pricesLength == expectedValues.length, \\\"prices.length != expectedValues.length\\\");\\n\\n        for (uint i = 0; i < pricesLength; ++i) {\\n            _addStage(prices[i], expectedValues[i]);\\n        }\\n    }\\n\\n    function addStage(uint256 priceUSD, uint256 expectedValue) external onlyFromProxy returns (Stage memory) {\\n        return _addStage(priceUSD, expectedValue);\\n    }\\n\\n    function editStage(uint index, uint256 price, uint256 expectedValue) external onlyFromProxy returns (Stage memory) {\\n        Stage memory currentStage = activeStage();\\n        require((index + 1) > currentStage.index, \\\"Editing previous stage\\\");\\n\\n        Stage memory stage = Stage(index, price, expectedValue, _stages[index].raisedValue);\\n        _stages[index] = stage;\\n        return stage;\\n    }\\n\\n    function deleteLastStage() external onlyFromProxy {\\n        Stage memory currentStage = activeStage();\\n        require(currentStage.index < _stages.length, \\\"Can not delete active stage\\\");\\n        _stages.pop();\\n    }\\n\\n    function airdrop(address wallet, uint256 amount) external onlyFromProxy {\\n        uint256 costUSD = activeStage().price * amount;\\n        _airdrop(wallet, amount, costUSD);\\n    }\\n\\n    function airdropMany(address[] memory wallets, uint256[] memory amounts) external onlyFromProxy {\\n        uint256 walletsLength = wallets.length;\\n        require(walletsLength == amounts.length, \\\"wallets.length != amounts.length\\\");\\n\\n        for (uint i = 0; i < walletsLength; ++i) {\\n            uint256 costUSD = activeStage().price * amounts[i];\\n            _airdrop(wallets[i], amounts[i], costUSD);\\n        }\\n    }\\n\\n    function withdraw(address holder) external onlyFromProxy payable {\\n        address[] memory tokens = _rateProvider.tokens();\\n        uint256 tokensLength = tokens.length;\\n\\n        for (uint i = 0; i < tokensLength; ++i) {\\n            if (tokens[i] == address(0x0)) {\\n                continue;\\n            }\\n\\n            IToken erc20 = IToken(tokens[i]);\\n            bool success = erc20.transfer(holder, erc20.balanceOf(address(this)));\\n            require(success, \\\"Withdraw failed\\\");\\n        }\\n\\n        if (address(this).balance != 0) {\\n            payable(holder).transfer(address(this).balance);\\n        }\\n    }\\n\\n    function _addStage(uint256 priceUSD, uint256 expectedValue) private returns (Stage memory) {\\n        require(priceUSD != 0, \\\"Price should be > 0\\\");\\n        require(expectedValue != 0, \\\"Expected value should be > 0\\\");\\n\\n        Stage memory stage = Stage(_stages.length, priceUSD, expectedValue, 0);\\n        _stages.push(stage);\\n        return stage;\\n    }\\n\\n    function _airdrop(address wallet, uint256 amount, uint256 costUSD) private {\\n        require(_enabled, \\\"Contract should be enabled\\\");\\n        require(amount != 0, \\\"Amount should be > 0\\\");\\n        Stage memory currentStage = activeStage();\\n        _stages[currentStage.index].raisedValue += costUSD;\\n        _presale[wallet][currentStage.index] += amount;\\n\\n        emit Airdrop(wallet, amount);\\n        address[] memory cachedHolders = _holders;\\n        uint256 holdersLength = cachedHolders.length;\\n\\n        for (uint i = 0; i < holdersLength; ++i) {\\n            if (cachedHolders[i] == wallet) {\\n                return;\\n            }\\n        }\\n\\n        _holders.push(wallet);\\n    }\\n}\"\r\n    },\r\n    \"contracts/helpers/Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nabstract contract Holder {\\n    event ChangeHolderEvent(address holder);\\n\\n    address private _holder;\\n\\n    constructor() {\\n        _setHolder(msg.sender);\\n    }\\n\\n    function changeHolder(address newHolder) external virtual onlyHolder {\\n        require(newHolder != address(0), \\\"New holder is the zero address\\\");\\n        _setHolder(newHolder);\\n    }\\n\\n    modifier onlyHolder() {\\n        _checkHolder();\\n        _;\\n    }\\n\\n    function holder() public view virtual returns (address) {\\n        return _holder;\\n    }\\n\\n    function _checkHolder() internal view virtual {\\n        require(holder() == msg.sender, \\\"Caller is not the holder\\\");\\n    }\\n\\n    function _setHolder(address newHolder) internal virtual {\\n        _holder = newHolder;\\n        emit ChangeHolderEvent(newHolder);\\n    }\\n}\"\r\n    },\r\n    \"contracts/helpers/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nabstract contract Proxy {\\n    address private _proxy;\\n\\n    constructor(address proxy_) {\\n        _proxy = proxy_;\\n    }\\n\\n    modifier onlyFromProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    function proxy() public view virtual returns (address) {\\n        return _proxy;\\n    }\\n\\n    function _checkProxy() internal view virtual {\\n        require(proxy() == msg.sender, \\\"Caller is not proxy\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBull20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./IRateProvider.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./Stage.sol\\\";\\n\\ninterface IBull20 {\\n    // public\\n\\n    function holders() external view returns (address[] memory);\\n\\n    function enabled() external view returns (bool);\\n\\n    function rateProvider() external view returns (IRateProvider);\\n\\n    function stages() external view returns (Stage[] memory);\\n\\n    function activeStage() external view returns (Stage memory);\\n\\n    function totalRaised() external view returns (uint256);\\n\\n    function presaleAmount(address _wallet) external view returns (uint256);\\n\\n    // user\\n\\n    function buy(uint256 amount, address token, uint256 msgValue, address msgSender) external payable;\\n\\n    function disable() external;\\n\\n    function enable() external;\\n\\n    function setRateProvider(address rateProvider_) external;\\n\\n    function addStage(uint256 priceUSD, uint256 expectedValue) external returns (Stage memory);\\n\\n    function addStages(uint256[] memory prices, uint256[] memory expectedValues) external;\\n\\n    function editStage(uint index, uint256 price, uint256 expectedValue) external returns (Stage memory);\\n\\n    function deleteLastStage() external;\\n\\n    function airdrop(address wallet, uint256 amount) external;\\n\\n    function airdropMany(address[] memory wallets, uint256[] memory amounts) external;\\n\\n    function withdraw(address holder) external payable;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IRateProvider {\\n    function getAmountForUSD(address token, uint256 usd) external view returns (uint256);\\n\\n    function tokens() external view returns (address[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IToken {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Stage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n    struct Stage {\\n        uint index;\\n        uint256 price; // usd\\n        uint256 expectedValue;  // usd\\n        uint256 raisedValue; // usd\\n    }\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeStage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisedValue\",\"type\":\"uint256\"}],\"internalType\":\"struct Stage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisedValue\",\"type\":\"uint256\"}],\"internalType\":\"struct Stage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expectedValues\",\"type\":\"uint256[]\"}],\"name\":\"addStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteLastStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"}],\"name\":\"editStage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisedValue\",\"type\":\"uint256\"}],\"internalType\":\"struct Stage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"presaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateProvider\",\"outputs\":[{\"internalType\":\"contract IRateProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateProvider_\",\"type\":\"address\"}],\"name\":\"setRateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raisedValue\",\"type\":\"uint256\"}],\"internalType\":\"struct Stage[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Bull20", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000284790e2344dc99d79d4fa64e201ed52b6108a4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}