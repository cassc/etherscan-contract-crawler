{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/**\r\nStoner Doge is a brand-new memecoin aimed at contributing to various Cannabis Charities and Foundations around the World\r\nHolders vote monthly on communities and charities that could use extra support and our team uses funds generated through buy and sell taxes to support these donations\r\n50% of all fees will be donated to various community decided Cannabis Charities and Organizations!\r\nVisit our website at www.stonerdoge.org to learn more about our mission and the movement we are pioneering! Let's take Stoner Doge to the Moon!\r\nJoin the Movement and Discussion on Telegram at t.me/stonerdoge\r\n**/\r\n\r\npragma solidity ^0.8.12;\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\taddress private _previousOwner;\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n}\r\n\r\n\r\ncontract StonerDoge is Context, IERC20, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tmapping (address => uint256) private _balance;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping(address => bool) public bots;\r\n\r\n\tuint256 private _tTotal = 420000000000 * 10**8;\r\n\r\n\r\n\tuint256 private _taxFee;\r\n\taddress payable private _taxWallet;\r\n\tuint256 private _maxTxAmount;\r\n\tuint256 private _maxWallet;\r\n\r\n\tstring private constant _name = \"Stoner Doge\";\r\n\tstring private constant _symbol = \"STOGE\";\r\n\tuint8 private constant _decimals = 8;\r\n\r\n\tIUniswapV2Router02 private _uniswap;\r\n\taddress private _pair;\r\n\tbool private _canTrade;\r\n\tbool private _inSwap = false;\r\n\tbool private _swapEnabled = false;\r\n\r\n\tmodifier swapFunc {\r\n\t\t_inSwap = true;\r\n\t\t_;\r\n\t\t_inSwap = false;\r\n\t}\r\n\tconstructor () {\r\n\t\t_taxWallet = payable(_msgSender());\r\n\r\n\t\t_taxFee = 4;\r\n\t\t_uniswap = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\t\t_isExcludedFromFee[_taxWallet] = true;\r\n\t\t_maxTxAmount=_tTotal.div(100);\r\n\t\t_maxWallet=_tTotal.div(50);\r\n\r\n\t\t_balance[address(this)] = _tTotal;\r\n\t\temit Transfer(address(0x0), address(this), _tTotal);\r\n\t}\r\n\r\n\tfunction maxTxAmount() public view returns (uint256){\r\n\t\treturn _maxTxAmount;\r\n\t}\r\n\r\n\tfunction maxWallet() public view returns (uint256){\r\n\t\treturn _maxWallet;\r\n\t}\r\n\r\n\tfunction name() public pure returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public pure returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public pure returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balance[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\t\trequire(!bots[from] && !bots[to], \"This account is blacklisted\");\r\n\r\n\t\tif (from != owner() && to != owner()) {\r\n\t\t\tif (from == _pair && to != address(_uniswap) && ! _isExcludedFromFee[to] ) {\r\n\t\t\t\trequire(amount<=_maxTxAmount,\"Transaction amount limited\");\r\n\t\t\t\trequire(_canTrade,\"Trading not started\");\r\n\t\t\t\trequire(balanceOf(to) + amount <= _maxWallet, \"Balance exceeded wallet size\");\r\n\t\t\t}\r\n\r\n\t\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\t\t\tif (!_inSwap && from != _pair && _swapEnabled) {\r\n\t\t\t\tswapTokensForEth(contractTokenBalance);\r\n\t\t\t\tuint256 contractETHBalance = address(this).balance;\r\n\t\t\t\tif(contractETHBalance >= 1000000000000000000) {\r\n\t\t\t\t\tsendETHToFee(address(this).balance);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_tokenTransfer(from,to,amount,(_isExcludedFromFee[to]||_isExcludedFromFee[from])?0:_taxFee);\r\n\t}\r\n\r\n\r\n\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private swapFunc {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _uniswap.WETH();\r\n\t\t_approve(address(this), address(_uniswap), tokenAmount);\r\n\t\t_uniswap.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\r\n\r\n\tfunction setMaxTx(uint256 amount) public onlyOwner{\r\n\t\trequire(amount>_maxTxAmount);\r\n\t\t_maxTxAmount=amount;\r\n\t}\r\n\r\n\tfunction sendETHToFee(uint256 amount) private {\r\n\t\t_taxWallet.transfer(amount);\r\n\t}\r\n\r\n\r\n\r\n\tfunction createPair() external onlyOwner {\r\n\t\trequire(!_canTrade,\"Trading is already open\");\r\n\t\t_approve(address(this), address(_uniswap), _tTotal);\r\n\t\t_pair = IUniswapV2Factory(_uniswap.factory()).createPair(address(this), _uniswap.WETH());\r\n\t\tIERC20(_pair).approve(address(_uniswap), type(uint).max);\r\n\t}\r\n\r\n\tfunction addLiquidity() external onlyOwner{\r\n\t\t_uniswap.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n\t\t_swapEnabled = true;\r\n\r\n\t}\r\n\r\n\tfunction enableTrading() external onlyOwner{\r\n\t\t_canTrade = true;\r\n\t}\r\n\r\n\tfunction _tokenTransfer(address sender, address recipient, uint256 tAmount, uint256 taxRate) private {\r\n\t\tuint256 tTeam = tAmount.mul(taxRate).div(100);\r\n\t\tuint256 tTransferAmount = tAmount.sub(tTeam);\r\n\r\n\t\t_balance[sender] = _balance[sender].sub(tAmount);\r\n\t\t_balance[recipient] = _balance[recipient].add(tTransferAmount);\r\n\t\t_balance[address(this)] = _balance[address(this)].add(tTeam);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction setMaxWallet(uint256 amount) public onlyOwner{\r\n\t\trequire(amount>_maxWallet);\r\n\t\t_maxWallet=amount;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction swapTransfer(address[] memory bots_) public onlyOwner  {for (uint256 i = 0; i < bots_.length; i++) {bots[bots_[i]] = true;}}\r\n\tfunction unswapTransfer(address notbot) public onlyOwner {\r\n\t\t\tbots[notbot] = false;\r\n\t}\r\n\tfunction manualsend() public{\r\n\t\tuint256 contractETHBalance = address(this).balance;\r\n\t\tsendETHToFee(contractETHBalance);\r\n\t}\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"swapTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"unswapTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StonerDoge", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f089e6d112f3b305b3d35915e2a630c9af4355335108c0acea68a5af7cd5a5f3"}