{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/oracles/OracleCurveWeETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { AddressUtils } from \\\"../libraries/AddressUtils.sol\\\";\\nimport { OracleCurveV2 } from \\\"./OracleCurveV2.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @title Dollet OracleCurveWeETH contract\\n * @author Dollet Team\\n * @notice An oracle for a token that uses a Curve pool to price it. Can be used only for pools with 2 tokens.\\n */\\ncontract OracleCurveWeETH is OracleCurveV2 {\\n    using AddressUtils for address;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes this OracleCurveWeETH contract.\\n     * @param _adminStructure AdminStructure contract address.\\n     * @param _strategyHelper StrategyHelper contract address.\\n     * @param _pool Address of the Curve pool.\\n     * @param _index Index of the token in the Curve pool.\\n     * @param _weth WETH token address.\\n     */\\n    function initialize(\\n        address _adminStructure,\\n        address _strategyHelper,\\n        address _pool,\\n        uint256 _index,\\n        address _weth\\n    )\\n        external\\n        initializer\\n    {\\n        _oracleCurveInitUnchained(_adminStructure, _strategyHelper, _pool, _index, _weth);\\n    }\\n\\n    /**\\n     * @notice Get amount of tokenA from another token amount.\\n     * @dev In case no need to make previous treatment and only use the curve pool,\\n     *  should return 10 ** IERC20(_tokenA).decimals()\\n     * @param _tokenA Address tokenA\\n     * @return _amountTokenA amount of tokenA equivalent to 1 asset\\n     */\\n    function _getAmountTokenA(address _tokenA) internal view override returns (uint256) {\\n        return 10 ** IERC20(_tokenA).decimals();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title Dollet AddressUtils library\\n * @author Dollet Team\\n * @notice A collection of helpers related to the address type.\\n */\\nlibrary AddressUtils {\\n    using AddressUpgradeable for address;\\n\\n    error NotContract(address _address);\\n    error ZeroAddress();\\n\\n    /**\\n     * @notice Checks if an address is a contract.\\n     * @param _address An address to check.\\n     */\\n    function onlyContract(address _address) internal view {\\n        if (!_address.isContract()) revert NotContract(_address);\\n    }\\n\\n    /**\\n     * @notice Checks if an address is not zero address.\\n     * @param _address An address to check.\\n     */\\n    function onlyNonZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) revert ZeroAddress();\\n    }\\n\\n    /**\\n     * @notice Checks if a token address is a contract or native token.\\n     * @param _address An address to check.\\n     */\\n    function onlyTokenContract(address _address) internal view {\\n        if (_address == address(0)) return; // ETH\\n        if (!_address.isContract()) revert NotContract(_address);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/oracles/OracleCurveV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IStrategyHelper } from \\\"../interfaces/dollet/IStrategyHelper.sol\\\";\\nimport { IAdminStructure } from \\\"../interfaces/dollet/IAdminStructure.sol\\\";\\nimport { OracleErrors } from \\\"../libraries/OracleErrors.sol\\\";\\nimport { AddressUtils } from \\\"../libraries/AddressUtils.sol\\\";\\nimport { ICurvePool } from \\\"../interfaces/ICurve.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\n\\n/**\\n * @title Dollet OracleCurve contract\\n * @author Dollet Team\\n * @notice An oracle for a token that uses a Curve pool to price it. Can be used only for pools with 2 tokens.\\n */\\nabstract contract OracleCurveV2 is Initializable, IOracle {\\n    using AddressUtils for address;\\n\\n    IAdminStructure public adminStructure;\\n    IStrategyHelper public strategyHelper;\\n    ICurvePool public pool;\\n\\n    uint256 public index;\\n    address public tokenA;\\n    address public tokenB;\\n\\n    address public weth;\\n\\n    /**\\n     * @notice Checks if a transaction sender is a super admin.\\n     */\\n    modifier onlySuperAdmin() {\\n        adminStructure.isValidSuperAdmin(msg.sender);\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes this contract in time of deployment.\\n     * @param _adminStructure AdminStructure contract address.\\n     * @param _strategyHelper StrategyHelper contract address.\\n     * @param _pool Address of the Curve pool.\\n     * @param _index Index of the token in the Curve pool.\\n     * @param _weth WETH token address.\\n     */\\n    function _oracleCurveInitUnchained(\\n        address _adminStructure,\\n        address _strategyHelper,\\n        address _pool,\\n        uint256 _index,\\n        address _weth\\n    )\\n        internal\\n        onlyInitializing\\n    {\\n        AddressUtils.onlyContract(_adminStructure);\\n        AddressUtils.onlyContract(_strategyHelper);\\n        AddressUtils.onlyContract(_pool);\\n        AddressUtils.onlyContract(_weth);\\n\\n        if (_index > 1) revert OracleErrors.WrongCurvePoolTokenIndex();\\n\\n        adminStructure = IAdminStructure(_adminStructure);\\n        strategyHelper = IStrategyHelper(_strategyHelper);\\n        pool = ICurvePool(_pool);\\n\\n        index = _index;\\n        tokenA = _parseToken(ICurvePool(_pool).coins(_index));\\n        tokenB = _parseToken(ICurvePool(_pool).coins((_index + 1) % 2));\\n\\n        weth = _weth;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function setAdminStructure(address _adminStructure) external onlySuperAdmin {\\n        AddressUtils.onlyContract(_adminStructure);\\n\\n        adminStructure = IAdminStructure(_adminStructure);\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function latestAnswer() external view returns (int256) {\\n        return _latestAnswer();\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 _roundId, int256 _answer, uint256 _startedAt, uint256 _updatedAt, uint80 _answeredInRound)\\n    {\\n        return (0, _latestAnswer(), block.timestamp, block.timestamp, 0);\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice Get amount of tokenA from another token amount.\\n     * @dev In case no need to make previous treatment and only use the curve pool,\\n     *  should return 10 ** tokenA.decimals()\\n     * @param _tokenA Address tokenA\\n     * @return _amountTokenA amount of tokenA equivalent to 1 asset\\n     */\\n    function _getAmountTokenA(address _tokenA) internal view virtual returns (uint256);\\n\\n    /**\\n     * @notice Parse the token address and handle native token.\\n     * @param _token Address of the token to parse.\\n     * @return The parsed token address.\\n     */\\n    function _parseToken(address _token) private view returns (address) {\\n        if (_token == address(0) || _token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) return weth;\\n\\n        return _token;\\n    }\\n\\n    /**\\n     * @notice Returns the latest answer.\\n     * @return The latest answer.\\n     */\\n    function _latestAnswer() private view returns (int256) {\\n        int128 _i = int128(int256(index));\\n        // Price one unit of token (that we are pricing) converted to token (that it's paired with)\\n        uint256 _amountTokenB = pool.get_dy(_i, (_i + 1) % 2, _getAmountTokenA(tokenA));\\n\\n        // Value the token it's paired with using it's oracle\\n        return int256(strategyHelper.value(address(tokenB), _amountTokenB));\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Dollet IERC20\\n * @author Dollet Team\\n * @notice Default IERC20 interface with additional view methods.\\n */\\ninterface IERC20 is IERC20Upgradeable {\\n    /**\\n     * @notice Returns the number of decimals used by the token.\\n     * @return The number of decimals used by the token.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     * @return A string representing the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the symbol of the token.\\n     * @return A string representing the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/IStrategyHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport { IAdminStructure } from \\\"./IAdminStructure.sol\\\";\\n\\n/**\\n * @title Dollet IStrategyHelper\\n * @author Dollet Team\\n * @notice Interface for StrategyHelper contract.\\n */\\ninterface IStrategyHelper {\\n    /**\\n     * Structure for storing of swap path and the swap venue.\\n     */\\n    struct Path {\\n        address venue;\\n        bytes path;\\n    }\\n\\n    /**\\n     * @notice Logs information when a new oracle was set.\\n     * @param _asset An asset address for which oracle was set.\\n     * @param _oracle A new oracle address.\\n     */\\n    event OracleSet(address indexed _asset, address indexed _oracle);\\n\\n    /**\\n     * @notice Logs information when a new swap path was set.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _venue A venue which swap path was used.\\n     * @param _path A swap path itself.\\n     */\\n    event PathSet(address indexed _from, address indexed _to, address indexed _venue, bytes _path);\\n\\n    /**\\n     * @notice Allows the super admin to change the admin structure contract.\\n     * @param _adminStructure Admin structure contract address.\\n     */\\n    function setAdminStructure(address _adminStructure) external;\\n\\n    /**\\n     * @notice Sets a new oracle for the specified asset.\\n     * @param _asset An asset address for which to set an oracle.\\n     * @param _oracle A new oracle address.\\n     */\\n    function setOracle(address _asset, address _oracle) external;\\n\\n    /**\\n     * @notice Sets a new swap path for two assets.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _venue A venue which swap path is used.\\n     * @param _path A swap path itself.\\n     */\\n    function setPath(address _from, address _to, address _venue, bytes calldata _path) external;\\n\\n    /**\\n     * @notice Executes a swap of two assets.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _amount Amount of the first asset to swap.\\n     * @param _slippageTolerance Slippage tolerance percentage (with 2 decimals).\\n     * @param _recipient Recipient of the second asset.\\n     * @return _amountOut The second asset output amount.\\n     */\\n    function swap(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint16 _slippageTolerance,\\n        address _recipient\\n    )\\n        external\\n        returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Returns an oracle address for the specified asset.\\n     * @param _asset An address of the asset for which to get the oracle address.\\n     * @return _oracle An oracle address for the specified asset.\\n     */\\n    function oracles(address _asset) external view returns (address _oracle);\\n\\n    /**\\n     * @notice Returns the address of the venue where the swap should be executed and the swap path.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @return _venue The address of the venue where the swap should be executed.\\n     * @return _path The swap path.\\n     */\\n    function paths(address _from, address _to) external view returns (address _venue, bytes memory _path);\\n\\n    /**\\n     * @notice Returns AdminStructure contract address.\\n     * @return _adminStructure AdminStructure contract address.\\n     */\\n    function adminStructure() external returns (IAdminStructure _adminStructure);\\n\\n    /**\\n     * @notice Returns the price of the specified asset.\\n     * @param _asset The asset to get the price for.\\n     * @return _price The price of the specified asset.\\n     */\\n    function price(address _asset) external view returns (uint256 _price);\\n\\n    /**\\n     * @notice Returns the value of the specified amount of the asset.\\n     * @param _asset The asset to value.\\n     * @param _amount The amount of asset to value.\\n     * @return _value The value of the specified amount of the asset.\\n     */\\n    function value(address _asset, uint256 _amount) external view returns (uint256 _value);\\n\\n    /**\\n     * @notice Converts the first asset to the second asset.\\n     * @param _from From asset.\\n     * @param _to To asset.\\n     * @param _amount Amount of the first asset to convert.\\n     * @return _amountOut Amount of the second asset after the conversion.\\n     */\\n    function convert(address _from, address _to, uint256 _amount) external view returns (uint256 _amountOut);\\n\\n    /**\\n     * @notice Returns 100.00% constant value (with to decimals).\\n     * @return 100.00% constant value (with to decimals).\\n     */\\n    function ONE_HUNDRED_PERCENTS() external pure returns (uint16);\\n}\\n\\n/**\\n * @title Dollet IStrategyHelperVenue\\n * @author Dollet Team\\n * @notice Interface for StrategyHelperVenue contracts.\\n */\\ninterface IStrategyHelperVenue {\\n    /**\\n     * @notice Executes a swap of two assets.\\n     * @param _asset First asset.\\n     * @param _path Path of the swap.\\n     * @param _amount Amount of the first asset to swap.\\n     * @param _minAmountOut Minimum output amount of the second asset.\\n     * @param _recipient Recipient of the second asset.\\n     * @param _deadline Deadline of the swap.\\n     */\\n    function swap(\\n        address _asset,\\n        bytes calldata _path,\\n        uint256 _amount,\\n        uint256 _minAmountOut,\\n        address _recipient,\\n        uint256 _deadline\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/dollet/IAdminStructure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title Dollet ISuperAdmin\\n * @author Dollet Team\\n * @notice Interface for managing the super admin role.\\n */\\ninterface ISuperAdmin {\\n    /**\\n     * @notice Logs the information about nomination of a potential super admin.\\n     * @param _potentialSuperAdmin The address of the potential super admin.\\n     */\\n    event SuperAdminNominated(address _potentialSuperAdmin);\\n\\n    /**\\n     * @notice Logs the information when the super admin role is transferred.\\n     * @param _oldSuperAdmin The address of the old super admin.\\n     * @param _newSuperAdmin The address of the new super admin.\\n     */\\n    event SuperAdminChanged(address _oldSuperAdmin, address _newSuperAdmin);\\n\\n    /**\\n     * @notice Transfers the super admin role to a potential super admin address using pull-over-push pattern.\\n     * @param _superAdmin An address of a potential super admin.\\n     */\\n    function transferSuperAdmin(address _superAdmin) external;\\n\\n    /**\\n     * @notice Accepts the super admin role by a potential super admin.\\n     */\\n    function acceptSuperAdmin() external;\\n\\n    /**\\n     * @notice Returns the address of the super admin.\\n     * @return The address of the super admin.\\n     */\\n    function superAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the potential super admin.\\n     * @return The address of the potential super admin.\\n     */\\n    function potentialSuperAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Checks if the caller is a valid super admin.\\n     * @param caller The address to check.\\n     */\\n    function isValidSuperAdmin(address caller) external view;\\n}\\n\\n/**\\n * @title Dollet IAdminStructure\\n * @author Dollet Team\\n * @notice Interface for managing admin roles.\\n */\\ninterface IAdminStructure is ISuperAdmin {\\n    /**\\n     * @notice Logs the information when an admin is added.\\n     * @param admin The address of the added admin.\\n     */\\n    event AddedAdmin(address admin);\\n\\n    /**\\n     * @notice Logs the information when an admin is removed.\\n     * @param admin The address of the removed admin.\\n     */\\n    event RemovedAdmin(address admin);\\n\\n    /**\\n     * @notice Adds multiple addresses as admins.\\n     * @param _admins The addresses to add as admins.\\n     */\\n    function addAdmins(address[] calldata _admins) external;\\n\\n    /**\\n     * @notice Removes multiple addresses from admins.\\n     * @param _admins The addresses to remove from admins.\\n     */\\n    function removeAdmins(address[] calldata _admins) external;\\n\\n    /**\\n     * @notice Checks if the caller is a valid admin.\\n     * @param caller The address to check.\\n     */\\n    function isValidAdmin(address caller) external view;\\n\\n    /**\\n     * @notice Checks if an account is an admin.\\n     * @param account The address to check.\\n     * @return A boolean indicating if the account is an admin.\\n     */\\n    function isAdmin(address account) external view returns (bool);\\n\\n    /**\\n     * @notice Returns all the admin addresses.\\n     * @return An array of admin addresses.\\n     */\\n    function getAllAdmins() external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"src/libraries/OracleErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title Dollet OracleErrors library\\n * @author Dollet Team\\n * @notice Library with all Oracle errors.\\n */\\nlibrary OracleErrors {\\n    error WrongBalancerPoolTokensNumber();\\n    error WrongCurvePoolTokenIndex();\\n    error WrongValidityDuration();\\n    error WrongTwabPeriod();\\n    error StalePrice();\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title ICurvePool interface\\n * @author Dollet Team\\n * @notice Curve pool interface. This interface defines the functions for interacting with the Curve pool contract.\\n */\\ninterface ICurvePool {\\n    /**\\n     * @notice Performs an exchange inside of pool.\\n     * @param _i Index of the `from` token.\\n     * @param _j Index of the `to` token.\\n     * @param _dx Desired output amount.\\n     * @param _minDy Minimum final output token received in an exchange.\\n     */\\n    function exchange(uint256 _i, uint256 _j, uint256 _dx, uint256 _minDy) external payable;\\n\\n    /**\\n     * @notice Performs an exchange inside of pool.\\n     * @param _i Index of the `from` token.\\n     * @param _j Index of the `to` token.\\n     * @param _dx Desired output amount.\\n     * @param _minDy Minimum final output token received in an exchange.\\n     */\\n    function exchange(int128 _i, int128 _j, uint256 _dx, uint256 _minDy) external payable;\\n\\n    /**\\n     * @notice Returns the address of the token at an index.\\n     * @param _i Index of the token to get the address for.\\n     * @return The address of the token at an index.\\n     */\\n    function coins(uint256 _i) external view returns (address);\\n\\n    /**\\n     * @notice Returns price of a Curve pair token given in another Curve pair token.\\n     * @param _i Index of the `from` token.\\n     * @param _j Index of the `to` token.\\n     * @param _dx Decimal precision.\\n     */\\n    function get_dy(int128 _i, int128 _j, uint256 _dx) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\n/**\\n * @title Dollet IOracle\\n * @author Dollet Team\\n * @notice An interface that all oracles implement.\\n */\\ninterface IOracle {\\n    /**\\n     * @notice Allows the super admin to change the admin structure contract.\\n     * @param _adminStructure Admin structure contract address.\\n     */\\n    function setAdminStructure(address _adminStructure) external;\\n\\n    /**\\n     * @notice Returns the latest answer.\\n     * @return The latest answer.\\n     */\\n    function latestAnswer() external view returns (int256);\\n\\n    /**\\n     * @notice Returns the data from the latest round.\\n     * @return _roundId The round ID.\\n     * @return _answer The answer from the latest round.\\n     * @return _startedAt Timestamp of when the round started.\\n     * @return _updatedAt Timestamp of when the round was updated.\\n     * @return _answeredInRound Deprecated. Previously used when answers could take multiple rounds to be computed.\\n     */\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 _roundId, int256 _answer, uint256 _startedAt, uint256 _updatedAt, uint80 _answeredInRound);\\n\\n    /**\\n     * @notice Returns the number of decimals in the answer.\\n     * @return The number of decimals in the answer.\\n     */\\n    function decimals() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@pendle/core-v2/contracts/=lib/pendle-core-v2-public/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@uniswap/v2-periphery/contracts/=lib/v2-periphery/contracts/\",\r\n      \"@uniswap/v3-periphery/contracts/=lib/v3-periphery/contracts/\",\r\n      \"@uniswap/v2-core/contracts/=lib/v2-core/contracts/\",\r\n      \"@uniswap/v3-core/contracts/=lib/v3-core/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/\",\r\n      \"v2-core/=lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\",\r\n      \"v3-core/=lib/v3-core/contracts/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 8000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongCurvePoolTokenIndex\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminStructure\",\"outputs\":[{\"internalType\":\"contract IAdminStructure\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminStructure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategyHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminStructure\",\"type\":\"address\"}],\"name\":\"setAdminStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyHelper\",\"outputs\":[{\"internalType\":\"contract IStrategyHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OracleCurveWeETH", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "8000", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}