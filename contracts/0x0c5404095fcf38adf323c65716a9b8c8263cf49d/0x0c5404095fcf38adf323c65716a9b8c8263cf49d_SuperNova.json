{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function burn(uint256 value) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IStaking {\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n\r\n    function stake(uint256 amount) external;\r\n    function stakeFor(\r\n        address user,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function unstake(uint256 amount) external;\r\n\r\n    function totalStakedFor(address addr) external view returns (uint256);\r\n\r\n    function totalStaked() external view returns (uint256);\r\n\r\n    function supportsHistory() external pure returns (bool);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary MathUtils {\r\n    function logbase2(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        int256 msb = 0;\r\n        int256 xc = x;\r\n        if (xc >= 0x10000000000000000) {\r\n            xc >>= 64;\r\n            msb += 64;\r\n        }\r\n        if (xc >= 0x100000000) {\r\n            xc >>= 32;\r\n            msb += 32;\r\n        }\r\n        if (xc >= 0x10000) {\r\n            xc >>= 16;\r\n            msb += 16;\r\n        }\r\n        if (xc >= 0x100) {\r\n            xc >>= 8;\r\n            msb += 8;\r\n        }\r\n        if (xc >= 0x10) {\r\n            xc >>= 4;\r\n            msb += 4;\r\n        }\r\n        if (xc >= 0x4) {\r\n            xc >>= 2;\r\n            msb += 2;\r\n        }\r\n        if (xc >= 0x2) msb += 1; // No need to shift xc anymore\r\n\r\n        int256 result = (msb - 64) << 64;\r\n        uint256 ux = uint256(x) << (127 - msb);\r\n        for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\r\n            ux *= ux;\r\n            uint256 b = ux >> 255;\r\n            ux >>= 127 + b;\r\n            result += bit * int256(b);\r\n        }\r\n\r\n        return int128(result);\r\n    }\r\n\r\n    function ln(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        return\r\n            int128(\r\n                (uint256(logbase2(x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >>\r\n                    128\r\n            );\r\n    }\r\n    \r\n    function logbase10(int128 x) internal pure returns (int128) {\r\n        require(x > 0);\r\n\r\n        return\r\n            int128(\r\n                (uint256(logbase2(x)) * 0x4d104d427de7fce20a6e420e02236748) >>\r\n                    128\r\n            );\r\n    }\r\n\r\n    // wrapper functions to allow testing\r\n    function testlogbase2(int128 x) public pure returns (int128) {\r\n        return logbase2(x);\r\n    }\r\n\r\n    function testlogbase10(int128 x) public pure returns (int128) {\r\n        return logbase10(x);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ISuperNova is IStaking, Ownable {\r\n    // events\r\n    event RewardsDistributed(address indexed user, uint256 amount);\r\n    event RewardsFunded(\r\n        uint256 amount,\r\n        uint256 duration,\r\n        uint256 start,\r\n        uint256 total\r\n    );\r\n    event RewardsUnlocked(uint256 amount, uint256 total);\r\n    event RewardsExpired(uint256 amount, uint256 duration, uint256 start);\r\n    event CliqSpent(address indexed user, uint256 amount);\r\n    event CliqWithdrawn(uint256 amount);\r\n\r\n    // IStaking\r\n    /**\r\n     * @notice no support for history\r\n     * @return false\r\n     */\r\n    function supportsHistory() external override pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    // ISuperNova\r\n    /**\r\n     * @return staking token for this SuperNova\r\n     */\r\n    function stakingToken() external virtual view returns (address);\r\n\r\n    /**\r\n     * @return reward token for this SuperNova\r\n     */\r\n    function rewardToken() external virtual view returns (address);\r\n\r\n    /**\r\n     * @notice fund SuperNova by locking up reward tokens for distribution\r\n     * @param duration period (seconds) over which funding will be unlocked\r\n     */\r\n    function fund(uint256 duration) external payable virtual;\r\n\r\n    /**\r\n     * @notice fund SuperNova by locking up reward tokens for future distribution\r\n     * @param duration period (seconds) over which funding will be unlocked\r\n     * @param start time (seconds) at which funding begins to unlock\r\n     */\r\n    function fund(\r\n        uint256 duration,\r\n        uint256 start\r\n    ) external payable virtual;\r\n\r\n    /**\r\n     * @notice withdraw CLIQ tokens applied during unstaking\r\n     * @param amount number of CLIQ to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external virtual;\r\n\r\n    /**\r\n     * @notice unstake while applying CLIQ token for boosted rewards\r\n     * @param amount number of tokens to unstake\r\n     * @param cliq number of CLIQ tokens to apply for boost\r\n     */\r\n    function unstake(\r\n        uint256 amount,\r\n        uint256 cliq\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice update accounting, unlock tokens, etc.\r\n     */\r\n    function update() external virtual;\r\n\r\n    /**\r\n     * @notice clean SuperNova, expire old fundings, etc.\r\n     */\r\n    function clean() external virtual;\r\n}\r\n\r\ncontract SuperNovaPool is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC20 public token;\r\n\r\n    constructor(address token_) public {\r\n        token = IERC20(token_);\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external onlyOwner {\r\n        token.safeTransfer(to, value);\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n    function transfer(address dst, uint wad) external returns (bool);\r\n}\r\n\r\ncontract SuperNova is ISuperNova, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using MathUtils for int128;\r\n\r\n    // single stake by user\r\n    struct Stake {\r\n        uint256 shares;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // summary of total user stake/shares\r\n    struct User {\r\n        uint256 shares;\r\n        uint256 shareSeconds;\r\n        uint256 lastUpdated;\r\n    }\r\n\r\n    // single funding/reward schedule\r\n    struct Funding {\r\n        uint256 amount;\r\n        uint256 shares;\r\n        uint256 unlocked;\r\n        uint256 lastUpdated;\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 duration;\r\n    }\r\n\r\n    // constants\r\n    uint256 public constant BONUS_DECIMALS = 18;\r\n    uint256 public constant INITIAL_SHARES_PER_TOKEN = 10**6;\r\n    uint256 public constant MAX_ACTIVE_FUNDINGS = 16;\r\n\r\n\r\n    // token pool fields\r\n    SuperNovaPool private immutable _stakingPool;\r\n    SuperNovaPool private immutable _unlockedPool;\r\n    SuperNovaPool private immutable _lockedPool;\r\n    Funding[] public fundings;\r\n\r\n    // user staking fields\r\n    mapping(address => User) public userTotals;\r\n    mapping(address => Stake[]) public userStakes;\r\n\r\n    // time bonus fields\r\n    uint256 public immutable bonusMin;\r\n    uint256 public immutable bonusMax;\r\n    uint256 public immutable bonusPeriod;\r\n\r\n    // global state fields\r\n    uint256 public totalLockedShares;\r\n    uint256 public totalStakingShares;\r\n    uint256 public totalRewards;\r\n    uint256 public totalCliqRewards;\r\n    uint256 public totalStakingShareSeconds;\r\n    uint256 public lastUpdated;\r\n\r\n    address public bondingContract;\r\n\r\n    // cliq fields\r\n    IERC20 private immutable _cliq;\r\n    IWETH private _weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    address private marketing = 0xcf57ff60410d32d52357772363cd4CD57e70D312;\r\n    address private community = 0xa3297BD4CfB1AC966b6Cdc7e81FD239016Bd6Fc2;\r\n    \r\n    modifier onlyOperator() {\r\n        require(msg.sender == owner() || msg.sender == bondingContract, \"Ownable: caller is not the operator\");\r\n        _;\r\n    }\r\n    /**\r\n     * @param stakingToken_ the token that will be staked\r\n     * @param rewardToken_ the token distributed to users as they unstake\r\n     * @param bonusMin_ initial time bonus\r\n     * @param bonusMax_ maximum time bonus\r\n     * @param bonusPeriod_ period (in seconds) over which time bonus grows to max\r\n     * @param cliq_ address for Cliq token\r\n     */\r\n    constructor(\r\n        address stakingToken_,\r\n        address rewardToken_,\r\n        uint256 bonusMin_,\r\n        uint256 bonusMax_,\r\n        uint256 bonusPeriod_,\r\n        address cliq_\r\n    ) public {\r\n        require(rewardToken_ == address(_weth), \"SuperNova: reward tokens should be weth.\");\r\n        require(\r\n            bonusMin_ <= bonusMax_,\r\n            \"SuperNova: initial time bonus greater than max\"\r\n        );\r\n        _stakingPool = new SuperNovaPool(stakingToken_);\r\n        _unlockedPool = new SuperNovaPool(rewardToken_);\r\n        _lockedPool = new SuperNovaPool(rewardToken_);\r\n\r\n        bonusMin = bonusMin_;\r\n        bonusMax = bonusMax_;\r\n        bonusPeriod = bonusPeriod_;\r\n\r\n        _cliq = IERC20(cliq_);\r\n\r\n        lastUpdated = block.timestamp;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    // IStaking\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function stake(uint256 amount) external override {\r\n        _stake(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function stakeFor(\r\n        address user,\r\n        uint256 amount\r\n    ) external override {\r\n        _stake(msg.sender, user, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function unstake(uint256 amount) external override {\r\n        _unstake(amount, 0);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function totalStakedFor(address addr)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (totalStakingShares == 0) {\r\n            return 0;\r\n        }\r\n        return\r\n            totalStaked().mul(userTotals[addr].shares).div(totalStakingShares);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IStaking\r\n     */\r\n    function totalStaked() public override view returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    // ISuperNova\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function stakingToken() public override view returns (address) {\r\n        return address(_stakingPool.token());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function rewardToken() public override view returns (address) {\r\n        return address(_unlockedPool.token());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function fund(uint256 duration) public payable override {\r\n        fund(duration, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function fund(\r\n        uint256 duration,\r\n        uint256 start\r\n    ) public payable override onlyOperator {\r\n        uint256 amount = msg.value;\r\n        // validate\r\n        require(amount > 0, \"SuperNova: funding amount is zero\");\r\n        require(start >= block.timestamp, \"SuperNova: funding start is past\");\r\n        require(\r\n            fundings.length < MAX_ACTIVE_FUNDINGS,\r\n            \"SuperNova: exceeds max active funding schedules\"\r\n        );\r\n        _weth.deposit{value: amount}();\r\n\r\n        // update bookkeeping\r\n        _update(msg.sender);\r\n\r\n        // mint shares at current rate\r\n        uint256 lockedTokens = totalLocked();\r\n        uint256 mintedLockedShares = (lockedTokens > 0)\r\n            ? totalLockedShares.mul(amount).div(lockedTokens)\r\n            : amount.mul(INITIAL_SHARES_PER_TOKEN);\r\n\r\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\r\n\r\n        if(msg.sender == bondingContract) {\r\n            //update funding info\r\n            fundings[fundings.length - 1].amount = fundings[fundings.length - 1].amount.add(amount);\r\n            fundings[fundings.length - 1].shares = fundings[fundings.length - 1].shares.add(mintedLockedShares);\r\n        } else {\r\n            // create new funding\r\n            fundings.push(\r\n                Funding({\r\n                    amount: amount,\r\n                    shares: mintedLockedShares,\r\n                    unlocked: 0,\r\n                    lastUpdated: start,\r\n                    start: start,\r\n                    end: start.add(duration),\r\n                    duration: duration\r\n                })\r\n            );\r\n        }\r\n\r\n        // do transfer of funding\r\n        _lockedPool.token().safeTransferFrom(\r\n            address(this),\r\n            address(_lockedPool),\r\n            amount\r\n        );\r\n        emit RewardsFunded(amount, duration, start, totalLocked());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function withdraw(uint256 amount) external override {\r\n        require(amount > 0, \"SuperNova: withdraw amount is zero\");\r\n        require(\r\n            amount <= _cliq.balanceOf(address(this)),\r\n            \"SuperNova: withdraw amount exceeds balance\"\r\n        );\r\n        // do transfer\r\n        //Burn Half tokens and half transfer to owner address\r\n        uint256 burnedToken = amount.div(2);\r\n\r\n        _cliq.burn(burnedToken);\r\n        _cliq.safeTransfer(marketing, burnedToken * 75 / 100);\r\n        _cliq.safeTransfer(community, burnedToken * 25 / 100);\r\n\r\n        emit CliqWithdrawn(amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function unstake(\r\n        uint256 amount,\r\n        uint256 cliq\r\n    ) external override {\r\n        _unstake(amount, cliq);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function update() external override nonReentrant {\r\n        _update(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISuperNova\r\n     */\r\n    function clean() external override onlyOwner {\r\n        // update bookkeeping\r\n        _update(msg.sender);\r\n\r\n        // check for stale funding schedules to expire\r\n        uint256 removed = 0;\r\n        uint256 originalSize = fundings.length;\r\n        for (uint256 i = 0; i < originalSize; i++) {\r\n            Funding storage funding = fundings[i.sub(removed)];\r\n            uint256 idx = i.sub(removed);\r\n\r\n            if (_unlockable(idx, block.timestamp) == 0 && block.timestamp >= funding.end) {\r\n                emit RewardsExpired(\r\n                    funding.amount,\r\n                    funding.duration,\r\n                    funding.start\r\n                );\r\n\r\n                // remove at idx by copying last element here, then popping off last\r\n                // (we don't care about order)\r\n                fundings[idx] = fundings[fundings.length.sub(1)];\r\n                fundings.pop();\r\n                removed = removed.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // SuperNova\r\n\r\n    /**\r\n     * @dev internal implementation of staking methods\r\n     * @param staker address to do deposit of staking tokens\r\n     * @param beneficiary address to gain credit for this stake operation\r\n     * @param amount number of staking tokens to deposit\r\n     */\r\n    function _stake(\r\n        address staker,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) private nonReentrant {\r\n        // validate\r\n        require(amount > 0, \"SuperNova: stake amount is zero\");\r\n        require(\r\n            beneficiary != address(0),\r\n            \"Supernova: beneficiary is zero address\"\r\n        );\r\n\r\n        // mint staking shares at current rate\r\n        uint256 mintedStakingShares = (totalStakingShares > 0)\r\n            ? totalStakingShares.mul(amount).div(totalStaked())\r\n            : amount.mul(INITIAL_SHARES_PER_TOKEN);\r\n        require(mintedStakingShares > 0, \"SuperNova: stake amount too small\");\r\n\r\n        // update bookkeeping\r\n        _update(beneficiary);\r\n\r\n        // update user staking info\r\n        User storage user = userTotals[beneficiary];\r\n        user.shares = user.shares.add(mintedStakingShares);\r\n        user.lastUpdated = block.timestamp;\r\n\r\n        userStakes[beneficiary].push(\r\n            Stake(mintedStakingShares, block.timestamp)\r\n        );\r\n\r\n        // add newly minted shares to global total\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n\r\n        // transactions\r\n        _stakingPool.token().safeTransferFrom(\r\n            staker,\r\n            address(_stakingPool),\r\n            amount\r\n        );\r\n\r\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev internal implementation of unstaking methods\r\n     * @param amount number of tokens to unstake\r\n     * @param cliq number of CLIQ tokens applied to unstaking operation\r\n     * @return number of reward tokens distributed\r\n     */\r\n    function _unstake(uint256 amount, uint256 cliq)\r\n        private\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        // validate\r\n        require(amount > 0, \"SuperNova: unstake amount is zero\");\r\n        require(\r\n            totalStakedFor(msg.sender) >= amount,\r\n            \"Supernova: unstake amount exceeds balance\"\r\n        );\r\n\r\n        // update bookkeeping\r\n        _update(msg.sender);\r\n\r\n        // do unstaking, first-in last-out, respecting time bonus\r\n        uint256 timeWeightedShareSeconds = _unstakeFirstInLastOut(amount);\r\n\r\n        // compute and apply CLIQ token bonus\r\n        uint256 cliqWeightedShareSeconds = cliqBonus(cliq)\r\n            .mul(timeWeightedShareSeconds)\r\n            .div(10**BONUS_DECIMALS);\r\n\r\n        uint256 rewardAmount = totalUnlocked()\r\n            .mul(cliqWeightedShareSeconds)\r\n            .div(totalStakingShareSeconds.add(cliqWeightedShareSeconds));\r\n\r\n        // update global stats for distributions\r\n        if (cliq > 0) {\r\n            totalCliqRewards = totalCliqRewards.add(rewardAmount);\r\n        }\r\n        totalRewards = totalRewards.add(rewardAmount);\r\n\r\n        // transactions\r\n        _stakingPool.transfer(msg.sender, amount);\r\n        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), \"\");\r\n        if (rewardAmount > 0) {\r\n            _unlockedPool.transfer(address(this), rewardAmount);\r\n            _weth.withdraw(rewardAmount);\r\n            msg.sender.transfer(rewardAmount);\r\n            emit RewardsDistributed(msg.sender, rewardAmount);\r\n        }\r\n        if (cliq > 0) {\r\n            _cliq.safeTransferFrom(msg.sender, address(this), cliq);\r\n            emit CliqSpent(msg.sender, cliq);\r\n        }\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev helper function to actually execute unstaking, first-in last-out, \r\n     while computing and applying time bonus. This function also updates\r\n     user and global totals for shares and share-seconds.\r\n     * @param amount number of staking tokens to withdraw\r\n     * @return time bonus weighted staking share seconds\r\n     */\r\n    function _unstakeFirstInLastOut(uint256 amount) private returns (uint256) {\r\n        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(\r\n            totalStaked()\r\n        );\r\n        require(stakingSharesToBurn > 0, \"Supernova: unstake amount too small\");\r\n\r\n        // redeem from most recent stake and go backwards in time.\r\n        uint256 shareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 bonusWeightedShareSeconds = 0;\r\n        Stake[] storage stakes = userStakes[msg.sender];\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = stakes[stakes.length - 1];\r\n            uint256 stakeTime = block.timestamp.sub(lastStake.timestamp);\r\n\r\n            uint256 bonus = timeBonus(stakeTime);\r\n\r\n            if (lastStake.shares <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                bonusWeightedShareSeconds = bonusWeightedShareSeconds.add(\r\n                    lastStake.shares.mul(stakeTime).mul(bonus).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                shareSecondsToBurn = shareSecondsToBurn.add(\r\n                    lastStake.shares.mul(stakeTime)\r\n                );\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.shares);\r\n                stakes.pop();\r\n            } else {\r\n                // partially redeem a past stake\r\n                bonusWeightedShareSeconds = bonusWeightedShareSeconds.add(\r\n                    sharesLeftToBurn.mul(stakeTime).mul(bonus).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                shareSecondsToBurn = shareSecondsToBurn.add(\r\n                    sharesLeftToBurn.mul(stakeTime)\r\n                );\r\n                lastStake.shares = lastStake.shares.sub(sharesLeftToBurn);\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        // update user totals\r\n        User storage user = userTotals[msg.sender];\r\n        user.shareSeconds = user.shareSeconds.sub(shareSecondsToBurn);\r\n        user.shares = user.shares.sub(stakingSharesToBurn);\r\n        user.lastUpdated = block.timestamp;\r\n\r\n        // update global totals\r\n        totalStakingShareSeconds = totalStakingShareSeconds.sub(\r\n            shareSecondsToBurn\r\n        );\r\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\r\n\r\n        return bonusWeightedShareSeconds;\r\n    }\r\n\r\n    /**\r\n     * @dev internal implementation of update method\r\n     * @param addr address for user accounting update\r\n     */\r\n    function _update(address addr) private {\r\n        _unlockTokens();\r\n\r\n        // global accounting\r\n        uint256 deltaTotalShareSeconds = (block.timestamp.sub(lastUpdated)).mul(\r\n            totalStakingShares\r\n        );\r\n        totalStakingShareSeconds = totalStakingShareSeconds.add(\r\n            deltaTotalShareSeconds\r\n        );\r\n        lastUpdated = block.timestamp;\r\n\r\n        // user accounting\r\n        User storage user = userTotals[addr];\r\n        uint256 deltaUserShareSeconds = (block.timestamp.sub(user.lastUpdated))\r\n            .mul(user.shares);\r\n        user.shareSeconds = user.shareSeconds.add(deltaUserShareSeconds);\r\n        user.lastUpdated = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev unlocks reward tokens based on funding schedules\r\n     */\r\n    function _unlockTokens() private {\r\n        uint256 tokensToUnlock = 0;\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        if (totalLockedShares == 0) {\r\n            // handle any leftover\r\n            tokensToUnlock = lockedTokens;\r\n        } else {\r\n            // normal case: unlock some shares from each funding schedule\r\n            uint256 sharesToUnlock = 0;\r\n            for (uint256 i = 0; i < fundings.length; i++) {\r\n                uint256 shares = _unlockable(i, block.timestamp);\r\n                Funding storage funding = fundings[i];\r\n                if (shares > 0) {\r\n                    funding.unlocked = funding.unlocked.add(shares);\r\n                    funding.lastUpdated = block.timestamp;\r\n                    sharesToUnlock = sharesToUnlock.add(shares);\r\n                }\r\n            }\r\n            tokensToUnlock = sharesToUnlock.mul(lockedTokens).div(\r\n                totalLockedShares\r\n            );\r\n            totalLockedShares = totalLockedShares.sub(sharesToUnlock);\r\n        }\r\n\r\n        if (tokensToUnlock > 0) {\r\n            _lockedPool.transfer(address(_unlockedPool), tokensToUnlock);\r\n            emit RewardsUnlocked(tokensToUnlock, totalUnlocked());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev helper function to compute updates to funding schedules\r\n     * @param idx index of the funding\r\n     * @param unlockTime timestamp to unlock\r\n     * @return the number of unlockable shares\r\n     */\r\n    function _unlockable(uint256 idx, uint256 unlockTime) private view returns (uint256) {\r\n        Funding storage funding = fundings[idx];\r\n\r\n        // funding schedule is in future\r\n        if (unlockTime < funding.start) {\r\n            return 0;\r\n        }\r\n        // empty\r\n        if (funding.unlocked >= funding.shares) {\r\n            return 0;\r\n        }\r\n        // handle zero-duration period or leftover dust from integer division\r\n        if (unlockTime >= funding.end) {\r\n            return funding.shares.sub(funding.unlocked);\r\n        }\r\n\r\n        return\r\n            (unlockTime.sub(funding.lastUpdated)).mul(funding.shares).div(\r\n                funding.duration\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice compute time bonus earned as a function of staking time\r\n     * @param time length of time for which the tokens have been staked\r\n     * @return bonus multiplier for time\r\n     */\r\n    function timeBonus(uint256 time) public view returns (uint256) {\r\n        if (time >= bonusPeriod) {\r\n            return uint256(10**BONUS_DECIMALS).add(bonusMax);\r\n        }\r\n\r\n        // linearly interpolate between bonus min and bonus max\r\n        uint256 bonus = bonusMin.add(\r\n            (bonusMax.sub(bonusMin)).mul(time).div(bonusPeriod)\r\n        );\r\n        return uint256(10**BONUS_DECIMALS).add(bonus);\r\n    }\r\n\r\n    /**\r\n     * @notice compute CLIQ bonus as a function of usage ratio and CLIQ spent\r\n     * @param cliq number of CLIQ token applied to bonus\r\n     * @return multiplier value\r\n     */\r\n    function cliqBonus(uint256 cliq) public view returns (uint256) {\r\n        if (cliq == 0) {\r\n            return 10**BONUS_DECIMALS;\r\n        }\r\n\r\n       require(\r\n            cliq >= 10**BONUS_DECIMALS,\r\n            \"SUPERNOVA: CLIQ amount is between 0 and 1\"\r\n        );\r\n        uint256 buffer = uint256(5 * 10**(BONUS_DECIMALS - 2)); // 0.05\r\n        uint256 r = ratio().add(buffer);\r\n        uint256 x = cliq.add(buffer);\r\n\r\n        return\r\n            uint256(10**BONUS_DECIMALS).add(\r\n                uint256(int128(x.mul(2**64).div(r)).logbase10())\r\n                    .mul(10**BONUS_DECIMALS)\r\n                    .div(2**64)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @return portion of rewards which have been boosted by CLIQ token\r\n     */\r\n    function ratio() public view returns (uint256) {\r\n        if (totalRewards == 0) {\r\n            return 0;\r\n        }\r\n        return totalCliqRewards.mul(10**BONUS_DECIMALS).div(totalRewards);\r\n    }\r\n\r\n    // SuperNova -- informational functions\r\n\r\n    /**\r\n     * @return total number of locked reward tokens\r\n     */\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return total number of unlocked reward tokens\r\n     */\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return number of active funding schedules\r\n     */\r\n    function fundingCount() public view returns (uint256) {\r\n        return fundings.length;\r\n    }\r\n\r\n    /**\r\n     * @param addr address of interest\r\n     * @return number of active stakes for user\r\n     */\r\n    function stakeCount(address addr) public view returns (uint256) {\r\n        return userStakes[addr].length;\r\n    }\r\n\r\n    /**\r\n     * @notice preview estimated reward distribution for unstaking\r\n     * @param addr address of interest for preview\r\n     * @param amount number of tokens that would be unstaked\r\n     * @param cliq number of CLIQ tokens that would be applied\r\n     * @return estimated reward\r\n     * @return estimated overall multiplier\r\n     */\r\n    function preview(\r\n        address addr,\r\n        uint256 amount,\r\n        uint256 cliq\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // compute expected updates to global totals\r\n        uint256 deltaUnlocked = 0;\r\n        if (totalLockedShares != 0) {\r\n            uint256 sharesToUnlock = 0;\r\n            for (uint256 i = 0; i < fundings.length; i++) {\r\n                sharesToUnlock = sharesToUnlock.add(_unlockable(i, block.timestamp));\r\n            }\r\n            deltaUnlocked = sharesToUnlock.mul(totalLocked()).div(\r\n                totalLockedShares\r\n            );\r\n        }\r\n\r\n        // no need for unstaking/rewards computation\r\n        if (amount == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        // check unstake amount\r\n        require(\r\n            amount <= totalStakedFor(addr),\r\n            \"SuperNova: preview amount exceeds balance\"\r\n        );\r\n\r\n        // compute unstake amount in shares\r\n        uint256 shares = totalStakingShares.mul(amount).div(totalStaked());\r\n        require(shares > 0, \"SuperNova: preview amount too small\");\r\n\r\n        uint256 rawShareSeconds = 0;\r\n        uint256 timeBonusShareSeconds = 0;\r\n\r\n        // compute first-in-last-out, time bonus weighted, share seconds\r\n        uint256 i = userStakes[addr].length.sub(1);\r\n        while (shares > 0) {\r\n            Stake storage s = userStakes[addr][i];\r\n            uint256 time = block.timestamp.sub(s.timestamp);\r\n\r\n            if (s.shares < shares) {\r\n                rawShareSeconds = rawShareSeconds.add(s.shares.mul(time));\r\n                timeBonusShareSeconds = timeBonusShareSeconds.add(\r\n                    s.shares.mul(time).mul(timeBonus(time)).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                shares = shares.sub(s.shares);\r\n            } else {\r\n                rawShareSeconds = rawShareSeconds.add(shares.mul(time));\r\n                timeBonusShareSeconds = timeBonusShareSeconds.add(\r\n                    shares.mul(time).mul(timeBonus(time)).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                break;\r\n            }\r\n            // this will throw on underflow\r\n            i = i.sub(1);\r\n        }\r\n\r\n        // apply cliq bonus\r\n        uint256 cliqBonusShareSeconds = cliqBonus(cliq)\r\n            .mul(timeBonusShareSeconds)\r\n            .div(10**BONUS_DECIMALS);\r\n\r\n        // compute rewards based on expected updates\r\n        uint256 expectedTotalShareSeconds = totalStakingShareSeconds\r\n            .add((block.timestamp.sub(lastUpdated)).mul(totalStakingShares))\r\n            .add(cliqBonusShareSeconds)\r\n            .sub(rawShareSeconds);\r\n\r\n        uint256 reward = (totalUnlocked().add(deltaUnlocked))\r\n            .mul(cliqBonusShareSeconds)\r\n            .div(expectedTotalShareSeconds);\r\n\r\n        // compute effective bonus\r\n        uint256 bonus = uint256(10**BONUS_DECIMALS)\r\n            .mul(cliqBonusShareSeconds)\r\n            .div(rawShareSeconds);\r\n\r\n        return (\r\n            reward,\r\n            bonus\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice preview estimated reward distribution for unstaking for future\r\n     * @param addr address of interest for preview\r\n     * @param timestamp end time for reward\r\n     * @return estimated reward\r\n     * @return estimated overall multiplier\r\n     */\r\n    function previewForFuture(\r\n        address addr,\r\n        uint256 timestamp\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        // compute expected updates to global totals\r\n        uint256 deltaUnlocked = 0;\r\n        if (totalLockedShares != 0) {\r\n            uint256 sharesToUnlock = 0;\r\n            for (uint256 i = 0; i < fundings.length; i++) {\r\n                sharesToUnlock = sharesToUnlock.add(_unlockable(i, timestamp));\r\n            }\r\n            deltaUnlocked = sharesToUnlock.mul(totalLocked()).div(\r\n                totalLockedShares\r\n            );\r\n        }\r\n\r\n        // no need for unstaking/rewards computation\r\n        if (totalStakedFor(addr) == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        // compute unstake amount in shares\r\n        uint256 shares = totalStakingShares.mul(totalStakedFor(addr)).div(totalStaked());\r\n        require(shares > 0, \"SuperNova: preview amount too small\");\r\n\r\n        uint256 rawShareSeconds = 0;\r\n        uint256 timeBonusShareSeconds = 0;\r\n\r\n        // compute first-in-last-out, time bonus weighted, share seconds\r\n        uint256 i = userStakes[addr].length.sub(1);\r\n        while (shares > 0) {\r\n            Stake storage s = userStakes[addr][i];\r\n            uint256 time = timestamp.sub(s.timestamp);\r\n\r\n            if (s.shares < shares) {\r\n                rawShareSeconds = rawShareSeconds.add(s.shares.mul(time));\r\n                timeBonusShareSeconds = timeBonusShareSeconds.add(\r\n                    s.shares.mul(time).mul(timeBonus(time)).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                shares = shares.sub(s.shares);\r\n            } else {\r\n                rawShareSeconds = rawShareSeconds.add(shares.mul(time));\r\n                timeBonusShareSeconds = timeBonusShareSeconds.add(\r\n                    shares.mul(time).mul(timeBonus(time)).div(\r\n                        10**BONUS_DECIMALS\r\n                    )\r\n                );\r\n                break;\r\n            }\r\n            // this will throw on underflow\r\n            i = i.sub(1);\r\n        }\r\n\r\n        // apply cliq bonus\r\n        uint256 cliqBonusShareSeconds = cliqBonus(0)\r\n            .mul(timeBonusShareSeconds)\r\n            .div(10**BONUS_DECIMALS);\r\n\r\n        // compute rewards based on expected updates\r\n        uint256 expectedTotalShareSeconds = totalStakingShareSeconds\r\n            .add((block.timestamp.sub(lastUpdated)).mul(totalStakingShares))\r\n            .add(cliqBonusShareSeconds)\r\n            .sub(rawShareSeconds);\r\n\r\n        uint256 reward = (totalUnlocked().add(deltaUnlocked))\r\n            .mul(cliqBonusShareSeconds)\r\n            .div(expectedTotalShareSeconds);\r\n\r\n        // compute effective bonus\r\n        uint256 bonus = uint256(10**BONUS_DECIMALS)\r\n            .mul(cliqBonusShareSeconds)\r\n            .div(rawShareSeconds);\r\n\r\n        return (\r\n            reward,\r\n            bonus\r\n        );\r\n    }\r\n\r\n    function unlockFundInSec(uint256 timestamp) external view returns (uint256 unlockAmount) {\r\n        unlockAmount = 0;\r\n        uint256 fundingLen = fundings.length;\r\n        for (uint8 i=0; i<fundingLen; i++) {\r\n            Funding storage funding = fundings[i];\r\n            if (timestamp < funding.end) {\r\n                unlockAmount = unlockAmount.add((funding.shares).div(funding.duration));\r\n            }\r\n        }\r\n    }\r\n\r\n    function setBondingContract(address _bondingContract) external onlyOwner {\r\n        bondingContract = _bondingContract;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cliq_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CliqSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CliqWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"RewardsExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"RewardsFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"RewardsUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_SHARES_PER_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ACTIVE_FUNDINGS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cliq\",\"type\":\"uint256\"}],\"name\":\"cliqBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliq\",\"type\":\"uint256\"}],\"name\":\"preview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"previewForFuture\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondingContract\",\"type\":\"address\"}],\"name\":\"setBondingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"timeBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCliqRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShareSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"unlockFundInSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliq\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SuperNova", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab4dc161cc0017befb711bf42a1b81441db624e9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000003782dace9d9000000000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000ab4dc161cc0017befb711bf42a1b81441db624e9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0cb519e11367fbdc714c8611a8e25c0335d5476150874065ec982cdd113ae2d8"}