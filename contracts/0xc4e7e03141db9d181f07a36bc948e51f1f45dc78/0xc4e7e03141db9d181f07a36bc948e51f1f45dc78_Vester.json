{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Vester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ncontract Vester {\\n    uint256 public vestingTime;\\n    address public esembr;\\n\\n    uint256 multiplier;\\n    uint256 public precision = 1e9;\\n\\n    mapping (address => uint256) public entryTimes; // timestamp the user started vesting\\n    mapping (address => uint256) public lastClaim; // timestamp the user last claimed their vested tokens\\n    mapping (address => uint256) public vestingAmount; // stays constant throughout the entire vesting process.\\n\\n    constructor(uint256 timeframe, uint256 _multiplier, address _esembr){\\n        require(timeframe > 0, \\\"Timeframe cannot be 0\\\");\\n\\t\\trequire(multiplier <= 10_000, \\\"Multiplier too high\\\");\\n\\n        vestingTime = timeframe;\\n        multiplier = _multiplier;\\n        esembr = _esembr;\\n    }\\n\\n    modifier onlyEsEMBR() {\\n        require(msg.sender == esembr, \\\"Vester: Only esEMBR contract can call this function\\\");\\n        _;\\n    }\\n\\n    // This function is only called by esEMBR contract. esEMBR also calls claim for this user.\\n    // **claim() MUST be called by esEMBR and handled correctly before calling vest()**\\n    function vest(address user, uint256 amount) onlyEsEMBR external {\\n        require(amount >= precision, \\\"Vester: Amount cant be smaller than 1,000,000,000\\\");\\n\\n        if (vestingAmount[user] != 0) {\\n            // claim then revest\\n            uint256 time_left = (entryTimes[user] + vestingTime - lastClaim[user]) * precision;\\n            uint256 pct_to_claim = time_left / vestingTime;\\n            uint256 amount_left_unvested = pct_to_claim * vestingAmount[user] / precision;\\n\\n            amount += amount_left_unvested;\\n        }\\n\\n        vestingAmount[user] = amount;\\n        entryTimes[user] = block.timestamp;\\n        lastClaim[user] = block.timestamp;\\n    }\\n\\n    function claim(address user) onlyEsEMBR public returns (uint256) {\\n        (uint256 claimable_amount, uint256 entry_time) = claimable(user);\\n        if (claimable_amount == 0) return 0;\\n\\n        if (block.timestamp > entry_time + vestingTime) {\\n            // User fully claimed all the vested tokens, delete all related records from storage\\n            delete vestingAmount[user];\\n            delete entryTimes[user];\\n            delete lastClaim[user];\\n        } else {\\n            lastClaim[user] = block.timestamp;\\n        }\\n\\n        return (claimable_amount * multiplier) / 10000;\\n    }\\n\\n    function claimable(address user) public view returns (uint256 /* claimable amount */, uint256 /* entry time */) {\\n        if (vestingAmount[user] == 0) return (0, 0);\\n\\n        uint256 entry_time = entryTimes[user];\\n        uint256 last_claim_time = lastClaim[user];\\n\\n        uint256 time_to_claim = 0;\\n        if (block.timestamp > entry_time + vestingTime) {\\n            time_to_claim = (entry_time + vestingTime - last_claim_time) * precision;\\n        } else {\\n            time_to_claim = (block.timestamp - last_claim_time) * precision;\\n        }\\n\\n        uint256 pct_to_claim = time_to_claim / vestingTime;\\n\\n        return ((pct_to_claim * vestingAmount[user] / precision), entry_time);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solady/=lib/solady/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_esembr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entryTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esembr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vester", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000041bf30ac0284a1eb286611984f1663441fbce857", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec12c921ee28c838aaeab82ff395d2e59099a9853c770027986ecb9cf1f10713"}