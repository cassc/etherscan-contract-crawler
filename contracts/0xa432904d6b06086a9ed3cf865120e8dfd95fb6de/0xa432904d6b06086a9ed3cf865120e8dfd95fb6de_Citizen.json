{"SourceCode": "pragma solidity 0.5.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n}\r\n\r\ninterface IERC721 {\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n\r\n    function baseTokenURI() external view returns (string memory);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n\r\n}\r\n\r\nlibrary Strings {\r\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string memory) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = byte(uint8(48 + i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function bytes32ToString(bytes32 x) internal pure returns (string memory) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (uint j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public secondary;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor(address _secondary) public {\r\n        owner = msg.sender;\r\n        secondary = _secondary != address(0) ? _secondary : msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrSecondary() {\r\n        require(msg.sender == owner || msg.sender == secondary, \"Only owner or secondary\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Transfer to null address is not allowed\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setSecondary(address _secondary) public onlyOwner {\r\n        secondary = _secondary;\r\n    }\r\n\r\n}\r\n\r\ncontract Beneficiary is Ownable {\r\n\r\n    address payable public beneficiary;\r\n\r\n    constructor(address _secondary) public Ownable(_secondary) {\r\n        beneficiary = msg.sender;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function withdrawal(uint256 value) public onlyOwner {\r\n        if (value > address(this).balance) {\r\n            revert(\"Insufficient balance\");\r\n        }\r\n\r\n        beneficiaryPayout(value);\r\n    }\r\n\r\n    function withdrawalAll() public onlyOwner {\r\n        beneficiaryPayout(address(this).balance);\r\n    }\r\n\r\n    function withdrawERC20Token(address payable _erc20, uint value) public onlyOwner {\r\n        require(IERC20(_erc20).transfer(beneficiary, value));\r\n        emit BeneficiaryERC20Payout(_erc20, value);\r\n    }\r\n\r\n    function beneficiaryPayout(uint256 value) internal {\r\n        beneficiary.transfer(value);\r\n        emit BeneficiaryPayout(value);\r\n    }\r\n\r\n    function beneficiaryERC20Payout(IERC20 _erc20, uint256 value) internal {\r\n        _erc20.transfer(beneficiary, value);\r\n        emit BeneficiaryERC20Payout(address(_erc20), value);\r\n    }\r\n\r\n    event BeneficiaryPayout(uint256 value);\r\n    event BeneficiaryERC20Payout(address tokenAddress, uint256 value);\r\n}\r\n\r\ncontract Manageable is Beneficiary {\r\n\r\n    uint256 DECIMALS = 10e8;\r\n\r\n    bool maintenance = false;\r\n\r\n    mapping(address => bool) public managers;\r\n\r\n    modifier onlyManager() {\r\n\r\n        require(managers[msg.sender] || msg.sender == address(this), \"Only managers allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier notOnMaintenance() {\r\n        require(!maintenance);\r\n        _;\r\n    }\r\n\r\n    constructor(address _secondary) public  Beneficiary(_secondary) {\r\n        managers[msg.sender] = true;\r\n    }\r\n\r\n    function setMaintenanceStatus(bool _status) public onlyManager {\r\n        maintenance = _status;\r\n        emit Maintenance(_status);\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwnerOrSecondary {\r\n        managers[_manager] = true;\r\n    }\r\n\r\n    function deleteManager(address _manager) public onlyOwnerOrSecondary {\r\n        delete managers[_manager];\r\n    }\r\n\r\n    event Maintenance(bool status);\r\n\r\n    event FailedPayout(address to, uint256 value);\r\n\r\n}\r\n\r\ncontract LockableToken is Manageable {\r\n    mapping(uint256 => bool) public locks;\r\n\r\n    modifier onlyNotLocked(uint256 _tokenId) {\r\n        require(!locks[_tokenId]);\r\n        _;\r\n    }\r\n\r\n    function isLocked(uint256 _tokenId) public view returns (bool) {\r\n        return locks[_tokenId];\r\n    }\r\n\r\n    function lockToken(uint256 _tokenId) public onlyManager {\r\n        locks[_tokenId] = true;\r\n    }\r\n\r\n    function unlockToken(uint256 _tokenId) public onlyManager {\r\n        locks[_tokenId] = false;\r\n    }\r\n\r\n    function _lockToken(uint256 _tokenId) internal {\r\n        locks[_tokenId] = true;\r\n    }\r\n\r\n    function _unlockToken(uint256 _tokenId) internal {\r\n        locks[_tokenId] = false;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 is Manageable, LockableToken, IERC721 {\r\n\r\n    using Strings for string;\r\n\r\n    mapping(address => uint256) public balances;\r\n    mapping(uint256 => address) public approved;\r\n    mapping(address => mapping(address => bool)) private operators;\r\n    mapping(uint256 => address) private tokenOwner;\r\n\r\n    uint256 public totalSupply = 0;\r\n\r\n    string private _tokenURI = \"\";\r\n\r\n    modifier onlyTokenOwner(uint256 _tokenId) {\r\n        require(msg.sender == tokenOwner[_tokenId]);\r\n        _;\r\n    }\r\n\r\n    function setBaseTokenURI(string memory _newTokenURI) public onlyManager {\r\n        _tokenURI = _newTokenURI;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        return tokenOwner[_tokenId];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public onlyNotLocked(_tokenId) {\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId));\r\n\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) public onlyNotLocked(_tokenId)  {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_approved != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        approved[_tokenId] = _approved;\r\n\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public {\r\n        require(_operator != msg.sender);\r\n\r\n        operators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operators[_owner][_operator];\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return approved[_tokenId];\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function transfer(address  _from, address  _to, uint256 _tokenId) public onlyTokenOwner(_tokenId) onlyNotLocked(_tokenId) {\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _transfer(address  _from, address  _to, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from);\r\n\r\n        delete approved[_tokenId];\r\n\r\n        if(_from != address(0)) {\r\n            balances[_from]--;\r\n        } else {\r\n            totalSupply++;\r\n        }\r\n\r\n        if(_to != address(0)) {\r\n            balances[_to]++;\r\n        }\r\n\r\n        tokenOwner[_tokenId] = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function _mint(uint256 _tokenId, address _owner) internal {\r\n        _transfer(address(0), _owner, _tokenId);\r\n    }\r\n\r\n    function _burn(uint256 _tokenId) internal {\r\n        _transfer(ownerOf(_tokenId), address(0), _tokenId);\r\n    }\r\n\r\n\r\n    function baseTokenURI() public view returns (string memory) {\r\n        return _tokenURI;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n        return Strings.strConcat(\r\n            baseTokenURI(),\r\n            Strings.uint2str(_tokenId)\r\n        );\r\n    }\r\n\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n\r\n}\r\n\r\n\r\n\r\ncontract Citizen is Manageable, ERC721 {\r\n\r\n    struct Token {\r\n        uint8[7] special;\r\n        uint8 generation;\r\n        bytes32 look;\r\n    }\r\n\r\n    Token[] public tokens;\r\n\r\n    constructor(address _secondary) public Manageable(_secondary) {}\r\n\r\n    function mint(address _owner, uint8[7] memory _special, uint8 _generation, bytes32 _look) public onlyManager returns (uint256){\r\n        tokens.push(Token(_special, _generation, _look));\r\n        _mint(tokens.length - 1, _owner);\r\n        return tokens.length - 1;\r\n    }\r\n\r\n    function incSpecial(uint256 _tokenId, uint8 _specId) public onlyManager {\r\n        require(_specId < 8 && tokens[_tokenId].special[_specId] < 12);\r\n\r\n        emit SpecChanged(_tokenId, _specId, tokens[_tokenId].special[_specId]);\r\n    }\r\n\r\n    function decSpecial(uint256 _tokenId, uint8 _specId) public onlyManager {\r\n        require(_specId < 8 && tokens[_tokenId].special[_specId] > 0);\r\n\r\n        tokens[_tokenId].special[_specId]--;\r\n        emit SpecChanged(_tokenId, _specId, tokens[_tokenId].special[_specId]);\r\n    }\r\n\r\n    function getSpecial(uint256 _tokenId) public view returns (uint8[7] memory) {\r\n        return tokens[_tokenId].special;\r\n    }\r\n\r\n    function setLook(uint256 _tokenId, bytes32 _look) public onlyManager {\r\n        tokens[_tokenId].look = _look;\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public onlyManager {\r\n        _burn(_tokenId);\r\n    }\r\n\r\n\r\n    event SpecChanged(uint256 _tokenId, uint8 _specId, uint8 _value);\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_specId\",\"type\":\"uint8\"}],\"name\":\"decSpecial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint8\"},{\"name\":\"look\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_look\",\"type\":\"bytes32\"}],\"name\":\"setLook\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secondary\",\"type\":\"address\"}],\"name\":\"setSecondary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc20\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"deleteManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_special\",\"type\":\"uint8[7]\"},{\"name\":\"_generation\",\"type\":\"uint8\"},{\"name\":\"_look\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSpecial\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_specId\",\"type\":\"uint8\"}],\"name\":\"incSpecial\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawalAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setMaintenanceStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_secondary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_specId\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"SpecChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Maintenance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BeneficiaryERC20Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "Citizen", "CompilerVersion": "v0.5.4+commit.9549d8ff", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000001c13aa4586469f99750a3a6c7c81e7e76897643b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://405850598a7c745a1ce910864a8f11fa74a12b05cc7a6385ab85cf05d75a8551"}