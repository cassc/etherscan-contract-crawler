{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract LiquidationContract {\r\n    event CollateralLiquidated(address indexed borrower, uint256 amount, address liquidator);\r\n\r\n    function liquidateCollateral(address borrower, uint256 amountToLiquidate, address liquidator) external {\r\n        require(checkLiquidationEligibility(borrower));\r\n        uint256 penaltyAmount = calculateLiquidationPenalty(borrower);\r\n        uint256 adjustedAmountToLiquidate = amountToLiquidate + penaltyAmount;\r\n        transferCollateralToLiquidator(borrower, adjustedAmountToLiquidate, liquidator);\r\n        emit CollateralLiquidated(borrower, adjustedAmountToLiquidate, liquidator);\r\n    }\r\n\r\n    function calculateLiquidationAmount(address borrower) external view returns (uint256) {\r\n        return getCollateralSubjectToLiquidation(borrower);\r\n    }\r\n\r\n    function calculateLiquidationPenalty(address borrower) public view returns (uint256) {\r\n        return getLiquidationPenalty(borrower);\r\n    }\r\n\r\n    function checkLiquidationEligibility(address borrower) private view returns (bool) {\r\n        return assessLiquidationEligibility(borrower);\r\n    }\r\n\r\n    function transferCollateralToLiquidator(address borrower, uint256 amount, address liquidator) private {\r\n        performCollateralTransfer(borrower, amount, liquidator);\r\n    }\r\n\r\n    function getCollateralSubjectToLiquidation(address borrower) private view returns (uint256) {\r\n        return computeCollateralSubjectToLiquidation(borrower);\r\n    }\r\n\r\n    function getLiquidationPenalty(address borrower) private view returns (uint256) {\r\n        return computeLiquidationPenalty(borrower);\r\n    }\r\n\r\n    function assessLiquidationEligibility(address borrower) private view returns (bool) {\r\n        return evaluateLiquidationEligibility(borrower);\r\n    }\r\n\r\n    function performCollateralTransfer(address borrower, uint256 amount, address liquidator) private {\r\n        executeCollateralTransfer(borrower, amount, liquidator);\r\n    }\r\n\r\n    function evaluateLiquidationEligibility(address borrower) private view returns (bool) {\r\n        \r\n        return true; \r\n    }\r\n\r\n    function computeCollateralSubjectToLiquidation(address borrower) private view returns (uint256) {\r\n        \r\n        return 0; \r\n    }\r\n\r\n    function computeLiquidationPenalty(address borrower) private view returns (uint256) {\r\n       \r\n        return 0; \r\n    }\r\n\r\n    function executeCollateralTransfer(address borrower, uint256 amount, address liquidator) private {\r\n        \r\n        \r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"CollateralLiquidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"calculateLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"calculateLiquidationPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToLiquidate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"liquidateCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiquidationContract", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a61ad7c3492054e1039522081bd2a17941d5542fd297ebfca7621136b4e9cd5"}