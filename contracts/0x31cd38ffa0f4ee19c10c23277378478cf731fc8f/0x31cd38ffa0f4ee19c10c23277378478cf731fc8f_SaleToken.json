{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/sale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Importing the ERC20 interface from OpenZeppelin, a library of secure smart contracts.\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Extending the IERC20 interface with a function to get the decimals of the token.\\ninterface IExtendedERC20 is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\n// Contract for selling tokens in exchange for USDT and USDC.\\ncontract SaleToken {\\n    // Token being sold in this contract.\\n    IExtendedERC20 public immutable token;\\n    // USDC token contract address.\\n    IERC20 public immutable usdcToken;\\n    // USDT token contract address.\\n    IERC20 public immutable usdtToken;\\n    // Admin address - only this address can perform certain administrative functions.\\n    address public immutable admin;\\n    // Price of the sale token in terms of USD.\\n    uint256 public tokenPriceInUSD;\\n    // Decimals of the sale token.\\n    uint8 private immutable tokenDecimals;\\n    // Constant representing the number of decimals in USDT and USDC (assumed to be 6).\\n    uint8 private constant USD_DECIMALS = 6;\\n\\n    // Event to log the sale of tokens.\\n    event Sell(address indexed buyer, uint256 amount);\\n\\n    // Modifier to restrict function execution to only the admin.\\n//    modifier onlyAdmin() {\\n//        require(msg.sender == admin, \\\"Only admin can perform this action\\\");\\n//        _;\\n//    }\\n\\n    // Constructor to set initial values of the contract.\\n    constructor(IExtendedERC20 _token, IERC20 _usdtToken, IERC20 _usdcToken, uint256 _tokenPriceInUSD) {\\n        admin = msg.sender;\\n        token = _token;\\n        usdtToken = _usdtToken;\\n        usdcToken = _usdcToken;\\n        tokenPriceInUSD = _tokenPriceInUSD;\\n        tokenDecimals = _token.decimals();\\n    }\\n\\n//    // Function to update the token price, only callable by the admin.\\n//    function setTokenPriceInUSD(uint256 _newPrice) external onlyAdmin {\\n//        tokenPriceInUSD = _newPrice;\\n//    }\\n\\n    // Function to buy tokens with USDT.\\n    function buyTokensInUSDT(uint256 _numberOfTokens) external {\\n        _buyTokens(usdtToken, _numberOfTokens);\\n    }\\n\\n    // Function to buy tokens with USDC.\\n    function buyTokensInUSDC(uint256 _numberOfTokens) external {\\n        _buyTokens(usdcToken, _numberOfTokens);\\n    }\\n\\n    // Internal function to handle the purchase of tokens.\\n    function _buyTokens(IERC20 usdToken, uint256 _numberOfTokens) private {\\n        uint256 requiredUSD = calculateRequiredUSD(_numberOfTokens);\\n        validateTransferRequirements(usdToken, requiredUSD);\\n        performTokenTransfer(usdToken, requiredUSD, _numberOfTokens);\\n        emit Sell(msg.sender, _numberOfTokens);\\n    }\\n\\n    // Function to calculate the required amount of USD for the given number of tokens.\\n    function calculateRequiredUSD(uint256 _numberOfTokens) private view returns (uint256) {\\n        return (_numberOfTokens * tokenPriceInUSD * 10 ** uint256(tokenDecimals)) / (10 ** uint256(tokenDecimals) * 10 ** uint256(USD_DECIMALS));\\n    }\\n\\n    // Function to validate if the buyer has enough balance and allowance to buy tokens.\\n    function validateTransferRequirements(IERC20 usdToken, uint256 requiredUSD) private view {\\n        require(usdToken.balanceOf(msg.sender) >= requiredUSD, \\\"Insufficient balance\\\");\\n        require(usdToken.allowance(msg.sender, address(this)) >= requiredUSD, \\\"Transfer not allowed\\\");\\n    }\\n\\n    // Function to perform the transfer of tokens from buyer to admin and from contract to buyer.\\n    function performTokenTransfer(IERC20 usdToken, uint256 requiredUSD, uint256 _numberOfTokens) private {\\n        require(token.balanceOf(address(this)) >= _numberOfTokens, \\\"Not enough tokens\\\");\\n        require(usdToken.transferFrom(msg.sender, admin, requiredUSD), \\\"Transfer failed\\\");\\n        require(token.transfer(msg.sender, _numberOfTokens), \\\"Token transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IExtendedERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPriceInUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokensInUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"buyTokensInUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IExtendedERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SaleToken", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000079601af7e9079281db8d481d9f999c1feb009b25000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000f4240", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}