{"SourceCode": "// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IKoansToken.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IKoansToken is IERC721 {\r\n    event KoanCreated(uint256 indexed tokenId);\r\n\r\n    event KoanBurned(uint256 indexed tokenId);\r\n\r\n    event FoundersDAOUpdated(address koansDAO);\r\n\r\n    event MinterUpdated(address minter);\r\n\r\n    event MinterLocked();\r\n\r\n    function setContractURIHash(string memory newContractURIHash) external;\r\n    \r\n    function setFoundersDAO(address _foundersDAO) external;\r\n\r\n    function setMinter(address _minter) external;\r\n    \r\n    function lockMinter() external;\r\n\r\n    function mintFoundersDAOKoan(string memory _foundersDAOMetadataURI) external;\r\n\r\n    function mint() external returns (uint256);\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function setMetadataURI(uint256 tokenId, string memory metadataURI) external;\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/IKoansAuctionHouse.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IKoansAuctionHouse {\r\n    struct Auction {\r\n        // ID for the Koan (ERC721 token ID)\r\n        uint256 koanId;\r\n        // The current highest bid amount\r\n        uint256 amount;\r\n        // The time that the auction started\r\n        uint256 startTime;\r\n        // The time that the auction is scheduled to end\r\n        uint256 endTime;\r\n        // The address of the current highest bid\r\n        address payable bidder;\r\n        // Whether or not the auction has been settled\r\n        bool settled;\r\n        // The address to payout a portion of the auction's proceeds to.\r\n        address payable payoutAddress;\r\n    }\r\n\r\n    event AuctionCreated(uint256 indexed koanId, uint256 startTime, uint256 endTime);\r\n\r\n    event AuctionBid(uint256 indexed koanId, address sender, uint256 value, bool extended);\r\n\r\n    event AuctionExtended(uint256 indexed koanId, uint256 endTime);\r\n\r\n    event AuctionSettled(uint256 indexed koanId, address winner, uint256 amount);\r\n\r\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\r\n\r\n    event AuctionReservePriceUpdated(uint256 reservePrice);\r\n\r\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\r\n\r\n    event PayoutRewardBPUpdated(uint256 artistRewardBP);\r\n\r\n    event AuctionDurationUpdated(uint256 duration);\r\n\r\n    function settleCurrentAndCreateNewAuction() external;\r\n\r\n    function settleAuction() external;\r\n\r\n    function createBid(uint256 koanId) external payable;\r\n\r\n    function addOffer(string memory _uri, address _payoutAddress) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function setTimeBuffer(uint256 _timeBuffer) external;\r\n\r\n    function setReservePrice(uint256 _reservePrice) external;\r\n\r\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external;\r\n\r\n    function setPayoutRewardBP(uint256 _payoutRewardBP) external;\r\n\r\n    function setDuration(uint256 _duration) external;\r\n\r\n    function setOfferAddress(address _koanOfferAddress) external;\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISashoToken.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface ISashoToken is IERC20 {\r\n\r\n    function mint(address account, uint256 rawAmount) external;\r\n\r\n    function burn(uint256 tokenId) external;\r\n\r\n    function delegate(address delegatee) external;\r\n\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    function setMinter(address minter) external;\r\n\r\n    function lockMinter() external;\r\n\r\n    function getCurrentVotes(address account) external view returns (uint96);\r\n\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IOffer.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IOffer {\r\n\r\n    struct Offer {\r\n        // IPFS path for the propsoed image/metadata.\r\n        string uriPath;\r\n        // The address to pay proceeds if this offer wins an auction.\r\n        address payoutAddress;\r\n        // Count of the total votes in favor of this\r\n        // offer.\r\n        uint voteCount;\r\n    }\r\n\r\n    struct OfferPeriod {\r\n        // ID for the Offer period\r\n        uint256 id;\r\n        // The block where the offer submission period is scheduled to begin.\r\n        uint256 offerStartBlock;\r\n        // The block where the offer submission period is scheduled to end and\r\n        // voting should begin.\r\n        uint256 offerEndBlock;\r\n        // The block where voting is scheduled to end\r\n        uint256 votingEndBlocks;\r\n        // If this offer period has already been settled.\r\n        bool settled;\r\n    }\r\n\r\n    event KoanVoted(uint256 indexed koanId, uint256 offerPeriodId, uint256 offerId);\r\n\r\n    event SashoVoted(address indexed sashoAddress, uint256 offerPeriodId, uint256 offerId, uint256 sashoVotes);\r\n\r\n    event OfferPeriodSettled(uint256 offerPeriodId, string uriPath, address artist);\r\n\r\n    event OfferPeriodCreated(uint256 offerPeriodId);\r\n\r\n    event OfferPeriodEndedWithoutProposal(uint256 offerPeriodId);\r\n\r\n    event OfferPeriodEndedWithoutVotes(uint256 offerPeriodId);\r\n\r\n    event ArtOffered(uint256 indexed offerPeriodId, address indexed submitter, uint256 offerIndex, string uriPath, address payoutAddress);\r\n\r\n    event KoanVotingWeightUpdated(uint256 koanVotingWeight);\r\n\r\n    event MinCollateralUpdated(uint256 minCollateral);\r\n\r\n    event OfferFeeUpdated(uint256 offerFee);\r\n\r\n    event OfferDurationBlocksUpdated(uint256 offerDurationBlocks);\r\n\r\n    event VotingPeriodDurationBlocksUpdated(uint256 votingPeriodDurationBlocks);\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n    function settleOfferPeriod() external;\r\n\r\n    function settleCurrentAndCreateNewOfferPeriod() external;\r\n\r\n    function setKoanVotingWeight(uint koanVotingWeight_) external;\r\n\r\n    function setMinCollateral(uint minCollateral_) external;\r\n\r\n    function setOfferFee(uint offerFee_) external;\r\n\r\n    function setOfferDurationBlocks(uint offerDurationBlocks_) external;\r\n\r\n    function setVotingPeriodDurationBlocks(uint votingPeriodDurationBlocks_) external;\r\n\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWETH.sol\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/Offer.sol\r\n\r\n\r\n/// @title The Offer contract.\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Offer is IOffer, Pausable, ReentrancyGuard, Ownable { \r\n    // The address of the Koans contract\r\n    address public koans;\r\n\r\n    // The address of the Sasho contract.\r\n    address public sashos;\r\n\r\n    // The duration of an offer period in blocks.\r\n    uint256 public offerDurationBlocks;\r\n\r\n    // The duration of a voting period in blocks.\r\n    uint256 public votingPeriodDurationBlocks;\r\n\r\n    // How many Sashos votes the votes from a single Koan is equivalent to.\r\n    uint256 public koanVotingWeight;\r\n\r\n    // The active offer period.\r\n    IOffer.OfferPeriod public offerPeriod;\r\n\r\n    // The auction house contract that mints and auctions the Koans.\r\n    IKoansAuctionHouse public auctionHouse;\r\n\r\n    // A mapping of Offer Period IDs to wallets and whether or not they've voted yet\r\n    // in this offer period's voting period.\r\n    mapping(uint256 => mapping(address => bool)) public sashoVotesPerOfferPeriod;\r\n\r\n    // A mapping of Offer Period IDs to Koan IDs and whether or not they've voted yet\r\n    // in this offer period's voting period.\r\n    mapping(uint256 => mapping(uint256 => bool)) public koanVotesPerOfferPeriod;\r\n\r\n    // A mapping from the Offer Period ID to an array of the offers under consideration.\r\n    mapping(uint256 => Offer[]) public offersPerOfferPeriod;\r\n\r\n    // A mapping of Offer Period IDs to addresses and the amount of collateral they've put\r\n    // up for offers in that period. \r\n    mapping(uint256 => mapping(address => uint256)) public offerPeriodToAddressCollateral;\r\n\r\n    // The minimum amount of eth that must be included with an offer as collateral.\r\n    uint256 public minCollateral;\r\n\r\n    // The ETH fee that must be paid to the DAO when making an offer.\r\n    uint256 public offerFee;\r\n\r\n    // The address of the Koans DAO to send fees to.\r\n    address public koansDAO;\r\n\r\n    // The address of the WETH contract\r\n    address public weth;\r\n\r\n    /**\r\n     * @notice Initialize the auction house and base contracts,\r\n     * populate configuration values, and pause the contract.\r\n     * @dev This function can only be called once.\r\n     */\r\n    constructor(\r\n        address _koans,\r\n        address _sashos,\r\n        uint256 _offerDurationBlocks,\r\n        uint256 _votingPeriodDurationBlocks,\r\n        IKoansAuctionHouse _auctionHouse,\r\n        address _koansDAO,\r\n        address _weth\r\n        ) {\r\n\r\n        _pause();\r\n\r\n        koans = _koans;\r\n        sashos = _sashos;\r\n        offerDurationBlocks = _offerDurationBlocks;\r\n        votingPeriodDurationBlocks = _votingPeriodDurationBlocks;\r\n        auctionHouse = _auctionHouse;\r\n        // Set initial voting weight to be equal to a million Sashos.\r\n        koanVotingWeight = 1000000*10e18;\r\n        offerPeriod = OfferPeriod({\r\n            id: 0,\r\n            offerStartBlock: 0,\r\n            offerEndBlock: block.number + offerDurationBlocks,\r\n            votingEndBlocks: block.number + offerDurationBlocks + votingPeriodDurationBlocks,\r\n            settled: false\r\n            });\r\n        koansDAO = _koansDAO;\r\n        minCollateral = 0;\r\n        offerFee = 0;\r\n        weth = _weth;\r\n    }\r\n\r\n    /**\r\n     * @notice Add an offer to the current OfferPeriod.\r\n     * @dev Excess value is saved as collateral.\r\n     */\r\n     function offer(string memory uriPath, address payoutAddress) external payable whenNotPaused nonReentrant {\r\n        // Consider adding map + check that the URI is not already present\r\n        require(block.number >= offerPeriod.offerStartBlock, \"Offer period hasn't begun\");\r\n        require(block.number < offerPeriod.offerEndBlock, \"Offer period has ended.\" );\r\n        require(msg.value >= minCollateral + offerFee, \"Must include collateral and fee.\");\r\n        offerPeriodToAddressCollateral[offerPeriod.id][msg.sender] += msg.value - offerFee;\r\n        _safeTransferETHWithFallback(koansDAO, offerFee);\r\n        Offer memory offer = Offer({\r\n            uriPath: uriPath,\r\n            payoutAddress: payoutAddress,\r\n            voteCount: 0\r\n            });\r\n        offersPerOfferPeriod[offerPeriod.id].push(offer);\r\n        emit ArtOffered(\r\n            /*offerPeriodId=*/offerPeriod.id,\r\n            /*submitter=*/msg.sender,\r\n            /*offerIndex=*/offersPerOfferPeriod[offerPeriod.id].length - 1,\r\n            /*uriPath=*/uriPath,\r\n            /*payoutAddress=*/payoutAddress);\r\n    }\r\n\r\n    /**\r\n     *  @notice Reclaim collateral from a previous offer period.\r\n     */\r\n     function reclaimCollateral(uint256 offerPeriodId) external nonReentrant {\r\n        require(offerPeriodId < offerPeriod.id, \"Offer period hasn't ended\");\r\n        uint256 collateralToReclaim = offerPeriodToAddressCollateral[offerPeriodId][msg.sender];\r\n        offerPeriodToAddressCollateral[offerPeriodId][msg.sender] = 0;\r\n        _safeTransferETHWithFallback(msg.sender, collateralToReclaim);\r\n    }\r\n\r\n    /**\r\n     * @notice Pause the Koans offer contract.\r\n     * @dev This function can only be called by the owner when the\r\n     * contract is unpaused. While no new offer periods can be started when paused,\r\n     * anyone can settle an ongoing offer period.\r\n     */\r\n     function pause() external override onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @notice Unpause the Koans offer contract.\r\n     * @dev This function can only be called by the owner when the\r\n     * contract is paused. If required, this function will start a new offer period.\r\n     */\r\n     function unpause() external override onlyOwner {\r\n        _unpause();\r\n        if (offerPeriod.offerStartBlock == 0 || offerPeriod.settled) {\r\n            _createOfferPeriod();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Vote for the offer at `offer` using the koan matching koanId.\r\n     */\r\n     function voteWithKoan(uint256 koanId, uint offer) external whenNotPaused nonReentrant {\r\n        require(block.number > offerPeriod.offerEndBlock, \"Voting period hasn't started\" );\r\n        require(block.number < offerPeriod.votingEndBlocks, \"Voting period has ended\" );\r\n        require(msg.sender == IKoansToken(koans).ownerOf(koanId), \"Voter doesn't own Koan\");\r\n        require(!koanVotesPerOfferPeriod[offerPeriod.id][koanId], \"Koan has already voted\");\r\n        offersPerOfferPeriod[offerPeriod.id][offer].voteCount += koanVotingWeight;\r\n        koanVotesPerOfferPeriod[offerPeriod.id][koanId] = true;\r\n        emit KoanVoted(koanId, offerPeriod.id, offer);\r\n    }\r\n\r\n    /**\r\n     * @notice Vote for offer using the Sasho balance of msg.sender's wallet (at the last checkpoint\r\n     * stored in the Sashos contract.) \r\n     */\r\n     function voteWithSasho(uint offer) external whenNotPaused nonReentrant {\r\n        require(block.number > offerPeriod.offerEndBlock, \"Voting period hasn't started\" );\r\n        require(block.number < offerPeriod.votingEndBlocks, \"Voting period has ended\" );\r\n        require(!sashoVotesPerOfferPeriod[offerPeriod.id][msg.sender], \"Sasho wallet has already voted\");\r\n        sashoVotesPerOfferPeriod[offerPeriod.id][msg.sender] = true;\r\n\r\n        uint96 sashoVotes = ISashoToken(sashos).getPriorVotes(msg.sender, offerPeriod.offerEndBlock);\r\n        offersPerOfferPeriod[offerPeriod.id][offer].voteCount += sashoVotes;\r\n\r\n        emit SashoVoted(msg.sender, offerPeriod.id, offer, sashoVotes);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Settle the current offer period and create a new one.\r\n     */\r\n     function settleCurrentAndCreateNewOfferPeriod() external override nonReentrant whenNotPaused {\r\n      _settleOfferPeriod();\r\n      _createOfferPeriod();\r\n  }\r\n\r\n    /**\r\n     * @notice Set the voting weight of a Koan (in Sasho equivalent units)\r\n     */\r\n     function setKoanVotingWeight(uint _koanVotingWeight) external override onlyOwner {\r\n        koanVotingWeight = _koanVotingWeight;\r\n\r\n        emit KoanVotingWeightUpdated(_koanVotingWeight);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the minimum ethereum collateral needed to make an offer.\r\n     */\r\n     function setMinCollateral(uint _minCollateral) external override onlyOwner {\r\n        minCollateral = _minCollateral;\r\n\r\n        emit MinCollateralUpdated(_minCollateral);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the fee paid to the DAO when making an offer.\r\n     */\r\n     function setOfferFee(uint _offerFee) external override onlyOwner {\r\n        offerFee = _offerFee;\r\n\r\n        emit OfferFeeUpdated(_offerFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the offering duration in blocks.\r\n     * @dev Only callable by the owner.\r\n     */\r\n     function setOfferDurationBlocks(uint _offerDurationBlocks) external override onlyOwner {\r\n        offerDurationBlocks = _offerDurationBlocks;\r\n\r\n        emit OfferDurationBlocksUpdated(_offerDurationBlocks);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the offering duration in blocks.\r\n     * @dev Only callable by the owner.\r\n     */\r\n     function setVotingPeriodDurationBlocks(uint _votingPeriodDurationBlocks) external override onlyOwner {\r\n        votingPeriodDurationBlocks = _votingPeriodDurationBlocks;\r\n\r\n        emit VotingPeriodDurationBlocksUpdated(_votingPeriodDurationBlocks);\r\n    }\r\n\r\n    /**\r\n     * @notice Settle the current offer period and add the URI and payout info to the\r\n     * auction house queue.\r\n     */\r\n     function settleOfferPeriod() external override whenPaused nonReentrant {\r\n        _settleOfferPeriod();\r\n\r\n    }\r\n\r\n    function _createOfferPeriod() internal {\r\n        offerPeriod = OfferPeriod({\r\n            id: offerPeriod.id + 1,\r\n            offerStartBlock: block.number,\r\n            offerEndBlock: block.number + offerDurationBlocks,\r\n            votingEndBlocks: block.number + offerDurationBlocks + votingPeriodDurationBlocks,\r\n            settled: false\r\n            });\r\n        emit OfferPeriodCreated(offerPeriod.id);\r\n    }\r\n\r\n    function _settleOfferPeriod() internal {\r\n        require(offerPeriod.offerStartBlock != 0, \"Offer period hasn't begun\");\r\n        require(!offerPeriod.settled, \"Offer has already been settled\");\r\n        require(block.number >= offerPeriod.votingEndBlocks,\r\n            \"Voting period hasn't ended\");\r\n\r\n        offerPeriod.settled = true;\r\n        if (offersPerOfferPeriod[offerPeriod.id].length == 0) {\r\n            emit OfferPeriodEndedWithoutProposal(offerPeriod.id);\r\n            return;\r\n        }\r\n\r\n        Offer memory winningOffer = _winningOffer();\r\n        if (winningOffer.voteCount != 0) {\r\n            auctionHouse.addOffer(winningOffer.uriPath, winningOffer.payoutAddress);\r\n            emit OfferPeriodSettled(offerPeriod.id, winningOffer.uriPath, winningOffer.payoutAddress);\r\n            return;\r\n        }\r\n        emit OfferPeriodEndedWithoutVotes(offerPeriod.id);\r\n    }\r\n\r\n    /**\r\n     * @notice Return the current winning offer.\r\n     * @dev the returned value will have the default values set for its fields\r\n     * if there are no votes on any of the offers.\r\n     */\r\n     function _winningOffer() internal view\r\n     returns (Offer memory winningOffer) {\r\n        uint winningVoteCount = 0;\r\n        for (uint p = 0; p < offersPerOfferPeriod[offerPeriod.id].length; p++) {\r\n            if (offersPerOfferPeriod[offerPeriod.id][p].voteCount > winningVoteCount) {\r\n                winningVoteCount = offersPerOfferPeriod[offerPeriod.id][p].voteCount;\r\n                winningOffer = offersPerOfferPeriod[offerPeriod.id][p];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\r\n     */\r\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\r\n        if (!_safeTransferETH(to, amount)) {\r\n            IWETH(weth).deposit{ value: amount }();\r\n            IERC20(weth).transfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ETH and return the success status.\r\n     * @dev This function only forwards 30,000 gas to the callee.\r\n     */\r\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\r\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\r\n        return success;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_koans\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sashos\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerDurationBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriodDurationBlocks\",\"type\":\"uint256\"},{\"internalType\":\"contract IKoansAuctionHouse\",\"name\":\"_auctionHouse\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_koansDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"submitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"ArtOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"KoanVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"koanVotingWeight\",\"type\":\"uint256\"}],\"name\":\"KoanVotingWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minCollateral\",\"type\":\"uint256\"}],\"name\":\"MinCollateralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerDurationBlocks\",\"type\":\"uint256\"}],\"name\":\"OfferDurationBlocksUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerFee\",\"type\":\"uint256\"}],\"name\":\"OfferFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"}],\"name\":\"OfferPeriodCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"}],\"name\":\"OfferPeriodEndedWithoutProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"}],\"name\":\"OfferPeriodEndedWithoutVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriPath\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"}],\"name\":\"OfferPeriodSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sashoAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sashoVotes\",\"type\":\"uint256\"}],\"name\":\"SashoVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingPeriodDurationBlocks\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodDurationBlocksUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionHouse\",\"outputs\":[{\"internalType\":\"contract IKoansAuctionHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"koanVotesPerOfferPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koanVotingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"koansDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uriPath\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"offer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerDurationBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEndBlocks\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offerPeriodToAddressCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offersPerOfferPeriod\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uriPath\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payoutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offerPeriodId\",\"type\":\"uint256\"}],\"name\":\"reclaimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sashoVotesPerOfferPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sashos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_koanVotingWeight\",\"type\":\"uint256\"}],\"name\":\"setKoanVotingWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"}],\"name\":\"setMinCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerDurationBlocks\",\"type\":\"uint256\"}],\"name\":\"setOfferDurationBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerFee\",\"type\":\"uint256\"}],\"name\":\"setOfferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_votingPeriodDurationBlocks\",\"type\":\"uint256\"}],\"name\":\"setVotingPeriodDurationBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleCurrentAndCreateNewOfferPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleOfferPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"koanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"voteWithKoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"voteWithSasho\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriodDurationBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Offer", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000363b936661bd8efb51173680cf5eb66b93a4bafe0000000000000000000000006148529e57e3eab31b2a3cc116144f3f926c35300000000000000000000000000000000000000000000000000000000000016b7600000000000000000000000000000000000000000000000000000000000019f60000000000000000000000004a60203b6fffb98324c09208ac704f40355f5bd60000000000000000000000008130e52415493db75a426b7e644c056b6f8edc75000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5f4b059adaaaffc9cb433e4ce4e41430c645cad2d1d14b76ee599fdd70255d9c"}