{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/interfaces/IErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\n/// @dev Common contract exceptions\\n\\n/// @dev Thrown on attempting to set an important address to zero address\\nerror ZeroAddressException();\\n\\n/// @dev Thrown on attempting to call a non-implemented function\\nerror NotImplementedException();\\n\\n/// @dev Thrown on attempting to set an EOA as an important contract in the system\\nerror AddressIsNotContractException(address);\\n\\n/// @dev Thrown on attempting to use a non-ERC20 contract or an EOA as a token\\nerror IncorrectTokenContractException();\\n\\n/// @dev Thrown on attempting to set a token price feed to an address that is not a\\n///      correct price feed\\nerror IncorrectPriceFeedException();\\n\\n/// @dev Thrown on attempting to call an access restricted function as a non-Configurator\\nerror CallerNotConfiguratorException();\\n\\n/// @dev Thrown on attempting to call an access restricted function as a non-Configurator\\nerror CallerNotControllerException();\\n\\n/// @dev Thrown on attempting to pause a contract as a non-Pausable admin\\nerror CallerNotPausableAdminException();\\n\\n/// @dev Thrown on attempting to pause a contract as a non-Unpausable admin\\nerror CallerNotUnPausableAdminException();\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/interfaces/IPriceFeedType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PriceFeedType } from \\\"@gearbox-protocol/integration-types/contracts/PriceFeedType.sol\\\";\\n\\ninterface IPriceFeedType {\\n    /// @dev Returns the price feed type\\n    function priceFeedType() external view returns (PriceFeedType);\\n\\n    /// @dev Returns whether sanity checks on price feed result should be skipped\\n    function skipPriceCheck() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\nimport { IVersion } from \\\"./IVersion.sol\\\";\\n\\ninterface IPriceOracleV2Events {\\n    /// @dev Emits when a new price feed is added\\n    event NewPriceFeed(address indexed token, address indexed priceFeed);\\n}\\n\\ninterface IPriceOracleV2Exceptions {\\n    /// @dev Thrown if a price feed returns 0\\n    error ZeroPriceException();\\n\\n    /// @dev Thrown if the last recorded result was not updated in the last round\\n    error ChainPriceStaleException();\\n\\n    /// @dev Thrown on attempting to get a result for a token that does not have a price feed\\n    error PriceOracleNotExistsException();\\n}\\n\\n/// @title Price oracle interface\\ninterface IPriceOracleV2 is\\n    IPriceOracleV2Events,\\n    IPriceOracleV2Exceptions,\\n    IVersion\\n{\\n    /// @dev Converts a quantity of an asset to USD (decimals = 8).\\n    /// @param amount Amount to convert\\n    /// @param token Address of the token to be converted\\n    function convertToUSD(uint256 amount, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Converts a quantity of USD (decimals = 8) to an equivalent amount of an asset\\n    /// @param amount Amount to convert\\n    /// @param token Address of the token converted to\\n    function convertFromUSD(uint256 amount, address token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @dev Converts one asset into another\\n    ///\\n    /// @param amount Amount to convert\\n    /// @param tokenFrom Address of the token to convert from\\n    /// @param tokenTo Address of the token to convert to\\n    function convert(\\n        uint256 amount,\\n        address tokenFrom,\\n        address tokenTo\\n    ) external view returns (uint256);\\n\\n    /// @dev Returns collateral values for two tokens, required for a fast check\\n    /// @param amountFrom Amount of the outbound token\\n    /// @param tokenFrom Address of the outbound token\\n    /// @param amountTo Amount of the inbound token\\n    /// @param tokenTo Address of the inbound token\\n    /// @return collateralFrom Value of the outbound token amount in USD\\n    /// @return collateralTo Value of the inbound token amount in USD\\n    function fastCheck(\\n        uint256 amountFrom,\\n        address tokenFrom,\\n        uint256 amountTo,\\n        address tokenTo\\n    ) external view returns (uint256 collateralFrom, uint256 collateralTo);\\n\\n    /// @dev Returns token's price in USD (8 decimals)\\n    /// @param token The token to compute the price for\\n    function getPrice(address token) external view returns (uint256);\\n\\n    /// @dev Returns the price feed address for the passed token\\n    /// @param token Token to get the price feed for\\n    function priceFeeds(address token)\\n        external\\n        view\\n        returns (address priceFeed);\\n\\n    /// @dev Returns the price feed for the passed token,\\n    ///      with additional parameters\\n    /// @param token Token to get the price feed for\\n    function priceFeedsWithFlags(address token)\\n        external\\n        view\\n        returns (\\n            address priceFeed,\\n            bool skipCheck,\\n            uint256 decimals\\n        );\\n}\\n\\ninterface IPriceOracleV2Ext is IPriceOracleV2 {\\n    /// @dev Sets a price feed if it doesn't exist, or updates an existing one\\n    /// @param token Address of the token to set the price feed for\\n    /// @param priceFeed Address of a USD price feed adhering to Chainlink's interface\\n    function addPriceFeed(address token, address priceFeed) external;\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/interfaces/IVersion.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\n/// @title IVersion\\n/// @dev Declares a version function which returns the contract's version\\ninterface IVersion {\\n    /// @dev Returns contract version\\n    function version() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\n// Denominations\\n\\nuint256 constant WAD = 1e18;\\nuint256 constant RAY = 1e27;\\nuint16 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n\\n// 25% of type(uint256).max\\nuint256 constant ALLOWANCE_THRESHOLD = type(uint96).max >> 3;\\n\\n// FEE = 50%\\nuint16 constant DEFAULT_FEE_INTEREST = 50_00; // 50%\\n\\n// LIQUIDATION_FEE 1.5%\\nuint16 constant DEFAULT_FEE_LIQUIDATION = 1_50; // 1.5%\\n\\n// LIQUIDATION PREMIUM 4%\\nuint16 constant DEFAULT_LIQUIDATION_PREMIUM = 4_00; // 4%\\n\\n// LIQUIDATION_FEE_EXPIRED 2%\\nuint16 constant DEFAULT_FEE_LIQUIDATION_EXPIRED = 1_00; // 2%\\n\\n// LIQUIDATION PREMIUM EXPIRED 2%\\nuint16 constant DEFAULT_LIQUIDATION_PREMIUM_EXPIRED = 2_00; // 2%\\n\\n// DEFAULT PROPORTION OF MAX BORROWED PER BLOCK TO MAX BORROWED PER ACCOUNT\\nuint16 constant DEFAULT_LIMIT_PER_BLOCK_MULTIPLIER = 2;\\n\\n// Seconds in a year\\nuint256 constant SECONDS_PER_YEAR = 365 days;\\nuint256 constant SECONDS_PER_ONE_AND_HALF_YEAR = (SECONDS_PER_YEAR * 3) / 2;\\n\\n// OPERATIONS\\n\\n// Leverage decimals - 100 is equal to 2x leverage (100% * collateral amount + 100% * borrowed amount)\\nuint8 constant LEVERAGE_DECIMALS = 100;\\n\\n// Maximum withdraw fee for pool in PERCENTAGE_FACTOR format\\nuint8 constant MAX_WITHDRAW_FEE = 100;\\n\\nuint256 constant EXACT_INPUT = 1;\\nuint256 constant EXACT_OUTPUT = 2;\\n\\naddress constant UNIVERSAL_CONTRACT = 0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC;\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\n/// @title Errors library\\nlibrary Errors {\\n    //\\n    // COMMON\\n    //\\n    string public constant ZERO_ADDRESS_IS_NOT_ALLOWED = \\\"Z0\\\";\\n    string public constant NOT_IMPLEMENTED = \\\"NI\\\";\\n    string public constant INCORRECT_PATH_LENGTH = \\\"PL\\\";\\n    string public constant INCORRECT_ARRAY_LENGTH = \\\"CR\\\";\\n    string public constant REGISTERED_CREDIT_ACCOUNT_MANAGERS_ONLY = \\\"CP\\\";\\n    string public constant REGISTERED_POOLS_ONLY = \\\"RP\\\";\\n    string public constant INCORRECT_PARAMETER = \\\"IP\\\";\\n\\n    //\\n    // MATH\\n    //\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"M1\\\";\\n    string public constant MATH_ADDITION_OVERFLOW = \\\"M2\\\";\\n    string public constant MATH_DIVISION_BY_ZERO = \\\"M3\\\";\\n\\n    //\\n    // POOL\\n    //\\n    string public constant POOL_CONNECTED_CREDIT_MANAGERS_ONLY = \\\"PS0\\\";\\n    string public constant POOL_INCOMPATIBLE_CREDIT_ACCOUNT_MANAGER = \\\"PS1\\\";\\n    string public constant POOL_MORE_THAN_EXPECTED_LIQUIDITY_LIMIT = \\\"PS2\\\";\\n    string public constant POOL_INCORRECT_WITHDRAW_FEE = \\\"PS3\\\";\\n    string public constant POOL_CANT_ADD_CREDIT_MANAGER_TWICE = \\\"PS4\\\";\\n\\n    //\\n    // ACCOUNT FACTORY\\n    //\\n    string public constant AF_CANT_CLOSE_CREDIT_ACCOUNT_IN_THE_SAME_BLOCK =\\n        \\\"AF1\\\";\\n    string public constant AF_MINING_IS_FINISHED = \\\"AF2\\\";\\n    string public constant AF_CREDIT_ACCOUNT_NOT_IN_STOCK = \\\"AF3\\\";\\n    string public constant AF_EXTERNAL_ACCOUNTS_ARE_FORBIDDEN = \\\"AF4\\\";\\n\\n    //\\n    // ADDRESS PROVIDER\\n    //\\n    string public constant AS_ADDRESS_NOT_FOUND = \\\"AP1\\\";\\n\\n    //\\n    // CONTRACTS REGISTER\\n    //\\n    string public constant CR_POOL_ALREADY_ADDED = \\\"CR1\\\";\\n    string public constant CR_CREDIT_MANAGER_ALREADY_ADDED = \\\"CR2\\\";\\n\\n    //\\n    // CREDIT ACCOUNT\\n    //\\n    string public constant CA_CONNECTED_CREDIT_MANAGER_ONLY = \\\"CA1\\\";\\n    string public constant CA_FACTORY_ONLY = \\\"CA2\\\";\\n\\n    //\\n    // ACL\\n    //\\n    string public constant ACL_CALLER_NOT_PAUSABLE_ADMIN = \\\"ACL1\\\";\\n    string public constant ACL_CALLER_NOT_CONFIGURATOR = \\\"ACL2\\\";\\n\\n    //\\n    // WETH GATEWAY\\n    //\\n    string public constant WG_DESTINATION_IS_NOT_WETH_COMPATIBLE = \\\"WG1\\\";\\n    string public constant WG_RECEIVE_IS_NOT_ALLOWED = \\\"WG2\\\";\\n    string public constant WG_NOT_ENOUGH_FUNDS = \\\"WG3\\\";\\n\\n    //\\n    // TOKEN DISTRIBUTOR\\n    //\\n    string public constant TD_WALLET_IS_ALREADY_CONNECTED_TO_VC = \\\"TD1\\\";\\n    string public constant TD_INCORRECT_WEIGHTS = \\\"TD2\\\";\\n    string public constant TD_NON_ZERO_BALANCE_AFTER_DISTRIBUTION = \\\"TD3\\\";\\n    string public constant TD_CONTRIBUTOR_IS_NOT_REGISTERED = \\\"TD4\\\";\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/libraries/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.10;\\n\\nimport { Errors } from \\\"./Errors.sol\\\";\\nimport { PERCENTAGE_FACTOR } from \\\"./Constants.sol\\\";\\n\\nuint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n    /**\\n     * @dev Executes a percentage multiplication\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The percentage of value\\n     **/\\n    function percentMul(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (value == 0 || percentage == 0) {\\n            return 0; // T:[PM-1]\\n        }\\n\\n        //        require(\\n        //            value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n        //            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        //        ); // T:[PM-1]\\n\\n        return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR; // T:[PM-1]\\n    }\\n\\n    /**\\n     * @dev Executes a percentage division\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return The value divided the percentage\\n     **/\\n    function percentDiv(uint256 value, uint256 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO); // T:[PM-2]\\n        uint256 halfPercentage = percentage / 2; // T:[PM-2]\\n\\n        //        require(\\n        //            value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n        //            Errors.MATH_MULTIPLICATION_OVERFLOW\\n        //        ); // T:[PM-2]\\n\\n        return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/oracles/CompositePriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { PriceFeedChecker } from \\\"./PriceFeedChecker.sol\\\";\\nimport { PERCENTAGE_FACTOR } from \\\"../libraries/PercentageMath.sol\\\";\\nimport { PriceFeedType, IPriceFeedType } from \\\"../interfaces/IPriceFeedType.sol\\\";\\n\\n// EXCEPTIONS\\nimport { NotImplementedException } from \\\"../interfaces/IErrors.sol\\\";\\n\\n/// @title Price feed that composes an base asset-denominated price feed with a USD one\\n/// @notice Used for better price tracking for correlated assets (such as stETH or WBTC) or on networks where\\n///         only feeds for the native tokens exist\\ncontract CompositePriceFeed is\\n    PriceFeedChecker,\\n    AggregatorV3Interface,\\n    IPriceFeedType\\n{\\n    /// @dev Chainlink base asset price feed for the target asset\\n    AggregatorV3Interface public immutable targetToBasePriceFeed;\\n\\n    /// @dev Chainlink Base asset / USD price feed\\n    AggregatorV3Interface public immutable baseToUsdPriceFeed;\\n\\n    /// @dev Decimals of the returned result.\\n    uint8 public immutable override decimals;\\n\\n    /// @dev 10 ^ Decimals of Target / Base price feed, to divide the product of answers\\n    int256 public immutable answerDenominator;\\n\\n    /// @dev Price feed description\\n    string public override description;\\n\\n    uint256 public constant override version = 1;\\n\\n    PriceFeedType public constant override priceFeedType =\\n        PriceFeedType.COMPOSITE_ORACLE;\\n\\n    bool public constant override skipPriceCheck = true;\\n\\n    /// @dev Constructor\\n    /// @param _targetToBasePriceFeed Base asset price feed for target asset\\n    /// @param _baseToUsdPriceFeed USD price feed for base asset\\n    constructor(address _targetToBasePriceFeed, address _baseToUsdPriceFeed) {\\n        targetToBasePriceFeed = AggregatorV3Interface(_targetToBasePriceFeed);\\n        baseToUsdPriceFeed = AggregatorV3Interface(_baseToUsdPriceFeed);\\n        description = string(\\n            abi.encodePacked(\\n                targetToBasePriceFeed.description(),\\n                \\\" to USD Composite\\\"\\n            )\\n        );\\n        decimals = baseToUsdPriceFeed.decimals();\\n        answerDenominator = int256(10**targetToBasePriceFeed.decimals());\\n    }\\n\\n    /// @dev Implemented for compatibility, but reverts since Gearbox's price feeds\\n    ///      do not store historical data.\\n    function getRoundData(uint80)\\n        external\\n        pure\\n        virtual\\n        override\\n        returns (\\n            uint80, // roundId,\\n            int256, // answer,\\n            uint256, // startedAt,\\n            uint256, // updatedAt,\\n            uint80 // answeredInRound\\n        )\\n    {\\n        revert NotImplementedException();\\n    }\\n\\n    /// @dev Returns the composite USD-denominated price of the asset, computed as (Target / base rate * base / USD rate)\\n    function latestRoundData()\\n        external\\n        view\\n        override\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        (\\n            uint80 roundId0,\\n            int256 answer0,\\n            uint256 startedAt0,\\n            uint256 updatedAt0,\\n            uint80 answeredInRound0\\n        ) = targetToBasePriceFeed.latestRoundData();\\n\\n        _checkAnswer(roundId0, answer0, updatedAt0, answeredInRound0);\\n\\n        (\\n            roundId,\\n            answer,\\n            startedAt,\\n            updatedAt,\\n            answeredInRound\\n        ) = baseToUsdPriceFeed.latestRoundData();\\n\\n        _checkAnswer(roundId, answer, updatedAt, answeredInRound);\\n\\n        answer = (answer0 * answer) / answerDenominator;\\n    }\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/core-v2/contracts/oracles/PriceFeedChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2022\\npragma solidity ^0.8.10;\\n\\nimport { IPriceOracleV2Exceptions } from \\\"../interfaces/IPriceOracle.sol\\\";\\n\\n/// @title Sanity checker for Chainlink price feed results\\ncontract PriceFeedChecker is IPriceOracleV2Exceptions {\\n    function _checkAnswer(\\n        uint80 roundID,\\n        int256 price,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    ) internal pure {\\n        if (price <= 0) revert ZeroPriceException(); // F:[PO-5]\\n        if (answeredInRound < roundID || updatedAt == 0)\\n            revert ChainPriceStaleException(); // F:[PO-5]\\n    }\\n}\\n\"\r\n    },\r\n    \"@gearbox-protocol/integration-types/contracts/PriceFeedType.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Gearbox Protocol. Generalized leverage for DeFi protocols\\n// (c) Gearbox Holdings, 2023\\npragma solidity ^0.8.10;\\n\\n// NOTE: new values must always be added at the end of the enum\\n\\nenum PriceFeedType {\\n    CHAINLINK_ORACLE,\\n    YEARN_ORACLE,\\n    CURVE_2LP_ORACLE,\\n    CURVE_3LP_ORACLE,\\n    CURVE_4LP_ORACLE,\\n    ZERO_ORACLE,\\n    WSTETH_ORACLE,\\n    BOUNDED_ORACLE,\\n    COMPOSITE_ORACLE,\\n    AAVE_ORACLE,\\n    COMPOUND_ORACLE,\\n    BALANCER_STABLE_LP_ORACLE,\\n    BALANCER_WEIGHTED_LP_ORACLE,\\n    CURVE_CRYPTO_ORACLE,\\n    REDSTONE_ORACLE\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetToBasePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToUsdPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ChainPriceStaleException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplementedException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceOracleNotExistsException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroPriceException\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"answerDenominator\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToUsdPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedType\",\"outputs\":[{\"internalType\":\"enum PriceFeedType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skipPriceCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToBasePriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CompositePriceFeed", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "0000000000000000000000004e844125952d32acdf339be976c98e22f6f318db0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}