{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Locker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// address constant DAI = 0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1;\\n// address constant WETH = 0x4200000000000000000000000000000000000006;\\n\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\ninterface IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\ncontract Locker is IERC721Receiver {\\n    IERC20 private constant dai = IERC20(DAI);\\n    IWETH private constant weth = IWETH(WETH);\\n\\n    int24 private constant MIN_TICK = -887272;\\n    int24 private constant MAX_TICK = -MIN_TICK;\\n    int24 private constant TICK_SPACING = 60;\\n\\n    INonfungiblePositionManager public nonfungiblePositionManager =\\n        INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint tokenId,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    function mintNewPosition(\\n        uint amount0ToAdd,\\n        uint amount1ToAdd\\n    ) external returns (uint tokenId, uint128 liquidity, uint amount0, uint amount1) {\\n\\n        dai.approve(address(nonfungiblePositionManager), amount0ToAdd);\\n        weth.approve(address(nonfungiblePositionManager), amount1ToAdd);\\n\\n        INonfungiblePositionManager.MintParams\\n            memory params = INonfungiblePositionManager.MintParams({\\n                token0: DAI,\\n                token1: WETH,\\n                fee: 3000,\\n                tickLower: (MIN_TICK / TICK_SPACING) * TICK_SPACING,\\n                tickUpper: (MAX_TICK / TICK_SPACING) * TICK_SPACING,\\n                amount0Desired: amount0ToAdd,\\n                amount1Desired: amount1ToAdd,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                recipient: address(this),\\n                deadline: block.timestamp\\n            });\\n\\n        (tokenId, liquidity, amount0, amount1) = nonfungiblePositionManager.mint(\\n            params\\n        );\\n\\n        if (amount0 < amount0ToAdd) {\\n            dai.approve(address(nonfungiblePositionManager), 0);\\n            uint refund0 = amount0ToAdd - amount0;\\n            dai.transfer(msg.sender, refund0);\\n        }\\n        if (amount1 < amount1ToAdd) {\\n            weth.approve(address(nonfungiblePositionManager), 0);\\n            uint refund1 = amount1ToAdd - amount1;\\n            weth.transfer(msg.sender, refund1);\\n        }\\n    }\\n\\n    function collectAllFees(\\n        uint tokenId\\n    ) external returns (uint amount0, uint amount1) {\\n        INonfungiblePositionManager.CollectParams\\n            memory params = INonfungiblePositionManager.CollectParams({\\n                tokenId: tokenId,\\n                recipient: address(this),\\n                amount0Max: type(uint128).max,\\n                amount1Max: type(uint128).max\\n            });\\n\\n        (amount0, amount1) = nonfungiblePositionManager.collect(params);\\n    }\\n\\n    function increaseLiquidityCurrentRange(\\n        uint tokenId,\\n        uint amount0ToAdd,\\n        uint amount1ToAdd\\n    ) external returns (uint128 liquidity, uint amount0, uint amount1) {\\n        dai.approve(address(nonfungiblePositionManager), amount0ToAdd);\\n        weth.approve(address(nonfungiblePositionManager), amount1ToAdd);\\n\\n        INonfungiblePositionManager.IncreaseLiquidityParams\\n            memory params = INonfungiblePositionManager.IncreaseLiquidityParams({\\n                tokenId: tokenId,\\n                amount0Desired: amount0ToAdd,\\n                amount1Desired: amount1ToAdd,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                deadline: block.timestamp\\n            });\\n\\n        (liquidity, amount0, amount1) = nonfungiblePositionManager.increaseLiquidity(\\n            params\\n        );\\n    }\\n\\n    function decreaseLiquidityCurrentRange(\\n        uint tokenId,\\n        uint128 liquidity\\n    ) external returns (uint amount0, uint amount1) {\\n        INonfungiblePositionManager.DecreaseLiquidityParams\\n            memory params = INonfungiblePositionManager.DecreaseLiquidityParams({\\n                tokenId: tokenId,\\n                liquidity: liquidity,\\n                amount0Min: 0,\\n                amount1Min: 0,\\n                deadline: block.timestamp\\n            });\\n\\n        (amount0, amount1) = nonfungiblePositionManager.decreaseLiquidity(params);\\n    }\\n\\n    function rescue(address _token) public {\\n      require(msg.sender == 0x4E1D22C01683f08C82f564aFd32AD26212598940, \\\"Not permitted!\\\");\\n      address token = _token;\\n      uint256 balance = IERC20(token).balanceOf(address(this));\\n      IERC20(token).transfer(msg.sender, balance);\\n    }\\n}\\n\\ninterface INonfungiblePositionManager {\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint amount0Desired;\\n        uint amount1Desired;\\n        uint amount0Min;\\n        uint amount1Min;\\n        address recipient;\\n        uint deadline;\\n    }\\n\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        payable\\n        returns (uint tokenId, uint128 liquidity, uint amount0, uint amount1);\\n\\n    struct IncreaseLiquidityParams {\\n        uint tokenId;\\n        uint amount0Desired;\\n        uint amount1Desired;\\n        uint amount0Min;\\n        uint amount1Min;\\n        uint deadline;\\n    }\\n\\n    function increaseLiquidity(\\n        IncreaseLiquidityParams calldata params\\n    ) external payable returns (uint128 liquidity, uint amount0, uint amount1);\\n\\n    struct DecreaseLiquidityParams {\\n        uint tokenId;\\n        uint128 liquidity;\\n        uint amount0Min;\\n        uint amount1Min;\\n        uint deadline;\\n    }\\n\\n    function decreaseLiquidity(\\n        DecreaseLiquidityParams calldata params\\n    ) external payable returns (uint amount0, uint amount1);\\n\\n    struct CollectParams {\\n        uint tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    function collect(\\n        CollectParams calldata params\\n    ) external payable returns (uint amount0, uint amount1);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"collectAllFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"decreaseLiquidityCurrentRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0ToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1ToAdd\",\"type\":\"uint256\"}],\"name\":\"increaseLiquidityCurrentRange\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0ToAdd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1ToAdd\",\"type\":\"uint256\"}],\"name\":\"mintNewPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Locker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}