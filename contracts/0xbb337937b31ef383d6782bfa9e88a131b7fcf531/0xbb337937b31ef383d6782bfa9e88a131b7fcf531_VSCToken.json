{"SourceCode": "// File: contracts/thirdParty/ECDSA.sol\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/cryptography/ECDSA.sol\r\n// Line 60 added to original source in accordance with recommendation on accepting signatures with 0/1 for v\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n\r\n        if (v < 27) v += 27;\r\n\r\n        if (v != 27 && v != 28) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \"ECDSA: invalid signature\");\r\n\r\n        return signer;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * replicates the behavior of the\r\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\r\n     * JSON-RPC method.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC777.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n// As defined in https://eips.ethereum.org/EIPS/eip-777\r\ninterface IERC777 {\r\n  event Sent(address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data,\r\n      bytes operatorData);\r\n  event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n  event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n  event AuthorizedOperator(address indexed operator,address indexed holder);\r\n  event RevokedOperator(address indexed operator, address indexed holder);\r\n\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address holder) external view returns (uint256);\r\n  function granularity() external view returns (uint256);\r\n  function defaultOperators() external view returns (address[] memory);\r\n  function isOperatorFor(address operator, address holder) external view returns (bool);\r\n  function authorizeOperator(address operator) external;\r\n  function revokeOperator(address operator) external;\r\n  function send(address to, uint256 amount, bytes calldata data) external;\r\n  function operatorSend(address from, address to, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\r\n  function burn(uint256 amount, bytes calldata data) external;\r\n  function operatorBurn( address from, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n// As described in https://eips.ethereum.org/EIPS/eip-20\r\ninterface IERC20 {\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function name() external view returns (string memory); // optional method - see eip spec\r\n  function symbol() external view returns (string memory); // optional method - see eip spec\r\n  function decimals() external view returns (uint8); // optional method - see eip spec\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address owner) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/thirdParty/interfaces/IERC1820Registry.sol\r\n\r\n// From open https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/introspection/IERC1820Registry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the global ERC1820 Registry, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\r\n * implementers for interfaces in this registry, as well as query support.\r\n *\r\n * Implementers may be shared by multiple accounts, and can also implement more\r\n * than a single interface for each account. Contracts can implement interfaces\r\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\r\n * contract.\r\n *\r\n * {IERC165} interfaces can also be queried via the registry.\r\n *\r\n * For an in-depth explanation and source code analysis, see the EIP text.\r\n */\r\ninterface IERC1820Registry {\r\n    /**\r\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\r\n     * account is able to set interface implementers for it.\r\n     *\r\n     * By default, each account is its own manager. Passing a value of `0x0` in\r\n     * `newManager` will reset the manager to this initial state.\r\n     *\r\n     * Emits a {ManagerChanged} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     */\r\n    function setManager(address account, address newManager) external;\r\n\r\n    /**\r\n     * @dev Returns the manager for `account`.\r\n     *\r\n     * See {setManager}.\r\n     */\r\n    function getManager(address account) external view returns (address);\r\n\r\n    /**\r\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\r\n     * `interfaceHash`.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     * The zero address can also be used in `implementer` to remove an old one.\r\n     *\r\n     * See {interfaceHash} to learn how these are created.\r\n     *\r\n     * Emits an {InterfaceImplementerSet} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for `account`.\r\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\r\n     * end in 28 zeroes).\r\n     * - `implementer` must implement {IERC1820Implementer} and return true when\r\n     * queried for support, unless `implementer` is the caller. See\r\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\r\n     */\r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n\r\n    /**\r\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\r\n     * implementer is registered, returns the zero address.\r\n     *\r\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\r\n     * zeroes), `account` will be queried for support of it.\r\n     *\r\n     * `account` being the zero address is an alias for the caller's address.\r\n     */\r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\r\n     * corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\r\n     */\r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    /**\r\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\r\n     *  @param account Address of the contract for which to update the cache.\r\n     *  @param interfaceId ERC165 interface for which to update the cache.\r\n     */\r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\r\n     *  If the result is not cached a direct lookup on the contract address is performed.\r\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\r\n     *  {updateERC165Cache} with the contract address.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if `account` implements `interfaceId`, false otherwise.\r\n     */\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\n// File: contracts/interfaces/IERC777Sender.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n// As defined in the 'ERC777TokensSender And The tokensToSend Hook' section of https://eips.ethereum.org/EIPS/eip-777\r\ninterface IERC777Sender {\r\n  function tokensToSend(address operator, address from, address to, uint256 amount, bytes calldata data,\r\n      bytes calldata operatorData) external;\r\n}\r\n\r\n// File: contracts/interfaces/IERC777Recipient.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n// As defined in the 'ERC777TokensRecipient And The tokensReceived Hook' section of https://eips.ethereum.org/EIPS/eip-777\r\ninterface IERC777Recipient {\r\n  function tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata data,\r\n      bytes calldata operatorData) external;\r\n}\r\n\r\n// File: contracts/thirdParty/SafeMath.sol\r\n\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/LToken.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\n\r\n\r\n\r\nstruct TokenState {\r\n  uint256 totalSupply;\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping(address => uint256)) approvals;\r\n  mapping(address => mapping(address => bool)) authorizedOperators;\r\n  address[] defaultOperators;\r\n  mapping(address => bool) defaultOperatorIsRevoked;\r\n  mapping(address => bool) minters;\r\n}\r\n\r\nlibrary LToken {\r\n  using SafeMath for uint256;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Sent(address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data,\r\n      bytes operatorData);\r\n  event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n  event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n  event AuthorizedOperator(address indexed operator, address indexed holder);\r\n  event RevokedOperator(address indexed operator, address indexed holder);\r\n\r\n  // Universal address as defined in Registry Contract Address section of https://eips.ethereum.org/EIPS/eip-1820\r\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n  // precalculated hashes - see https://github.com/ethereum/solidity/issues/4024\r\n  // keccak256(\"ERC777TokensSender\")\r\n  bytes32 constant internal ERC777_TOKENS_SENDER_HASH = 0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\r\n  // keccak256(\"ERC777TokensRecipient\")\r\n  bytes32 constant internal ERC777_TOKENS_RECIPIENT_HASH = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\r\n\r\n  modifier checkSenderNotOperator(address _operator) {\r\n    require(_operator != msg.sender, \"Cannot be operator for self\");\r\n    _;\r\n  }\r\n\r\n  function initState(TokenState storage _tokenState, uint8 _decimals, uint256 _initialSupply)\r\n    external\r\n  {\r\n    _tokenState.defaultOperators.push(address(this));\r\n    _tokenState.totalSupply = _initialSupply.mul(10**uint256(_decimals));\r\n    _tokenState.balances[msg.sender] = _tokenState.totalSupply;\r\n  }\r\n\r\n  function transferFrom(TokenState storage _tokenState, address _from, address _to, uint256 _value)\r\n    external\r\n  {\r\n    _tokenState.approvals[_from][msg.sender] = _tokenState.approvals[_from][msg.sender].sub(_value, \"Amount not approved\");\r\n    doSend(_tokenState, msg.sender, _from, _to, _value, \"\", \"\", false);\r\n  }\r\n\r\n  function approve(TokenState storage _tokenState, address _spender, uint256 _value)\r\n    external\r\n  {\r\n    require(_spender != address(0), \"Cannot approve to zero address\");\r\n    _tokenState.approvals[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function authorizeOperator(TokenState storage _tokenState, address _operator)\r\n    checkSenderNotOperator(_operator)\r\n    external\r\n  {\r\n    if (_operator == address(this))\r\n      _tokenState.defaultOperatorIsRevoked[msg.sender] = false;\r\n    else\r\n      _tokenState.authorizedOperators[_operator][msg.sender] = true;\r\n    emit AuthorizedOperator(_operator, msg.sender);\r\n  }\r\n\r\n  function revokeOperator(TokenState storage _tokenState, address _operator)\r\n    checkSenderNotOperator(_operator)\r\n    external\r\n  {\r\n    if (_operator == address(this))\r\n      _tokenState.defaultOperatorIsRevoked[msg.sender] = true;\r\n    else\r\n      _tokenState.authorizedOperators[_operator][msg.sender] = false;\r\n    emit RevokedOperator(_operator, msg.sender);\r\n  }\r\n\r\n  function authorizeMinter(TokenState storage _tokenState, address _minter)\r\n    external\r\n  {\r\n    _tokenState.minters[_minter] = true;\r\n  }\r\n\r\n  function revokeMinter(TokenState storage _tokenState, address _minter)\r\n    external\r\n  {\r\n    _tokenState.minters[_minter] = false;\r\n  }\r\n\r\n  function doMint(TokenState storage _tokenState, address _to, uint256 _amount)\r\n    external\r\n  {\r\n    assert(_to != address(0));\r\n\r\n    _tokenState.totalSupply = _tokenState.totalSupply.add(_amount);\r\n    _tokenState.balances[_to] = _tokenState.balances[_to].add(_amount);\r\n\r\n    // From ERC777: The token contract MUST call the tokensReceived hook after updating the state.\r\n    receiveHook(address(this), address(0), _to, _amount, \"\", \"\", true);\r\n\r\n    emit Minted(address(this), _to, _amount, \"\", \"\");\r\n    emit Transfer(address(0), _to, _amount);\r\n  }\r\n\r\n  function doBurn(TokenState storage _tokenState, address _operator, address _from, uint256 _amount, bytes calldata _data,\r\n      bytes calldata _operatorData)\r\n    external\r\n  {\r\n    assert(_from != address(0));\r\n    // From ERC777: The token contract MUST call the tokensToSend hook before updating the state.\r\n    sendHook(_operator, _from, address(0), _amount, _data, _operatorData);\r\n\r\n    _tokenState.balances[_from] = _tokenState.balances[_from].sub(_amount, \"Cannot burn more than balance\");\r\n    _tokenState.totalSupply = _tokenState.totalSupply.sub(_amount);\r\n\r\n    emit Burned(_operator, _from, _amount, _data, _operatorData);\r\n    emit Transfer(_from, address(0), _amount);\r\n  }\r\n\r\n  function doSend(TokenState storage _tokenState, address _operator, address _from, address _to, uint256 _amount,\r\n      bytes memory _data, bytes memory _operatorData, bool _enforceERC777)\r\n    public\r\n  {\r\n    assert(_from != address(0));\r\n\r\n    require(_to != address(0), \"Cannot send funds to 0 address\");\r\n    // From ERC777: The token contract MUST call the tokensToSend hook before updating the state.\r\n    sendHook(_operator, _from, _to, _amount, _data, _operatorData);\r\n\r\n    _tokenState.balances[_from] = _tokenState.balances[_from].sub(_amount, \"Amount exceeds available funds\");\r\n    _tokenState.balances[_to] = _tokenState.balances[_to].add(_amount);\r\n\r\n    emit Sent(_operator, _from, _to, _amount, _data, _operatorData);\r\n    emit Transfer(_from, _to, _amount);\r\n\r\n    // From ERC777: The token contract MUST call the tokensReceived hook after updating the state.\r\n    receiveHook(_operator, _from, _to, _amount, _data, _operatorData, _enforceERC777);\r\n  }\r\n\r\n  function receiveHook(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\r\n      bytes memory _operatorData, bool _enforceERC777)\r\n    public\r\n  {\r\n    address implementer = ERC1820_REGISTRY.getInterfaceImplementer(_to, ERC777_TOKENS_RECIPIENT_HASH);\r\n    if (implementer != address(0))\r\n      IERC777Recipient(implementer).tokensReceived(_operator, _from, _to, _amount, _data, _operatorData);\r\n    else if (_enforceERC777)\r\n      require(!isContract(_to), \"Must be registered with ERC1820\");\r\n  }\r\n\r\n  function sendHook(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\r\n      bytes memory _operatorData)\r\n    public\r\n  {\r\n    address implementer = ERC1820_REGISTRY.getInterfaceImplementer(_from, ERC777_TOKENS_SENDER_HASH);\r\n    if (implementer != address(0))\r\n      IERC777Sender(implementer).tokensToSend(_operator, _from, _to, _amount, _data, _operatorData);\r\n  }\r\n\r\n  function isContract(address _account)\r\n    private\r\n    view\r\n    returns (bool isContract_)\r\n  {\r\n    uint256 size;\r\n\r\n    assembly {\r\n      size := extcodesize(_account)\r\n    }\r\n\r\n    isContract_ = size != 0;\r\n  }\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * Implements ERC777 with ERC20 as defined in https://eips.ethereum.org/EIPS/eip-777, with minting support.\r\n * NOTE: Minting is internal only: derive from this contract according to usage.\r\n */\r\ncontract Token is IERC777, IERC20 {\r\n\r\n  string private tokenName;\r\n  string private tokenSymbol;\r\n  uint8 constant private tokenDecimals = 18;\r\n  uint256 constant private tokenGranularity = 1;\r\n  TokenState public tokenState;\r\n\r\n  // Universal address as defined in Registry Contract Address section of https://eips.ethereum.org/EIPS/eip-1820\r\n  IERC1820Registry constant internal ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n  // keccak256(\"ERC777Token\")\r\n  bytes32 constant internal ERC777_TOKEN_HASH = 0xac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce2177054;\r\n  // keccak256(\"ERC20Token\")\r\n  bytes32 constant internal ERC20_TOKEN_HASH = 0xaea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a;\r\n\r\n  event AuthorizedMinter(address minter);\r\n  event RevokedMinter(address minter);\r\n\r\n  constructor(string memory _name, string memory _symbol, uint256 _initialSupply)\r\n    internal\r\n  {\r\n    require(bytes(_name).length != 0, \"Needs a name\");\r\n    require(bytes(_symbol).length != 0, \"Needs a symbol\");\r\n    tokenName = _name;\r\n    tokenSymbol = _symbol;\r\n    LToken.initState(tokenState, tokenDecimals, _initialSupply);\r\n\r\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC777_TOKEN_HASH, address(this));\r\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC20_TOKEN_HASH, address(this));\r\n  }\r\n\r\n  modifier onlyOperator(address _holder) {\r\n    require(isOperatorFor(msg.sender, _holder), \"Not an operator\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyMinter {\r\n    require(tokenState.minters[msg.sender], \"onlyMinter\");\r\n    _;\r\n  }\r\n\r\n  function name()\r\n    external\r\n    view\r\n    override(IERC777, IERC20)\r\n    returns (string memory name_)\r\n  {\r\n    name_ = tokenName;\r\n  }\r\n\r\n  function symbol()\r\n    external\r\n    view\r\n    override(IERC777, IERC20)\r\n    returns (string memory symbol_)\r\n  {\r\n    symbol_ = tokenSymbol;\r\n  }\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    override\r\n    returns (uint8 decimals_)\r\n  {\r\n    decimals_ = tokenDecimals;\r\n  }\r\n\r\n  function granularity()\r\n    external\r\n    view\r\n    override\r\n    returns (uint256 granularity_)\r\n  {\r\n    granularity_ = tokenGranularity;\r\n  }\r\n\r\n  function balanceOf(address _holder)\r\n    external\r\n    override(IERC777, IERC20)\r\n    view\r\n    returns (uint256 balance_)\r\n  {\r\n    balance_ = tokenState.balances[_holder];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value)\r\n    external\r\n    override\r\n    returns (bool success_)\r\n  {\r\n    doSend(msg.sender, msg.sender, _to, _value, \"\", \"\", false);\r\n    success_ = true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    external\r\n    override\r\n    returns (bool success_)\r\n  {\r\n    LToken.transferFrom(tokenState, _from, _to, _value);\r\n    success_ = true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    external\r\n    override\r\n    returns (bool success_)\r\n  {\r\n    LToken.approve(tokenState, _spender, _value);\r\n    success_ = true;\r\n  }\r\n\r\n  function allowance(address _holder, address _spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256 remaining_)\r\n  {\r\n    remaining_ = tokenState.approvals[_holder][_spender];\r\n  }\r\n\r\n  function defaultOperators()\r\n    external\r\n    view\r\n    override\r\n    returns (address[] memory)\r\n  {\r\n    return tokenState.defaultOperators;\r\n  }\r\n\r\n  function authorizeOperator(address _operator)\r\n    external\r\n    override\r\n  {\r\n    LToken.authorizeOperator(tokenState, _operator);\r\n  }\r\n\r\n  function revokeOperator(address _operator)\r\n    external\r\n    override\r\n  {\r\n    LToken.revokeOperator(tokenState, _operator);\r\n  }\r\n\r\n  function send(address _to, uint256 _amount, bytes calldata _data)\r\n    external\r\n    override\r\n  {\r\n    doSend(msg.sender, msg.sender, _to, _amount, _data, \"\", true);\r\n  }\r\n\r\n  function operatorSend(address _from, address _to, uint256 _amount, bytes calldata _data, bytes calldata _operatorData)\r\n    external\r\n    override\r\n    onlyOperator(_from)\r\n  {\r\n    doSend(msg.sender, _from, _to, _amount, _data, _operatorData, true);\r\n  }\r\n\r\n  function burn(uint256 _amount, bytes calldata _data)\r\n    external\r\n    override\r\n  {\r\n    doBurn(msg.sender, msg.sender, _amount, _data, \"\");\r\n  }\r\n\r\n  function operatorBurn(address _from, uint256 _amount, bytes calldata _data, bytes calldata _operatorData)\r\n    external\r\n    override\r\n    onlyOperator(_from)\r\n  {\r\n    doBurn(msg.sender, _from, _amount, _data, _operatorData);\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount)\r\n    external\r\n    onlyMinter\r\n  {\r\n    LToken.doMint(tokenState, _to, _amount);\r\n  }\r\n\r\n  function totalSupply()\r\n    external\r\n    view\r\n    override(IERC777, IERC20)\r\n    returns (uint256 totalSupply_)\r\n  {\r\n    totalSupply_ = tokenState.totalSupply;\r\n  }\r\n\r\n  function isOperatorFor(address _operator, address _holder)\r\n    public\r\n    view\r\n    override\r\n    returns (bool isOperatorFor_)\r\n  {\r\n    isOperatorFor_ = (_operator == _holder || tokenState.authorizedOperators[_operator][_holder]\r\n        || _operator == address(this) && !tokenState.defaultOperatorIsRevoked[_holder]);\r\n  }\r\n\r\n  function doSend(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\r\n      bytes memory _operatorData, bool _enforceERC777)\r\n    internal\r\n    virtual\r\n  {\r\n    LToken.doSend(tokenState, _operator, _from, _to, _amount, _data, _operatorData, _enforceERC777);\r\n  }\r\n\r\n  function doBurn(address _operator, address _from, uint256 _amount, bytes memory _data, bytes memory _operatorData)\r\n    internal\r\n  {\r\n    LToken.doBurn(tokenState, _operator, _from, _amount, _data, _operatorData);\r\n  }\r\n\r\n  function authorizeMinter(address _minter)\r\n    internal\r\n  {\r\n    LToken.authorizeMinter(tokenState, _minter);\r\n\r\n    emit AuthorizedMinter(_minter);\r\n  }\r\n\r\n  function revokeMinter(address _minter)\r\n    internal\r\n  {\r\n    LToken.revokeMinter(tokenState, _minter);\r\n\r\n    emit RevokedMinter(_minter);\r\n  }\r\n}\r\n\r\n// File: contracts/Owned.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\ncontract Owned {\r\n\r\n  address public owner = msg.sender;\r\n\r\n  event LogOwnershipTransferred(address indexed owner, address indexed newOwner);\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner, \"Sender must be owner\");\r\n    _;\r\n  }\r\n\r\n  function setOwner(address _owner)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_owner != address(0), \"Owner cannot be zero address\");\r\n    emit LogOwnershipTransferred(owner, _owner);\r\n    owner = _owner;\r\n  }\r\n}\r\n\r\n// File: contracts/VOWToken.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\n\r\n\r\n/**\r\n * ERC777/20 contract which also:\r\n * - is owned\r\n * - supports proxying of own tokens (only if signed correctly)\r\n * - supports partner contracts, keyed by hash\r\n * - supports minting (only by owner approved contracts)\r\n * - has a USD price\r\n */\r\ncontract VOWToken is Token, IERC777Recipient, Owned {\r\n\r\n  mapping (bytes32 => bool) public proxyProofs;\r\n  uint256[2] public usdRate;\r\n  address public usdRateSetter;\r\n  mapping(bytes32 => address payable) public partnerContracts;\r\n\r\n  // precalculated hash - see https://github.com/ethereum/solidity/issues/4024\r\n  // keccak256(\"ERC777TokensRecipient\")\r\n  bytes32 constant internal ERC777_TOKENS_RECIPIENT_HASH = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\r\n\r\n  event LogUSDRateSetterSet(address indexed usdRateSetter);\r\n  event LogUSDRateSet(uint256 numTokens, uint256 numUSD);\r\n  event LogProxiedTokens(address indexed from, address indexed to, uint256 amount, bytes data, uint256 nonce, bytes proof);\r\n  event LogPartnerContractSet(bytes32 indexed keyHash, address indexed partnerContract);\r\n  event LogMintPermissionSet(address indexed contractAddress, bool canMint);\r\n\r\n  constructor(string memory _name, string memory _symbol, uint256 _initialSupply, uint256[2] memory _initialUSDRate)\r\n    public\r\n    Token(_name, _symbol, _initialSupply)\r\n  {\r\n    doSetUSDRate(_initialUSDRate[0], _initialUSDRate[1]);\r\n\r\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC777_TOKENS_RECIPIENT_HASH, address(this));\r\n  }\r\n\r\n  modifier onlyUSDRateSetter() {\r\n    require(msg.sender == usdRateSetter, \"onlyUSDRateSetter\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnTokens {\r\n    require(msg.sender == address(this), \"onlyOwnTokens\");\r\n    _;\r\n  }\r\n\r\n  modifier addressNotNull(address _address) {\r\n    require(_address != address(0), \"Address cannot be null\");\r\n    _;\r\n  }\r\n\r\n  function tokensReceived(address /* _operator */, address /* _from */, address /* _to */, uint256 _amount,\r\n      bytes calldata _data, bytes calldata /* _operatorData */)\r\n    external\r\n    override\r\n    onlyOwnTokens\r\n  {\r\n    (address from, address to, uint256 amount, bytes memory data, uint256 nonce, bytes memory proof) =\r\n        abi.decode(_data, (address, address, uint256, bytes, uint256, bytes));\r\n    checkProxying(from, to, amount, data, nonce, proof);\r\n\r\n    if (_amount != 0)\r\n      this.send(from, _amount, \"\");\r\n\r\n    this.operatorSend(from, to, amount, data, _data);\r\n\r\n    emit LogProxiedTokens(from, to, amount, data, nonce, proof);\r\n  }\r\n\r\n  function setPartnerContract(bytes32 _keyHash, address payable _partnerContract)\r\n    external\r\n    onlyOwner\r\n    addressNotNull(_partnerContract)\r\n  {\r\n    require(_keyHash != bytes32(0), \"Missing key hash\");\r\n    partnerContracts[_keyHash] = _partnerContract;\r\n\r\n    emit LogPartnerContractSet(_keyHash, _partnerContract);\r\n  }\r\n\r\n  function setUSDRateSetter(address _usdRateSetter)\r\n    external\r\n    onlyOwner\r\n    addressNotNull(_usdRateSetter)\r\n  {\r\n    usdRateSetter = _usdRateSetter;\r\n\r\n    emit LogUSDRateSetterSet(_usdRateSetter);\r\n  }\r\n\r\n  function setUSDRate(uint256 _numTokens, uint256 _numUSD)\r\n    external\r\n    onlyUSDRateSetter\r\n  {\r\n    doSetUSDRate(_numTokens, _numUSD);\r\n\r\n    emit LogUSDRateSet(_numTokens, _numUSD);\r\n  }\r\n\r\n  function setMintPermission(address _contract, bool _canMint)\r\n    external\r\n    onlyOwner\r\n    addressNotNull(_contract)\r\n  {\r\n    if (_canMint)\r\n      authorizeMinter(_contract);\r\n    else\r\n      revokeMinter(_contract);\r\n\r\n    emit LogMintPermissionSet(_contract, _canMint);\r\n  }\r\n\r\n  function doSetUSDRate(uint256 _numTokens, uint256 _numUSD)\r\n    private\r\n  {\r\n    require(_numTokens != 0, \"numTokens cannot be zero\");\r\n    require(_numUSD != 0, \"numUSD cannot be zero\");\r\n    usdRate = [_numTokens, _numUSD];\r\n  }\r\n\r\n  function checkProxying(address _from, address _to, uint256 _amount, bytes memory _data, uint256 _nonce, bytes memory _proof)\r\n    private\r\n  {\r\n    require(!proxyProofs[keccak256(_proof)], \"Proxy proof not unique\");\r\n    proxyProofs[keccak256(_proof)] = true;\r\n    bytes32 hash = keccak256(abi.encodePacked(address(this), _from, _to, _amount, _data, _nonce));\r\n    address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(hash), _proof);\r\n    require(signer == _from, \"Bad signer\");\r\n  }\r\n}\r\n\r\n// File: contracts/VSCToken.sol\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\n/**\r\n * VSCToken is a VOWToken with:\r\n * - a linked parent Vow token\r\n * - tier 1 burn (with owner aproved exceptions)\r\n * - tier 2 delegated lifting (only by owner approved contracts)\r\n */\r\ncontract VSCToken is VOWToken {\r\n  using SafeMath for uint256;\r\n\r\n  address public immutable vowContract;\r\n  mapping(address => bool) public canLift;\r\n  mapping(address => bool) public skipTier1Burn;\r\n  uint256[2] public tier1BurnVSC;\r\n\r\n  event LogTier1BurnVSCUpdated(uint256[2] ratio);\r\n  event LogLiftPermissionSet(address indexed liftingAddress, bool canLift);\r\n  event LogSkipTier1BurnSet(address indexed skipTier1BurnAddress, bool skipTier1Burn);\r\n\r\n  constructor(string memory _name, string memory _symbol, uint256[2] memory _initialVSCUSD, address _vowContract)\r\n    VOWToken(_name, _symbol, 0, _initialVSCUSD)\r\n    public\r\n  {\r\n    vowContract = _vowContract;\r\n\r\n    ERC1820_REGISTRY.setInterfaceImplementer(address(this), ERC777_TOKENS_RECIPIENT_HASH, address(this));\r\n\r\n    tier1BurnVSC = [0, 1]; // Default to no burn: ie burn 0 VSC for every 1 VSC sent on tier 1\r\n\r\n    setSkipTier1Burn(address(this), true);\r\n  }\r\n\r\n  modifier onlyLifter() {\r\n    require(canLift[msg.sender], \"onlyLifter\");\r\n    _;\r\n  }\r\n\r\n  function setLiftPermission(address _liftingAddress, bool _canLift)\r\n    external\r\n    onlyOwner\r\n    addressNotNull(_liftingAddress)\r\n  {\r\n    canLift[_liftingAddress] = _canLift;\r\n\r\n    emit LogLiftPermissionSet(_liftingAddress, _canLift);\r\n  }\r\n\r\n  function setTier1BurnVSC(uint256 _numVSCBurned, uint256 _numVSCSent)\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(_numVSCSent != 0, \"Invalid burn ratio: div by zero\");\r\n    require(_numVSCSent >= _numVSCBurned, \"Invalid burn ratio: above 100%\");\r\n    tier1BurnVSC = [_numVSCBurned, _numVSCSent];\r\n\r\n    emit LogTier1BurnVSCUpdated(tier1BurnVSC);\r\n  }\r\n\r\n  function lift(address _liftAccount, uint256 _amount, bytes calldata _data)\r\n    external\r\n    onlyLifter\r\n  {\r\n    address tier2ScalingManager = partnerContracts[keccak256(abi.encodePacked(\"FTScalingManager\"))];\r\n    this.operatorSend(_liftAccount, tier2ScalingManager, _amount , _data, \"\");\r\n  }\r\n\r\n  function setSkipTier1Burn(address _skipTier1BurnAddress, bool _skipTier1Burn)\r\n    public\r\n    onlyOwner\r\n    addressNotNull(_skipTier1BurnAddress)\r\n  {\r\n    skipTier1Burn[_skipTier1BurnAddress] = _skipTier1Burn;\r\n\r\n    emit LogSkipTier1BurnSet(_skipTier1BurnAddress, _skipTier1Burn);\r\n  }\r\n\r\n  function doSend(address _operator, address _from, address _to, uint256 _amount, bytes memory _data,\r\n      bytes memory _operatorData, bool _enforceERC777)\r\n    internal\r\n    virtual\r\n    override\r\n  {\r\n    uint256 actualSendAmount = _amount;\r\n\r\n    if (!skipTier1Burn[_from] && !skipTier1Burn[_to]) {\r\n      uint256 burnAmount = _amount.mul(tier1BurnVSC[0]).div(tier1BurnVSC[1]);\r\n      doBurn(_operator, _from, burnAmount, _data, _operatorData);\r\n      actualSendAmount = actualSendAmount.sub(burnAmount);\r\n    }\r\n    super.doSend(_operator, _from, _to, actualSendAmount, _data, _operatorData, _enforceERC777);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256[2]\",\"name\":\"_initialVSCUSD\",\"type\":\"uint256[2]\"},{\"internalType\":\"address\",\"name\":\"_vowContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"AuthorizedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liftingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canLift\",\"type\":\"bool\"}],\"name\":\"LogLiftPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canMint\",\"type\":\"bool\"}],\"name\":\"LogMintPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partnerContract\",\"type\":\"address\"}],\"name\":\"LogPartnerContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"LogProxiedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"skipTier1BurnAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"skipTier1Burn\",\"type\":\"bool\"}],\"name\":\"LogSkipTier1BurnSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"ratio\",\"type\":\"uint256[2]\"}],\"name\":\"LogTier1BurnVSCUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numUSD\",\"type\":\"uint256\"}],\"name\":\"LogUSDRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usdRateSetter\",\"type\":\"address\"}],\"name\":\"LogUSDRateSetterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"RevokedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canLift\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"granularity_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperatorFor_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liftAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"partnerContracts\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proxyProofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liftingAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canLift\",\"type\":\"bool\"}],\"name\":\"setLiftPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canMint\",\"type\":\"bool\"}],\"name\":\"setMintPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_partnerContract\",\"type\":\"address\"}],\"name\":\"setPartnerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_skipTier1BurnAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_skipTier1Burn\",\"type\":\"bool\"}],\"name\":\"setSkipTier1Burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numVSCBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numVSCSent\",\"type\":\"uint256\"}],\"name\":\"setTier1BurnVSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numUSD\",\"type\":\"uint256\"}],\"name\":\"setUSDRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdRateSetter\",\"type\":\"address\"}],\"name\":\"setUSDRateSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"skipTier1Burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tier1BurnVSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdRateSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vowContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VSCToken", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000006007df00000000000000000000000000000000000000000000000000000000000f42400000000000000000000000001bbf25e71ec48b84d773809b4ba55b6f4be946fb000000000000000000000000000000000000000000000000000000000000000476444b4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476444b4b00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "LToken:60ca4ec4412a3b319f4bd6366bb836395336b397", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c0f04376c092424b843087e46d06977a9a71e7825053fcd2b1d9e6c0b0dc56d"}