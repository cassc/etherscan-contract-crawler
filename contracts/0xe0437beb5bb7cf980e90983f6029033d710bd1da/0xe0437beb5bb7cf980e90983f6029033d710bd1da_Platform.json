{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/Platform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./utils/SafeMath16.sol\\\";\\r\\nimport \\\"./interfaces/IPlatform.sol\\\";\\r\\n\\r\\ncontract Platform is IPlatform, Ownable, ERC20 {\\r\\n\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct Position {\\r\\n        uint256 positionUnitsAmount;\\r\\n        uint256 creationTimestamp;\\r\\n        uint256 pendingFees; // Funding fees calculated for earlier positions before merge (if occured)\\r\\n        uint256 positionAddressesIndex;    \\r\\n    }  \\r\\n\\r\\n    uint256 public constant MAX_FEE_PERCENTAGE = 10000;\\r\\n    uint256 public constant MAX_PERCENTAGE = 1000000;\\r\\n\\r\\n    uint256 public constant PRECISION_DECIMALS = 1e10;\\r\\n\\r\\n    uint256 public constant MAX_CVI_VALUE = 20000;\\r\\n\\r\\n    uint256 public immutable initialTokenToLPTokenRate;\\r\\n\\r\\n    IERC20 private token;\\r\\n    ICVIOracle private cviOracle;\\r\\n    IRewards private rewards;\\r\\n    ILiquidation private liquidation;\\r\\n    IFeesModel private feesModel;\\r\\n    IFeesCalculator private feesCalculator;\\r\\n    IFeesCollector private feesCollector;\\r\\n\\r\\n    uint256 public lpsLockupPeriod = 3 days;\\r\\n    uint256 public buyersLockupPeriod = 24 hours;\\r\\n\\r\\n    uint256 public totalPositionUnitsAmount;\\r\\n    uint256 public totalFundingFeesAmount;\\r\\n\\r\\n    bool public emergencyWithdrawAllowed = false;\\r\\n\\r\\n    mapping(address => uint256) public lastDepositTimestamp;\\r\\n    mapping(address => Position) public positions;\\r\\n\\r\\n    mapping(address => bool) public revertLockedTransfered;\\r\\n\\r\\n    address[] private holdersAddresses;\\r\\n\\r\\n    constructor(IERC20 _token, string memory _lpTokenName, string memory _lpTokenSymbolName, uint256 _initialTokenToLPTokenRate,\\r\\n        IFeesModel _feesModel,\\r\\n        IFeesCalculator _feesCalculator,\\r\\n        ICVIOracle _cviOracle,\\r\\n        ILiquidation _liquidation) public ERC20(_lpTokenName, _lpTokenSymbolName) {\\r\\n\\r\\n        token = _token;\\r\\n        initialTokenToLPTokenRate = _initialTokenToLPTokenRate;\\r\\n        feesModel = _feesModel;\\r\\n        feesCalculator = _feesCalculator;\\r\\n        cviOracle = _cviOracle;\\r\\n        liquidation = _liquidation;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _tokenAmount, uint256 _minLPTokenAmount) external override returns (uint256 lpTokenAmount) {\\r\\n        lpTokenAmount = _deposit(_tokenAmount, _minLPTokenAmount, true);\\r\\n    }    \\r\\n\\r\\n    function withdraw(uint256 _tokenAmount, uint256 _maxLPTokenBurnAmount) external override returns (uint256 burntAmount, uint256 withdrawnAmount) {\\r\\n        (burntAmount, withdrawnAmount) = _withdraw(_tokenAmount, false, _maxLPTokenBurnAmount, true);\\r\\n    }\\r\\n\\r\\n    function withdrawLPTokens(uint256 _lpTokensAmount) external override returns (uint256 burntAmount, uint256 withdrawnAmount) {\\r\\n        require(_lpTokensAmount > 0, \\\"Amount must be positive\\\");\\r\\n        (burntAmount, withdrawnAmount) = _withdraw(0, true, _lpTokensAmount, true);\\r\\n    }\\r\\n\\r\\n    function openPosition(uint256 _tokenAmount, uint16 _maxCVI) external override returns (uint256 positionUnitsAmount) {\\r\\n        positionUnitsAmount = _openPosition(_tokenAmount, _maxCVI, true);\\r\\n    }\\r\\n\\r\\n    function closePosition(uint256 _positionUnitsAmount, uint16 _minCVI) external override returns (uint256 tokenAmount) {\\r\\n        tokenAmount = _closePosition(_positionUnitsAmount, _minCVI, true);\\r\\n    }\\r\\n\\r\\n    function liquidatePositions(address[] calldata _positionOwners) external override returns (uint256 finderFeeAmount) {\\r\\n        finderFeeAmount = _liquidatePositions(_positionOwners);\\r\\n    }\\r\\n\\r\\n    function setCVIOracle(ICVIOracle _newOracle) external override onlyOwner {\\r\\n        cviOracle = _newOracle;\\r\\n    }\\r\\n\\r\\n    function setRewards(IRewards _newRewards) external override onlyOwner {\\r\\n        rewards = _newRewards;\\r\\n    }\\r\\n\\r\\n    function setLiquidation(ILiquidation _newLiquidation) external override onlyOwner {\\r\\n        liquidation = _newLiquidation;\\r\\n    }\\r\\n\\r\\n    function setFeesCollector(IFeesCollector _newCollector) external override onlyOwner {\\r\\n        feesCollector = _newCollector;\\r\\n        if (address(_newCollector) != address(0)) {\\r\\n            token.safeApprove(address(feesCollector), uint256(-1));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setFeesModel(IFeesModel _newModel) external override onlyOwner {\\r\\n        feesModel = _newModel;\\r\\n    }\\r\\n    \\r\\n    function setLPLockupPeriod(uint256 _newLPLockupPeriod) external override onlyOwner {\\r\\n        require(_newLPLockupPeriod <= 2 weeks, \\\"Lockup too long\\\");\\r\\n        lpsLockupPeriod = _newLPLockupPeriod;\\r\\n    }\\r\\n\\r\\n    function setBuyersLockupPeriod(uint256 _newBuyersLockupPeriod) external override onlyOwner {\\r\\n        require(_newBuyersLockupPeriod <= 1 weeks, \\\"Lockup too long\\\");\\r\\n        buyersLockupPeriod = _newBuyersLockupPeriod;\\r\\n    }\\r\\n\\r\\n    function setRevertLockedTransfers(bool _revertLockedTransfers) external override {\\r\\n        revertLockedTransfered[msg.sender] = _revertLockedTransfers;   \\r\\n    }\\r\\n\\r\\n    function setFeesCalculator(IFeesCalculator _newCalculator) external override onlyOwner {\\r\\n        feesCalculator = _newCalculator;\\r\\n    }\\r\\n\\r\\n    function setEmergencyWithdrawAllowed(bool _newEmergencyWithdrawAllowed) external override onlyOwner {\\r\\n        emergencyWithdrawAllowed = _newEmergencyWithdrawAllowed;\\r\\n    }\\r\\n\\r\\n    function getToken() external view override returns (IERC20) {\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    function calculatePositionBalance(address _positionAddress) public view override returns (uint256 currentPositionBalance, bool isPositive, uint256 positionUnitsAmount) {\\r\\n        positionUnitsAmount = positions[_positionAddress].positionUnitsAmount;\\r\\n        require(positionUnitsAmount > 0, \\\"No position for given address\\\");\\r\\n        (currentPositionBalance, isPositive) = _calculatePositionBalance(_positionAddress);\\r\\n    }\\r\\n\\r\\n    function calculatePositionPendingFees(address _positionAddress) public view override returns (uint256 pendingFees) {\\r\\n        Position memory position = positions[_positionAddress];\\r\\n        pendingFees = position.pendingFees.add(feesModel.calculateFundingFees(position.creationTimestamp, position.positionUnitsAmount))\\r\\n        .add(feesModel.calculateFundingFeesAddendum(position.positionUnitsAmount));\\r\\n    }\\r\\n\\r\\n    function totalBalance() public view override returns (uint256 balance) {\\r\\n        (uint16 cviValue,) = cviOracle.getCVILatestRoundData();\\r\\n        return token.balanceOf(address(this)).sub(totalPositionUnitsAmount.mul(cviValue).div(MAX_CVI_VALUE)).add(totalFundingFeesAmount);\\r\\n    }\\r\\n\\r\\n    function totalBalanceWithAddendum() public view override returns (uint256 balance) {\\r\\n        return totalBalance().add(feesModel.calculateFundingFeesAddendum(totalPositionUnitsAmount));\\r\\n    }\\r\\n\\r\\n    function getLiquidableAddresses() external view override returns (address[] memory) {\\r\\n        address[] memory addressesToLiquidate = new address[](holdersAddresses.length);\\r\\n\\r\\n        uint256 liquidationAddressesAmount = 0;\\r\\n        for (uint256 i = 0; i < holdersAddresses.length; i++) {\\r\\n            (uint256 currentPositionBalance, bool isBalancePositive) = _calculatePositionBalance(holdersAddresses[i]);\\r\\n\\r\\n            if (liquidation.isLiquidationCandidate(currentPositionBalance, isBalancePositive, positions[holdersAddresses[i]].positionUnitsAmount)) {\\r\\n                addressesToLiquidate[liquidationAddressesAmount] = holdersAddresses[i];\\r\\n                liquidationAddressesAmount = liquidationAddressesAmount.add(1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        address[] memory addressesToActuallyLiquidate = new address[](liquidationAddressesAmount);\\r\\n        for (uint256 i = 0; i < liquidationAddressesAmount; i++) {\\r\\n            addressesToActuallyLiquidate[i] = addressesToLiquidate[i];\\r\\n        }\\r\\n\\r\\n        return addressesToActuallyLiquidate;\\r\\n    }\\r\\n\\r\\n    function _deposit(uint256 _tokenAmount, uint256 _minLPTokenAmount, bool _transferTokens) internal returns (uint256 lpTokenAmount) {\\r\\n        require(_tokenAmount > 0, \\\"Tokens amount must be positive\\\");\\r\\n        lastDepositTimestamp[msg.sender] = block.timestamp;\\r\\n\\r\\n        updateSnapshots();\\r\\n\\r\\n        uint256 depositFee = _tokenAmount.mul(uint256(feesCalculator.depositFeePercent())).div(MAX_FEE_PERCENTAGE);\\r\\n\\r\\n        uint256 tokenAmountToDeposit = _tokenAmount.sub(depositFee);\\r\\n        uint256 supply = totalSupply();\\r\\n        uint256 balance = totalBalance();\\r\\n    \\r\\n        if (supply > 0 && balance > 0) {\\r\\n                lpTokenAmount = tokenAmountToDeposit.mul(supply).div(balance);\\r\\n        } else {\\r\\n                lpTokenAmount = tokenAmountToDeposit.mul(initialTokenToLPTokenRate);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _tokenAmount, lpTokenAmount, depositFee);\\r\\n\\r\\n        require(lpTokenAmount >= _minLPTokenAmount, \\\"Too few LP tokens\\\");\\r\\n        require(lpTokenAmount > 0, \\\"Too few tokens\\\");\\r\\n        _mint(msg.sender, lpTokenAmount);\\r\\n\\r\\n        if (_transferTokens) {\\r\\n            token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\r\\n        }\\r\\n\\r\\n        collectProfit(depositFee);\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 _tokenAmount, bool _shouldBurnMax, uint256 _maxLPTokenBurnAmount, bool _transferTokens) internal returns (uint256 burntAmount, uint256 withdrawnAmount) {\\r\\n        require(lastDepositTimestamp[msg.sender].add(lpsLockupPeriod) <= block.timestamp, \\\"Funds are locked\\\");\\r\\n\\r\\n        updateSnapshots();\\r\\n\\r\\n        if (_shouldBurnMax) {\\r\\n            burntAmount = _maxLPTokenBurnAmount;\\r\\n            _tokenAmount = burntAmount.mul(totalBalance()).div(totalSupply());\\r\\n        } else {\\r\\n            require(_tokenAmount > 0, \\\"Tokens amount must be positive\\\");\\r\\n\\r\\n            // Note: rounding up (ceiling) the to-burn amount to prevent precision loss\\r\\n            burntAmount = _tokenAmount.mul(totalSupply()).sub(1).div(totalBalance()).add(1);\\r\\n            require(burntAmount <= _maxLPTokenBurnAmount, \\\"Too much LP tokens to burn\\\");\\r\\n        }\\r\\n\\r\\n        require(burntAmount <= balanceOf(msg.sender), \\\"Not enough LP tokens for account\\\");\\r\\n        \\r\\n        uint256 withdrawFee = _tokenAmount.mul(uint256(feesCalculator.withdrawFeePercent())).div(MAX_FEE_PERCENTAGE);\\r\\n        withdrawnAmount = _tokenAmount.sub(withdrawFee);\\r\\n\\r\\n        require(emergencyWithdrawAllowed || token.balanceOf(address(this)).sub(totalPositionUnitsAmount) >= withdrawnAmount, \\\"Collateral ratio broken\\\");\\r\\n\\r\\n        emit Withdraw(msg.sender, _tokenAmount, burntAmount, withdrawFee);\\r\\n        \\r\\n        _burn(msg.sender, burntAmount);\\r\\n\\r\\n        if (_transferTokens) {\\r\\n            token.safeTransfer(msg.sender, withdrawnAmount);\\r\\n        }\\r\\n\\r\\n        collectProfit(withdrawFee);\\r\\n    }\\r\\n\\r\\n    function _openPosition(uint256 _tokenAmount, uint16 _maxCVI, bool _transferTokens) internal returns (uint256 positionUnitsAmount) {\\r\\n        require(_tokenAmount > 0, \\\"Tokens amount must be positive\\\");\\r\\n        require(_maxCVI > 0 && _maxCVI <= MAX_CVI_VALUE, \\\"Bad max CVI value\\\");\\r\\n\\r\\n        (uint16 cviValue,) = cviOracle.getCVILatestRoundData();\\r\\n        require(cviValue <= _maxCVI, \\\"CVI too high\\\");\\r\\n\\r\\n        updateSnapshots();\\r\\n\\r\\n        uint256 openPositionFee = _tokenAmount.mul(uint256(feesCalculator.openPositionFeePercent())).div(MAX_FEE_PERCENTAGE);\\r\\n        uint256 positionUnitsAmountWithoutPremium =  _tokenAmount.sub(openPositionFee).mul(MAX_CVI_VALUE).div(cviValue);\\r\\n        uint256 minPositionUnitsAmount = positionUnitsAmountWithoutPremium.mul(MAX_FEE_PERCENTAGE.sub(feesCalculator.buyingPremiumFeeMaxPercent())).div(MAX_FEE_PERCENTAGE);\\r\\n\\r\\n        uint256 collateralRatio = 0;\\r\\n        if (token.balanceOf(address(this)) > 0) {\\r\\n            collateralRatio = (totalPositionUnitsAmount.add(minPositionUnitsAmount)).mul(PRECISION_DECIMALS).div(token.balanceOf(address(this)).add(_tokenAmount).sub(openPositionFee));\\r\\n        }\\r\\n        uint256 buyingPremiumFee = feesCalculator.calculateBuyingPremiumFee(_tokenAmount, collateralRatio);\\r\\n        \\r\\n        // Leaving buying premium in shared pool\\r\\n        uint256 tokenAmountToOpenPosition = _tokenAmount.sub(openPositionFee).sub(buyingPremiumFee);\\r\\n\\r\\n        positionUnitsAmount = tokenAmountToOpenPosition.mul(MAX_CVI_VALUE).div(cviValue);\\r\\n        \\r\\n        totalPositionUnitsAmount = totalPositionUnitsAmount.add(positionUnitsAmount);\\r\\n        if (positions[msg.sender].positionUnitsAmount > 0) {\\r\\n            Position storage position = positions[msg.sender];\\r\\n            position.pendingFees = position.pendingFees.add(feesModel.calculateFundingFees(position.creationTimestamp, \\r\\n                block.timestamp, position.positionUnitsAmount));\\r\\n            position.positionUnitsAmount = position.positionUnitsAmount.add(positionUnitsAmount);\\r\\n            position.creationTimestamp = block.timestamp;\\r\\n        } else {\\r\\n            Position memory newPosition = Position(positionUnitsAmount, block.timestamp, 0, holdersAddresses.length);\\r\\n\\r\\n            positions[msg.sender] = newPosition;\\r\\n            holdersAddresses.push(msg.sender);\\r\\n        }   \\r\\n\\r\\n        emit OpenPosition(msg.sender, _tokenAmount, openPositionFee.add(buyingPremiumFee), positions[msg.sender].positionUnitsAmount, cviValue);\\r\\n\\r\\n        if (_transferTokens) {\\r\\n            token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\r\\n        }\\r\\n\\r\\n        collectProfit(openPositionFee);\\r\\n\\r\\n        // Note: checking collateral ratio after transfering tokens to cover cases where token transfer induces a fee, for example\\r\\n        require(totalPositionUnitsAmount <= token.balanceOf(address(this)), \\\"Not enough liquidity\\\");\\r\\n\\r\\n        if (address(rewards) != address(0)) {\\r\\n            rewards.reward(msg.sender, positionUnitsAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _closePosition(uint256 _positionUnitsAmount, uint16 _minCVI, bool _transferTokens) internal returns (uint256 tokenAmount) {\\r\\n        require(_positionUnitsAmount > 0, \\\"Position units not positive\\\");\\r\\n        require(_minCVI > 0 && _minCVI <= MAX_CVI_VALUE, \\\"Bad min CVI value\\\");\\r\\n        require(positions[msg.sender].positionUnitsAmount >= _positionUnitsAmount, \\\"Not enough opened position units\\\");\\r\\n        require(block.timestamp.sub(positions[msg.sender].creationTimestamp) >= buyersLockupPeriod, \\\"Position locked\\\");\\r\\n\\r\\n        (uint16 cviValue,) = cviOracle.getCVILatestRoundData();\\r\\n        require(cviValue >= _minCVI, \\\"CVI too low\\\");\\r\\n\\r\\n        updateSnapshots();\\r\\n\\r\\n        Position storage position = positions[msg.sender];\\r\\n        uint256 positionBalance = _positionUnitsAmount.mul(cviValue).div(MAX_CVI_VALUE);\\r\\n        uint256 tokenAmountBeforeFees = positionBalance;\\r\\n        uint256 fundingFees = feesModel.calculateFundingFees(position.creationTimestamp, block.timestamp, _positionUnitsAmount);\\r\\n        uint256 realizedPendingFees = position.pendingFees.mul(_positionUnitsAmount).div(position.positionUnitsAmount);\\r\\n\\r\\n        if (positionBalance <= fundingFees.add(realizedPendingFees)) {\\r\\n            checkAndLiquidatePosition(msg.sender); // Will always liquidate\\r\\n            return 0;\\r\\n        } else {\\r\\n            positionBalance = positionBalance.sub(fundingFees.add(realizedPendingFees));\\r\\n        }\\r\\n\\r\\n        uint256 closePositionFee = positionBalance\\r\\n            .mul(uint256(feesCalculator.calculateClosePositionFeePercent(position.creationTimestamp)))\\r\\n            .div(MAX_FEE_PERCENTAGE);\\r\\n\\r\\n        position.positionUnitsAmount = position.positionUnitsAmount.sub(_positionUnitsAmount);\\r\\n        totalPositionUnitsAmount = totalPositionUnitsAmount.sub(_positionUnitsAmount);\\r\\n\\r\\n        if (position.positionUnitsAmount > 0) {\\r\\n            position.pendingFees = position.pendingFees.sub(realizedPendingFees);\\r\\n        } else {\\r\\n            removePosition(msg.sender);\\r\\n        }\\r\\n\\r\\n        tokenAmount = positionBalance.sub(closePositionFee);\\r\\n\\r\\n        emit ClosePosition(msg.sender, tokenAmountBeforeFees, closePositionFee.add(realizedPendingFees).add(fundingFees), positions[msg.sender].positionUnitsAmount, cviValue);\\r\\n\\r\\n        collectProfit(closePositionFee);\\r\\n        \\r\\n        if (_transferTokens) {\\r\\n            token.safeTransfer(msg.sender, tokenAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _liquidatePositions(address[] calldata _positionOwners) internal returns (uint256 finderFeeAmount) {\\r\\n        updateSnapshots();\\r\\n        bool liquidationOccured = false;\\r\\n        for ( uint256 i = 0; i < _positionOwners.length; i++) {\\r\\n            uint256 positionUnitsAmount = positions[_positionOwners[i]].positionUnitsAmount;\\r\\n            (bool wasLiquidated, uint256 liquidatedAmount, bool isPositive) = checkAndLiquidatePosition(_positionOwners[i]);\\r\\n\\r\\n            if (wasLiquidated) {\\r\\n                liquidationOccured = true;\\r\\n                finderFeeAmount = finderFeeAmount.add(liquidation.getLiquidationReward(liquidatedAmount, isPositive, positionUnitsAmount));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(liquidationOccured, \\\"No reported position was found to be liquidatable\\\");\\r\\n        token.safeTransfer(msg.sender, finderFeeAmount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256) internal override {\\r\\n        if (lastDepositTimestamp[from].add(lpsLockupPeriod) > block.timestamp && \\r\\n            lastDepositTimestamp[from] > lastDepositTimestamp[to]) {\\r\\n                require(!revertLockedTransfered[to], \\\"Recipient refuses locked tokens\\\");\\r\\n                lastDepositTimestamp[to] = lastDepositTimestamp[from];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateSnapshots() private {\\r\\n        uint256 singleUnitFundingFee = feesModel.updateSnapshots();\\r\\n        totalFundingFeesAmount = totalFundingFeesAmount.add(singleUnitFundingFee.mul(totalPositionUnitsAmount).div(PRECISION_DECIMALS));\\r\\n    }\\r\\n\\r\\n    function collectProfit(uint256 amount) private {\\r\\n        if (address(feesCollector) != address(0)) {\\r\\n            feesCollector.sendProfit(amount, token);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkAndLiquidatePosition(address _positionAddress) private returns (bool wasLiquidated, uint256 liquidatedAmount, bool isPositive) {\\r\\n        (uint256 currentPositionBalance, bool isBalancePositive) = _calculatePositionBalance(_positionAddress);\\r\\n        isPositive = isBalancePositive;\\r\\n        liquidatedAmount = currentPositionBalance;\\r\\n\\r\\n        if (liquidation.isLiquidationCandidate(currentPositionBalance, isBalancePositive, positions[_positionAddress].positionUnitsAmount)) {\\r\\n            liquidatePosition(_positionAddress, currentPositionBalance, isBalancePositive);\\r\\n            wasLiquidated = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function liquidatePosition(address _positionAddress, uint256 liquidatedAmount, bool isPositive) private {\\r\\n        Position memory position = positions[_positionAddress];\\r\\n        totalPositionUnitsAmount = totalPositionUnitsAmount.sub(position.positionUnitsAmount);\\r\\n        totalFundingFeesAmount = totalFundingFeesAmount.sub(position.pendingFees);\\r\\n        removePosition(_positionAddress);\\r\\n        emit LiquidatePosition(_positionAddress, liquidatedAmount, isPositive, position.positionUnitsAmount);\\r\\n    }\\r\\n\\r\\n    function removePosition(address _positionAddress) private {\\r\\n        uint256 positionIndex = positions[_positionAddress].positionAddressesIndex;\\r\\n        if (holdersAddresses.length > 1) {\\r\\n            holdersAddresses[positionIndex] = holdersAddresses[holdersAddresses.length.sub(1)];\\r\\n            positions[holdersAddresses[positionIndex]].positionAddressesIndex = positionIndex;\\r\\n        }\\r\\n        holdersAddresses.pop();\\r\\n        delete positions[_positionAddress];\\r\\n    }\\r\\n\\r\\n    function _calculatePositionBalance(address _positionAddress) private view returns (uint256 currentPositionBalance, bool isPositive) {\\r\\n        Position memory position = positions[_positionAddress];\\r\\n\\r\\n        (uint16 cviValue,) = cviOracle.getCVILatestRoundData();\\r\\n\\r\\n        uint256 pendingFeesAmount = position.pendingFees.add(feesModel.calculateFundingFees(position.creationTimestamp, position.positionUnitsAmount))\\r\\n        .add(feesModel.calculateFundingFeesAddendum(position.positionUnitsAmount));\\r\\n        \\r\\n        uint256 positionBalanceWithoutFees = position.positionUnitsAmount.mul(cviValue).div(MAX_CVI_VALUE);\\r\\n\\r\\n        if (positionBalanceWithoutFees >= pendingFeesAmount) {\\r\\n            currentPositionBalance = positionBalanceWithoutFees.sub(pendingFeesAmount);\\r\\n            isPositive = true;\\r\\n        } else {\\r\\n            currentPositionBalance = pendingFeesAmount.sub(positionBalanceWithoutFees);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/ICVIOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ICVIOracle {\\r\\n    function getCVIRoundData(uint80 roundId) external view returns (uint16 cviValue, uint256 cviTimestamp);\\r\\n    function getCVILatestRoundData() external view returns (uint16 cviValue, uint80 cviRoundId);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/IFeesCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IFeesCalculator {\\r\\n\\r\\n    struct CVIValue {\\r\\n        uint256 period;\\r\\n        uint16 cviValue;\\r\\n    }\\r\\n\\r\\n    function updateTurbulenceIndicatorPercent(uint256[] calldata periods) external returns (uint16);\\r\\n\\r\\n    function setTurbulenceUpdator(address newUpdator) external;\\r\\n\\r\\n    function setDepositFee(uint16 newDepositFeePercentage) external;\\r\\n    function setWithdrawFee(uint16 newWithdrawFeePercentage) external;\\r\\n    function setOpenPositionFee(uint16 newOpenPositionFeePercentage) external;\\r\\n    function setClosePositionFee(uint16 newClosePositionFeePercentage) external;\\r\\n    function setClosePositionMaxFee(uint16 newClosePositionMaxFeePercentage) external;\\r\\n    function setClosePositionFeeDecay(uint256 newClosePositionFeeDecayPeriod) external;\\r\\n    \\r\\n    function setOracleHeartbeatPeriod(uint256 newOracleHeartbeatPeriod) external;\\r\\n    function setBuyingPremiumFeeMax(uint16 newBuyingPremiumFeeMaxPercentage) external;\\r\\n    function setBuyingPremiumThreshold(uint16 newBuyingPremiumThreshold) external;\\r\\n    function setTurbulenceStep(uint16 newTurbulenceStepPercentage) external;\\r\\n    function setTurbulenceFeeMinPercentThreshold(uint16 _newTurbulenceFeeMinPercentThreshold) external;\\r\\n\\r\\n    function calculateBuyingPremiumFee(uint256 tokenAmount, uint256 collateralRatio) external view returns (uint256 buyingPremiumFee);\\r\\n    function calculateSingleUnitFundingFee(CVIValue[] calldata cviValues) external pure returns (uint256 fundingFee);\\r\\n    function calculateClosePositionFeePercent(uint256 creationTimestamp) external view returns (uint16);\\r\\n    function calculateWithdrawFeePercent(uint256 lastDepositTimestamp) external view returns (uint16);\\r\\n\\r\\n    function depositFeePercent() external returns (uint16);\\r\\n    function withdrawFeePercent() external returns (uint16);\\r\\n    function openPositionFeePercent() external returns (uint16);\\r\\n    function closePositionFeePercent() external returns (uint16);\\r\\n    function buyingPremiumFeeMaxPercent() external returns (uint16);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/IFeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IFeesCollector {\\r\\n    function sendProfit(uint256 amount, IERC20 token) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/IFeesModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICVIOracle.sol\\\";\\r\\nimport \\\"./IFeesCalculator.sol\\\";\\r\\n\\r\\ninterface IFeesModel {\\r\\n    function updateSnapshots() external returns (uint256);\\r\\n\\r\\n    function setCVIOracle(ICVIOracle newOracle) external;\\r\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\r\\n    function setLatestOracleRoundId(uint80 newOracleRoundId) external;\\r\\n    function setMaxOracleValuesUsed(uint80 newMaxOracleValuesUsed) external;\\r\\n\\r\\n    function calculateFundingFees(uint256 startTime, uint256 positionUnitsAmount) external view returns (uint256);\\r\\n    function calculateFundingFees(uint256 startTime, uint256 endTime, uint256 positionUnitsAmount) external view returns (uint256);\\r\\n    function calculateFundingFeesAddendum(uint256 positionUnitsAmount) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/ILiquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface ILiquidation {\\t\\r\\n\\tfunction setMinLiquidationThreshold(uint16 newMinThreshold) external;\\r\\n    function setMinLiquidationReward(uint16 newMaxRewardAmount) external;\\r\\n    function setMaxLiquidationReward(uint16 newMaxRewardAmount) external;\\r\\n\\r\\n\\tfunction isLiquidationCandidate(uint256 positionBalance, bool isPositive, uint256 positionUnitsAmount) external view returns (bool);\\r\\n\\r\\n\\tfunction getLiquidationReward(uint256 positionBalance, bool isPositive, uint256 positionUnitsAmount) external view returns (uint256 finderFeeAmount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/IPlatform.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IRewards.sol\\\";\\r\\nimport \\\"./ICVIOracle.sol\\\";\\r\\nimport \\\"./IFeesModel.sol\\\";\\r\\nimport \\\"./IFeesCollector.sol\\\";\\r\\nimport \\\"./IFeesCalculator.sol\\\";\\r\\nimport \\\"./ILiquidation.sol\\\";\\r\\n\\r\\ninterface IPlatform {\\r\\n\\r\\n    event Deposit(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\r\\n    event Withdraw(address indexed account, uint256 tokenAmount, uint256 lpTokensAmount, uint256 feeAmount);\\r\\n    event OpenPosition(address indexed account, uint256 tokenAmount, uint256 feeAmount, uint256 positionUnitsAmount, uint256 cviValue);\\r\\n    event ClosePosition(address indexed account, uint256 tokenAmount, uint256 feeAmount, uint256 positionUnitsAmount, uint256 cviValue);\\r\\n    event LiquidatePosition(address indexed positionAddress, uint256 currentPositionBalance, bool isBalancePositive, uint256 positionUnitsAmount);\\r\\n\\r\\n    function deposit(uint256 tokenAmount, uint256 minLPTokenAmount) external returns (uint256 lpTokenAmount);\\r\\n    function withdraw(uint256 tokenAmount, uint256 maxLPTokenBurnAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\r\\n    function withdrawLPTokens(uint256 lpTokenAmount) external returns (uint256 burntAmount, uint256 withdrawnAmount);\\r\\n\\r\\n    function openPosition(uint256 tokenAmount, uint16 maxCVI) external returns (uint256 positionUnitsAmount);\\r\\n    function closePosition(uint256 positionUnitsAmount, uint16 minCVI) external returns (uint256 tokenAmount);\\r\\n\\r\\n    function liquidatePositions(address[] calldata positionOwners) external returns (uint256 finderFeeAmount);\\r\\n\\r\\n    function setRevertLockedTransfers(bool revertLockedTransfers) external;\\r\\n\\r\\n    function setFeesCollector(IFeesCollector newCollector) external;\\r\\n    function setFeesCalculator(IFeesCalculator newCalculator) external;\\r\\n    function setFeesModel(IFeesModel newModel) external;\\r\\n    function setCVIOracle(ICVIOracle newOracle) external;\\r\\n    function setRewards(IRewards newRewards) external;\\r\\n    function setLiquidation(ILiquidation newLiquidation) external;\\r\\n\\r\\n    function setLPLockupPeriod(uint256 newLPLockupPeriod) external;\\r\\n    function setBuyersLockupPeriod(uint256 newBuyersLockupPeriod) external;\\r\\n\\r\\n    function setEmergencyWithdrawAllowed(bool newEmergencyWithdrawAllowed) external;\\r\\n\\r\\n    function getToken() external view returns (IERC20);\\r\\n\\r\\n    function calculatePositionBalance(address positionAddress) external view returns (uint256 currentPositionBalance, bool isPositive, uint256 positionUnitsAmount);\\r\\n    function calculatePositionPendingFees(address _positionAddress) external view returns (uint256 pendingFees);\\r\\n\\r\\n    function totalBalance() external view returns (uint256 balance);\\r\\n    function totalBalanceWithAddendum() external view returns (uint256 balance);\\r\\n\\r\\n    function getLiquidableAddresses() external view returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.2;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IRewards {\\r\\n\\tfunction reward(address account, uint256 positionUnits) external;\\r\\n\\tfunction claimReward(uint256[] memory openPositionDays) external;\\r\\n\\r\\n\\tfunction setRewarder(address newRewarder) external;\\r\\n\\tfunction setDailyReward(uint256 newDailyReward) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/dev/repos/coti-cvix-contracts/contracts/utils/SafeMath16.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath16 {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        uint16 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint16 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint16 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint16 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint16 a, uint16 b) internal pure returns (uint16) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lpTokenSymbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialTokenToLPTokenRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IFeesModel\",\"name\":\"_feesModel\",\"type\":\"address\"},{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_feesCalculator\",\"type\":\"address\"},{\"internalType\":\"contract ICVIOracle\",\"name\":\"_cviOracle\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidation\",\"name\":\"_liquidation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cviValue\",\"type\":\"uint256\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"positionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPositionBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBalancePositive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cviValue\",\"type\":\"uint256\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CVI_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyersLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"}],\"name\":\"calculatePositionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPositionBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPositive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddress\",\"type\":\"address\"}],\"name\":\"calculatePositionPendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_positionUnitsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_minCVI\",\"type\":\"uint16\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLPTokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidableAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTokenToLPTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDepositTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_positionOwners\",\"type\":\"address[]\"}],\"name\":\"liquidatePositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"finderFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpsLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_maxCVI\",\"type\":\"uint16\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionUnitsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAddressesIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revertLockedTransfered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyersLockupPeriod\",\"type\":\"uint256\"}],\"name\":\"setBuyersLockupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICVIOracle\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setCVIOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newEmergencyWithdrawAllowed\",\"type\":\"bool\"}],\"name\":\"setEmergencyWithdrawAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesCalculator\",\"name\":\"_newCalculator\",\"type\":\"address\"}],\"name\":\"setFeesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesCollector\",\"name\":\"_newCollector\",\"type\":\"address\"}],\"name\":\"setFeesCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFeesModel\",\"name\":\"_newModel\",\"type\":\"address\"}],\"name\":\"setFeesModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLPLockupPeriod\",\"type\":\"uint256\"}],\"name\":\"setLPLockupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidation\",\"name\":\"_newLiquidation\",\"type\":\"address\"}],\"name\":\"setLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_revertLockedTransfers\",\"type\":\"bool\"}],\"name\":\"setRevertLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewards\",\"name\":\"_newRewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalanceWithAddendum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundingFeesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositionUnitsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLPTokenBurnAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokensAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Platform", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000e8d4a51000000000000000000000000000f5ebf50661ee5b128dad3d71050520ccccc1060100000000000000000000000000000000000000000000000000000000000000000000000000000000000000004fde21b467f6cccfdea1b2b51886d9d0fd05491f000000000000000000000000bb2a8986f1feb41c374658bcd4a5e0b6b536ba1a0000000000000000000000000000000000000000000000000000000000000007555344542d4c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007555344542d4c5000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}