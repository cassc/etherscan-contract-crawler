{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UniversalVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {ERC1271} from \\\"./Access/ERC1271.sol\\\";\\nimport {EIP712} from \\\"./Access/EIP712.sol\\\";\\nimport {OwnableERC721} from \\\"./Access/OwnableERC721.sol\\\";\\nimport {IRageQuit} from \\\"./Geyser.sol\\\";\\n\\ninterface IUniversalVault {\\n    /* user events */\\n\\n    event Locked(address delegate, address token, uint256 amount);\\n    event Unlocked(address delegate, address token, uint256 amount);\\n    event RageQuit(address delegate, address token, bool notified, string reason);\\n\\n    /* data types */\\n\\n    struct LockData {\\n        address delegate;\\n        address token;\\n        uint256 balance;\\n    }\\n\\n    /* initialize function */\\n\\n    function initialize() external;\\n\\n    /* user functions */\\n\\n    function lock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    function unlock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    function rageQuit(address delegate, address token) external returns (bool notified, string memory error);\\n\\n    function transferERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function transferETH(address to, uint256 amount) external payable;\\n\\n    /* pure functions */\\n\\n    function calculateLockID(address delegate, address token) external pure returns (bytes32 lockID);\\n\\n    /* getter functions */\\n\\n    function getPermissionHash(\\n        bytes32 eip712TypeHash,\\n        address delegate,\\n        address token,\\n        uint256 amount,\\n        uint256 nonce\\n    ) external view returns (bytes32 permissionHash);\\n\\n    function getNonce() external view returns (uint256 nonce);\\n\\n    function owner() external view returns (address ownerAddress);\\n\\n    function getLockSetCount() external view returns (uint256 count);\\n\\n    function getLockAt(uint256 index) external view returns (LockData memory lockData);\\n\\n    function getBalanceDelegated(address token, address delegate) external view returns (uint256 balance);\\n\\n    function getBalanceLocked(address token) external view returns (uint256 balance);\\n\\n    function checkBalances() external view returns (bool validity);\\n}\\n\\n/// @title UniversalVault\\n/// @notice Vault for isolated storage of staking tokens\\n/// @dev Warning: not compatible with rebasing tokens\\n/// @dev Security contact: dev-support@ampleforth.org\\ncontract UniversalVault is IUniversalVault, EIP712(\\\"UniversalVault\\\", \\\"1.0.0\\\"), ERC1271, OwnableERC721, Initializable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using Address for address payable;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /* constant */\\n\\n    // Hardcoding a gas limit for rageQuit() is required to prevent gas DOS attacks\\n    // the gas requirement cannot be determined at runtime by querying the delegate\\n    // as it could potentially be manipulated by a malicious delegate who could force\\n    // the calls to revert.\\n    // The gas limit could alternatively be set upon vault initialization or creation\\n    // of a lock, but the gas consumption trade-offs are not favorable.\\n    // Ultimately, to avoid a need for fixed gas limits, the EVM would need to provide\\n    // an error code that allows for reliably catching out-of-gas errors on remote calls.\\n    uint256 public constant RAGEQUIT_GAS = 500000;\\n    bytes32 public constant LOCK_TYPEHASH =\\n        keccak256(\\\"Lock(address delegate,address token,uint256 amount,uint256 nonce)\\\");\\n    bytes32 public constant UNLOCK_TYPEHASH =\\n        keccak256(\\\"Unlock(address delegate,address token,uint256 amount,uint256 nonce)\\\");\\n\\n    /* storage */\\n\\n    uint256 private _nonce;\\n    mapping(bytes32 => LockData) private _locks;\\n    EnumerableSet.Bytes32Set private _lockSet;\\n\\n    /* initialization function */\\n\\n    function initializeLock() external initializer {}\\n\\n    function initialize() external override initializer {\\n        OwnableERC721._setNFT(msg.sender);\\n    }\\n\\n    /* ether receive */\\n\\n    receive() external payable {}\\n\\n    /* internal overrides */\\n\\n    function _getOwner() internal view override(ERC1271) returns (address ownerAddress) {\\n        return OwnableERC721.owner();\\n    }\\n\\n    /* pure functions */\\n\\n    function calculateLockID(address delegate, address token) public pure override returns (bytes32 lockID) {\\n        return keccak256(abi.encodePacked(delegate, token));\\n    }\\n\\n    /* getter functions */\\n\\n    function getPermissionHash(\\n        bytes32 eip712TypeHash,\\n        address delegate,\\n        address token,\\n        uint256 amount,\\n        uint256 nonce\\n    ) public view override returns (bytes32 permissionHash) {\\n        return EIP712._hashTypedDataV4(keccak256(abi.encode(eip712TypeHash, delegate, token, amount, nonce)));\\n    }\\n\\n    function getNonce() external view override returns (uint256 nonce) {\\n        return _nonce;\\n    }\\n\\n    function owner() public view override(IUniversalVault, OwnableERC721) returns (address ownerAddress) {\\n        return OwnableERC721.owner();\\n    }\\n\\n    function getLockSetCount() external view override returns (uint256 count) {\\n        return _lockSet.length();\\n    }\\n\\n    function getLockAt(uint256 index) external view override returns (LockData memory lockData) {\\n        return _locks[_lockSet.at(index)];\\n    }\\n\\n    function getBalanceDelegated(address token, address delegate) external view override returns (uint256 balance) {\\n        return _locks[calculateLockID(delegate, token)].balance;\\n    }\\n\\n    function getBalanceLocked(address token) public view override returns (uint256 balance) {\\n        uint256 count = _lockSet.length();\\n        for (uint256 index; index < count; index++) {\\n            LockData storage _lockData = _locks[_lockSet.at(index)];\\n            if (_lockData.token == token && _lockData.balance > balance) balance = _lockData.balance;\\n        }\\n        return balance;\\n    }\\n\\n    function checkBalances() external view override returns (bool validity) {\\n        // iterate over all token locks and validate sufficient balance\\n        uint256 count = _lockSet.length();\\n        for (uint256 index; index < count; index++) {\\n            // fetch storage lock reference\\n            LockData storage _lockData = _locks[_lockSet.at(index)];\\n            // if insufficient balance and no\u220ft shutdown, return false\\n            if (IERC20(_lockData.token).balanceOf(address(this)) < _lockData.balance) return false;\\n        }\\n        // if sufficient balance or shutdown, return true\\n        return true;\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Lock ERC20 tokens in the vault\\n    /// access control: called by delegate with signed permission from owner\\n    /// state machine: anytime\\n    /// state scope:\\n    /// - insert or update _locks\\n    /// - increase _nonce\\n    /// token transfer: none\\n    /// @param token Address of token being locked\\n    /// @param amount Amount of tokens being locked\\n    /// @param permission Permission signature payload\\n    function lock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    )\\n        external\\n        override\\n        onlyValidSignature(getPermissionHash(LOCK_TYPEHASH, msg.sender, token, amount, _nonce), permission)\\n    {\\n        // get lock id\\n        bytes32 lockID = calculateLockID(msg.sender, token);\\n\\n        // add lock to storage\\n        if (_lockSet.contains(lockID)) {\\n            // if lock already exists, increase amount\\n            _locks[lockID].balance = _locks[lockID].balance.add(amount);\\n        } else {\\n            // if does not exist, create new lock\\n            // add lock to set\\n            assert(_lockSet.add(lockID));\\n            // add lock data to storage\\n            _locks[lockID] = LockData(msg.sender, token, amount);\\n        }\\n\\n        // validate sufficient balance\\n        require(\\n            IERC20(token).balanceOf(address(this)) >= _locks[lockID].balance,\\n            \\\"UniversalVault: insufficient balance\\\"\\n        );\\n\\n        // increase nonce\\n        _nonce += 1;\\n\\n        // emit event\\n        emit Locked(msg.sender, token, amount);\\n    }\\n\\n    /// @notice Unlock ERC20 tokens in the vault\\n    /// access control: called by delegate with signed permission from owner\\n    /// state machine: after valid lock from delegate\\n    /// state scope:\\n    /// - remove or update _locks\\n    /// - increase _nonce\\n    /// token transfer: none\\n    /// @param token Address of token being unlocked\\n    /// @param amount Amount of tokens being unlocked\\n    /// @param permission Permission signature payload\\n    function unlock(\\n        address token,\\n        uint256 amount,\\n        bytes calldata permission\\n    )\\n        external\\n        override\\n        onlyValidSignature(getPermissionHash(UNLOCK_TYPEHASH, msg.sender, token, amount, _nonce), permission)\\n    {\\n        // get lock id\\n        bytes32 lockID = calculateLockID(msg.sender, token);\\n\\n        // validate existing lock\\n        require(_lockSet.contains(lockID), \\\"UniversalVault: missing lock\\\");\\n\\n        // update lock data\\n        if (_locks[lockID].balance > amount) {\\n            // substract amount from lock balance\\n            _locks[lockID].balance = _locks[lockID].balance.sub(amount);\\n        } else {\\n            // delete lock data\\n            delete _locks[lockID];\\n            assert(_lockSet.remove(lockID));\\n        }\\n\\n        // increase nonce\\n        _nonce += 1;\\n\\n        // emit event\\n        emit Unlocked(msg.sender, token, amount);\\n    }\\n\\n    /// @notice Forcibly cancel delegate lock\\n    /// @dev This function will attempt to notify the delegate of the rage quit using\\n    ///      a fixed amount of gas.\\n    /// access control: only owner\\n    /// state machine: after valid lock from delegate\\n    /// state scope:\\n    /// - remove item from _locks\\n    /// token transfer: none\\n    /// @param delegate Address of delegate\\n    /// @param token Address of token being unlocked\\n    function rageQuit(address delegate, address token)\\n        external\\n        override\\n        onlyOwner\\n        returns (bool notified, string memory error)\\n    {\\n        // get lock id\\n        bytes32 lockID = calculateLockID(delegate, token);\\n\\n        // validate existing lock\\n        require(_lockSet.contains(lockID), \\\"UniversalVault: missing lock\\\");\\n\\n        // attempt to notify delegate\\n        if (delegate.isContract()) {\\n            // check for sufficient gas\\n            require(gasleft() >= RAGEQUIT_GAS, \\\"UniversalVault: insufficient gas\\\");\\n\\n            // attempt rageQuit notification\\n            try IRageQuit(delegate).rageQuit{gas: RAGEQUIT_GAS}() {\\n                notified = true;\\n            } catch Error(string memory res) {\\n                notified = false;\\n                error = res;\\n            } catch (bytes memory) {\\n                notified = false;\\n            }\\n        }\\n\\n        // update lock storage\\n        assert(_lockSet.remove(lockID));\\n        delete _locks[lockID];\\n\\n        // emit event\\n        emit RageQuit(delegate, token, notified, error);\\n    }\\n\\n    /// @notice Transfer ERC20 tokens out of vault\\n    /// access control: only owner\\n    /// state machine: when balance >= max(lock) + amount\\n    /// state scope: none\\n    /// token transfer: transfer any token\\n    /// @param token Address of token being transferred\\n    /// @param to Address of the recipient\\n    /// @param amount Amount of tokens to transfer\\n    function transferERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyOwner {\\n        // check for sufficient balance\\n        require(\\n            IERC20(token).balanceOf(address(this)) >= getBalanceLocked(token).add(amount),\\n            \\\"UniversalVault: insufficient balance\\\"\\n        );\\n        // perform transfer\\n        TransferHelper.safeTransfer(token, to, amount);\\n    }\\n\\n    /// @notice Transfer ERC20 tokens out of vault\\n    /// access control: only owner\\n    /// state machine: when balance >= amount\\n    /// state scope: none\\n    /// token transfer: transfer any token\\n    /// @param to Address of the recipient\\n    /// @param amount Amount of ETH to transfer\\n    function transferETH(address to, uint256 amount) external payable override onlyOwner {\\n        // perform transfer\\n        TransferHelper.safeTransferETH(to, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Access/ERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface IERC1271 {\\n    function isValidSignature(bytes32 _messageHash, bytes memory _signature) external view returns (bytes4 magicValue);\\n}\\n\\nlibrary SignatureChecker {\\n    function isValidSignature(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        if (Address.isContract(signer)) {\\n            bytes4 selector = IERC1271.isValidSignature.selector;\\n            (bool success, bytes memory returndata) =\\n                signer.staticcall(abi.encodeWithSelector(selector, hash, signature));\\n            return success && abi.decode(returndata, (bytes4)) == selector;\\n        } else {\\n            return ECDSA.recover(hash, signature) == signer;\\n        }\\n    }\\n}\\n\\n/// @title ERC1271\\n/// @notice Module for ERC1271 compatibility\\n/// @dev Security contact: dev-support@ampleforth.org\\nabstract contract ERC1271 is IERC1271 {\\n    // Valid magic value bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant VALID_SIG = IERC1271.isValidSignature.selector;\\n    // Invalid magic value\\n    bytes4 internal constant INVALID_SIG = bytes4(0);\\n\\n    modifier onlyValidSignature(bytes32 permissionHash, bytes memory signature) {\\n        require(isValidSignature(permissionHash, signature) == VALID_SIG, \\\"ERC1271: Invalid signature\\\");\\n        _;\\n    }\\n\\n    function _getOwner() internal view virtual returns (address owner);\\n\\n    function isValidSignature(bytes32 permissionHash, bytes memory signature) public view override returns (bytes4) {\\n        return SignatureChecker.isValidSignature(_getOwner(), permissionHash, signature) ? VALID_SIG : INVALID_SIG;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Access/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/* solhint-disable max-line-length */\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n\\n    constructor(string memory name, string memory version) {\\n        _HASHED_NAME = keccak256(bytes(name));\\n        _HASHED_VERSION = keccak256(bytes(version));\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 name,\\n        bytes32 version\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, name, version, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal view virtual returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal view virtual returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Access/OwnableERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title OwnableERC721\\n/// @notice Use ERC721 ownership for access control\\n/// @dev Security contact: dev-support@ampleforth.org\\ncontract OwnableERC721 {\\n    address private _nftAddress;\\n\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"OwnableERC721: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function _setNFT(address nftAddress) internal {\\n        _nftAddress = nftAddress;\\n    }\\n\\n    function nft() public view virtual returns (address nftAddress) {\\n        return _nftAddress;\\n    }\\n\\n    function owner() public view virtual returns (address ownerAddress) {\\n        return IERC721(_nftAddress).ownerOf(uint256(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Geyser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {IUniversalVault} from \\\"./UniversalVault.sol\\\";\\nimport {IRewardPool} from \\\"./RewardPool.sol\\\";\\nimport {IFactory} from \\\"./Factory/IFactory.sol\\\";\\nimport {IInstanceRegistry} from \\\"./Factory/InstanceRegistry.sol\\\";\\nimport {Powered} from \\\"./PowerSwitch/Powered.sol\\\";\\n\\ninterface IRageQuit {\\n    function rageQuit() external;\\n}\\n\\ninterface IGeyser is IRageQuit {\\n    /* admin events */\\n\\n    event GeyserCreated(address rewardPool, address powerSwitch);\\n    event GeyserFunded(uint256 amount, uint256 duration);\\n    event BonusTokenRegistered(address token);\\n    event VaultFactoryRegistered(address factory);\\n    event VaultFactoryRemoved(address factory);\\n\\n    /* user events */\\n\\n    event Staked(address vault, uint256 amount);\\n    event Unstaked(address vault, uint256 amount);\\n    event RewardClaimed(address vault, address token, uint256 amount);\\n\\n    /* data types */\\n\\n    struct GeyserData {\\n        address stakingToken;\\n        address rewardToken;\\n        address rewardPool;\\n        RewardScaling rewardScaling;\\n        uint256 rewardSharesOutstanding;\\n        uint256 totalStake;\\n        uint256 totalStakeUnits;\\n        uint256 lastUpdate;\\n        RewardSchedule[] rewardSchedules;\\n    }\\n\\n    struct RewardSchedule {\\n        uint256 duration;\\n        uint256 start;\\n        uint256 shares;\\n    }\\n\\n    struct VaultData {\\n        uint256 totalStake;\\n        StakeData[] stakes;\\n    }\\n\\n    struct StakeData {\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n\\n    struct RewardScaling {\\n        uint256 floor;\\n        uint256 ceiling;\\n        uint256 time;\\n    }\\n\\n    struct RewardOutput {\\n        uint256 lastStakeAmount;\\n        uint256 newStakesCount;\\n        uint256 reward;\\n        uint256 newTotalStakeUnits;\\n    }\\n\\n    /* user functions */\\n\\n    function stake(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    function unstakeAndClaim(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external;\\n\\n    /* getter functions */\\n\\n    function getGeyserData() external view returns (GeyserData memory geyser);\\n\\n    function getBonusTokenSetLength() external view returns (uint256 length);\\n\\n    function getBonusTokenAtIndex(uint256 index) external view returns (address bonusToken);\\n\\n    function getVaultFactorySetLength() external view returns (uint256 length);\\n\\n    function getVaultFactoryAtIndex(uint256 index) external view returns (address factory);\\n\\n    function getVaultData(address vault) external view returns (VaultData memory vaultData);\\n\\n    function isValidAddress(address target) external view returns (bool validity);\\n\\n    function isValidVault(address target) external view returns (bool validity);\\n\\n    function getCurrentUnlockedRewards() external view returns (uint256 unlockedRewards);\\n\\n    function getFutureUnlockedRewards(uint256 timestamp) external view returns (uint256 unlockedRewards);\\n\\n    function getCurrentVaultReward(address vault) external view returns (uint256 reward);\\n\\n    function getCurrentStakeReward(address vault, uint256 stakeAmount) external view returns (uint256 reward);\\n\\n    function getFutureVaultReward(address vault, uint256 timestamp) external view returns (uint256 reward);\\n\\n    function getFutureStakeReward(\\n        address vault,\\n        uint256 stakeAmount,\\n        uint256 timestamp\\n    ) external view returns (uint256 reward);\\n\\n    function getCurrentVaultStakeUnits(address vault) external view returns (uint256 stakeUnits);\\n\\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp) external view returns (uint256 stakeUnits);\\n\\n    function getCurrentTotalStakeUnits() external view returns (uint256 totalStakeUnits);\\n\\n    function getFutureTotalStakeUnits(uint256 timestamp) external view returns (uint256 totalStakeUnits);\\n\\n    /* pure functions */\\n\\n    function calculateTotalStakeUnits(StakeData[] memory stakes, uint256 timestamp)\\n        external\\n        pure\\n        returns (uint256 totalStakeUnits);\\n\\n    function calculateStakeUnits(\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n    ) external pure returns (uint256 stakeUnits);\\n\\n    function calculateUnlockedRewards(\\n        RewardSchedule[] memory rewardSchedules,\\n        uint256 rewardBalance,\\n        uint256 sharesOutstanding,\\n        uint256 timestamp\\n    ) external pure returns (uint256 unlockedRewards);\\n\\n    function calculateRewardFromStakes(\\n        StakeData[] memory stakes,\\n        uint256 unstakeAmount,\\n        uint256 unlockedRewards,\\n        uint256 totalStakeUnits,\\n        uint256 timestamp,\\n        RewardScaling memory rewardScaling\\n    ) external pure returns (RewardOutput memory out);\\n\\n    function calculateReward(\\n        uint256 unlockedRewards,\\n        uint256 stakeAmount,\\n        uint256 stakeDuration,\\n        uint256 totalStakeUnits,\\n        RewardScaling memory rewardScaling\\n    ) external pure returns (uint256 reward);\\n}\\n\\n/// @title Geyser\\n/// @notice Reward distribution contract with time multiplier\\n/// @dev Security contact: dev-support@ampleforth.org\\n/// Access Control\\n/// - Power controller:\\n///     Can power off / shutdown the geyser\\n///     Can withdraw rewards from reward pool once shutdown\\n/// - Proxy owner:\\n///     Can change arbitrary logic / state by upgrading the geyser\\n///     Is unable to operate on user funds due to UniversalVault\\n///     Is unable to operate on reward pool funds when reward pool is offline / shutdown\\n/// - Geyser admin:\\n///     Can add funds to the geyser, register bonus tokens, and whitelist new vault factories\\n///     Is a subset of proxy owner permissions\\n/// - User:\\n///     Can deposit / withdraw / ragequit\\n/// Geyser State Machine\\n/// - Online:\\n///     Geyser is operating normally, all functions are enabled\\n/// - Offline:\\n///     Geyser is temporarely disabled for maintenance\\n///     User deposits and withdrawls are disabled, ragequit remains enabled\\n///     Users can withdraw their stake through rageQuit() but forego their pending reward\\n///     Should only be used when downtime required for an upgrade\\n/// - Shutdown:\\n///     Geyser is permanently disabled\\n///     All functions are disabled with the exception of ragequit\\n///     Users can withdraw their stake through rageQuit()\\n///     Power controller can withdraw from the reward pool\\n///     Should only be used if Proxy Owner role is compromized\\ncontract Geyser is IGeyser, Powered, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* constants */\\n\\n    // An upper bound on the number of active stakes per vault is required to prevent\\n    // calls to rageQuit() from reverting.\\n    // With 30 stakes in a vault, ragequit costs 432811 gas which is conservatively lower\\n    // than the hardcoded limit of 500k gas on the vault.\\n    // This limit is configurable and could be increased in a future deployment.\\n    // Ultimately, to avoid a need for fixed upper bounds, the EVM would need to provide\\n    // an error code that allows for reliably catching out-of-gas errors on remote calls.\\n    uint256 public constant MAX_STAKES_PER_VAULT = 30;\\n    uint256 public constant MAX_REWARD_TOKENS = 50;\\n    uint256 public constant BASE_SHARES_PER_WEI = 1000000;\\n\\n    /* storage */\\n\\n    GeyserData private _geyser;\\n    mapping(address => VaultData) private _vaults;\\n    EnumerableSet.AddressSet private _bonusTokenSet;\\n    EnumerableSet.AddressSet private _vaultFactorySet;\\n\\n    /* initializer */\\n\\n    function initializeLock() external initializer {}\\n\\n    /// @notice Initizalize geyser\\n    /// access control: only proxy constructor\\n    /// state machine: can only be called once\\n    /// state scope: set initialization variables\\n    /// token transfer: none\\n    /// @param ownerAddress address The admin address\\n    /// @param rewardPoolFactory address The factory to use for deploying the RewardPool\\n    /// @param powerSwitchFactory address The factory to use for deploying the PowerSwitch\\n    /// @param stakingToken address The address of the staking token for this geyser\\n    /// @param rewardToken address The address of the reward token for this geyser\\n    /// @param rewardScaling RewardScaling The config for reward scaling floor, ceiling, and time\\n    function initialize(\\n        address ownerAddress,\\n        address rewardPoolFactory,\\n        address powerSwitchFactory,\\n        address stakingToken,\\n        address rewardToken,\\n        RewardScaling calldata rewardScaling\\n    ) external initializer {\\n        // the scaling floor must be smaller than ceiling\\n        require(rewardScaling.floor <= rewardScaling.ceiling, \\\"Geyser: floor above ceiling\\\");\\n\\n        // setting rewardScalingTime to 0 would cause divide by zero error\\n        // to disable reward scaling, use rewardScalingFloor == rewardScalingCeiling\\n        require(rewardScaling.time != 0, \\\"Geyser: scaling time cannot be zero\\\");\\n\\n        // deploy power switch\\n        address powerSwitch = IFactory(powerSwitchFactory).create(abi.encode(ownerAddress));\\n\\n        // deploy reward pool\\n        address rewardPool = IFactory(rewardPoolFactory).create(abi.encode(powerSwitch));\\n\\n        // set internal configs\\n        OwnableUpgradeable.__Ownable_init();\\n        OwnableUpgradeable.transferOwnership(ownerAddress);\\n        Powered._setPowerSwitch(powerSwitch);\\n\\n        // commit to storage\\n        _geyser.stakingToken = stakingToken;\\n        _geyser.rewardToken = rewardToken;\\n        _geyser.rewardPool = rewardPool;\\n        _geyser.rewardScaling = rewardScaling;\\n\\n        // emit event\\n        emit GeyserCreated(rewardPool, powerSwitch);\\n    }\\n\\n    /* getter functions */\\n\\n    function getBonusTokenSetLength() external view override returns (uint256 length) {\\n        return _bonusTokenSet.length();\\n    }\\n\\n    function getBonusTokenAtIndex(uint256 index) external view override returns (address bonusToken) {\\n        return _bonusTokenSet.at(index);\\n    }\\n\\n    function getVaultFactorySetLength() external view override returns (uint256 length) {\\n        return _vaultFactorySet.length();\\n    }\\n\\n    function getVaultFactoryAtIndex(uint256 index) external view override returns (address factory) {\\n        return _vaultFactorySet.at(index);\\n    }\\n\\n    function isValidVault(address target) public view override returns (bool validity) {\\n        // validate target is created from whitelisted vault factory\\n        for (uint256 index = 0; index < _vaultFactorySet.length(); index++) {\\n            if (IInstanceRegistry(_vaultFactorySet.at(index)).isInstance(target)) {\\n                return true;\\n            }\\n        }\\n        // explicit return\\n        return false;\\n    }\\n\\n    function isValidAddress(address target) public view override returns (bool validity) {\\n        // sanity check target for potential input errors\\n        return\\n            target != address(this) &&\\n            target != address(0) &&\\n            target != _geyser.stakingToken &&\\n            target != _geyser.rewardToken &&\\n            target != _geyser.rewardPool &&\\n            !_bonusTokenSet.contains(target);\\n    }\\n\\n    /* geyser getters */\\n\\n    function getGeyserData() external view override returns (GeyserData memory geyser) {\\n        return _geyser;\\n    }\\n\\n    function getCurrentUnlockedRewards() public view override returns (uint256 unlockedRewards) {\\n        // calculate reward available based on state\\n        return getFutureUnlockedRewards(block.timestamp);\\n    }\\n\\n    function getFutureUnlockedRewards(uint256 timestamp) public view override returns (uint256 unlockedRewards) {\\n        // get reward amount remaining\\n        uint256 remainingRewards = IERC20(_geyser.rewardToken).balanceOf(_geyser.rewardPool);\\n        // calculate reward available based on state\\n        unlockedRewards = calculateUnlockedRewards(\\n            _geyser.rewardSchedules,\\n            remainingRewards,\\n            _geyser.rewardSharesOutstanding,\\n            timestamp\\n        );\\n        // explicit return\\n        return unlockedRewards;\\n    }\\n\\n    function getCurrentTotalStakeUnits() public view override returns (uint256 totalStakeUnits) {\\n        // calculate new stake units\\n        return getFutureTotalStakeUnits(block.timestamp);\\n    }\\n\\n    function getFutureTotalStakeUnits(uint256 timestamp) public view override returns (uint256 totalStakeUnits) {\\n        // return early if no change\\n        if (timestamp == _geyser.lastUpdate) return _geyser.totalStakeUnits;\\n        // calculate new stake units\\n        uint256 newStakeUnits = calculateStakeUnits(_geyser.totalStake, _geyser.lastUpdate, timestamp);\\n        // add to cached total\\n        totalStakeUnits = _geyser.totalStakeUnits.add(newStakeUnits);\\n        // explicit return\\n        return totalStakeUnits;\\n    }\\n\\n    /* vault getters */\\n\\n    function getVaultData(address vault) external view override returns (VaultData memory vaultData) {\\n        return _vaults[vault];\\n    }\\n\\n    function getCurrentVaultReward(address vault) external view override returns (uint256 reward) {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                _vaults[vault]\\n                    .totalStake,\\n                getCurrentUnlockedRewards(),\\n                getCurrentTotalStakeUnits(),\\n                block\\n                    .timestamp,\\n                _geyser\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getFutureVaultReward(address vault, uint256 timestamp) external view override returns (uint256 reward) {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                _vaults[vault]\\n                    .totalStake,\\n                getFutureUnlockedRewards(timestamp),\\n                getFutureTotalStakeUnits(timestamp),\\n                timestamp,\\n                _geyser\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getCurrentStakeReward(address vault, uint256 stakeAmount) external view override returns (uint256 reward) {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                stakeAmount,\\n                getCurrentUnlockedRewards(),\\n                getCurrentTotalStakeUnits(),\\n                block\\n                    .timestamp,\\n                _geyser\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getFutureStakeReward(\\n        address vault,\\n        uint256 stakeAmount,\\n        uint256 timestamp\\n    ) external view override returns (uint256 reward) {\\n        // calculate rewards\\n        return\\n            calculateRewardFromStakes(\\n                _vaults[vault]\\n                    .stakes,\\n                stakeAmount,\\n                getFutureUnlockedRewards(timestamp),\\n                getFutureTotalStakeUnits(timestamp),\\n                timestamp,\\n                _geyser\\n                    .rewardScaling\\n            )\\n                .reward;\\n    }\\n\\n    function getCurrentVaultStakeUnits(address vault) public view override returns (uint256 stakeUnits) {\\n        // calculate stake units\\n        return getFutureVaultStakeUnits(vault, block.timestamp);\\n    }\\n\\n    function getFutureVaultStakeUnits(address vault, uint256 timestamp)\\n        public\\n        view\\n        override\\n        returns (uint256 stakeUnits)\\n    {\\n        // calculate stake units\\n        return calculateTotalStakeUnits(_vaults[vault].stakes, timestamp);\\n    }\\n\\n    /* pure functions */\\n\\n    function calculateTotalStakeUnits(StakeData[] memory stakes, uint256 timestamp)\\n        public\\n        pure\\n        override\\n        returns (uint256 totalStakeUnits)\\n    {\\n        for (uint256 index; index < stakes.length; index++) {\\n            // reference stake\\n            StakeData memory stakeData = stakes[index];\\n            // calculate stake units\\n            uint256 stakeUnits = calculateStakeUnits(stakeData.amount, stakeData.timestamp, timestamp);\\n            // add to running total\\n            totalStakeUnits = totalStakeUnits.add(stakeUnits);\\n        }\\n    }\\n\\n    function calculateStakeUnits(\\n        uint256 amount,\\n        uint256 start,\\n        uint256 end\\n    ) public pure override returns (uint256 stakeUnits) {\\n        // calculate duration\\n        uint256 duration = end.sub(start);\\n        // calculate stake units\\n        stakeUnits = duration.mul(amount);\\n        // explicit return\\n        return stakeUnits;\\n    }\\n\\n    function calculateUnlockedRewards(\\n        RewardSchedule[] memory rewardSchedules,\\n        uint256 rewardBalance,\\n        uint256 sharesOutstanding,\\n        uint256 timestamp\\n    ) public pure override returns (uint256 unlockedRewards) {\\n        // return 0 if no registered schedules\\n        if (rewardSchedules.length == 0) {\\n            return 0;\\n        }\\n\\n        // calculate reward shares locked across all reward schedules\\n        uint256 sharesLocked;\\n        for (uint256 index = 0; index < rewardSchedules.length; index++) {\\n            // fetch reward schedule storage reference\\n            RewardSchedule memory schedule = rewardSchedules[index];\\n\\n            // caculate amount of shares available on this schedule\\n            // if (now - start) < duration\\n            //   sharesLocked = shares - (shares * (now - start) / duration)\\n            // else\\n            //   sharesLocked = 0\\n            uint256 currentSharesLocked = 0;\\n            if (timestamp.sub(schedule.start) < schedule.duration) {\\n                currentSharesLocked = schedule.shares.sub(\\n                    schedule.shares.mul(timestamp.sub(schedule.start)).div(schedule.duration)\\n                );\\n            }\\n\\n            // add to running total\\n            sharesLocked = sharesLocked.add(currentSharesLocked);\\n        }\\n\\n        // convert shares to reward\\n        // rewardLocked = sharesLocked * rewardBalance / sharesOutstanding\\n        uint256 rewardLocked = sharesLocked.mul(rewardBalance).div(sharesOutstanding);\\n\\n        // calculate amount available\\n        // unlockedRewards = rewardBalance - rewardLocked\\n        unlockedRewards = rewardBalance.sub(rewardLocked);\\n\\n        // explicit return\\n        return unlockedRewards;\\n    }\\n\\n    function calculateRewardFromStakes(\\n        StakeData[] memory stakes,\\n        uint256 unstakeAmount,\\n        uint256 unlockedRewards,\\n        uint256 totalStakeUnits,\\n        uint256 timestamp,\\n        RewardScaling memory rewardScaling\\n    ) public pure override returns (RewardOutput memory out) {\\n        uint256 stakesToDrop = 0;\\n        while (unstakeAmount > 0) {\\n            // fetch vault stake storage reference\\n            StakeData memory lastStake = stakes[stakes.length.sub(stakesToDrop).sub(1)];\\n\\n            // calculate stake duration\\n            uint256 stakeDuration = timestamp.sub(lastStake.timestamp);\\n\\n            uint256 currentAmount;\\n            if (lastStake.amount > unstakeAmount) {\\n                // set current amount to remaining unstake amount\\n                currentAmount = unstakeAmount;\\n                // amount of last stake is reduced\\n                out.lastStakeAmount = lastStake.amount.sub(unstakeAmount);\\n            } else {\\n                // set current amount to amount of last stake\\n                currentAmount = lastStake.amount;\\n                // add to stakes to drop\\n                stakesToDrop += 1;\\n            }\\n\\n            // update remaining unstakeAmount\\n            unstakeAmount = unstakeAmount.sub(currentAmount);\\n\\n            // calculate reward amount\\n            uint256 currentReward =\\n                calculateReward(unlockedRewards, currentAmount, stakeDuration, totalStakeUnits, rewardScaling);\\n\\n            // update cumulative reward\\n            out.reward = out.reward.add(currentReward);\\n\\n            // update cached unlockedRewards\\n            unlockedRewards = unlockedRewards.sub(currentReward);\\n\\n            // calculate time weighted stake\\n            uint256 stakeUnits = currentAmount.mul(stakeDuration);\\n\\n            // update cached totalStakeUnits\\n            totalStakeUnits = totalStakeUnits.sub(stakeUnits);\\n        }\\n\\n        // explicit return\\n        return RewardOutput(out.lastStakeAmount, stakes.length.sub(stakesToDrop), out.reward, totalStakeUnits);\\n    }\\n\\n    function calculateReward(\\n        uint256 unlockedRewards,\\n        uint256 stakeAmount,\\n        uint256 stakeDuration,\\n        uint256 totalStakeUnits,\\n        RewardScaling memory rewardScaling\\n    ) public pure override returns (uint256 reward) {\\n        // calculate time weighted stake\\n        uint256 stakeUnits = stakeAmount.mul(stakeDuration);\\n\\n        // calculate base reward\\n        // baseReward = unlockedRewards * stakeUnits / totalStakeUnits\\n        uint256 baseReward = 0;\\n        if (totalStakeUnits != 0) {\\n            // scale reward according to proportional weight\\n            baseReward = unlockedRewards.mul(stakeUnits).div(totalStakeUnits);\\n        }\\n\\n        // calculate scaled reward\\n        // if no scaling or scaling period completed\\n        //   reward = baseReward\\n        // else\\n        //   minReward = baseReward * scalingFloor / scalingCeiling\\n        //   bonusReward = baseReward\\n        //                 * (scalingCeiling - scalingFloor) / scalingCeiling\\n        //                 * duration / scalingTime\\n        //   reward = minReward + bonusReward\\n        if (stakeDuration >= rewardScaling.time || rewardScaling.floor == rewardScaling.ceiling) {\\n            // no reward scaling applied\\n            reward = baseReward;\\n        } else {\\n            // calculate minimum reward using scaling floor\\n            uint256 minReward = baseReward.mul(rewardScaling.floor).div(rewardScaling.ceiling);\\n\\n            // calculate bonus reward with vested portion of scaling factor\\n            uint256 bonusReward =\\n                baseReward\\n                    .mul(stakeDuration)\\n                    .mul(rewardScaling.ceiling.sub(rewardScaling.floor))\\n                    .div(rewardScaling.ceiling)\\n                    .div(rewardScaling.time);\\n\\n            // add minimum reward and bonus reward\\n            reward = minReward.add(bonusReward);\\n        }\\n\\n        // explicit return\\n        return reward;\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Add funds to the geyser\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope:\\n    ///   - increase _geyser.rewardSharesOutstanding\\n    ///   - append to _geyser.rewardSchedules\\n    /// token transfer: transfer staking tokens from msg.sender to reward pool\\n    /// @param amount uint256 Amount of reward tokens to deposit\\n    /// @param duration uint256 Duration over which to linearly unlock rewards\\n    function fundGeyser(uint256 amount, uint256 duration) external onlyOwner onlyOnline {\\n        // validate duration\\n        require(duration != 0, \\\"Geyser: invalid duration\\\");\\n\\n        // create new reward shares\\n        // if existing rewards on this geyser\\n        //   mint new shares proportional to % change in rewards remaining\\n        //   newShares = remainingShares * newReward / remainingRewards\\n        // else\\n        //   mint new shares with BASE_SHARES_PER_WEI initial conversion rate\\n        //   store as fixed point number with same  of decimals as reward token\\n        uint256 newRewardShares;\\n        if (_geyser.rewardSharesOutstanding > 0) {\\n            uint256 remainingRewards = IERC20(_geyser.rewardToken).balanceOf(_geyser.rewardPool);\\n            newRewardShares = _geyser.rewardSharesOutstanding.mul(amount).div(remainingRewards);\\n        } else {\\n            newRewardShares = amount.mul(BASE_SHARES_PER_WEI);\\n        }\\n\\n        // add reward shares to total\\n        _geyser.rewardSharesOutstanding = _geyser.rewardSharesOutstanding.add(newRewardShares);\\n\\n        // store new reward schedule\\n        _geyser.rewardSchedules.push(RewardSchedule(duration, block.timestamp, newRewardShares));\\n\\n        // transfer reward tokens to reward pool\\n        TransferHelper.safeTransferFrom(_geyser.rewardToken, msg.sender, _geyser.rewardPool, amount);\\n\\n        // emit event\\n        emit GeyserFunded(amount, duration);\\n    }\\n\\n    /// @notice Add vault factory to whitelist\\n    /// @dev use this function to enable stakes to vaults coming from the specified\\n    ///      factory contract\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - not shutdown\\n    /// state scope:\\n    ///   - append to _vaultFactorySet\\n    /// token transfer: none\\n    /// @param factory address The address of the vault factory\\n    function registerVaultFactory(address factory) external onlyOwner notShutdown {\\n        // add factory to set\\n        require(_vaultFactorySet.add(factory), \\\"Geyser: vault factory already registered\\\");\\n\\n        // emit event\\n        emit VaultFactoryRegistered(factory);\\n    }\\n\\n    /// @notice Remove vault factory from whitelist\\n    /// @dev use this function to disable new stakes to vaults coming from the specified\\n    ///      factory contract.\\n    ///      note: vaults with existing stakes from this factory are sill able to unstake\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - not shutdown\\n    /// state scope:\\n    ///   - remove from _vaultFactorySet\\n    /// token transfer: none\\n    /// @param factory address The address of the vault factory\\n    function removeVaultFactory(address factory) external onlyOwner notShutdown {\\n        // remove factory from set\\n        require(_vaultFactorySet.remove(factory), \\\"Geyser: vault factory not registered\\\");\\n\\n        // emit event\\n        emit VaultFactoryRemoved(factory);\\n    }\\n\\n    /// @notice Register bonus token for distribution\\n    /// @dev use this function to enable distribution of any ERC20 held by the RewardPool contract\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope:\\n    ///   - append to _bonusTokenSet\\n    /// token transfer: none\\n    /// @param bonusToken address The address of the bonus token\\n    function registerBonusToken(address bonusToken) external onlyOwner onlyOnline {\\n        // verify valid bonus token\\n        _validateAddress(bonusToken);\\n\\n        // verify bonus token count\\n        require(_bonusTokenSet.length() < MAX_REWARD_TOKENS, \\\"Geyser: max bonus tokens reached \\\");\\n\\n        // add token to set\\n        assert(_bonusTokenSet.add(bonusToken));\\n\\n        // emit event\\n        emit BonusTokenRegistered(bonusToken);\\n    }\\n\\n    /// @notice Rescue tokens from RewardPool\\n    /// @dev use this function to rescue tokens from RewardPool contract\\n    ///      without distributing to stakers or triggering emergency shutdown\\n    /// access control: only admin\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope: none\\n    /// token transfer: transfer requested token from RewardPool to recipient\\n    /// @param token address The address of the token to rescue\\n    /// @param recipient address The address of the recipient\\n    /// @param amount uint256 The amount of tokens to rescue\\n    function rescueTokensFromRewardPool(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner onlyOnline {\\n        // verify recipient\\n        _validateAddress(recipient);\\n\\n        // check not attempting to unstake reward token\\n        require(token != _geyser.rewardToken, \\\"Geyser: invalid address\\\");\\n\\n        // check not attempting to wthdraw bonus token\\n        require(!_bonusTokenSet.contains(token), \\\"Geyser: invalid address\\\");\\n\\n        // transfer tokens to recipient\\n        IRewardPool(_geyser.rewardPool).sendERC20(token, recipient, amount);\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Stake tokens\\n    /// access control: anyone with a valid permission\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    ///   - when vault exists on this geyser\\n    /// state scope:\\n    ///   - append to _vaults[vault].stakes\\n    ///   - increase _vaults[vault].totalStake\\n    ///   - increase _geyser.totalStake\\n    ///   - increase _geyser.totalStakeUnits\\n    ///   - increase _geyser.lastUpdate\\n    /// token transfer: transfer staking tokens from msg.sender to vault\\n    /// @param vault address The address of the vault to stake from\\n    /// @param amount uint256 The amount of staking tokens to stake\\n    /// @param permission bytes The signed lock permission for the universal vault\\n    function stake(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external override onlyOnline {\\n        // verify vault is valid\\n        require(isValidVault(vault), \\\"Geyser: vault is not registered\\\");\\n\\n        // verify non-zero amount\\n        require(amount != 0, \\\"Geyser: no amount staked\\\");\\n\\n        // fetch vault storage reference\\n        VaultData storage vaultData = _vaults[vault];\\n\\n        // verify stakes boundary not reached\\n        require(vaultData.stakes.length < MAX_STAKES_PER_VAULT, \\\"Geyser: MAX_STAKES_PER_VAULT reached\\\");\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // store amount and timestamp\\n        vaultData.stakes.push(StakeData(amount, block.timestamp));\\n\\n        // update cached total vault and geyser amounts\\n        vaultData.totalStake = vaultData.totalStake.add(amount);\\n        _geyser.totalStake = _geyser.totalStake.add(amount);\\n\\n        // call lock on vault\\n        IUniversalVault(vault).lock(_geyser.stakingToken, amount, permission);\\n\\n        // emit event\\n        emit Staked(vault, amount);\\n    }\\n\\n    /// @notice Unstake staking tokens and claim reward\\n    /// @dev rewards can only be claimed when unstaking, thus reseting the reward multiplier\\n    /// access control: anyone with a valid permission\\n    /// state machine:\\n    ///   - when vault exists on this geyser\\n    ///   - after stake from vault\\n    ///   - can be called multiple times while sufficient stake remains\\n    ///   - only online\\n    /// state scope:\\n    ///   - decrease _geyser.rewardSharesOutstanding\\n    ///   - decrease _geyser.totalStake\\n    ///   - increase _geyser.lastUpdate\\n    ///   - modify _geyser.totalStakeUnits\\n    ///   - modify _vaults[vault].stakes\\n    ///   - decrease _vaults[vault].totalStake\\n    /// token transfer:\\n    ///   - transfer reward tokens from reward pool to recipient\\n    ///   - transfer bonus tokens from reward pool to recipient\\n    /// @param vault address The vault to unstake from\\n    /// @param amount uint256 The amount of staking tokens to unstake\\n    /// @param permission bytes The signed unlock permission for the universal vault\\n    function unstakeAndClaim(\\n        address vault,\\n        uint256 amount,\\n        bytes calldata permission\\n    ) external override onlyOnline {\\n        // fetch vault storage reference\\n        VaultData storage vaultData = _vaults[vault];\\n\\n        // verify non-zero amount\\n        require(amount != 0, \\\"Geyser: no amount unstaked\\\");\\n\\n        // check for sufficient vault stake amount\\n        require(vaultData.totalStake >= amount, \\\"Geyser: insufficient vault stake\\\");\\n\\n        // check for sufficient geyser stake amount\\n        // if this check fails, there is a bug in stake accounting\\n        assert(_geyser.totalStake >= amount);\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // get reward amount remaining\\n        uint256 remainingRewards = IERC20(_geyser.rewardToken).balanceOf(_geyser.rewardPool);\\n\\n        // calculate vested portion of reward pool\\n        uint256 unlockedRewards =\\n            calculateUnlockedRewards(\\n                _geyser.rewardSchedules,\\n                remainingRewards,\\n                _geyser.rewardSharesOutstanding,\\n                block.timestamp\\n            );\\n\\n        // calculate vault time weighted reward with scaling\\n        RewardOutput memory out =\\n            calculateRewardFromStakes(\\n                vaultData.stakes,\\n                amount,\\n                unlockedRewards,\\n                _geyser.totalStakeUnits,\\n                block.timestamp,\\n                _geyser.rewardScaling\\n            );\\n\\n        // update stake data in storage\\n        if (out.newStakesCount == 0) {\\n            // all stakes have been unstaked\\n            delete vaultData.stakes;\\n        } else {\\n            // some stakes have been completely or partially unstaked\\n            // delete fully unstaked stakes\\n            while (vaultData.stakes.length > out.newStakesCount) vaultData.stakes.pop();\\n\\n            // only perform when lastStakeAmount is set\\n            if (out.lastStakeAmount > 0) {\\n                // update partially unstaked stake\\n                vaultData.stakes[out.newStakesCount.sub(1)].amount = out.lastStakeAmount;\\n            }\\n        }\\n\\n        // update cached stake totals\\n        vaultData.totalStake = vaultData.totalStake.sub(amount);\\n        _geyser.totalStake = _geyser.totalStake.sub(amount);\\n        _geyser.totalStakeUnits = out.newTotalStakeUnits;\\n\\n        // unlock staking tokens from vault\\n        IUniversalVault(vault).unlock(_geyser.stakingToken, amount, permission);\\n\\n        // emit event\\n        emit Unstaked(vault, amount);\\n\\n        // only perform on non-zero reward\\n        if (out.reward > 0) {\\n            // calculate shares to burn\\n            // sharesToBurn = sharesOutstanding * reward / remainingRewards\\n            uint256 sharesToBurn = _geyser.rewardSharesOutstanding.mul(out.reward).div(remainingRewards);\\n\\n            // burn claimed shares\\n            _geyser.rewardSharesOutstanding = _geyser.rewardSharesOutstanding.sub(sharesToBurn);\\n\\n            // transfer bonus tokens from reward pool to recipient\\n            if (_bonusTokenSet.length() > 0) {\\n                for (uint256 index = 0; index < _bonusTokenSet.length(); index++) {\\n                    // fetch bonus token address reference\\n                    address bonusToken = _bonusTokenSet.at(index);\\n\\n                    // calculate bonus token amount\\n                    // bonusAmount = bonusRemaining * reward / remainingRewards\\n                    uint256 bonusAmount =\\n                        IERC20(bonusToken).balanceOf(_geyser.rewardPool).mul(out.reward).div(remainingRewards);\\n\\n                    // transfer if amount is non-zero\\n                    if (bonusAmount > 0) {\\n                        // transfer bonus token\\n                        IRewardPool(_geyser.rewardPool).sendERC20(bonusToken, vault, bonusAmount);\\n\\n                        // emit event\\n                        emit RewardClaimed(vault, bonusToken, bonusAmount);\\n                    }\\n                }\\n            }\\n\\n            // transfer reward tokens from reward pool to recipient\\n            IRewardPool(_geyser.rewardPool).sendERC20(_geyser.rewardToken, vault, out.reward);\\n\\n            // emit event\\n            emit RewardClaimed(vault, _geyser.rewardToken, out.reward);\\n        }\\n    }\\n\\n    /// @notice Exit geyser without claiming reward\\n    /// @dev This function should never revert when correctly called by the vault.\\n    ///      A max number of stakes per vault is set with MAX_STAKES_PER_VAULT to\\n    ///      place an upper bound on the for loop in calculateTotalStakeUnits().\\n    /// access control: only callable by the vault directly\\n    /// state machine:\\n    ///   - when vault exists on this geyser\\n    ///   - when active stake from this vault\\n    ///   - any power state\\n    /// state scope:\\n    ///   - decrease _geyser.totalStake\\n    ///   - increase _geyser.lastUpdate\\n    ///   - modify _geyser.totalStakeUnits\\n    ///   - delete _vaults[vault]\\n    /// token transfer: none\\n    function rageQuit() external override {\\n        // fetch vault storage reference\\n        VaultData storage _vaultData = _vaults[msg.sender];\\n\\n        // revert if no active stakes\\n        require(_vaultData.stakes.length != 0, \\\"Geyser: no stake\\\");\\n\\n        // update cached sum of stake units across all vaults\\n        _updateTotalStakeUnits();\\n\\n        // emit event\\n        emit Unstaked(msg.sender, _vaultData.totalStake);\\n\\n        // update cached totals\\n        _geyser.totalStake = _geyser.totalStake.sub(_vaultData.totalStake);\\n        _geyser.totalStakeUnits = _geyser.totalStakeUnits.sub(\\n            calculateTotalStakeUnits(_vaultData.stakes, block.timestamp)\\n        );\\n\\n        // delete stake data\\n        delete _vaults[msg.sender];\\n    }\\n\\n    /* convenience functions */\\n\\n    function _updateTotalStakeUnits() private {\\n        // update cached totalStakeUnits\\n        _geyser.totalStakeUnits = getCurrentTotalStakeUnits();\\n        // update cached lastUpdate\\n        _geyser.lastUpdate = block.timestamp;\\n    }\\n\\n    function _validateAddress(address target) private view {\\n        // sanity check target for potential input errors\\n        require(isValidAddress(target), \\\"Geyser: invalid address\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/RewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {TransferHelper} from \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport {Powered} from \\\"./PowerSwitch/Powered.sol\\\";\\n\\ninterface IRewardPool {\\n    function sendERC20(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    function rescueERC20(address[] calldata tokens, address recipient) external;\\n}\\n\\n/// @title Reward Pool\\n/// @notice Vault for isolated storage of reward tokens\\n/// @dev Security contact: dev-support@ampleforth.org\\ncontract RewardPool is IRewardPool, Powered, Ownable {\\n    /* initializer */\\n\\n    constructor(address powerSwitch) {\\n        Powered._setPowerSwitch(powerSwitch);\\n    }\\n\\n    /* user functions */\\n\\n    /// @notice Send an ERC20 token\\n    /// access control: only owner\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only online\\n    /// state scope: none\\n    /// token transfer: transfer tokens from self to recipient\\n    /// @param token address The token to send\\n    /// @param to address The recipient to send to\\n    /// @param value uint256 Amount of tokens to send\\n    function sendERC20(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) external override onlyOwner onlyOnline {\\n        TransferHelper.safeTransfer(token, to, value);\\n    }\\n\\n    /* emergency functions */\\n\\n    /// @notice Rescue multiple ERC20 tokens\\n    /// access control: only power controller\\n    /// state machine:\\n    ///   - can be called multiple times\\n    ///   - only shutdown\\n    /// state scope: none\\n    /// token transfer: transfer tokens from self to recipient\\n    /// @param tokens address[] The tokens to rescue\\n    /// @param recipient address The recipient to rescue to\\n    function rescueERC20(address[] calldata tokens, address recipient) external override onlyShutdown {\\n        // only callable by controller\\n        require(msg.sender == Powered.getPowerController(), \\\"RewardPool: only controller can withdraw after shutdown\\\");\\n\\n        // assert recipient is defined\\n        require(recipient != address(0), \\\"RewardPool: recipient not defined\\\");\\n\\n        // transfer tokens\\n        for (uint256 index = 0; index < tokens.length; index++) {\\n            // get token\\n            address token = tokens[index];\\n            // get balance\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            // transfer token\\n            TransferHelper.safeTransfer(token, recipient, balance);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Factory/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\n\\ninterface IFactory {\\n    function create(bytes calldata args) external returns (address instance);\\n\\n    function create2(bytes calldata args, bytes32 salt) external returns (address instance);\\n}\\n\"\r\n    },\r\n    \"contracts/Factory/InstanceRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\ninterface IInstanceRegistry {\\n    /* events */\\n\\n    event InstanceAdded(address instance);\\n    event InstanceRemoved(address instance);\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) external view returns (bool validity);\\n\\n    function instanceCount() external view returns (uint256 count);\\n\\n    function instanceAt(uint256 index) external view returns (address instance);\\n}\\n\\n/// @title InstanceRegistry\\n/// @dev Security contact: dev-support@ampleforth.org\\ncontract InstanceRegistry is IInstanceRegistry {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* storage */\\n\\n    EnumerableSet.AddressSet private _instanceSet;\\n\\n    /* view functions */\\n\\n    function isInstance(address instance) external view override returns (bool validity) {\\n        return _instanceSet.contains(instance);\\n    }\\n\\n    function instanceCount() external view override returns (uint256 count) {\\n        return _instanceSet.length();\\n    }\\n\\n    function instanceAt(uint256 index) external view override returns (address instance) {\\n        return _instanceSet.at(index);\\n    }\\n\\n    /* admin functions */\\n\\n    function _register(address instance) internal {\\n        require(_instanceSet.add(instance), \\\"InstanceRegistry: already registered\\\");\\n        emit InstanceAdded(instance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PowerSwitch/Powered.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\n\\nimport {IPowerSwitch} from \\\"./PowerSwitch.sol\\\";\\n\\ninterface IPowered {\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getPowerSwitch() external view returns (address powerSwitch);\\n\\n    function getPowerController() external view returns (address controller);\\n}\\n\\n/// @title Powered\\n/// @notice Helper for calling external PowerSwitch\\n/// @dev Security contact: dev-support@ampleforth.org\\ncontract Powered is IPowered {\\n    /* storage */\\n\\n    address private _powerSwitch;\\n\\n    /* modifiers */\\n\\n    modifier onlyOnline() {\\n        _onlyOnline();\\n        _;\\n    }\\n\\n    modifier onlyOffline() {\\n        _onlyOffline();\\n        _;\\n    }\\n\\n    modifier notShutdown() {\\n        _notShutdown();\\n        _;\\n    }\\n\\n    modifier onlyShutdown() {\\n        _onlyShutdown();\\n        _;\\n    }\\n\\n    /* initializer */\\n\\n    function _setPowerSwitch(address powerSwitch) internal {\\n        _powerSwitch = powerSwitch;\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOnline();\\n    }\\n\\n    function isOffline() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isOffline();\\n    }\\n\\n    function isShutdown() public view override returns (bool status) {\\n        return IPowerSwitch(_powerSwitch).isShutdown();\\n    }\\n\\n    function getPowerSwitch() public view override returns (address powerSwitch) {\\n        return _powerSwitch;\\n    }\\n\\n    function getPowerController() public view override returns (address controller) {\\n        return IPowerSwitch(_powerSwitch).getPowerController();\\n    }\\n\\n    /* convenience functions */\\n\\n    function _onlyOnline() private view {\\n        require(isOnline(), \\\"Powered: is not online\\\");\\n    }\\n\\n    function _onlyOffline() private view {\\n        require(isOffline(), \\\"Powered: is not offline\\\");\\n    }\\n\\n    function _notShutdown() private view {\\n        require(!isShutdown(), \\\"Powered: is shutdown\\\");\\n    }\\n\\n    function _onlyShutdown() private view {\\n        require(isShutdown(), \\\"Powered: is not shutdown\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PowerSwitch/PowerSwitch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IPowerSwitch {\\n    /* admin events */\\n\\n    event PowerOn();\\n    event PowerOff();\\n    event EmergencyShutdown();\\n\\n    /* data types */\\n\\n    enum State {Online, Offline, Shutdown}\\n\\n    /* admin functions */\\n\\n    function powerOn() external;\\n\\n    function powerOff() external;\\n\\n    function emergencyShutdown() external;\\n\\n    /* view functions */\\n\\n    function isOnline() external view returns (bool status);\\n\\n    function isOffline() external view returns (bool status);\\n\\n    function isShutdown() external view returns (bool status);\\n\\n    function getStatus() external view returns (State status);\\n\\n    function getPowerController() external view returns (address controller);\\n}\\n\\n/// @title PowerSwitch\\n/// @notice Standalone pausing and emergency stop functionality\\n/// @dev Security contact: dev-support@ampleforth.org\\ncontract PowerSwitch is IPowerSwitch, Ownable {\\n    /* storage */\\n\\n    IPowerSwitch.State private _status;\\n\\n    /* initializer */\\n\\n    constructor(address owner) {\\n        // sanity check owner\\n        require(owner != address(0), \\\"PowerSwitch: invalid owner\\\");\\n        // transfer ownership\\n        Ownable.transferOwnership(owner);\\n    }\\n\\n    /* admin functions */\\n\\n    /// @notice Turn Power On\\n    /// access control: only admin\\n    /// state machine: only when offline\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOn() external override onlyOwner {\\n        require(_status == IPowerSwitch.State.Offline, \\\"PowerSwitch: cannot power on\\\");\\n        _status = IPowerSwitch.State.Online;\\n        emit PowerOn();\\n    }\\n\\n    /// @notice Turn Power Off\\n    /// access control: only admin\\n    /// state machine: only when online\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function powerOff() external override onlyOwner {\\n        require(_status == IPowerSwitch.State.Online, \\\"PowerSwitch: cannot power off\\\");\\n        _status = IPowerSwitch.State.Offline;\\n        emit PowerOff();\\n    }\\n\\n    /// @notice Shutdown Permanently\\n    /// access control: only admin\\n    /// state machine:\\n    /// - when online or offline\\n    /// - can only be called once\\n    /// state scope: only modify _status\\n    /// token transfer: none\\n    function emergencyShutdown() external override onlyOwner {\\n        require(_status != IPowerSwitch.State.Shutdown, \\\"PowerSwitch: cannot shutdown\\\");\\n        _status = IPowerSwitch.State.Shutdown;\\n        emit EmergencyShutdown();\\n    }\\n\\n    /* getter functions */\\n\\n    function isOnline() external view override returns (bool status) {\\n        return _status == State.Online;\\n    }\\n\\n    function isOffline() external view override returns (bool status) {\\n        return _status == State.Offline;\\n    }\\n\\n    function isShutdown() external view override returns (bool status) {\\n        return _status == State.Shutdown;\\n    }\\n\\n    function getStatus() external view override returns (IPowerSwitch.State status) {\\n        return _status;\\n    }\\n\\n    function getPowerController() external view override returns (address controller) {\\n        return Ownable.owner();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RageQuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAGEQUIT_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNLOCK_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateLockID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"lockID\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"getBalanceDelegated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalanceLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockAt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IUniversalVault.LockData\",\"name\":\"lockData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockSetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"eip712TypeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getPermissionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"permissionHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"permissionHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permission\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rageQuit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permission\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UniversalVault", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}