{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with a\\n     * `customRevert` function as a fallback when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with a `customRevert` function as a fallback revert reason when `target` reverts.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        function() internal view customRevert\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, customRevert);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided `customRevert`) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check if target is a contract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (target.code.length == 0) {\\n                    revert AddressEmptyCode(target);\\n                }\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or with a default revert error.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal view returns (bytes memory) {\\n        return verifyCallResult(success, returndata, defaultRevert);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-verifyCallResult-bool-bytes-}[`verifyCallResult`], but with a\\n     * `customRevert` function as a fallback when `success` is `false`.\\n     *\\n     * Requirements:\\n     *\\n     * - `customRevert` must be a reverting function.\\n     *\\n     * _Available since v5.0._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        function() internal view customRevert\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, customRevert);\\n        }\\n    }\\n\\n    /**\\n     * @dev Default reverting function when no `customRevert` is provided in a function call.\\n     */\\n    function defaultRevert() internal pure {\\n        revert FailedInnerCall();\\n    }\\n\\n    function _revert(bytes memory returndata, function() internal view customRevert) private view {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            customRevert();\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DiceBotGame.sol\": {\r\n      \"content\": \"/*\\n   DiceBot Game\\n\\n    .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \\n    | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\\n    | |  ________    | || |     _____    | || |     ______   | || |  _________   | || |   ______     | || |     ____     | || |  _________   | |\\n    | | |_   ___ `.  | || |    |_   _|   | || |   .' ___  |  | || | |_   ___  |  | || |  |_   _ \\\\    | || |   .'    `.   | || | |  _   _  |  | |\\n    | |   | |   `. \\\\ | || |      | |     | || |  / .'   \\\\_|  | || |   | |_  \\\\_|  | || |    | |_) |   | || |  /  .--.  \\\\  | || | |_/ | | \\\\_|  | |\\n    | |   | |    | | | || |      | |     | || |  | |         | || |   |  _|  _   | || |    |  __'.   | || |  | |    | |  | || |     | |      | |\\n    | |  _| |___.' / | || |     _| |_    | || |  \\\\ `.___.'\\\\  | || |  _| |___/ |  | || |   _| |__) |  | || |  \\\\  `--'  /  | || |    _| |_     | |\\n    | | |________.'  | || |    |_____|   | || |   `._____.'  | || | |_________|  | || |  |_______/   | || |   `.____.'   | || |   |_____|    | |\\n    | |              | || |              | || |              | || |              | || |              | || |              | || |              | |\\n    | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\\n    '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \\n\\n*/\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title DiceBot Game\\n * @dev \\n */\\ncontract DiceBotGame is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Revenue Wallet\\n    address public revenueWallet;\\n\\n    // The amount to take as revenue, in basis points.\\n    uint256 public immutable revenueBps;\\n\\n    // The amount to burn forever, in basis points.\\n    uint256 public immutable burnBps;\\n\\n    struct DiceGame {\\n        uint32 betSize;\\n        uint256 gameAmount;\\n        address bettingToken;\\n        address[] players;\\n        address winner;\\n        uint32 winnerScore;\\n        bool inProgress;\\n    }\\n\\n    // Map GameID to their games.\\n    mapping(uint64 => DiceGame) public games;\\n\\n    struct BettingToken {\\n        bool isBetting;\\n        uint256 minimumBet;\\n        address burnAddress;\\n    }\\n    // Map Betting Token to Bool\\n    mapping(address => BettingToken) public bettingToken;\\n    address[] public bettingTokenList;\\n\\n    address private constant DEAD_ADDR = 0x000000000000000000000000000000000000dEaD;\\n\\n    // Stores the amount each player has bet for a game.\\n    event Bet(uint64 indexed gameId, address indexed bettingToken, address indexed player, uint256 amount);\\n\\n    // Stores the amount each player wins for a game.\\n    event Win(uint64 indexed gameId, address indexed bettingToken, address indexed player);\\n\\n    // Stores the amount collected by the protocol.\\n    event Revenue(uint64 indexed gameId, address indexed bettingToken, uint256 indexed amount);\\n\\n    // Stores the amount burned by the protocol.\\n    event Burn(uint64 indexed gameId, address indexed bettingToken, uint256 indexed amount);\\n\\n    constructor(uint256 _revenueBps, uint256 _burnBps, address _revenueWallet) Ownable(msg.sender) {\\n        // Update Revenue Wallet\\n        revenueWallet = _revenueWallet;\\n        // Update Revenue Bps\\n        revenueBps = _revenueBps;\\n        // Update Burn Bps\\n        burnBps = _burnBps;\\n    }\\n\\n    /**\\n     * @dev Change Revenue Wallet\\n     */\\n    function changeRevenueWallet(address _newRevenue) public onlyOwner() {\\n        revenueWallet = _newRevenue;\\n    }\\n\\n    /**\\n     * @dev Add betting token, only owner call it\\n     * @param tokenAddress New bettingToken address\\n     * @param minimumBet MinimumBet amount for new bettingToken\\n     */\\n    function addBettingToken(address tokenAddress, uint256 minimumBet, address burnAddress) public onlyOwner() {\\n        // Check Betting Token Exists\\n        if (!bettingToken[tokenAddress].isBetting) {\\n            // Update Betting Flag\\n            bettingToken[tokenAddress].isBetting = true;\\n\\n            // Add New Betting Token\\n            bettingTokenList.push(tokenAddress);\\n        }\\n\\n        // Update Betting Amount\\n        bettingToken[tokenAddress].minimumBet = minimumBet;\\n\\n        // Update Burn Address\\n        bettingToken[tokenAddress].burnAddress = burnAddress;\\n    }\\n\\n    /**\\n     * @dev Remove betting token\\n     * @param tokenAddress Removing bettingToken address\\n     */\\n    function removeBettingToken(address tokenAddress) public onlyOwner() {\\n        if (bettingToken[tokenAddress].isBetting) {\\n            // Update Betting Flag\\n            bettingToken[tokenAddress].isBetting = false;\\n\\n            // Remove Betting Token\\n            uint bettingTokenListLength = bettingTokenList.length;\\n            for (uint i = 0; i < bettingTokenListLength; i += 1) {\\n                if (bettingTokenList[i] == tokenAddress) {\\n                    // Swap with Last ID\\n                    bettingTokenList[i] = bettingTokenList[bettingTokenListLength - 1];\\n\\n                    // Remove Last ID\\n                    bettingTokenList.pop();\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Check if there is a game in progress for a Telegram group.\\n     * @param gameId Dice GameID\\n     * @return true if there is a game in progress, otherwise false\\n     */\\n    function isGameInProgress(uint64 gameId) public view returns (bool) {\\n        return games[gameId].inProgress;\\n    }\\n\\n    /**\\n     * @dev Create a new game. Transfer funds into escrow.\\n     * @param _gameId Dice Bot Game ID\\n     * @param _betSize Number of chambers in the revolver\\n     * @param _bettingToken Betting Token for Dice\\n     * @param _gameAmount Amount of Game\\n     * @param _players Address list of players in game\\n     */\\n    function newGame(\\n        uint64 _gameId,\\n        address _bettingToken,\\n        uint32 _betSize,\\n        uint256 _gameAmount,\\n        address[] memory _players\\n    ) public onlyOwner {\\n        require(_betSize >= 2, \\\"Bet size too small\\\");\\n        require(bettingToken[_bettingToken].isBetting, \\\"Not betting token\\\");\\n        require(bettingToken[_bettingToken].minimumBet <= _gameAmount, \\\"Game amount should be more than minimum bet.\\\");\\n        require(_players.length == _betSize, \\\"Players length mismatch\\\");\\n        require(!isGameInProgress(_gameId), \\\"This game is on progress\\\");\\n\\n        // TransferFrom Amount of Betting Token to Game Contract\\n        for (uint32 i = 0; i < _betSize; i += 1) {\\n            // Check Balance\\n            require(IERC20(_bettingToken).balanceOf(_players[i]) >= _gameAmount, \\\"Not enough balance\\\");\\n            // Check Allowance\\n            require(IERC20(_bettingToken).allowance(_players[i], address(this)) >= _gameAmount, \\\"Not enough allowance\\\");\\n\\n            IERC20(_bettingToken).safeTransferFrom(_players[i], address(this), _gameAmount);\\n\\n            emit Bet(_gameId, _bettingToken, _players[i], _gameAmount);\\n        }\\n\\n        // Create & Update New Game\\n        DiceGame memory newG;\\n\\n        newG.bettingToken = _bettingToken;\\n        newG.betSize = _betSize;\\n        newG.gameAmount = _gameAmount;\\n        newG.players = _players;\\n        newG.inProgress = true;\\n\\n        games[_gameId] = newG;\\n    }\\n\\n    /**\\n     * @dev Declare a loser of the game and pay out the winnings.\\n     * @param _gameId Dice Bot Game ID\\n     * @param _scoreList Dice Game Score per Address\\n     */\\n    function endGame(\\n        uint64 _gameId,\\n        address[] memory _addressList,\\n        uint32[] memory _scoreList\\n    ) public onlyOwner {\\n        // Check Game in Progress\\n        require(isGameInProgress(_gameId), \\\"No game in progress for this TG Dice Game ID\\\");\\n\\n        // Get Current Game\\n        DiceGame storage currentGame = games[_gameId];\\n        // Check Game Size\\n        require(currentGame.betSize == _addressList.length, \\\"Players length mismatch\\\");\\n        require(currentGame.betSize == _scoreList.length, \\\"Players length mismatch\\\");\\n        // Get Betting Token\\n        address _bettingToken = currentGame.bettingToken;\\n        // Get Burn Address\\n        address _burnAddress = bettingToken[_bettingToken].burnAddress;\\n\\n        // Update Game Status\\n        currentGame.inProgress = false;\\n\\n        uint256 totalAmount = currentGame.gameAmount * currentGame.betSize;\\n        // Get Winner\\n        uint32 winnerId = 0;\\n        for (uint32 i = 1; i < currentGame.betSize; i += 1) {\\n            if (_scoreList[winnerId] < _scoreList[i]) {\\n                winnerId = i;\\n            }\\n        }\\n        // Calc Burn & Revenue & Winner Amount\\n        require(burnBps + revenueBps < 10000, \\\"Total fees must be < 100%\\\");\\n        uint256 burnAmount = totalAmount * burnBps / 10000;\\n        uint256 revenueAmount = totalAmount * revenueBps / 10000;\\n        uint256 winnerAmount = totalAmount - burnAmount - revenueAmount;\\n\\n        // Transfer to Winner\\n        IERC20(_bettingToken).safeTransfer(_addressList[winnerId], winnerAmount);\\n\\n        // Transfer to Revenue Wallet\\n        IERC20(_bettingToken).safeTransfer(revenueWallet, revenueAmount);\\n\\n        // Burn burnAmount\\n        IERC20(_bettingToken).safeTransfer(_burnAddress, burnAmount);\\n\\n        // Update Game Winner Address & Score\\n        currentGame.winner = _addressList[winnerId];\\n        currentGame.winnerScore = _scoreList[winnerId];\\n\\n        // Emit the Events\\n        emit Win(_gameId, _bettingToken, _addressList[winnerId]);\\n        emit Revenue(_gameId,_bettingToken, revenueAmount);\\n        emit Burn(_gameId,_bettingToken, burnAmount);\\n    }\\n\\n    /**\\n     * @dev Abort a game and refund the bets. Use in emergencies\\n     *      e.g. bot crash.\\n     * @param _gameId DiceBot Game ID\\n     */\\n    function abortGame(uint64 _gameId) public onlyOwner {\\n        require(isGameInProgress(_gameId), \\\"No game in progress for this Telegram chat ID\\\");\\n\\n        DiceGame storage currentGame = games[_gameId];\\n        address _bettingToken = currentGame.bettingToken;\\n\\n        for (uint32 i = 0; i < currentGame.betSize; i += 1) {\\n            IERC20(_bettingToken).safeTransfer(currentGame.players[i], currentGame.gameAmount);\\n        }\\n\\n        currentGame.inProgress = false;\\n    }\\n}\"\r\n    },\r\n    \"contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_revenueBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_revenueWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"gameId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"gameId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"gameId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"gameId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bettingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gameId\",\"type\":\"uint64\"}],\"name\":\"abortGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumBet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"name\":\"addBettingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bettingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBetting\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumBet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bettingTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRevenue\",\"type\":\"address\"}],\"name\":\"changeRevenueWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gameId\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_scoreList\",\"type\":\"uint32[]\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"betSize\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gameAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bettingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"winnerScore\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"gameId\",\"type\":\"uint64\"}],\"name\":\"isGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_gameId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_bettingToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_betSize\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gameAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"}],\"name\":\"newGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removeBettingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DiceBotGame", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000f880101b824baf2652fc8fb034f7a8448a377a24", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}