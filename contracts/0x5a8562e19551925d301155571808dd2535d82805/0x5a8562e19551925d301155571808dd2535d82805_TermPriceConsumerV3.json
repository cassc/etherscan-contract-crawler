{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionBidLockerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermAuctionBidLockerEvents is an interface that defines all events emitted by the Term Auction Bid Locker.\\ninterface ITermAuctionBidLockerEvents {\\n    event TermAuctionBidLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionBidLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime,\\n        uint256 maxBidPrice,\\n        uint256 minimumTenderAmount,\\n        uint256 dayCountFractionMantissa\\n    );\\n\\n    event BidLocked(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        address bidder,\\n        bytes32 bidPrice,\\n        uint256 amount,\\n        address token,\\n        address[] collateralTokens,\\n        uint256[] collateralAmounts,\\n        bool isRollover,\\n        address rolloverPairOffTermRepoServicer,\\n        address referralAddress\\n    );\\n\\n    event BidRevealed(bytes32 termAuctionId, bytes32 id, uint256 bidPrice);\\n\\n    event BidUnlocked(bytes32 termAuctionId, bytes32 id);\\n\\n    event BidInShortfall(bytes32 termAuctionId, bytes32 id);\\n\\n    event BidLockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event BidLockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event BidUnlockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event BidUnlockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @title ITermAuctionEvents defines all events emitted by the TermAuctionContract.\\ninterface ITermAuctionEvents {\\n    /// Event emitted when a new auction is initialized\\n    /// @param termRepoId The term ID\\n    /// @param termAuctionId The term auction Id\\n    /// @param termAuction auction contract address\\n    /// @param auctionEndTime The auction end time\\n    /// @param version The version tag of the smart contract deployed\\n    event TermAuctionInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuction,\\n        uint256 auctionEndTime,\\n        string version\\n    );\\n\\n    /// Event emitted when a bid is assigned\\n    /// @param termAuctionId The auction ID\\n    /// @param id The bid ID\\n    /// @param amount The amount assigned\\n    event BidAssigned(bytes32 termAuctionId, bytes32 id, uint256 amount);\\n\\n    /// Event emitted when an offer is assigned\\n    /// @param termAuctionId The term ID\\n    /// @param id The offer ID\\n    /// @param amount The amount assigned\\n    event OfferAssigned(bytes32 termAuctionId, bytes32 id, uint256 amount);\\n\\n    /// Event emitted when an auction is completed\\n    /// @param termAuctionId The ID of the auction\\n    /// @param timestamp The timestamp of the auction completion\\n    /// @param block The block of the auction completion\\n    /// @param totalAssignedBids The total amount of bids assigned\\n    /// @param totalAssignedOffers The total amount of offers assigned\\n    /// @param clearingPrice The clearing price of the auction\\n    event AuctionCompleted(\\n        bytes32 termAuctionId,\\n        uint256 timestamp,\\n        uint256 block,\\n        uint256 totalAssignedBids,\\n        uint256 totalAssignedOffers,\\n        uint256 clearingPrice\\n    );\\n\\n    /// Event emitted when an auction is cancelled.\\n    /// @param termAuctionId The ID of the auction.\\n    /// @param nonViableAuction Auction not viable due to bid and offer prices not intersecting\\n    /// @param auctionCancelledforWithdrawal Auction has been cancelled for manual fund withdrawal\\n    event AuctionCancelled(\\n        bytes32 termAuctionId,\\n        bool nonViableAuction,\\n        bool auctionCancelledforWithdrawal\\n    );\\n\\n    /// Event emitted when an auction is paused.\\n    /// @param termAuctionId The ID of the auction.\\n    /// @param termRepoId The ID of the repo.\\n    event CompleteAuctionPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    /// Event emitted when an auction is unpaused.\\n    /// @param termAuctionId The ID of the auction.\\n    /// @param termRepoId The ID of the repo.\\n    event CompleteAuctionUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermAuctionOfferLockerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermAuctionOfferLockerEvents is an interface that defines all events emitted by the Term Auction Offer Locker.\\ninterface ITermAuctionOfferLockerEvents {\\n    event TermAuctionOfferLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionOfferLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime,\\n        uint256 maxOfferPrice,\\n        uint256 minimumTenderAmount\\n    );\\n\\n    event OfferLocked(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        address offeror,\\n        bytes32 offerPrice,\\n        uint256 amount,\\n        address token,\\n        address referralAddress\\n    );\\n\\n    event OfferRevealed(bytes32 termAuctionId, bytes32 id, uint256 offerPrice);\\n\\n    event OfferUnlocked(bytes32 termAuctionId, bytes32 id);\\n\\n    event OfferLockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event OfferLockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event OfferUnlockingPaused(bytes32 termAuctionId, bytes32 termRepoId);\\n\\n    event OfferUnlockingUnpaused(bytes32 termAuctionId, bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermEventEmitter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./ITermAuctionEvents.sol\\\";\\nimport \\\"./ITermAuctionBidLockerEvents.sol\\\";\\nimport \\\"./ITermAuctionOfferLockerEvents.sol\\\";\\nimport \\\"./ITermRepoCollateralManagerEvents.sol\\\";\\nimport \\\"./ITermRepoServicerEvents.sol\\\";\\nimport \\\"./ITermRepoRolloverManagerEvents.sol\\\";\\nimport \\\"./ITermRepoLockerEvents.sol\\\";\\nimport \\\"./ITermRepoTokenEvents.sol\\\";\\nimport \\\"./ITermEventEmitterEvents.sol\\\";\\nimport \\\"../lib/TermAuctionBid.sol\\\";\\n\\ninterface ITermEventEmitter is\\n    ITermAuctionEvents,\\n    ITermAuctionBidLockerEvents,\\n    ITermAuctionOfferLockerEvents,\\n    ITermRepoCollateralManagerEvents,\\n    ITermRepoServicerEvents,\\n    ITermRepoRolloverManagerEvents,\\n    ITermRepoLockerEvents,\\n    ITermRepoTokenEvents,\\n    ITermEventEmitterEvents\\n{\\n    // ========================================================================\\n    // = TermAuction Events ===================================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The id of the current Term Repo deployment being initialized\\n    /// @param termAuctionId The id of the auction being initialized\\n    /// @param termAuction The address of the auction contract being initialized\\n    /// @param auctionEndTime The end time of the auction being initialized\\n    /// @param version The version tag of the smart contract deployed\\n    function emitTermAuctionInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuction,\\n        uint256 auctionEndTime,\\n        string calldata version\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id A bid id\\n    /// @param amount The amount assigned to this bid\\n    function emitBidAssigned(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    /// @param amount The amount assigned to this offer\\n    function emitOfferAssigned(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termAuctionId The Term Auction id of auction completed\\n    /// @param timestamp The timestamp of the current block\\n    /// @param blockNumber The number of the current block\\n    /// @param totalAssignedBids The number of assigned bids in the auction\\n    /// @param totalAssignedOffers The number of assigned offers in the auction\\n    /// @param clearingPrice The clearing price of the auction\\n    function emitAuctionCompleted(\\n        bytes32 termAuctionId,\\n        uint256 timestamp,\\n        uint256 blockNumber,\\n        uint256 totalAssignedBids,\\n        uint256 totalAssignedOffers,\\n        uint256 clearingPrice\\n    ) external;\\n\\n    /// @param nonViableAuction Auction not viable due to bid and offer prices not intersecting\\n    /// @param auctionCancelledforWithdrawal Auction has been cancelled for withdrawal\\n    function emitAuctionCancelled(\\n        bytes32 termAuctionId,\\n        bool nonViableAuction,\\n        bool auctionCancelledforWithdrawal\\n    ) external;\\n\\n    /// @param termAuctionId The id of the auction paused\\n    /// @param termRepoId The Term Repo id associated with auction paused\\n    function emitCompleteAuctionPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of the auction unpaused\\n    /// @param termRepoId The Term Repo id associated with auction unpaused\\n    function emitCompleteAuctionUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermAuctionBidLocker Events ==========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with BidLocker initialized\\n    /// @param termAuctionId The Term Auction id associated with BidLocker initialized\\n    /// @param termAuctionBidLocker The address of the TermAuctionBidLocker contract being intialized\\n    /// @param auctionStartTime The time at which auction bids will be accepted for submission\\n    /// @param revealTime The time at which sealed auction bids can be revealed\\n    /// @param maxBidPrice The maximum tender price (interest rate) in percentage\\n    /// @param minimumTenderAmount The minimum amount of borrowed purchase token that will be accepted\\n    /// @param dayCountFractionMantissa The day count fraction remainder\\n    function emitTermAuctionBidLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionBidLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime,\\n        uint256 maxBidPrice,\\n        uint256 minimumTenderAmount,\\n        uint256 dayCountFractionMantissa\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param bid A struct containing details of the locked bid\\n    /// @param referralAddress The address of the referrer. Zero Address if none.\\n    function emitBidLocked(\\n        bytes32 termAuctionId,\\n        TermAuctionBid calldata bid,\\n        address referralAddress\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id The bid id\\n    /// @param bidPrice The revealed price of the bid\\n    function emitBidRevealed(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 bidPrice\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id A bid id\\n    function emitBidUnlocked(bytes32 termAuctionId, bytes32 id) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id A bid id\\n    function emitBidInShortfall(bytes32 termAuctionId, bytes32 id) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid locking is paused\\n    /// @param termRepoId The Term Repo id where bid locking is paused\\n    function emitBidLockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid locking is unpaused\\n    /// @param termRepoId The Term Repo id where bid locking is unpaused\\n    function emitBidLockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid unlocking is paused\\n    /// @param termRepoId The Term Repo id where bid unlocking is paused\\n    function emitBidUnlockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where bid unlocking is unpaused\\n    /// @param termRepoId The Term Repo id where bid unlocking is unpaused\\n    function emitBidUnlockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermAuctionOfferLocker Events ========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with OfferLocker initialized\\n    /// @param termAuctionId The Term Auction id associated with OfferLocker initialized\\n    /// @param termAuctionOfferLocker The address of the TermAuctionOfferLocker contract being intialized\\n    /// @param auctionStartTime The time at which auction bids will be accepted for submission\\n    /// @param revealTime The time at which sealed auction bids can be revealed\\n    function emitTermAuctionOfferLockerInitialized(\\n        bytes32 termRepoId,\\n        bytes32 termAuctionId,\\n        address termAuctionOfferLocker,\\n        uint256 auctionStartTime,\\n        uint256 revealTime,\\n        uint256 maxOfferPrice,\\n        uint256 minimumTenderAmount\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    /// @param offeror The address of the offeror\\n    /// @param offerPrice The offer price\\n    /// @param amount The amount of purchase tokens offered\\n    /// @param purchaseToken The address of the purchase token being offered\\n    /// @param referralAddress The address of the referrer. Zero Address if none.\\n    function emitOfferLocked(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        address offeror,\\n        bytes32 offerPrice,\\n        uint256 amount,\\n        address purchaseToken,\\n        address referralAddress\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    /// @param offerPrice The offer price revealed\\n    function emitOfferRevealed(\\n        bytes32 termAuctionId,\\n        bytes32 id,\\n        uint256 offerPrice\\n    ) external;\\n\\n    /// @param termAuctionId A Term Auction id\\n    /// @param id An offer id\\n    function emitOfferUnlocked(bytes32 termAuctionId, bytes32 id) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer locking is paused\\n    /// @param termRepoId The Term Repo id where offer locking is paused\\n    function emitOfferLockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer locking is unpaused\\n    /// @param termRepoId The Term Repo id where offer locking is unpaused\\n    function emitOfferLockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer unlocking is paused\\n    /// @param termRepoId The Term Repo id where offer unlocking is paused\\n    function emitOfferUnlockingPaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    /// @param termAuctionId The id of Term Auction where offer unlocking is unpaused\\n    /// @param termRepoId The Term Repo id where offer unlocking is unpaused\\n    function emitOfferUnlockingUnpaused(\\n        bytes32 termAuctionId,\\n        bytes32 termRepoId\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermRepoCollateralManager Events =========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with collateral manger being initialized\\n    /// @param termRepoCollateralManager The address of the TermRepoCollateralManager contract being intialized\\n    /// @param collateralTokens An array containing a list of the addresses of all accepted collateral tokens\\n    /// @param initialCollateralRatios An array containing the initial collateral ratios for each collateral token\\n    /// @param maintenanceCollateralRatios An array containing the maintenance collateral ratios for each collateral token\\n    /// @param liquidatedDamagesSchedule An array containing the liquidated damages applicable to each collateral token\\n    function emitTermRepoCollateralManagerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address[] calldata collateralTokens,\\n        uint256[] calldata initialCollateralRatios,\\n        uint256[] calldata maintenanceCollateralRatios,\\n        uint256[] calldata liquidatedDamagesSchedule\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id for the Term Repo being reopened\\n    /// @param termRepoCollateralManager The TermRepoCollateralManager address for the Term Repo being reopened\\n    /// @param termAuctionBidLocker New TermAuctionBidLocker to be paired for reopening\\n    function emitPairReopeningBidLocker(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address termAuctionBidLocker\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The address of the collateral token locked\\n    /// @param amount The amount of collateral being locked\\n    function emitCollateralLocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param collateralToken The address of the collateral token locked\\n    /// @param amount The amount of collateral being unlocked\\n    function emitCollateralUnlocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param liquidator The address of the liquidator\\n    /// @param closureAmount The amount of repurchase exposure covered\\n    /// @param collateralToken The address of the collateral tokens liquidated\\n    /// @param amountLiquidated The amount of collateral tokens liquidated\\n    function emitLiquidation(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address liquidator,\\n        uint256 closureAmount,\\n        address collateralToken,\\n        uint256 amountLiquidated,\\n        uint256 protocolSeizureAmount,\\n        bool defaultLiquidation\\n    ) external;\\n\\n    /// @param termRepoId The id of Term Repo where liquidations are paused\\n    function emitLiquidationPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The id of Term Repo where liquidation is unpaused\\n    function emitLiquidationUnpaused(bytes32 termRepoId) external;\\n\\n    // ========================================================================\\n    // = TermRepoServicer Events ===============================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with TermRepoServicer being initialized\\n    /// @param termRepoServicer The address of the TermRepoServicer contract being initialized\\n    /// @param purchaseToken The address of the purchase token\\n    /// @param maturityTimestamp The time at which repurchase is due\\n    /// @param endOfRepurchaseWindow The time at which the repurchase window ends\\n    /// @param redemptionTimestamp The time when redemption of Term Repo Tokens begins\\n    /// @param servicingFee percentage share of bid amounts charged to bidder\\n    /// @param version The version tag of the smart contract deployed\\n    function emitTermRepoServicerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address purchaseToken,\\n        uint256 maturityTimestamp,\\n        uint256 endOfRepurchaseWindow,\\n        uint256 redemptionTimestamp,\\n        uint256 servicingFee,\\n        string calldata version\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id for the Term Repo being reopened\\n    /// @param termRepoServicer The address of the TermRepoServicer contract for the Term Repo being reopened\\n    /// @param termAuctionOfferLocker The TermAuctionOfferLocker to be paired for reopening\\n    /// @param termAuction The address of the TermAuction contract to be paired for reopening\\n    function emitReopeningOfferLockerPaired(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address termAuctionOfferLocker,\\n        address termAuction\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address of the offeror\\n    /// @param amount The offer amount to be locked\\n    /// @notice This event is not to be confused with OfferLocked by TermOfferLocker\\n    /// @notice Both will be triggered, this one specifically refers to corresponding action taken by Term Servicer\\n    function emitOfferLockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address of the offeror\\n    /// @param amount The offer amount to be unlocked\\n    /// @notice This event is not to be confused with OfferUnlocked by TermOfferLocker\\n    /// @notice Both will be triggered, this one specifically refers to corresponding action taken by Term Servicer\\n    function emitOfferUnlockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param offerId Unique id for offer\\n    /// @param offeror The address of the offeror\\n    /// @param purchasePrice The offer amount fulfilled\\n    /// @param repurchasePrice The repurchase price due to offeror at maturity\\n    /// @param repoTokensMinted The amount of Term Repo Tokens minted to offeror\\n    function emitOfferFulfilled(\\n        bytes32 offerId,\\n        address offeror,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 repoTokensMinted\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param redeemer The address of the redeemer\\n    /// @param redemptionAmount The amount of TermRepoTokens redeemed\\n    /// @param redemptionHaircut The haircut applied to redemptions (if any) due to unrecoverable repo exposure\\n    function emitTermRepoTokensRedeemed(\\n        bytes32 termRepoId,\\n        address redeemer,\\n        uint256 redemptionAmount,\\n        uint256 redemptionHaircut\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param bidder The address of the bidder\\n    /// @param purchasePrice The bid amount fulfilled in auction\\n    /// @param repurchasePrice The repurchase price due at maturity\\n    /// @param servicingFees The fees earned by the protocol\\n    function emitBidFulfilled(\\n        bytes32 termRepoId,\\n        address bidder,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param purchasePrice The purchase price received from new TermRepo\\n    /// @param repurchasePrice The new repurchase price due at maturity of new TermRepo\\n    /// @param servicingFees The fees earned by the protocol\\n    function emitExposureOpenedOnRolloverNew(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param amountRolled The repurchase exposure balance closed on old Term Repo\\n    function emitExposureClosedOnRolloverExisting(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amountRolled\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param amount The amount submitted for repurchase\\n    function emitRepurchasePaymentSubmitted(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amount\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param minter The address of the minter\\n    /// @param netTokensReceived The amount of Term Repo Tokens received by minter net of servicing fees\\n    /// @param servicingFeeTokens The number of Term Repo Tokens retained by protocol in servicing fees\\n    /// @param repurchasePrice The repurchase exposure opened by minter against Term Repo Token mint\\n    function emitMintExposure(\\n        bytes32 termRepoId,\\n        address minter,\\n        uint256 netTokensReceived,\\n        uint256 servicingFeeTokens,\\n        uint256 repurchasePrice\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    /// @param closeAmount The amount of repurchase exposure to close\\n    function emitBurnCollapseExposure(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 closeAmount\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermRepoRolloverManager Events ===========================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with TermRepoRolloverManager being initialized\\n    /// @param rolloverManager The address of the TermRepoRolloverManager contract being initialized\\n    function emitTermRepoRolloverManagerInitialized(\\n        bytes32 termRepoId,\\n        address rolloverManager\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param rolloverTermAuctionId The Term Auction Id that rollover bid will be submitted into\\n    function emitRolloverTermApproved(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param rolloverTermAuctionId The Term Auction Id whose rollover approval is revoked\\n    function emitRolloverTermApprovalRevoked(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param rolloverTermRepoId Term Repo Id of Rollover Term Repo\\n    /// @param borrower The address of the borrower\\n    /// @param rolloverAuction The address of the auction being rolled over to\\n    /// @param rolloverAmount The repurchase amount being rolled over\\n    /// @param hashedBidPrice The hash of the rollover bid price\\n    function emitRolloverElection(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermRepoId,\\n        address borrower,\\n        address rolloverAuction,\\n        uint256 rolloverAmount,\\n        bytes32 hashedBidPrice\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverCancellation(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverBidLockSucceeded(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverBidLockFailed(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id of existing Term Repo\\n    /// @param borrower The address of the borrower\\n    function emitRolloverProcessed(\\n        bytes32 termRepoId,\\n        address borrower\\n    ) external;\\n\\n    // ========================================================================\\n    // = TermRepoLocker Events ======================================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with TermRepoLocker contract being initialized\\n    /// @param termRepoLocker The address of the TermRepoLocker contract being initialized\\n    function emitTermRepoLockerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoLocker\\n    ) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    function emitTermRepoLockerTransfersPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId A Term Repo id\\n    function emitTermRepoLockerTransfersUnpaused(bytes32 termRepoId) external;\\n\\n    // ========================================================================\\n    // = TermRepoToken Events =====================================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken being initalized\\n    /// @param termRepoToken The address of the TermRepoToken contract being initialized\\n    /// @param redemptionRatio The number of purchase tokens redeemable per unit of Term Repo Token at par\\n    function emitTermRepoTokenInitialized(\\n        bytes32 termRepoId,\\n        address termRepoToken,\\n        uint256 redemptionRatio\\n    ) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where minting is paused\\n    function emitTermRepoTokenMintingPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where minting is unpaused\\n    function emitTermRepoTokenMintingUnpaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where burning is paused\\n    function emitTermRepoTokenBurningPaused(bytes32 termRepoId) external;\\n\\n    /// @param termRepoId The Term Repo id associated with the TermRepoToken where burning is unpaused\\n    function emitTermRepoTokenBurningUnpaused(bytes32 termRepoId) external;\\n\\n    // ========================================================================\\n    // = TermEventEmitter Events ==============================================\\n    // ========================================================================\\n\\n    /// @param termRepoId The id of the Term Repo being delisted\\n    function emitDelistTermRepo(bytes32 termRepoId) external;\\n\\n    /// @param termAuctionId The id of the Term Auction being delisted\\n    function emitDelistTermAuction(bytes32 termAuctionId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermEventEmitterEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\ninterface ITermEventEmitterEvents {\\n    /// @notice Event emitted when a new Term Repo is delisted on Term Finance\\n    /// @param termRepoId unique identifier for a Term Repo\\n    event DelistTermRepo(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a new Term Auction is delisted on Term Finance\\n    /// @param termAuctionId unique identifier for a Term Auction\\n    event DelistTermAuction(bytes32 termAuctionId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/ExponentialNoError.sol\\\";\\n\\ninterface ITermPriceOracle {\\n    function reOpenToNewBidLocker(address termAuctionBidLocker) external;\\n\\n    /// @notice A function to return current market value given a token address and an amount\\n    /// @param token The address of the token to query\\n    /// @param amount The amount tokens to value\\n    /// @return The current market value of tokens at the specified amount, in USD\\n    function usdValueOfTokens(\\n        address token,\\n        uint256 amount\\n    ) external view returns (ExponentialNoError.Exp memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermPriceOracleErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermPriceOracleErrors defines all errors emitted by the PriceOracle.\\ninterface ITermPriceOracleErrors {\\n    error NoPriceFeed(address tokenAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermPriceOracleEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermPriceOracleEvents is an interface that defines all events emitted by the Term Price Oracle.\\ninterface ITermPriceOracleEvents {\\n    /// @notice Event emitted when a new price feed is added or updated to price oracle.\\n    /// @param token The address of the token fee subscribe\\n    /// @param tokenPriceAggregator The proxy price aggregator address subscribed\\n    event SubscribePriceFeed(address token, address tokenPriceAggregator);\\n\\n    /// @notice Event emitted when a price feed is removed from price oracle.\\n    /// @param token The address of the token\\n    event UnsubscribePriceFeed(address token);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoCollateralManagerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoCollateralManagerEvents is an interface that defines all events emitted by Term Repo Collateral Manager.\\ninterface ITermRepoCollateralManagerEvents {\\n    /// @notice Event emitted when a Term Repo Collateral Manager is initialized.\\n    /// @param termRepoId                  term identifier\\n    /// @param collateralTokens        addresses of accepted collateral tokens\\n    /// @param initialCollateralRatios list of initial collateral ratios for each collateral token in the same order as collateral tokens list\\n    /// @param maintenanceCollateralRatios       list of maintenance ratios for each collateral token in the same order as collateral tokens list\\n    /// @param liquidatedDamagesSchedule    liquidation discounts for collateral tokens\\n    event TermRepoCollateralManagerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address[] collateralTokens,\\n        uint256[] initialCollateralRatios,\\n        uint256[] maintenanceCollateralRatios,\\n        uint256[] liquidatedDamagesSchedule\\n    );\\n\\n    /// @notice Event emitted when existing Term Repo Locker is reopened to another auction group\\n    /// @param termRepoId                     term identifier\\n    /// @param termRepoCollateralManager          address of collateral manager\\n    /// @param termAuctionBidLocker       address of auction bid locker paired through reopening\\n    event PairReopeningBidLocker(\\n        bytes32 termRepoId,\\n        address termRepoCollateralManager,\\n        address termAuctionBidLocker\\n    );\\n\\n    /// @notice Event emitted when collateral is locked.\\n    /// @param termRepoId             term identifier\\n    /// @param borrower           address of borrower who locked collateral\\n    /// @param collateralToken    address of collateral token\\n    /// @param amount             amount of collateral token locked\\n    event CollateralLocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when collateral is locked.\\n    /// @param termRepoId             term identifier\\n    /// @param borrower           address of borrower who locked collateral\\n    /// @param collateralToken    address of collateral token\\n    /// @param amount             amount of collateral token unlocked\\n    event CollateralUnlocked(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address collateralToken,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when a liquidation occurs\\n    /// @param termRepoId                term identifier\\n    /// @param borrower              address of borrower being liquidated\\n    /// @param liquidator            address of liquidator\\n    /// @param closureAmount       amount of loan repaid by liquidator\\n    /// @param collateralToken       address of collateral token liquidated\\n    /// @param amountLiquidated      amount of collateral liquidated\\n    /// @param protocolSeizureAmount amount of collateral liquidated and seized by protocol as fee\\n    /// @param defaultLiquidation    boolean indicating if liquidation is a default or not\\n    event Liquidation(\\n        bytes32 termRepoId,\\n        address borrower,\\n        address liquidator,\\n        uint256 closureAmount,\\n        address collateralToken,\\n        uint256 amountLiquidated,\\n        uint256 protocolSeizureAmount,\\n        bool defaultLiquidation\\n    );\\n\\n    /// @notice Event emitted when a Liquidations are paused for a term\\n    /// @param termRepoId                     term identifier\\n    event LiquidationsPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Liquidations are unpaused for a term\\n    /// @param termRepoId                     term identifier\\n    event LiquidationsUnpaused(bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoLockerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoLockerEvents is an interface that defines all events emitted by the TermRepoLocker.\\ninterface ITermRepoLockerEvents {\\n    /// @notice Event emitted when a TermRepoLocker is initialized.\\n    /// @param termRepoId term identifier\\n    /// @param termRepoLocker address of initialized term repo locker\\n    event TermRepoLockerInitialized(bytes32 termRepoId, address termRepoLocker);\\n\\n    /// @notice Event emitted transfers for a TermRepoLocker are paused.\\n    /// @param termRepoId term identifier\\n    event TermRepoLockerTransfersPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted transfers for a TermRepoLocker are unpaused.\\n    /// @param termRepoId term identifier\\n    event TermRepoLockerTransfersUnpaused(bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoRolloverManagerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoCollateralManagerEvents is an interface that defines all events emitted by Term Repo Collateral Manager.\\ninterface ITermRepoRolloverManagerEvents {\\n    /// @notice Event emitted when a rollover manager is initialized\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverManager Address of rollover manager\\n    event TermRepoRolloverManagerInitialized(\\n        bytes32 termRepoId,\\n        address rolloverManager\\n    );\\n\\n    /// @notice Event emitted when a rollover manager approves a future term as a destination for borrows\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverTermAuctionId The Term Auction Id that rollover bid will be submitted into\\n    event RolloverTermApproved(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    );\\n\\n    /// @notice Event emitted when a rollover manager revokes approval for a future term as a destination for borrows\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverTermAuctionId The Term Auction Id that rollover bid will be submitted into\\n    event RolloverTermApprovalRevoked(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermAuctionId\\n    );\\n\\n    /// @notice Event emitted when a borrower elects a rollover contract\\n    /// @param termRepoId A Term Repo id\\n    /// @param rolloverTermRepoId Term Repo Id of Rollover Term Repo\\n    /// @param borrower The address of the borrower\\n    /// @param rolloverAuction The address of rollover term contract\\n    /// @param rolloverAmount Amount of purchase currency borrower is rolling over\\n    /// @param hashedBidPrice The hash of rollover bid price\\n    event RolloverElection(\\n        bytes32 termRepoId,\\n        bytes32 rolloverTermRepoId,\\n        address borrower,\\n        address rolloverAuction,\\n        uint256 rolloverAmount,\\n        bytes32 hashedBidPrice\\n    );\\n\\n    /// @notice Event emitted when a borrower cancels a rollover election\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of the borrower\\n    event RolloverCancellation(bytes32 termRepoId, address borrower);\\n\\n    /// @notice Event emitted when a bid is locked for a borrower rollover\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of borrower\\n    event RolloverBidLockSucceeded(bytes32 termRepoId, address borrower);\\n\\n    /// @notice Event emitted when a bid fails to be locked for a borrower rollover\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of borrower\\n    event RolloverBidLockFailed(bytes32 termRepoId, address borrower);\\n\\n    /// @notice Event emitted when a rollover is processed completely\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address of borrower\\n    event RolloverProcessed(bytes32 termRepoId, address borrower);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoServicerEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoServicerEvents is an interface that defines all events emitted by the Term Repo Servicer.\\ninterface ITermRepoServicerEvents {\\n    /// @notice Event emitted when a Term Loan Manager is initialized.\\n    /// @param termRepoId A Term Repo id\\n    /// @param purchaseToken The address of purchase token used for loans and repay\\n    /// @param maturityTimestamp The timestamp at which term reaches maturity\\n    /// @param endOfRepurchaseWindow The timestamp at which Term Repo is closed to repurchase\\n    /// @param redemptionTimestamp The timestamp at which loaners can redeem term repo tokens\\n    /// @param servicingFee percentage share of bid amounts charged to bidder\\n    /// @param version The version tag of the smart contract deployed\\n    event TermRepoServicerInitialized(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address purchaseToken,\\n        uint256 maturityTimestamp,\\n        uint256 endOfRepurchaseWindow,\\n        uint256 redemptionTimestamp,\\n        uint256 servicingFee,\\n        string version\\n    );\\n\\n    /// @notice Event emitted when a TermRepoLocker is reopened to another auction group\\n    /// @param termRepoId A Term Repo id\\n    /// @param termRepoServicer The address of loan manager\\n    /// @param termAuctionOfferLocker The address of auction offer locker paired through reopening\\n    /// @param termAuction The address of auction  paired through reopening\\n    event ReopeningOfferLockerPaired(\\n        bytes32 termRepoId,\\n        address termRepoServicer,\\n        address termAuctionOfferLocker,\\n        address termAuction\\n    );\\n\\n    /// @notice Event emitted when a loan offer is locked.\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address who submitted offer\\n    /// @param amount The amount of purchase token locked for offer\\n    event OfferLockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when a loan offer is unlocked.\\n    /// @param termRepoId A Term Repo id\\n    /// @param offeror The address who submitted offer\\n    /// @param amount The amount of purchase token unlocked for offer\\n    event OfferUnlockedByServicer(\\n        bytes32 termRepoId,\\n        address offeror,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when a loan offer is fulfilled.\\n    /// @param offerId A unique offer id\\n    /// @param offeror The address whose offer is fulfilled\\n    /// @param purchasePrice The purchasePrice of loan offer fulfilled\\n    /// @param repurchasePrice The repurchasePrice of loan offer fulfilled\\n    /// @param repoTokensMinted The amount of Term Repo Tokens minted to offeror\\n    event OfferFulfilled(\\n        bytes32 offerId,\\n        address offeror,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 repoTokensMinted\\n    );\\n\\n    /// @notice Event emitted when a term repo token is redeemed.\\n    /// @param termRepoId A Term Repo id\\n    /// @param redeemer The address who is redeeming term repo tokens\\n    /// @param redemptionAmount The amount of loan offer redeemed by term repo tokens\\n    /// @param redemptionHaircut The haircut applied to redemptions (if any) due to unrecoverable repo exposure\\n    event TermRepoTokensRedeemed(\\n        bytes32 termRepoId,\\n        address redeemer,\\n        uint256 redemptionAmount,\\n        uint256 redemptionHaircut\\n    );\\n\\n    /// @notice Event emitted when a loan is processed to a borrower\\n    /// @param termRepoId A Term Repo id\\n    /// @param bidder The address who is receiving the loan\\n    /// @param purchasePrice The purchasePrice transferred to borrower\\n    /// @param repurchasePrice The repurchasePrice owed by borrower at maturity\\n    /// @param servicingFees The protocol fees paid for loan\\n    event BidFulfilled(\\n        bytes32 termRepoId,\\n        address bidder,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    );\\n\\n    /// @notice Event emitted when a rollover from a previous loan opens a position in this new term\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The borrower who has loan position opened in new term\\n    /// @param purchasePrice The purchasePrice transferred to previous term\\n    /// @param repurchasePrice The repurchasePrice owed by borrower at maturity\\n    /// @param servicingFees The protocol fees paid for loan\\n    event ExposureOpenedOnRolloverNew(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 purchasePrice,\\n        uint256 repurchasePrice,\\n        uint256 servicingFees\\n    );\\n\\n    /// @notice Event emitted when a rollover from a previous loan opens a position in this new term\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The borrower who has loan position opened in new term\\n    /// @param amountRolled The amount of borrower loan collapsed by rollover opening\\n    event ExposureClosedOnRolloverExisting(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amountRolled\\n    );\\n\\n    /// @notice Event emitted when term repo tokens are minted for a loan\\n    /// @param termRepoId A Term Repo id\\n    /// @param minter The address who is opening the loan\\n    /// @param netTokensReceived The amount of Term Repo Tokens received by minter net of servicing fees\\n    /// @param servicingFeeTokens The number of Term Repo Tokens retained by protocol in servicing fees\\n    /// @param repurchasePrice The repurchase exposure opened by minter against Term Repo Token mint\\n    event TermRepoTokenMint(\\n        bytes32 termRepoId,\\n        address minter,\\n        uint256 netTokensReceived,\\n        uint256 servicingFeeTokens,\\n        uint256 repurchasePrice\\n    );\\n\\n    /// @notice Event emitted when a loan is collapsed by burning term repo tokens\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address who is repaying the loan\\n    /// @param amountToClose The amount repaid by borrower\\n    event BurnCollapseExposure(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 amountToClose\\n    );\\n\\n    /// @notice Event emitted when a loan is repaid by borrower\\n    /// @param termRepoId A Term Repo id\\n    /// @param borrower The address who is repaying the loan\\n    /// @param repurchaseAmount The amount repaid by borrower\\n    event RepurchasePaymentSubmitted(\\n        bytes32 termRepoId,\\n        address borrower,\\n        uint256 repurchaseAmount\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITermRepoTokenEvents.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @notice ITermRepoTokenEvents is an interface that defines all events emitted by the Term Repo Token\\ninterface ITermRepoTokenEvents {\\n    /// @notice Event emitted when a Term Repo Servicer is initialized.\\n    /// @param termRepoId term identifier\\n    /// @param termRepoToken   address of initialized term repo token\\n    /// @param redemptionRatio The number of purchase tokens redeemable per unit of Term Repo Token at par\\n    event TermRepoTokenInitialized(\\n        bytes32 termRepoId,\\n        address termRepoToken,\\n        uint256 redemptionRatio\\n    );\\n\\n    /// @notice Event emitted when a Term Repo Token Minting is Paused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenMintingPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Term Repo Token Minting is Unpaused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenMintingUnpaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Term Repo Token Burning is Paused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenBurningPaused(bytes32 termRepoId);\\n\\n    /// @notice Event emitted when a Term Repo Token Burning is Unpaused\\n    /// @param termRepoId A Term Repo id\\n    event TermRepoTokenBurningUnpaused(bytes32 termRepoId);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Collateral.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev Collateral info for price oracle\\nstruct Collateral {\\n    address tokenAddress;\\n    uint256 initialCollateralRatio;\\n    uint256 maintenanceRatio;\\n    uint256 liquidatedDamage;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ExponentialNoError.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.18;\\n\\n// solhint-disable\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint256 constant expScale = 1e18;\\n    uint256 constant doubleScale = 1e36;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    struct Double {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(\\n        Exp memory a,\\n        uint256 scalar\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(\\n        uint256 n,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        uint256 b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint256 b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Exp memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return\\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        uint256 b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint256 a, Double memory b) internal pure returns (uint256) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function fraction(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\\n// solhint-enable\\n\"\r\n    },\r\n    \"contracts/lib/TermAuctionBid.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\n/// @dev TermAuctionBid represents a bid to borrow a specific amount of tokens at a specific interest rate (or better)\\nstruct TermAuctionBid {\\n    /// @dev Unique identifier for this bid\\n    bytes32 id;\\n    /// @dev The address of the bidder\\n    address bidder;\\n    /// @dev Hash of the offered price as a percentage of the initial loaned amount vs amount returned at maturity. This stores 9 decimal places\\n    bytes32 bidPriceHash;\\n    /// @dev Revealed bid price; this is only a valid value if isRevealed is true; this stores 18 decimal places\\n    uint256 bidPriceRevealed;\\n    /// @dev The maximum amount of purchase tokens that can be borrowed\\n    uint256 amount;\\n    /// @dev The amount of collateral tokens initially locked\\n    uint256[] collateralAmounts;\\n    /// @dev The address of the ERC20 purchase token\\n    address purchaseToken;\\n    /// @dev The addresses of the collateral ERC20 tokens in the bid\\n    address[] collateralTokens;\\n    /// @dev A boolean indicating if bid was submitted as rollover from previous term\\n    bool isRollover;\\n    /// @dev The address of term repo servicer whose bid is being rolled over\\n    address rolloverPairOffTermRepoServicer;\\n    /// @dev A boolean that is true if bid has been revealed\\n    bool isRevealed;\\n}\\n\"\r\n    },\r\n    \"contracts/TermPriceConsumerV3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: CC-BY-NC-ND-4.0\\npragma solidity ^0.8.18;\\n\\nimport \\\"./interfaces/ITermPriceOracle.sol\\\";\\nimport \\\"./interfaces/ITermPriceOracleErrors.sol\\\";\\nimport \\\"./interfaces/ITermPriceOracleEvents.sol\\\";\\n\\nimport \\\"./interfaces/ITermEventEmitter.sol\\\";\\n\\nimport \\\"./lib/Collateral.sol\\\";\\nimport \\\"./lib/ExponentialNoError.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/// @author TermLabs\\n/// @title Term Price Consumer V3\\n/// @notice This contract is a centralized price oracle contract that feeds pricing data to all Term Repos\\n/// @dev This contract operates at the protocol level and governs all instances of a Term Repo\\ncontract TermPriceConsumerV3 is\\n    ITermPriceOracle,\\n    ITermPriceOracleErrors,\\n    ITermPriceOracleEvents,\\n    Initializable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    ExponentialNoError\\n{\\n    // ========================================================================\\n    // = Access Role  ======================================================\\n    // ========================================================================\\n\\n    bytes32 public constant AUCTIONEER_ROLE = keccak256(\\\"AUCTIONEER_ROLE\\\");\\n    bytes32 public constant AUCTION_SCHEDULER = keccak256(\\\"TERM_REOPENER_ROLE\\\");\\n    bytes32 public constant TERM_CONTRACT = keccak256(\\\"TERM_CONTRACT\\\");\\n\\n    mapping(address => AggregatorV3Interface) internal priceFeeds;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Intializes with an array of token addresses, followed with an array of Chainlink aggregator addresses\\n    /// @notice https://docs.chain.link/docs/ethereum-addresses/\\n    function initialize() external initializer {\\n        UUPSUpgradeable.__UUPSUpgradeable_init();\\n        AccessControlUpgradeable.__AccessControl_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(AUCTION_SCHEDULER, msg.sender);\\n        _grantRole(AUCTIONEER_ROLE, msg.sender);\\n    }\\n\\n    /// @param token The address of the token to add a price feed for\\n    /// @param tokenPriceAggregator The proxy price aggregator address for token to be added\\n    function addNewTokenPriceFeed(\\n        address token,\\n        address tokenPriceAggregator\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        priceFeeds[token] = AggregatorV3Interface(tokenPriceAggregator);\\n        emit SubscribePriceFeed(token, tokenPriceAggregator);\\n    }\\n\\n    /// @param token The address of the token whose price feed needs to be removed\\n    function removeTokenPriceFeed(\\n        address token\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        delete priceFeeds[token];\\n        emit UnsubscribePriceFeed(token);\\n    }\\n\\n    /// @param termRepoCollateralManager The address of the TermRepoCollateralManager contract\\n    function reOpenToNewTerm(\\n        address termRepoCollateralManager\\n    ) external onlyRole(AUCTION_SCHEDULER) {\\n        _grantRole(TERM_CONTRACT, termRepoCollateralManager);\\n        _grantRole(AUCTIONEER_ROLE, termRepoCollateralManager);\\n    }\\n\\n    /// @param termAuctionBidLocker The address of the TermAuctionBidLocker contract\\n    function reOpenToNewBidLocker(\\n        address termAuctionBidLocker\\n    ) external onlyRole(AUCTIONEER_ROLE) {\\n        _grantRole(TERM_CONTRACT, termAuctionBidLocker);\\n    }\\n\\n    /// @notice A function to return current market value given a token address and an amount\\n    /// @param token The address of the token to query\\n    /// @param amount The amount tokens to value\\n    /// @return The current market value of tokens at the specified amount, in USD\\n    function usdValueOfTokens(\\n        address token,\\n        uint256 amount\\n    ) external view returns (Exp memory) {\\n        if (address(priceFeeds[token]) == address(0)) {\\n            revert NoPriceFeed(token);\\n        }\\n        uint256 latestPrice = uint256(_getLatestPrice(token));\\n        uint8 priceDecimals = _getDecimals(token);\\n\\n        IERC20MetadataUpgradeable tokenInstance = IERC20MetadataUpgradeable(\\n            token\\n        );\\n        uint8 tokenDecimals = tokenInstance.decimals();\\n\\n        return\\n            mul_(\\n                Exp({mantissa: (amount * expScale) / 10 ** tokenDecimals}),\\n                Exp({mantissa: (latestPrice * expScale) / 10 ** priceDecimals})\\n            );\\n    }\\n\\n    /// @return The latest price from price aggregator\\n    function _getLatestPrice(address token) internal view returns (int256) {\\n        (\\n            ,\\n            // uint80 roundID\\n            int256 price, // uint startedAt // //uint timeStamp// //uint80 answeredInRound//\\n            ,\\n            ,\\n\\n        ) = priceFeeds[token].latestRoundData();\\n        return price;\\n    }\\n\\n    /// @return The decimal places in price feed\\n    function _getDecimals(address token) internal view returns (uint8) {\\n        return priceFeeds[token].decimals();\\n    }\\n\\n    // ========================================================================\\n    // = Upgrades =============================================================\\n    // ========================================================================\\n\\n    // solhint-disable no-empty-blocks\\n    /// @dev required override by the OpenZeppelin UUPS module\\n    function _authorizeUpgrade(\\n        address\\n    ) internal view override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    // solhint-enable no-empty-blocks\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"NoPriceFeed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenPriceAggregator\",\"type\":\"address\"}],\"name\":\"SubscribePriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsubscribePriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTIONEER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_SCHEDULER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TERM_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPriceAggregator\",\"type\":\"address\"}],\"name\":\"addNewTokenPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"termAuctionBidLocker\",\"type\":\"address\"}],\"name\":\"reOpenToNewBidLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"termRepoCollateralManager\",\"type\":\"address\"}],\"name\":\"reOpenToNewTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTokenPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdValueOfTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct ExponentialNoError.Exp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TermPriceConsumerV3", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}