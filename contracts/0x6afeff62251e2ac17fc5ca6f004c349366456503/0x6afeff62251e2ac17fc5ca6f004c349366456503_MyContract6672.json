{"SourceCode": "//-------------DEPENDENCIES--------------------------//\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if account is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, isContract will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on isContract to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's transfer: sends amount wei to\r\n     * recipient, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by transfer, making them unable to receive funds via\r\n     * transfer. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to recipient, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level call. A\r\n     * plain call is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If target reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[abi.decode].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - target must be a contract.\r\n     * - calling target with data must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall], but with\r\n     * errorMessage as a fallback revert reason when target reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but also transferring value wei to target.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least value.\r\n     * - the called Solidity function must be payable.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[functionCallWithValue], but\r\n     * with errorMessage as a fallback revert reason when target reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by operator from from, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with IERC721.onERC721Received.selector.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * interfaceId. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * \r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when tokenId token is transferred from from to to.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when owner enables approved to manage the tokenId token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when owner enables or disables (approved) operator to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in owner's account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the tokenId token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - tokenId must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers tokenId token from from to to, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - from cannot be the zero address.\r\n     * - to cannot be the zero address.\r\n     * - tokenId token must exist and be owned by from.\r\n     * - If the caller is not from, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers tokenId token from from to to.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - from cannot be the zero address.\r\n     * - to cannot be the zero address.\r\n     * - tokenId token must be owned by from.\r\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to to to transfer tokenId token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - tokenId must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for tokenId token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - tokenId must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove operator as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The operator cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the operator is allowed to manage all of the assets of owner.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers tokenId token from from to to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - from cannot be the zero address.\r\n     * - to cannot be the zero address.\r\n     * - tokenId token must exist and be owned by from.\r\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by owner at a given index of its token list.\r\n     * Use along with {balanceOf} to enumerate all of owner's tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given index of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for tokenId token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from ReentrancyGuard will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single nonReentrant guard, functions marked as\r\n * nonReentrant may not call one another. This can be worked around by making\r\n * those functions private, and then adding external nonReentrant entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a nonReentrant function from another nonReentrant\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the nonReentrant function external, and making it call a\r\n     * private function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * onlyOwner, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * onlyOwner functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n//-------------END DEPENDENCIES------------------------//\r\n\r\n\r\n  \r\n// Rampp Contracts v2.1 (Teams.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* Teams is a contract implementation to extend upon Ownable that allows multiple controllers\r\n* of a single contract to modify specific mint settings but not have overall ownership of the contract.\r\n* This will easily allow cross-collaboration via Mintplex.xyz.\r\n**/\r\nabstract contract Teams is Ownable{\r\n  mapping (address => bool) internal team;\r\n\r\n  /**\r\n  * @dev Adds an address to the team. Allows them to execute protected functions\r\n  * @param _address the ETH address to add, cannot be 0x and cannot be in team already\r\n  **/\r\n  function addToTeam(address _address) public onlyOwner {\r\n    require(_address != address(0), \"Invalid address\");\r\n    require(!inTeam(_address), \"This address is already in your team.\");\r\n  \r\n    team[_address] = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Removes an address to the team.\r\n  * @param _address the ETH address to remove, cannot be 0x and must be in team\r\n  **/\r\n  function removeFromTeam(address _address) public onlyOwner {\r\n    require(_address != address(0), \"Invalid address\");\r\n    require(inTeam(_address), \"This address is not in your team currently.\");\r\n  \r\n    team[_address] = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Check if an address is valid and active in the team\r\n  * @param _address ETH address to check for truthiness\r\n  **/\r\n  function inTeam(address _address)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_address != address(0), \"Invalid address to check.\");\r\n    return team[_address] == true;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner or team member.\r\n  */\r\n  modifier onlyTeamOrOwner() {\r\n    bool _isOwner = owner() == _msgSender();\r\n    bool _isTeam = inTeam(_msgSender());\r\n    require(_isOwner || _isTeam, \"Team: caller is not the owner or in Team.\");\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n  \r\n  pragma solidity ^0.8.0;\r\n\r\n  /**\r\n  * @dev These functions deal with verification of Merkle Trees proofs.\r\n  *\r\n  * The proofs can be generated using the JavaScript library\r\n  * https://github.com/miguelmota/merkletreejs[merkletreejs].\r\n  * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\r\n  *\r\n  *\r\n  * WARNING: You should avoid using leaf values that are 64 bytes long prior to\r\n  * hashing, or use a hash function other than keccak256 for hashing leaves.\r\n  * This is because the concatenation of a sorted pair of internal nodes in\r\n  * the merkle tree could be reinterpreted as a leaf value.\r\n  */\r\n  library MerkleProof {\r\n      /**\r\n      * @dev Returns true if a 'leaf' can be proved to be a part of a Merkle tree\r\n      * defined by 'root'. For this, a 'proof' must be provided, containing\r\n      * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n      * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n      */\r\n      function verify(\r\n          bytes32[] memory proof,\r\n          bytes32 root,\r\n          bytes32 leaf\r\n      ) internal pure returns (bool) {\r\n          return processProof(proof, leaf) == root;\r\n      }\r\n\r\n      /**\r\n      * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\r\n      * from 'leaf' using 'proof'. A 'proof' is valid if and only if the rebuilt\r\n      * hash matches the root of the tree. When processing the proof, the pairs\r\n      * of leafs & pre-images are assumed to be sorted.\r\n      *\r\n      * _Available since v4.4._\r\n      */\r\n      function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\r\n          bytes32 computedHash = leaf;\r\n          for (uint256 i = 0; i < proof.length; i++) {\r\n              bytes32 proofElement = proof[i];\r\n              if (computedHash <= proofElement) {\r\n                  // Hash(current computed hash + current element of the proof)\r\n                  computedHash = _efficientHash(computedHash, proofElement);\r\n              } else {\r\n                  // Hash(current element of the proof + current computed hash)\r\n                  computedHash = _efficientHash(proofElement, computedHash);\r\n              }\r\n          }\r\n          return computedHash;\r\n      }\r\n\r\n      function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\r\n          assembly {\r\n              mstore(0x00, a)\r\n              mstore(0x20, b)\r\n              value := keccak256(0x00, 0x40)\r\n          }\r\n      }\r\n  }\r\n\r\n\r\n  // File: Allowlist.sol\r\n\r\n  pragma solidity ^0.8.0;\r\n\r\n  abstract contract Allowlist is Teams {\r\n    bytes32 public merkleRoot;\r\n    bool public onlyAllowlistMode = false;\r\n\r\n    /**\r\n     * @dev Update merkle root to reflect changes in Allowlist\r\n     * @param _newMerkleRoot new merkle root to reflect most recent Allowlist\r\n     */\r\n    function updateMerkleRoot(bytes32 _newMerkleRoot) public onlyTeamOrOwner {\r\n      require(_newMerkleRoot != merkleRoot, \"Merkle root will be unchanged!\");\r\n      merkleRoot = _newMerkleRoot;\r\n    }\r\n\r\n    /**\r\n     * @dev Check the proof of an address if valid for merkle root\r\n     * @param _to address to check for proof\r\n     * @param _merkleProof Proof of the address to validate against root and leaf\r\n     */\r\n    function isAllowlisted(address _to, bytes32[] calldata _merkleProof) public view returns(bool) {\r\n      require(merkleRoot != 0, \"Merkle root is not set!\");\r\n      bytes32 leaf = keccak256(abi.encodePacked(_to));\r\n\r\n      return MerkleProof.verify(_merkleProof, merkleRoot, leaf);\r\n    }\r\n\r\n    \r\n    function enableAllowlistOnlyMode() public onlyTeamOrOwner {\r\n      onlyAllowlistMode = true;\r\n    }\r\n\r\n    function disableAllowlistOnlyMode() public onlyTeamOrOwner {\r\n        onlyAllowlistMode = false;\r\n    }\r\n  }\r\n  \r\n  \r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\r\n * \r\n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\r\n *\r\n * Does not support burning tokens to address(0).\r\n */\r\ncontract ERC721A is\r\n  Context,\r\n  ERC165,\r\n  IERC721,\r\n  IERC721Metadata,\r\n  IERC721Enumerable,\r\n  Teams\r\n{\r\n  using Address for address;\r\n  using Strings for uint256;\r\n\r\n  struct TokenOwnership {\r\n    address addr;\r\n    uint64 startTimestamp;\r\n  }\r\n\r\n  struct AddressData {\r\n    uint128 balance;\r\n    uint128 numberMinted;\r\n  }\r\n\r\n  uint256 private currentIndex;\r\n\r\n  uint256 public immutable collectionSize;\r\n  uint256 public maxBatchSize;\r\n\r\n  // Token name\r\n  string private _name;\r\n\r\n  // Token symbol\r\n  string private _symbol;\r\n\r\n  // Mapping from token ID to ownership details\r\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n  mapping(uint256 => TokenOwnership) private _ownerships;\r\n\r\n  // Mapping owner address to address data\r\n  mapping(address => AddressData) private _addressData;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 => address) private _tokenApprovals;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n  /* @dev Mapping of restricted operator approvals set by contract Owner\r\n  * This serves as an optional addition to ERC-721 so\r\n  * that the contract owner can elect to prevent specific addresses/contracts\r\n  * from being marked as the approver for a token. The reason for this\r\n  * is that some projects may want to retain control of where their tokens can/can not be listed\r\n  * either due to ethics, loyalty, or wanting trades to only occur on their personal marketplace.\r\n  * By default, there are no restrictions. The contract owner must deliberatly block an address \r\n  */\r\n  mapping(address => bool) public restrictedApprovalAddresses;\r\n\r\n  /**\r\n   * @dev\r\n   * maxBatchSize refers to how much a minter can mint at a time.\r\n   * collectionSize_ refers to how many tokens are in the collection.\r\n   */\r\n  constructor(\r\n    string memory name_,\r\n    string memory symbol_,\r\n    uint256 maxBatchSize_,\r\n    uint256 collectionSize_\r\n  ) {\r\n    require(\r\n      collectionSize_ > 0,\r\n      \"ERC721A: collection must have a nonzero supply\"\r\n    );\r\n    require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\r\n    _name = name_;\r\n    _symbol = symbol_;\r\n    maxBatchSize = maxBatchSize_;\r\n    collectionSize = collectionSize_;\r\n    currentIndex = _startTokenId();\r\n  }\r\n\r\n  /**\r\n  * To change the starting tokenId, please override this function.\r\n  */\r\n  function _startTokenId() internal view virtual returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-totalSupply}.\r\n   */\r\n  function totalSupply() public view override returns (uint256) {\r\n    return _totalMinted();\r\n  }\r\n\r\n  function currentTokenId() public view returns (uint256) {\r\n    return _totalMinted();\r\n  }\r\n\r\n  function getNextTokenId() public view returns (uint256) {\r\n      return _totalMinted() + 1;\r\n  }\r\n\r\n  /**\r\n  * Returns the total amount of tokens minted in the contract.\r\n  */\r\n  function _totalMinted() internal view returns (uint256) {\r\n    unchecked {\r\n      return currentIndex - _startTokenId();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenByIndex}.\r\n   */\r\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n    require(index < totalSupply(), \"ERC721A: global index out of bounds\");\r\n    return index + _startTokenId();\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\r\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n   */\r\n  function tokenOfOwnerByIndex(address owner, uint256 index)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n    uint256 numMintedSoFar = currentIndex;\r\n    uint256 tokenIdsIdx = 0;\r\n    address currOwnershipAddr = address(0);\r\n    for (uint256 i = _startTokenId(); i < numMintedSoFar; i++) {\r\n      TokenOwnership memory ownership = _ownerships[i];\r\n      if (ownership.addr != address(0)) {\r\n        currOwnershipAddr = ownership.addr;\r\n      }\r\n      if (currOwnershipAddr == owner) {\r\n        if (tokenIdsIdx == index) {\r\n          return i;\r\n        }\r\n        tokenIdsIdx++;\r\n      }\r\n    }\r\n    revert(\"ERC721A: unable to get token of owner by index\");\r\n  }\r\n\r\n  function tokensOfOwner(address owner)\r\n    public\r\n    view\r\n    override \r\n    returns (uint256[] memory)\r\n  {\r\n    uint256[] memory tokenIds = new uint256[](balanceOf(owner));\r\n    uint256 numMintedSoFar = currentIndex;\r\n    uint256 tokenIdsIdx = 0;\r\n    address currOwnershipAddr = address(0);\r\n    for (uint256 i = _startTokenId(); i < numMintedSoFar; i++) {\r\n      TokenOwnership memory ownership = _ownerships[i];\r\n      if (ownership.addr != address(0)) {\r\n        currOwnershipAddr = ownership.addr;\r\n      }\r\n      if (currOwnershipAddr == owner) {\r\n        tokenIds[tokenIdsIdx] = i;\r\n        tokenIdsIdx++;\r\n        if (tokenIdsIdx == balanceOf(owner)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return tokenIds;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC165-supportsInterface}.\r\n   */\r\n  function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n  {\r\n    return\r\n      interfaceId == type(IERC721).interfaceId ||\r\n      interfaceId == type(IERC721Metadata).interfaceId ||\r\n      interfaceId == type(IERC721Enumerable).interfaceId ||\r\n      super.supportsInterface(interfaceId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-balanceOf}.\r\n   */\r\n  function balanceOf(address owner) public view override returns (uint256) {\r\n    require(owner != address(0), \"ERC721A: balance query for the zero address\");\r\n    return uint256(_addressData[owner].balance);\r\n  }\r\n\r\n  function _numberMinted(address owner) internal view returns (uint256) {\r\n    require(\r\n      owner != address(0),\r\n      \"ERC721A: number minted query for the zero address\"\r\n    );\r\n    return uint256(_addressData[owner].numberMinted);\r\n  }\r\n\r\n  function ownershipOf(uint256 tokenId)\r\n    internal\r\n    view\r\n    returns (TokenOwnership memory)\r\n  {\r\n    uint256 curr = tokenId;\r\n\r\n    unchecked {\r\n        if (_startTokenId() <= curr && curr < currentIndex) {\r\n            TokenOwnership memory ownership = _ownerships[curr];\r\n            if (ownership.addr != address(0)) {\r\n                return ownership;\r\n            }\r\n\r\n            // Invariant:\r\n            // There will always be an ownership that has an address and is not burned\r\n            // before an ownership that does not have an address and is not burned.\r\n            // Hence, curr will not underflow.\r\n            while (true) {\r\n                curr--;\r\n                ownership = _ownerships[curr];\r\n                if (ownership.addr != address(0)) {\r\n                    return ownership;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    revert(\"ERC721A: unable to determine the owner of token\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-ownerOf}.\r\n   */\r\n  function ownerOf(uint256 tokenId) public view override returns (address) {\r\n    return ownershipOf(tokenId).addr;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-name}.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-symbol}.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721Metadata-tokenURI}.\r\n   */\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    string memory baseURI = _baseURI();\r\n    string memory boxURI = _boxURI();\r\n    return\r\n      bytes(baseURI).length > 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n        : boxURI;\r\n  }\r\n\r\n  /**\r\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n   * token will be the concatenation of the baseURI and the tokenId. Empty\r\n   * by default, can be overriden in child contracts.\r\n   */\r\n  function _baseURI() internal view virtual returns (string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  function _boxURI() internal view virtual returns(string memory) {\r\n    return \"\";\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the value for an address to be in the restricted approval address pool.\r\n   * Setting an address to true will disable token owners from being able to mark the address\r\n   * for approval for trading. This would be used in theory to prevent token owners from listing\r\n   * on specific marketplaces or protcols. Only modifible by the contract owner/team.\r\n   * @param _address the marketplace/user to modify restriction status of\r\n   * @param _isRestricted restriction status of the _address to be set. true => Restricted, false => Open\r\n   */\r\n  function setApprovalRestriction(address _address, bool _isRestricted) public onlyTeamOrOwner {\r\n    restrictedApprovalAddresses[_address] = _isRestricted;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-approve}.\r\n   */\r\n  function approve(address to, uint256 tokenId) public override {\r\n    address owner = ERC721A.ownerOf(tokenId);\r\n    require(to != owner, \"ERC721A: approval to current owner\");\r\n    require(restrictedApprovalAddresses[to] == false, \"ERC721RestrictedApproval: Address to approve has been restricted by contract owner and is not allowed to be marked for approval\");\r\n\r\n    require(\r\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n      \"ERC721A: approve caller is not owner nor approved for all\"\r\n    );\r\n\r\n    _approve(to, tokenId, owner);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-getApproved}.\r\n   */\r\n  function getApproved(uint256 tokenId) public view override returns (address) {\r\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\r\n\r\n    return _tokenApprovals[tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-setApprovalForAll}.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) public override {\r\n    require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n    require(restrictedApprovalAddresses[operator] == false, \"ERC721RestrictedApproval: Operator address has been restricted by contract owner and is not allowed to be marked for approval\");\r\n\r\n    _operatorApprovals[_msgSender()][operator] = approved;\r\n    emit ApprovalForAll(_msgSender(), operator, approved);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-isApprovedForAll}.\r\n   */\r\n  function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    return _operatorApprovals[owner][operator];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-transferFrom}.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public override {\r\n    _transfer(from, to, tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) public override {\r\n    safeTransferFrom(from, to, tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC721-safeTransferFrom}.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) public override {\r\n    _transfer(from, to, tokenId);\r\n    require(\r\n      _checkOnERC721Received(from, to, tokenId, _data),\r\n      \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether tokenId exists.\r\n   *\r\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n   *\r\n   * Tokens start existing when they are minted (_mint),\r\n   */\r\n  function _exists(uint256 tokenId) internal view returns (bool) {\r\n    return _startTokenId() <= tokenId && tokenId < currentIndex;\r\n  }\r\n\r\n  function _safeMint(address to, uint256 quantity, bool isAdminMint) internal {\r\n    _safeMint(to, quantity, isAdminMint, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Mints quantity tokens and transfers them to to.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - there must be quantity tokens remaining unminted in the total collection.\r\n   * - to cannot be the zero address.\r\n   * - quantity cannot be larger than the max batch size.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _safeMint(\r\n    address to,\r\n    uint256 quantity,\r\n    bool isAdminMint,\r\n    bytes memory _data\r\n  ) internal {\r\n    uint256 startTokenId = currentIndex;\r\n    require(to != address(0), \"ERC721A: mint to the zero address\");\r\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\r\n    require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n\r\n    // For admin mints we do not want to enforce the maxBatchSize limit\r\n    if (isAdminMint == false) {\r\n        require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n    }\r\n\r\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n    AddressData memory addressData = _addressData[to];\r\n    _addressData[to] = AddressData(\r\n      addressData.balance + uint128(quantity),\r\n      addressData.numberMinted + (isAdminMint ? 0 : uint128(quantity))\r\n    );\r\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    uint256 updatedIndex = startTokenId;\r\n\r\n    for (uint256 i = 0; i < quantity; i++) {\r\n      emit Transfer(address(0), to, updatedIndex);\r\n      require(\r\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n        \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n      );\r\n      updatedIndex++;\r\n    }\r\n\r\n    currentIndex = updatedIndex;\r\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers tokenId from from to to.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - to cannot be the zero address.\r\n   * - tokenId token must be owned by from.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId\r\n  ) private {\r\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n      getApproved(tokenId) == _msgSender() ||\r\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n    require(\r\n      isApprovedOrOwner,\r\n      \"ERC721A: transfer caller is not owner nor approved\"\r\n    );\r\n\r\n    require(\r\n      prevOwnership.addr == from,\r\n      \"ERC721A: transfer from incorrect owner\"\r\n    );\r\n    require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n    _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n    // Clear approvals from the previous owner\r\n    _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n    _addressData[from].balance -= 1;\r\n    _addressData[to].balance += 1;\r\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n    uint256 nextTokenId = tokenId + 1;\r\n    if (_ownerships[nextTokenId].addr == address(0)) {\r\n      if (_exists(nextTokenId)) {\r\n        _ownerships[nextTokenId] = TokenOwnership(\r\n          prevOwnership.addr,\r\n          prevOwnership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, tokenId);\r\n    _afterTokenTransfers(from, to, tokenId, 1);\r\n  }\r\n\r\n  /**\r\n   * @dev Approve to to operate on tokenId\r\n   *\r\n   * Emits a {Approval} event.\r\n   */\r\n  function _approve(\r\n    address to,\r\n    uint256 tokenId,\r\n    address owner\r\n  ) private {\r\n    _tokenApprovals[tokenId] = to;\r\n    emit Approval(owner, to, tokenId);\r\n  }\r\n\r\n  uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n  /**\r\n   * @dev Explicitly set owners to eliminate loops in future calls of ownerOf().\r\n   */\r\n  function _setOwnersExplicit(uint256 quantity) internal {\r\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n    require(quantity > 0, \"quantity must be nonzero\");\r\n    if (currentIndex == _startTokenId()) revert('No Tokens Minted Yet');\r\n\r\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n    if (endIndex > collectionSize - 1) {\r\n      endIndex = collectionSize - 1;\r\n    }\r\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n    require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n      if (_ownerships[i].addr == address(0)) {\r\n        TokenOwnership memory ownership = ownershipOf(i);\r\n        _ownerships[i] = TokenOwnership(\r\n          ownership.addr,\r\n          ownership.startTimestamp\r\n        );\r\n      }\r\n    }\r\n    nextOwnerToExplicitlySet = endIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n   * The call is not executed if the target address is not a contract.\r\n   *\r\n   * @param from address representing the previous owner of the given token ID\r\n   * @param to target address that will receive the tokens\r\n   * @param tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return bool whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkOnERC721Received(\r\n    address from,\r\n    address to,\r\n    uint256 tokenId,\r\n    bytes memory _data\r\n  ) private returns (bool) {\r\n    if (to.isContract()) {\r\n      try\r\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n      returns (bytes4 retval) {\r\n        return retval == IERC721Receiver(to).onERC721Received.selector;\r\n      } catch (bytes memory reason) {\r\n        if (reason.length == 0) {\r\n          revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\r\n        } else {\r\n          assembly {\r\n            revert(add(32, reason), mload(reason))\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - When from and to are both non-zero, from's tokenId will be\r\n   * transferred to to.\r\n   * - When from is zero, tokenId will be minted for to.\r\n   */\r\n  function _beforeTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n   * minting.\r\n   *\r\n   * startTokenId - the first token id to be transferred\r\n   * quantity - the amount to be transferred\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when from and to are both non-zero.\r\n   * - from and to are never both zero.\r\n   */\r\n  function _afterTokenTransfers(\r\n    address from,\r\n    address to,\r\n    uint256 startTokenId,\r\n    uint256 quantity\r\n  ) internal virtual {}\r\n}\r\n\r\n\r\n\r\n  \r\n// abstract contract Ramppable {\r\n//   address public RAMPPADDRESS = 0xc1b6b52BEe3F74e943959357C669255D39D95bDe; // XXX: \u6536\u53d6\u989d\u5916\u624b\u7eed\u8d39\u5730\u5740\uff0c\u5df2\u7981\u7528\r\n\r\n//   modifier isRampp() {\r\n//       require(msg.sender == RAMPPADDRESS, \"Ownable: caller is not RAMPP\");\r\n//       _;\r\n//   }\r\n// }\r\n\r\n\r\n  \r\n/** TimedDrop.sol\r\n* This feature will allow the owner to be able to set timed drops for both the public and allowlist mint (if applicable).\r\n* It is bound by the block timestamp. The owner is able to determine if the feature should be used as all \r\n* with the \"enforcePublicDropTime\" and \"enforceAllowlistDropTime\" variables. If the feature is disabled the implmented\r\n* *DropTimePassed() functions will always return true. Otherwise calculation is done to check if time has passed.\r\n*/\r\nabstract contract TimedDrop is Teams {\r\n  bool public enforcePublicDropTime = false; // \u662f\u5426\u9650\u5236\u516c\u5f00\u552e\u5356\u65f6\u95f4\r\n  uint256 public publicDropTime = 1694768400; // 1694768400 is 2023-09-15 17:00:00\r\n  \r\n  /**\r\n  * @dev Allow the contract owner to set the public time to mint.\r\n  * @param _newDropTime timestamp since Epoch in seconds you want public drop to happen\r\n  */\r\n  function setPublicDropTime(uint256 _newDropTime) public onlyTeamOrOwner {\r\n    require(_newDropTime > block.timestamp, \"Drop date must be in future! Otherwise call disablePublicDropTime!\");\r\n    publicDropTime = _newDropTime;\r\n  }\r\n\r\n  function usePublicDropTime() public onlyTeamOrOwner {\r\n    enforcePublicDropTime = true;\r\n  }\r\n\r\n  function disablePublicDropTime() public onlyTeamOrOwner {\r\n    enforcePublicDropTime = false;\r\n  }\r\n\r\n  /**\r\n  * @dev determine if the public droptime has passed.\r\n  * if the feature is disabled then assume the time has passed.\r\n  */\r\n  function publicDropTimePassed() public view returns(bool) {\r\n    if(enforcePublicDropTime == false) {\r\n      return true;\r\n    }\r\n    return block.timestamp >= publicDropTime;\r\n  }\r\n  \r\n  // Allowlist implementation of the Timed Drop feature\r\n  bool public enforceAllowlistDropTime = false; // TODO: \u662f\u5426\u5f00\u542f\u767d\u540d\u5355\r\n  uint256 public allowlistDropTime = 1663225200; // TODO: unix timestamp seconds\r\n\r\n  /**\r\n  * @dev Allow the contract owner to set the allowlist time to mint.\r\n  * @param _newDropTime timestamp since Epoch in seconds you want public drop to happen\r\n  */\r\n  function setAllowlistDropTime(uint256 _newDropTime) public onlyTeamOrOwner {\r\n    require(_newDropTime > block.timestamp, \"Drop date must be in future! Otherwise call disableAllowlistDropTime!\");\r\n    allowlistDropTime = _newDropTime;\r\n  }\r\n\r\n  function useAllowlistDropTime() public onlyTeamOrOwner {\r\n    enforceAllowlistDropTime = true;\r\n  }\r\n\r\n  function disableAllowlistDropTime() public onlyTeamOrOwner {\r\n    enforceAllowlistDropTime = false;\r\n  }\r\n\r\n  function allowlistDropTimePassed() public view returns(bool) {\r\n    if(enforceAllowlistDropTime == false) {\r\n      return true;\r\n    }\r\n\r\n    return block.timestamp >= allowlistDropTime;\r\n  }\r\n}\r\n\r\n  \r\ninterface IERC20 {\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address _to, uint256 _amount) external returns (bool);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: WithdrawableV2\r\n// This abstract allows the contract to be able to mint and ingest ERC-20 payments for mints.\r\n// ERC-20 Payouts are limited to a single payout address. This feature \r\n// will charge a small flat fee in native currency that is not subject to regular rev sharing.\r\n// This contract also covers the normal functionality of accepting native base currency rev-sharing\r\nabstract contract WithdrawableV2 is Teams { // Ramppable\r\n  struct acceptedERC20 {\r\n    bool isActive;\r\n    uint256 chargeAmount;\r\n  }\r\n\r\n  mapping(address => acceptedERC20) private allowedTokenContracts;\r\n  address[] public payableAddresses = [0xc1b6b52BEe3F74e943959357C669255D39D95bDe]; // \u63d0\u73b0\u5730\u5740\r\n  // address[] public surchargePayableAddresses = [RAMPPADDRESS];\r\n  address public erc20Payable = 0xc1b6b52BEe3F74e943959357C669255D39D95bDe; // ERC20\u63d0\u73b0\u5730\u5740\r\n  uint256[] public payableFees = [100]; // \u63d0\u73b0\u5730\u5740\u5206\u6210\u6bd4\u4f8b\r\n  // uint256[] public surchargePayableFees = [100];\r\n  uint256 public payableAddressCount = 1; // \u63d0\u73b0\u5730\u5740\u6570\u91cf\r\n  // uint256 public surchargePayableAddressCount = 0; // XXX: ERC20 mint\u7684 \u624b\u7eed\u8d39\u63d0\u73b0\u5730\u5740\u6570\u91cf\uff0c\u5df2\u7981\u7528\r\n  // uint256 public ramppSurchargeBalance = 0 ether;\r\n  // uint256 public ramppSurchargeFee = 0 ether; // XXX: \u4f7f\u7528ERC20 mint\u7684 \u624b\u7eed\u8d39\uff0c\u5df2\u7981\u7528\r\n  bool public onlyERC20MintingMode = false;\r\n  \r\n\r\n  /**\r\n  * @dev Calculates the true payable balance of the contract as the\r\n  * value on contract may be from ERC-20 mint surcharges and not \r\n  * public mint charges - which are not eligable for rev share & user withdrawl\r\n  */\r\n  function calcAvailableBalance() public view returns(uint256) {\r\n    return address(this).balance; // - ramppSurchargeBalance;\r\n  }\r\n\r\n  function withdrawAll() public onlyTeamOrOwner {\r\n      require(calcAvailableBalance() > 0);\r\n      _withdrawAll();\r\n  }\r\n  \r\n  // function withdrawAllRampp() public isRampp {\r\n  //     require(calcAvailableBalance() > 0);\r\n  //     _withdrawAll();\r\n  // }\r\n\r\n  function _withdrawAll() private {\r\n      uint256 balance = calcAvailableBalance();\r\n      \r\n      for(uint i=0; i < payableAddressCount; i++ ) {\r\n          _widthdraw(\r\n              payableAddresses[i],\r\n              (balance * payableFees[i]) / 100\r\n          );\r\n      }\r\n  }\r\n  \r\n  function _widthdraw(address _address, uint256 _amount) private {\r\n      (bool success, ) = _address.call{value: _amount}(\"\");\r\n      require(success, \"Transfer failed.\");\r\n  }\r\n\r\n  /**\r\n  * @dev This function is similiar to the regular withdraw but operates only on the\r\n  * balance that is available to surcharge payout addresses. This would be Rampp + partners\r\n  **/\r\n  // function _withdrawAllSurcharges() private {\r\n  //   uint256 balance = ramppSurchargeBalance;\r\n  //   if(balance == 0) { return; }\r\n    \r\n  //   for(uint i=0; i < surchargePayableAddressCount; i++ ) {\r\n  //       _widthdraw(\r\n  //           surchargePayableAddresses[i],\r\n  //           (balance * surchargePayableFees[i]) / 100\r\n  //       );\r\n  //   }\r\n  //   ramppSurchargeBalance = 0 ether;\r\n  // }\r\n\r\n  /**\r\n  * @dev Allow contract owner to withdraw ERC-20 balance from contract\r\n  * in the event ERC-20 tokens are paid to the contract for mints. This will\r\n  * send the tokens to the payout as well as payout the surcharge fee to Rampp\r\n  * @param _tokenContract contract of ERC-20 token to withdraw\r\n  * @param _amountToWithdraw balance to withdraw according to balanceOf of ERC-20 token in wei\r\n  */\r\n  function withdrawERC20(address _tokenContract, uint256 _amountToWithdraw) public onlyTeamOrOwner {\r\n    require(_amountToWithdraw > 0);\r\n    IERC20 tokenContract = IERC20(_tokenContract);\r\n    require(tokenContract.balanceOf(address(this)) >= _amountToWithdraw, \"WithdrawV2: Contract does not own enough tokens\");\r\n    tokenContract.transfer(erc20Payable, _amountToWithdraw); // Payout ERC-20 tokens to recipient\r\n    // _withdrawAllSurcharges(); // XXX: \u7981\u7528 ERC20\u624b\u7eed\u8d39\u63d0\u73b0\r\n  }\r\n\r\n  function withdrawERC20All(address _tokenContract) public onlyTeamOrOwner {\r\n    IERC20 tokenContract = IERC20(_tokenContract);\r\n    uint256 _amountToWithdraw = tokenContract.balanceOf(address(this));\r\n    tokenContract.transfer(erc20Payable, _amountToWithdraw); // Payout ERC-20 tokens to recipient\r\n  }\r\n\r\n  /**\r\n  * @dev Allow Rampp to be able to withdraw only its ERC-20 payment surcharges from the contract.\r\n  */\r\n  // function withdrawRamppSurcharges() public isRampp {\r\n  //   require(ramppSurchargeBalance > 0, \"WithdrawableV2: No Rampp surcharges in balance.\");\r\n  //   _withdrawAllSurcharges();\r\n  // }\r\n\r\n   /**\r\n  * @dev Helper function to increment Rampp surcharge balance when ERC-20 payment is made.\r\n  */\r\n  // function addSurcharge() internal {\r\n  //   ramppSurchargeBalance += ramppSurchargeFee;\r\n  // }\r\n  \r\n  /**\r\n  * @dev Helper function to enforce Rampp surcharge fee when ERC-20 mint is made.\r\n  */\r\n  // function hasSurcharge() internal returns(bool) {\r\n  //   return msg.value == ramppSurchargeFee;\r\n  // }\r\n\r\n  /**\r\n  * @dev Set surcharge fee for using ERC-20 payments on contract\r\n  * @param _newSurcharge is the new surcharge value of native currency in wei to facilitate ERC-20 payments\r\n  */\r\n  // function setRamppSurcharge(uint256 _newSurcharge) public isRampp {\r\n  //   ramppSurchargeFee = _newSurcharge;\r\n  // }\r\n\r\n  /**\r\n  * @dev check if an ERC-20 contract is a valid payable contract for executing a mint.\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function isApprovedForERC20Payments(address _erc20TokenContract) public view returns(bool) {\r\n    return allowedTokenContracts[_erc20TokenContract].isActive == true;\r\n  }\r\n\r\n  /**\r\n  * @dev get the value of tokens to transfer for user of an ERC-20\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function chargeAmountForERC20(address _erc20TokenContract) public view returns(uint256) {\r\n    require(isApprovedForERC20Payments(_erc20TokenContract), \"This ERC-20 contract is not approved to make payments on this contract!\");\r\n    return allowedTokenContracts[_erc20TokenContract].chargeAmount;\r\n  }\r\n\r\n  /**\r\n  * @dev Explicity sets and ERC-20 contract as an allowed payment method for minting\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  * @param _isActive default status of if contract should be allowed to accept payments\r\n  * @param _chargeAmountInTokens fee (in tokens) to charge for mints for this specific ERC-20 token\r\n  */\r\n  function addOrUpdateERC20ContractAsPayment(address _erc20TokenContract, bool _isActive, uint256 _chargeAmountInTokens) public onlyTeamOrOwner {\r\n    allowedTokenContracts[_erc20TokenContract].isActive = _isActive;\r\n    allowedTokenContracts[_erc20TokenContract].chargeAmount = _chargeAmountInTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Add an ERC-20 contract as being a valid payment method. If passed a contract which has not been added\r\n  * it will assume the default value of zero. This should not be used to create new payment tokens.\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function enableERC20ContractAsPayment(address _erc20TokenContract) public onlyTeamOrOwner {\r\n    allowedTokenContracts[_erc20TokenContract].isActive = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Disable an ERC-20 contract as being a valid payment method. If passed a contract which has not been added\r\n  * it will assume the default value of zero. This should not be used to create new payment tokens.\r\n  * @param _erc20TokenContract address of ERC-20 contract in question\r\n  */\r\n  function disableERC20ContractAsPayment(address _erc20TokenContract) public onlyTeamOrOwner {\r\n    allowedTokenContracts[_erc20TokenContract].isActive = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Enable only ERC-20 payments for minting on this contract\r\n  */\r\n  function enableERC20OnlyMinting() public onlyTeamOrOwner {\r\n    onlyERC20MintingMode = true;\r\n  }\r\n\r\n  /**\r\n  * @dev Disable only ERC-20 payments for minting on this contract\r\n  */\r\n  function disableERC20OnlyMinting() public onlyTeamOrOwner {\r\n    onlyERC20MintingMode = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Set the payout of the ERC-20 token payout to a specific address\r\n  * @param _newErc20Payable new payout addresses of ERC-20 tokens\r\n  */\r\n  function setERC20PayableAddress(address _newErc20Payable) public onlyTeamOrOwner {\r\n    require(_newErc20Payable != address(0), \"WithdrawableV2: new ERC-20 payout cannot be the zero address\");\r\n    require(_newErc20Payable != erc20Payable, \"WithdrawableV2: new ERC-20 payout is same as current payout\");\r\n    erc20Payable = _newErc20Payable;\r\n  }\r\n\r\n  /**\r\n  * @dev Reset the Rampp surcharge total to zero regardless of value on contract currently.\r\n  */\r\n  // function resetRamppSurchargeBalance() public isRampp {\r\n  //   ramppSurchargeBalance = 0 ether;\r\n  // }\r\n\r\n  /**\r\n  * @dev Allows Rampp wallet to update its own reference as well as update\r\n  * the address for the Rampp-owed payment split. Cannot modify other payable slots\r\n  * and since Rampp is always the first address this function is limited to the rampp payout only.\r\n  * @param _newAddress updated Rampp Address\r\n  */\r\n  // function setRamppAddress(address _newAddress) public isRampp {\r\n  //   require(_newAddress != RAMPPADDRESS, \"WithdrawableV2: New Rampp address must be different\");\r\n  //   RAMPPADDRESS = _newAddress;\r\n  //   payableAddresses[0] = _newAddress;\r\n  // }\r\n}\r\n\r\n\r\n  \r\n  \r\n// File: EarlyMintIncentive.sol\r\n// Allows the contract to have the first x tokens have a discount or\r\n// zero fee that can be calculated on the fly.\r\nabstract contract EarlyMintIncentive is Teams, ERC721A {\r\n  uint256 public PRICE = 0.09 ether; // mint \u4ef7\u683c\r\n  uint256 public EARLY_MINT_PRICE = 0 ether; // early mint \u4ef7\u683c\r\n  uint256 public earlyMintTokenIdCap = 0; // early mint \u6570\u91cf\r\n  bool public usingEarlyMintIncentive = false; // \u662f\u5426\u5f00\u542f early mint\r\n\r\n  function enableEarlyMintIncentive() public onlyTeamOrOwner {\r\n    usingEarlyMintIncentive = true;\r\n  }\r\n\r\n  function disableEarlyMintIncentive() public onlyTeamOrOwner {\r\n    usingEarlyMintIncentive = false;\r\n  }\r\n\r\n  /**\r\n  * @dev Set the max token ID in which the cost incentive will be applied.\r\n  * @param _newTokenIdCap max tokenId in which incentive will be applied\r\n  */\r\n  function setEarlyMintTokenIdCap(uint256 _newTokenIdCap) public onlyTeamOrOwner {\r\n    require(_newTokenIdCap <= collectionSize, \"Cannot set incentive tokenId cap larger than totaly supply.\");\r\n    require(_newTokenIdCap >= 1, \"Cannot set tokenId cap to less than the first token\");\r\n    earlyMintTokenIdCap = _newTokenIdCap;\r\n  }\r\n\r\n  /**\r\n  * @dev Set the incentive mint price\r\n  * @param _feeInWei new price per token when in incentive range\r\n  */\r\n  function setEarlyIncentivePrice(uint256 _feeInWei) public onlyTeamOrOwner {\r\n    EARLY_MINT_PRICE = _feeInWei;\r\n  }\r\n\r\n  /**\r\n  * @dev Set the primary mint price - the base price when not under incentive\r\n  * @param _feeInWei new price per token\r\n  */\r\n  function setPrice(uint256 _feeInWei) public onlyTeamOrOwner {\r\n    PRICE = _feeInWei;\r\n  }\r\n\r\n  function getPrice(uint256 _count) public view returns (uint256) {\r\n    require(_count > 0, \"Must be minting at least 1 token.\");\r\n\r\n    // short circuit function if we dont need to even calc incentive pricing\r\n    // short circuit if the current tokenId is also already over cap\r\n    if(\r\n      usingEarlyMintIncentive == false ||\r\n      currentTokenId() > earlyMintTokenIdCap\r\n    ) {\r\n      return PRICE * _count;\r\n    }\r\n\r\n    uint256 endingTokenId = currentTokenId() + _count;\r\n    // If qty to mint results in a final token ID less than or equal to the cap then\r\n    // the entire qty is within free mint.\r\n    if(endingTokenId  <= earlyMintTokenIdCap) {\r\n      return EARLY_MINT_PRICE * _count;\r\n    }\r\n\r\n    // If the current token id is less than the incentive cap\r\n    // and the ending token ID is greater than the incentive cap\r\n    // we will be straddling the cap so there will be some amount\r\n    // that are incentive and some that are regular fee.\r\n    uint256 incentiveTokenCount = earlyMintTokenIdCap - currentTokenId();\r\n    uint256 outsideIncentiveCount = endingTokenId - earlyMintTokenIdCap;\r\n\r\n    return (EARLY_MINT_PRICE * incentiveTokenCount) + (PRICE * outsideIncentiveCount);\r\n  }\r\n}\r\n\r\n  \r\nabstract contract RamppERC721A is \r\n    Ownable,\r\n    Teams,\r\n    ERC721A,\r\n    WithdrawableV2,\r\n    // ReentrancyGuard,\r\n    EarlyMintIncentive \r\n    , Allowlist \r\n    , TimedDrop\r\n{\r\n  constructor(\r\n    string memory tokenName,\r\n    string memory tokenSymbol\r\n  ) ERC721A(tokenName, tokenSymbol, 10, 10000) { } // Transaction mint count, max supply\r\n    uint8 public CONTRACT_VERSION = 2;\r\n    string public _baseTokenURI = \"\";// \"ipfs://QmRSzh6Jec7cGZBLK1Ym3iNmNX6Xfvcdh4aWG7rnkSfPCG/\"; // TODO: base token uri\r\n    string public _boxTokenURI = \"http://yuhulabstest.yuhulabs.io/shaol/box.json\";\r\n\r\n    bool public mintingOpen = true;\r\n    \r\n    \r\n    uint256 public MAX_WALLET_MINTS = 100; // \u6bcf\u4e2a\u94b1\u5305\u6700\u591a mint \u7684\u6570\u91cf\r\n\r\n  \r\n    /////////////// Admin Mint Functions\r\n    /**\r\n     * @dev Mints a token to an address with a tokenURI.\r\n     * This is owner only and allows a fee-free drop\r\n     * @param _to address of the future owner of the token\r\n     * @param _qty amount of tokens to drop the owner\r\n     */\r\n     function mintToAdminV2(address _to, uint256 _qty) public onlyTeamOrOwner{\r\n         require(_qty > 0, \"Must mint at least 1 token.\");\r\n         require(currentTokenId() + _qty <= collectionSize, \"Cannot mint over supply cap of 5000\");\r\n         _safeMint(_to, _qty, true);\r\n     }\r\n\r\n  \r\n    /////////////// GENERIC MINT FUNCTIONS\r\n    /**\r\n    * @dev Mints a single token to an address.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    */\r\n    // block for safe gas\r\n    // function mintTo(address _to) public payable {\r\n    //     require(onlyERC20MintingMode == false, \"Only minting with ERC-20 tokens is enabled.\");\r\n    //     require(getNextTokenId() <= collectionSize, \"Cannot mint over supply cap of 5000\");\r\n    //     require(mintingOpen == true && onlyAllowlistMode == false, \"Public minting is not open right now!\");\r\n    //     require(publicDropTimePassed() == true, \"Public drop time has not passed!\");\r\n    //     require(canMintAmount(_to, 1), \"Wallet address is over the maximum allowed mints\");\r\n    //     require(msg.value == getPrice(1), \"Value needs to be exactly the mint fee!\");\r\n        \r\n    //     _safeMint(_to, 1, false);\r\n    // }\r\n\r\n    /**\r\n    * @dev Mints tokens to an address in batch.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    * @param _amount number of tokens to mint\r\n    */\r\n    function mintToMultiple(address _to, uint256 _amount) public payable {\r\n        require(onlyERC20MintingMode == false, \"Only minting with ERC-20 tokens is enabled.\");\r\n        require(_amount >= 1, \"Must mint at least 1 token\");\r\n        require(_amount <= maxBatchSize, \"Cannot mint more than max mint per transaction\");\r\n        require(mintingOpen == true && onlyAllowlistMode == false, \"Public minting is not open right now!\");\r\n        require(publicDropTimePassed() == true, \"Public drop time has not passed!\");\r\n        require(canMintAmount(_to, _amount), \"Wallet address is over the maximum allowed mints\");\r\n        require(currentTokenId() + _amount <= collectionSize, \"Cannot mint over supply cap of 5000\");\r\n        require(msg.value == getPrice(_amount), \"Value below required mint fee for amount\");\r\n\r\n        _safeMint(_to, _amount, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints tokens to an address in batch using an ERC-20 token for payment\r\n     * fee may or may not be required*\r\n     * @param _to address of the future owner of the token\r\n     * @param _amount number of tokens to mint\r\n     * @param _erc20TokenContract erc-20 token contract to mint with\r\n     */\r\n    function mintToMultipleERC20(address _to, uint256 _amount, address _erc20TokenContract) public { // XXX: \u7981\u7528 ERC20 mint\u7684 \u624b\u7eed\u8d39 payable {\r\n      require(_amount >= 1, \"Must mint at least 1 token\");\r\n      require(_amount <= maxBatchSize, \"Cannot mint more than max mint per transaction\");\r\n      // require(getNextTokenId() <= collectionSize, \"Cannot mint over supply cap of 5000\"); bug\r\n      require(mintingOpen == true && onlyAllowlistMode == false, \"Public minting is not open right now!\");\r\n      require(publicDropTimePassed() == true, \"Public drop time has not passed!\");\r\n      // require(canMintAmount(_to, 1), \"Wallet address is over the maximum allowed mints\");bug\r\n      // fix \r\n      require(canMintAmount(_to, _amount), \"Wallet address is over the maximum allowed mints\");\r\n      require(currentTokenId() + _amount <= collectionSize, \"Cannot mint over supply cap of 5000\");\r\n\r\n      // ERC-20 Specific pre-flight checks\r\n      require(isApprovedForERC20Payments(_erc20TokenContract), \"ERC-20 Token is not approved for minting!\");\r\n      uint256 tokensQtyToTransfer = chargeAmountForERC20(_erc20TokenContract) * _amount;\r\n      IERC20 payableToken = IERC20(_erc20TokenContract);\r\n\r\n      require(payableToken.balanceOf(_to) >= tokensQtyToTransfer, \"Buyer does not own enough of token to complete purchase\");\r\n      require(payableToken.allowance(_to, address(this)) >= tokensQtyToTransfer, \"Buyer did not approve enough of ERC-20 token to complete purchase\");\r\n      // require(hasSurcharge(), \"Fee for ERC-20 payment not provided!\"); // XXX: \u7981\u7528 ERC20 mint\u7684 \u624b\u7eed\u8d39\r\n      \r\n      bool transferComplete = payableToken.transferFrom(_to, address(this), tokensQtyToTransfer);\r\n      require(transferComplete, \"ERC-20 token was unable to be transferred\");\r\n      \r\n      _safeMint(_to, _amount, false);\r\n      // addSurcharge(); // XXX: \u7981\u7528 ERC20 mint\u7684 \u624b\u7eed\u8d39\r\n    }\r\n\r\n    function openMinting() public onlyTeamOrOwner {\r\n        mintingOpen = true;\r\n    }\r\n\r\n    function stopMinting() public onlyTeamOrOwner {\r\n        mintingOpen = false;\r\n    }\r\n\r\n  \r\n    ///////////// ALLOWLIST MINTING FUNCTIONS\r\n\r\n    /**\r\n    * @dev Mints tokens to an address using an allowlist.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    * @param _merkleProof merkle proof array\r\n    */\r\n    // block for safe gas\r\n    // function mintToAL(address _to, bytes32[] calldata _merkleProof) public payable {\r\n    //     require(onlyERC20MintingMode == false, \"Only minting with ERC-20 tokens is enabled.\");\r\n    //     require(onlyAllowlistMode == true && mintingOpen == true, \"Allowlist minting is closed\");\r\n    //     require(isAllowlisted(_to, _merkleProof), \"Address is not in Allowlist!\");\r\n    //     require(getNextTokenId() <= collectionSize, \"Cannot mint over supply cap of 5000\");\r\n    //     require(canMintAmount(_to, 1), \"Wallet address is over the maximum allowed mints\");\r\n    //     require(msg.value == getPrice(1), \"Value needs to be exactly the mint fee!\");\r\n    //     require(allowlistDropTimePassed() == true, \"Allowlist drop time has not passed!\");\r\n\r\n    //     _safeMint(_to, 1, false);\r\n    // }\r\n\r\n    /**\r\n    * @dev Mints tokens to an address using an allowlist.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    * @param _amount number of tokens to mint\r\n    * @param _merkleProof merkle proof array\r\n    */\r\n    function mintToMultipleAL(address _to, uint256 _amount, bytes32[] calldata _merkleProof) public payable {\r\n        require(onlyERC20MintingMode == false, \"Only minting with ERC-20 tokens is enabled.\");\r\n        require(onlyAllowlistMode == true && mintingOpen == true, \"Allowlist minting is closed\");\r\n        require(isAllowlisted(_to, _merkleProof), \"Address is not in Allowlist!\");\r\n        require(_amount >= 1, \"Must mint at least 1 token\");\r\n        require(_amount <= maxBatchSize, \"Cannot mint more than max mint per transaction\");\r\n\r\n        require(canMintAmount(_to, _amount), \"Wallet address is over the maximum allowed mints\");\r\n        require(currentTokenId() + _amount <= collectionSize, \"Cannot mint over supply cap of 5000\");\r\n        require(msg.value == getPrice(_amount), \"Value below required mint fee for amount\");\r\n        require(allowlistDropTimePassed() == true, \"Allowlist drop time has not passed!\");\r\n\r\n        _safeMint(_to, _amount, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Mints tokens to an address using an allowlist.\r\n    * fee may or may not be required*\r\n    * @param _to address of the future owner of the token\r\n    * @param _amount number of tokens to mint\r\n    * @param _merkleProof merkle proof array\r\n    * @param _erc20TokenContract erc-20 token contract to mint with\r\n    */\r\n    // function mintToMultipleERC20AL(address _to, uint256 _amount, bytes32[] calldata _merkleProof, address _erc20TokenContract) public { // XXX: \u7981\u7528 ERC20 mint\u7684 \u624b\u7eed\u8d39 payable {\r\n    //   require(onlyAllowlistMode == true && mintingOpen == true, \"Allowlist minting is closed\");\r\n    //   require(isAllowlisted(_to, _merkleProof), \"Address is not in Allowlist!\");\r\n    //   require(_amount >= 1, \"Must mint at least 1 token\");\r\n    //   require(_amount <= maxBatchSize, \"Cannot mint more than max mint per transaction\");\r\n    //   require(canMintAmount(_to, _amount), \"Wallet address is over the maximum allowed mints\");\r\n    //   require(currentTokenId() + _amount <= collectionSize, \"Cannot mint over supply cap of 5000\");\r\n    //   require(allowlistDropTimePassed() == true, \"Allowlist drop time has not passed!\");\r\n    \r\n    //   // ERC-20 Specific pre-flight checks\r\n    //   require(isApprovedForERC20Payments(_erc20TokenContract), \"ERC-20 Token is not approved for minting!\");\r\n    //   uint256 tokensQtyToTransfer = chargeAmountForERC20(_erc20TokenContract) * _amount;\r\n    //   IERC20 payableToken = IERC20(_erc20TokenContract);\r\n    \r\n    //   require(payableToken.balanceOf(_to) >= tokensQtyToTransfer, \"Buyer does not own enough of token to complete purchase\");\r\n    //   require(payableToken.allowance(_to, address(this)) >= tokensQtyToTransfer, \"Buyer did not approve enough of ERC-20 token to complete purchase\");\r\n    //   // require(hasSurcharge(), \"Fee for ERC-20 payment not provided!\"); // XXX: \u7981\u7528 ERC20 mint\u7684 \u624b\u7eed\u8d39\r\n      \r\n    //   bool transferComplete = payableToken.transferFrom(_to, address(this), tokensQtyToTransfer);\r\n    //   require(transferComplete, \"ERC-20 token was unable to be transferred\");\r\n      \r\n    //   _safeMint(_to, _amount, false);\r\n    //   // addSurcharge(); // \u7981\u7528 ERC20 mint\u7684 \u624b\u7eed\u8d39\r\n    // }\r\n\r\n    /**\r\n     * @dev Enable allowlist minting fully by enabling both flags\r\n     * This is a convenience function for the Rampp user\r\n     */\r\n    function openAllowlistMint() public onlyTeamOrOwner {\r\n        enableAllowlistOnlyMode();\r\n        mintingOpen = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Close allowlist minting fully by disabling both flags\r\n     * This is a convenience function for the Rampp user\r\n     */\r\n    function closeAllowlistMint() public onlyTeamOrOwner {\r\n        disableAllowlistOnlyMode();\r\n        mintingOpen = false;\r\n    }\r\n\r\n\r\n  \r\n    /**\r\n    * @dev Check if wallet over MAX_WALLET_MINTS\r\n    * @param _address address in question to check if minted count exceeds max\r\n    */\r\n    function canMintAmount(address _address, uint256 _amount) public view returns(bool) {\r\n        require(_amount >= 1, \"Amount must be greater than or equal to 1\");\r\n        return (_numberMinted(_address) + _amount) <= MAX_WALLET_MINTS;\r\n    }\r\n\r\n    /**\r\n    * @dev Update the maximum amount of tokens that can be minted by a unique wallet\r\n    * @param _newWalletMax the new max of tokens a wallet can mint. Must be >= 1\r\n    */\r\n    function setWalletMax(uint256 _newWalletMax) public onlyTeamOrOwner {\r\n        require(_newWalletMax >= 1, \"Max mints per wallet must be at least 1\");\r\n        MAX_WALLET_MINTS = _newWalletMax;\r\n    }\r\n    \r\n\r\n  \r\n    /**\r\n     * @dev Allows owner to set Max mints per tx\r\n     * @param _newMaxMint maximum amount of tokens allowed to mint per tx. Must be >= 1\r\n     */\r\n     function setMaxMint(uint256 _newMaxMint) public onlyTeamOrOwner {\r\n         require(_newMaxMint >= 1, \"Max mint must be at least 1\");\r\n         maxBatchSize = _newMaxMint;\r\n     }\r\n    \r\n\r\n  \r\n\r\n  function _baseURI() internal view virtual override returns(string memory) {\r\n    return _baseTokenURI;\r\n  }\r\n\r\n  function _boxURI() internal view virtual override returns(string memory) {\r\n    return _boxTokenURI;\r\n  }\r\n\r\n  function baseTokenURI() public view returns(string memory) {\r\n    return _baseTokenURI;\r\n  }\r\n\r\n  function boxURI() public view returns(string memory) {\r\n    return _boxTokenURI;\r\n  }\r\n\r\n  function setBaseURI(string calldata baseURI) external onlyTeamOrOwner {\r\n    _baseTokenURI = baseURI;\r\n  }\r\n\r\n  function setBoxURI(string calldata boxTokenURI) external onlyTeamOrOwner {\r\n    _boxTokenURI = boxTokenURI;\r\n  }\r\n\r\n  function getOwnershipData(uint256 tokenId) external view returns(TokenOwnership memory) {\r\n    return ownershipOf(tokenId);\r\n  }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 value => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC6672 is IERC721 {\r\n    event Redeem(\r\n        address indexed _operator,\r\n        uint256 indexed _tokenId,\r\n        address redeemer,\r\n        bytes32 _redemptionId,\r\n        string _memo\r\n    );\r\n\r\n    event Cancel(\r\n        address indexed _operator,\r\n        uint256 indexed _tokenId,\r\n        bytes32 _redemptionId,\r\n        string _memo\r\n    );\r\n\r\n    // \u662f\u5426\u5b8c\u6210\u4e86\u67d0\u4e2a\u5151\u6362\u6d3b\u52a8\r\n    function isRedeemed(\r\n        address _operator,\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId\r\n    ) external view returns (bool);\r\n\r\n    // \u83b7\u53d6operator\u5b8c\u6210\u7684\u6240\u6709\u5151\u6362\u6d3b\u52a8\r\n    function getRedemptionIds(\r\n        address _operator,\r\n        uint256 _tokenId\r\n    ) external view returns (bytes32[] memory);\r\n\r\n    // \u6267\u884c\u5151\u6362\r\n    function redeem(\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId,\r\n        string memory _memo\r\n    ) external;\r\n\r\n    // \u53d6\u6d88\u5151\u6362\r\n    function cancel(\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId,\r\n        string memory _memo\r\n    ) external;\r\n}\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract ERC6672 is RamppERC721A, IERC6672 {\r\n\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    bytes4 public constant IERC6672_ID = type(IERC6672).interfaceId;\r\n\r\n    // \u5151\u6362\u63d0\u4f9b\u5546\u5730\u5740 -> tokenId -> \u5151\u6362\u7269\u54c1Id -> \u5151\u6362\u72b6\u6001\r\n    mapping(address => mapping(uint256 => mapping(bytes32 => bool))) redemptionStatus;\r\n    // \u5151\u6362\u63d0\u4f9b\u5546\u5730\u5740 -> tokenId -> \u5151\u6362\u7269\u54c1Id -> \u5151\u6362\u5907\u6ce8\r\n    mapping(address => mapping(uint256 => mapping(bytes32 => string)))\r\n        public memos;\r\n    // \u5151\u6362\u63d0\u4f9b\u5546\u5730\u5740 -> tokenId -> \u5151\u6362\u7269\u54c1\u8bb0\u5f55\r\n    mapping(address => mapping(uint256 => EnumerableSet.Bytes32Set)) redemptions;\r\n\r\n    constructor(\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) RamppERC721A(tokenName, tokenSymbol){}\r\n\r\n    function isRedeemed(\r\n        address _operator,\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId\r\n    ) external view returns (bool) {\r\n        return _isRedeemed(_operator, _redemptionId, _tokenId);\r\n    }\r\n\r\n    function getRedemptionIds(\r\n        address _operator,\r\n        uint256 _tokenId\r\n    ) external view returns (bytes32[] memory) {\r\n        require(\r\n            redemptions[_operator][_tokenId].length() > 0,\r\n            \"ERC6672: token doesn't have any redemptions.\"\r\n        );\r\n        return redemptions[_operator][_tokenId].values();\r\n    }\r\n\r\n    function redeem(\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId,\r\n        string memory _memo\r\n    ) external {\r\n        address _operator = msg.sender;\r\n        require(\r\n            !_isRedeemed(_operator, _redemptionId, _tokenId),\r\n            \"ERC6672: token already redeemed.\"\r\n        );\r\n        _update(_operator, _redemptionId, _tokenId, _memo, true);\r\n        redemptions[_operator][_tokenId].add(_redemptionId);\r\n    }\r\n\r\n    function cancel(\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId,\r\n        string memory _memo\r\n    ) external {\r\n        address _operator = msg.sender;\r\n        require(\r\n            _isRedeemed(_operator, _redemptionId, _tokenId),\r\n            \"ERC6672: token doesn't redeemed.\"\r\n        );\r\n        _update(_operator, _redemptionId, _tokenId, _memo, false);\r\n        _removeRedemption(_operator, _redemptionId, _tokenId);\r\n    }\r\n\r\n    function _isRedeemed(\r\n        address _operator,\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId\r\n    ) internal view returns (bool) {\r\n        require(_exists(_tokenId), \"ERC6672: token doesn't exists.\");\r\n        return redemptionStatus[_operator][_tokenId][_redemptionId];\r\n    }\r\n\r\n    function _update(\r\n        address _operator,\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId,\r\n        string memory _memo,\r\n        bool isRedeemed_\r\n    ) internal {\r\n        redemptionStatus[_operator][_tokenId][_redemptionId] = isRedeemed_;\r\n        memos[_operator][_tokenId][_redemptionId] = _memo;\r\n        if (isRedeemed_) {\r\n            emit Redeem(\r\n                _operator,\r\n                _tokenId,\r\n                ownerOf(_tokenId),\r\n                _redemptionId,\r\n                _memo\r\n            );\r\n        } else {\r\n            emit Cancel(_operator, _tokenId, _redemptionId, _memo);\r\n        }\r\n    }\r\n\r\n    function _removeRedemption(\r\n        address _operator,\r\n        bytes32 _redemptionId,\r\n        uint256 _tokenId\r\n    ) internal {\r\n        redemptions[_operator][_tokenId].remove(_redemptionId);\r\n    }\r\n\r\n    function supportsInterface(\r\n        bytes4 interfaceId\r\n    ) public view virtual override(ERC721A, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC6672).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n  \r\n// File: contracts/MyContract.sol\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MyContract6672 is ERC6672 {\r\n    constructor() ERC6672(\"KungFuLoong\", \"KFL\"){}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_redemptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IERC6672_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WALLET_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_boxTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_chargeAmountInTokens\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistDropTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowlistDropTimePassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcAvailableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMintAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_redemptionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"chargeAmountForERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAllowlistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAllowlistDropTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAllowlistOnlyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"disableERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableERC20OnlyMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableEarlyMintIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePublicDropTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyMintTokenIdCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAllowlistOnlyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"enableERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableERC20OnlyMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEarlyMintIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforceAllowlistDropTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforcePublicDropTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Payable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct ERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRedemptionIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isAllowlisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"isApprovedForERC20Payments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_redemptionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"memos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"mintToAdminV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"mintToMultipleAL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"mintToMultipleERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyAllowlistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyERC20MintingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAllowlistMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDropTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDropTimePassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_redemptionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"restrictedApprovalAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDropTime\",\"type\":\"uint256\"}],\"name\":\"setAllowlistDropTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRestricted\",\"type\":\"bool\"}],\"name\":\"setApprovalRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"boxTokenURI\",\"type\":\"string\"}],\"name\":\"setBoxURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newErc20Payable\",\"type\":\"address\"}],\"name\":\"setERC20PayableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"setEarlyIncentivePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTokenIdCap\",\"type\":\"uint256\"}],\"name\":\"setEarlyMintTokenIdCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMint\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDropTime\",\"type\":\"uint256\"}],\"name\":\"setPublicDropTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWalletMax\",\"type\":\"uint256\"}],\"name\":\"setWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useAllowlistDropTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usePublicDropTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingEarlyMintIncentive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC20All\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MyContract6672", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3f296caf00069cb9224f84029604aa21d8dcbfc27d920d7a904a4c716a4c3ed"}