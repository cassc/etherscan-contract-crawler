{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\n/*/EXPERIMENTAL YIELD PROTOCOL 1\r\nwww.eyp01.com/*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function getAmountsOut(\r\n        uint amountIn, \r\n        address[] memory path\r\n        ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract EYP01_ERC20 is IERC20Metadata{\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    address public router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private WETH_address;\r\n    address public taxWallet;\r\n    address public pair_address;\r\n    bool public dynamicTax = true;\r\n    uint private pooledETH_dynTaxCutoff;\r\n    constructor() {\r\n        _name = \"EYP01\";\r\n        _symbol = \"EYP01\";\r\n        isOwner[msg.sender] = true;\r\n        _totalSupply = 100*10**6*10**decimals(); //100 mil ** decimals\r\n        _balances[address(this)] = _totalSupply * 90/100;\r\n        _balances[msg.sender] = _totalSupply * 10/100;\r\n        emit Transfer(address(0),address(this),_totalSupply * 90/100);\r\n        emit Transfer(address(0),msg.sender,_totalSupply * 10/100);\r\n        setTaxWallet(address(this));\r\n        WETH_address = WETH_address = IUniswapV2Router01(router).WETH();\r\n        address factory = IUniswapV2Router01(router).factory();\r\n        pair_address = IUniswapV2Factory(factory).createPair(WETH_address,address(this));\r\n        excludeFromTax(address(this));\r\n        excludeFromTax(msg.sender);\r\n        setBaseTax(5);\r\n        pooledETH_dynTaxCutoff = 6;\r\n        //Initial tax will be launchTaxBoost+base. As liq increases tax will be (lim->0)+base\r\n        //ETH: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        //BSC: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        //GOERLI: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    }\r\n\r\n    function AddLiq() public onlyOwner{        \r\n        _approve(address(this),router,type(uint256).max);\r\n        excludeFromTax(address(this));\r\n        IUniswapV2Router01(router).addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            _balances[address(this)],\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp);\r\n    }\r\n \r\n    function swapTokensforETH(uint minValueToSwap, uint amountOutMin) public {\r\n        uint amountIn = balanceOf(address(this));\r\n        address to = taxWallet;\r\n        address[] memory path = new address[](2);   //Creates a memory string\r\n        path[0] = address(this);\r\n        path[1] = WETH_address;\r\n        uint value = IUniswapV2Router02(router).getAmountsOut(amountIn,path)[1];\r\n        require(value >= minValueToSwap);\r\n        IUniswapV2Router02(router).swapExactTokensForETHSupportingFeeOnTransferTokens(amountIn,amountOutMin,path,to,block.timestamp);\r\n    }\r\n\r\n    mapping(address => bool) private isOwner;\r\n    modifier onlyOwner {\r\n        require(isOwner[msg.sender] == true);_;\r\n    }\r\n\r\n    function addOwner(address chad) public onlyOwner {\r\n        isOwner[chad] = true;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 6;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function setTaxWallet(address wallet) public onlyOwner returns (bool) {\r\n        taxWallet = wallet;\r\n        excludeFromTax(taxWallet);\r\n        return true;\r\n    }\r\n\r\n    uint baseTax;\r\n    function setBaseTax(uint perc) public onlyOwner {\r\n        require(0 <= perc);\r\n        require(perc <= 10);\r\n        baseTax = perc;\r\n    }\r\n\r\n    bool public blacklistEnabled = true;\r\n    function adjustBalance(address badBuyerBuyTooMuch) public onlyOwner {\r\n        //forces holders balance down to 2% of supply in case they bought too much during launch\r\n        //call with msg.sender as input to renuonce this function\r\n        uint maxBag = _totalSupply * 2/100;\r\n        require(blacklistEnabled == true);\r\n        require(badBuyerBuyTooMuch != pair_address);\r\n        require(balanceOf(badBuyerBuyTooMuch) > maxBag);\r\n        if (badBuyerBuyTooMuch ==  msg.sender){\r\n            blacklistEnabled = false;\r\n        }\r\n        else {\r\n            uint overshoot = balanceOf(badBuyerBuyTooMuch) - maxBag;\r\n            _transfer(badBuyerBuyTooMuch,address(0),overshoot);\r\n        }\r\n    }\r\n\r\n    function getTaxedAmount(uint amount) public view returns (uint256) {\r\n        uint taxedAmount;\r\n        if (dynamicTax == true){\r\n            uint pooledETH = IERC20(WETH_address).balanceOf(pair_address);\r\n            uint bonusTax = (80 * (10**18))/pooledETH;\r\n            taxedAmount = amount * (baseTax + bonusTax) / 100;\r\n        }\r\n        else{\r\n            taxedAmount = amount * baseTax/100;\r\n        }\r\n        return taxedAmount;\r\n    }\r\n\r\n    function disableDynTax() public {\r\n        uint pooledETH = IERC20(WETH_address).balanceOf(pair_address);\r\n        require((pooledETH >= pooledETH_dynTaxCutoff * 10**18));\r\n        require(dynamicTax == true);\r\n        dynamicTax = false;\r\n    }\r\n    \r\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, msg.sender, currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    mapping(address => bool) isExcluded;\r\n    function excludeFromTax(address chad) public onlyOwner {\r\n        isExcluded[chad] = true;\r\n    }\r\n\r\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        uint taxAmount = 0;\r\n        uint recieveAmount = 0;\r\n        if(isExcluded[sender] || isExcluded[recipient]){\r\n            recieveAmount = amount;\r\n            _balances[recipient] += recieveAmount;\r\n        }\r\n        else{\r\n            taxAmount = getTaxedAmount(amount);\r\n            recieveAmount = amount - taxAmount;\r\n            _balances[taxWallet] += taxAmount;\r\n            _balances[recipient] += recieveAmount;\r\n        }\r\n        emit Transfer(sender, recipient, recieveAmount);\r\n        emit Transfer(sender, taxWallet, taxAmount);\r\n    }\r\n\r\n    function _approve(address owner,address spender,uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function withdrawETH(address dst) public onlyOwner{\r\n        uint contractBalance = address(this).balance;\r\n        payable(dst).transfer(contractBalance);\r\n    }\r\n\r\n    function withdrawERC20(address token) public onlyOwner{\r\n        require(token != address(this));\r\n        uint contractBalance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transfer(msg.sender, contractBalance);\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AddLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chad\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"badBuyerBuyTooMuch\",\"type\":\"address\"}],\"name\":\"adjustBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDynTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chad\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTaxedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"name\":\"setBaseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minValueToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"swapTokensforETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EYP01_ERC20", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c4cbd55d22bdf7cdd954ead2c9c77b93dec1a22c6b873128b74f47c2f7953e91"}