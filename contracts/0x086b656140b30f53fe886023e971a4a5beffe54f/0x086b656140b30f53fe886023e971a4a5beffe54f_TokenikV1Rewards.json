{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenikV1Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity >0.8.0;\\r\\n\\r\\nimport './interfaces/ITokenikV1Rewards.sol';\\r\\n\\r\\ncontract TokenikV1Rewards is ITokenikV1Rewards{\\r\\n\\r\\n    event ClaimAirdrop(\\r\\n        address user,\\r\\n        uint256 amount,\\r\\n        address ref,\\r\\n        uint256 refAmount\\r\\n    );\\r\\n\\r\\n    address public callerSetter;\\r\\n    bool public addRewardPaused; //to be paused on Tokenik v2 launch\\r\\n    bool public removeRewardPaused; //to be paused on Tokenik v2 launch\\r\\n    bool public airdropEnabled; //false on contract launch\\r\\n    uint256 public airdropAmount; //free airdrop amount\\r\\n    uint256 public airdropRefBonus; //airdrop referral bonus\\r\\n    uint256 public totalRewards; //total rewards supply\\r\\n    uint256 public totalAirdropClaims; //number of individual addresses that claimed the airdrop\\r\\n    uint256 public swapRewardPercentage; // 1 decimal, 10 is 1%\\r\\n\\r\\n    mapping(address => uint256) public tradingRewards; //RNIK balance with 18 decimals\\r\\n    mapping(address => bool) public approvedCallers; //approved callers list\\r\\n    mapping(address => bool) public approvedTokens; //stable tokens approved to receive trading rewards\\r\\n    mapping(address => bool) public claimedAirdrop; //track airdrop claims\\r\\n\\r\\n    modifier onlySetter() {\\r\\n        require(msg.sender == callerSetter, 'TokenikV1: FORBIDDEN');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        require(approvedCallers[msg.sender], 'TokenikV1: Forbidden');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        callerSetter = msg.sender;\\r\\n        approvedCallers[msg.sender] = true;\\r\\n        airdropAmount = 250 * 1e18; //250 RNIK\\r\\n        airdropRefBonus = 50 * 1e18; //50 RNIK\\r\\n        swapRewardPercentage = 10; //1%\\r\\n    }\\r\\n\\r\\n\\r\\n    function addReward(address _user, uint256 _amount) external override onlyCaller {\\r\\n        \\r\\n        if(!addRewardPaused){\\r\\n            tradingRewards[_user] += _amount; \\r\\n            totalRewards += _amount; \\r\\n        }    \\r\\n    }\\r\\n\\r\\n    function addSwapReward(address _user, uint256 _amount, address _token) external override onlyCaller {\\r\\n        //valid if pair is caller and token is approved\\r\\n        \\r\\n        if(!approvedTokens[_token]) return; //ensure the token is approved\\r\\n\\r\\n        if(!addRewardPaused){\\r\\n            uint256 rewardOffer = _amount * swapRewardPercentage / 1000;\\r\\n            tradingRewards[_user] += rewardOffer; \\r\\n            totalRewards += rewardOffer; \\r\\n        }    \\r\\n    }\\r\\n\\r\\n    function addLiquidityReward(address _user, address _token0, address _token1, uint256 _amount0, uint256 _amount1) external override onlyCaller {\\r\\n        //valid if pair is caller and token is approved\\r\\n\\r\\n        if(addRewardPaused) return; //rewards is paused\\r\\n\\r\\n        if(approvedTokens[_token0]){\\r\\n                tradingRewards[_user] += _amount0; \\r\\n                totalRewards += _amount0; \\r\\n        } else{\\r\\n            if(approvedTokens[_token1]){\\r\\n                tradingRewards[_user] += _amount1; \\r\\n                totalRewards += _amount1;  \\r\\n            }\\r\\n        }\\r\\n  \\r\\n    }\\r\\n\\r\\n    function removeReward(address _user, uint256 _amount) external override onlyCaller returns(bool) {\\r\\n        \\r\\n        if(!removeRewardPaused){\\r\\n            //ensure the _amount is not greater than user balance\\r\\n            if(_amount > tradingRewards[_user]){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n                tradingRewards[_user] -= _amount;\\r\\n                totalRewards -= _amount;\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeSwapReward(address _user, uint256 _amount, address _token) external override onlyCaller returns(bool) {\\r\\n               \\r\\n        if(removeRewardPaused) return false; //rewards is paused\\r\\n        if(!approvedTokens[_token]) return false; //token is not approved\\r\\n\\r\\n        if(_amount > tradingRewards[_user]){\\r\\n                return false;\\r\\n            }\\r\\n            else{\\r\\n                tradingRewards[_user] -= _amount;\\r\\n                totalRewards -= _amount;\\r\\n                return true;\\r\\n            }\\r\\n    }\\r\\n\\r\\n    function claimAirdrop(address _ref) external override {\\r\\n        require(airdropEnabled, 'TokenikV1: Airdrop is disabled.');\\r\\n        require(!claimedAirdrop[msg.sender], 'TokenikV1: Already claimed airdrop.');\\r\\n\\r\\n        claimedAirdrop[msg.sender] = true;\\r\\n        totalAirdropClaims +=1;\\r\\n\\r\\n        uint256 amountToClaim = airdropAmount;        \\r\\n\\r\\n        if((_ref != address(0)) && (_ref != msg.sender)){\\r\\n            amountToClaim +=airdropRefBonus;\\r\\n            tradingRewards[msg.sender] += amountToClaim;\\r\\n            tradingRewards[_ref] += airdropRefBonus;\\r\\n\\r\\n            uint256 mintedRewards = amountToClaim + airdropRefBonus;\\r\\n            totalRewards += mintedRewards;\\r\\n\\r\\n            emit ClaimAirdrop(msg.sender, amountToClaim, _ref, airdropRefBonus);\\r\\n        }\\r\\n        else{\\r\\n            tradingRewards[msg.sender] += amountToClaim;\\r\\n            totalRewards += amountToClaim;\\r\\n\\r\\n            emit ClaimAirdrop(msg.sender, amountToClaim, address(0), 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //getter functions\\r\\n\\r\\n    function getRewards(address _address) external view override returns(uint256){\\r\\n        return tradingRewards[_address];\\r\\n    }\\r\\n\\r\\n    function getClaimedAirdrop(address _address) external view override returns(bool){\\r\\n        return claimedAirdrop[_address];\\r\\n    }\\r\\n\\r\\n    function getApprovedCaller(address _address) override view external returns(bool){\\r\\n        return approvedCallers[_address];\\r\\n    }\\r\\n\\r\\n    function getApprovedToken(address _address) external view override returns(bool){\\r\\n        return approvedTokens[_address];\\r\\n    }\\r\\n\\r\\n    function getApprovedTokens(address _token0, address _token1) external view override returns(bool,bool){\\r\\n        return (approvedTokens[_token0], approvedTokens[_token1]);\\r\\n    }\\r\\n\\r\\n    //setter functions\\r\\n\\r\\n    function setCallerSetter(address _callerSetter) external override onlySetter{\\r\\n        \\r\\n        callerSetter = _callerSetter; //intentionally not checking against address(0) as callerSetter will be set to zero address once Tokenik v2 launches and rewards get paused\\r\\n    }\\r\\n\\r\\n    function setApprovedCaller(address _caller, bool _approved) external override onlySetter{\\r\\n        \\r\\n        approvedCallers[_caller] = _approved;\\r\\n    }\\r\\n\\r\\n    function setApprovedTokens(address _token, bool _approved) external override onlySetter{\\r\\n        \\r\\n        approvedTokens[_token] = _approved;\\r\\n    }\\r\\n\\r\\n    function setAddRewardPaused(bool  _paused) external override onlySetter{\\r\\n        \\r\\n        addRewardPaused = _paused;\\r\\n    }\\r\\n\\r\\n    function setRemoveRewardPaused(bool  _paused) external override onlySetter{\\r\\n        \\r\\n        removeRewardPaused = _paused;\\r\\n    }\\r\\n\\r\\n    function setAirdropAmounts(uint256 _amount, uint256 _refAmount) external override onlySetter{\\r\\n        \\r\\n        airdropAmount = _amount;\\r\\n        airdropRefBonus = _refAmount;\\r\\n    }\\r\\n\\r\\n    function enableAirdrop(bool  _enabled) external override onlySetter{\\r\\n        \\r\\n        airdropEnabled = _enabled;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenikV1Rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity >0.8.0;\\r\\n\\r\\ninterface ITokenikV1Rewards {\\r\\n\\r\\n    function addReward(address _user, uint256 _amount) external;\\r\\n    function addSwapReward(address _user, uint256 _amount, address _token) external;\\r\\n    function removeReward(address _user, uint256 _amount) external returns(bool);\\r\\n    function claimAirdrop(address _ref) external;\\r\\n    function getRewards(address _address) external view returns(uint256);\\r\\n    function getClaimedAirdrop(address _address) external view returns(bool);\\r\\n    function getApprovedCaller(address _address) external view returns(bool);\\r\\n    function setCallerSetter(address _callerSetter) external;\\r\\n    function setApprovedCaller(address _caller, bool _approved) external;\\r\\n    function setAddRewardPaused(bool  _paused) external;\\r\\n    function setRemoveRewardPaused(bool  _paused) external;\\r\\n    function setAirdropAmounts(uint256 _amount, uint256 _refAmount) external;\\r\\n    function enableAirdrop(bool  _enabled) external;\\r\\n    function addLiquidityReward(address _user, address _token0, address _token1, uint256 _amount0, uint256 _amount1) external;\\r\\n    function removeSwapReward(address _user, uint256 _amount, address _token) external returns(bool);\\r\\n    function getApprovedToken(address _address) external view returns(bool);\\r\\n    function getApprovedTokens(address _token0, address _token1) external view returns(bool,bool);\\r\\n    function setApprovedTokens(address _token, bool _approved) external;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refAmount\",\"type\":\"uint256\"}],\"name\":\"ClaimAirdrop\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"}],\"name\":\"addLiquidityReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addRewardPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addSwapReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callerSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"enableAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getApprovedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getApprovedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"name\":\"getApprovedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClaimedAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeRewardPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeSwapReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setAddRewardPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refAmount\",\"type\":\"uint256\"}],\"name\":\"setAirdropAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovedCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callerSetter\",\"type\":\"address\"}],\"name\":\"setCallerSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setRemoveRewardPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdropClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenikV1Rewards", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}