{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n// File: contracts/interfaces/ISaltsToken.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n//TODO: Remove this interface and use reward wallet.\r\n\r\ninterface ISaltsToken {\r\n\r\n    function transfer( address _to, uint256 _value ) external returns (bool success);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function registerUser(address _user, address _referer) external;\r\n\r\n    function approve( address _spender, uint256 _value ) external returns (bool success);\r\n\r\n    function transferFrom( address _from, address _to, uint256 _value ) external returns (bool success);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function CurrentSupply() external view returns (uint256);\r\n\r\n    function setRewardsWallet(address _rewardsContractAddress) external;\r\n\r\n    function BurnedTokens() external view returns (uint256);\r\n\r\n    function setMasterchef(address _masterchef) external;\r\n\r\n    function burnMasterchef(address to, uint256 amount) external;\r\n\r\n    function mintMasterchef(address to, uint256 amount) external;\r\n\r\n    // sets developer wallet address for receiving fee\r\n    function setDevWallet(address _devWallet) external;\r\n\r\n    event Taxes(uint256 burnTax, uint256 devTax, uint256 rewardstax);\r\n\r\n    event UserRegistered( address indexed user, address indexed referer, uint256 timestamp );\r\n\r\n    event Burn(address account, uint256 amount, uint256 timestamp);\r\n\r\n}\r\n\r\n// File: contracts/saltzYard.sol\r\n\r\n\r\npragma solidity ^0.8;\r\n\r\ninterface IVault {\r\n\r\nfunction setUpdater(address _updater) external;\r\n\r\nfunction withdraw(uint amount, address _user) external;\r\n}\r\ncontract StakingRewards{\r\n    ISaltsToken public immutable rewardsToken;\r\n    IVault Ivault;\r\n\r\n    address public owner;\r\n\r\n    address vault;\r\n\r\n    address updater;\r\n\r\n    // Duration of rewards to be paid out (in seconds)\r\n    uint public duration;\r\n    // Timestamp of when the rewards finish\r\n    uint public finishAt;\r\n    // Minimum of last updated time and reward finish time\r\n    uint public updatedAt;\r\n    // Reward to be paid out per second\r\n    uint public rewardRate;\r\n    // Sum of (reward rate * dt * 1e18 / total supply)\r\n    uint public rewardPerTokenStored;\r\n    // User address => rewardPerTokenStored\r\n    mapping(address => uint) public userRewardPerTokenPaid;\r\n    // User address => rewards to be claimed\r\n    mapping(address => uint) public rewards;\r\n\r\n    // Total staked\r\n    uint public totalSupply;\r\n    // User address => staked amount\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    constructor(address _rewardToken) {\r\n        owner = msg.sender;\r\n       // stakingToken = IERC20(_stakingToken);\r\n        rewardsToken = ISaltsToken(_rewardToken);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpdater() {\r\n        require(msg.sender == updater, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(address _account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        updatedAt = lastTimeRewardApplicable();\r\n\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint) {\r\n        return _min(finishAt, block.timestamp);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored +\r\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\r\n            totalSupply;\r\n    }\r\n\r\n    function stake(uint _amount) external updateReward(msg.sender) {\r\n        require(_amount > 0, \"amount = 0\");\r\n        rewardsToken.transferFrom(msg.sender, address(this), _amount);\r\n        balanceOf[msg.sender] += _amount;\r\n        totalSupply += _amount;\r\n    }\r\n\r\n    function withdraw(uint _amount) external updateReward(msg.sender) {\r\n        require(_amount > 0, \"amount = 0\");\r\n        balanceOf[msg.sender] -= _amount;\r\n        totalSupply -= _amount;\r\n        rewardsToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function earned(address _account) public view returns (uint) {\r\n        return\r\n            ((balanceOf[_account] *\r\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\r\n            rewards[_account];\r\n    }\r\n\r\n    function getReward() external updateReward(msg.sender) {\r\n        uint reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            //rewardsToken.transferFrom(vault,msg.sender, reward);\r\n            Ivault.withdraw(reward, msg.sender);\r\n        }\r\n    }\r\n\r\n    function setRewardsDuration(uint _duration) external onlyOwner {\r\n        require(finishAt < block.timestamp, \"reward duration not finished\");\r\n        duration = _duration;\r\n    }\r\n\r\n    function notifyRewardAmount(\r\n        uint _amount\r\n    ) external onlyUpdater updateReward(address(0)) {\r\n        if (block.timestamp >= finishAt) {\r\n            rewardRate = _amount / duration;\r\n        } else {\r\n            uint remainingRewards = (finishAt - block.timestamp) * rewardRate;\r\n            rewardRate = (_amount + remainingRewards) / duration;\r\n        }\r\n\r\n        require(rewardRate > 0, \"reward rate = 0\");\r\n        require(\r\n            rewardRate * duration <= rewardsToken.balanceOf(vault),\r\n            \"reward amount > balance\"\r\n        );\r\n\r\n        finishAt = block.timestamp + duration;\r\n        updatedAt = block.timestamp;\r\n    }\r\n\r\n    function addUpdater(address _updater) public onlyOwner {\r\n        updater = _updater;\r\n    }\r\n\r\n    function addVault(address _vault) public onlyOwner {\r\n        vault = _vault;\r\n        Ivault = IVault(vault);\r\n    }\r\n\r\n    function _min(uint x, uint y) private pure returns (uint) {\r\n        return x <= y ? x : y;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom( address sender, address recipient, uint amount ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"addUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract ISaltsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009e28b00ddd9168aaf649bc2d00e496cac9f825a1", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a24e6645446142cf8f4690c60d5c04804682f12909c24a468ab3fc9e3a2dfa7f"}