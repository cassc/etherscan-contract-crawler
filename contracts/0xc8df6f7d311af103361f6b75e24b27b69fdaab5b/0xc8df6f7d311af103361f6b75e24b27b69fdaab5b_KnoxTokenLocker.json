{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: Knox Vesting ETH.sol\r\n\r\n// This contract serves to secure ERC20 tokens and is versatile for numerous use cases:\r\n// - Allowing token developers to demonstrate that they've secured tokens\r\n// - Enabling presale projects or investors to safeguard a proportion of tokens during a vesting period\r\n// - Permitting farming platforms to secure a percentage of the earned rewards for a set duration\r\n// - Providing functionality to lock tokens until a designated unlock date\r\n// - Enabling the sending of tokens to another entity under a time lock.\r\n\r\n// This contract is tailored for ERC20 tokens, and it accommodates high deflationary and rebasing tokens via a pooling and share issuing method.\r\n// This is NOT applicable for AMM LP tokens (e.g. UNIV2). For such tokens, please use our liquidity lockers.\r\n// Locking LP tokens using this contract will not be displayed in the browser.\r\n\r\n// *** TYPES OF LOCKS ***\r\n// Lock Type 1: A standard lock is created when startEmission == 0, allowing tokens to be withdrawn only on the due date (endEmission).\r\n\r\n// Lock Type 2: Applicable when startEmission != 0. This type enables the locking of tokens over a duration, with a certain amount being withdrawable every block.\r\n// This proportionally scales over the time from startEmission -> endEmission.\r\n// For instance, if the lock period is 100 seconds, 50 seconds post the startEmission, 50% of the lock can be withdrawn.\r\n// Instead of creating 10 separate locks for 10 months to withdraw tokens at each month's end, a single linear scaling lock can be created for a\r\n// 10-month period, allowing the withdrawal of the relative share every block.\r\n\r\n// *** CUSTOM EARLY UNLOCKING CONDITIONS ***\r\n// All locks provide support for early unlocking conditions, achievable via anything implementing the IUnlockCondition interface.\r\n// If IUnlockCondition(address).unlockTokens() is true, the lock withdrawal date is bypassed, allowing the withdrawal of the entire lock value.\r\n// Importantly, this is applicable for early unlocks; locks will revert to the endEmission date even if unlockTokens() is false, ensuring full withdrawal by the unlockDate.\r\n// Example: Consider a 1-week long presale. To prevent marketers from initiating markets and setting initial prices on an AMM, their tokens are locked for 1 week.\r\n// If the presale concludes in 5 minutes, marketers, with conditional unlocks, can access their tokens immediately post-presale, bypassing the 1-week wait.\r\n// Another scenario could be allowing token developers or investors to unlock their tokens prematurely if a specific price target is met or if governance votes\r\n// to unlock tokens early for meeting development milestones or achieving roadmap goals.\r\n\r\n// Creativity is key in devising unlocking conditions!\r\n\r\n// Note: If proving long-term token locks to communities, avoid using premature unlocking conditions as they may affect perceived credibility.\r\n// Such locks will appear differently in browsers compared to standard locks without unlocking conditions.\r\n// However, unlocking conditions can always be rescinded by the lock owner to reinforce the lock's credibility.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0, \"CANT DIVIDE BY 0 OR NEGATIVE NUMBER\");\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1, \"INVALID DENOMINATOR\");\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        unchecked {\r\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\r\n            // Divide denominator by power of two\r\n            assembly {\r\n                denominator := div(denominator, twos)\r\n            }\r\n\r\n            // Divide [prod1 prod0] by the factors of two\r\n            assembly {\r\n                prod0 := div(prod0, twos)\r\n            }\r\n            // Shift in bits from prod1 into prod0. For this we need\r\n            // to flip `twos` such that it is 2**256 / twos.\r\n            // If twos is zero, then it becomes one\r\n            assembly {\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2**256\r\n            // Now that denominator is an odd number, it has an inverse\r\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n            // Compute the inverse by starting with a seed that is correct\r\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n            uint256 inv = (3 * denominator) ^ 2;\r\n            // Now use Newton-Raphson iteration to improve the precision.\r\n            // Thanks to Hensel's lifting lemma, this also works in modular\r\n            // arithmetic, doubling the correct bits in each step.\r\n            inv *= 2 - denominator * inv; // inverse mod 2**8\r\n            inv *= 2 - denominator * inv; // inverse mod 2**16\r\n            inv *= 2 - denominator * inv; // inverse mod 2**32\r\n            inv *= 2 - denominator * inv; // inverse mod 2**64\r\n            inv *= 2 - denominator * inv; // inverse mod 2**128\r\n            inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n            // Because the division is now exact we can divide by multiplying\r\n            // with the modular inverse of denominator. This will give us the\r\n            // correct result modulo 2**256. Since the precoditions guarantee\r\n            // that the outcome is less than 2**256, this is the final result.\r\n            // We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inv;\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n// Allows a seperate contract with a unlockTokens() function to be used to override unlock dates\r\ninterface IUnlockCondition {\r\n    function unlockTokens() external view returns (bool);\r\n}\r\n\r\nlibrary VestingMathLibrary {\r\n    // gets the withdrawable amount from a lock\r\n    function getWithdrawableAmount(\r\n        uint256 startEmission,\r\n        uint256 endEmission,\r\n        uint256 amount,\r\n        uint256 timeStamp,\r\n        address condition\r\n    ) internal view returns (uint256) {\r\n        // It is possible in some cases IUnlockCondition(condition).unlockTokens() will fail (func changes state or does not return a bool)\r\n        // for this reason we implemented revokeCondition per lock so funds are never stuck in the contract.\r\n\r\n        // Prematurely release the lock if the condition is met\r\n        if (\r\n            condition != address(0) &&\r\n            IUnlockCondition(condition).unlockTokens()\r\n        ) {\r\n            return amount;\r\n        }\r\n        // Lock type 1 logic block (Normal Unlock on due date)\r\n        if (startEmission == 0 || startEmission == endEmission) {\r\n            return endEmission < timeStamp ? amount : 0;\r\n        }\r\n        // Lock type 2 logic block (Linear scaling lock)\r\n        uint256 timeClamp = timeStamp;\r\n        if (timeClamp > endEmission) {\r\n            timeClamp = endEmission;\r\n        }\r\n        if (timeClamp < startEmission) {\r\n            timeClamp = startEmission;\r\n        }\r\n        uint256 elapsed = timeClamp - startEmission;\r\n        uint256 fullPeriod = endEmission - startEmission;\r\n        return FullMath.mulDiv(amount, elapsed, fullPeriod); // fullPeriod cannot equal zero due to earlier checks and restraints when locking tokens (startEmission < endEmission)\r\n    }\r\n}\r\n\r\ninterface IMigrator {\r\n    function migrate(\r\n        address token,\r\n        uint256 sharesDeposited,\r\n        uint256 sharesWithdrawn,\r\n        uint256 startEmission,\r\n        uint256 endEmission,\r\n        uint256 lockID,\r\n        address owner,\r\n        address condition,\r\n        uint256 amountInTokens,\r\n        uint256 option\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IAdmin {\r\n    function userIsAdmin(address _user) external view returns (bool);\r\n}\r\n\r\ninterface ITokenBlacklist {\r\n    function checkToken(address _token) external view;\r\n}\r\n\r\ncontract KnoxTokenLocker is Ownable, ReentrancyGuard {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeERC20 for IERC20;\r\n    using Address for *;\r\n\r\n    struct UserInfo {\r\n        EnumerableSet.AddressSet lockedTokens; // stores all token addresses the user has secured\r\n        mapping(address => uint256[]) locksForToken; // associates erc20 address to lockId for the corresponding token\r\n    }\r\n\r\n    struct TokenLock {\r\n        address tokenAddress; // Specifies the token address\r\n        uint256 sharesDeposited; // denotes the total quantity of shares deposited\r\n        uint256 sharesWithdrawn; // represents the quantity of shares retrieved\r\n        uint256 startEmission; // indicates the initiation date of token emission\r\n        uint256 endEmission; // specifies the date when the tokens are accessible for withdrawal\r\n        uint256 lockID; // unique identifier per token lock\r\n        address owner; // refers to the owner who holds the rights to modify or withdraw the lock\r\n        address condition; // address(0) implies no condition, otherwise, the condition contract needs to adhere to IUnlockCondition\r\n    }\r\n\r\n    struct LockParams {\r\n        address payable owner; // denotes the user entitled to withdraw tokens post-expiration of the lock.\r\n        uint256 amount; // represents the quantity of tokens to be locked\r\n        uint256 startEmission; // should be 0 for lock type 1, otherwise, a unix timestamp\r\n        uint256 endEmission; // defines the unlock date in a unix timestamp (in seconds)\r\n        address condition; // address(0) signifies no condition, otherwise, the condition should conform to IUnlockCondition\r\n    }\r\n\r\n    EnumerableSet.AddressSet private TOKENS; // list of all unique tokens that have a lock\r\n    mapping(uint256 => TokenLock) public LOCKS; // map lockID nonce to the lock\r\n    uint256 public NONCE = 0; // incremental lock nonce counter, this is the unique ID for the next lock\r\n    uint256 public constant MINIMUM_DEPOSIT = 100; // minimum divisibility per lock at time of locking\r\n\r\n    mapping(address => uint256[]) private TOKEN_LOCKS; // map token address to array of lockIDs for that token\r\n    mapping(address => UserInfo) private USERS;\r\n\r\n    mapping(address => uint) public SHARES; // map token to number of shares per token, shares allow rebasing and deflationary tokens to compute correctly\r\n\r\n    EnumerableSet.AddressSet private ZERO_FEE_WHITELIST; // Tokens that have been whitelisted to bypass all fees\r\n    EnumerableSet.AddressSet private TOKEN_WHITELISTERS; // whitelisting contracts and users who can enable no fee for tokens.\r\n\r\n    struct FeeStruct {\r\n        uint256 tokenFee;\r\n        uint256 freeLockingFee;\r\n        address payable feeAddress;\r\n        address freeLockingToken; // if this is address(0) then it is the gas token of the network (e.g ETH, BNB, Matic)\r\n    }\r\n\r\n    FeeStruct public FEES;\r\n\r\n    IAdmin ADMINS;\r\n    IMigrator public MIGRATOR;\r\n    ITokenBlacklist public BLACKLIST; // prevent AMM tokens with a blacklisting contract\r\n\r\n    event onLock(\r\n        uint256 lockID,\r\n        address token,\r\n        address owner,\r\n        uint256 amountInTokens,\r\n        uint256 startEmission,\r\n        uint256 endEmission\r\n    );\r\n    event onWithdraw(address lpToken, uint256 amountInTokens);\r\n    event onRelock(uint256 lockID, uint256 unlockDate);\r\n    event onTransferLock(\r\n        uint256 lockIDFrom,\r\n        uint256 lockIDto,\r\n        address oldOwner,\r\n        address newOwner\r\n    );\r\n    event onSplitLock(\r\n        uint256 fromLockID,\r\n        uint256 toLockID,\r\n        uint256 amountInTokens\r\n    );\r\n    event onMigrate(uint256 lockID, uint256 amountInTokens);\r\n\r\n    constructor(IAdmin _Admins) {\r\n        ADMINS = _Admins;\r\n        FEES.tokenFee = 35;\r\n        FEES.feeAddress = payable(0xB906b222C1A94500588b35090e48ef74001d4f14);\r\n        FEES.freeLockingFee = 1e18;\r\n    }\r\n\r\n    /**\r\n     * @notice set the migrator contract which allows the lock to be migrated\r\n     */\r\n    function setMigrator(IMigrator _migrator) external onlyOwner {\r\n        MIGRATOR = _migrator;\r\n    }\r\n\r\n    function setBlacklistContract(\r\n        ITokenBlacklist _contract\r\n    ) external onlyOwner {\r\n        BLACKLIST = _contract;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _tokenFee,\r\n        uint256 _freeLockingFee,\r\n        address payable _feeAddress,\r\n        address _freeLockingToken\r\n    ) external onlyOwner {\r\n        require(_tokenFee < 10000, \"FEE TOO HIGH\");\r\n        require(_feeAddress != address(0), \"INVALID ADDRESS\");\r\n        require(_freeLockingToken != address(0), \"INVALID ADDRESS\");\r\n\r\n        FEES.tokenFee = _tokenFee;\r\n        FEES.freeLockingFee = _freeLockingFee;\r\n        FEES.feeAddress = _feeAddress;\r\n        FEES.freeLockingToken = _freeLockingToken;\r\n    }\r\n\r\n    /**\r\n     * @notice whitelisted accounts and contracts who can call the editZeroFeeWhitelist function\r\n     * @return true on successful execution\r\n     */\r\n    function adminSetWhitelister(\r\n        address _user,\r\n        bool _add\r\n    ) external onlyOwner returns (bool) {\r\n        require(_user != address(0), \"INVALID ADDRESS\");\r\n\r\n        if (_add) {\r\n            TOKEN_WHITELISTERS.add(_user);\r\n            return true;\r\n        } else {\r\n            TOKEN_WHITELISTERS.remove(_user);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice  Pay a once off fee to have free use of the lockers for the token\r\n     * @return true on successful execution\r\n     */\r\n\r\n    function payForFreeTokenLocks(\r\n        address _token\r\n    ) external payable returns (bool) {\r\n        require(!ZERO_FEE_WHITELIST.contains(_token), \"PAID\");\r\n        require(_token != address(0), \"INVALID ADDRESS\");\r\n        // charge Fee\r\n        if (FEES.freeLockingToken == address(0)) {\r\n            require(msg.value == FEES.freeLockingFee, \"FEE NOT MET\");\r\n            FEES.feeAddress.sendValue(FEES.freeLockingFee);\r\n        } else {\r\n            IERC20(address(FEES.freeLockingToken)).safeTransferFrom(\r\n                address(msg.sender),\r\n                FEES.feeAddress,\r\n                FEES.freeLockingFee\r\n            );\r\n        }\r\n        ZERO_FEE_WHITELIST.add(_token);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice  Callable by ADMINS or whitelisted contracts (such as presale contracts)\r\n     * @return true on successful execution\r\n     */\r\n    function editZeroFeeWhitelist(\r\n        address _token,\r\n        bool _add\r\n    ) external returns (bool) {\r\n        require(\r\n            ADMINS.userIsAdmin(msg.sender) ||\r\n                TOKEN_WHITELISTERS.contains(msg.sender),\r\n            \"ADMIN\"\r\n        );\r\n        if (_add) {\r\n            ZERO_FEE_WHITELIST.add(_token);\r\n            return true;\r\n        } else {\r\n            ZERO_FEE_WHITELIST.remove(_token);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Creates one or multiple locks for the specified token\r\n     * @param _token the erc20 token address\r\n     * @param _lock_params an array of locks with format: [LockParams[owner, amount, startEmission, endEmission, condition]]\r\n     * @return true on successful execution\r\n     * owner: user or contract who can withdraw the tokens\r\n     * amount: must be >= 100 units\r\n     * startEmission = 0 : LockType 1\r\n     * startEmission != 0 : LockType 2 (linear scaling lock)\r\n     * use address(0) for no premature unlocking condition\r\n     * Fails if startEmission is not less than EndEmission\r\n     * Fails is amount < 100\r\n     */\r\n    function lock(\r\n        address _token,\r\n        LockParams[] calldata _lock_params\r\n    ) external nonReentrant returns (bool) {\r\n        require(_lock_params.length > 0, \"NO PARAMS\");\r\n        require(_lock_params.length < 10, \"TOO MANY PARAMS\");\r\n        require(_token != address(0), \"INVALID ADDRESS\");\r\n        if (address(BLACKLIST) != address(0)) {\r\n            BLACKLIST.checkToken(_token);\r\n        }\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < _lock_params.length; i++) {\r\n            totalAmount += _lock_params[i].amount;\r\n        }\r\n\r\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\r\n        IERC20(address(_token)).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            totalAmount\r\n        );\r\n        uint256 amountIn = IERC20(_token).balanceOf(address(this)) -\r\n            balanceBefore;\r\n\r\n        // Fees\r\n        if (!ZERO_FEE_WHITELIST.contains(_token)) {\r\n            uint256 lockFee = FullMath.mulDiv(amountIn, FEES.tokenFee, 10000);\r\n            IERC20(address(_token)).safeTransfer(FEES.feeAddress, lockFee);\r\n            amountIn -= lockFee;\r\n        }\r\n\r\n        uint256 shares = 0;\r\n        for (uint256 i = 0; i < _lock_params.length; i++) {\r\n            LockParams memory lock_param = _lock_params[i];\r\n            require(\r\n                lock_param.startEmission < lock_param.endEmission,\r\n                \"PERIOD\"\r\n            );\r\n\r\n            require(lock_param.endEmission < 1e10, \"TIMESTAMP INVALID\"); // prevents errors when timestamp entered in milliseconds\r\n            require(\r\n                lock_param.endEmission > block.timestamp,\r\n                \"BLOCK HEIGHT INVALID\"\r\n            );\r\n            require(lock_param.amount >= MINIMUM_DEPOSIT, \"MIN DEPOSIT\");\r\n            require(lock_param.owner != address(0), \"INVALID ADDRESS\");\r\n\r\n            uint256 amountInTokens = FullMath.mulDiv(\r\n                lock_param.amount,\r\n                amountIn,\r\n                totalAmount\r\n            );\r\n\r\n            if (SHARES[_token] == 0) {\r\n                shares = amountInTokens;\r\n            } else {\r\n                shares = FullMath.mulDiv(\r\n                    amountInTokens,\r\n                    SHARES[_token],\r\n                    balanceBefore == 0 ? 1 : balanceBefore\r\n                );\r\n            }\r\n            require(shares > 0, \"SHARES\");\r\n            SHARES[_token] += shares;\r\n            balanceBefore += amountInTokens;\r\n\r\n            TokenLock memory token_lock;\r\n            token_lock.tokenAddress = _token;\r\n            token_lock.sharesDeposited = shares;\r\n            token_lock.startEmission = lock_param.startEmission;\r\n            token_lock.endEmission = lock_param.endEmission;\r\n            token_lock.lockID = NONCE;\r\n            token_lock.owner = lock_param.owner;\r\n            if (lock_param.condition != address(0)) {\r\n                // if the condition contract does not implement the interface and return a bool\r\n                // the below line will fail and revert the tx as the conditional contract is invalid\r\n                IUnlockCondition(lock_param.condition).unlockTokens();\r\n                token_lock.condition = lock_param.condition;\r\n            }\r\n\r\n            // record the lock globally\r\n            LOCKS[NONCE] = token_lock;\r\n            TOKENS.add(_token);\r\n            TOKEN_LOCKS[_token].push(NONCE);\r\n\r\n            // record the lock for the user\r\n            UserInfo storage user = USERS[lock_param.owner];\r\n            user.lockedTokens.add(_token);\r\n            user.locksForToken[_token].push(NONCE);\r\n\r\n            NONCE++;\r\n            emit onLock(\r\n                token_lock.lockID,\r\n                _token,\r\n                token_lock.owner,\r\n                amountInTokens,\r\n                token_lock.startEmission,\r\n                token_lock.endEmission\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw a specified amount from a lock. _amount is the ideal amount to be withdrawn.\r\n     * however, this amount might be slightly different in rebasing tokens due to the conversion to shares,\r\n     * then back into an amount\r\n     * @param _lockID the lockID of the lock to be withdrawn\r\n     * @param _amount amount of tokens to withdraw\r\n     * @return true on successful execution\r\n     */\r\n    function withdraw(\r\n        uint256 _lockID,\r\n        uint256 _amount\r\n    ) external nonReentrant returns (bool) {\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        require(userLock.owner == msg.sender, \"OWNER\");\r\n        // convert _amount to its representation in shares\r\n        uint256 balance = IERC20(userLock.tokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 shareDebit = FullMath.mulDiv(\r\n            SHARES[userLock.tokenAddress],\r\n            _amount,\r\n            balance\r\n        );\r\n        // round _amount up to the nearest whole share if the amount of tokens specified does not translate to\r\n        // at least 1 share.\r\n        if (shareDebit == 0 && _amount > 0) {\r\n            shareDebit++;\r\n        }\r\n        require(shareDebit > 0, \"ZERO WITHDRAWL\");\r\n        require(SHARES[userLock.tokenAddress] > 0, \"ZERO WITHDRAWL\");\r\n\r\n        uint256 withdrawableShares = getWithdrawableShares(userLock.lockID);\r\n        // dust clearance block, as mulDiv rounds down leaving one share stuck, clear all shares for dust amounts\r\n        if (shareDebit + 1 == withdrawableShares) {\r\n            if (\r\n                FullMath.mulDiv(\r\n                    SHARES[userLock.tokenAddress],\r\n                    balance / SHARES[userLock.tokenAddress],\r\n                    balance\r\n                ) == 0\r\n            ) {\r\n                shareDebit++;\r\n            }\r\n        }\r\n        require(withdrawableShares >= shareDebit, \"AMOUNT\");\r\n        userLock.sharesWithdrawn += shareDebit;\r\n\r\n        // now convert shares to the actual _amount it represents, this may differ slightly from the\r\n        // _amount supplied in this methods arguments.\r\n        uint256 amountInTokens = FullMath.mulDiv(\r\n            shareDebit,\r\n            balance,\r\n            SHARES[userLock.tokenAddress]\r\n        );\r\n        SHARES[userLock.tokenAddress] -= shareDebit;\r\n\r\n        IERC20(address(userLock.tokenAddress)).safeTransfer(\r\n            msg.sender,\r\n            amountInTokens\r\n        );\r\n        emit onWithdraw(userLock.tokenAddress, amountInTokens);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice extend a lock with a new unlock date, if lock is Type 2 it extends the emission end date\r\n     * @return true on successful execution\r\n     */\r\n    function relock(\r\n        uint256 _lockID,\r\n        uint256 _unlock_date\r\n    ) external nonReentrant returns (bool) {\r\n        require(_unlock_date < 1e10, \"TIME\"); // prevents errors when timestamp entered in milliseconds\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        require(userLock.owner == msg.sender, \"OWNER\");\r\n        require(userLock.endEmission < _unlock_date, \"END\");\r\n        // percent fee\r\n        if (!ZERO_FEE_WHITELIST.contains(userLock.tokenAddress)) {\r\n            uint256 remainingShares = userLock.sharesDeposited -\r\n                userLock.sharesWithdrawn;\r\n            uint256 feeInShares = FullMath.mulDiv(\r\n                remainingShares,\r\n                FEES.tokenFee,\r\n                10000\r\n            );\r\n            uint256 balance = IERC20(userLock.tokenAddress).balanceOf(\r\n                address(this)\r\n            );\r\n            uint256 feeInTokens = FullMath.mulDiv(\r\n                feeInShares,\r\n                balance,\r\n                SHARES[userLock.tokenAddress] == 0\r\n                    ? 1\r\n                    : SHARES[userLock.tokenAddress]\r\n            );\r\n            IERC20(address(userLock.tokenAddress)).safeTransfer(\r\n                FEES.feeAddress,\r\n                feeInTokens\r\n            );\r\n            userLock.sharesWithdrawn += feeInShares;\r\n            SHARES[userLock.tokenAddress] -= feeInShares;\r\n        }\r\n        userLock.endEmission = _unlock_date;\r\n        emit onRelock(_lockID, _unlock_date);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock\r\n     * Its possible to increase someone elses lock here it does not need to be your own, useful for contracts\r\n     * @return true on successful execution\r\n     */\r\n    function incrementLock(\r\n        uint256 _lockID,\r\n        uint256 _amount\r\n    ) external nonReentrant returns (bool) {\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        require(_amount >= MINIMUM_DEPOSIT, \"MIN DEPOSIT\");\r\n\r\n        uint256 balanceBefore = IERC20(userLock.tokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        IERC20(address(userLock.tokenAddress)).safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n        uint256 amountInTokens = IERC20(userLock.tokenAddress).balanceOf(\r\n            address(this)\r\n        ) - balanceBefore;\r\n\r\n        // percent fee\r\n        if (!ZERO_FEE_WHITELIST.contains(userLock.tokenAddress)) {\r\n            uint256 lockFee = FullMath.mulDiv(\r\n                amountInTokens,\r\n                FEES.tokenFee,\r\n                10000\r\n            );\r\n            IERC20(address(userLock.tokenAddress)).safeTransfer(\r\n                FEES.feeAddress,\r\n                lockFee\r\n            );\r\n            amountInTokens -= lockFee;\r\n        }\r\n        uint256 shares;\r\n        if (SHARES[userLock.tokenAddress] == 0) {\r\n            shares = amountInTokens;\r\n        } else {\r\n            shares = FullMath.mulDiv(\r\n                amountInTokens,\r\n                SHARES[userLock.tokenAddress],\r\n                balanceBefore\r\n            );\r\n        }\r\n        require(shares > 0, \"SHARES\");\r\n        SHARES[userLock.tokenAddress] += shares;\r\n        userLock.sharesDeposited += shares;\r\n        emit onLock(\r\n            userLock.lockID,\r\n            userLock.tokenAddress,\r\n            userLock.owner,\r\n            amountInTokens,\r\n            userLock.startEmission,\r\n            userLock.endEmission\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice transfer a lock to a new owner, e.g. presale project -> project owner\r\n     * Please be aware this generates a new lock, and nulls the old lock, so a new ID is assigned to the new lock.\r\n          * @return true on successful execution\r\n\r\n     */\r\n    function transferLockOwnership(\r\n        uint256 _lockID,\r\n        address payable _newOwner\r\n    ) external nonReentrant returns (bool) {\r\n        require(msg.sender != _newOwner, \"NOT OWNER\");\r\n        TokenLock storage transferredLock = LOCKS[_lockID];\r\n        require(transferredLock.owner == msg.sender, \"NOT OWNER\");\r\n        require(_newOwner != address(0), \"INVALID ADDRESS\");\r\n        TokenLock memory token_lock;\r\n        token_lock.tokenAddress = transferredLock.tokenAddress;\r\n        token_lock.sharesDeposited = transferredLock.sharesDeposited;\r\n        token_lock.sharesWithdrawn = transferredLock.sharesWithdrawn;\r\n        token_lock.startEmission = transferredLock.startEmission;\r\n        token_lock.endEmission = transferredLock.endEmission;\r\n        token_lock.lockID = NONCE;\r\n        token_lock.owner = _newOwner;\r\n        token_lock.condition = transferredLock.condition;\r\n\r\n        // record the lock globally\r\n        LOCKS[NONCE] = token_lock;\r\n        TOKEN_LOCKS[transferredLock.tokenAddress].push(NONCE);\r\n\r\n        // record the lock for the new owner\r\n        UserInfo storage newOwner = USERS[_newOwner];\r\n        newOwner.lockedTokens.add(transferredLock.tokenAddress);\r\n        newOwner.locksForToken[transferredLock.tokenAddress].push(\r\n            token_lock.lockID\r\n        );\r\n        NONCE++;\r\n\r\n        // zero the lock from the old owner\r\n        transferredLock.sharesWithdrawn = transferredLock.sharesDeposited;\r\n        emit onTransferLock(_lockID, token_lock.lockID, msg.sender, _newOwner);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\r\n     * and withdraw a smaller portion\r\n     * Only works on lock type 1, this feature does not work with lock type 2\r\n     * @param _amount the amount in tokens\r\n     * @return true on successful execution\r\n     */\r\n    function splitLock(\r\n        uint256 _lockID,\r\n        uint256 _amount\r\n    ) external nonReentrant returns (bool) {\r\n        require(_amount > 0, \"ZERO AMOUNT\");\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        require(userLock.owner == msg.sender, \"OWNER\");\r\n        require(userLock.startEmission == 0, \"LOCK TYPE 2\");\r\n\r\n        // convert _amount to its representation in shares\r\n        uint256 balance = IERC20(userLock.tokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 amountInShares = FullMath.mulDiv(\r\n            SHARES[userLock.tokenAddress],\r\n            _amount,\r\n            balance\r\n        );\r\n\r\n        require(\r\n            userLock.sharesWithdrawn + amountInShares <=\r\n                userLock.sharesDeposited,\r\n            \"INVALID AMOUNT TO SPLIT\"\r\n        );\r\n\r\n        TokenLock memory token_lock;\r\n        token_lock.tokenAddress = userLock.tokenAddress;\r\n        token_lock.sharesDeposited = amountInShares;\r\n        token_lock.endEmission = userLock.endEmission;\r\n        token_lock.lockID = NONCE;\r\n        token_lock.owner = msg.sender;\r\n        token_lock.condition = userLock.condition;\r\n\r\n        // debit previous lock\r\n        userLock.sharesWithdrawn += amountInShares;\r\n\r\n        // record the new lock globally\r\n        LOCKS[NONCE] = token_lock;\r\n        TOKEN_LOCKS[userLock.tokenAddress].push(NONCE);\r\n\r\n        // record the new lock for the owner\r\n        USERS[msg.sender].locksForToken[userLock.tokenAddress].push(\r\n            token_lock.lockID\r\n        );\r\n        NONCE++;\r\n        emit onSplitLock(_lockID, token_lock.lockID, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice migrates to the next locker version, only callable by lock owners\r\n     */\r\n    function migrate(uint256 _lockID, uint256 _option) external nonReentrant {\r\n        require(address(MIGRATOR) != address(0), \"NOT SET\");\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        require(userLock.owner == msg.sender, \"OWNER\");\r\n        uint256 sharesAvailable = userLock.sharesDeposited -\r\n            userLock.sharesWithdrawn;\r\n        require(sharesAvailable > 0, \"AMOUNT\");\r\n\r\n        uint256 balance = IERC20(userLock.tokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 amountInTokens = FullMath.mulDiv(\r\n            sharesAvailable,\r\n            balance,\r\n            SHARES[userLock.tokenAddress]\r\n        );\r\n\r\n        IERC20(address(userLock.tokenAddress)).safeApprove(\r\n            address(MIGRATOR),\r\n            amountInTokens\r\n        );\r\n        MIGRATOR.migrate(\r\n            userLock.tokenAddress,\r\n            userLock.sharesDeposited,\r\n            userLock.sharesWithdrawn,\r\n            userLock.startEmission,\r\n            userLock.endEmission,\r\n            userLock.lockID,\r\n            userLock.owner,\r\n            userLock.condition,\r\n            amountInTokens,\r\n            _option\r\n        );\r\n\r\n        userLock.sharesWithdrawn = userLock.sharesDeposited;\r\n        SHARES[userLock.tokenAddress] -= sharesAvailable;\r\n        emit onMigrate(_lockID, amountInTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice premature unlock conditions can be malicous (prevent withdrawls by failing to evalaute or return non bools)\r\n     * or not give community enough insurance tokens will remain locked until the end date, in such a case, it can be revoked\r\n     * @return true on successful execution\r\n     */\r\n    function revokeCondition(\r\n        uint256 _lockID\r\n    ) external nonReentrant returns (bool) {\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        require(userLock.owner == msg.sender, \"OWNER\");\r\n        require(userLock.condition != address(0), \"INVALID CONDITION\"); // already set to address(0)\r\n        userLock.condition = address(0);\r\n        return true;\r\n    }\r\n\r\n    // test a condition on front end, added here for convenience in UI, returns unlockTokens() bool, or fails\r\n    function testCondition(address condition) external view returns (bool) {\r\n        return (IUnlockCondition(condition).unlockTokens());\r\n    }\r\n\r\n    // returns withdrawable share amount from the lock, taking into consideration start and end emission\r\n    function getWithdrawableShares(\r\n        uint256 _lockID\r\n    ) public view returns (uint256) {\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        uint8 lockType = userLock.startEmission == 0 ? 1 : 2;\r\n        uint256 amount = lockType == 1\r\n            ? userLock.sharesDeposited - userLock.sharesWithdrawn\r\n            : userLock.sharesDeposited;\r\n        uint256 withdrawable;\r\n        withdrawable = VestingMathLibrary.getWithdrawableAmount(\r\n            userLock.startEmission,\r\n            userLock.endEmission,\r\n            amount,\r\n            block.timestamp,\r\n            userLock.condition\r\n        );\r\n        if (lockType == 2) {\r\n            withdrawable -= userLock.sharesWithdrawn;\r\n        }\r\n        return withdrawable;\r\n    }\r\n\r\n    // convenience function for UI, converts shares to the current amount in tokens\r\n    function getWithdrawableTokens(\r\n        uint256 _lockID\r\n    ) external view returns (uint256) {\r\n        TokenLock storage userLock = LOCKS[_lockID];\r\n        uint256 withdrawableShares = getWithdrawableShares(userLock.lockID);\r\n        uint256 balance = IERC20(userLock.tokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 amountTokens = FullMath.mulDiv(\r\n            withdrawableShares,\r\n            balance,\r\n            SHARES[userLock.tokenAddress] == 0\r\n                ? 1\r\n                : SHARES[userLock.tokenAddress]\r\n        );\r\n        return amountTokens;\r\n    }\r\n\r\n    // For UI use\r\n    function convertSharesToTokens(\r\n        address _token,\r\n        uint256 _shares\r\n    ) external view returns (uint256) {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        return FullMath.mulDiv(_shares, balance, SHARES[_token]);\r\n    }\r\n\r\n    function convertTokensToShares(\r\n        address _token,\r\n        uint256 _tokens\r\n    ) external view returns (uint256) {\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        return FullMath.mulDiv(SHARES[_token], _tokens, balance);\r\n    }\r\n\r\n    // For use in UI, returns more useful lock Data than just querying LOCKS,\r\n    // such as the real-time token amount representation of a locks shares\r\n    function getLock(\r\n        uint256 _lockID\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            address,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            address\r\n        )\r\n    {\r\n        TokenLock memory tokenLock = LOCKS[_lockID];\r\n\r\n        uint256 balance = IERC20(tokenLock.tokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 totalSharesOr1 = SHARES[tokenLock.tokenAddress] == 0\r\n            ? 1\r\n            : SHARES[tokenLock.tokenAddress];\r\n        // tokens deposited and tokens withdrawn is provided for convenience in UI, with rebasing these amounts will change\r\n        uint256 tokensDeposited = FullMath.mulDiv(\r\n            tokenLock.sharesDeposited,\r\n            balance,\r\n            totalSharesOr1\r\n        );\r\n        uint256 tokensWithdrawn = FullMath.mulDiv(\r\n            tokenLock.sharesWithdrawn,\r\n            balance,\r\n            totalSharesOr1\r\n        );\r\n        return (\r\n            tokenLock.lockID,\r\n            tokenLock.tokenAddress,\r\n            tokensDeposited,\r\n            tokensWithdrawn,\r\n            tokenLock.sharesDeposited,\r\n            tokenLock.sharesWithdrawn,\r\n            tokenLock.startEmission,\r\n            tokenLock.endEmission,\r\n            tokenLock.owner,\r\n            tokenLock.condition\r\n        );\r\n    }\r\n\r\n    function getNumLockedTokens() external view returns (uint256) {\r\n        return TOKENS.length();\r\n    }\r\n\r\n    function getTokenAtIndex(uint256 _index) external view returns (address) {\r\n        return TOKENS.at(_index);\r\n    }\r\n\r\n    function getTokenLocksLength(\r\n        address _token\r\n    ) external view returns (uint256) {\r\n        return TOKEN_LOCKS[_token].length;\r\n    }\r\n\r\n    function getTokenLockIDAtIndex(\r\n        address _token,\r\n        uint256 _index\r\n    ) external view returns (uint256) {\r\n        return TOKEN_LOCKS[_token][_index];\r\n    }\r\n\r\n    // user functions\r\n    function getUserLockedTokensLength(\r\n        address _user\r\n    ) external view returns (uint256) {\r\n        return USERS[_user].lockedTokens.length();\r\n    }\r\n\r\n    function getUserLockedTokenAtIndex(\r\n        address _user,\r\n        uint256 _index\r\n    ) external view returns (address) {\r\n        return USERS[_user].lockedTokens.at(_index);\r\n    }\r\n\r\n    function getUserLocksForTokenLength(\r\n        address _user,\r\n        address _token\r\n    ) external view returns (uint256) {\r\n        return USERS[_user].locksForToken[_token].length;\r\n    }\r\n\r\n    function getUserLockIDForTokenAtIndex(\r\n        address _user,\r\n        address _token,\r\n        uint256 _index\r\n    ) external view returns (uint256) {\r\n        return USERS[_user].locksForToken[_token][_index];\r\n    }\r\n\r\n    // no Fee Tokens\r\n    function getZeroFeeTokensLength() external view returns (uint256) {\r\n        return ZERO_FEE_WHITELIST.length();\r\n    }\r\n\r\n    function getZeroFeeTokenAtIndex(\r\n        uint256 _index\r\n    ) external view returns (address) {\r\n        return ZERO_FEE_WHITELIST.at(_index);\r\n    }\r\n\r\n    function tokenOnZeroFeeWhitelist(\r\n        address _token\r\n    ) external view returns (bool) {\r\n        return ZERO_FEE_WHITELIST.contains(_token);\r\n    }\r\n\r\n    // whitelist\r\n    function getTokenWhitelisterLength() external view returns (uint256) {\r\n        return TOKEN_WHITELISTERS.length();\r\n    }\r\n\r\n    function getTokenWhitelisterAtIndex(\r\n        uint256 _index\r\n    ) external view returns (address) {\r\n        return TOKEN_WHITELISTERS.at(_index);\r\n    }\r\n\r\n    function getTokenWhitelisterStatus(\r\n        address _user\r\n    ) external view returns (bool) {\r\n        return TOKEN_WHITELISTERS.contains(_user);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAdmin\",\"name\":\"_Admins\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endEmission\",\"type\":\"uint256\"}],\"name\":\"onLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTokens\",\"type\":\"uint256\"}],\"name\":\"onMigrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"onRelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromLockID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toLockID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTokens\",\"type\":\"uint256\"}],\"name\":\"onSplitLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIDFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIDto\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onTransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTokens\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLACKLIST\",\"outputs\":[{\"internalType\":\"contract ITokenBlacklist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeLockingFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"freeLockingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LOCKS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIGRATOR\",\"outputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NONCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"adminSetWhitelister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"convertSharesToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"convertTokensToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"editZeroFeeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenLockIDAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenLocksLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTokenWhitelisterAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenWhitelisterLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenWhitelisterStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockIDForTokenAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLockedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserLocksForTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"}],\"name\":\"getWithdrawableShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"}],\"name\":\"getWithdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getZeroFeeTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getZeroFeeTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incrementLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startEmission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endEmission\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"}],\"internalType\":\"struct KnoxTokenLocker.LockParams[]\",\"name\":\"_lock_params\",\"type\":\"tuple[]\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_option\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"payForFreeTokenLocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_date\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"}],\"name\":\"revokeCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenBlacklist\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setBlacklistContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freeLockingFee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_freeLockingToken\",\"type\":\"address\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"splitLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"}],\"name\":\"testCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenOnZeroFeeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KnoxTokenLocker", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000b906b222c1a94500588b35090e48ef74001d4f14", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f340be1d680225172b2292d34bd3cf05e6833f68ad58729e40ae51ef2bc2946e"}