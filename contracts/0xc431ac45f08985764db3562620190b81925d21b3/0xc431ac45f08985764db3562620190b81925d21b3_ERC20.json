{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Twitter: https://twitter.com/0xBased290415\r\n// Website: https://0xbased.io/\r\n// Docs: https://docs.0xbased.io/\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    \r\n    function getAmountsOut(\r\n        uint256 amountIn, \r\n        address[] memory path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    address public owner;\r\n    address private vesting;\r\n    uint256 private claim_count_1 = 0;\r\n    uint256 private claim_count_2 = 0;\r\n    uint256 private deploy_timestamp;\r\n    uint256 private vesting_period = 30*24*60*60*2; //seconds\r\n    uint256 private vesting_balance;\r\n    uint256 private claim_amount;\r\n    address private marketing_1 = 0x544FdE36ED7991F91510B0Ab96A449cC09a63EAb;\r\n    address private marketing_2 = 0xEd26FCc338c79587b727C8dd84b1623924B7420e;\r\n    uint256 private _totalSupply;\r\n    string  private _name;\r\n    string  private _symbol;\r\n    uint256 public buy_fee  = 250;\r\n    uint256 public sell_fee = 300;  \r\n\r\n    uint256 public maxBuySell; \r\n    uint256 private swapThreshold = 0;\r\n\r\n    bool public inSwapAndLiquify = false;\r\n    bool public feeSwapEnable = false;\r\n\r\n    address private constant RouterV2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;      \r\n    address private constant WrappedNativeToken = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;  \r\n\r\n    function getPoolAddress() public view returns (address) {        \r\n        address poolAddress = IUniswapV2Factory(IUniswapV2Router(RouterV2).factory()).getPair(address(this), WrappedNativeToken);        \r\n        return poolAddress;\r\n    }\r\n    function getAmountOutMin(uint256 _amount) public view returns (uint256) {\r\n\t\taddress[] memory path;\r\n\t\tpath = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = IUniswapV2Router(RouterV2).WETH();\r\n\t\tuint256[] memory amountOutMins = IUniswapV2Router(RouterV2).getAmountsOut(_amount, path);\r\n\t\treturn amountOutMins[path.length - 1];\r\n\t}   \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    function swapTokensForETH() public  {\r\n        IERC20(address(this)).approve(RouterV2, type(uint256).max);\r\n        uint256 tokenBalance = balanceOf(address(this)) - vesting_balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = IUniswapV2Router(RouterV2).WETH();\r\n        IUniswapV2Router(RouterV2).swapExactTokensForETH(\r\n            tokenBalance,\r\n            1,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function claim_1() public {\r\n        require(marketing_1 == msg.sender, \"Ownable: caller is not the vesting\");\r\n        require((block.timestamp - deploy_timestamp) / vesting_period > claim_count_1 , \"You can't brand that much in this vesting period\");\r\n        require(4 > claim_count_1 , \"Vesting for this wallet is closed\");\r\n        vesting_balance - claim_amount;\r\n        IERC20(address(this)).transfer(marketing_1, claim_amount);\r\n        claim_count_1++;\r\n    }\r\n    function claim_2() public {\r\n        require(marketing_2 == msg.sender, \"Ownable: caller is not the vesting\");\r\n        require((block.timestamp - deploy_timestamp) / vesting_period > claim_count_2 , \"You can't brand that much in this vesting period\");\r\n        require(4 > claim_count_2 , \"Vesting for this wallet is closed\");\r\n        vesting_balance - claim_amount;\r\n        IERC20(address(this)).transfer(marketing_2, claim_amount);\r\n        claim_count_2++;\r\n    }\r\n    function setFees_15_20() public onlyOwner {                \r\n        buy_fee  = 150;  \r\n        sell_fee = 200;  \r\n    }\r\n    function setFees_10_10() public onlyOwner {                \r\n        buy_fee  = 100;\r\n        sell_fee = 100;\r\n    }\r\n    function setFees__0_8__1_2() public onlyOwner {                \r\n        buy_fee  = 8;\r\n        sell_fee = 12; \r\n    }\r\n    function removeAllFees() public onlyOwner {\r\n        buy_fee  = 0;\r\n        sell_fee = 0; \r\n    }\r\n    function RemoveAllLimits() public onlyOwner {\r\n       maxBuySell = 0;\r\n    }\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function exclude_from_fee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }    \r\n    function include_in_fee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }  \r\n\r\n    constructor() {\r\n        _name = \"0xbased\";\r\n        _symbol = \"0xb\";\r\n        \r\n        uint256 owner_balance = 92000000*10**5;\r\n        vesting_balance = 8000000*10**5;    \r\n        claim_amount = vesting_balance / 8;\r\n        _balances[msg.sender] = owner_balance;\r\n        _balances[address(this)] = vesting_balance;\r\n        emit Transfer(address(0), msg.sender, owner_balance);\r\n        emit Transfer(address(0), address(this), vesting_balance);\r\n       \r\n        _totalSupply = vesting_balance + owner_balance;\r\n        maxBuySell =  _totalSupply * 2 / 100;\r\n        owner = msg.sender;\r\n\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[marketing_1] = true;\r\n        _isExcludedFromFee[marketing_2] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        deploy_timestamp = block.timestamp;\r\n\r\n        // create pool\r\n        IUniswapV2Factory(IUniswapV2Router(RouterV2).factory()).createPair(address(this), WrappedNativeToken);       \r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    } \r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 5;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address _owner = _msgSender();\r\n        _transfer(_owner, to, amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address _owner = _msgSender();\r\n        _approve(_owner, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address _owner = _msgSender();\r\n        _approve(_owner, spender, allowance(_owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address _owner = _msgSender();\r\n        uint256 currentAllowance = allowance(_owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");      \r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        //swap fees\r\n        if (feeSwapEnable){\r\n            uint256 AmountOutMin = getAmountOutMin(_balances[address(this)] - vesting_balance);                \r\n            if(AmountOutMin > swapThreshold &&  !inSwapAndLiquify &&  from != getPoolAddress()){\r\n                inSwapAndLiquify = true;\r\n                swapTokensForETH();\r\n                inSwapAndLiquify = false;    \r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || inSwapAndLiquify) {           \r\n                _balances[from] = fromBalance - amount;\r\n                _balances[to] += amount;        \r\n            emit Transfer(from, to, amount);\r\n        } else {             \r\n                if (to == getPoolAddress() || from == getPoolAddress()) {\r\n                    uint256 _this_fee;   \r\n                    if(maxBuySell > 0) require(maxBuySell >= amount, \"ERC20: The amount of the transfer is more than allowed\");\r\n                    if(to == getPoolAddress()) _this_fee = sell_fee; //if sell \r\n                    if(from == getPoolAddress()) _this_fee = buy_fee; //if buy                    \r\n                \r\n                    uint256 _amount = amount * (1000 - _this_fee) / 1000;\r\n                    _balances[from] = fromBalance - amount;\r\n                    _balances[to]   += _amount;\r\n                    emit Transfer(from, to, _amount);\r\n            \r\n                    uint256 _this_fee_value  = amount * _this_fee  / 1000;               \r\n                    _balances[address(this)] += _this_fee_value;                   \r\n                } else { //if transfer             \r\n                    _balances[from] = fromBalance - amount;\r\n                    _balances[to] += amount;               \r\n                    emit Transfer(from, to, amount);\r\n                } \r\n            }\r\n         // send fees   \r\n         if(address(this).balance > 1 ){\r\n            uint256 send_balance = address(this).balance / 2;\r\n            payable(marketing_1).transfer(send_balance);\r\n            payable(marketing_2).transfer(send_balance);\r\n         }    \r\n    }\r\n    function set_swapThresholdx(uint256 _swapThreshold) public onlyOwner {\r\n        swapThreshold = _swapThreshold;\r\n    }\r\n    function flipFeeSwapEnable() public onlyOwner {\r\n        feeSwapEnable = !feeSwapEnable;\r\n    }\r\n    function _approve(address _owner, address spender, uint256 amount) internal virtual {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address _owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(_owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(_owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RemoveAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"exclude_from_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipFeeSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"include_in_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFees_10_10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFees_15_20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFees__0_8__1_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"}],\"name\":\"set_swapThresholdx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7d782046ec3984b555ef5983fbd5e448891fc764cd1a3b4d2c73f53ef1413dda"}