{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns(address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns(bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns(uint256);\r\n\r\n/**\r\n * @dev Returns the amount of tokens owned by `account`.\r\n */\r\n    function balanceOf(address account) external view returns(uint256);\r\n\r\n/**\r\n * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\n    function transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n/**\r\n * @dev Returns the remaining number of tokens that `spender` will be\r\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n * zero by default.\r\n *\r\n * This value changes when {approve} or {transferFrom} are called.\r\n */\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n\r\n/**\r\n * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n * that someone may use both the old and the new allowance by unfortunate\r\n * transaction ordering. One possible solution to mitigate this race\r\n * condition is to first reduce the spender's allowance to 0 and set the\r\n * desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n *\r\n * Emits an {Approval} event.\r\n */\r\n    function approve(address spender, uint256 amount) external returns(bool);\r\n\r\n/**\r\n * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n * allowance mechanism. `amount` is then deducted from the caller's\r\n * allowance.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns(bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract FrenbotMigrationClaim is Ownable {\r\n\r\n    IERC20 tokenV1;\r\n    IERC20 tokenV2;\r\n\r\n    uint phaseNumber = 0;\r\n\r\n    mapping(address => uint256) public phaseTwoClaimable;\r\n\r\n    constructor() {\r\n        tokenV1 = IERC20(address(0xCA5001bC5134302Dbe0F798a2d0b95Ef3cF0803F));\r\n        tokenV2 = IERC20(address(0x19bE3a0f1a6cccC99B3Cdc13475613E559BE551c));\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n\r\n    // @dev Phase 1 - holders deposit MefV1 to claim MefV2\r\n    function phaseOneClaim(uint mefV1Amt) external {\r\n        require(phaseNumber != 0, \"Claiming has not begun.\");\r\n        require(phaseNumber == 1, \"Initial claim phase has ended.\");\r\n\r\n        uint userBalance = tokenV1.balanceOf(msg.sender);\r\n        require(userBalance >= mefV1Amt, \"User insufficient MefV1 balance\");\r\n\r\n        uint contractMefV2Balance = tokenV2.balanceOf(address(this));\r\n        require(contractMefV2Balance >= mefV1Amt, \"Insufficient MefV2 balance in contract.\");\r\n\r\n        tokenV1.transferFrom(msg.sender, address(this), mefV1Amt);\r\n        tokenV2.transfer(msg.sender, mefV1Amt);\r\n    }\r\n\r\n    // @dev Phase 2 - holders claim remaining MefV2\r\n    function phaseTwoSnapshotClaim(uint mefV1Amt) external {\r\n        require(phaseNumber > 1, \"Phase 2 claim has not started\");\r\n        require(phaseTwoClaimable[msg.sender] > 0, \"User has no tokens to claim\");\r\n        require(mefV1Amt <= phaseTwoClaimable[msg.sender]);\r\n\r\n        uint userBalance = tokenV1.balanceOf(msg.sender);\r\n        require(userBalance >= mefV1Amt, \"User insufficient MefV1 balance.\");\r\n\r\n        uint contractMefV2Balance = tokenV2.balanceOf(address(this));\r\n        require(contractMefV2Balance >= mefV1Amt, \"Insufficient MefV2 balance in contract.\");\r\n\r\n        phaseTwoClaimable[msg.sender] -= mefV1Amt;\r\n\r\n        tokenV1.transferFrom(msg.sender, address(this), mefV1Amt);\r\n        tokenV2.transfer(msg.sender, mefV1Amt);\r\n    }\r\n\r\n    // @dev Set to non-'1' value to end initial claiming phase\r\n    function setTokenAddresses(address tknV1, address tknV2) external onlyOwner {\r\n        tokenV1 = IERC20(tknV1);\r\n        tokenV2 = IERC20(tknV2);\r\n    }\r\n\r\n\r\n    // @dev Set to non-'1' value to end initial claiming phase\r\n    function setPhaseNumber(uint _phaseNumber) external onlyOwner {\r\n        phaseNumber = _phaseNumber;\r\n    }\r\n\r\n    // @dev Set claimable amount for remaining holders after phase 1 snapshot\r\n    function setPhaseTwoClaimable(address[] calldata addrs, uint[] calldata amt) external onlyOwner {\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            phaseTwoClaimable[addrs[i]] = amt[i];\r\n        }\r\n    }\r\n\r\n    function withdrawToken(address _token, address _to) external onlyOwner {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function withdrawStuckEth(address toAddr) external onlyOwner {\r\n        (bool success, ) = toAddr.call{\r\n                value: address(this).balance\r\n            } (\"\");\r\n        require(success);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mefV1Amt\",\"type\":\"uint256\"}],\"name\":\"phaseOneClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"phaseTwoClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mefV1Amt\",\"type\":\"uint256\"}],\"name\":\"phaseTwoSnapshotClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseNumber\",\"type\":\"uint256\"}],\"name\":\"setPhaseNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amt\",\"type\":\"uint256[]\"}],\"name\":\"setPhaseTwoClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tknV1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tknV2\",\"type\":\"address\"}],\"name\":\"setTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"}],\"name\":\"withdrawStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FrenbotMigrationClaim", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2afdd5743afefb50a846954dcd1e1f662a327b7e2d0ea8b73b2b24359028967d"}