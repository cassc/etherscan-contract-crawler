{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\n// File: lib/ipor-power-tokens/contracts/libraries/errors/Errors.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary Errors {\r\n    /// @notice Error thrown when the lpToken address is not supported\r\n    /// @dev List of supported LpTokens is defined in {LiquidityMining._lpTokens}\r\n    string public constant LP_TOKEN_NOT_SUPPORTED = \"PT_701\";\r\n    /// @notice Error thrown when the caller / msgSender is not a Pause Manager address.\r\n    /// @dev Pause Manager can be defined by the smart contract's Onwer\r\n    string public constant CALLER_NOT_PAUSE_MANAGER = \"PT_704\";\r\n    /// @notice Error thrown when the account's base balance is too low\r\n    string public constant ACCOUNT_BASE_BALANCE_IS_TOO_LOW = \"PT_705\";\r\n    /// @notice Error thrown when the account's Lp Token balance is too low\r\n    string public constant ACCOUNT_LP_TOKEN_BALANCE_IS_TOO_LOW = \"PT_706\";\r\n    /// @notice Error thrown when the account's delegated balance is too low\r\n    string public constant ACC_DELEGATED_TO_LIQUIDITY_MINING_BALANCE_IS_TOO_LOW = \"PT_707\";\r\n    /// @notice Error thrown when the account's available Power Token balance is too low\r\n    string public constant ACC_AVAILABLE_POWER_TOKEN_BALANCE_IS_TOO_LOW = \"PT_708\";\r\n    /// @notice Error thrown when the account doesn't have the rewards (Staked Tokens / Power Tokens) to claim\r\n    string public constant NO_REWARDS_TO_CLAIM = \"PT_709\";\r\n    /// @notice Error thrown when the cooldown is not finished.\r\n    string public constant COOL_DOWN_NOT_FINISH = \"PT_710\";\r\n    /// @notice Error thrown when the aggregate power up indicator is going to be negative during the calculation.\r\n    string public constant AGGREGATE_POWER_UP_COULD_NOT_BE_NEGATIVE = \"PT_711\";\r\n    /// @notice Error thrown when the block number used in the function is lower than previous block number stored in the liquidity mining indicators.\r\n    string public constant BLOCK_NUMBER_LOWER_THAN_PREVIOUS_BLOCK_NUMBER = \"PT_712\";\r\n    /// @notice Account Composite Multiplier indicator is greater or equal to Composit Multiplier indicator, but it should be lower or equal\r\n    string public constant ACCOUNT_COMPOSITE_MULTIPLIER_GT_COMPOSITE_MULTIPLIER = \"PT_713\";\r\n    /// @notice The fee for unstacking of Power Tokens should be number between (0, 1e18)\r\n    string public constant UNSTAKE_WITHOUT_COOLDOWN_FEE_IS_TO_HIGH = \"PT_714\";\r\n    /// @notice General problem, address is wrong\r\n    string public constant WRONG_ADDRESS = \"PT_715\";\r\n    /// @notice General problem, contract is wrong\r\n    string public constant WRONG_CONTRACT_ID = \"PT_716\";\r\n    /// @notice Value not greater than zero\r\n    string public constant VALUE_NOT_GREATER_THAN_ZERO = \"PT_717\";\r\n    /// @notice Appeared when input of two arrays length mismatch\r\n    string public constant INPUT_ARRAYS_LENGTH_MISMATCH = \"PT_718\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant SENDER_NOT_APPOINTED_OWNER = \"PT_719\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant ROUTER_INVALID_SIGNATURE = \"PT_720\";\r\n    string public constant INPUT_ARRAYS_EMPTY = \"PT_721\";\r\n    string public constant CALLER_NOT_ROUTER = \"PT_722\";\r\n    string public constant CALLER_NOT_GUARDIAN = \"PT_723\";\r\n    string public constant CONTRACT_PAUSED = \"PT_724\";\r\n    string public constant REENTRANCY = \"PT_725\";\r\n    string public constant CALLER_NOT_OWNER = \"PT_726\";\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/libraries/ContractValidator.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nlibrary ContractValidator {\r\n    function checkAddress(address addr) internal pure returns (address) {\r\n        require(addr != address(0), Errors.WRONG_ADDRESS);\r\n        return addr;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/types/PowerTokenTypes.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Struct used across Liquidity Mining.\r\nlibrary PowerTokenTypes {\r\n    struct PwTokenCooldown {\r\n        // @dev The timestamp when the account can redeem Power Tokens\r\n        uint256 endTimestamp;\r\n        // @dev The amount of Power Tokens which can be redeemed without fee when the cooldown reaches `endTimestamp`\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    struct UpdateGovernanceToken {\r\n        address beneficiary;\r\n        uint256 governanceTokenAmount;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IPowerToken.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title The Interface for the interaction with the PowerToken - smart contract responsible\r\n/// for managing Power Token (pwToken), Swapping Staked Token for Power Tokens, and\r\n/// delegating Power Tokens to other components.\r\ninterface IPowerToken {\r\n    /// @notice Gets the name of the Power Token\r\n    /// @return Returns the name of the Power Token.\r\n    function name() external pure returns (string memory);\r\n\r\n    /// @notice Contract ID. The keccak-256 hash of \"io.ipor.PowerToken\" decreased by 1\r\n    /// @return Returns the ID of the contract\r\n    function getContractId() external pure returns (bytes32);\r\n\r\n    /// @notice Gets the symbol of the Power Token.\r\n    /// @return Returns the symbol of the Power Token.\r\n    function symbol() external pure returns (string memory);\r\n\r\n    /// @notice Returns the number of the decimals used by Power Token. By default it's 18 decimals.\r\n    /// @return Returns the number of decimals: 18.\r\n    function decimals() external pure returns (uint8);\r\n\r\n    /// @notice Gets the total supply of the Power Token.\r\n    /// @dev Value is calculated in runtime using baseTotalSupply and internal exchange rate.\r\n    /// @return Total supply of Power tokens, represented with 18 decimals\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Gets the balance of Power Tokens for a given account\r\n    /// @param account account address for which the balance of Power Tokens is fetched\r\n    /// @return Returns the amount of the Power Tokens owned by the `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Gets the delegated balance of the Power Tokens for a given account.\r\n    /// Tokens are delegated from PowerToken to LiquidityMining smart contract (reponsible for rewards distribution).\r\n    /// @param account account address for which the balance of delegated Power Tokens is checked\r\n    /// @return  Returns the amount of the Power Tokens owned by the `account` and delegated to the LiquidityMining contracts.\r\n    function delegatedToLiquidityMiningBalanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Gets the rate of the fee from the configuration. This fee is applied when the owner of Power Tokens wants to unstake them immediately.\r\n    /// @dev Fee value represented in as a percentage with 18 decimals\r\n    /// @return value, a percentage represented with 18 decimal\r\n    function getUnstakeWithoutCooldownFee() external view returns (uint256);\r\n\r\n    /// @notice Gets the state of the active cooldown for the sender.\r\n    /// @dev If PowerTokenTypes.PowerTokenCoolDown contains only zeros it represents no active cool down.\r\n    /// Struct containing information on when the cooldown end and what is the quantity of the Power Tokens locked.\r\n    /// @param account account address that owns Power Tokens in the cooldown\r\n    /// @return Object PowerTokenTypes.PowerTokenCoolDown represents active cool down\r\n    function getActiveCooldown(\r\n        address account\r\n    ) external view returns (PowerTokenTypes.PwTokenCooldown memory);\r\n\r\n    /// @notice Initiates a cooldown for the specified account.\r\n    /// @dev This function allows an account to initiate a cooldown period for a specified amount of Power Tokens.\r\n    ///      During the cooldown period, the specified amount of Power Tokens cannot be redeemed or transferred.\r\n    /// @param account The account address for which the cooldown is initiated.\r\n    /// @param pwTokenAmount The amount of Power Tokens to be put on cooldown.\r\n    function cooldownInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Cancels the cooldown for the specified account.\r\n    /// @dev This function allows an account to cancel the active cooldown period for their Power Tokens,\r\n    ///      enabling them to freely redeem or transfer their Power Tokens.\r\n    /// @param account The account address for which the cooldown is to be canceled.\r\n    function cancelCooldownInternal(address account) external;\r\n\r\n    /// @notice Redeems Power Tokens for the specified account.\r\n    /// @dev This function allows an account to redeem their Power Tokens, transferring the specified\r\n    ///      amount of Power Tokens back to the account's staked token balance.\r\n    ///      The redemption is subject to the cooldown period, and the account must wait for the cooldown\r\n    ///      period to finish before being able to redeem the Power Tokens.\r\n    /// @param account The account address for which Power Tokens are to be redeemed.\r\n    /// @return transferAmount The amount of Power Tokens that have been redeemed and transferred back to the staked token balance.\r\n    function redeemInternal(address account) external returns (uint256 transferAmount);\r\n\r\n    /// @notice Adds staked tokens to the specified account.\r\n    /// @dev This function allows the specified account to add staked tokens to their Power Token balance.\r\n    ///      The staked tokens are converted to Power Tokens based on the internal exchange rate.\r\n    /// @param updateGovernanceToken An object of type PowerTokenTypes.UpdateGovernanceToken containing the details of the staked token update.\r\n    function addGovernanceTokenInternal(\r\n        PowerTokenTypes.UpdateGovernanceToken memory updateGovernanceToken\r\n    ) external;\r\n\r\n    /// @notice Removes staked tokens from the specified account, applying a fee.\r\n    /// @dev This function allows the specified account to remove staked tokens from their Power Token balance,\r\n    ///      while deducting a fee from the staked token amount. The fee is determined based on the cooldown period.\r\n    /// @param updateGovernanceToken An object of type PowerTokenTypes.UpdateGovernanceToken containing the details of the staked token update.\r\n    /// @return governanceTokenAmountToTransfer The amount of staked tokens to be transferred after applying the fee.\r\n    function removeGovernanceTokenWithFeeInternal(\r\n        PowerTokenTypes.UpdateGovernanceToken memory updateGovernanceToken\r\n    ) external returns (uint256 governanceTokenAmountToTransfer);\r\n\r\n    /// @notice Delegates a specified amount of Power Tokens from the caller's balance to the Liquidity Mining contract.\r\n    /// @dev This function allows the caller to delegate a specified amount of Power Tokens to the Liquidity Mining contract,\r\n    ///      enabling them to participate in liquidity mining and earn rewards.\r\n    /// @param account The address of the account delegating the Power Tokens.\r\n    /// @param pwTokenAmount The amount of Power Tokens to delegate.\r\n    function delegateInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Undelegated a specified amount of Power Tokens from the Liquidity Mining contract back to the caller's balance.\r\n    /// @dev This function allows the caller to undelegate a specified amount of Power Tokens from the Liquidity Mining contract,\r\n    ///      effectively removing them from participation in liquidity mining and stopping the earning of rewards.\r\n    /// @param account The address of the account to undelegate the Power Tokens from.\r\n    /// @param pwTokenAmount The amount of Power Tokens to undelegate.\r\n    function undelegateInternal(address account, uint256 pwTokenAmount) external;\r\n\r\n    /// @notice Emitted when the account stake/add [Staked] Tokens\r\n    /// @param account account address that executed the staking\r\n    /// @param governanceTokenAmount of Staked Token amount being staked into PowerToken contract\r\n    /// @param internalExchangeRate internal exchange rate used to calculate the base amount\r\n    /// @param baseAmount value calculated based on the governanceTokenAmount and the internalExchangeRate\r\n    event GovernanceTokenAdded(\r\n        address indexed account,\r\n        uint256 governanceTokenAmount,\r\n        uint256 internalExchangeRate,\r\n        uint256 baseAmount\r\n    );\r\n\r\n    /// @notice Emitted when the account unstakes the Power Tokens\r\n    /// @param account address that executed the unstaking\r\n    /// @param pwTokenAmount amount of Power Tokens that were unstaked\r\n    /// @param internalExchangeRate which was used to calculate the base amount\r\n    /// @param fee amount subtracted from the pwTokenAmount\r\n    event GovernanceTokenRemovedWithFee(\r\n        address indexed account,\r\n        uint256 pwTokenAmount,\r\n        uint256 internalExchangeRate,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice Emitted when the sender delegates the Power Tokens to the LiquidityMining contract\r\n    /// @param account address delegating the Power Tokens\r\n    /// @param pwTokenAmounts amounts of Power Tokens delegated to respective lpTokens\r\n    event Delegated(address indexed account, uint256 pwTokenAmounts);\r\n\r\n    /// @notice Emitted when the sender undelegates Power Tokens from the LiquidityMining\r\n    /// @param account address undelegating Power Tokens\r\n    /// @param pwTokenAmounts amounts of Power Tokens undelegated form respective lpTokens\r\n    event Undelegated(address indexed account, uint256 pwTokenAmounts);\r\n\r\n    /// @notice Emitted when the sender sets the cooldown on Power Tokens\r\n    /// @param pwTokenAmount amount of pwToken in cooldown\r\n    /// @param endTimestamp end time of the cooldown\r\n    event CooldownChanged(uint256 pwTokenAmount, uint256 endTimestamp);\r\n\r\n    /// @notice Emitted when the sender redeems the pwTokens after the cooldown\r\n    /// @param account address that executed the redeem function\r\n    /// @param pwTokenAmount amount of the pwTokens that was transferred to the Power Token owner's address\r\n    event Redeem(address indexed account, uint256 pwTokenAmount);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/types/LiquidityMiningTypes.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Structures used in the LiquidityMining.\r\nlibrary LiquidityMiningTypes {\r\n    /// @title Struct pair representing delegated pwToken balance\r\n    struct DelegatedPwTokenBalance {\r\n        /// @notice lpToken address\r\n        address lpToken;\r\n        /// @notice The amount of Power Token delegated to lpToken staking pool\r\n        /// @dev value represented in 18 decimals\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    /// @title Global indicators used in rewards calculation.\r\n    struct GlobalRewardsIndicators {\r\n        /// @notice powerUp indicator aggregated\r\n        /// @dev It can be changed many times during transaction, represented with 18 decimals\r\n        uint256 aggregatedPowerUp;\r\n        /// @notice composite multiplier in a block described in field blockNumber\r\n        /// @dev It can be changed many times during transaction, represented with 27 decimals\r\n        uint128 compositeMultiplierInTheBlock;\r\n        /// @notice Composite multiplier updated in block {blockNumber} but calculated for PREVIOUS (!) block.\r\n        /// @dev It can be changed once per block, represented with 27 decimals\r\n        uint128 compositeMultiplierCumulativePrevBlock;\r\n        /// @dev It can be changed once per block. Block number in which all other params of this structure are updated\r\n        uint32 blockNumber;\r\n        /// @notice value describing amount of rewards issued per block,\r\n        /// @dev It can be changed at most once per block, represented with 8 decimals\r\n        uint32 rewardsPerBlock;\r\n        /// @notice amount of accrued rewards since inception\r\n        /// @dev It can be changed at most once per block, represented with 18 decimals\r\n        uint88 accruedRewards;\r\n    }\r\n\r\n    /// @title Params recorded for a given account. These params are used by the algorithm responsible for rewards distribution.\r\n    /// @dev The structure in storage is updated when account interacts with the LiquidityMining smart contract (stake, unstake, delegate, undelegate, claim)\r\n    struct AccountRewardsIndicators {\r\n        /// @notice `composite multiplier cumulative` is calculated for previous block\r\n        /// @dev represented in 27 decimals\r\n        uint128 compositeMultiplierCumulativePrevBlock;\r\n        /// @notice lpToken account's balance\r\n        uint128 lpTokenBalance;\r\n        /// @notive PowerUp is a result of logarithmic equastion,\r\n        /// @dev  powerUp < 100 *10^18\r\n        uint72 powerUp;\r\n        /// @notice balance of Power Tokens delegated to LiquidityMining\r\n        /// @dev delegatedPwTokenBalance < 10^26 < 2^87\r\n        uint96 delegatedPwTokenBalance;\r\n    }\r\n\r\n    struct UpdateLpToken {\r\n        address beneficiary;\r\n        address lpToken;\r\n        uint256 lpTokenAmount;\r\n    }\r\n\r\n    struct UpdatePwToken {\r\n        address beneficiary;\r\n        address lpToken;\r\n        uint256 pwTokenAmount;\r\n    }\r\n\r\n    struct AccruedRewardsResult {\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n    }\r\n\r\n    struct AccountRewardResult {\r\n        address lpToken;\r\n        uint256 rewardsAmount;\r\n        uint256 allocatedPwTokens;\r\n    }\r\n\r\n    struct AccountIndicatorsResult {\r\n        address lpToken;\r\n        LiquidityMiningTypes.AccountRewardsIndicators indicators;\r\n    }\r\n\r\n    struct GlobalIndicatorsResult {\r\n        address lpToken;\r\n        LiquidityMiningTypes.GlobalRewardsIndicators indicators;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/ILiquidityMining.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n/// @title The interface for interaction with the LiquidityMining.\r\n/// LiquidityMining is responsible for the distribution of the Power Token rewards to accounts\r\n/// staking lpTokens and / or delegating Power Tokens to LiquidityMining. LpTokens can be staked directly to the LiquidityMining,\r\n/// Power Tokens are a staked version of the [Staked] Tokens minted by the PowerToken smart contract.\r\ninterface ILiquidityMining {\r\n    /// @notice Contract ID. The keccak-256 hash of \"io.ipor.LiquidityMining\" decreased by 1\r\n    /// @return Returns an ID of the contract\r\n    function getContractId() external pure returns (bytes32);\r\n\r\n    /// @notice Returns the balance of staked lpTokens\r\n    /// @param account the account's address\r\n    /// @param lpToken the address of lpToken\r\n    /// @return balance of the lpTokens staked by the sender\r\n    function balanceOf(address account, address lpToken) external view returns (uint256);\r\n\r\n    /// @notice It returns the balance of delegated Power Tokens for a given `account` and the list of lpToken addresses.\r\n    /// @param account address for which to fetch the information about balance of delegated Power Tokens\r\n    /// @param lpTokens list of lpTokens addresses(lpTokens)\r\n    /// @return balances list of {LiquidityMiningTypes.DelegatedPwTokenBalance} structure, with information how much Power Token is delegated per lpToken address.\r\n    function balanceOfDelegatedPwToken(\r\n        address account,\r\n        address[] memory lpTokens\r\n    ) external view returns (LiquidityMiningTypes.DelegatedPwTokenBalance[] memory balances);\r\n\r\n    /// @notice Calculates the accrued rewards for multiple LP tokens.\r\n    /// @param lpTokens An array of LP token addresses.\r\n    /// @return An array of `AccruedRewardsResult` structures, containing the LP token address and the accrued rewards amount.\r\n    function calculateAccruedRewards(\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccruedRewardsResult[] memory);\r\n\r\n    /// @notice Calculates the rewards earned by an account for multiple LP tokens.\r\n    /// @param account The address of the account for which to calculate rewards.\r\n    /// @param lpTokens An array of LP token addresses.\r\n    /// @return An array of `AccountRewardResult` structures, containing the LP token address, rewards amount, and allocated Power Token balance for the account.\r\n    function calculateAccountRewards(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountRewardResult[] memory);\r\n\r\n    /// @notice method allowing to update the indicators per asset (lpToken).\r\n    /// @param account of which we should update the indicators\r\n    /// @param lpTokens of the staking pools to update the indicators\r\n    function updateIndicators(address account, address[] calldata lpTokens) external;\r\n\r\n    /// @notice Adds LP tokens to the liquidity mining for multiple accounts.\r\n    /// @param updateLpToken An array of `UpdateLpToken` structures, each containing the account address,\r\n    /// LP token address, and LP token amount to be added.\r\n    function addLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external;\r\n\r\n    /// @notice Adds Power tokens to the liquidity mining for multiple accounts.\r\n    /// @param updatePwToken An array of `UpdatePwToken` structures, each containing the account address,\r\n    /// LP token address, and Power token amount to be added.\r\n    function addPwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwToken\r\n    ) external;\r\n\r\n    /// @notice Removes LP tokens from the liquidity mining for multiple accounts.\r\n    /// @param updateLpToken An array of `UpdateLpToken` structures, each containing the account address,\r\n    /// LP token address, and LP token amount to be removed.\r\n    function removeLpTokensInternal(\r\n        LiquidityMiningTypes.UpdateLpToken[] memory updateLpToken\r\n    ) external;\r\n\r\n    /// @notice Removes Power Tokens from the liquidity mining for multiple accounts.\r\n    /// @param updatePwToken An array of `UpdatePwToken` structures, each containing the account address,\r\n    /// LP token address, and Power Token amount to be removed.\r\n    function removePwTokensInternal(\r\n        LiquidityMiningTypes.UpdatePwToken[] memory updatePwToken\r\n    ) external;\r\n\r\n    /// @notice Claims accumulated rewards for multiple LP tokens and transfers them to the specified account.\r\n    /// @param account The account address to claim rewards for.\r\n    /// @param lpTokens An array of LP token addresses for which rewards will be claimed.\r\n    /// @return rewardsAmountToTransfer The total amount of rewards transferred to the account.\r\n    function claimInternal(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external returns (uint256 rewardsAmountToTransfer);\r\n\r\n    /// @notice Retrieves the global indicators for multiple LP tokens.\r\n    /// @param lpTokens An array of LP token addresses for which to retrieve the global indicators.\r\n    /// @return An array of LiquidityMiningTypes.GlobalIndicatorsResult containing the global indicators for each LP token.\r\n    function getGlobalIndicators(\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.GlobalIndicatorsResult[] memory);\r\n\r\n    /// @notice Retrieves the account indicators for a specific account and multiple LP tokens.\r\n    /// @param account The address of the account for which to retrieve the account indicators.\r\n    /// @param lpTokens An array of LP token addresses for which to retrieve the account indicators.\r\n    /// @return An array of LiquidityMiningTypes.AccountIndicatorsResult containing the account indicators for each LP token.\r\n    function getAccountIndicators(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external view returns (LiquidityMiningTypes.AccountIndicatorsResult[] memory);\r\n\r\n    /// @notice Emitted when the account stakes the lpTokens\r\n    /// @param account Account's address in the context of which the activities of staking of lpTokens are performed\r\n    /// @param lpToken address of lpToken being staked\r\n    /// @param lpTokenAmount of lpTokens to stake, represented with 18 decimals\r\n    event LpTokensStaked(address account, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the account claims the rewards\r\n    /// @param account Account's address in the context of which activities of claiming are performed\r\n    /// @param lpTokens The addresses of the lpTokens for which the rewards are claimed\r\n    /// @param rewardsAmount Reward amount denominated in pwToken, represented with 18 decimals\r\n    event Claimed(address account, address[] lpTokens, uint256 rewardsAmount);\r\n\r\n    /// @notice Emitted when the account claims the allocated rewards\r\n    /// @param account Account address in the context of which activities of claiming are performed\r\n    /// @param allocatedRewards Reward amount denominated in pwToken, represented in 18 decimals\r\n    event AllocatedTokensClaimed(address account, uint256 allocatedRewards);\r\n\r\n    /// @notice Emitted when update was triggered for the account on the lpToken\r\n    /// @param account Account address to which the update was triggered\r\n    /// @param lpToken lpToken address to which the update was triggered\r\n    event IndicatorsUpdated(address account, address lpToken);\r\n\r\n    /// @notice Emitted when the lpToken is added to the LiquidityMining\r\n    /// @param beneficiary Account address on behalf of which the lpToken is added\r\n    /// @param lpToken lpToken address which is added\r\n    /// @param lpTokenAmount Amount of lpTokens added, represented with 18 decimals\r\n    event LpTokenAdded(address beneficiary, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the lpToken is removed from the LiquidityMining\r\n    /// @param account address on behalf of which the lpToken is removed\r\n    /// @param lpToken lpToken address which is removed\r\n    /// @param lpTokenAmount Amount of lpTokens removed, represented with 18 decimals\r\n    event LpTokensRemoved(address account, address lpToken, uint256 lpTokenAmount);\r\n\r\n    /// @notice Emitted when the PwTokens is added to lpToken pool\r\n    /// @param beneficiary Account address on behalf of which the PwToken is added\r\n    /// @param lpToken lpToken address to which the PwToken is added\r\n    /// @param pwTokenAmount Amount of PwTokens added, represented with 18 decimals\r\n    event PwTokensAdded(address beneficiary, address lpToken, uint256 pwTokenAmount);\r\n\r\n    /// @notice Emitted when the PwTokens is removed from lpToken pool\r\n    /// @param account Account address on behalf of which the PwToken is removed\r\n    /// @param lpToken lpToken address from which the PwToken is removed\r\n    /// @param pwTokenAmount Amount of PwTokens removed, represented with 18 decimals\r\n    event PwTokensRemoved(address account, address lpToken, uint256 pwTokenAmount);\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/interfaces/IPowerTokenFlowsService.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\ninterface IPowerTokenFlowsService {\r\n    /// @notice Claims rewards for the caller by transferring them from the LiquidityMining contract to the PowerToken contract.\r\n    /// @param lpTokens An array of LP tokens for which the rewards are to be claimed.\r\n    /// @dev This function calls the `claim` function of the `ILiquidityMining` contract to retrieve the rewards amount to transfer.\r\n    /// It then adds the staked tokens to the `powerToken` contract and transfers the rewards from the `liquidityMining` contract to the `powerToken` contract.\r\n    /// @dev Reverts if the `lpTokens` array is empty.\r\n    /// @dev Reverts if there are no rewards to claim.\r\n    function claimRewardsFromLiquidityMining(address[] calldata lpTokens) external;\r\n\r\n    /// @notice Updates the indicators for a given account and LP tokens.\r\n    /// @param account The account address for which the indicators are to be updated.\r\n    /// @param lpTokens An array of LP tokens for which the indicators are to be updated.\r\n    /// @dev This function calls the `updateIndicators` function of the `ILiquidityMining` contract to update the indicators.\r\n    /// @dev Reverts if the `lpTokens` array is empty.\r\n    function updateIndicatorsInLiquidityMining(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external;\r\n\r\n    /// @notice Delegates staked tokens by providing LP tokens and corresponding amounts.\r\n    /// @param lpTokens An array of LP tokens to delegate.\r\n    /// @param pwTokenAmounts An array of corresponding amounts of LP tokens to delegate.\r\n    /// @dev This function allows the caller to delegate their staked tokens by providing the LP tokens and their corresponding amounts.\r\n    /// @dev It requires that the length of `lpTokens` is equal to the length of `lpTokenAmounts`.\r\n    /// @dev It reverts if either `lpTokens` or `lpTokenAmounts` arrays are empty.\r\n    function delegatePwTokensToLiquidityMining(\r\n        address[] calldata lpTokens,\r\n        uint256[] calldata pwTokenAmounts\r\n    ) external;\r\n\r\n    /// @notice Undelegates staked tokens by providing LP tokens and corresponding amounts.\r\n    /// @param lpTokens An array of LP tokens to undelegate.\r\n    /// @param lpTokenAmounts An array of corresponding amounts of LP tokens to undelegate.\r\n    /// @dev This function allows the caller to undelegate their staked tokens by providing the LP tokens and their corresponding amounts.\r\n    /// @dev It requires that the length of `lpTokens` is equal to the length of `lpTokenAmounts`.\r\n    /// @dev It reverts if either `lpTokens` or `lpTokenAmounts` arrays are empty.\r\n    /// @dev It reverts if the total staked token amount to undelegate is not greater than zero.\r\n    function undelegatePwTokensFromLiquidityMining(\r\n        address[] calldata lpTokens,\r\n        uint256[] calldata lpTokenAmounts\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// File: lib/ipor-power-tokens/contracts/services/FlowsService.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @dev It is not recommended to use service contract directly, should be used only through router (like IporProtocolRouter or PowerTokenRouter)\r\ncontract FlowsService is IPowerTokenFlowsService {\r\n    using ContractValidator for address;\r\n    using SafeERC20 for IERC20;\r\n    address public immutable liquidityMining;\r\n    address public immutable powerToken;\r\n    address public immutable governanceToken;\r\n\r\n    constructor(\r\n        address liquidityMiningInput,\r\n        address governanceTokenInput,\r\n        address powerTokenInput\r\n    ) {\r\n        liquidityMining = liquidityMiningInput.checkAddress();\r\n        governanceToken = governanceTokenInput.checkAddress();\r\n        powerToken = powerTokenInput.checkAddress();\r\n    }\r\n\r\n    function getConfiguration() external view returns (address, address, address) {\r\n        return (liquidityMining, powerToken, governanceToken);\r\n    }\r\n\r\n    function claimRewardsFromLiquidityMining(address[] calldata lpTokens) external {\r\n        require(lpTokens.length > 0, Errors.INPUT_ARRAYS_EMPTY);\r\n        uint256 rewardsAmountToTransfer = ILiquidityMining(liquidityMining).claimInternal(\r\n            msg.sender,\r\n            lpTokens\r\n        );\r\n        require(rewardsAmountToTransfer > 0, Errors.NO_REWARDS_TO_CLAIM);\r\n        IPowerToken(powerToken).addGovernanceTokenInternal(\r\n            PowerTokenTypes.UpdateGovernanceToken(msg.sender, rewardsAmountToTransfer)\r\n        );\r\n        IERC20(governanceToken).safeTransferFrom(\r\n            liquidityMining,\r\n            powerToken,\r\n            rewardsAmountToTransfer\r\n        );\r\n    }\r\n\r\n    function updateIndicatorsInLiquidityMining(\r\n        address account,\r\n        address[] calldata lpTokens\r\n    ) external {\r\n        require(lpTokens.length > 0, Errors.INPUT_ARRAYS_EMPTY);\r\n        ILiquidityMining(liquidityMining).updateIndicators(account, lpTokens);\r\n    }\r\n\r\n    function delegatePwTokensToLiquidityMining(\r\n        address[] calldata lpTokens,\r\n        uint256[] calldata pwTokenAmounts\r\n    ) external {\r\n        uint256 lpTokensLength = lpTokens.length;\r\n        require(lpTokensLength == pwTokenAmounts.length, Errors.INPUT_ARRAYS_LENGTH_MISMATCH);\r\n        require(lpTokensLength > 0, Errors.INPUT_ARRAYS_EMPTY);\r\n        uint256 totalGovernanceTokenAmount;\r\n        address account = msg.sender;\r\n        LiquidityMiningTypes.UpdatePwToken[]\r\n            memory updatePwTokens = new LiquidityMiningTypes.UpdatePwToken[](lpTokensLength);\r\n        for (uint256 i; i != lpTokensLength; ) {\r\n            totalGovernanceTokenAmount += pwTokenAmounts[i];\r\n            updatePwTokens[i] = LiquidityMiningTypes.UpdatePwToken(\r\n                account,\r\n                lpTokens[i],\r\n                pwTokenAmounts[i]\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        IPowerToken(powerToken).delegateInternal(account, totalGovernanceTokenAmount);\r\n        ILiquidityMining(liquidityMining).addPwTokensInternal(updatePwTokens);\r\n    }\r\n\r\n    function undelegatePwTokensFromLiquidityMining(\r\n        address[] calldata lpTokens,\r\n        uint256[] calldata pwTokenAmounts\r\n    ) external {\r\n        uint256 length = lpTokens.length;\r\n        require(length == pwTokenAmounts.length, Errors.INPUT_ARRAYS_LENGTH_MISMATCH);\r\n        require(length > 0, Errors.INPUT_ARRAYS_EMPTY);\r\n        uint256 totalGovernanceTokenAmount;\r\n        address account = msg.sender;\r\n        LiquidityMiningTypes.UpdatePwToken[]\r\n            memory updatePwTokens = new LiquidityMiningTypes.UpdatePwToken[](length);\r\n        for (uint256 i; i != length; ) {\r\n            totalGovernanceTokenAmount += pwTokenAmounts[i];\r\n            updatePwTokens[i] = LiquidityMiningTypes.UpdatePwToken(\r\n                account,\r\n                lpTokens[i],\r\n                pwTokenAmounts[i]\r\n            );\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        require(totalGovernanceTokenAmount > 0, Errors.VALUE_NOT_GREATER_THAN_ZERO);\r\n        ILiquidityMining(liquidityMining).removePwTokensInternal(updatePwTokens);\r\n        IPowerToken(powerToken).undelegateInternal(account, totalGovernanceTokenAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMiningInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governanceTokenInput\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"powerTokenInput\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"claimRewardsFromLiquidityMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pwTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"delegatePwTokensToLiquidityMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfiguration\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pwTokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"undelegatePwTokensFromLiquidityMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"}],\"name\":\"updateIndicatorsInLiquidityMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlowsService", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cc3fc4c9ba7f8b8aa433bc586d390a70560ff3660000000000000000000000001e4746dc744503b53b4a082cb3607b169a289090000000000000000000000000d72915b95c37ae1b16b926f85ad61cca6395409f", "EVMVersion": "paris", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4960a3e45bc6684b736ad519e43d5040b4e371ec62c8d901f660df697d73d92a"}