{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BatchClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IAirdrop {\\n    function claim(\\n        uint256 _reportBlock,\\n        uint256 _index,\\n        address _account,\\n        uint256 _sharesAmount,\\n        bytes32[] calldata merkleProof\\n    ) external;\\n}\\n\\ncontract BatchClaim {\\n    IAirdrop public airdropContract;\\n\\n    error ZeroAddressAirdropContract();\\n    error ArraysLengthMismatch();\\n    error InvalidAddressZero();\\n\\n    event BatchClaimProcessed(uint256 totalClaims, address executor);\\n\\n    constructor(address _airdropContractAddress) {\\n        if (_airdropContractAddress == address(0)) revert ZeroAddressAirdropContract();\\n        airdropContract = IAirdrop(_airdropContractAddress);\\n    }\\n\\n    function batchClaim(\\n        uint256[] memory _reportBlocks,\\n        uint256[] memory _indexes,\\n        address[] memory _accounts,\\n        uint256[] memory _sharesAmounts,\\n        bytes32[][] memory _merkleProofs\\n    ) public {\\n        if (_reportBlocks.length != _indexes.length || \\n            _indexes.length != _accounts.length || \\n            _accounts.length != _sharesAmounts.length || \\n            _sharesAmounts.length != _merkleProofs.length) \\n            revert ArraysLengthMismatch();\\n\\n        for (uint256 i = 0; i < _accounts.length; i++) {\\n            if (_accounts[i] == address(0)) revert InvalidAddressZero();\\n\\n            airdropContract.claim(\\n                _reportBlocks[i],\\n                _indexes[i],\\n                _accounts[i],\\n                _sharesAmounts[i],\\n                _merkleProofs[i]\\n            );\\n        }\\n\\n        emit BatchClaimProcessed(_accounts.length, msg.sender);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airdropContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressAirdropContract\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"BatchClaimProcessed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropContract\",\"outputs\":[{\"internalType\":\"contract IAirdrop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_reportBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sharesAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"_merkleProofs\",\"type\":\"bytes32[][]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchClaim", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000d6aa18d513de2173faf8618669ec072d23aa0ce", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}