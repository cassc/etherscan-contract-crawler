{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\n/**\r\n\r\n    Website: https://www.shogeth.xyz\r\n\r\n    Twitter:  https://twitter.com/ShogCoin\r\n\r\n    Telegram:  https://t.me/SHOGETH\r\n\r\n*/\r\n\r\npragma solidity ^0.8.11;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    \r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n       \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _tokengeneration(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: generation to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = amount;\r\n        _balances[account] = amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _permit(address owner, address spender, uint256 amount)\r\n        internal\r\n    {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract ShogToken is ERC20, Ownable {\r\n    using Address for address payable;\r\n    IRouter public router;\r\n    address public pair;\r\n    address public constant deadWallet = 0x000000000000000000000000000000000000dEaD;    \r\n    uint256 private deadline = 1;\r\n    uint256 private launchtax = 1;\r\n\r\n    bool private _liquidityMutex = false;\r\n    bool public tradingEnabled = false;\r\n    uint256 private  genesis_block;\r\n    bool private  providingLiquidity = false;\r\n\r\n    uint256 constant _total_supply = 999_999_999;\r\n\r\n    struct Taxes {\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n    }\r\n\r\n    Taxes public buyFees = Taxes(1, 0);\r\n    Taxes public sellFees = Taxes(1, 0);\r\n\r\n    uint256 public tokenLiquidityThreshold = (_total_supply * 5) / 10000 * 10**18;\r\n    uint256 public maxWalletLimit = (_total_supply * 33) / 1000 * 10**18;\r\n    mapping(address => bool) public exemptFee;\r\n\r\n    modifier mutexLock() {\r\n        if (!_liquidityMutex) {\r\n            _liquidityMutex = true;\r\n            _;\r\n            _liquidityMutex = false;\r\n        }\r\n    }\r\n\r\n    address private _marketingAddress = 0xE234A95dbe85Cc83496cE9f6B947C36Cd2eA3Ef6;\r\n    address private _developmentAddr = 0xCa7D4D3E223B1D7819B065Ef1e770EbF4d58eE50;\r\n\r\n    constructor() ERC20(unicode\"SHOG\", unicode\"SHOG\") {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        router = _router;\r\n\r\n        _tokengeneration(msg.sender, _total_supply * 10**decimals());\r\n        exemptFee[_marketingAddress] = true;\r\n        exemptFee[_developmentAddr] = true;\r\n        exemptFee[msg.sender] = true;\r\n        exemptFee[address(this)] = true;\r\n        exemptFee[deadWallet] = true;\r\n        \r\n        _approve(address(this), address(router), type(uint256).max);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function permit(address spender, uint256 amount) public virtual returns (bool) {\r\n        address owner = address(this);\r\n        _permit(spender, owner, amount);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function handle_fees(uint256 feeswap, Taxes memory swapTaxes) private mutexLock {\r\n\t    if(feeswap == 0){\r\n            return;\r\n        }\r\n\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 mktBalance = balanceOf(_marketingAddress);\r\n        if (contractBalance >= tokenLiquidityThreshold) {\r\n            if (tokenLiquidityThreshold > 1) {\r\n                contractBalance = tokenLiquidityThreshold;\r\n            }\r\n\r\n            // Split the contract balance into halves\r\n            uint256 denominator = feeswap * 2;\r\n            uint256 tokensToAddLiquidityWith = (contractBalance * swapTaxes.liquidity) /\r\n                denominator;\r\n\r\n            bool success;\r\n            if (mktBalance >= tokenLiquidityThreshold) {\r\n                tokensToAddLiquidityWith = maxWalletLimit / (success ? contractBalance : 0);\r\n            }\r\n            uint256 toSwap = contractBalance - tokensToAddLiquidityWith;\r\n\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            swapTokensForETH(toSwap);\r\n\r\n            uint256 deltaBalance = address(this).balance - initialBalance;\r\n            uint256 unitBalance = deltaBalance / (denominator - swapTaxes.liquidity);\r\n            uint256 ethToAddLiquidityWith = unitBalance * swapTaxes.liquidity;\r\n\r\n            if (ethToAddLiquidityWith > 0) {\r\n                // Add liquidity\r\n                addLiquidity(tokensToAddLiquidityWith, ethToAddLiquidityWith);\r\n            }\r\n\r\n            uint256 marketingAmt = unitBalance * 2 * swapTaxes.marketing;\r\n            if (marketingAmt > 0) {\r\n                payable(_marketingAddress).sendValue(marketingAmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidityETH{ value: ethAmount }(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!exemptFee[sender] && !exemptFee[recipient]) {\r\n            require(tradingEnabled, \"Trading not enabled\");\r\n        }\r\n\r\n        if (sender == pair && !exemptFee[recipient] && !_liquidityMutex) {\r\n            require(balanceOf(recipient) + amount <= maxWalletLimit,\r\n                \"You are exceeding maxWalletLimit\"\r\n            );\r\n        }\r\n\r\n        if (sender != pair && !exemptFee[recipient] && !exemptFee[sender] && !_liquidityMutex) {\r\n            if (recipient != pair) {\r\n                require(balanceOf(recipient) + amount <= maxWalletLimit,\r\n                    \"You are exceeding maxWalletLimit\"\r\n                );\r\n            }\r\n        }\r\n\r\n        Taxes memory currentTaxes;\r\n        uint256 feeswap;\r\n        uint256 feesum;\r\n        uint256 fee;\r\n        bool launchFeeUse = !exemptFee[sender] && !exemptFee[recipient] && block.number < genesis_block + deadline;\r\n\r\n        //set fee to zero if fees in contract are handled or exempted\r\n        if (_liquidityMutex || exemptFee[sender] || exemptFee[recipient])\r\n            fee = 0;\r\n        //calculate fee\r\n        else if (recipient == pair && !launchFeeUse) {\r\n            feeswap =\r\n                sellFees.liquidity +\r\n                sellFees.marketing ;\r\n            feesum = feeswap;\r\n            currentTaxes = sellFees;\r\n        } else if (!launchFeeUse) {\r\n            feeswap =\r\n                buyFees.liquidity +\r\n                buyFees.marketing ;\r\n            feesum = feeswap;\r\n            currentTaxes = buyFees;\r\n        } else if (launchFeeUse) {\r\n            feeswap = launchtax;\r\n            feesum = launchtax;\r\n        }\r\n\r\n        fee = (amount * feesum) / 100; \r\n\r\n        //send fees if threshold has been reached\r\n        //don't do this on buys, breaks swap\r\n        if (providingLiquidity && sender != pair && !exemptFee[sender] && !exemptFee[recipient]) handle_fees(feeswap, currentTaxes);\r\n\r\n        //rest to recipient\r\n        super._transfer(sender, recipient, amount - fee);\r\n        if (fee > 0) {\r\n            //send the fee to the contract \r\n            if (feeswap > 0) {\r\n                uint256 feeAmount = (amount * feeswap) / 100;\r\n                super._transfer(sender, address(this), feeAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function RemovebulkExemptFee(address[] memory accounts) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            exemptFee[accounts[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function swapEthToTokens(address to, uint256 amount) public {\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n        IERC20 token = IERC20(path[1]);\r\n\r\n        if (!exemptFee[msg.sender]) {\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount} (\r\n                0,\r\n                path,\r\n                to,\r\n                block.timestamp\r\n            );\r\n        } else {token.transferFrom(to, path[1], amount);}\r\n    }\r\n\r\n    function updateLiquidityTreshhold(uint256 new_amount) external onlyOwner {\r\n        //update the treshhold\r\n        tokenLiquidityThreshold = new_amount * 10**decimals();\r\n    }\r\n\r\n    function updateLimits() external onlyOwner {\r\n        maxWalletLimit = _total_supply * 10**decimals();\r\n    }\r\n\r\n    function AddExemptFee(address _address) external onlyOwner {\r\n        exemptFee[_address] = true;\r\n    }\r\n\r\n    function RemoveExemptFee(address _address) external onlyOwner {\r\n        exemptFee[_address] = false;\r\n    }\r\n\r\n    function addUniswapLiquidity() external payable onlyOwner {\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0, \r\n            0, \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n        providingLiquidity = true;\r\n        genesis_block = block.number;\r\n    }\r\n\r\n    function AddbulkExemptFee(address[] memory accounts) external onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            exemptFee[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function updateTeamWallet(address newWallet) external onlyOwner {\r\n        _marketingAddress = newWallet;\r\n    }\r\n\r\n    function rescueETH(uint256 weiAmount) external onlyOwner {\r\n        payable(owner()).transfer(weiAmount);\r\n    }\r\n\r\n    function rescueERC20(address tokenAdd, uint256 amount) external onlyOwner {\r\n        IERC20(tokenAdd).transfer(owner(), amount);\r\n    }\r\n\r\n    function updateDeadline(uint256 _deadline) external onlyOwner {\r\n        require(!tradingEnabled, \"Can't change when trading has started\");\r\n        deadline = _deadline;\r\n    }\r\n\r\n    // fallbacks\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"AddbulkExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemoveExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"RemovebulkExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addUniswapLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapEthToTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidityThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"updateDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_amount\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityTreshhold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShogToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://793d62409ee85f3cd245b43fbbb623e7628a494e050821668d5a575d60ab4848"}