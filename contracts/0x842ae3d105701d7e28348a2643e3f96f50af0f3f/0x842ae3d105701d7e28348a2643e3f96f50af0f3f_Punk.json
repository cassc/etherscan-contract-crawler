{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2468\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/Punk.sol\": {\r\n      \"content\": \"// Cypherpunk\\n\\n// Website: https://thepunklist.com\\n// Twitter: https://twitter.com/cypherpunk_eth\\n// Telegram: https://t.me/thepunklist\\n\\n// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.18;\\n\\ninterface IERC20 {\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// Dex Factory contract interface\\ninterface IDexFactory {\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\n// Dex Router contract interface\\ninterface IDexRouter {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n}\\n\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn payable(msg.sender);\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\\ncontract Ownable is Context {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tconstructor() {\\n\\t\\t_owner = _msgSender();\\n\\t\\temit OwnershipTransferred(address(0), _owner);\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\n\\t\\t_owner = payable(address(0));\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n}\\n\\ncontract Punk is Context, IERC20, Ownable {\\n\\tstring private _name = \\\"The Punk List\\\";\\n\\tstring private _symbol = \\\"PUNK\\\";\\n\\tuint8 private _decimals = 18;\\n\\tuint256 private _totalSupply = 1_100_000 * 1e18;\\n\\n\\tmapping(address => uint256) private _balances;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\tmapping(address => bool) private _bots;\\n\\n\\tmapping(address => bool) public isExcludedFromFee;\\n\\tmapping(address => bool) public isExcludedFromMaxTxn;\\n\\tmapping(address => bool) public isExcludedFromMaxHolding;\\n\\n\\tuint256 public minTokenToSwap = (_totalSupply * 5) / (10000); // this amount will trigger swap and distribute\\n\\tuint256 public maxHoldLimit = (_totalSupply * 2) / (100); // this is the max wallet holding limit\\n\\tuint256 public maxTxnLimit = (_totalSupply * 2) / (100); // this is the max transaction limit\\n\\tuint256 public percentDivider = 100;\\n\\tuint256 public launchedAt;\\n\\n\\tbool public distributeAndLiquifyStatus; // should be true to turn on to liquidate the pool\\n\\tbool public feesStatus; // enable by default\\n\\tbool public trading; // once enable can't be disable afterwards\\n\\n\\tIDexRouter public dexRouter; // router declaration\\n\\n\\taddress public dexPair; // pair address declaration\\n\\taddress public marketingWallet; // marketing address declaration\\n\\taddress private constant DEAD = address(0xdead);\\n\\taddress private constant ZERO = address(0);\\n\\n\\tuint256 public marketingFeeOnBuying = 30;\\n\\n\\tuint256 public marketingFeeOnSelling = 30;\\n\\n\\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\n\\n\\tconstructor(address _marketingWallet) {\\n\\t\\t_balances[owner()] = _totalSupply;\\n\\t\\tmarketingWallet = address(_marketingWallet);\\n\\n\\t\\tdexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\t\\tisExcludedFromFee[address(dexRouter)] = true;\\n\\t\\tisExcludedFromMaxTxn[address(dexRouter)] = true;\\n\\t\\tisExcludedFromMaxHolding[address(dexRouter)] = true;\\n\\n\\t\\tdexPair = IDexFactory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\\n\\t\\tisExcludedFromMaxHolding[dexPair] = true;\\n\\n\\t\\t//exclude owner and this contract from fee\\n\\t\\tisExcludedFromFee[owner()] = true;\\n\\t\\tisExcludedFromFee[address(this)] = true;\\n\\n\\t\\t//exclude owner and this contract from max Txn\\n\\t\\tisExcludedFromMaxTxn[owner()] = true;\\n\\t\\tisExcludedFromMaxTxn[address(this)] = true;\\n\\n\\t\\t//exclude owner and this contract from max hold limit\\n\\t\\tisExcludedFromMaxHolding[owner()] = true;\\n\\t\\tisExcludedFromMaxHolding[address(this)] = true;\\n\\t\\tisExcludedFromMaxHolding[marketingWallet] = true;\\n\\n\\t\\temit Transfer(address(0), owner(), _totalSupply);\\n\\t}\\n\\n\\t//to receive ETH from dexRouter when swapping\\n\\treceive() external payable {}\\n\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn _decimals;\\n\\t}\\n\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address account) public view override returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction allowance(address owner, address spender) public view override returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 amount) public override returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + (addedValue));\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction includeOrExcludeFromFee(address account, bool value) external onlyOwner {\\n\\t\\tisExcludedFromFee[account] = value;\\n\\t}\\n\\n\\tfunction includeOrExcludeFromMaxTxn(address account, bool value) external onlyOwner {\\n\\t\\tisExcludedFromMaxTxn[account] = value;\\n\\t}\\n\\n\\tfunction includeOrExcludeFromMaxHolding(address account, bool value) external onlyOwner {\\n\\t\\tisExcludedFromMaxHolding[account] = value;\\n\\t}\\n\\n\\tfunction setMinTokenToSwap(uint256 _amount) external onlyOwner {\\n\\t\\tminTokenToSwap = _amount * 1e18;\\n\\t}\\n\\n\\tfunction setMaxHoldLimit(uint256 _amount) external onlyOwner {\\n\\t\\tmaxHoldLimit = _amount * 1e18;\\n\\t}\\n\\n\\tfunction setMaxTxnLimit(uint256 _amount) external onlyOwner {\\n\\t\\tmaxTxnLimit = _amount * 1e18;\\n\\t}\\n\\n\\tfunction setBuyFeePercent(uint256 _marketingFee) external onlyOwner {\\n\\t\\tmarketingFeeOnBuying = _marketingFee;\\n\\t}\\n\\n\\tfunction setSellFeePercent(uint256 _marketingFee) external onlyOwner {\\n\\t\\tmarketingFeeOnSelling = _marketingFee;\\n\\t}\\n\\n\\tfunction setDistributionStatus(bool _value) public onlyOwner {\\n\\t\\tdistributeAndLiquifyStatus = _value;\\n\\t}\\n\\n\\tfunction enableOrDisableFees(bool _value) external onlyOwner {\\n\\t\\tfeesStatus = _value;\\n\\t}\\n\\n\\tfunction updateAddresses(address _marketingWallet) external onlyOwner {\\n\\t\\tmarketingWallet = _marketingWallet;\\n\\t}\\n\\n\\tfunction enableTrading() external onlyOwner {\\n\\t\\trequire(!trading, \\\": already enabled\\\");\\n\\n\\t\\ttrading = true;\\n\\t\\tfeesStatus = true;\\n\\t\\tdistributeAndLiquifyStatus = true;\\n\\t\\tlaunchedAt = block.timestamp;\\n\\t}\\n\\n\\tfunction removeStuckEth(address _receiver) public onlyOwner {\\n\\t\\tpayable(_receiver).transfer(address(this).balance);\\n\\t}\\n\\n\\tfunction totalBuyFeePerTx(uint256 amount) public view returns (uint256) {\\n\\t\\tuint256 fee = (amount * marketingFeeOnBuying) / (percentDivider);\\n\\t\\treturn fee;\\n\\t}\\n\\n\\tfunction totalSellFeePerTx(uint256 amount) public view returns (uint256) {\\n\\t\\tuint256 fee = (amount * marketingFeeOnSelling) / (percentDivider);\\n\\t\\treturn fee;\\n\\t}\\n\\n\\tfunction _approve(address owner, address spender, uint256 amount) private {\\n\\t\\trequire(owner != address(0), \\\" approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\tfunction _transfer(address from, address to, uint256 amount) private {\\n\\t\\trequire(!_bots[from] && !_bots[to] && !_bots[msg.sender], \\\"Blacklisted\\\");\\n\\n\\t\\trequire(from != address(0), \\\"transfer from the zero address\\\");\\n\\t\\trequire(to != address(0), \\\"transfer to the zero address\\\");\\n\\t\\trequire(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n\\t\\tif (!isExcludedFromMaxTxn[from] && !isExcludedFromMaxTxn[to]) {\\n\\t\\t\\trequire(amount <= maxTxnLimit, \\\" max txn limit exceeds\\\");\\n\\n\\t\\t\\t// trading disable till launch\\n\\t\\t\\tif (!trading) {\\n\\t\\t\\t\\trequire(dexPair != from && dexPair != to, \\\": trading is disable\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (!isExcludedFromMaxHolding[to]) {\\n\\t\\t\\trequire((balanceOf(to) + amount) <= maxHoldLimit, \\\": max hold limit exceeds\\\");\\n\\t\\t}\\n\\n\\t\\t// swap and liquify\\n\\t\\tdistributeAndLiquify(from, to);\\n\\n\\t\\t//indicates if fee should be deducted from transfer\\n\\t\\tbool takeFee = true;\\n\\n\\t\\t//if any account belongs to isExcludedFromFee account then remove the fee\\n\\t\\tif (isExcludedFromFee[from] || isExcludedFromFee[to] || !feesStatus) {\\n\\t\\t\\ttakeFee = false;\\n\\t\\t}\\n\\n\\t\\t//transfer amount, it will take tax, burn, liquidity fee\\n\\t\\t_tokenTransfer(from, to, amount, takeFee);\\n\\t}\\n\\n\\t//this method is responsible for taking all fees, if takeFee is true\\n\\tfunction _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\\n\\t\\tif (dexPair == sender && takeFee) {\\n\\t\\t\\tuint256 allFee;\\n\\t\\t\\tuint256 tTransferAmount;\\n\\t\\t\\tallFee = totalBuyFeePerTx(amount);\\n\\t\\t\\ttTransferAmount = amount - allFee;\\n\\n\\t\\t\\t_balances[sender] = _balances[sender] - amount;\\n\\t\\t\\t_balances[recipient] = _balances[recipient] + tTransferAmount;\\n\\t\\t\\temit Transfer(sender, recipient, tTransferAmount);\\n\\n\\t\\t\\ttakeTokenFee(sender, allFee);\\n\\t\\t} else if (dexPair == recipient && takeFee) {\\n\\t\\t\\tuint256 allFee = totalSellFeePerTx(amount);\\n\\t\\t\\tuint256 tTransferAmount = amount - allFee;\\n\\t\\t\\t_balances[sender] = _balances[sender] - amount;\\n\\t\\t\\t_balances[recipient] = _balances[recipient] + tTransferAmount;\\n\\t\\t\\temit Transfer(sender, recipient, tTransferAmount);\\n\\n\\t\\t\\ttakeTokenFee(sender, allFee);\\n\\t\\t} else {\\n\\t\\t\\t_balances[sender] = _balances[sender] - amount;\\n\\t\\t\\t_balances[recipient] = _balances[recipient] + (amount);\\n\\t\\t\\temit Transfer(sender, recipient, amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction takeTokenFee(address sender, uint256 amount) private {\\n\\t\\t_balances[address(this)] = _balances[address(this)] + (amount);\\n\\n\\t\\temit Transfer(sender, address(this), amount);\\n\\t}\\n\\n\\t// to withdarw ETH from contract\\n\\tfunction withdrawETH(uint256 _amount) external onlyOwner {\\n\\t\\trequire(address(this).balance >= _amount, \\\"Invalid Amount\\\");\\n\\t\\tpayable(msg.sender).transfer(_amount);\\n\\t}\\n\\n\\t// to withdraw ERC20 tokens from contract\\n\\tfunction withdrawToken(IERC20 _token, uint256 _amount) external onlyOwner {\\n\\t\\trequire(_token.balanceOf(address(this)) >= _amount, \\\"Invalid Amount\\\");\\n\\t\\t_token.transfer(msg.sender, _amount);\\n\\t}\\n\\n\\tfunction distributeAndLiquify(address from, address to) private {\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\n\\n\\t\\tbool shouldSell = contractTokenBalance >= minTokenToSwap;\\n\\n\\t\\tif (\\n\\t\\t\\tshouldSell && from != dexPair && distributeAndLiquifyStatus && !(from == address(this) && to == dexPair) // swap 1 time\\n\\t\\t) {\\n\\t\\t\\t// approve contract\\n\\t\\t\\t_approve(address(this), address(dexRouter), minTokenToSwap);\\n\\n\\t\\t\\t// now is to lock into liquidty pool\\n\\t\\t\\tswapTokensForEth(minTokenToSwap);\\n\\t\\t\\tuint256 ethForMarketing = address(this).balance;\\n\\n\\t\\t\\t// sending Eth to Marketing wallet\\n\\t\\t\\tif (ethForMarketing > 0) payable(marketingWallet).transfer(ethForMarketing);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction swapTokensForEth(uint256 tokenAmount) internal {\\n\\t\\t// generate the Dex pair path of token -> weth\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = dexRouter.WETH();\\n\\n\\t\\t// make the swap\\n\\t\\tdexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\t\\ttokenAmount,\\n\\t\\t\\t0, // accept any amount of ETH\\n\\t\\t\\tpath,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tblock.timestamp + 300\\n\\t\\t);\\n\\t}\\n\\n\\tfunction manageBots(address[] memory _accounts, bool _isBot) external onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < _accounts.length; i++) {\\n\\t\\t\\t_bots[_accounts[i]] = _isBot;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeAndLiquifyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"enableOrDisableFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxHolding\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTxn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isBot\",\"type\":\"bool\"}],\"name\":\"manageBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnBuying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeOnSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"removeStuckEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDistributionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalBuyFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"totalSellFeePerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"updateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Punk", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "2468", "ConstructorArguments": "0000000000000000000000005636bc606c79b7cbb2a5177db8584b3aff509f26", "EVMVersion": "shanghai", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}