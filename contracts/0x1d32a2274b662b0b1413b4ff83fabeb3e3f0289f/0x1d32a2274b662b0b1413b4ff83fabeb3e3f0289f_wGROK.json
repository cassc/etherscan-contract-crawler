{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Wgrok.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ncontract wGROK is IERC20, Ownable {\\n    using Address for address;\\n    \\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    string constant _name = \\\"Wrapped Grok\\\";\\n    string constant _symbol = \\\"wGROK\\\";\\n    uint8 constant _decimals = 9;\\n\\n    uint256 _totalSupply = 1_000_000_000 * (10 ** _decimals);\\n    uint256 _maxBuyTxAmount = (_totalSupply * 1) / 500;\\n    uint256 _maxSellTxAmount = (_totalSupply * 1) / 500;\\n    uint256 _maxWalletSize = (_totalSupply * 1) / 500;\\n\\n    mapping (address => uint256) _balances;\\n    mapping (address => mapping (address => uint256)) _allowances;\\n    mapping (address => uint256) public lastSell;\\n    mapping (address => uint256) public lastBuy;\\n\\n    mapping (address => bool) public isFeeExempt;\\n    mapping (address => bool) public isTxLimitExempt;\\n    mapping (address => bool) public liquidityCreator;\\n\\n    uint256 marketingFee = 1800;\\n    uint256 marketingSellFee = 3800;\\n    uint256 liquidityFee = 200;\\n    uint256 liquiditySellFee = 200;\\n    uint256 totalBuyFee = marketingFee + liquidityFee;\\n    uint256 totalSellFee = marketingSellFee + liquiditySellFee;\\n    uint256 feeDenominator = 10000;\\n    bool public transferTax = false;\\n\\n    address payable public liquidityFeeReceiver = payable(0x5B1E72c12AABdeAD96B2b269b9DaDA7071cCa434);\\n    address payable public marketingFeeReceiver = payable(0x5B1E72c12AABdeAD96B2b269b9DaDA7071cCa434);\\n\\n    IDEXRouter public router;\\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    mapping (address => bool) liquidityPools;\\n    mapping (address => uint256) public protected;\\n    bool protectionEnabled = true;\\n    bool protectionDisabled = false;\\n    uint256 protectionLimit;\\n    uint256 public protectionCount;\\n    uint256 protectionTimer;\\n\\n    address public pair;\\n\\n    uint256 public launchedAt;\\n    uint256 public launchedTime;\\n    uint256 public deadBlocks;\\n    bool startBullRun = false;\\n    bool pauseDisabled = false;\\n    uint256 public rateLimit = 2;\\n\\n    bool public swapEnabled = false;\\n    uint256 public swapThreshold = _totalSupply / 5000;\\n    uint256 public swapMinimum = _totalSupply / 50000;\\n    bool inSwap;\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\n    \\n    mapping (address => bool) teamMember;\\n    \\n    modifier onlyTeam() {\\n        require(teamMember[_msgSender()] || msg.sender == owner(), \\\"Caller is not a team member\\\");\\n        _;\\n    }\\n    \\n    event ProtectedWallet(address, address, uint256, uint8);\\n\\n    constructor () {\\n        router = IDEXRouter(routerAddress);\\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\\n        liquidityPools[pair] = true;\\n        _allowances[owner()][routerAddress] = type(uint256).max;\\n        _allowances[address(this)][routerAddress] = type(uint256).max;\\n\\n        isFeeExempt[owner()] = true;\\n        liquidityCreator[owner()] = true;\\n\\n        isTxLimitExempt[address(this)] = true;\\n        isTxLimitExempt[owner()] = true;\\n        isTxLimitExempt[routerAddress] = true;\\n        isTxLimitExempt[DEAD] = true;\\n\\n        _balances[owner()] = _totalSupply;\\n\\n        emit Transfer(address(0), owner(), _totalSupply);\\n    }\\n\\n    receive() external payable { }\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function decimals() external pure returns (uint8) { return _decimals; }\\n    function symbol() external pure returns (string memory) { return _symbol; }\\n    function name() external pure returns (string memory) { return _name; }\\n    function getOwner() external view returns (address) { return owner(); }\\n    function maxBuyTxTokens() external view returns (uint256) { return _maxBuyTxAmount / (10 ** _decimals); }\\n    function maxSellTxTokens() external view returns (uint256) { return _maxSellTxAmount / (10 ** _decimals); }\\n    function maxWalletTokens() external view returns (uint256) { return _maxWalletSize / (10 ** _decimals); }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveMax(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n    \\n    function setTeamMember(address _team, bool _enabled) external onlyOwner {\\n        teamMember[_team] = _enabled;\\n    }\\n    \\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts) external onlyOwner {\\n        require(addresses.length > 0 && amounts.length == addresses.length);\\n        address from = msg.sender;\\n\\n        for (uint i = 0; i < addresses.length; i++) {\\n            if(!liquidityPools[addresses[i]] && !liquidityCreator[addresses[i]]) {\\n                _basicTransfer(from, addresses[i], amounts[i] * (10 ** _decimals));\\n            }\\n        }\\n    }\\n    \\n    function clearStuckBalance(uint256 amountPercentage, address adr) external onlyTeam {\\n        uint256 amountETH = address(this).balance;\\n\\n        if(amountETH > 0) {\\n            (bool sent, ) = adr.call{value: (amountETH * amountPercentage) / 100}(\\\"\\\");\\n            require(sent,\\\"Failed to transfer funds\\\");\\n        }\\n    }\\n    \\n    function openTrading(uint256 _deadBlocks, uint256 _protection, uint256 _limit) external onlyTeam {\\n        require(!startBullRun && _deadBlocks < 10);\\n        deadBlocks = _deadBlocks;\\n        startBullRun = true;\\n        launchedAt = block.number;\\n        protectionTimer = block.timestamp + _protection;\\n        protectionLimit = _limit * (10 ** _decimals);\\n    }\\n    \\n    function pauseTrading() external onlyTeam {\\n        require(!pauseDisabled);\\n        startBullRun = false;\\n    }\\n    \\n    function disablePause() external onlyTeam {\\n        pauseDisabled = true;\\n        startBullRun = true;\\n    }\\n    \\n    function setProtection(bool _protect, uint256 _addTime) external onlyTeam {\\n        require(!protectionDisabled);\\n        protectionEnabled = _protect;\\n        require(_addTime < 1 days);\\n        protectionTimer += _addTime;\\n    }\\n    \\n    function disableProtection() external onlyTeam {\\n        protectionDisabled = true;\\n        protectionEnabled = false;\\n    }\\n    \\n    function protectWallet(address[] calldata _wallets, bool _protect) external onlyTeam {\\n        if (_protect) {\\n            require(protectionEnabled);\\n        }\\n        \\n        for (uint i = 0; i < _wallets.length; i++) {\\n            \\n            if (_protect) {\\n                protectionCount++;\\n                emit ProtectedWallet(tx.origin, _wallets[i], block.number, 2);\\n            }\\n            else {\\n                if (protected[_wallets[i]] != 0)\\n                    protectionCount--;      \\n            }\\n            protected[_wallets[i]] = _protect ? block.number : 0;\\n        }\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowances[sender][msg.sender] != type(uint256).max){\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        require(sender != address(0), \\\"BEP20: transfer from 0x0\\\");\\n        require(recipient != address(0), \\\"BEP20: transfer to 0x0\\\");\\n        require(amount > 0, \\\"Amount must be > zero\\\");\\n        require(_balances[sender] >= amount, \\\"Insufficient balance\\\");\\n        if(!launched() && liquidityPools[recipient]){ require(liquidityCreator[sender], \\\"Liquidity not added yet.\\\"); launch(); }\\n        if(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient], \\\"Trading not open yet.\\\"); }\\n\\n        checkTxLimit(sender, recipient, amount);\\n        \\n        if (!liquidityPools[recipient] && recipient != DEAD) {\\n            if (!isTxLimitExempt[recipient]) {\\n                checkWalletLimit(recipient, amount);\\n            }\\n        }\\n        \\n        if(protectionEnabled && protectionTimer > block.timestamp) {\\n            if(liquidityPools[sender] && tx.origin != recipient && protected[recipient] == 0) {\\n                protected[recipient] = block.number;\\n                protectionCount++;\\n                emit ProtectedWallet(tx.origin, recipient, block.number, 0);\\n            }\\n        }\\n        \\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\\n\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        uint256 amountReceived = amount;\\n\\n        if(shouldTakeFee(sender, recipient)) {\\n            amountReceived = takeFee(recipient, amount);\\n            if(shouldSwapBack(recipient) && amount > 0) swapBack(amount);\\n        }\\n        \\n        _balances[recipient] = _balances[recipient] + amountReceived;\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n    \\n    function launched() internal view returns (bool) {\\n        return launchedAt != 0;\\n    }\\n\\n    function launch() internal {\\n        launchedAt = block.number;\\n        launchedTime = block.timestamp;\\n        swapEnabled = true;\\n    }\\n\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n    \\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\\n        uint256 walletLimit = _maxWalletSize;\\n        require(_balances[recipient] + amount <= walletLimit, \\\"Transfer amount exceeds the bag size.\\\");\\n    }\\n\\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal {\\n        if (isTxLimitExempt[sender] || isTxLimitExempt[recipient]) return;\\n        require(amount <= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \\\"TX Limit Exceeded\\\");\\n        require(lastBuy[recipient] + rateLimit <= block.number, \\\"Transfer rate limit exceeded.\\\");\\n        \\n        if (protected[sender] != 0){\\n            require(amount <= protectionLimit * (10 ** _decimals) && lastSell[sender] == 0 && protectionTimer > block.timestamp, \\\"Wallet protected, please contact support.\\\");\\n            lastSell[sender] = block.number;\\n        }\\n        \\n        if (liquidityPools[recipient]) {\\n            lastSell[sender] = block.number;\\n        } else if (shouldTakeFee(sender, recipient)) {\\n            if (protectionEnabled && protectionTimer > block.timestamp && lastBuy[tx.origin] == block.number && protected[recipient] == 0) {\\n                protected[recipient] = block.number;\\n                emit ProtectedWallet(tx.origin, recipient, block.number, 1);\\n            }\\n            lastBuy[recipient] = block.number;\\n            if (tx.origin != recipient)\\n                lastBuy[tx.origin] = block.number;\\n        }\\n    }\\n\\n    function shouldTakeFee(address sender, address recipient) public view returns (bool) {\\n        if(!transferTax && !liquidityPools[recipient] && !liquidityPools[sender]) return false;\\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\\n    }\\n\\n    function getTotalFee(bool selling) public view returns (uint256) {\\n        if(launchedAt + deadBlocks >= block.number){ return feeDenominator - 1; }\\n        if (selling) return totalSellFee;\\n        return totalBuyFee;\\n    }\\n\\n    function takeFee(address recipient, uint256 amount) internal returns (uint256) {\\n    bool selling = liquidityPools[recipient];\\n    uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\\n\\n    if (shouldApplyExtraTax()) {\\n        // Apply a 99% tax during the first 4 blocks with gas price above 100 gwei for sells and buys\\n        feeAmount = (amount * 99) / 100;\\n    }\\n\\n    _balances[address(this)] += feeAmount;\\n\\n    return amount - feeAmount;\\n}\\n\\nfunction shouldApplyExtraTax() internal view returns (bool) {\\n    return isFirstFourBlocks() && tx.gasprice > 100000000000; \\n}\\n\\nfunction isFirstFourBlocks() internal view returns (bool) {\\n    return block.number <= launchedAt + 4;\\n}\\n\\n    function shouldSwapBack(address recipient) internal view returns (bool) {\\n        return !liquidityPools[msg.sender]\\n        && !inSwap\\n        && swapEnabled\\n        && liquidityPools[recipient]\\n        && _balances[address(this)] >= swapMinimum \\n        && totalBuyFee + totalSellFee > 0;\\n    }\\n\\n    function swapBack(uint256 amount) internal swapping {\\n        uint256 totalFee = totalBuyFee + totalSellFee;\\n        uint256 amountToSwap = amount < swapThreshold ? amount : swapThreshold;\\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\\n        \\n        uint256 totalLiquidityFee = liquidityFee + liquiditySellFee;\\n        uint256 amountToLiquify = (amountToSwap * totalLiquidityFee / 2) / totalFee;\\n        amountToSwap -= amountToLiquify;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        \\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountETH = address(this).balance - balanceBefore;\\n        uint256 totalETHFee = totalFee - (totalLiquidityFee / 2);\\n\\n        uint256 amountETHLiquidity = (amountETH * totalLiquidityFee / 2) / totalETHFee;\\n        uint256 amountETHMarketing = amountETH - amountETHLiquidity;\\n        \\n        if (amountETHMarketing > 0) {\\n            (bool sentMarketing, ) = marketingFeeReceiver.call{value: amountETHMarketing}(\\\"\\\");\\n            if(!sentMarketing) {\\n                //Failed to transfer to marketing wallet\\n            }\\n        }\\n        \\n        if(amountToLiquify > 0){\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                liquidityFeeReceiver,\\n                block.timestamp\\n            );\\n        }\\n\\n        emit FundsDistributed(amountETHMarketing, amountETHLiquidity, amountToLiquify);\\n    }\\n    \\n    function addLiquidityPool(address lp, bool isPool) external onlyOwner {\\n        require(lp != pair, \\\"Can't alter current liquidity pair\\\");\\n        liquidityPools[lp] = isPool;\\n    }\\n\\n    function setRateLimit(uint256 rate) external onlyOwner {\\n        require(rate <= 60 seconds);\\n        rateLimit = rate;\\n    }\\n\\n    function setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyOwner {\\n        require(buyNumerator > 0 && sellNumerator > 0 && divisor > 0 && divisor <= 10000);\\n        _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\\n        _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\\n    }\\n    \\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\\n    }\\n\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\n        isFeeExempt[holder] = exempt;\\n    }\\n\\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\\n        isTxLimitExempt[holder] = exempt;\\n    }\\n\\n    function setFees(uint256 _liquidityFee, uint256 _liquiditySellFee, uint256 _marketingFee, uint256 _marketingSellFee, uint256 _feeDenominator) external onlyOwner {\\n        require(((_liquidityFee + _liquiditySellFee) / 2) * 2 == (_liquidityFee + _liquiditySellFee), \\\"Liquidity fee must be an even number due to rounding\\\");\\n        liquidityFee = _liquidityFee;\\n        liquiditySellFee = _liquiditySellFee;\\n        marketingFee = _marketingFee;\\n        marketingSellFee = _marketingSellFee;\\n        totalBuyFee = _liquidityFee + _marketingFee;\\n        totalSellFee = _liquiditySellFee + _marketingSellFee;\\n        feeDenominator = _feeDenominator;\\n        require(totalBuyFee + totalSellFee <= feeDenominator / 2, \\\"Fees too high\\\");\\n        emit FeesSet(totalBuyFee, totalSellFee, feeDenominator);\\n    }\\n\\n    function toggleTransferTax() external onlyOwner {\\n        transferTax = !transferTax;\\n    }\\n\\n    function setFeeReceivers(address _liquidityFeeReceiver, address _marketingFeeReceiver) external onlyOwner {\\n        liquidityFeeReceiver = payable(_liquidityFeeReceiver);\\n        marketingFeeReceiver = payable(_marketingFeeReceiver);\\n    }\\n\\n    function setSwapBackSettings(bool _enabled, uint256 _denominator, uint256 _swapMinimum) external onlyOwner {\\n        require(_denominator > 0);\\n        swapEnabled = _enabled;\\n        swapThreshold = _totalSupply / _denominator;\\n        swapMinimum = _swapMinimum * (10 ** _decimals);\\n    }\\n\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\\n    }\\n\\n    event FundsDistributed(uint256 marketingETH, uint256 liquidityETH, uint256 liquidityTokens);\\n    event FeesSet(uint256 totalBuyFees, uint256 totalSellFees, uint256 denominator);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSellFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokens\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ProtectedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPool\",\"type\":\"bool\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_protect\",\"type\":\"bool\"}],\"name\":\"protectWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquiditySellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_protect\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_addTime\",\"type\":\"uint256\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapMinimum\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"shouldTakeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTransferTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "wGROK", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}