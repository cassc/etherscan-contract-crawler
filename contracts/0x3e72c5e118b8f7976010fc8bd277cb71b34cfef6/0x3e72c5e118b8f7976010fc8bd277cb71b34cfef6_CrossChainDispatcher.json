{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/CrossChainDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./dependencies/@layerzerolabs/solidity-examples/util/BytesLib.sol\\\";\\nimport \\\"./dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/external/IStargateComposerWithRetry.sol\\\";\\nimport \\\"./interfaces/external/IWETH.sol\\\";\\nimport \\\"./interfaces/external/IStargatePool.sol\\\";\\nimport \\\"./interfaces/external/IStargateFactory.sol\\\";\\nimport \\\"./storage/CrossChainDispatcherStorage.sol\\\";\\nimport \\\"./interfaces/IProxyOFT.sol\\\";\\nimport \\\"./interfaces/ISmartFarmingManager.sol\\\";\\nimport \\\"./interfaces/ISyntheticToken.sol\\\";\\nimport \\\"./interfaces/external/ISwapper.sol\\\";\\nimport \\\"./lib/CrossChainLib.sol\\\";\\n\\nerror AddressIsNull();\\nerror InvalidMsgSender();\\nerror BridgingIsPaused();\\nerror InvalidFromAddress();\\nerror InvalidToAddress();\\nerror NewValueIsSameAsCurrent();\\nerror SenderIsNotGovernor();\\nerror DestinationChainNotAllowed();\\nerror InvalidOperationType();\\nerror BridgeTokenNotSupported();\\nerror InvalidSlippageParam();\\nerror InvalidPayload();\\n\\n// Note: The `IPool` wasn't updated to avoid changing interface\\n// Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\ninterface IPoolV4 is IPool {\\n    function isBridgingActive() external view returns (bool);\\n}\\n\\n/**\\n * @title Cross-chain dispatcher\\n */\\ncontract CrossChainDispatcher is ReentrancyGuard, CrossChainDispatcherStorageV2 {\\n    using SafeERC20 for IERC20;\\n    using BytesLib for bytes;\\n\\n    string public constant VERSION = \\\"1.3.0\\\";\\n\\n    /**\\n     * @dev LayerZero adapter param version\\n     * See more: https://layerzero.gitbook.io/docs/evm-guides/advanced/relayer-adapter-parameters\\n     */\\n    uint16 private constant LZ_ADAPTER_PARAMS_VERSION = 2;\\n\\n    uint256 private constant MAX_BPS = 100_00;\\n\\n    struct LayerZeroParams {\\n        address tokenIn;\\n        uint16 dstChainId;\\n        uint256 amountIn;\\n        uint256 nativeFee;\\n        bytes payload;\\n        address refundAddress;\\n        uint64 dstGasForCall;\\n        uint256 dstNativeAmount;\\n    }\\n\\n    /// @notice Emitted when Lz base gas limit updated\\n    event LzBaseGasLimitUpdated(uint256 oldLzBaseGasLimit, uint256 newLzBaseGasLimit);\\n\\n    /// @notice Emitted when Stargate composer is updated\\n    event StargateComposerUpdated(IStargateComposer oldStargateComposer, IStargateComposer newStargateComposer);\\n\\n    /// @notice Emitted when Stargate pool id is updated\\n    event StargatePoolIdUpdated(address indexed token, uint256 oldPoolId, uint256 newPoolId);\\n\\n    /// @notice Emitted when Stargate slippage is updated\\n    event StargateSlippageUpdated(uint256 oldStargateSlippage, uint256 newStargateSlippage);\\n\\n    /// @notice Emitted when synth->underlying L1 swap gas limit is updated\\n    event LeverageSwapTxGasLimitUpdated(uint64 oldSwapTxGasLimit, uint64 newSwapTxGasLimit);\\n\\n    /// @notice Emitted when leverage callback gas limit is updated\\n    event LeverageCallbackTxGasLimitUpdated(uint64 oldCallbackTxGasLimit, uint64 newCallbackTxGasLimit);\\n\\n    /// @notice Emitted when underlying->synth L1 swap gas limit is updated\\n    event FlashRepaySwapTxGasLimitUpdated(uint64 oldSwapTxGasLimit, uint64 newSwapTxGasLimit);\\n\\n    /// @notice Emitted when flash repay callback gas limit is updated\\n    event FlashRepayCallbackTxGasLimitUpdated(uint64 oldCallbackTxGasLimit, uint64 newCallbackTxGasLimit);\\n\\n    /// @notice Emitted when flag for pause bridge transfer is toggled\\n    event BridgingIsActiveUpdated(bool newIsActive);\\n\\n    /// @notice Emitted when a Cross-chain dispatcher mapping is updated\\n    event CrossChainDispatcherUpdated(uint16 chainId, address oldCrossChainDispatcher, address newCrossChainDispatcher);\\n\\n    /// @notice Emitted when flag for support chain is toggled\\n    event DestinationChainIsSupportedUpdated(uint16 chainId, bool newIsSupported);\\n\\n    modifier onlyGovernor() {\\n        if (msg.sender != poolRegistry.governor()) revert SenderIsNotGovernor();\\n        _;\\n    }\\n\\n    modifier onlyIfBridgingIsNotPaused() {\\n        if (!isBridgingActive || !IPoolV4(address(IManageable(msg.sender).pool())).isBridgingActive())\\n            revert BridgingIsPaused();\\n        _;\\n    }\\n\\n    modifier onlyIfSmartFarmingManager() {\\n        IPool _pool = IManageable(msg.sender).pool();\\n        if (!poolRegistry.isPoolRegistered(address(_pool))) revert InvalidMsgSender();\\n        if (msg.sender != address(_pool.smartFarmingManager())) revert InvalidMsgSender();\\n        _;\\n    }\\n\\n    modifier onlyIfStargateComposer() {\\n        if (msg.sender != address(stargateComposer)) revert InvalidMsgSender();\\n        _;\\n    }\\n\\n    modifier onlyIfProxyOFT() {\\n        if (!_isValidProxyOFT(msg.sender)) revert InvalidMsgSender();\\n        _;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    receive() external payable {}\\n\\n    function initialize(IPoolRegistry poolRegistry_, address weth_, address sgeth_) external initializer {\\n        if (address(poolRegistry_) == address(0)) revert AddressIsNull();\\n\\n        __ReentrancyGuard_init();\\n\\n        poolRegistry = poolRegistry_;\\n        stargateSlippage = 50; // 0.5%\\n        lzBaseGasLimit = 200_000;\\n        flashRepayCallbackTxGasLimit = 750_000;\\n        flashRepaySwapTxGasLimit = 500_000;\\n        leverageCallbackTxGasLimit = 750_000;\\n        leverageSwapTxGasLimit = 750_000;\\n        weth = weth_;\\n        sgeth = sgeth_;\\n    }\\n\\n    /**\\n     * @notice Called by the OFT contract when tokens are received from source chain.\\n     * @dev Token received are swapped to another token\\n     * @param srcChainId_ The chain id of the source chain.\\n     * @param from_ The address of the account who calls the sendAndCall() on the source chain.\\n     * @param amount_ The amount of tokens to transfer.\\n     * @param payload_ Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 srcChainId_,\\n        bytes calldata /*srcAddress_*/,\\n        uint64 /*nonce_*/,\\n        bytes calldata from_,\\n        uint amount_,\\n        bytes calldata payload_\\n    ) external override onlyIfProxyOFT {\\n        address _from = from_.toAddress(0);\\n        if (_from == address(0) || _from != crossChainDispatcherOf[srcChainId_]) revert InvalidFromAddress();\\n\\n        uint8 _op = CrossChainLib.getOperationType(payload_);\\n\\n        if (_op == CrossChainLib.FLASH_REPAY) {\\n            _crossChainFlashRepayCallback(amount_, payload_);\\n        } else if (_op == CrossChainLib.LEVERAGE) {\\n            _swapAndTriggerLeverageCallback(srcChainId_, amount_, payload_);\\n        } else {\\n            revert InvalidOperationType();\\n        }\\n    }\\n\\n    /**\\n     * @dev Finalize cross-chain flash repay process. The callback may fail due to slippage.\\n     */\\n    function _crossChainFlashRepayCallback(uint amount_, bytes calldata payload_) private {\\n        (address proxyOFT_, address _smartFarmingManager, uint256 _requestId) = CrossChainLib\\n            .decodeFlashRepayCallbackPayload(payload_);\\n\\n        IERC20 _syntheticToken = IERC20(IProxyOFT(proxyOFT_).token());\\n        _syntheticToken.safeApprove(_smartFarmingManager, 0);\\n        _syntheticToken.safeApprove(_smartFarmingManager, amount_);\\n        ISmartFarmingManager(_smartFarmingManager).crossChainFlashRepayCallback(_requestId, amount_);\\n    }\\n\\n    /**\\n     * @dev Swap synthetic token for underlying and trigger callback call\\n     */\\n    function _swapAndTriggerLeverageCallback(uint16 srcChainId_, uint amountIn_, bytes calldata payload_) private {\\n        // 1. Swap\\n        (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            uint256 _sgPoolId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        ) = CrossChainLib.decodeLeverageSwapPayload(payload_);\\n\\n        address _bridgeToken = IStargatePool(IStargateFactory(stargateComposer.factory()).getPool(_sgPoolId)).token();\\n\\n        if (_bridgeToken == sgeth) _bridgeToken = weth;\\n\\n        amountIn_ = _swap({\\n            requestId_: _requestId,\\n            tokenIn_: IProxyOFT(_dstProxyOFT).token(),\\n            tokenOut_: _bridgeToken,\\n            amountIn_: amountIn_,\\n            amountOutMin_: _amountOutMin\\n        });\\n\\n        // 2. Transfer underlying to source chain\\n        uint16 _srcChainId = srcChainId_;\\n\\n        _sendUsingStargate(\\n            LayerZeroParams({\\n                tokenIn: _bridgeToken,\\n                dstChainId: _srcChainId,\\n                amountIn: amountIn_,\\n                nativeFee: _callbackTxNativeFee + extraCallbackTxNativeFee[_requestId],\\n                payload: CrossChainLib.encodeLeverageCallbackPayload(_srcSmartFarmingManager, _requestId),\\n                refundAddress: _account,\\n                dstGasForCall: leverageCallbackTxGasLimit,\\n                dstNativeAmount: 0\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Receive token and payload from Stargate\\n     * @param srcChainId_ The chain id of the source chain.\\n     * @param srcAddress_ The remote Bridge address\\n     * @param token_ The token contract on the local chain\\n     * @param amountLD_ The qty of local _token contract tokens\\n     * @param payload_ The payload\\n     */\\n    function sgReceive(\\n        uint16 srcChainId_,\\n        bytes memory srcAddress_,\\n        uint256 /*nonce_*/,\\n        address token_,\\n        uint256 amountLD_,\\n        bytes memory payload_\\n    ) external override onlyIfStargateComposer {\\n        // Note: Stargate uses SGETH as `token_` when receiving native ETH\\n        if (token_ == sgeth) {\\n            IWETH(weth).deposit{value: amountLD_}();\\n            token_ = weth;\\n        }\\n\\n        address _srcAddress = srcAddress_.toAddress(0);\\n\\n        if (_srcAddress == address(0) || _srcAddress != crossChainDispatcherOf[srcChainId_])\\n            revert InvalidFromAddress();\\n\\n        uint8 _op = CrossChainLib.getOperationType(payload_);\\n\\n        if (_op == CrossChainLib.LEVERAGE) {\\n            _crossChainLeverageCallback(token_, amountLD_, payload_);\\n        } else if (_op == CrossChainLib.FLASH_REPAY) {\\n            _swapAndTriggerFlashRepayCallback(srcChainId_, token_, amountLD_, payload_);\\n        } else {\\n            revert InvalidOperationType();\\n        }\\n    }\\n\\n    /**\\n     * @dev Finalize cross-chain leverage process. The callback may fail due to slippage.\\n     */\\n    function _crossChainLeverageCallback(address bridgeToken_, uint256 amount_, bytes memory payload_) private {\\n        (address _smartFarmingManager, uint256 _requestId) = CrossChainLib.decodeLeverageCallbackPayload(payload_);\\n        IERC20(bridgeToken_).safeApprove(_smartFarmingManager, 0);\\n        IERC20(bridgeToken_).safeApprove(_smartFarmingManager, amount_);\\n        ISmartFarmingManager(_smartFarmingManager).crossChainLeverageCallback(_requestId, amount_);\\n    }\\n\\n    /**\\n     * @dev Send synthetic token cross-chain\\n     */\\n    function _sendUsingLayerZero(LayerZeroParams memory params_) private {\\n        address _to = crossChainDispatcherOf[params_.dstChainId];\\n        if (_to == address(0)) revert AddressIsNull();\\n\\n        bytes memory _adapterParams = abi.encodePacked(\\n            LZ_ADAPTER_PARAMS_VERSION,\\n            uint256(lzBaseGasLimit + params_.dstGasForCall),\\n            params_.dstNativeAmount,\\n            (params_.dstNativeAmount > 0) ? _to : address(0)\\n        );\\n\\n        ISyntheticToken(params_.tokenIn).proxyOFT().sendAndCall{value: params_.nativeFee}({\\n            _from: address(this),\\n            _dstChainId: params_.dstChainId,\\n            _toAddress: abi.encodePacked(_to),\\n            _amount: params_.amountIn,\\n            _payload: params_.payload,\\n            _dstGasForCall: params_.dstGasForCall,\\n            _refundAddress: payable(params_.refundAddress),\\n            _zroPaymentAddress: address(0),\\n            _adapterParams: _adapterParams\\n        });\\n    }\\n\\n    /**\\n     * @dev Swap underlying for synthetic token and trigger callback call\\n     */\\n    function _swapAndTriggerFlashRepayCallback(\\n        uint16 srcChainId_,\\n        address token_,\\n        uint256 amount_,\\n        bytes memory payload_\\n    ) private {\\n        // 1. Swap\\n        (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        ) = CrossChainLib.decodeFlashRepaySwapPayload(payload_);\\n\\n        address _syntheticToken = IProxyOFT(_dstProxyOFT).token();\\n        amount_ = _swap({\\n            requestId_: _requestId,\\n            tokenIn_: token_,\\n            tokenOut_: _syntheticToken,\\n            amountIn_: amount_,\\n            amountOutMin_: _amountOutMin\\n        });\\n\\n        // 2. Transfer synthetic token to source chain\\n        uint16 _srcChainId = srcChainId_;\\n        address _srcProxyOFT = IProxyOFT(_dstProxyOFT).getProxyOFTOf(_srcChainId);\\n\\n        _sendUsingLayerZero(\\n            LayerZeroParams({\\n                tokenIn: _syntheticToken,\\n                dstChainId: _srcChainId,\\n                amountIn: amount_,\\n                payload: CrossChainLib.encodeFlashRepayCallbackPayload(\\n                    _srcProxyOFT,\\n                    _srcSmartFarmingManager,\\n                    _requestId\\n                ),\\n                refundAddress: _account,\\n                dstGasForCall: flashRepayCallbackTxGasLimit,\\n                dstNativeAmount: 0,\\n                nativeFee: _callbackTxNativeFee + extraCallbackTxNativeFee[_requestId]\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Retry swap underlying and trigger callback.\\n     * @param srcChainId_ The source chain of failed tx\\n     * @param srcAddress_ The source path of failed tx\\n     * @param nonce_ The nonce of failed tx\\n     * @param token_ The token of failed tx\\n     * @param amount_ The amountIn of failed tx\\n     * @param payload_ The payload of failed tx\\n     * @param newAmountOutMin_ If swap failed due to slippage, caller may set lower newAmountOutMin_\\n     */\\n    function retrySwapAndTriggerFlashRepayCallback(\\n        uint16 srcChainId_,\\n        bytes calldata srcAddress_,\\n        uint64 nonce_,\\n        address token_,\\n        uint256 amount_,\\n        bytes calldata payload_,\\n        uint256 newAmountOutMin_\\n    ) external payable nonReentrant {\\n        IStargateComposerWithRetry _stargateComposer = IStargateComposerWithRetry(address(stargateComposer));\\n\\n        bytes memory _sgReceiveCallData = abi.encodeWithSelector(\\n            IStargateReceiver.sgReceive.selector,\\n            srcChainId_,\\n            abi.encodePacked(crossChainDispatcherOf[srcChainId_]),\\n            nonce_,\\n            token_,\\n            amount_,\\n            payload_\\n        );\\n\\n        (, , uint256 _requestId, address _account, , ) = CrossChainLib.decodeFlashRepaySwapPayload(payload_);\\n\\n        if (msg.value > 0) {\\n            extraCallbackTxNativeFee[_requestId] += msg.value;\\n        }\\n\\n        if (msg.sender == _account) {\\n            // Note: If `swapAmountOutMin[_requestId]` is `0` (default value), swap function will use payload's slippage param\\n            if (newAmountOutMin_ == 0) revert InvalidSlippageParam();\\n            swapAmountOutMin[_requestId] = newAmountOutMin_;\\n        }\\n\\n        // Note: `clearCachedSwap()` has checks to ensure that the args are consistent\\n        _stargateComposer.clearCachedSwap(srcChainId_, srcAddress_, nonce_, address(this), _sgReceiveCallData);\\n    }\\n\\n    /**\\n     * @notice Retry swap and trigger callback.\\n     * @param srcChainId_ The source chain of failed tx\\n     * @param srcAddress_ The source path of failed tx\\n     * @param nonce_ The nonce of failed tx\\n     * @param amount_ The amountIn of failed tx\\n     * @param payload_ The payload of failed tx\\n     * @param newAmountOutMin_ If swap failed due to slippage, caller may set lower newAmountOutMin_\\n     */\\n    function retrySwapAndTriggerLeverageCallback(\\n        uint16 srcChainId_,\\n        bytes calldata srcAddress_,\\n        uint64 nonce_,\\n        uint256 amount_,\\n        bytes calldata payload_,\\n        uint256 newAmountOutMin_\\n    ) external payable nonReentrant {\\n        (, address _dstProxyOFT, uint256 _requestId, , address _account, , ) = CrossChainLib.decodeLeverageSwapPayload(\\n            payload_\\n        );\\n\\n        if (!_isValidProxyOFT(_dstProxyOFT)) revert InvalidPayload();\\n\\n        if (msg.value > 0) {\\n            extraCallbackTxNativeFee[_requestId] += msg.value;\\n        }\\n\\n        if (msg.sender == _account) {\\n            // Note: If `swapAmountOutMin[_requestId]` is `0` (default value), swap function will use payload's slippage param\\n            if (newAmountOutMin_ == 0) revert InvalidSlippageParam();\\n            swapAmountOutMin[_requestId] = newAmountOutMin_;\\n        }\\n\\n        // Note: `retryOFTReceived()` has checks to ensure that the args are consistent\\n        bytes memory _from = abi.encodePacked(crossChainDispatcherOf[srcChainId_]);\\n        IProxyOFT(_dstProxyOFT).retryOFTReceived(\\n            srcChainId_,\\n            srcAddress_,\\n            nonce_,\\n            _from,\\n            address(this),\\n            amount_,\\n            payload_\\n        );\\n    }\\n\\n    /***\\n     * @notice Trigger swap using Stargate for flashRepay.\\n     * @param requestId_ Request id.\\n     * @param account_ User address and also refund address\\n     * @param tokenIn_ tokenIn\\n     * @param tokenOut_ tokenOut\\n     * @param amountIn_ amountIn_\\n     * @param amountOutMin_ amountOutMin_\\n     * @param lzArgs_ LayerZero method argument\\n     */\\n    function triggerFlashRepaySwap(\\n        uint256 requestId_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable override nonReentrant onlyIfSmartFarmingManager onlyIfBridgingIsNotPaused {\\n        address _account = account_; // stack too deep\\n\\n        (uint16 _dstChainId, uint256 callbackTxNativeFee_, uint64 flashRepaySwapTxGasLimit_) = CrossChainLib\\n            .decodeLzArgs(lzArgs_);\\n\\n        bytes memory _payload;\\n        {\\n            address _dstProxyOFT = ISyntheticToken(tokenOut_).proxyOFT().getProxyOFTOf(_dstChainId);\\n\\n            if (_dstProxyOFT == address(0)) revert AddressIsNull();\\n            if (!isDestinationChainSupported[_dstChainId]) revert DestinationChainNotAllowed();\\n\\n            uint256 _requestId = requestId_; // stack too deep\\n\\n            _payload = CrossChainLib.encodeFlashRepaySwapPayload({\\n                srcSmartFarmingManager_: msg.sender,\\n                dstProxyOFT_: _dstProxyOFT,\\n                requestId_: _requestId,\\n                account_: _account,\\n                amountOutMin_: amountOutMin_,\\n                callbackTxNativeFee_: callbackTxNativeFee_\\n            });\\n        }\\n\\n        _sendUsingStargate(\\n            LayerZeroParams({\\n                tokenIn: tokenIn_,\\n                dstChainId: _dstChainId,\\n                amountIn: amountIn_,\\n                nativeFee: msg.value,\\n                payload: _payload,\\n                refundAddress: _account,\\n                dstGasForCall: flashRepaySwapTxGasLimit_,\\n                dstNativeAmount: callbackTxNativeFee_\\n            })\\n        );\\n    }\\n\\n    /***\\n     * @notice Send synthetic token and trigger swap at destination chain\\n     * @dev Not checking if bridging is pause because `ProxyOFT._debitFrom()` does it\\n     * @param requestId_ Request id.\\n     * @param account_ User address and also refund address\\n     * @param tokenOut_ tokenOut\\n     * @param amountIn_ amountIn\\n     * @param amountOutMin_ amountOutMin\\n     * @param lzArgs_ LayerZero method argument\\n     */\\n    function triggerLeverageSwap(\\n        uint256 requestId_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable override nonReentrant onlyIfSmartFarmingManager onlyIfBridgingIsNotPaused {\\n        address _account = account_; // stack too deep\\n\\n        (uint16 _dstChainId, uint256 _callbackTxNativeFee, uint64 _leverageSwapTxGasLimit) = CrossChainLib.decodeLzArgs(\\n            lzArgs_\\n        );\\n\\n        bytes memory _payload;\\n        {\\n            address _tokenOut = tokenOut_; // stack too deep\\n            uint256 _requestId = requestId_; // stack too deep\\n            uint256 _amountOutMin = amountOutMin_; // stack too deep\\n\\n            address _dstProxyOFT = ISyntheticToken(tokenIn_).proxyOFT().getProxyOFTOf(_dstChainId);\\n            uint256 _sgPoolId = stargatePoolIdOf[_tokenOut];\\n\\n            if (_dstProxyOFT == address(0)) revert AddressIsNull();\\n            if (!isDestinationChainSupported[_dstChainId]) revert DestinationChainNotAllowed();\\n            if (_sgPoolId == 0) revert BridgeTokenNotSupported();\\n\\n            _payload = CrossChainLib.encodeLeverageSwapPayload({\\n                srcSmartFarmingManager_: msg.sender,\\n                dstProxyOFT_: _dstProxyOFT,\\n                requestId_: _requestId,\\n                sgPoolId_: _sgPoolId,\\n                account_: _account,\\n                amountOutMin_: _amountOutMin,\\n                callbackTxNativeFee_: _callbackTxNativeFee\\n            });\\n        }\\n\\n        _sendUsingLayerZero(\\n            LayerZeroParams({\\n                tokenIn: tokenIn_,\\n                dstChainId: _dstChainId,\\n                amountIn: amountIn_,\\n                payload: _payload,\\n                refundAddress: _account,\\n                dstGasForCall: _leverageSwapTxGasLimit,\\n                dstNativeAmount: _callbackTxNativeFee,\\n                nativeFee: msg.value\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Check wether an address is a proxyOFT or not\\n     */\\n    function _isValidProxyOFT(address proxyOFT_) private view returns (bool) {\\n        ISyntheticToken _syntheticToken = ISyntheticToken(IProxyOFT(proxyOFT_).token());\\n        if (!poolRegistry.doesSyntheticTokenExist(_syntheticToken)) return false;\\n        if (proxyOFT_ != address(_syntheticToken.proxyOFT())) return false;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Send underlying token cross-chain\\n     */\\n    function _sendUsingStargate(LayerZeroParams memory params_) private {\\n        IStargateRouter.lzTxObj memory _lzTxParams;\\n        bytes memory _to = abi.encodePacked(crossChainDispatcherOf[params_.dstChainId]);\\n        {\\n            if (_to.toAddress(0) == address(0)) revert AddressIsNull();\\n\\n            _lzTxParams = IStargateRouter.lzTxObj({\\n                dstGasForCall: params_.dstGasForCall,\\n                dstNativeAmount: params_.dstNativeAmount,\\n                dstNativeAddr: (params_.dstNativeAmount > 0) ? _to : abi.encode(0)\\n            });\\n        }\\n\\n        uint256 _poolId = stargatePoolIdOf[params_.tokenIn];\\n        if (_poolId == 0) revert BridgeTokenNotSupported();\\n        uint256 _amountOutMin = (params_.amountIn * (MAX_BPS - stargateSlippage)) / MAX_BPS;\\n        bytes memory _payload = params_.payload;\\n\\n        IStargateComposer _stargateComposer = stargateComposer;\\n\\n        // Note: StargateComposer only accepts native for ETH pool\\n        if (params_.tokenIn == weth) {\\n            IWETH(weth).withdraw(params_.amountIn);\\n            params_.nativeFee += params_.amountIn;\\n        } else {\\n            IERC20(params_.tokenIn).safeApprove(address(_stargateComposer), 0);\\n            IERC20(params_.tokenIn).safeApprove(address(_stargateComposer), params_.amountIn);\\n        }\\n\\n        _stargateComposer.swap{value: params_.nativeFee}({\\n            _dstChainId: params_.dstChainId,\\n            _srcPoolId: _poolId,\\n            _dstPoolId: _poolId,\\n            _refundAddress: payable(params_.refundAddress),\\n            _amountLD: params_.amountIn,\\n            _minAmountLD: _amountOutMin,\\n            _lzTxParams: _lzTxParams,\\n            _to: _to,\\n            _payload: _payload\\n        });\\n    }\\n\\n    /**\\n     * @dev Perform a swap considering slippage param from user\\n     */\\n    function _swap(\\n        uint256 requestId_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_\\n    ) private returns (uint256 _amountOut) {\\n        // 1. Use updated slippage if exist\\n        uint256 _storedAmountOutMin = swapAmountOutMin[requestId_];\\n        if (_storedAmountOutMin > 0) {\\n            // Use stored slippage and clear it\\n            amountOutMin_ = _storedAmountOutMin;\\n            delete swapAmountOutMin[requestId_];\\n        }\\n\\n        // 2. Perform swap\\n        ISwapper _swapper = poolRegistry.swapper();\\n        IERC20(tokenIn_).safeApprove(address(_swapper), 0);\\n        IERC20(tokenIn_).safeApprove(address(_swapper), amountIn_);\\n        _amountOut = _swapper.swapExactInput({\\n            tokenIn_: tokenIn_,\\n            tokenOut_: tokenOut_,\\n            amountIn_: amountIn_,\\n            amountOutMin_: amountOutMin_,\\n            receiver_: address(this)\\n        });\\n    }\\n\\n    /**\\n     * @notice Update flash repay callback tx gas limit\\n     */\\n    function updateFlashRepayCallbackTxGasLimit(uint64 newFlashRepayCallbackTxGasLimit_) external onlyGovernor {\\n        uint64 _currentFlashRepayCallbackTxGasLimit = flashRepayCallbackTxGasLimit;\\n        if (newFlashRepayCallbackTxGasLimit_ == _currentFlashRepayCallbackTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit FlashRepayCallbackTxGasLimitUpdated(\\n            _currentFlashRepayCallbackTxGasLimit,\\n            newFlashRepayCallbackTxGasLimit_\\n        );\\n        flashRepayCallbackTxGasLimit = newFlashRepayCallbackTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update flash repay swap tx gas limit\\n     */\\n    function updateFlashRepaySwapTxGasLimit(uint64 newFlashRepaySwapTxGasLimit_) external onlyGovernor {\\n        uint64 _currentFlashRepaySwapTxGasLimit = flashRepaySwapTxGasLimit;\\n        if (newFlashRepaySwapTxGasLimit_ == _currentFlashRepaySwapTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit FlashRepaySwapTxGasLimitUpdated(_currentFlashRepaySwapTxGasLimit, newFlashRepaySwapTxGasLimit_);\\n        flashRepaySwapTxGasLimit = newFlashRepaySwapTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update leverage callback tx gas limit\\n     */\\n    function updateLeverageCallbackTxGasLimit(uint64 newLeverageCallbackTxGasLimit_) external onlyGovernor {\\n        uint64 _currentLeverageCallbackTxGasLimit = leverageCallbackTxGasLimit;\\n        if (newLeverageCallbackTxGasLimit_ == _currentLeverageCallbackTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit LeverageCallbackTxGasLimitUpdated(_currentLeverageCallbackTxGasLimit, newLeverageCallbackTxGasLimit_);\\n        leverageCallbackTxGasLimit = newLeverageCallbackTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update leverage swap tx gas limit\\n     */\\n    function updateLeverageSwapTxGasLimit(uint64 newLeverageSwapTxGasLimit_) external onlyGovernor {\\n        uint64 _currentSwapTxGasLimit = leverageSwapTxGasLimit;\\n        if (newLeverageSwapTxGasLimit_ == _currentSwapTxGasLimit) revert NewValueIsSameAsCurrent();\\n        emit LeverageSwapTxGasLimitUpdated(_currentSwapTxGasLimit, newLeverageSwapTxGasLimit_);\\n        leverageSwapTxGasLimit = newLeverageSwapTxGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update Lz base gas limit\\n     */\\n    function updateLzBaseGasLimit(uint256 newLzBaseGasLimit_) external onlyGovernor {\\n        uint256 _currentBaseGasLimit = lzBaseGasLimit;\\n        if (newLzBaseGasLimit_ == _currentBaseGasLimit) revert NewValueIsSameAsCurrent();\\n        emit LzBaseGasLimitUpdated(_currentBaseGasLimit, newLzBaseGasLimit_);\\n        lzBaseGasLimit = newLzBaseGasLimit_;\\n    }\\n\\n    /**\\n     * @notice Update Stargate pool id of token.\\n     * @dev Use LZ ids (https://stargateprotocol.gitbook.io/stargate/developers/pool-ids)\\n     */\\n    function updateStargatePoolIdOf(address token_, uint256 newPoolId_) external onlyGovernor {\\n        uint256 _currentPoolId = stargatePoolIdOf[token_];\\n        if (newPoolId_ == _currentPoolId) revert NewValueIsSameAsCurrent();\\n        emit StargatePoolIdUpdated(token_, _currentPoolId, newPoolId_);\\n        stargatePoolIdOf[token_] = newPoolId_;\\n    }\\n\\n    /**\\n     * @notice Update Stargate slippage\\n     */\\n    function updateStargateSlippage(uint256 newStargateSlippage_) external onlyGovernor {\\n        uint256 _currentStargateSlippage = stargateSlippage;\\n        if (newStargateSlippage_ == _currentStargateSlippage) revert NewValueIsSameAsCurrent();\\n        emit StargateSlippageUpdated(_currentStargateSlippage, newStargateSlippage_);\\n        stargateSlippage = newStargateSlippage_;\\n    }\\n\\n    /**\\n     * @notice Update StargateComposer\\n     */\\n    function updateStargateComposer(IStargateComposer newStargateComposer_) external onlyGovernor {\\n        IStargateComposer _currentStargateComposer = stargateComposer;\\n        if (newStargateComposer_ == _currentStargateComposer) revert NewValueIsSameAsCurrent();\\n        emit StargateComposerUpdated(_currentStargateComposer, newStargateComposer_);\\n        stargateComposer = newStargateComposer_;\\n    }\\n\\n    /**\\n     * @notice Pause/Unpause bridge transfers\\n     */\\n    function toggleBridgingIsActive() external onlyGovernor {\\n        bool _newIsBridgingActive = !isBridgingActive;\\n        emit BridgingIsActiveUpdated(_newIsBridgingActive);\\n        isBridgingActive = _newIsBridgingActive;\\n    }\\n\\n    /**\\n     * @notice Update Cross-chain dispatcher mapping\\n     */\\n    function updateCrossChainDispatcherOf(uint16 chainId_, address crossChainDispatcher_) external onlyGovernor {\\n        address _current = crossChainDispatcherOf[chainId_];\\n        if (crossChainDispatcher_ == _current) revert NewValueIsSameAsCurrent();\\n        emit CrossChainDispatcherUpdated(chainId_, _current, crossChainDispatcher_);\\n        crossChainDispatcherOf[chainId_] = crossChainDispatcher_;\\n    }\\n\\n    /**\\n     * @notice Allow/Disallow destination chain\\n     * @dev Use LZ chain id\\n     */\\n    function toggleDestinationChainIsActive(uint16 chainId_) external onlyGovernor {\\n        bool _isDestinationChainSupported = !isDestinationChainSupported[chainId_];\\n        emit BridgingIsActiveUpdated(_isDestinationChainSupported);\\n        isDestinationChainSupported[chainId_] = _isDestinationChainSupported;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/IOFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../../../../openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTCoreUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n     * `_nonce` is the outbound nonce\\n     */\\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint _amount);\\n\\n    /**\\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n     * `_nonce` is the inbound nonce.\\n     */\\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\\n\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../IOFTCoreUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the composable OFT core standard\\n */\\ninterface IComposableOFTCoreUpgradeable is IOFTCoreUpgradeable {\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    function retryOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n\\n    event CallOFTReceivedFailure(\\n        uint16 indexed _srcChainId,\\n        bytes _srcAddress,\\n        uint64 _nonce,\\n        bytes _from,\\n        address indexed _to,\\n        uint _amount,\\n        bytes _payload,\\n        bytes _reason\\n    );\\n\\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\\n\\n    event RetryOFTReceivedSuccess(bytes32 _messageHash);\\n\\n    event NonContractAddress(address _address);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IOFTReceiverUpgradeable {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _from,\\n        uint _amount,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/@layerzerolabs/solidity-examples/util/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateComposer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IStargateRouter.sol\\\";\\n\\ninterface IStargateComposer {\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function factory() external view returns (address);\\n\\n    function stargateBridge() external view returns (address);\\n\\n    function stargateRouter() external view returns (IStargateRouter);\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        IStargateRouter.lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function peers(uint16 _chainId) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateReceiver {\\n    function sgReceive(\\n        uint16 _chainId,\\n        bytes memory _srcAddress,\\n        uint256 _nonce,\\n        address _token,\\n        uint256 amountLD,\\n        bytes memory payload\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/stargate-protocol/interfaces/IStargateRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(uint256 _poolId, uint256 _amountLD, address _to) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(uint16 _srcPoolId, uint256 _amountLP, address _to) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n\\n    function clearCachedSwap(uint16 _srcChainId, bytes calldata _srcAddress, uint256 _nonce) external;\\n\\n    function factory() external view returns (address);\\n\\n    function bridge() external view returns (address);\\n\\n    function cachedSwapLookup(\\n        uint16 _chainId_,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (address token, uint256 amountLD, address to, bytes memory payload);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICrossChainDispatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IOFTReceiverUpgradeable.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateReceiver.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateRouter.sol\\\";\\nimport \\\"../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface ICrossChainDispatcher is IStargateReceiver, IOFTReceiverUpgradeable {\\n    function crossChainDispatcherOf(uint16 chainId_) external view returns (address);\\n\\n    function triggerFlashRepaySwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function triggerLeverageSwap(\\n        uint256 id_,\\n        address payable account_,\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function isBridgingActive() external view returns (bool);\\n\\n    function flashRepayCallbackTxGasLimit() external view returns (uint64);\\n\\n    function flashRepaySwapTxGasLimit() external view returns (uint64);\\n\\n    function leverageCallbackTxGasLimit() external view returns (uint64);\\n\\n    function leverageSwapTxGasLimit() external view returns (uint64);\\n\\n    function lzBaseGasLimit() external view returns (uint256);\\n\\n    function stargateComposer() external view returns (IStargateComposer);\\n\\n    function stargateSlippage() external view returns (uint256);\\n\\n    function stargatePoolIdOf(address token_) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\n\\ninterface IDebtToken is IERC20Metadata {\\n    function lastTimestampAccrued() external view returns (uint256);\\n\\n    function isActive() external view returns (bool);\\n\\n    function syntheticToken() external view returns (ISyntheticToken);\\n\\n    function accrueInterest() external;\\n\\n    function debtIndex() external returns (uint256 debtIndex_);\\n\\n    function burn(address from_, uint256 amount_) external;\\n\\n    function issue(uint256 amount_, address to_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function flashIssue(address to_, uint256 amount_) external returns (uint256 _issued, uint256 _fee);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function repay(address onBehalfOf_, uint256 amount_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function repayAll(address onBehalfOf_) external returns (uint256 _repaid, uint256 _fee);\\n\\n    function quoteIssueIn(uint256 amountToIssue_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteIssueOut(uint256 amount_) external view returns (uint256 _amountToIssue, uint256 _fee);\\n\\n    function quoteRepayIn(uint256 amountToRepay_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteRepayOut(uint256 amount_) external view returns (uint256 _amountToRepay, uint256 _fee);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateInterestRate(uint256 newInterestRate_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function interestRate() external view returns (uint256);\\n\\n    function interestRatePerSecond() external view returns (uint256);\\n\\n    function toggleIsActive() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDepositToken is IERC20Metadata {\\n    function underlying() external view returns (IERC20);\\n\\n    function collateralFactor() external view returns (uint256);\\n\\n    function unlockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function lockedBalanceOf(address account_) external view returns (uint256);\\n\\n    function flashWithdraw(address account_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function deposit(uint256 amount_, address onBehalfOf_) external returns (uint256 _deposited, uint256 _fee);\\n\\n    function quoteDepositIn(uint256 amountToDeposit_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteDepositOut(uint256 amount_) external view returns (uint256 _amountToDeposit, uint256 _fee);\\n\\n    function quoteWithdrawIn(uint256 amountToWithdraw_) external view returns (uint256 _amount, uint256 _fee);\\n\\n    function quoteWithdrawOut(uint256 amount_) external view returns (uint256 _amountToWithdraw, uint256 _fee);\\n\\n    function withdraw(uint256 amount_, address to_) external returns (uint256 _withdrawn, uint256 _fee);\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateCollateralFactor(uint128 newCollateralFactor_) external;\\n\\n    function isActive() external view returns (bool);\\n\\n    function toggleIsActive() external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function withdrawFrom(address from_, uint256 amount_) external returns (uint256 _withdrawn, uint256 _fee);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice FeeProvider interface\\n */\\ninterface IFeeProvider {\\n    struct LiquidationFees {\\n        uint128 liquidatorIncentive;\\n        uint128 protocolFee;\\n    }\\n\\n    function defaultSwapFee() external view returns (uint256);\\n\\n    function depositFee() external view returns (uint256);\\n\\n    function issueFee() external view returns (uint256);\\n\\n    function liquidationFees() external view returns (uint128 liquidatorIncentive, uint128 protocolFee);\\n\\n    function repayFee() external view returns (uint256);\\n\\n    function swapFeeFor(address account_) external view returns (uint256);\\n\\n    function withdrawFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPool.sol\\\";\\n\\n/**\\n * @notice Manageable interface\\n */\\ninterface IManageable {\\n    function pool() external view returns (IPool _pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPauseable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPauseable {\\n    function paused() external view returns (bool);\\n\\n    function everythingStopped() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IFeeProvider.sol\\\";\\nimport \\\"./ISmartFarmingManager.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"../interfaces/IFeeProvider.sol\\\";\\n\\n/**\\n * @notice Pool interface\\n */\\ninterface IPool is IPauseable, IGovernable {\\n    function debtFloorInUsd() external view returns (uint256);\\n\\n    function feeCollector() external view returns (address);\\n\\n    function feeProvider() external view returns (IFeeProvider);\\n\\n    function maxLiquidable() external view returns (uint256);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool);\\n\\n    function doesDebtTokenExist(IDebtToken debtToken_) external view returns (bool);\\n\\n    function doesDepositTokenExist(IDepositToken depositToken_) external view returns (bool);\\n\\n    function depositTokenOf(IERC20 underlying_) external view returns (IDepositToken);\\n\\n    function debtTokenOf(ISyntheticToken syntheticToken_) external view returns (IDebtToken);\\n\\n    function getDepositTokens() external view returns (address[] memory);\\n\\n    function getDebtTokens() external view returns (address[] memory);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    function debtOf(address account_) external view returns (uint256 _debtInUsd);\\n\\n    function depositOf(address account_) external view returns (uint256 _depositInUsd, uint256 _issuableLimitInUsd);\\n\\n    function debtPositionOf(\\n        address account_\\n    )\\n        external\\n        view\\n        returns (\\n            bool _isHealthy,\\n            uint256 _depositInUsd,\\n            uint256 _debtInUsd,\\n            uint256 _issuableLimitInUsd,\\n            uint256 _issuableInUsd\\n        );\\n\\n    function liquidate(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateIn(\\n        ISyntheticToken syntheticToken_,\\n        uint256 totalToSeized_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _amountToRepay, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteLiquidateMax(\\n        ISyntheticToken syntheticToken_,\\n        address account_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _maxAmountToRepay);\\n\\n    function quoteLiquidateOut(\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountToRepay_,\\n        IDepositToken depositToken_\\n    ) external view returns (uint256 _totalSeized, uint256 _toLiquidator, uint256 _fee);\\n\\n    function quoteSwapIn(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountOut_\\n    ) external view returns (uint256 _amountIn, uint256 _fee);\\n\\n    function quoteSwapOut(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external view returns (uint256 _amountOut, uint256 _fee);\\n\\n    function swap(\\n        ISyntheticToken syntheticTokenIn_,\\n        ISyntheticToken syntheticTokenOut_,\\n        uint256 amountIn_\\n    ) external returns (uint256 _amountOut, uint256 _fee);\\n\\n    function treasury() external view returns (ITreasury);\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function addToDepositTokensOfAccount(address account_) external;\\n\\n    function removeFromDepositTokensOfAccount(address account_) external;\\n\\n    function addToDebtTokensOfAccount(address account_) external;\\n\\n    function removeFromDebtTokensOfAccount(address account_) external;\\n\\n    function getDepositTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function getDebtTokensOfAccount(address account_) external view returns (address[] memory);\\n\\n    function isSwapActive() external view returns (bool);\\n\\n    function smartFarmingManager() external view returns (ISmartFarmingManager);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./external/IMasterOracle.sol\\\";\\nimport \\\"./IPauseable.sol\\\";\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ISyntheticToken.sol\\\";\\nimport \\\"./external/ISwapper.sol\\\";\\nimport \\\"./IQuoter.sol\\\";\\nimport \\\"./ICrossChainDispatcher.sol\\\";\\n\\ninterface IPoolRegistry is IPauseable, IGovernable {\\n    function feeCollector() external view returns (address);\\n\\n    function isPoolRegistered(address pool_) external view returns (bool);\\n\\n    function nativeTokenGateway() external view returns (address);\\n\\n    function getPools() external view returns (address[] memory);\\n\\n    function registerPool(address pool_) external;\\n\\n    function unregisterPool(address pool_) external;\\n\\n    function masterOracle() external view returns (IMasterOracle);\\n\\n    function updateFeeCollector(address newFeeCollector_) external;\\n\\n    function idOfPool(address pool_) external view returns (uint256);\\n\\n    function nextPoolId() external view returns (uint256);\\n\\n    function swapper() external view returns (ISwapper);\\n\\n    function quoter() external view returns (IQuoter);\\n\\n    function crossChainDispatcher() external view returns (ICrossChainDispatcher);\\n\\n    function doesSyntheticTokenExist(ISyntheticToken syntheticToken_) external view returns (bool _exists);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProxyOFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/@layerzerolabs/solidity-examples/contracts-upgradeable/token/oft/composable/IComposableOFTCoreUpgradeable.sol\\\";\\n\\ninterface IProxyOFT is IComposableOFTCoreUpgradeable {\\n    function getProxyOFTOf(uint16 chainId_) external view returns (address _proxyOFT);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"./IProxyOFT.sol\\\";\\n\\ninterface IQuoter {\\n    function quoteCrossChainFlashRepayNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteCrossChainLeverageNativeFee(\\n        IProxyOFT proxyOFT_,\\n        bytes calldata lzArgs_\\n    ) external view returns (uint256 _nativeFee);\\n\\n    function quoteLeverageCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function quoteFlashRepayCallbackNativeFee(uint16 dstChainId_) external view returns (uint256 _callbackTxNativeFee);\\n\\n    function getFlashRepaySwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n\\n    function getLeverageSwapAndCallbackLzArgs(\\n        uint16 srcChainId_,\\n        uint16 dstChainId_\\n    ) external view returns (bytes memory lzArgs_);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Reward Distributor interface\\n */\\ninterface IRewardsDistributor {\\n    function rewardToken() external view returns (IERC20);\\n\\n    function tokenSpeeds(IERC20 token_) external view returns (uint256);\\n\\n    function tokensAccruedOf(address account_) external view returns (uint256);\\n\\n    function updateBeforeMintOrBurn(IERC20 token_, address account_) external;\\n\\n    function updateBeforeTransfer(IERC20 token_, address from_, address to_) external;\\n\\n    function claimable(address account_) external view returns (uint256 _claimable);\\n\\n    function claimable(address account_, IERC20 token_) external view returns (uint256 _claimable);\\n\\n    function claimRewards(address account_) external;\\n\\n    function claimRewards(address account_, IERC20[] memory tokens_) external;\\n\\n    function claimRewards(address[] memory accounts_, IERC20[] memory tokens_) external;\\n\\n    function updateTokenSpeed(IERC20 token_, uint256 newSpeed_) external;\\n\\n    function updateTokenSpeeds(IERC20[] calldata tokens_, uint256[] calldata speeds_) external;\\n\\n    function tokens(uint256) external view returns (IERC20);\\n\\n    function tokenStates(IERC20) external view returns (uint224 index, uint32 timestamp);\\n\\n    function accountIndexOf(IERC20, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISmartFarmingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./IManageable.sol\\\";\\nimport \\\"./IDepositToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\n\\n/**\\n * @notice SmartFarmingManager interface\\n */\\ninterface ISmartFarmingManager {\\n    function flashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        uint256 repayAmountMin_\\n    ) external returns (uint256 _withdrawn, uint256 _repaid);\\n\\n    function crossChainFlashRepay(\\n        ISyntheticToken syntheticToken_,\\n        IDepositToken depositToken_,\\n        uint256 withdrawAmount_,\\n        IERC20 bridgeToken_,\\n        uint256 bridgeTokenAmountMin_,\\n        uint256 swapAmountOutMin_,\\n        uint256 repayAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 swapAmountOutMin_,\\n        uint256 depositAmountMin_,\\n        bytes calldata lzArgs_\\n    ) external payable;\\n\\n    function crossChainLeverageCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _deposited);\\n\\n    function crossChainFlashRepayCallback(uint256 id_, uint256 swapAmountOut_) external returns (uint256 _repaid);\\n\\n    function leverage(\\n        IERC20 tokenIn_,\\n        IDepositToken depositToken_,\\n        ISyntheticToken syntheticToken_,\\n        uint256 amountIn_,\\n        uint256 leverage_,\\n        uint256 depositAmountMin_\\n    ) external returns (uint256 _deposited, uint256 _issued);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISyntheticToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IPoolRegistry.sol\\\";\\nimport \\\"../interfaces/IProxyOFT.sol\\\";\\n\\ninterface ISyntheticToken is IERC20Metadata {\\n    function isActive() external view returns (bool);\\n\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burn(address from_, uint256 amount) external;\\n\\n    function poolRegistry() external view returns (IPoolRegistry);\\n\\n    function toggleIsActive() external;\\n\\n    function seize(address from_, address to_, uint256 amount_) external;\\n\\n    function updateMaxTotalSupply(uint256 newMaxTotalSupply_) external;\\n\\n    function updateProxyOFT(IProxyOFT newProxyOFT_) external;\\n\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    function proxyOFT() external view returns (IProxyOFT);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ITreasury {\\n    function pull(address to_, uint256 amount_) external;\\n\\n    function migrateTo(address newTreasury_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IMasterOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMasterOracle {\\n    function quoteTokenToUsd(address _asset, uint256 _amount) external view returns (uint256 _amountInUsd);\\n\\n    function quoteUsdToToken(address _asset, uint256 _amountInUsd) external view returns (uint256 _amount);\\n\\n    function quote(address _assetIn, address _assetOut, uint256 _amountIn) external view returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IStargateComposerWithRetry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/stargate-protocol/interfaces/IStargateComposer.sol\\\";\\n\\n// Note: Extending interface instead of adding those function to avoid triggering upgrade for other contracts\\n// We may move functions to `IStargateComposer` on the next major upgrade\\n// Refs: https://github.com/autonomoussoftware/metronome-synth/issues/877\\ninterface IStargateComposerWithRetry is IStargateComposer {\\n    function payloadHashes(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint256 _nonce\\n    ) external view returns (bytes32);\\n\\n    function clearCachedSwap(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        address _receiver,\\n        bytes calldata _sgReceiveCallData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IStargateFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargateFactory {\\n    function getPool(uint256 _id) external view returns (address _pool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IStargatePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IStargatePool {\\n    function token() external view returns (address _token);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/ISwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISwapper {\\n    function swapExactInput(\\n        address tokenIn_,\\n        address tokenOut_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address receiver_\\n    ) external returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/external/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CrossChainLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary CrossChainLib {\\n    /**\\n     * @notice Supported cross-chain operations\\n     */\\n    uint8 public constant LEVERAGE = 1;\\n    uint8 public constant FLASH_REPAY = 2;\\n\\n    function getOperationType(bytes memory payload_) internal pure returns (uint8 _op) {\\n        (_op, ) = abi.decode(payload_, (uint8, bytes));\\n    }\\n\\n    function encodeLeverageCallbackPayload(\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(LEVERAGE, abi.encode(srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeLeverageCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, uint256));\\n    }\\n\\n    function encodeFlashRepayCallbackPayload(\\n        address srcProxyOFT_,\\n        address srcSmartFarmingManager_,\\n        uint256 requestId_\\n    ) internal pure returns (bytes memory _payload) {\\n        return abi.encode(FLASH_REPAY, abi.encode(srcProxyOFT_, srcSmartFarmingManager_, requestId_));\\n    }\\n\\n    function decodeFlashRepayCallbackPayload(\\n        bytes memory payload_\\n    ) internal pure returns (address srcProxyOFT_, address _srcSmartFarmingManager, uint256 _requestId) {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256));\\n    }\\n\\n    function encodeFlashRepaySwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        address account_,\\n        uint256 amountOutMin_,\\n        uint256 callbackTxNativeFee_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                FLASH_REPAY,\\n                abi.encode(\\n                    srcSmartFarmingManager_,\\n                    dstProxyOFT_,\\n                    requestId_,\\n                    account_,\\n                    amountOutMin_,\\n                    callbackTxNativeFee_\\n                )\\n            );\\n    }\\n\\n    function decodeFlashRepaySwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, address, uint256, uint256));\\n    }\\n\\n    function encodeLeverageSwapPayload(\\n        address srcSmartFarmingManager_,\\n        address dstProxyOFT_,\\n        uint256 requestId_,\\n        uint256 sgPoolId_,\\n        address account_,\\n        uint256 amountOutMin_,\\n        uint256 callbackTxNativeFee_\\n    ) internal pure returns (bytes memory _payload) {\\n        return\\n            abi.encode(\\n                LEVERAGE,\\n                abi.encode(\\n                    srcSmartFarmingManager_,\\n                    dstProxyOFT_,\\n                    requestId_,\\n                    sgPoolId_,\\n                    account_,\\n                    amountOutMin_,\\n                    callbackTxNativeFee_\\n                )\\n            );\\n    }\\n\\n    function decodeLeverageSwapPayload(\\n        bytes memory payload_\\n    )\\n        internal\\n        pure\\n        returns (\\n            address _srcSmartFarmingManager,\\n            address _dstProxyOFT,\\n            uint256 _requestId,\\n            uint256 _sgPoolId,\\n            address _account,\\n            uint256 _amountOutMin,\\n            uint256 _callbackTxNativeFee\\n        )\\n    {\\n        (, payload_) = abi.decode(payload_, (uint8, bytes));\\n        return abi.decode(payload_, (address, address, uint256, uint256, address, uint256, uint256));\\n    }\\n\\n    function encodeLzArgs(\\n        uint16 dstChainId_,\\n        uint256 callbackNativeFee_,\\n        uint64 swapTxGasLimit_\\n    ) internal pure returns (bytes memory _lzArgs) {\\n        return abi.encode(dstChainId_, callbackNativeFee_, swapTxGasLimit_);\\n    }\\n\\n    function decodeLzArgs(\\n        bytes memory lzArgs_\\n    ) internal pure returns (uint16 _dstChainId, uint256 _callbackNativeFee, uint64 _swapTxGasLimit) {\\n        return abi.decode(lzArgs_, (uint16, uint256, uint64));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/CrossChainDispatcherStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/ICrossChainDispatcher.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\n\\nabstract contract CrossChainDispatcherStorageV1 is ICrossChainDispatcher {\\n    /**\\n     * @notice The pool registry contract\\n     */\\n    IPoolRegistry public poolRegistry;\\n\\n    /**\\n     * @notice Overwritten swap slippage params\\n     * @dev Used by retry functions in case of swap failure due to slippage (See: `_swap()`)\\n     */\\n    mapping(uint256 => uint256) public swapAmountOutMin;\\n\\n    /**\\n     * @notice Maps other chains `CrossChainDispatcher` contracts\\n     */\\n    mapping(uint16 => address) public crossChainDispatcherOf;\\n\\n    /**\\n     * @notice The base gas to pay for cross-chain calls\\n     * @dev This limit covers basic token transfer LZ cost\\n     */\\n    uint256 public lzBaseGasLimit;\\n\\n    /**\\n     * @notice The slippage we're willing to accept for SG like:like transfers\\n     */\\n    uint256 public stargateSlippage;\\n\\n    /**\\n     * @notice The gas limit to cover `_crossChainFlashRepayCallback()` call\\n     */\\n    uint64 public flashRepayCallbackTxGasLimit;\\n\\n    /**\\n     * @notice The gas limit to cover `_swapAndTriggerFlashRepayCallback()` call\\n     */\\n    uint64 public flashRepaySwapTxGasLimit;\\n\\n    /**\\n     * @notice The gas limit to cover `_crossChainLeverageCallback()` call\\n     */\\n    uint64 public leverageCallbackTxGasLimit;\\n\\n    /**\\n     * @notice The gas limit to cover `_swapAndTriggerLeverageCallback()` call\\n     */\\n    uint64 public leverageSwapTxGasLimit;\\n\\n    /**\\n     * @notice Flag that pause/unpause all cross-chain activities\\n     */\\n    bool public isBridgingActive;\\n\\n    /**\\n     * @notice The Stargate Router contract\\n     */\\n    IStargateComposer public stargateComposer;\\n\\n    /**\\n     * @notice Maps Stargate's token pools\\n     */\\n    mapping(address => uint256) public stargatePoolIdOf;\\n\\n    /**\\n     * @notice Maps supported cross-chain routes (i.e. which chains are allowed to be used as source of liquidity)\\n     */\\n    mapping(uint16 => bool) public isDestinationChainSupported;\\n\\n    /**\\n     * @notice WETH contract\\n     */\\n    address public weth;\\n\\n    /**\\n     * @notice SGETH contract\\n     */\\n    address public sgeth;\\n}\\n\\nabstract contract CrossChainDispatcherStorageV2 is CrossChainDispatcherStorageV1 {\\n    /**\\n     * @notice Store extra amount sent when retrying a failed tx due to low native fee\\n     */\\n    mapping(uint256 => uint256) public extraCallbackTxNativeFee;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../dependencies/openzeppelin-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeTokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgingIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DestinationChainNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFromAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperationType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippageParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewValueIsSameAsCurrent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsActive\",\"type\":\"bool\"}],\"name\":\"BridgingIsActiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCrossChainDispatcher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCrossChainDispatcher\",\"type\":\"address\"}],\"name\":\"CrossChainDispatcherUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsSupported\",\"type\":\"bool\"}],\"name\":\"DestinationChainIsSupportedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldCallbackTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newCallbackTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"FlashRepayCallbackTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldSwapTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newSwapTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"FlashRepaySwapTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldCallbackTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newCallbackTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"LeverageCallbackTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldSwapTxGasLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newSwapTxGasLimit\",\"type\":\"uint64\"}],\"name\":\"LeverageSwapTxGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLzBaseGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLzBaseGasLimit\",\"type\":\"uint256\"}],\"name\":\"LzBaseGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IStargateComposer\",\"name\":\"oldStargateComposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStargateComposer\",\"name\":\"newStargateComposer\",\"type\":\"address\"}],\"name\":\"StargateComposerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPoolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPoolId\",\"type\":\"uint256\"}],\"name\":\"StargatePoolIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldStargateSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStargateSlippage\",\"type\":\"uint256\"}],\"name\":\"StargateSlippageUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"crossChainDispatcherOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraCallbackTxNativeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashRepayCallbackTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashRepaySwapTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"poolRegistry_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sgeth_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBridgingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"isDestinationChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageCallbackTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageSwapTxGasLimit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzBaseGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"onOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"contract IPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newAmountOutMin_\",\"type\":\"uint256\"}],\"name\":\"retrySwapAndTriggerFlashRepayCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"newAmountOutMin_\",\"type\":\"uint256\"}],\"name\":\"retrySwapAndTriggerLeverageCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLD_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"sgReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgeth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateComposer\",\"outputs\":[{\"internalType\":\"contract IStargateComposer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stargatePoolIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBridgingIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"}],\"name\":\"toggleDestinationChainIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"triggerFlashRepaySwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId_\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"lzArgs_\",\"type\":\"bytes\"}],\"name\":\"triggerLeverageSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"crossChainDispatcher_\",\"type\":\"address\"}],\"name\":\"updateCrossChainDispatcherOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newFlashRepayCallbackTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateFlashRepayCallbackTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newFlashRepaySwapTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateFlashRepaySwapTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newLeverageCallbackTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateLeverageCallbackTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newLeverageSwapTxGasLimit_\",\"type\":\"uint64\"}],\"name\":\"updateLeverageSwapTxGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLzBaseGasLimit_\",\"type\":\"uint256\"}],\"name\":\"updateLzBaseGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStargateComposer\",\"name\":\"newStargateComposer_\",\"type\":\"address\"}],\"name\":\"updateStargateComposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPoolId_\",\"type\":\"uint256\"}],\"name\":\"updateStargatePoolIdOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStargateSlippage_\",\"type\":\"uint256\"}],\"name\":\"updateStargateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CrossChainDispatcher", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}