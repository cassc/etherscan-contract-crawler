{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n        pragma solidity ^0.8.4;\r\n\r\n        interface IERC20 {\r\n            \r\n            function totalSupply() external view returns (uint256);\r\n            function balanceOf(address account) external view returns (uint256);\r\n            function transfer(address recipient, uint256 amount) external returns (bool);\r\n            function allowance(address owner, address spender) external view returns (uint256);\r\n            function approve(address spender, uint256 amount) external returns (bool);\r\n            function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n            \r\n            event Transfer(address indexed from, address indexed to, uint256 value);\r\n            event Approval(address indexed owner, address indexed spender, uint256 value);\r\n        }\r\n\r\n        library SafeMath {\r\n        \r\n\r\n            function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n                return a + b;\r\n            }\r\n\r\n\r\n            function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n                return a - b;\r\n            }\r\n\r\n\r\n            function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n                return a * b;\r\n            }\r\n            \r\n            function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n                return a / b;\r\n            }\r\n    \r\n            function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n                unchecked {\r\n                    require(b <= a, errorMessage);\r\n                    return a - b;\r\n                }\r\n            }\r\n            \r\n            function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n                unchecked {\r\n                    require(b > 0, errorMessage);\r\n                    return a / b;\r\n                }\r\n            }        \r\n            \r\n    }\r\n\r\n        abstract contract Context {\r\n            function _msgSender() internal view virtual returns (address) {\r\n                return msg.sender;\r\n            }\r\n\r\n            function _msgData() internal view virtual returns (bytes calldata) {\r\n                this; \r\n                return msg.data;\r\n            }\r\n        }\r\n\r\n\r\n        abstract contract Ownable is Context {\r\n            address internal _owner;\r\n            address private _previousOwner;\r\n\r\n            event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n            constructor () {\r\n                _owner = _msgSender();\r\n                emit OwnershipTransferred(address(0), _owner);\r\n            }\r\n            \r\n            function owner() public view virtual returns (address) {\r\n                return _owner;\r\n            }\r\n            \r\n            modifier onlyOwner() {\r\n                require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n                _;\r\n            }\r\n            \r\n            function renounceOwnership() public virtual onlyOwner {\r\n                emit OwnershipTransferred(_owner, address(0));\r\n                _owner = address(0);\r\n            }\r\n\r\n\r\n            function transferOwnership(address newOwner) public virtual onlyOwner {\r\n                require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n                emit OwnershipTransferred(_owner, newOwner);\r\n                _owner = newOwner;\r\n            }\r\n        }\r\n\r\n    \r\n        interface IERC20Metadata is IERC20 {\r\n            function name() external view returns (string memory);\r\n            function symbol() external view returns (string memory);\r\n            function decimals() external view returns (uint8);\r\n        }\r\n        contract ERC20 is Context,Ownable, IERC20, IERC20Metadata {\r\n            using SafeMath for uint256;\r\n\r\n            mapping(address => uint256) private _balances;\r\n\r\n            mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n            uint256 private _totalSupply;\r\n\r\n            string private _name;\r\n            string private _symbol;\r\n\r\n            constructor(string memory name_, string memory symbol_) {\r\n                _name = name_;\r\n                _symbol = symbol_;\r\n            }\r\n\r\n            function name() public view virtual override returns (string memory) {\r\n                return _name;\r\n            }\r\n\r\n            function symbol() public view virtual override returns (string memory) {\r\n                return _symbol;\r\n            }\r\n            function decimals() public view virtual override returns (uint8) {\r\n                return 18;\r\n            }\r\n            function totalSupply() public view virtual override returns (uint256) {\r\n                return _totalSupply;\r\n            }\r\n            function balanceOf(address account) public view virtual override returns (uint256) {\r\n                return _balances[account];\r\n            }\r\n            function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n                _transfer(_msgSender(), recipient, amount);\r\n                return true;\r\n            }\r\n            function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n                return _allowances[owner][spender];\r\n            }\r\n            function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n                _approve(_msgSender(), spender, amount);\r\n                return true;\r\n            }\r\n            function transferFrom(\r\n                address sender,\r\n                address recipient,\r\n                uint256 amount\r\n            ) public virtual override returns (bool) {\r\n                _transfer(sender, recipient, amount);\r\n                _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n                return true;\r\n            }\r\n            function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n                _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n                return true;\r\n            }\r\n            function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n                _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n                return true;\r\n            }\r\n            function _transfer(\r\n                address sender,\r\n                address recipient,\r\n                uint256 amount\r\n            ) internal virtual {\r\n                require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n                require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n                _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n                _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n                emit Transfer(sender, recipient, amount);\r\n            }\r\n            function _mint(address account, uint256 amount) internal virtual {\r\n                require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n                _beforeTokenTransfer(address(0), account, amount);\r\n\r\n                _totalSupply = _totalSupply.add(amount);\r\n                _balances[account] = _balances[account].add(amount);\r\n                emit Transfer(address(0), account, amount);\r\n            }\r\n            function _burn(address account, uint256 amount) internal virtual {\r\n                require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n                _beforeTokenTransfer(account, address(0), amount);\r\n\r\n                _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n                _totalSupply = _totalSupply.sub(amount);\r\n                emit Transfer(account, address(0), amount);\r\n            }\r\n            function _approve(\r\n                address owner,\r\n                address spender,\r\n                uint256 amount\r\n            ) internal virtual {\r\n                require(owner != address(0), \"ERC20: approve from the zero address\");\r\n                require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n                _allowances[owner][spender] = amount;\r\n                emit Approval(owner, spender, amount);\r\n            }\r\n            function _beforeTokenTransfer(\r\n                address from,\r\n                address to,\r\n                uint256 amount\r\n            ) internal virtual {}\r\n        }\r\n\r\n\r\n        interface IUniswapV2Factory {\r\n            function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        }\r\n\r\n        interface IUniswapV2Pair {\r\n            function factory() external view returns (address);\r\n        }\r\n\r\n        interface IUniswapV2Router01 {\r\n            function factory() external pure returns (address);\r\n            function WETH() external pure returns (address);\r\n            function addLiquidityETH(\r\n                address token,\r\n                uint amountTokenDesired,\r\n                uint amountTokenMin,\r\n                uint amountETHMin,\r\n                address to,\r\n                uint deadline\r\n            ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        }\r\n\r\n        interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n            function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                uint amountIn,\r\n                uint amountOutMin,\r\n                address[] calldata path,\r\n                address to,\r\n                uint deadline\r\n            ) external;\r\n        }\r\n\r\n        contract TOKEN is ERC20 {\r\n            using SafeMath for uint256;\r\n\r\n            mapping (address => bool) private _isExcludedFromFee;\r\n            mapping(address => bool) private _isExcludedFromMaxWallet;\r\n            mapping(address => bool) private _isExcludedFromMaxTnxLimit;\r\n\r\n            address constant _burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n            address public _marketingWalletAddress;   \r\n            address public _devWalletAddress;\r\n            uint256 public _liquidityFee;\r\n            \r\n            uint256 public _buyLiquidityFee = 1;  \r\n            uint256 public _buyMarketingFee = 1;  \r\n            uint256 public _buyDevFee = 1;  \r\n\r\n            uint256 public _sellLiquidityFee = 1; \r\n            uint256 public _sellMarketingFee = 1; \r\n            uint256 public _sellDevFee = 1;\r\n\r\n            IUniswapV2Router02 public uniswapV2Router;\r\n            address public uniswapV2Pair;\r\n            bool inSwapAndLiquify;\r\n            bool public swapAndLiquifyEnabled = true;\r\n            uint256 public numTokensSellToAddToLiquidity;\r\n\r\n            uint256 public _maxWalletBalance;\r\n            uint256 public _maxTxAmount;\r\n            event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n            event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n            \r\n            constructor () ERC20(\"PepeMask\", \"PEPEMASK\"){\r\n\r\n                numTokensSellToAddToLiquidity = 10000 * 10 ** decimals();\r\n\r\n                _marketingWalletAddress = 0x2FfDcf0C3358C79ef81705E8d2125E35Bcd9030F;\r\n                _devWalletAddress = 0xb32a553f9dF5f8cc9b983055E583fEd2eafC4895;\r\n                \r\n                IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D );\r\n                // Create a uniswap pair for this new token\r\n                uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                    .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n                // set the rest of the contract variables\r\n                uniswapV2Router = _uniswapV2Router;\r\n                \r\n                //exclude owner and this contract from fee\r\n                _isExcludedFromFee[_msgSender()] = true;\r\n                _isExcludedFromFee[address(this)] = true;\r\n            \r\n                // exclude from the Max wallet balance \r\n                _isExcludedFromMaxWallet[owner()] = true;\r\n                _isExcludedFromMaxWallet[address(this)] = true;\r\n                _isExcludedFromMaxWallet[_marketingWalletAddress] = true;\r\n\r\n                // exclude from the max tnx limit \r\n                _isExcludedFromMaxTnxLimit[owner()] = true;\r\n                _isExcludedFromMaxTnxLimit[address(this)] = true;\r\n                _isExcludedFromMaxTnxLimit[_marketingWalletAddress] = true;\r\n\r\n                /*\r\n                    _mint is an internal function in ERC20.sol that is only called here,\r\n                    and CANNOT be called ever again\r\n                */\r\n                _mint(owner(), 6942069420 * 10 ** decimals());\r\n                \t\t\r\n                _maxWalletBalance = (totalSupply() * 1 ) / 100;\r\n                _maxTxAmount = (totalSupply() * 1 ) / 100;\t\t\r\n                \r\n            }\r\n\r\n            function excludeFromFee(address account) public onlyOwner {\r\n                _isExcludedFromFee[account] = true;\r\n            }\r\n            \r\n            function includeInFee(address account) public onlyOwner {\r\n                _isExcludedFromFee[account] = false;\r\n            }\r\n\r\n            function includeAndExcludedFromMaxWallet(address account, bool value) public onlyOwner {\r\n                _isExcludedFromMaxWallet[account] = value;\r\n                }\r\n\r\n            function includeAndExcludedFromMaxTnxLimit(address account, bool value) public onlyOwner {\r\n                _isExcludedFromMaxTnxLimit[account] = value;\r\n            }\r\n\r\n            function isExcludedFromMaxWallet(address account) public view returns(bool){\r\n               return _isExcludedFromMaxWallet[account];\r\n             }\r\n\r\n            function isExcludedFromMaxTnxLimit(address account) public view returns(bool) {\r\n                return _isExcludedFromMaxTnxLimit[account];\r\n            }\r\n\r\n            function setMaxWalletBalance(uint256 maxBalancePercent) external onlyOwner {\r\n              _maxWalletBalance = maxBalancePercent * 10** decimals();\r\n            }\r\n\r\n            function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\r\n              _maxTxAmount = maxTxAmount * 10** decimals();\r\n             }\r\n\r\n            function setSellFeePercent(\r\n                uint256 lFee,\r\n                uint256 mFee,\r\n                uint256 dFee\r\n            ) external onlyOwner {\r\n                _sellLiquidityFee = lFee;\r\n                _sellMarketingFee = mFee;\r\n                _sellDevFee = dFee;\r\n                uint256 sellTotalFees = _sellLiquidityFee + _sellMarketingFee + _sellDevFee;\r\n                require(sellTotalFees <= 99, \"Must keep fees at 99% or less\"); \r\n            }\r\n\r\n            function setBuyFeePercent(\r\n                uint256 lFee,\r\n                uint256 mFee,\r\n                uint256 dFee\r\n            ) external onlyOwner {\r\n                _buyLiquidityFee = lFee;\r\n                _buyMarketingFee = mFee;\r\n                _buyDevFee = dFee;\r\n                uint256 buyTotalFees = _buyLiquidityFee + _buyMarketingFee + _buyDevFee;\r\n                require(buyTotalFees <= 99, \"Must keep fees at 99% or less\");   \r\n\r\n            }\r\n\r\n            function setMarketingWalletAddress(address _addr) external onlyOwner {\r\n                _marketingWalletAddress = _addr;\r\n            }\r\n\r\n            function setDevWalletAddress(address _addr) external onlyOwner {\r\n                _devWalletAddress = _addr;\r\n            }\r\n            \r\n            function setNumTokensSellToAddToLiquidity(uint256 amount) external onlyOwner {\r\n                numTokensSellToAddToLiquidity = amount * 10 ** decimals();\r\n            }\r\n\r\n            function setRouterAddress(address newRouter) external onlyOwner {\r\n                IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);\r\n                uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n                uniswapV2Router = _uniswapV2Router;\r\n            }\r\n\r\n            function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n                swapAndLiquifyEnabled = _enabled;\r\n                emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n            }\r\n            \r\n            //to recieve ETH from uniswapV2Router when swaping\r\n            receive() external payable {}\r\n\r\n            // to withdraw stucked ETH \r\n            function withdrawStuckedFunds(uint amount) external onlyOwner{\r\n                // This is the current recommended method to use.\r\n                (bool sent,) = _owner.call{value: amount}(\"\");\r\n                require(sent, \"Failed to send ETH\");    \r\n            }\r\n\r\n            // Withdraw stuked tokens \r\n            function withdrawStuckedTokens(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success){\r\n            return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n            }\r\n        \r\n\r\n            function isExcludedFromFee(address account) public view returns(bool) {\r\n                return _isExcludedFromFee[account];\r\n            }\r\n\r\n            function _transfer(\r\n                address from,\r\n                address to,\r\n                uint256 amount\r\n            ) internal override {\r\n                require(from != address(0), \"ERC20: transfer from the zero address\");\r\n                require(to != address(0), \"ERC20: transfer to the zero address\");\r\n                require(amount > 0, \"Transfer amount must be greater than zero\");\r\n                \r\n                if (from != owner() && to != owner())\r\n                    require( _isExcludedFromMaxTnxLimit[from] || _isExcludedFromMaxTnxLimit[to] || \r\n                        amount <= _maxTxAmount,\r\n                        \"ERC20: Transfer amount exceeds the maxTxAmount.\"\r\n                    );    \r\n                \r\n                if (\r\n                    from != owner() &&\r\n                    to != address(this) &&\r\n                    to != _burnAddress &&\r\n                    to != uniswapV2Pair ) \r\n                {\r\n                    uint256 currentBalance = balanceOf(to);\r\n                    require(_isExcludedFromMaxWallet[to] || (currentBalance + amount <= _maxWalletBalance),\r\n                            \"ERC20: Reached max wallet holding\");\r\n                }\r\n                uint256 contractTokenBalance = balanceOf(address(this)); \r\n                bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n                if (\r\n                    overMinTokenBalance &&\r\n                    !inSwapAndLiquify &&\r\n                    from != uniswapV2Pair &&\r\n                    swapAndLiquifyEnabled\r\n                ) {\r\n                    contractTokenBalance = numTokensSellToAddToLiquidity;\r\n                    inSwapAndLiquify = true;\r\n                    swapBack(contractTokenBalance);\r\n                    inSwapAndLiquify = false;\r\n                }\r\n                \r\n               bool takeFee = true;\r\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n                super._transfer(from, to, amount);\r\n                takeFee = false;\r\n            } else {\r\n\r\n            if (from == uniswapV2Pair) {\r\n                // Buy\r\n                uint256 liquidityTokens = amount.mul(_buyLiquidityFee).div(100);\r\n                uint256 marketingTokens = amount.mul(_buyMarketingFee).div(100);\r\n                uint256 devTokens = amount.mul(_buyDevFee).div(100);\r\n\r\n                amount= amount.sub(liquidityTokens.add(marketingTokens).add(devTokens));\r\n                super._transfer(from, address(this), liquidityTokens.add(marketingTokens).add(devTokens));\r\n                super._transfer(from, to, amount);\r\n\r\n            } else if (to == uniswapV2Pair) {\r\n                // Sell\r\n                uint256 liquidityTokens = amount.mul(_sellLiquidityFee).div(100);\r\n                uint256 marketingTokens = amount.mul(_sellMarketingFee).div(100);\r\n                uint256 devTokens = amount.mul(_sellDevFee).div(100);\r\n\r\n                amount= amount.sub(liquidityTokens.add(marketingTokens).add(devTokens));\r\n                super._transfer(from, address(this), liquidityTokens.add(marketingTokens).add(devTokens));\r\n                super._transfer(from, to, amount);\r\n            } else {\r\n                // Transfer\r\n                super._transfer(from, to, amount);\r\n            }\r\n\r\n        }\r\n            }\r\n\r\n            function swapBack(uint256 contractBalance) private {\r\n\r\n                uint256 tokensForLiquidity = contractBalance.mul(_sellLiquidityFee).div(100);\r\n                uint256 marketingTokens = contractBalance.mul(_sellMarketingFee).div(100);\r\n                uint256 devTokens = contractBalance.mul(_sellDevFee).div(100);\r\n\r\n\r\n                uint256 totalTokensToSwap = tokensForLiquidity + marketingTokens + devTokens ;\r\n                \r\n                if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n\r\n                bool success;\r\n                \r\n                // Halve the amount of liquidity tokens\r\n                uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\r\n                \r\n                swapTokensForEth(contractBalance - liquidityTokens); \r\n                \r\n                uint256 ethBalance = address(this).balance;\r\n                uint256 ethForLiquidity = ethBalance;\r\n\r\n                uint256 ethForMarketing = ethBalance * marketingTokens / (totalTokensToSwap - (tokensForLiquidity/2));\r\n                uint256 ethForDev = ethBalance * devTokens / (totalTokensToSwap - (tokensForLiquidity/2));\r\n\r\n                ethForLiquidity -= ethForMarketing + ethForDev ;\r\n                                \r\n                if(liquidityTokens > 0 && ethForLiquidity > 0){\r\n                    addLiquidity(liquidityTokens, ethForLiquidity);\r\n\r\n                }\r\n\r\n                (success,) = address(_marketingWalletAddress).call{value: ethForMarketing}(\"\");\r\n                (success,) = address(_devWalletAddress).call{value: ethForDev}(\"\");\r\n\r\n        }       \r\n\r\n            function swapTokensForEth(uint256 tokenAmount) private {\r\n                address[] memory path = new address[](2);\r\n                path[0] = address(this);\r\n                path[1] = uniswapV2Router.WETH();\r\n                _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n                uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                    tokenAmount,\r\n                    0, // accept any amount of ETH\r\n                    path,\r\n                    address(this),\r\n                    block.timestamp\r\n                );\r\n            }\r\n\r\n            function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n                _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n                uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n                    address(this),\r\n                    tokenAmount,\r\n                    0, // slippage is unavoidable\r\n                    0, // slippage is unavoidable\r\n                    owner(),\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludedFromMaxTnxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTnxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBalancePercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TOKEN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7014a5cbe421f9cdb10c59df7917d4d7352a99e58daff2a88a10d3b1ef11627"}