{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/stats/calculators/ConvexCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { ConvexRewards } from \\\"src/libs/ConvexRewards.sol\\\";\\nimport { ITokenWrapper } from \\\"src/interfaces/external/convex/ITokenWrapper.sol\\\";\\nimport { IBaseRewardPool } from \\\"src/interfaces/external/convex/IBaseRewardPool.sol\\\";\\nimport { IncentiveCalculatorBase } from \\\"src/stats/calculators/base/IncentiveCalculatorBase.sol\\\";\\n\\ncontract ConvexCalculator is IncentiveCalculatorBase {\\n    constructor(ISystemRegistry _systemRegistry) IncentiveCalculatorBase(_systemRegistry) { }\\n\\n    function getPlatformTokenMintAmount(\\n        address _platformToken,\\n        uint256 _annualizedReward\\n    ) public view override returns (uint256) {\\n        return ConvexRewards.getCVXMintAmount(_platformToken, _annualizedReward);\\n    }\\n\\n    /// @notice If the pool id is >= 151, then it is a stash token that should be unwrapped:\\n    /// Ref: https://docs.convexfinance.com/convexfinanceintegration/baserewardpool\\n    function resolveRewardToken(address extraRewarder) public view override returns (address rewardToken) {\\n        rewardToken = address(IBaseRewardPool(extraRewarder).rewardToken());\\n\\n        // Taking PID from base rewarder\\n        if (rewarder.pid() >= 151) {\\n            ITokenWrapper reward = ITokenWrapper(rewardToken);\\n            // Retrieving the actual token value if token is valid\\n            rewardToken = reward.isInvalid() ? address(0) : reward.token();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISystemRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { IWETH9 } from \\\"src/interfaces/utils/IWETH9.sol\\\";\\nimport { IGPToke } from \\\"src/interfaces/staking/IGPToke.sol\\\";\\nimport { ILMPVaultRegistry } from \\\"./vault/ILMPVaultRegistry.sol\\\";\\nimport { IAccessController } from \\\"./security/IAccessController.sol\\\";\\nimport { ISwapRouter } from \\\"src/interfaces/swapper/ISwapRouter.sol\\\";\\nimport { ICurveResolver } from \\\"src/interfaces/utils/ICurveResolver.sol\\\";\\nimport { ILMPVaultRouter } from \\\"src/interfaces/vault/ILMPVaultRouter.sol\\\";\\nimport { ILMPVaultFactory } from \\\"src/interfaces/vault/ILMPVaultFactory.sol\\\";\\nimport { ISystemSecurity } from \\\"src/interfaces/security/ISystemSecurity.sol\\\";\\nimport { IDestinationRegistry } from \\\"./destinations/IDestinationRegistry.sol\\\";\\nimport { IRootPriceOracle } from \\\"src/interfaces/oracles/IRootPriceOracle.sol\\\";\\nimport { ILMPVaultRegistry } from \\\"src/interfaces/vault/ILMPVaultRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"./vault/IDestinationVaultRegistry.sol\\\";\\nimport { IAccessController } from \\\"src/interfaces/security/IAccessController.sol\\\";\\nimport { IDestinationRegistry } from \\\"src/interfaces/destinations/IDestinationRegistry.sol\\\";\\nimport { IStatsCalculatorRegistry } from \\\"src/interfaces/stats/IStatsCalculatorRegistry.sol\\\";\\nimport { IAsyncSwapperRegistry } from \\\"src/interfaces/liquidation/IAsyncSwapperRegistry.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"src/interfaces/vault/IDestinationVaultRegistry.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IIncentivesPricingStats } from \\\"src/interfaces/stats/IIncentivesPricingStats.sol\\\";\\n\\n/// @notice Root most registry contract for the system\\ninterface ISystemRegistry {\\n    /// @notice Get the TOKE contract for the system\\n    /// @return toke instance of TOKE used in the system\\n    function toke() external view returns (IERC20Metadata);\\n\\n    /// @notice Get the referenced WETH contract for the system\\n    /// @return weth contract pointer\\n    function weth() external view returns (IWETH9);\\n\\n    /// @notice Get the GPToke staking contract\\n    /// @return gpToke instance of the gpToke contract for the system\\n    function gpToke() external view returns (IGPToke);\\n\\n    /// @notice Get the LMP Vault registry for this system\\n    /// @return registry instance of the registry for this system\\n    function lmpVaultRegistry() external view returns (ILMPVaultRegistry registry);\\n\\n    /// @notice Get the destination Vault registry for this system\\n    /// @return registry instance of the registry for this system\\n    function destinationVaultRegistry() external view returns (IDestinationVaultRegistry registry);\\n\\n    /// @notice Get the access Controller for this system\\n    /// @return controller instance of the access controller for this system\\n    function accessController() external view returns (IAccessController controller);\\n\\n    /// @notice Get the destination template registry for this system\\n    /// @return registry instance of the registry for this system\\n    function destinationTemplateRegistry() external view returns (IDestinationRegistry registry);\\n\\n    /// @notice LMP Vault Router\\n    /// @return router instance of the lmp vault router\\n    function lmpVaultRouter() external view returns (ILMPVaultRouter router);\\n\\n    /// @notice Vault factory lookup by type\\n    /// @return vaultFactory instance of the vault factory for this vault type\\n    function getLMPVaultFactoryByType(bytes32 vaultType) external view returns (ILMPVaultFactory vaultFactory);\\n\\n    /// @notice Get the stats calculator registry for this system\\n    /// @return registry instance of the registry for this system\\n    function statsCalculatorRegistry() external view returns (IStatsCalculatorRegistry registry);\\n\\n    /// @notice Get the root price oracle for this system\\n    /// @return oracle instance of the root price oracle for this system\\n    function rootPriceOracle() external view returns (IRootPriceOracle oracle);\\n\\n    /// @notice Get the async swapper registry for this system\\n    /// @return registry instance of the registry for this system\\n    function asyncSwapperRegistry() external view returns (IAsyncSwapperRegistry registry);\\n\\n    /// @notice Get the swap router for this system\\n    /// @return router instance of the swap router for this system\\n    function swapRouter() external view returns (ISwapRouter router);\\n\\n    /// @notice Get the curve resolver for this system\\n    /// @return resolver instance of the curve resolver for this system\\n    function curveResolver() external view returns (ICurveResolver resolver);\\n\\n    /// @notice Register given address as a Reward Token\\n    /// @dev Reverts if address is 0 or token was already registered\\n    /// @param rewardToken token address to add\\n    function addRewardToken(address rewardToken) external;\\n\\n    /// @notice Removes given address from Reward Token list\\n    /// @dev Reverts if address was not registered\\n    /// @param rewardToken token address to remove\\n    function removeRewardToken(address rewardToken) external;\\n\\n    /// @notice Verify if given address is registered as Reward Token\\n    /// @param rewardToken token address to verify\\n    /// @return bool that indicates true if token is registered and false if not\\n    function isRewardToken(address rewardToken) external view returns (bool);\\n\\n    /// @notice Get the system security instance for this system\\n    /// @return security instance of system security for this system\\n    function systemSecurity() external view returns (ISystemSecurity security);\\n\\n    /// @notice Get the Incentive Pricing Stats\\n    /// @return incentivePricing the incentive pricing contract\\n    function incentivePricing() external view returns (IIncentivesPricingStats);\\n}\\n\"\r\n    },\r\n    \"src/libs/ConvexRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\n// reference: https://docs.convexfinance.com/convexfinanceintegration/cvx-minting\\nlibrary ConvexRewards {\\n    uint256 internal constant CVX_MAX_SUPPLY = 100_000_000 * 1e18; // 100 mil max supply\\n    uint256 internal constant CLIFF_COUNT = 1000;\\n    uint256 internal constant CLIFF_SIZE = CVX_MAX_SUPPLY / CLIFF_COUNT; // 100_000 per clif\\n\\n    /**\\n     * @notice Calculates the amount of CVX that is minted given the amount of CRV earned\\n     * @param cvxToken address for CVX token\\n     * @param crvEarned the amount of CRV reward that was earned\\n     */\\n    function getCVXMintAmount(address cvxToken, uint256 crvEarned) internal view returns (uint256) {\\n        uint256 cvxSupply = IERC20(cvxToken).totalSupply();\\n\\n        // if no cvx has been minted, pre-mine the same amount as the provided crv\\n        if (cvxSupply == 0 || crvEarned == 0) return 0;\\n\\n        // determine the current cliff\\n        uint256 currentCliff = cvxSupply / CLIFF_SIZE;\\n\\n        // if the current cliff is below the max, then CVX will be minted\\n        if (currentCliff < CLIFF_COUNT) {\\n            uint256 remainingCliffs = CLIFF_COUNT - currentCliff;\\n            uint256 cvxEarned = crvEarned * remainingCliffs / CLIFF_COUNT;\\n\\n            // ensure that the max supply has not been exceeded\\n            uint256 amountUntilMax = CVX_MAX_SUPPLY - cvxSupply;\\n            if (cvxEarned > amountUntilMax) {\\n                // if maxSupply would be exceeded then return the remaining supply\\n                return amountUntilMax;\\n            }\\n\\n            return cvxEarned;\\n        }\\n\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/convex/ITokenWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ITokenWrapper {\\n    function isInvalid() external view returns (bool);\\n    function token() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/external/convex/IBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBaseRewardPool {\\n    /// @notice The address of the staking token\\n    function stakingToken() external view returns (address);\\n\\n    /// @notice The address of the reward token\\n    function rewardToken() external view returns (IERC20);\\n\\n    /// @notice The length of the extra rewards array\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    /// @notice The pool PID\\n    function pid() external view returns (uint256);\\n\\n    /// @notice The address of the extra rewards token at a given index\\n    function extraRewards(uint256 i) external view returns (address);\\n\\n    /// @notice Called by a staker to get their allocated rewards\\n    function getReward() external returns (bool);\\n\\n    /// @notice Gives a staker their rewards, with the option of claiming extra rewards\\n    function getReward(address _account, bool _claimExtras) external returns (bool);\\n\\n    /// @notice Get total rewards supply\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Get balance of an address\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    /// @notice Withdraw directly to curve LP token\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool);\\n\\n    /// @notice timestamp when reward period ends\\n    function periodFinish() external view returns (uint256);\\n\\n    /// @notice The rate of reward distribution per block.\\n    function rewardRate() external view returns (uint256);\\n\\n    /// @notice The amount of rewards distributed per staked token stored.\\n    function rewardPerToken() external view returns (uint256);\\n\\n    /// @notice The duration for locking the token rewards.\\n    function duration() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/stats/calculators/base/IncentiveCalculatorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Math } from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport { Initializable } from \\\"openzeppelin-contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { IBaseRewardPool } from \\\"src/interfaces/external/convex/IBaseRewardPool.sol\\\";\\nimport { IDexLSTStats } from \\\"src/interfaces/stats/IDexLSTStats.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { IStatsCalculator } from \\\"src/interfaces/stats/IStatsCalculator.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { IIncentivesPricingStats } from \\\"src/interfaces/stats/IIncentivesPricingStats.sol\\\";\\nimport { Stats } from \\\"src/stats/Stats.sol\\\";\\nimport { SystemComponent } from \\\"src/SystemComponent.sol\\\";\\nimport { SecurityBase } from \\\"src/security/SecurityBase.sol\\\";\\n\\nabstract contract IncentiveCalculatorBase is\\n    SystemComponent,\\n    SecurityBase,\\n    Initializable,\\n    IDexLSTStats,\\n    IStatsCalculator\\n{\\n    IDexLSTStats public underlyerStats;\\n    IBaseRewardPool public rewarder;\\n    address public platformToken; // like cvx\\n\\n    /// @dev rewarder token address => uint256 safeTotalSupply\\n    mapping(address => uint256) public safeTotalSupplies;\\n\\n    /// @dev rewarder token address => uint256 last snapshot timestamp\\n    mapping(address => uint256) public lastSnapshotTimestamps;\\n\\n    /// @dev rewarder token address => uint256 last snapshot reward per token\\n    mapping(address => uint256) public lastSnapshotRewardPerToken;\\n\\n    /// @dev rewarder token address => uint256 last snapshot reward rate\\n    mapping(address => uint256) public lastSnapshotRewardRate;\\n\\n    /// @dev Last time total APR was recorded.\\n    uint256 public lastSnapshotTotalAPR;\\n\\n    /// @dev Last time an incentive was recorded or distributed.\\n    uint256 public lastIncentiveTimestamp;\\n\\n    /// @dev Last time an non trivial incentive was recorded or distributed.\\n    uint256 public decayInitTimestamp;\\n\\n    /// @dev State variable to indicate non trivial incentive APR was measured last snapshot.\\n    bool public decayState;\\n\\n    /// @dev Incentive credits balance before decay\\n    uint8 public incentiveCredits;\\n\\n    /// @dev Interval between two consecutive snapshot steps during the snapshot process.\\n    uint256 public constant SNAPSHOT_INTERVAL = 4 hours;\\n\\n    /// @dev Non-trivial annual rate set at 0.5% (in fixed point format 1e18 = 1).\\n    uint256 public constant NON_TRIVIAL_ANNUAL_RATE = 5e15;\\n\\n    /// @dev Duration after which a price/data becomes stale.\\n    uint40 public constant PRICE_STALE_CHECK = 12 hours;\\n\\n    /// @dev Cap on allowable credits in the system.\\n    uint8 public constant MAX_CREDITS = 48;\\n\\n    /// @dev The APR Id\\n    bytes32 private _aprId;\\n\\n    /// @dev Enum representing the snapshot status for a given rewarder.\\n    enum SnapshotStatus {\\n        noSnapshot, // Indicates that no snapshot has been taken yet for the rewarder.\\n        tooSoon, // Indicates that it's too soon to take another snapshot since the last one.\\n        shouldFinalize, // Indicates that the conditions are met for finalizing a snapshot.\\n        shouldRestart // Indicates that the conditions are met for restarting a snapshot.\\n    }\\n\\n    struct InitData {\\n        address rewarder;\\n        address underlyerStats;\\n        address platformToken;\\n    }\\n\\n    // Custom error for handling unexpected snapshot statuses\\n    error InvalidSnapshotStatus();\\n\\n    constructor(ISystemRegistry _systemRegistry)\\n        SystemComponent(_systemRegistry)\\n        SecurityBase(address(_systemRegistry.accessController()))\\n    { }\\n\\n    /// @inheritdoc IStatsCalculator\\n    function initialize(bytes32[] calldata, bytes calldata initData) external override initializer {\\n        InitData memory decodedInitData = abi.decode(initData, (InitData));\\n\\n        Errors.verifyNotZero(decodedInitData.rewarder, \\\"rewarder\\\");\\n        Errors.verifyNotZero(decodedInitData.underlyerStats, \\\"underlyerStats\\\");\\n        Errors.verifyNotZero(decodedInitData.platformToken, \\\"platformToken\\\");\\n\\n        // slither-disable-start missing-zero-check\\n        rewarder = IBaseRewardPool(decodedInitData.rewarder);\\n        underlyerStats = IDexLSTStats(decodedInitData.underlyerStats);\\n        platformToken = decodedInitData.platformToken;\\n        // slither-disable-end missing-zero-check\\n\\n        lastIncentiveTimestamp = block.timestamp;\\n        decayInitTimestamp = block.timestamp;\\n\\n        decayState = false;\\n\\n        _aprId = keccak256(abi.encode(\\\"incentive\\\", platformToken, decodedInitData.rewarder));\\n    }\\n\\n    /// @inheritdoc IStatsCalculator\\n    function getAddressId() external view returns (address) {\\n        return platformToken;\\n    }\\n\\n    /// @inheritdoc IStatsCalculator\\n    function getAprId() external view returns (bytes32) {\\n        return _aprId;\\n    }\\n\\n    /// @inheritdoc IDexLSTStats\\n    function current() external returns (DexLSTStatsData memory dexLSTStatsData) {\\n        // Fetch base stats\\n        DexLSTStatsData memory data = underlyerStats.current();\\n\\n        uint256 extraRewardsLength = rewarder.extraRewardsLength();\\n        // we add 2 to the length to account for the main reward and platform reward\\n        uint256 totalRewardsLength = extraRewardsLength + 2;\\n        uint8 currentCredits = incentiveCredits;\\n\\n        address[] memory rewardTokens = new address[](totalRewardsLength);\\n        uint256[] memory safeTotalSupply = new uint256[](totalRewardsLength);\\n        uint256[] memory annualizedRewardAmounts = new uint256[](totalRewardsLength);\\n        uint40[] memory periodFinishForRewards = new uint40[](totalRewardsLength);\\n\\n        // Determine if incentive credits earned should continue to be decayed\\n        if (decayState) {\\n            uint256 totalAPR = _computeTotalAPR();\\n\\n            // Apply additional decay if APR is within tolerance\\n            // slither-disable-next-line incorrect-equality\\n            if ((totalAPR == 0) || totalAPR < (lastSnapshotTotalAPR + (lastSnapshotTotalAPR / 20))) {\\n                // slither-disable-start timestamp\\n                uint256 hoursPassed = (block.timestamp - decayInitTimestamp) / 3600;\\n                if (hoursPassed > 0) {\\n                    currentCredits = _decayCredits(incentiveCredits, hoursPassed);\\n                }\\n                // slither-disable-end timestamp\\n            }\\n        }\\n\\n        // Compute main reward statistics\\n        (uint256 safeSupply, address rewardToken, uint256 annualizedReward, uint256 periodFinish) =\\n            _getStakingIncentiveStats(rewarder, false);\\n\\n        // Store main reward stats\\n        safeTotalSupply[0] = safeSupply;\\n        rewardTokens[0] = rewardToken;\\n        annualizedRewardAmounts[0] = annualizedReward;\\n        periodFinishForRewards[0] = uint40(periodFinish);\\n\\n        // Compute platform reward statistics\\n        safeTotalSupply[1] = safeSupply;\\n        rewardTokens[1] = platformToken;\\n        annualizedRewardAmounts[1] = getPlatformTokenMintAmount(platformToken, annualizedReward);\\n        periodFinishForRewards[1] = uint40(periodFinish);\\n\\n        // Loop through and compute stats for each extra rewarder\\n        for (uint256 i = 0; i < extraRewardsLength; ++i) {\\n            IBaseRewardPool extraReward = IBaseRewardPool(rewarder.extraRewards(i));\\n            (safeSupply, rewardToken, annualizedReward, periodFinish) = _getStakingIncentiveStats(extraReward, true);\\n\\n            // Store stats for the current extra reward\\n            rewardTokens[i + 2] = rewardToken;\\n            annualizedRewardAmounts[i + 2] = annualizedReward;\\n            periodFinishForRewards[i + 2] = uint40(periodFinish);\\n            safeTotalSupply[i + 2] += safeSupply;\\n        }\\n\\n        // Compile aggregated data into the result struct\\n        data.stakingIncentiveStats = StakingIncentiveStats({\\n            safeTotalSupply: safeTotalSupply[0], // supply across all rewarders\\n            rewardTokens: rewardTokens,\\n            annualizedRewardAmounts: annualizedRewardAmounts,\\n            periodFinishForRewards: periodFinishForRewards,\\n            incentiveCredits: currentCredits\\n        });\\n\\n        return data;\\n    }\\n\\n    /**\\n     * @notice Determines if a snapshot is needed for the main rewarder or any of the extra rewarders.\\n     * @dev _shouldSnapshot returns true if more than 24 hours passed since the last snapshot.\\n     *  Incentive credits needs to be updated at least once every 24 hours which is covered by the above check.\\n     * @return true if any of the main or extra rewarders require a snapshot, otherwise false.\\n     */\\n    function shouldSnapshot() public view returns (bool) {\\n        // Check if the main rewarder needs a snapshot\\n        (uint256 rewardRate, uint256 totalSupply, uint256 periodFinish) = _getRewardPoolMetrics(address(rewarder));\\n        if (_shouldSnapshot(address(rewarder), rewardRate, periodFinish, totalSupply)) return true;\\n\\n        // Determine the number of extra rewarders\\n        uint256 extraRewardsLength = rewarder.extraRewardsLength();\\n\\n        // Iterate through extra rewarders to check if any of them need a snapshot\\n        for (uint256 i = 0; i < extraRewardsLength; ++i) {\\n            address extraRewarder = rewarder.extraRewards(i);\\n            (rewardRate, totalSupply, periodFinish) = _getRewardPoolMetrics(extraRewarder);\\n            if (_shouldSnapshot(extraRewarder, rewardRate, periodFinish, totalSupply)) return true;\\n        }\\n\\n        // No rewarder requires a snapshot\\n        return false;\\n    }\\n\\n    function snapshot() external {\\n        // Record a new snapshot of total APR across all rewarders\\n        // Also, triggers a new snapshot or finalize snapshot for total supply across all the rewarders\\n        // slither-disable-next-line reentrancy-no-eth,reentrancy-benign\\n        lastSnapshotTotalAPR = _computeTotalAPR();\\n        uint8 currentCredits = incentiveCredits;\\n        uint256 elapsedTime = block.timestamp - lastIncentiveTimestamp;\\n\\n        // If APR is above a threshold and credits are below the cap and 1 day has passed since the last update\\n        // slither-disable-next-line timestamp\\n        if (lastSnapshotTotalAPR >= NON_TRIVIAL_ANNUAL_RATE && currentCredits < MAX_CREDITS && elapsedTime >= 1 days) {\\n            // If APR is above a threshold, increment credits based on time elapsed\\n            // Only give credit for whole days, so divide-before-multiply is desired\\n            // slither-disable-next-line divide-before-multiply\\n            uint8 credits = uint8(2 * (elapsedTime / 1 days)); // 2 credits for each day\\n            // Increment credits, but cap at MAX_CREDITS\\n            incentiveCredits = uint8(Math.min(currentCredits + credits, MAX_CREDITS));\\n            // Update the last incentive timestamp to the current block's timestamp\\n            lastIncentiveTimestamp = block.timestamp;\\n            decayState = false;\\n        } else if (lastSnapshotTotalAPR >= NON_TRIVIAL_ANNUAL_RATE) {\\n            decayState = false;\\n        } else if (lastSnapshotTotalAPR < NON_TRIVIAL_ANNUAL_RATE) {\\n            // Set to decay incentive credits state since APR is 0 or near 0\\n            if (!decayState) {\\n                decayState = true;\\n                decayInitTimestamp = block.timestamp;\\n            } else {\\n                // If APR is below a threshold, decay credits based on time elapsed\\n                // slither-disable-start timestamp\\n                uint256 hoursPassed = (block.timestamp - decayInitTimestamp) / 3600;\\n                // slither-disable-end timestamp\\n                if (hoursPassed > 0 && decayState) {\\n                    incentiveCredits = _decayCredits(currentCredits, hoursPassed);\\n\\n                    // Update the incentive decay init timestamp to current timestamp\\n                    decayInitTimestamp = block.timestamp;\\n                }\\n            }\\n            // Update the last incentive timestamp to the current block's timestamp\\n            lastIncentiveTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * @notice Determines the snapshot status for a given rewarder.\\n     * @param _rewarder The address of the rewarder for which to check the snapshot status.\\n     * @param rewardRate The current reward rate for the rewarder.\\n     * @return The snapshot status for the given rewarder, based on the last snapshot and current block time.\\n     */\\n    function _snapshotStatus(address _rewarder, uint256 rewardRate) internal view returns (SnapshotStatus) {\\n        if (lastSnapshotRewardPerToken[_rewarder] == 0) {\\n            return SnapshotStatus.noSnapshot;\\n        }\\n\\n        if (rewardRate != lastSnapshotRewardRate[_rewarder] && lastSnapshotRewardRate[_rewarder] != 0) {\\n            // lastSnapshotRewardRate[_rewarder] can be zero if the rewarder was just added\\n            return SnapshotStatus.shouldRestart;\\n        }\\n\\n        // slither-disable-next-line timestamp\\n        if (block.timestamp < lastSnapshotTimestamps[_rewarder] + SNAPSHOT_INTERVAL) {\\n            return SnapshotStatus.tooSoon;\\n        }\\n\\n        return SnapshotStatus.shouldFinalize;\\n    }\\n\\n    /**\\n     * @notice Determines whether a snapshot should be taken for the specified rewarder.\\n     * @param _rewarder The address of the rewarder to check.\\n     * @param _rewardRate The current reward rate for the rewarder.\\n     * @param _totalSupply The current total supply staked with the rewarder.\\n     * @return True if a snapshot should be taken, false otherwise.\\n     */\\n    function _shouldSnapshot(\\n        address _rewarder,\\n        uint256 _rewardRate,\\n        uint256 _periodFinish,\\n        uint256 _totalSupply\\n    ) internal view returns (bool) {\\n        SnapshotStatus status = _snapshotStatus(_rewarder, _rewardRate);\\n\\n        // If the status indicates we should finalize a snapshot, return true.\\n        if (status == SnapshotStatus.shouldFinalize || status == SnapshotStatus.shouldRestart) return true;\\n\\n        // If it's too soon to take another snapshot, return false.\\n        if (status == SnapshotStatus.tooSoon) return false;\\n\\n        uint256 timeBetweenSnapshots = block.timestamp - lastSnapshotTimestamps[_rewarder];\\n\\n        // If more than 24 hours passed since the last snapshot, take another one.\\n        // slither-disable-next-line timestamp\\n        if (timeBetweenSnapshots > 24 hours) return true;\\n\\n        // No further snapshots are needed if reward rate is zero.\\n        if (_rewardRate == 0) return false;\\n\\n        // No further snapshots are needed after the period finishes.\\n        // slither-disable-next-line timestamp\\n        if (block.timestamp > _periodFinish) return false;\\n\\n        // Snapshot if there's no supply and still time left in the period.\\n        if (_totalSupply == 0) return true;\\n\\n        // if _rewardRate differs by more than 5% from the last snapshot reward rate, take another snapshot.\\n        if (_differsByMoreThanFivePercent(lastSnapshotRewardRate[_rewarder], _rewardRate)) {\\n            return true;\\n        }\\n\\n        uint256 safeTotalSupply = safeTotalSupplies[_rewarder];\\n\\n        // If the staked supply deviates by more than 5% from the safe supply and 8 hours have passed since\\n        // the last snapshot, take another snapshot.\\n        // slither-disable-next-line timestamp\\n        if (_differsByMoreThanFivePercent(safeTotalSupply, _totalSupply) && timeBetweenSnapshots > 8 hours) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Performs a snapshot on the given rewarder's state.\\n     * This function assumes it's being called within the context of a _shouldSnapshot() conditional check.\\n     *\\n     * @param _rewarder Address of the rewarder for which the snapshot will be performed.\\n     * @param totalSupply The total supply of tokens for the rewarder.\\n     * @param rewardRate The current reward rate for the rewarder.\\n     */\\n    function _snapshot(address _rewarder, uint256 totalSupply, uint256 rewardRate) internal {\\n        if (totalSupply == 0) {\\n            safeTotalSupplies[_rewarder] = 0;\\n            lastSnapshotRewardPerToken[_rewarder] = 0;\\n            lastSnapshotTimestamps[_rewarder] = block.timestamp;\\n            return;\\n        }\\n\\n        SnapshotStatus status = _snapshotStatus(_rewarder, rewardRate);\\n        uint256 rewardPerToken = IBaseRewardPool(_rewarder).rewardPerToken();\\n\\n        // Initialization: When no snapshot exists, start a new snapshot.\\n        // Restart: If the reward rate changed, restart the snapshot process.\\n        if (status == SnapshotStatus.noSnapshot || status == SnapshotStatus.shouldRestart) {\\n            // Increase by one to ensure 0 is only used as an uninitialized value flag.\\n            lastSnapshotRewardPerToken[_rewarder] = rewardPerToken + 1;\\n            lastSnapshotRewardRate[_rewarder] = rewardRate;\\n            lastSnapshotTimestamps[_rewarder] = block.timestamp;\\n            return;\\n        }\\n\\n        // Finalization: If a snapshot exists, finalize by calculating the reward accrued\\n        // since initialization, then reset the snapshot state.\\n        if (status == SnapshotStatus.shouldFinalize) {\\n            uint256 lastSnapshotTimestamp = lastSnapshotTimestamps[_rewarder];\\n            uint256 lastRewardPerToken = lastSnapshotRewardPerToken[_rewarder];\\n            // Subtract one, added during initialization, to ensure 0 is only used as an uninitialized value flag.\\n            uint256 diff = rewardPerToken - (lastRewardPerToken - 1);\\n\\n            uint256 timeBetweenSnapshots = block.timestamp - lastSnapshotTimestamp;\\n\\n            safeTotalSupplies[_rewarder] = diff == 0 ? 0 : rewardRate * timeBetweenSnapshots * 1e18 / diff;\\n            lastSnapshotRewardPerToken[_rewarder] = 0;\\n            lastSnapshotTimestamps[_rewarder] = block.timestamp;\\n\\n            return;\\n        }\\n\\n        // It shouldn't be possible to reach this point.\\n        revert InvalidSnapshotStatus();\\n    }\\n\\n    /**\\n     * @dev Computes staking incentive statistics for a given rewarder.\\n     *\\n     * @param _rewarder The rewarder contract for which the stats will be computed.\\n     * @param isExtraReward The flag to indicate the type of rewarder.\\n     * @return safeTotalSupply The total supply for the rewarder.\\n     * @return rewardToken The address of the reward token used by the rewarder.\\n     * @return annualizedRewardAmount The annual equivalent of the reward rate.\\n     * @return periodFinishForReward The timestamp when the reward period ends for the rewarder.\\n     */\\n    function _getStakingIncentiveStats(\\n        IBaseRewardPool _rewarder,\\n        bool isExtraReward\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 safeTotalSupply,\\n            address rewardToken,\\n            uint256 annualizedRewardAmount,\\n            uint256 periodFinishForReward\\n        )\\n    {\\n        rewardToken = isExtraReward ? resolveRewardToken(address(_rewarder)) : address(_rewarder.rewardToken());\\n\\n        if (rewardToken != address(0)) {\\n            periodFinishForReward = _rewarder.periodFinish();\\n\\n            uint256 rewardRate = _rewarder.rewardRate();\\n\\n            annualizedRewardAmount = rewardRate * Stats.SECONDS_IN_YEAR;\\n            safeTotalSupply = safeTotalSupplies[address(_rewarder)];\\n\\n            return (safeTotalSupply, rewardToken, annualizedRewardAmount, uint40(periodFinishForReward));\\n        }\\n    }\\n\\n    /**\\n     * @dev Decays credits based on the elapsed time and reward rate.\\n     * Credits decay when the current time is past the reward period finish time\\n     * or when the reward rate is zero.\\n     *\\n     * @param currentCredits The current amount of credits.\\n     * @return The adjusted amount of credits after potential decay.\\n     */\\n    function _decayCredits(uint8 currentCredits, uint256 hoursPassed) internal pure returns (uint8) {\\n        // slither-disable-start timestamp\\n        currentCredits = uint8((hoursPassed > currentCredits) ? 0 : currentCredits - hoursPassed);\\n        // slither-disable-end timestamp\\n\\n        return currentCredits;\\n    }\\n\\n    /**\\n     * @notice Checks if the difference between two values is more than 5%.\\n     * @param value1 The first value.\\n     * @param value2 The second value.\\n     * @return A boolean indicating if the difference between the two values is more than 5%.\\n     */\\n    function _differsByMoreThanFivePercent(uint256 value1, uint256 value2) public pure returns (bool) {\\n        if (value1 > value2) {\\n            return value1 > (value2 + (value2 / 20)); // value2 / 20 represents 5% of value2\\n        } else {\\n            return value2 > (value1 + (value1 / 20)); // value1 / 20 represents 5% of value1\\n        }\\n    }\\n\\n    function _getIncentivePrice(address _token) internal view returns (uint256) {\\n        IIncentivesPricingStats pricingStats = systemRegistry.incentivePricing();\\n        (uint256 fastPrice, uint256 slowPrice) = pricingStats.getPrice(_token, PRICE_STALE_CHECK);\\n        return Math.min(fastPrice, slowPrice);\\n    }\\n\\n    function _getPriceInEth(address _token) internal returns (uint256) {\\n        // the price oracle handles reentrancy issues\\n        return systemRegistry.rootPriceOracle().getPriceInEth(_token);\\n    }\\n\\n    function _getRewardPoolMetrics(address _rewarder)\\n        internal\\n        view\\n        returns (uint256 rewardRate, uint256 totalSupply, uint256 periodFinish)\\n    {\\n        rewardRate = IBaseRewardPool(_rewarder).rewardRate();\\n        totalSupply = IBaseRewardPool(_rewarder).totalSupply();\\n        periodFinish = IBaseRewardPool(_rewarder).periodFinish();\\n    }\\n\\n    function _computeTotalAPR() internal returns (uint256 apr) {\\n        // Get reward pool metrics for the main rewarder and take a snapshot if necessary\\n        (uint256 rewardRate, uint256 totalSupply, uint256 periodFinish) = _getRewardPoolMetrics(address(rewarder));\\n        if (_shouldSnapshot(address(rewarder), rewardRate, periodFinish, totalSupply)) {\\n            _snapshot(address(rewarder), totalSupply, rewardRate);\\n        }\\n\\n        // slither-disable-next-line reentrancy-no-eth\\n        uint256 lpPrice = _getPriceInEth(rewarder.stakingToken());\\n        address rewardToken = address(rewarder.rewardToken());\\n\\n        // Compute APR factors for the main rewarder if the period is still active\\n\\n        apr += _computeAPR(address(rewarder), lpPrice, rewardToken, rewardRate, periodFinish);\\n\\n        // Compute APR factors for the platform rewarder if the period is still active\\n        rewardRate = getPlatformTokenMintAmount(platformToken, rewardRate);\\n        apr += _computeAPR(address(rewarder), lpPrice, rewardToken, rewardRate, periodFinish);\\n\\n        // Determine the number of extra rewarders and process each one\\n        uint256 extraRewardsLength = rewarder.extraRewardsLength();\\n        for (uint256 i = 0; i < extraRewardsLength; ++i) {\\n            address extraRewarder = rewarder.extraRewards(i);\\n            (rewardRate, totalSupply, periodFinish) = _getRewardPoolMetrics(extraRewarder);\\n\\n            // Take a snapshot for the extra rewarder if necessary\\n            if (_shouldSnapshot(extraRewarder, rewardRate, periodFinish, totalSupply)) {\\n                _snapshot(extraRewarder, totalSupply, rewardRate);\\n            }\\n            rewardToken = resolveRewardToken(extraRewarder);\\n\\n            if (rewardToken != address(0)) {\\n                // Accumulate APR data from each extra rewarder if the period is still active\\n                apr += _computeAPR(extraRewarder, lpPrice, rewardToken, rewardRate, periodFinish);\\n            }\\n        }\\n        return apr;\\n    }\\n\\n    function _computeAPR(\\n        address _rewarder,\\n        uint256 lpPrice,\\n        address rewardToken,\\n        uint256 rewardRate,\\n        uint256 periodFinish\\n    ) internal view returns (uint256 apr) {\\n        // slither-disable-start incorrect-equality\\n        // slither-disable-next-line timestamp\\n        if (block.timestamp > periodFinish || rewardRate == 0) return 0;\\n        // slither-disable-end incorrect-equality\\n\\n        uint256 price = _getIncentivePrice(rewardToken);\\n\\n        uint256 numerator = rewardRate * Stats.SECONDS_IN_YEAR * price * 1e18;\\n        uint256 denominator = safeTotalSupplies[_rewarder] * lpPrice;\\n\\n        return denominator == 0 ? 0 : numerator / denominator;\\n    }\\n\\n    /// @notice returns the platform tokens earned given the amount of main rewarder tokens\\n    function getPlatformTokenMintAmount(\\n        address _platformToken,\\n        uint256 _annualizedReward\\n    ) public view virtual returns (uint256);\\n\\n    /// @notice returns the address of the stash token for Convex & Aura\\n    function resolveRewardToken(address extraRewarder) public view virtual returns (address rewardToken);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/utils/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/staking/IGPToke.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IGPToke {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Variables\\n    ///////////////////////////////////////////////////////////////////\\n\\n    function startEpoch() external view returns (uint256);\\n    function minStakeDuration() external view returns (uint256);\\n\\n    struct Lockup {\\n        uint128 amount;\\n        uint128 end;\\n        uint256 points;\\n    }\\n\\n    function getLockups(address user) external view returns (Lockup[] memory);\\n    function toke() external view returns (IERC20Metadata);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error ZeroAddress();\\n    error StakingDurationTooShort();\\n    error StakingDurationTooLong();\\n    error StakingPointsExceeded();\\n    error IncorrectStakingAmount();\\n    error InsufficientFunds();\\n    error LockupDoesNotExist();\\n    error NotUnlockableYet();\\n    error AlreadyUnlocked();\\n    error ExtendDurationTooShort();\\n    error TransfersDisabled();\\n    error TransferFailed();\\n    error NoRewardsToClaim();\\n    error InsufficientAmount();\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Events\\n    ///////////////////////////////////////////////////////////////////\\n    event SetMaxStakeDuration(uint256 oldDuration, uint256 newDuration);\\n    event Stake(address indexed user, uint256 lockupId, uint256 amount, uint256 end, uint256 points);\\n    event Unstake(address indexed user, uint256 lockupId, uint256 amount, uint256 end, uint256 points);\\n    event Extend(\\n        address indexed user,\\n        uint256 lockupId,\\n        uint256 amount,\\n        uint256 oldEnd,\\n        uint256 newEnd,\\n        uint256 oldPoints,\\n        uint256 newPoints\\n    );\\n    event RewardsAdded(uint256 amount, uint256 accRewardPerShare);\\n    event RewardsCollected(address indexed user, uint256 amount);\\n    event RewardsClaimed(address indexed user, uint256 amount);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //                        Staking Methods\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Stake TOKE to an address that may not be the same as the sender of the funds. This can be used to give\\n     * staked funds to someone else.\\n     *\\n     * If staking before the start of staking (epoch), then the lockup start and end dates are shifted forward so that\\n     * the lockup starts at the epoch.\\n     *\\n     * @param amount TOKE to lockup in the stake\\n     * @param duration in seconds for the stake\\n     * @param to address to receive ownership of the stake\\n     */\\n    function stake(uint256 amount, uint256 duration, address to) external;\\n\\n    /**\\n     * @notice Stake TOKE\\n     *\\n     * If staking before the start of staking (epoch), then the lockup start and end dates are shifted forward so that\\n     * the lockup starts at the epoch.\\n     *\\n     * @notice Stake TOKE for myself.\\n     * @param amount TOKE to lockup in the stake\\n     * @param duration in seconds for the stake\\n     */\\n    function stake(uint256 amount, uint256 duration) external;\\n\\n    /**\\n     * @notice Collect staked OGV for a lockup and any earned rewards.\\n     * @param lockupId the id of the lockup to unstake\\n     */\\n    function unstake(uint256 lockupId) external;\\n\\n    /**\\n     * @notice Extend a stake lockup for additional points.\\n     *\\n     * The stake end time is computed from the current time + duration, just like it is for new stakes. So a new stake\\n     * for seven days duration and an old stake extended with a seven days duration would have the same end.\\n     *\\n     * If an extend is made before the start of staking, the start time for the new stake is shifted forwards to the\\n     * start of staking, which also shifts forward the end date.\\n     *\\n     * @param lockupId the id of the old lockup to extend\\n     * @param duration number of seconds from now to stake for\\n     */\\n    function extend(uint256 lockupId, uint256 duration) external;\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //                        Rewards\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice The total amount of rewards earned for all stakes\\n    function totalRewardsEarned() external returns (uint256);\\n\\n    /// @notice Total rewards claimed by all stakers\\n    function totalRewardsClaimed() external returns (uint256);\\n\\n    /// @notice Rewards claimed by a specific wallet\\n    /// @param user Address of the wallet to check\\n    function rewardsClaimed(address user) external returns (uint256);\\n\\n    /**\\n     * @notice Preview the number of points that would be returned for the\\n     * given amount and duration.\\n     *\\n     * @param amount TOKE to be staked\\n     * @param duration number of seconds to stake for\\n     * @return points staking points that would be returned\\n     * @return end staking period end date\\n     */\\n    function previewPoints(uint256 amount, uint256 duration) external view returns (uint256, uint256);\\n\\n    /// @notice Preview the reward amount a caller can claim\\n    function previewRewards() external view returns (uint256);\\n\\n    /// @notice Preview the reward amount a specified wallet can claim\\n    function previewRewards(address user) external view returns (uint256);\\n\\n    /// @notice Claim rewards for the caller\\n    function collectRewards() external returns (uint256);\\n\\n    /// @notice Check if amount can be staked\\n    function isStakeableAmount(uint256 amount) external pure returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title Keep track of Vaults created through the Vault Factory\\ninterface ILMPVaultRegistry {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error VaultNotFound(address vaultAddress);\\n    error VaultAlreadyExists(address vaultAddress);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Events\\n    ///////////////////////////////////////////////////////////////////\\n    event VaultAdded(address indexed asset, address indexed vault);\\n    event VaultRemoved(address indexed asset, address indexed vault);\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Functions\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /// @notice Checks if an address is a valid vault\\n    /// @param vaultAddress Vault address to be added\\n    function isVault(address vaultAddress) external view returns (bool);\\n\\n    /// @notice Registers a vault\\n    /// @param vaultAddress Vault address to be added\\n    function addVault(address vaultAddress) external;\\n\\n    /// @notice Removes vault registration\\n    /// @param vaultAddress Vault address to be removed\\n    function removeVault(address vaultAddress) external;\\n\\n    /// @notice Returns a list of all registered vaults\\n    function listVaults() external view returns (address[] memory);\\n\\n    /// @notice Returns a list of all registered vaults for a given asset\\n    /// @param asset Asset address\\n    function listVaultsForAsset(address asset) external view returns (address[] memory);\\n\\n    /// @notice Returns a list of all registered vaults for a given type\\n    /// @param _vaultType Vault type\\n    function listVaultsForType(bytes32 _vaultType) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/security/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IAccessControlEnumerable } from \\\"openzeppelin-contracts/access/IAccessControlEnumerable.sol\\\";\\n\\ninterface IAccessController is IAccessControlEnumerable {\\n    error AccessDenied();\\n\\n    function setupRole(bytes32 role, address account) external;\\n\\n    function verifyOwner(address account) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/swapper/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISyncSwapper } from \\\"./ISyncSwapper.sol\\\";\\n\\ninterface ISwapRouter {\\n    struct SwapData {\\n        address token;\\n        address pool;\\n        ISyncSwapper swapper;\\n        bytes data;\\n    }\\n\\n    error MaxSlippageExceeded();\\n    error SwapRouteLookupFailed();\\n    error SwapFailed();\\n\\n    event SwapRouteSet(address indexed token, SwapData[] routes);\\n    event SwapForQuoteSuccessful(\\n        address indexed assetToken,\\n        uint256 sellAmount,\\n        address indexed quoteToken,\\n        uint256 minBuyAmount,\\n        uint256 buyAmount\\n    );\\n\\n    /**\\n     * @notice Sets a new swap route for a given asset token.\\n     * @param assetToken The asset token for which the swap route is being set.\\n     * @param _swapRoute The new swap route as an array of SwapData. The last element represents the quoteToken.\\n     * @dev Each 'hop' in the swap route is validated using the respective swapper's validate function. The validate\\n     * function ensures that the encoded data contains the correct 'fromAddress' and 'toAddress' (swapData.token), and\\n     * verifies that these tokens are in the pool.\\n     */\\n    function setSwapRoute(address assetToken, SwapData[] calldata _swapRoute) external;\\n\\n    /**\\n     * @notice Swaps the asset token for the quote token.\\n     * @dev We're adopting an \\\"exact in, variable out\\\" model for all our swaps. This ensures that the entire sellAmount\\n     * is used, eliminating the need for additional balance checks and refunds. This model is expected to be followed by\\n     * all swapper implementations to maintain consistency and to optimize for gas efficiency.\\n     * @param assetToken The address of the asset token to swap.\\n     * @param sellAmount The exact amount of the asset token to swap.\\n     * @param quoteToken The address of the quote token.\\n     * @param minBuyAmount The minimum amount of the quote token expected to be received from the swap.\\n     * @return The amount received from the swap.\\n     */\\n    function swapForQuote(\\n        address assetToken,\\n        uint256 sellAmount,\\n        address quoteToken,\\n        uint256 minBuyAmount\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/utils/ICurveResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\ninterface ICurveResolver {\\n    /// @notice Resolve details of a Curve pool regardless of type or version\\n    /// @dev This resolves tokens without unwrapping to underlying in the case of meta pools.\\n    /// If you need a dynamic array of tokens use Arrays.convertFixedCurveTokenArrayToDynamic(tokens,numTokens)\\n    /// @param poolAddress pool address to lookup\\n    /// @return tokens tokens that make up the pool\\n    /// @return numTokens the number of tokens. tokens are not unwrapped.\\n    /// @return isStableSwap is this a StableSwap pool. false = CryptoSwap\\n    function resolve(address poolAddress)\\n        external\\n        view\\n        returns (address[8] memory tokens, uint256 numTokens, bool isStableSwap);\\n\\n    /// @notice Resolve details of a Curve pool regardless of type or version\\n    /// @dev This resolves tokens without unwrapping to underlying in the case of meta pools.\\n    /// If you need a dynamic array of tokens use Arrays.convertFixedCurveTokenArrayToDynamic(tokens,numTokens)\\n    /// @param poolAddress pool address to lookup\\n    /// @return tokens tokens that make up the pool\\n    /// @return numTokens the number of tokens. tokens are not unwrapped\\n    /// @return lpToken lp token of the pool\\n    /// @return isStableSwap is this a StableSwap pool. false = CryptoSwap\\n    function resolveWithLpToken(address poolAddress)\\n        external\\n        view\\n        returns (address[8] memory tokens, uint256 numTokens, address lpToken, bool isStableSwap);\\n\\n    /// @notice Get the lp token of a Curve pool\\n    /// @param poolAddress pool address to lookup\\n    function getLpToken(address poolAddress) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ILMPVault } from \\\"src/interfaces/vault/ILMPVault.sol\\\";\\nimport { ILMPVaultRouterBase } from \\\"src/interfaces/vault/ILMPVaultRouterBase.sol\\\";\\nimport { IAsyncSwapper, SwapParams } from \\\"src/interfaces/liquidation/IAsyncSwapper.sol\\\";\\n\\n/**\\n * @title ILMPVaultRouter Interface\\n * @notice Extends the ILMPVaultRouterBase with specific flows to save gas\\n */\\ninterface ILMPVaultRouter is ILMPVaultRouterBase {\\n    /**\\n     * ***************************   Deposit ********************************\\n     */\\n\\n    /**\\n     * @notice swap and deposit max assets to a LMPVault.\\n     * @dev The goal is to deposit whatever amount is received from the swap into the vault such as depositMax.\\n     * Balances are checked in the swapper function.\\n     * @param swapper The address of the swapper contract.\\n     * @param swapParams The swap parameters.\\n     * @param vault The ILMPVault contract.\\n     * @param to The address to receive the deposited amount.\\n     * @param minSharesOut The minimum amount of shares to be received as output.\\n     * @return sharesOut The amount of shares deposited into the vault.\\n     */\\n    function swapAndDepositToVault(\\n        address swapper,\\n        SwapParams memory swapParams,\\n        ILMPVault vault,\\n        address to,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice deposit max assets to a LMPVault.\\n     * @param vault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param minSharesOut The min amount of `vault` shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinSharesError\\n     */\\n    function depositMax(ILMPVault vault, address to, uint256 minSharesOut) external returns (uint256 sharesOut);\\n\\n    /**\\n     * *************************   Withdraw   **********************************\\n     */\\n\\n    /**\\n     * @notice withdraw `amount` to a LMPVault.\\n     * @param fromVault The LMPVault to withdraw assets from.\\n     * @param toVault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param amount The amount of assets to withdraw from fromVault.\\n     * @param maxSharesIn The max amount of fromVault shares withdrawn by caller.\\n     * @param minSharesOut The min amount of toVault shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MaxSharesError, MinSharesError\\n     */\\n    function withdrawToDeposit(\\n        ILMPVault fromVault,\\n        ILMPVault toVault,\\n        address to,\\n        uint256 amount,\\n        uint256 maxSharesIn,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * *************************   Redeem    ********************************\\n     */\\n\\n    /**\\n     * @notice redeem `shares` to a LMPVault.\\n     * @param fromVault The LMPVault to redeem shares from.\\n     * @param toVault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param shares The amount of shares to redeem from fromVault.\\n     * @param minSharesOut The min amount of toVault shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinAmountError, MinSharesError\\n     */\\n    function redeemToDeposit(\\n        ILMPVault fromVault,\\n        ILMPVault toVault,\\n        address to,\\n        uint256 shares,\\n        uint256 minSharesOut\\n    ) external returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice redeem max shares to a LMPVault.\\n     * @param vault The LMPVault to redeem shares from.\\n     * @param to The destination of assets.\\n     * @param minAmountOut The min amount of assets received by `to`.\\n     * @return amountOut the amount of assets received by `to`.\\n     * @dev throws MinAmountError\\n     */\\n    function redeemMax(ILMPVault vault, address to, uint256 minAmountOut) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface ILMPVaultFactory {\\n    ///////////////////////////////////////////////////////////////////\\n    //                        Vault Creation\\n    ///////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @notice Spin up a new LMPVault\\n     * @param supplyLimit Total supply limit for the new vault\\n     * @param walletLimit Wallet limit for the new vault\\n     * @param symbolSuffix Symbol suffix of the new token\\n     * @param descPrefix Description prefix of the new token\\n     * @param salt Vault creation salt\\n     * @param extraParams Any extra data needed for the vault\\n     */\\n    function createVault(\\n        uint256 supplyLimit,\\n        uint256 walletLimit,\\n        string memory symbolSuffix,\\n        string memory descPrefix,\\n        bytes32 salt,\\n        bytes calldata extraParams\\n    ) external returns (address newVaultAddress);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/security/ISystemSecurity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface ISystemSecurity {\\n    /// @notice Get the number of NAV/share operations currently in progress\\n    /// @return Number of operations\\n    function navOpsInProgress() external view returns (uint256);\\n\\n    /// @notice Called at the start of any NAV/share changing operation\\n    function enterNavOperation() external;\\n\\n    /// @notice Called at the end of any NAV/share changing operation\\n    function exitNavOperation() external;\\n\\n    /// @notice Whether or not the system as a whole is paused\\n    function isSystemPaused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/destinations/IDestinationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationAdapter } from \\\"src/interfaces/destinations/IDestinationAdapter.sol\\\";\\n\\ninterface IDestinationRegistry {\\n    event Register(bytes32[] indexed destinationTypes, address[] indexed targets);\\n    event Replace(bytes32[] indexed destinationTypes, address[] indexed targets);\\n    event Unregister(bytes32[] indexed destinationTypes);\\n\\n    event Whitelist(bytes32[] indexed destinationTypes);\\n    event RemoveFromWhitelist(bytes32[] indexed destinationTypes);\\n\\n    error InvalidAddress(address addr);\\n    error NotAllowedDestination();\\n    error DestinationAlreadySet();\\n\\n    /**\\n     * @notice Adds a new addresses of the given destination types\\n     * @dev Fails if trying to overwrite previous value of the same destination type\\n     * @param destinationTypes Ones from the destination type whitelist\\n     * @param targets addresses of the deployed DestinationAdapters, cannot be 0\\n     */\\n    function register(bytes32[] calldata destinationTypes, address[] calldata targets) external;\\n\\n    /**\\n     * @notice Replaces an addresses of the given destination types\\n     * @dev Fails if given destination type was not set previously\\n     * @param destinationTypes Ones from the destination type whitelist\\n     * @param targets addresses of the deployed DestinationAdapters, cannot be 0\\n     */\\n    function replace(bytes32[] calldata destinationTypes, address[] calldata targets) external;\\n\\n    /**\\n     * @notice Removes an addresses of the given pre-registered destination types\\n     * @param destinationTypes Ones from the destination types whitelist\\n     */\\n    function unregister(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Gives an address of the given destination type\\n     * @dev Should revert on missing destination\\n     * @param destination One from the destination type whitelist\\n     */\\n    function getAdapter(bytes32 destination) external returns (IDestinationAdapter);\\n\\n    /**\\n     * @notice Adds given destination types to the whitelist\\n     * @param destinationTypes Types to whitelist\\n     */\\n    function addToWhitelist(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Removes given pre-whitelisted destination types\\n     * @param destinationTypes Ones from the destination type whitelist\\n     */\\n    function removeFromWhitelist(bytes32[] calldata destinationTypes) external;\\n\\n    /**\\n     * @notice Checks if the given destination type is whitelisted\\n     * @param destinationType Type to verify\\n     */\\n    function isWhitelistedDestination(bytes32 destinationType) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/oracles/IRootPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\n/// @notice Retrieve a price for any token used in the system\\ninterface IRootPriceOracle {\\n    /// @notice Returns a fair price for the provided token in ETH\\n    /// @param token token to get the price of\\n    /// @return price the price of the token in ETH\\n    function getPriceInEth(address token) external returns (uint256 price);\\n\\n    /// @notice Returns a spot price for the provided token in ETH, utilizing specified liquidity pool\\n    /// @param token token to get the spot price of\\n    /// @param pool liquidity pool to be used for price determination\\n    /// @return price the spot price of the token in ETH based on the provided pool\\n    function getSpotPriceInEth(address token, address pool) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVaultRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationVaultFactory } from \\\"src/interfaces/vault/IDestinationVaultFactory.sol\\\";\\n\\n/// @notice Tracks valid Destination Vaults for the system\\ninterface IDestinationVaultRegistry {\\n    /// @notice Determines if a given address is a valid Destination Vault in the system\\n    /// @param destinationVault address to check\\n    /// @return True if vault is registered\\n    function isRegistered(address destinationVault) external view returns (bool);\\n\\n    /// @notice Registers a new Destination Vault\\n    /// @dev Should be locked down to only a factory\\n    /// @param newDestinationVault Address of the new vault\\n    function register(address newDestinationVault) external;\\n\\n    /// @notice Checks if an address is a valid Destination Vault and reverts if not\\n    /// @param destinationVault Destination Vault address to checked\\n    function verifyIsRegistered(address destinationVault) external view;\\n\\n    /// @notice Returns a list of all registered vaults\\n    function listVaults() external view returns (address[] memory);\\n\\n    /// @notice Factory that is allowed to create and registry Destination Vaults\\n    function factory() external view returns (IDestinationVaultFactory);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IStatsCalculatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStatsCalculator } from \\\"src/interfaces/stats/IStatsCalculator.sol\\\";\\n\\n/// @notice Track stat calculators for this instance of the system\\ninterface IStatsCalculatorRegistry {\\n    /// @notice Get a registered calculator\\n    /// @dev Should revert if missing\\n    /// @param aprId key of the calculator to get\\n    /// @return calculator instance of the calculator\\n    function getCalculator(bytes32 aprId) external view returns (IStatsCalculator calculator);\\n\\n    /// @notice Register a new stats calculator\\n    /// @param calculator address of the calculator\\n    function register(address calculator) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/liquidation/IAsyncSwapperRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\ninterface IAsyncSwapperRegistry {\\n    event SwapperAdded(address indexed item);\\n    event SwapperRemoved(address indexed item);\\n\\n    /// @notice Registers an item\\n    /// @param item Item address to be added\\n    function register(address item) external;\\n\\n    /// @notice Removes item registration\\n    /// @param item Item address to be removed\\n    function unregister(address item) external;\\n\\n    /// @notice Returns a list of all registered items\\n    function list() external view returns (address[] memory);\\n\\n    /// @notice Checks if an address is a valid item\\n    /// @param item Item address to be checked\\n    function isRegistered(address item) external view returns (bool);\\n\\n    /// @notice Checks if an address is a valid swapper and reverts if not\\n    /// @param item Swapper address to be checked\\n    function verifyIsRegistered(address item) external view;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IIncentivesPricingStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title EWMA pricing for incentive tokens\\ninterface IIncentivesPricingStats {\\n    event TokenAdded(address indexed token);\\n    event TokenRemoved(address indexed token);\\n    event TokenSnapshot(\\n        address indexed token,\\n        uint40 lastSnapshot,\\n        uint256 fastFilterPrice,\\n        uint256 slowFilterPrice,\\n        uint256 initCount,\\n        bool initComplete\\n    );\\n\\n    error TokenAlreadyRegistered(address token);\\n    error TokenNotFound(address token);\\n    error IncentiveTokenPriceStale(address token);\\n    error TokenSnapshotNotReady(address token);\\n\\n    struct TokenSnapshotInfo {\\n        uint40 lastSnapshot;\\n        bool _initComplete;\\n        uint8 _initCount;\\n        uint256 _initAcc;\\n        uint256 fastFilterPrice;\\n        uint256 slowFilterPrice;\\n    }\\n\\n    /// @notice add a token to snapshot\\n    /// @dev the token must be configured in the RootPriceOracle before adding here\\n    /// @param token the address of the token to add\\n    function setRegisteredToken(address token) external;\\n\\n    /// @notice remove a token from being snapshot\\n    /// @param token the address of the token to remove\\n    function removeRegisteredToken(address token) external;\\n\\n    /// @notice get the addresses for all currently registered tokens\\n    /// @return tokens all of the registered token addresses\\n    function getRegisteredTokens() external view returns (address[] memory tokens);\\n\\n    /// @notice get all of the registered tokens with the latest snapshot info\\n    /// @return tokenAddresses token addresses in the same order as info\\n    /// @return info a list of snapshot info for the tokens\\n    function getTokenPricingInfo()\\n        external\\n        view\\n        returns (address[] memory tokenAddresses, TokenSnapshotInfo[] memory info);\\n\\n    /// @notice update the snapshot for the specified tokens\\n    /// @dev if a token is not ready to be snapshot the entire call will fail\\n    function snapshot(address[] calldata tokensToSnapshot) external;\\n\\n    /// @notice get the latest prices for an incentive token. Reverts if token is not registered\\n    /// @return fastPrice the price based on the faster filter (weighted toward current prices)\\n    /// @return slowPrice the price based on the slower filter (weighted toward older prices, relative to fast)\\n    function getPrice(address token, uint40 staleCheck) external view returns (uint256 fastPrice, uint256 slowPrice);\\n\\n    /// @notice get the latest prices for an incentive token or zero if the token is not registered\\n    /// @return fastPrice the price based on the faster filter (weighted toward current prices)\\n    /// @return slowPrice the price based on the slower filter (weighted toward older prices, relative to fast)\\n    function getPriceOrZero(\\n        address token,\\n        uint40 staleCheck\\n    ) external view returns (uint256 fastPrice, uint256 slowPrice);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IDexLSTStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Stats } from \\\"src/stats/Stats.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { ILSTStats } from \\\"src/interfaces/stats/ILSTStats.sol\\\";\\n\\n/// @title Return stats DEXs with LSTs\\ninterface IDexLSTStats {\\n    event DexSnapshotTaken(uint256 snapshotTimestamp, uint256 priorFeeApr, uint256 newFeeApr, uint256 unfilteredFeeApr);\\n\\n    struct StakingIncentiveStats {\\n        // time-weighted average total supply to prevent spikes/attacks from impacting rebalancing\\n        uint256 safeTotalSupply;\\n        // rewardTokens, annualizedRewardAmounts, and periodFinishForRewards will match indexes\\n        // they are split to workaround an issue with forge having nested structs\\n        // address of the reward tokens\\n        address[] rewardTokens;\\n        // the annualized reward rate for the reward token\\n        uint256[] annualizedRewardAmounts;\\n        // the timestamp for when the rewards are set to terminate\\n        uint40[] periodFinishForRewards;\\n        // incentive rewards score. max 48, min 0\\n        uint8 incentiveCredits;\\n    }\\n\\n    struct DexLSTStatsData {\\n        uint256 lastSnapshotTimestamp;\\n        uint256 feeApr;\\n        uint256[] reservesInEth;\\n        StakingIncentiveStats stakingIncentiveStats;\\n        ILSTStats.LSTStatsData[] lstStatsData;\\n    }\\n\\n    /// @notice Get the current stats for the DEX with underlying LST tokens\\n    /// @dev Returned data is a combination of current data and filtered snapshots\\n    /// @return dexLSTStatsData current data on the DEX\\n    function current() external returns (DexLSTStatsData memory dexLSTStatsData);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/IStatsCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @title Capture information about a pool or destination\\ninterface IStatsCalculator {\\n    /// @notice thrown when no snapshot is taken\\n    error NoSnapshotTaken();\\n\\n    /// @notice The id for this instance of a calculator\\n    function getAprId() external view returns (bytes32);\\n\\n    /// @notice The id of the underlying asset/pool/destination this calculator represents\\n    /// @dev This may be a generated address\\n    function getAddressId() external view returns (address);\\n\\n    /// @notice Setup the calculator after it has been copied\\n    /// @dev Should only be executed one time\\n    /// @param dependentAprIds apr ids that cover the dependencies of this calculator\\n    /// @param initData setup data specific to this type of calculator\\n    function initialize(bytes32[] calldata dependentAprIds, bytes calldata initData) external;\\n\\n    /// @notice Capture stat data about this setup\\n    function snapshot() external;\\n\\n    /// @notice Indicates if a snapshot should be taken\\n    /// @return takeSnapshot if true then a snapshot should be taken. If false, calling snapshot will do nothing\\n    function shouldSnapshot() external view returns (bool takeSnapshot);\\n}\\n\"\r\n    },\r\n    \"src/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Address } from \\\"openzeppelin-contracts/utils/Address.sol\\\";\\n\\nlibrary Errors {\\n    using Address for address;\\n    ///////////////////////////////////////////////////////////////////\\n    //                       Set errors\\n    ///////////////////////////////////////////////////////////////////\\n\\n    error AccessDenied();\\n    error ZeroAddress(string paramName);\\n    error ZeroAmount();\\n    error InsufficientBalance(address token);\\n    error AssetNotAllowed(address token);\\n    error NotImplemented();\\n    error InvalidAddress(address addr);\\n    error InvalidParam(string paramName);\\n    error InvalidParams();\\n    error AlreadySet(string param);\\n    error SlippageExceeded(uint256 expected, uint256 actual);\\n    error ArrayLengthMismatch(uint256 length1, uint256 length2, string details);\\n\\n    error ItemNotFound();\\n    error ItemExists();\\n    error MissingRole(bytes32 role, address user);\\n    error RegistryItemMissing(string item);\\n    error NotRegistered();\\n    // Used to check storage slot is empty before setting.\\n    error MustBeZero();\\n    // Used to check storage slot set before deleting.\\n    error MustBeSet();\\n\\n    error ApprovalFailed(address token);\\n    error FlashLoanFailed(address token, uint256 amount);\\n\\n    error SystemMismatch(address source1, address source2);\\n\\n    error InvalidToken(address token);\\n\\n    function verifyNotZero(address addr, string memory paramName) internal pure {\\n        if (addr == address(0)) {\\n            revert ZeroAddress(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(bytes32 key, string memory paramName) internal pure {\\n        if (key == bytes32(0)) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotEmpty(string memory val, string memory paramName) internal pure {\\n        if (bytes(val).length == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifyNotZero(uint256 num, string memory paramName) internal pure {\\n        if (num == 0) {\\n            revert InvalidParam(paramName);\\n        }\\n    }\\n\\n    function verifySystemsMatch(address component1, address component2) internal view {\\n        bytes memory call = abi.encodeWithSignature(\\\"getSystemRegistry()\\\");\\n\\n        address registry1 = abi.decode(component1.functionStaticCall(call), (address));\\n        address registry2 = abi.decode(component2.functionStaticCall(call), (address));\\n\\n        if (registry1 != registry2) {\\n            revert SystemMismatch(component1, component2);\\n        }\\n    }\\n\\n    function verifyArrayLengths(uint256 length1, uint256 length2, string memory details) external pure {\\n        if (length1 != length2) {\\n            revert ArrayLengthMismatch(length1, length2, details);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/stats/Stats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStatsCalculator } from \\\"src/interfaces/stats/IStatsCalculator.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\nlibrary Stats {\\n    uint256 public constant SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\\n    uint256 public constant DEX_FEE_APR_SNAPSHOT_INTERVAL = 24 * 60 * 60; // daily\\n    uint256 public constant DEX_FEE_APR_FILTER_INIT_INTERVAL = 9 * 24 * 60 * 60; // 9 days\\n    uint256 public constant DEX_FEE_ALPHA = 1e17; // 0.1; must be less than 1e18\\n\\n    uint256 public constant INCENTIVE_INFO_SNAPSHOT_INTERVAL = 24 * 60 * 60; // daily\\n\\n    address public constant CURVE_ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice thrown if end timestamp is before start timestamp\\n    error IncorrectTimestamps();\\n\\n    /// @notice thrown if a divisor is zero\\n    error ZeroDivisor();\\n\\n    /// @notice thrown if expecting a negative change but get a positive change\\n    error NonNegativeChange();\\n\\n    /// @dev When registering dependent calculators, use this value for tokens/pools/etc that should be ignored\\n    bytes32 public constant NOOP_APR_ID = keccak256(abi.encode(\\\"NOOP_APR_ID\\\"));\\n\\n    error CalculatorAssetMismatch(bytes32 aprId, address calculator, address coin);\\n\\n    error DependentAprIdsMismatchTokens(uint256 numDependentAprIds, uint256 numCoins);\\n\\n    /// @notice Generate an id for a stat calc representing a base ERC20\\n    /// @dev For rETH/stETH/cbETH etc. Do not use for pools, LP tokens, staking platforms.\\n    /// @param tokenAddress address of the token\\n    function generateRawTokenIdentifier(address tokenAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\\"erc20-v2-\\\", tokenAddress));\\n    }\\n\\n    /// @notice Generate an aprId for a curve pool\\n    /// @param poolAddress address of the curve pool\\n    function generateCurvePoolIdentifier(address poolAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\\"curve\\\", poolAddress));\\n    }\\n\\n    /// @notice Generate an aprId for a balancer pool\\n    /// @param poolAddress address of the balancer pool\\n    function generateBalancerPoolIdentifier(address poolAddress) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\\"balancer\\\", poolAddress));\\n    }\\n\\n    function calculateAnnualizedChangeMinZero(\\n        uint256 startTimestamp,\\n        uint256 startValue,\\n        uint256 endTimestamp,\\n        uint256 endValue\\n    ) internal pure returns (uint256) {\\n        if (startValue == 0) revert ZeroDivisor();\\n        if (endTimestamp <= startTimestamp) revert IncorrectTimestamps();\\n        if (endValue <= startValue) return 0;\\n\\n        uint256 unannualized = (endValue * 1e18) / startValue - 1e18;\\n        uint256 timeDiff = endTimestamp - startTimestamp;\\n\\n        return unannualized * SECONDS_IN_YEAR / timeDiff;\\n    }\\n\\n    function calculateUnannualizedNegativeChange(\\n        uint256 startValue,\\n        uint256 endValue\\n    ) internal pure returns (uint256) {\\n        if (startValue == 0) revert ZeroDivisor();\\n        if (endValue >= startValue) revert NonNegativeChange();\\n\\n        return (startValue - endValue) * 1e18 / startValue;\\n    }\\n\\n    function getFilteredValue(\\n        uint256 alpha,\\n        uint256 priorValue,\\n        uint256 currentValue\\n    ) internal pure returns (uint256) {\\n        if (alpha > 1e18 || alpha == 0) revert Errors.InvalidParam(\\\"alpha\\\");\\n        return ((priorValue * (1e18 - alpha)) + (currentValue * alpha)) / 1e18;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/SystemComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\ncontract SystemComponent is ISystemComponent {\\n    ISystemRegistry internal immutable systemRegistry;\\n\\n    constructor(ISystemRegistry _systemRegistry) {\\n        Errors.verifyNotZero(address(_systemRegistry), \\\"_systemRegistry\\\");\\n        systemRegistry = _systemRegistry;\\n    }\\n\\n    function getSystemRegistry() external view returns (address) {\\n        return address(systemRegistry);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/security/SecurityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IAccessController } from \\\"src/interfaces/security/IAccessController.sol\\\";\\nimport { Context } from \\\"openzeppelin-contracts/utils/Context.sol\\\";\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\n\\ncontract SecurityBase {\\n    IAccessController public immutable accessController;\\n\\n    error UndefinedAddress();\\n\\n    constructor(address _accessController) {\\n        if (_accessController == address(0)) revert UndefinedAddress();\\n\\n        accessController = IAccessController(_accessController);\\n    }\\n\\n    modifier onlyOwner() {\\n        accessController.verifyOwner(msg.sender);\\n        _;\\n    }\\n\\n    modifier hasRole(bytes32 role) {\\n        if (!accessController.hasRole(role, msg.sender)) revert Errors.AccessDenied();\\n        _;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////\\n    //\\n    //  Forward all the regular methods to central security module\\n    //\\n    ///////////////////////////////////////////////////////////////////\\n\\n    function _hasRole(bytes32 role, address account) internal view returns (bool) {\\n        return accessController.hasRole(role, account);\\n    }\\n\\n    // NOTE: left commented forward methods in here for potential future use\\n    //     function _getRoleAdmin(bytes32 role) internal view returns (bytes32) {\\n    //         return accessController.getRoleAdmin(role);\\n    //     }\\n    //\\n    //     function _grantRole(bytes32 role, address account) internal {\\n    //         accessController.grantRole(role, account);\\n    //     }\\n    //\\n    //     function _revokeRole(bytes32 role, address account) internal {\\n    //         accessController.revokeRole(role, account);\\n    //     }\\n    //\\n    //     function _renounceRole(bytes32 role, address account) internal {\\n    //         accessController.renounceRole(role, account);\\n    //     }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/swapper/ISyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISwapRouter } from \\\"src/interfaces/swapper/ISwapRouter.sol\\\";\\n\\ninterface ISyncSwapper {\\n    error DataMismatch(string element);\\n    error InvalidIndex();\\n\\n    /**\\n     * @notice Swaps sellToken for buyToken\\n     * @param pool The address of the pool for the swapper\\n     * @param sellTokenAddress The address of the token to sell\\n     * @param sellAmount The amount of sellToken to sell\\n     * @param buyTokenAddress The address of the token to buy\\n     * @param minBuyAmount The minimum amount of buyToken expected\\n     * @param data Additional data used differently by the different swappers\\n     * @return actualBuyAmount The actual amount received from the swap\\n     */\\n    function swap(\\n        address pool,\\n        address sellTokenAddress,\\n        uint256 sellAmount,\\n        address buyTokenAddress,\\n        uint256 minBuyAmount,\\n        bytes memory data\\n    ) external returns (uint256 actualBuyAmount);\\n\\n    /**\\n     * @notice Validates that the swapData contains the correct information, ensuring that the encoded data contains the\\n     * correct 'fromAddress' and 'toAddress' (swapData.token), and verifies that these tokens are in the pool\\n     * @dev This function should revert with a DataMismatch error if the swapData is invalid\\n     * @param fromAddress The address from which the swap originates\\n     * @param swapData The data associated with the swap that needs to be validated\\n     */\\n    function validate(address fromAddress, ISwapRouter.SwapData memory swapData) external view;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC4626 } from \\\"openzeppelin-contracts/interfaces/IERC4626.sol\\\";\\nimport { IERC20Permit } from \\\"openzeppelin-contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\nimport { LMPDebt } from \\\"src/vault/libs/LMPDebt.sol\\\";\\n\\ninterface ILMPVault is IERC4626, IERC20Permit {\\n    enum VaultShutdownStatus {\\n        Active,\\n        Deprecated,\\n        Exploit\\n    }\\n\\n    /* ******************************** */\\n    /*      Events                      */\\n    /* ******************************** */\\n    event TokensPulled(address[] tokens, uint256[] amounts, address[] destinations);\\n    event TokensRecovered(address[] tokens, uint256[] amounts, address[] destinations);\\n    event Nav(uint256 idle, uint256 debt, uint256 totalSupply);\\n    event RewarderSet(address rewarder);\\n    event DestinationDebtReporting(address destination, uint256 debtValue, uint256 claimed, uint256 claimGasUsed);\\n    event FeeCollected(uint256 fees, address feeSink, uint256 mintedShares, uint256 profit, uint256 idle, uint256 debt);\\n    event Shutdown(VaultShutdownStatus reason);\\n\\n    /* ******************************** */\\n    /*      Errors                      */\\n    /* ******************************** */\\n\\n    error ERC4626MintExceedsMax(uint256 shares, uint256 maxMint);\\n    error ERC4626DepositExceedsMax(uint256 assets, uint256 maxDeposit);\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n    error AmountExceedsAllowance(uint256 shares, uint256 allowed);\\n    error InvalidShutdownStatus(VaultShutdownStatus status);\\n\\n    error WithdrawalFailed();\\n    error DepositFailed();\\n    error InsufficientFundsInDestinations(uint256 deficit);\\n    error WithdrawalIncomplete();\\n\\n    /// @notice Query the type of vault\\n    function vaultType() external view returns (bytes32);\\n\\n    /// @notice Allow token recoverer to collect dust / unintended transfers (non-tracked assets only)\\n    function recover(address[] calldata tokens, uint256[] calldata amounts, address[] calldata destinations) external;\\n\\n    /// @notice Set the order of destination vaults used for withdrawals\\n    // NOTE: will be done going directly to strategy (IStrategy) vault points to.\\n    //       How it'll delegate is still being decided\\n    // function setWithdrawalQueue(address[] calldata destinations) external;\\n\\n    /// @notice Claim Accrued Rewards\\n    function claimRewards() external;\\n\\n    /// @notice Set the withdrawal queue to be used when taking out Assets\\n    /// @param _destinations The ordered list of destination vaults to go for withdrawals\\n    function setWithdrawalQueue(address[] calldata _destinations) external;\\n\\n    /// @notice Get the withdrawal queue to be used when taking out Assets\\n    function getWithdrawalQueue() external returns (IDestinationVault[] memory _destinations);\\n\\n    /// @notice Get a list of destination vaults with pending assets to clear out\\n    function getRemovalQueue() external view returns (address[] memory);\\n\\n    /// @notice Remove emptied destination vault from pending removal queue\\n    function removeFromRemovalQueue(address vaultToRemove) external;\\n\\n    /// @notice Initiate the shutdown procedures for this vault\\n    function shutdown(VaultShutdownStatus reason) external;\\n\\n    /// @notice True if the vault has been shutdown\\n    function isShutdown() external view returns (bool);\\n\\n    /// @notice Returns the reason for shutdown (or `Active` if not shutdown)\\n    function shutdownStatus() external view returns (VaultShutdownStatus);\\n\\n    /// @notice gets the list of supported destination vaults for the LMP/Strategy\\n    /// @return _destinations List of supported destination vaults\\n    function getDestinations() external view returns (address[] memory _destinations);\\n\\n    /// @notice Current performance fee taken on profit. 100% == 10000\\n    function performanceFeeBps() external view returns (uint256);\\n\\n    /// @notice The amount of baseAsset deposited into the contract pending deployment\\n    function totalIdle() external view returns (uint256);\\n\\n    /// @notice The current (though cached) value of assets we've deployed\\n    function totalDebt() external view returns (uint256);\\n\\n    /// @notice get a destinations last reported debt value\\n    /// @param destVault the address of the target destination\\n    /// @return destinations last reported debt value\\n    function getDestinationInfo(address destVault) external view returns (LMPDebt.DestinationInfo memory);\\n\\n    /// @notice check if a destination is registered with the vault\\n    function isDestinationRegistered(address destination) external view returns (bool);\\n\\n    /// @notice get if a destinationVault is queued for removal by the LMPVault\\n    function isDestinationQueuedForRemoval(address destination) external view returns (bool);\\n\\n    /// @notice add (or move to if it already exists) a destination to the head of the withdrawal queue\\n    function addToWithdrawalQueueHead(address destinationVault) external;\\n\\n    /// @notice add (or move to if it already exists) a destination to the tail of the withdrawal queue\\n    function addToWithdrawalQueueTail(address destinationVault) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/ILMPVaultRouterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity >=0.8.7;\\n\\nimport { ILMPVault } from \\\"./ILMPVault.sol\\\";\\n\\n/**\\n * @title LMPVault Router Base Interface\\n * @notice A canonical router between LMPVaults\\n *\\n * The base router is a multicall style router inspired by Uniswap v3 with built-in features for permit,\\n * WETH9 wrap/unwrap, and ERC20 token pulling/sweeping/approving. It includes methods for the four mutable\\n * ERC4626 functions deposit/mint/withdraw/redeem as well.\\n *\\n * These can all be arbitrarily composed using the multicall functionality of the router.\\n *\\n * NOTE the router is capable of pulling any approved token from your wallet. This is only possible when\\n * your address is msg.sender, but regardless be careful when interacting with the router or ERC4626 Vaults.\\n * The router makes no special considerations for unique ERC20 implementations such as fee on transfer.\\n * There are no built in protections for unexpected behavior beyond enforcing the minSharesOut is received.\\n */\\ninterface ILMPVaultRouterBase {\\n    /// @notice thrown when amount of assets received is below the min set by caller\\n    error MinAmountError();\\n\\n    /// @notice thrown when amount of shares received is below the min set by caller\\n    error MinSharesError();\\n\\n    /// @notice thrown when amount of assets received is above the max set by caller\\n    error MaxAmountError();\\n\\n    /// @notice thrown when amount of shares received is above the max set by caller\\n    error MaxSharesError();\\n\\n    /**\\n     * @notice mint `shares` from an ERC4626 vault.\\n     * @param vault The LMPVault to mint shares from.\\n     * @param to The destination of ownership shares.\\n     * @param shares The amount of shares to mint from `vault`.\\n     * @param maxAmountIn The max amount of assets used to mint.\\n     * @return amountIn the amount of assets used to mint by `to`.\\n     * @dev throws MaxAmountError\\n     */\\n    function mint(\\n        ILMPVault vault,\\n        address to,\\n        uint256 shares,\\n        uint256 maxAmountIn\\n    ) external payable returns (uint256 amountIn);\\n\\n    /**\\n     * @notice deposit `amount` to an ERC4626 vault.\\n     * @param vault The LMPVault to deposit assets to.\\n     * @param to The destination of ownership shares.\\n     * @param amount The amount of assets to deposit to `vault`.\\n     * @param minSharesOut The min amount of `vault` shares received by `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MinSharesError\\n     */\\n    function deposit(\\n        ILMPVault vault,\\n        address to,\\n        uint256 amount,\\n        uint256 minSharesOut\\n    ) external payable returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice withdraw `amount` from an ERC4626 vault.\\n     * @param vault The LMPVault to withdraw assets from.\\n     * @param to The destination of assets.\\n     * @param amount The amount of assets to withdraw from vault.\\n     * @param maxSharesOut The max amount of shares burned for assets requested.\\n     * @param unwrapWETH If true, unwrap WETH9 to ETH before sending to `to`.\\n     * @return sharesOut the amount of shares received by `to`.\\n     * @dev throws MaxSharesError\\n     */\\n    function withdraw(\\n        ILMPVault vault,\\n        address to,\\n        uint256 amount,\\n        uint256 maxSharesOut,\\n        bool unwrapWETH\\n    ) external payable returns (uint256 sharesOut);\\n\\n    /**\\n     * @notice redeem `shares` shares from a LMPVault\\n     * @param vault The LMPVault to redeem shares from.\\n     * @param to The destination of assets.\\n     * @param shares The amount of shares to redeem from vault.\\n     * @param minAmountOut The min amount of assets received by `to`.\\n     * @param unwrapWETH If true, unwrap WETH9 to ETH before sending to `to`.\\n     * @return amountOut the amount of assets received by `to`.\\n     * @dev throws MinAmountError\\n     */\\n    function redeem(\\n        ILMPVault vault,\\n        address to,\\n        uint256 shares,\\n        uint256 minAmountOut,\\n        bool unwrapWETH\\n    ) external payable returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/liquidation/IAsyncSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nstruct SwapParams {\\n    /// @dev The address of the token to be sold.\\n    address sellTokenAddress;\\n    /// @dev The amount of tokens to be sold.\\n    uint256 sellAmount;\\n    /// @dev The address of the token to be bought.\\n    address buyTokenAddress;\\n    /// @dev The expected minimum amount of tokens to be bought.\\n    uint256 buyAmount;\\n    /// @dev Data payload to be used for complex swap operations.\\n    bytes data;\\n    /// @dev Extra data payload reserved for future development. This field allows for additional information\\n    /// or functionality to be added without changing the struct and interface.\\n    bytes extraData;\\n}\\n\\ninterface IAsyncSwapper {\\n    error TokenAddressZero();\\n    error SwapFailed();\\n    error InsufficientBuyAmountReceived(uint256 buyTokenAmountReceived, uint256 buyAmount);\\n    error InsufficientSellAmount();\\n    error InsufficientBuyAmount();\\n    error InsufficientBalance(uint256 balanceNeeded, uint256 balanceAvailable);\\n\\n    event Swapped(\\n        address indexed sellTokenAddress,\\n        address indexed buyTokenAddress,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 buyTokenAmountReceived\\n    );\\n\\n    /**\\n     * @notice Swaps sellToken for buyToken\\n     * @param swapParams Encoded swap data\\n     * @return buyTokenAmountReceived The amount of buyToken received from the swap\\n     */\\n    function swap(SwapParams memory swapParams) external returns (uint256 buyTokenAmountReceived);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/destinations/IDestinationAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IDestinationAdapter\\n * @dev This is a super-interface to unify different types of adapters to be registered in Destination Registry.\\n *      Specific interface type is defined by extending from this interface.\\n */\\ninterface IDestinationAdapter {\\n    error MustBeMoreThanZero();\\n    error ArraysLengthMismatch();\\n    error BalanceMustIncrease();\\n    error MinLpAmountNotReached();\\n    error LpTokenAmountMismatch();\\n    error NoNonZeroAmountProvided();\\n    error InvalidBalanceChange();\\n    error InvalidAddress(address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { ISystemComponent } from \\\"src/interfaces/ISystemComponent.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\n\\n/// @notice Creates and registers Destination Vaults for the system\\ninterface IDestinationVaultFactory is ISystemComponent {\\n    /// @notice Creates a vault of the specified type\\n    /// @dev vaultType will be bytes32 encoded and checked that a template is registered\\n    /// @param vaultType human readable key of the vault template\\n    /// @param baseAsset Base asset of the system. WETH/USDC/etc\\n    /// @param underlyer Underlying asset the vault will wrap\\n    /// @param additionalTrackedTokens Any tokens in addition to base and underlyer that should be tracked\\n    /// @param salt Contracts are created via CREATE2 with this value\\n    /// @param params params to be passed to vaults initialize function\\n    /// @return vault address of the newly created destination vault\\n    function create(\\n        string memory vaultType,\\n        address baseAsset,\\n        address underlyer,\\n        address[] memory additionalTrackedTokens,\\n        bytes32 salt,\\n        bytes memory params\\n    ) external returns (address vault);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/stats/ILSTStats.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { Stats } from \\\"src/stats/Stats.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\n\\n/// @title Return stats on base LSTs\\ninterface ILSTStats {\\n    struct LSTStatsData {\\n        uint256 lastSnapshotTimestamp;\\n        uint256 baseApr;\\n        int256 discount; // positive number is a discount, negative is a premium\\n        uint24[10] discountHistory; // 7 decimal precision\\n        uint40[5] discountTimestampByPercent; // each index is the timestamp that the token reached that discount\\n        uint256[] slashingCosts;\\n        uint256[] slashingTimestamps;\\n    }\\n\\n    /// @notice Get the current stats for the LST\\n    /// @dev Returned data is a combination of current data and filtered snapshots\\n    /// @return lstStatsData current data on the LST\\n    function current() external returns (LSTStatsData memory lstStatsData);\\n\\n    /// @notice Get the EthPerToken (or Share) for the LST\\n    /// @return ethPerShare the backing eth for the LST\\n    function calculateEthPerToken() external view returns (uint256 ethPerShare);\\n\\n    /// @notice Get if the underlying LST token is rebasing\\n    /// @return rebasing is true if the lst is a rebasing token\\n    function isRebasing() external view returns (bool rebasing);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISystemComponent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\n/// @notice Stores a reference to the registry for this system\\ninterface ISystemComponent {\\n    /// @notice The system instance this contract is tied to\\n    function getSystemRegistry() external view returns (address registry);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IDestinationVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { IBaseAssetVault } from \\\"./IBaseAssetVault.sol\\\";\\nimport { IMainRewarder } from \\\"src/interfaces/rewarders/IMainRewarder.sol\\\";\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IDexLSTStats } from \\\"src/interfaces/stats/IDexLSTStats.sol\\\";\\n\\ninterface IDestinationVault is IBaseAssetVault, IERC20 {\\n    enum VaultShutdownStatus {\\n        Active,\\n        Deprecated,\\n        Exploit\\n    }\\n\\n    error LogicDefect();\\n    error UnreachableError();\\n    error BaseAmountReceived(uint256 amount);\\n\\n    /* ******************************** */\\n    /* View                             */\\n    /* ******************************** */\\n\\n    /// @notice The asset that is deposited into the vault\\n    function underlying() external view returns (address);\\n\\n    /// @notice The asset that rewards and withdrawals to LMP is done in\\n    /// @inheritdoc IBaseAssetVault\\n    function baseAsset() external view override returns (address);\\n\\n    /// @notice Debt balance of underlying asset that is in contract.  This\\n    ///     value includes only assets that are known as debt by the rest of the\\n    ///     system (i.e. transferred in on rebalance), and does not include\\n    ///     extraneous amounts of underlyer that may have ended up in this contract.\\n    function internalDebtBalance() external view returns (uint256);\\n\\n    /// @notice Debt balance of underlyering asset staked externally.  This value only\\n    ///     includes assets known as debt to the rest of the system, and does not include\\n    ///     any assets staked on behalf of the DV in external contracts.\\n    function externalDebtBalance() external view returns (uint256);\\n\\n    /// @notice Returns true value of _underlyer in DV.  Debt + tokens that may have\\n    ///     been transferred into the contract outside of rebalance.\\n    function internalQueriedBalance() external view returns (uint256);\\n\\n    /// @notice Returns true value of staked _underlyer in external contract.  This\\n    ///     will include any _underlyer that has been staked on behalf of the DV.\\n    function externalQueriedBalance() external view returns (uint256);\\n\\n    /// @notice Balance of underlying debt, sum of `externalDebtBalance()` and `internalDebtBalance()`.\\n    function balanceOfUnderlyingDebt() external view returns (uint256);\\n\\n    /// @notice Rewarder for this vault\\n    function rewarder() external view returns (address);\\n\\n    /// @notice Exchange this destination vault points to\\n    function exchangeName() external view returns (string memory);\\n\\n    /// @notice Tokens that base asset can be swapped into\\n    function underlyingTokens() external view returns (address[] memory);\\n\\n    /* ******************************** */\\n    /* Events                           */\\n    /* ******************************** */\\n\\n    event Donated(address sender, uint256 amount);\\n    event Withdraw(\\n        uint256 target, uint256 actual, uint256 debtLoss, uint256 claimLoss, uint256 fromIdle, uint256 fromDebt\\n    );\\n\\n    /* ******************************** */\\n    /* Errors                           */\\n    /* ******************************** */\\n\\n    error ZeroAddress(string paramName);\\n    error InvalidShutdownStatus(VaultShutdownStatus status);\\n\\n    /* ******************************** */\\n    /* Functions                        */\\n    /* ******************************** */\\n\\n    /// @notice Setup the contract. These will be cloned so no constructor\\n    /// @param baseAsset_ Base asset of the system. WETH/USDC/etc\\n    /// @param underlyer_ Underlying asset the vault will wrap\\n    /// @param rewarder_ Reward tracker for this vault\\n    /// @param additionalTrackedTokens_ Additional tokens that should be considered 'tracked'\\n    /// @param params_ Any extra parameters needed to setup the contract\\n    function initialize(\\n        IERC20 baseAsset_,\\n        IERC20 underlyer_,\\n        IMainRewarder rewarder_,\\n        address[] memory additionalTrackedTokens_,\\n        bytes memory params_\\n    ) external;\\n\\n    /// @notice Calculates the current value of our debt\\n    /// @dev Queries the current value of all tokens we have deployed, whether its a single place, multiple, staked, etc\\n    /// @return value The current value of our debt in terms of the baseAsset\\n    function debtValue() external returns (uint256 value);\\n\\n    /// @notice Calculates the current value of a portion of the debt based on shares\\n    /// @dev Queries the current value of all tokens we have deployed, whether its a single place, multiple, staked, etc\\n    /// @param shares The number of shares to value\\n    /// @return value The current value of our debt in terms of the baseAsset\\n    function debtValue(uint256 shares) external returns (uint256 value);\\n\\n    /// @notice Collects any earned rewards from staking, incentives, etc. Transfers to sender\\n    /// @dev Should be limited to LIQUIDATOR_ROLE. Rewards must be collected before claimed\\n    /// @return amounts amount of rewards claimed for each token\\n    /// @return tokens tokens claimed\\n    function collectRewards() external returns (uint256[] memory amounts, address[] memory tokens);\\n\\n    /// @notice Pull any non-tracked token to the specified destination\\n    /// @dev Should be limited to TOKEN_RECOVERY_ROLE\\n    function recover(address[] calldata tokens, uint256[] calldata amounts, address[] calldata destinations) external;\\n\\n    /// @notice Recovers any extra underlying both in DV and staked externally not tracked as debt.\\n    /// @dev Should be limited to TOKEN_SAVER_ROLE.\\n    /// @param destination The address to send excess underlyer to.\\n    function recoverUnderlying(address destination) external;\\n\\n    /// @notice Deposit underlying to receive destination vault shares\\n    /// @param amount amount of base lp asset to deposit\\n    function depositUnderlying(uint256 amount) external returns (uint256 shares);\\n\\n    /// @notice Withdraw underlying by burning destination vault shares\\n    /// @param shares amount of destination vault shares to burn\\n    /// @param to destination of the underlying asset\\n    /// @return amount underlyer amount 'to' received\\n    function withdrawUnderlying(uint256 shares, address to) external returns (uint256 amount);\\n\\n    /// @notice Burn specified shares for underlyer swapped to base asset\\n    /// @param shares amount of vault shares to burn\\n    /// @param to destination of the base asset\\n    /// @return amount base asset amount 'to' received\\n    function withdrawBaseAsset(uint256 shares, address to) external returns (uint256 amount);\\n\\n    /// @notice Estimate the base asset amount that can be withdrawn given a certain number of shares. This function\\n    /// performs a \\\"simulation\\\" of the withdrawal process. It will actually execute the withdrawal, but will then revert\\n    /// the transaction, returning the estimated amount in the revert reason.\\n    /// @param shares The number of shares to be used in the estimation.\\n    /// @param to The address to receive the withdrawn amount.\\n    /// @param account Address involved in the withdrawal; Must be set to address(0).\\n    /// @return The estimated base asset amount.\\n    function estimateWithdrawBaseAsset(uint256 shares, address to, address account) external returns (uint256);\\n\\n    /// @notice Initiate the shutdown procedures for this vault\\n    /// @dev Should pull back tokens from staking locations\\n    function shutdown(VaultShutdownStatus reason) external;\\n\\n    /// @notice True if the vault has been shutdown\\n    function isShutdown() external view returns (bool);\\n\\n    /// @notice Returns the reason for shutdown (or `Active` if not shutdown)\\n    function shutdownStatus() external view returns (VaultShutdownStatus);\\n\\n    /// @notice Stats contract for this vault\\n    function getStats() external returns (IDexLSTStats);\\n\\n    /// @notice get the marketplace rewards\\n    /// @return rewardTokens list of reward token addresses\\n    /// @return rewardRates list of reward rates\\n    function getMarketplaceRewards() external returns (uint256[] memory rewardTokens, uint256[] memory rewardRates);\\n\\n    /// @notice Get the address of the underlying pool the vault points to\\n    /// @return poolAddress address of the underlying pool\\n    function getPool() external view returns (address poolAddress);\\n\\n    /// @notice Gets the spot price of the underlying LP token\\n    /// @dev Price validated to be inside our tolerance against safe price. Will revert if outside.\\n    /// @return price Value of 1 unit of the underlying LP token in terms of the base asset\\n    function getValidatedSpotPrice() external returns (uint256 price);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategy/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IDestinationVault } from \\\"../vault/IDestinationVault.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"openzeppelin-contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\n\\ninterface IStrategy {\\n    /* ******************************** */\\n    /*      Events                      */\\n    /* ******************************** */\\n    event DestinationVaultAdded(address destination);\\n    event DestinationVaultRemoved(address destination);\\n    event WithdrawalQueueSet(address[] destinations);\\n    event AddedToRemovalQueue(address destination);\\n    event RemovedFromRemovalQueue(address destination);\\n\\n    error InvalidDestinationVault();\\n\\n    error RebalanceFailed(string message);\\n\\n    /// @notice gets the list of supported destination vaults for the LMP/Strategy\\n    /// @return _destinations List of supported destination vaults\\n    function getDestinations() external view returns (address[] memory _destinations);\\n\\n    /// @notice add supported destination vaults for the LMP/Strategy\\n    /// @param _destinations The list of destination vaults to add\\n    function addDestinations(address[] calldata _destinations) external;\\n\\n    /// @notice remove supported destination vaults for the LMP/Strategy\\n    /// @param _destinations The list of destination vaults to remove\\n    function removeDestinations(address[] calldata _destinations) external;\\n\\n    /// @param destinationIn The address / lp token of the destination vault that will increase\\n    /// @param tokenIn The address of the underlyer token that will be provided by the swapper\\n    /// @param amountIn The amount of the underlying LP tokens that will be received\\n    /// @param destinationOut The address of the destination vault that will decrease\\n    /// @param tokenOut The address of the underlyer token that will be received by the swapper\\n    /// @param amountOut The amount of the tokenOut that will be received by the swapper\\n    struct RebalanceParams {\\n        address destinationIn;\\n        address tokenIn;\\n        uint256 amountIn;\\n        address destinationOut;\\n        address tokenOut;\\n        uint256 amountOut;\\n    }\\n\\n    /// @param destination The address / lp token of the destination vault\\n    /// @param baseApr Base Apr is the yield generated by staking rewards\\n    /// @param feeApr Yield for pool trading fees\\n    /// @param incentiveApr Incentives for LP\\n    /// @param safeTotalSupply Safe supply for LP tokens\\n    /// @param priceReturn Return from price movement to & away from peg\\n    /// @param maxDiscount Max discount to peg\\n    /// @param maxPremium Max premium to peg\\n    /// @param ownedShares Shares owned for this destination\\n    /// @param compositeReturn Total return combined from the individual yield components\\n    /// @param pricePerShare Price per share\\n    /// @param slashingCost The loss due to slashing of the backing\\n    struct SummaryStats {\\n        address destination;\\n        uint256 baseApr;\\n        uint256 feeApr;\\n        uint256 incentiveApr;\\n        uint256 safeTotalSupply;\\n        int256 priceReturn;\\n        int256 maxDiscount;\\n        int256 maxPremium;\\n        uint256 ownedShares;\\n        int256 compositeReturn;\\n        uint256 pricePerShare;\\n        uint256 slashingCost;\\n    }\\n\\n    /// @notice rebalance the LMP from the tokenOut (decrease) to the tokenIn (increase)\\n    /// This uses a flash loan to receive the tokenOut to reduce the working capital requirements of the swapper\\n    /// @param receiver The contract receiving the tokens, needs to implement the\\n    /// `onFlashLoan(address user, address token, uint256 amount, uint256 fee, bytes calldata)` interface\\n    /// @param params Parameters by which to perform the rebalance\\n    /// @param data A data parameter to be passed on to the `receiver` for any custom use\\n    function flashRebalance(\\n        IERC3156FlashBorrower receiver,\\n        RebalanceParams calldata params,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/vault/libs/LMPDebt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\n\\npragma solidity 0.8.17;\\n\\nimport { Errors } from \\\"src/utils/Errors.sol\\\";\\nimport { LibAdapter } from \\\"src/libs/LibAdapter.sol\\\";\\nimport { IDestinationVault } from \\\"src/interfaces/vault/IDestinationVault.sol\\\";\\nimport { Math } from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport { EnumerableSet } from \\\"openzeppelin-contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { IDestinationVaultRegistry } from \\\"src/interfaces/vault/IDestinationVaultRegistry.sol\\\";\\nimport { ISystemRegistry } from \\\"src/interfaces/ISystemRegistry.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"openzeppelin-contracts/interfaces/IERC3156FlashBorrower.sol\\\";\\nimport { ILMPStrategy } from \\\"src/interfaces/strategy/ILMPStrategy.sol\\\";\\n\\nlibrary LMPDebt {\\n    using Math for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    error VaultShutdown();\\n    error WithdrawShareCalcInvalid(uint256 currentShares, uint256 cachedShares);\\n    error RebalanceDestinationsMatch(address destinationVault);\\n    error RebalanceFailed(string message);\\n\\n    struct DestinationInfo {\\n        /// @notice Current underlying and reward value at the destination vault\\n        /// @dev Used for calculating totalDebt of the LMPVault\\n        uint256 currentDebt;\\n        /// @notice Last block timestamp this info was updated\\n        uint256 lastReport;\\n        /// @notice How many shares of the destination vault we owned at last report\\n        uint256 ownedShares;\\n        /// @notice Amount of baseAsset transferred out in service of deployments\\n        /// @dev Used for calculating 'in profit' or not during user withdrawals\\n        uint256 debtBasis;\\n    }\\n\\n    struct RebalanceOutParams {\\n        /// Address that will received the withdrawn underlyer\\n        address receiver;\\n        /// The \\\"out\\\" destination vault\\n        address destinationOut;\\n        /// The amount of tokenOut that will be withdrawn\\n        uint256 amountOut;\\n        /// The underlyer for destinationOut\\n        address tokenOut;\\n        IERC20 _baseAsset;\\n        bool _shutdown;\\n    }\\n\\n    /// @dev In memory struct only for managing vars in rebalances\\n    struct IdleDebtChange {\\n        uint256 debtDecrease;\\n        uint256 debtIncrease;\\n        uint256 idleDecrease;\\n        uint256 idleIncrease;\\n    }\\n\\n    struct FlashRebalanceParams {\\n        uint256 totalIdle;\\n        uint256 totalDebt;\\n        IERC20 baseAsset;\\n        bool shutdown;\\n    }\\n\\n    struct FlashResultInfo {\\n        uint256 tokenInBalanceBefore;\\n        uint256 tokenInBalanceAfter;\\n        bytes32 flashResult;\\n    }\\n\\n    function flashRebalance(\\n        DestinationInfo storage destInfoOut,\\n        DestinationInfo storage destInfoIn,\\n        IERC3156FlashBorrower receiver,\\n        IStrategy.RebalanceParams memory params,\\n        IStrategy.SummaryStats memory destSummaryOut,\\n        ILMPStrategy lmpStrategy,\\n        FlashRebalanceParams memory flashParams,\\n        bytes calldata data\\n    ) external returns (uint256 idle, uint256 debt) {\\n        LMPDebt.IdleDebtChange memory idleDebtChange;\\n\\n        // Handle decrease (shares going \\\"Out\\\", cashing in shares and sending underlying back to swapper)\\n        // If the tokenOut is _asset we assume they are taking idle\\n        // which is already in the contract\\n        idleDebtChange = _handleRebalanceOut(\\n            LMPDebt.RebalanceOutParams({\\n                receiver: address(receiver),\\n                destinationOut: params.destinationOut,\\n                amountOut: params.amountOut,\\n                tokenOut: params.tokenOut,\\n                _baseAsset: flashParams.baseAsset,\\n                _shutdown: flashParams.shutdown\\n            }),\\n            destInfoOut\\n        );\\n\\n        // Handle increase (shares coming \\\"In\\\", getting underlying from the swapper and trading for new shares)\\n        if (params.amountIn > 0) {\\n            FlashResultInfo memory flashResultInfo;\\n            // get \\\"before\\\" counts\\n            flashResultInfo.tokenInBalanceBefore = IERC20(params.tokenIn).balanceOf(address(this));\\n\\n            // Give control back to the solver so they can make use of the \\\"out\\\" assets\\n            // and get our \\\"in\\\" asset\\n            flashResultInfo.flashResult = receiver.onFlashLoan(msg.sender, params.tokenIn, params.amountIn, 0, data);\\n\\n            // We assume the solver will send us the assets\\n            flashResultInfo.tokenInBalanceAfter = IERC20(params.tokenIn).balanceOf(address(this));\\n\\n            // Make sure the call was successful and verify we have at least the assets we think\\n            // we were getting\\n            if (\\n                flashResultInfo.flashResult != keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\")\\n                    || flashResultInfo.tokenInBalanceAfter < flashResultInfo.tokenInBalanceBefore + params.amountIn\\n            ) {\\n                revert Errors.FlashLoanFailed(params.tokenIn, params.amountIn);\\n            }\\n\\n            {\\n                // make sure we have a valid path\\n                (bool success, string memory message) = lmpStrategy.verifyRebalance(params, destSummaryOut);\\n                if (!success) {\\n                    revert RebalanceFailed(message);\\n                }\\n            }\\n\\n            if (params.tokenIn != address(flashParams.baseAsset)) {\\n                (uint256 debtDecreaseIn, uint256 debtIncreaseIn) = _handleRebalanceIn(\\n                    destInfoIn,\\n                    IDestinationVault(params.destinationIn),\\n                    params.tokenIn,\\n                    flashResultInfo.tokenInBalanceAfter\\n                );\\n                idleDebtChange.debtDecrease += debtDecreaseIn;\\n                idleDebtChange.debtIncrease += debtIncreaseIn;\\n            } else {\\n                idleDebtChange.idleIncrease +=\\n                    flashResultInfo.tokenInBalanceAfter - flashResultInfo.tokenInBalanceBefore;\\n            }\\n        }\\n\\n        {\\n            idle = flashParams.totalIdle;\\n            debt = flashParams.totalDebt;\\n\\n            if (idleDebtChange.idleDecrease > 0 || idleDebtChange.idleIncrease > 0) {\\n                idle = idle + idleDebtChange.idleIncrease - idleDebtChange.idleDecrease;\\n            }\\n\\n            if (idleDebtChange.debtDecrease > 0 || idleDebtChange.debtIncrease > 0) {\\n                debt = debt + idleDebtChange.debtIncrease - idleDebtChange.debtDecrease;\\n            }\\n        }\\n    }\\n\\n    function _calcUserWithdrawSharesToBurn(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault destVault,\\n        uint256 userShares,\\n        uint256 maxAssetsToPull,\\n        uint256 totalVaultShares\\n    ) external returns (uint256 sharesToBurn, uint256 totalDebtBurn) {\\n        // Figure out how many shares we can burn from the destination as well\\n        // as what our totalDebt deduction should be (totalDebt being a cached value).\\n        // If the destination vault is currently sitting at a profit, then the user can burn\\n        // all the shares this vault owns. If its at a loss, they can only burn an amount\\n        // proportional to their ownership of this vault. This is so a user doesn't lock in\\n        // a loss for the entire vault during their withdrawal\\n\\n        uint256 currentDvShares = destVault.balanceOf(address(this));\\n\\n        // slither-disable-next-line incorrect-equality\\n        if (currentDvShares == 0) {\\n            return (0, 0);\\n        }\\n\\n        // Calculate the current value of our shares\\n        uint256 currentDvDebtValue = destVault.debtValue(currentDvShares);\\n\\n        // Get the basis for the current deployment\\n        uint256 cachedDebtBasis = destInfo.debtBasis;\\n\\n        // The amount of shares we had at the last debt reporting\\n        uint256 cachedDvShares = destInfo.ownedShares;\\n\\n        // The value of our debt + earned rewards at last debt reporting\\n        uint256 cachedCurrentDebt = destInfo.currentDebt;\\n\\n        // Our current share balance should only ever be lte the last snapshot\\n        // Any update to the deployment should update the snapshot and withdrawals\\n        // can only lower it\\n        if (currentDvShares > cachedDvShares) {\\n            revert WithdrawShareCalcInvalid(currentDvShares, cachedDvShares);\\n        }\\n\\n        // Recalculated what the debtBasis is with the current number of shares\\n        uint256 updatedDebtBasis = cachedDebtBasis.mulDiv(currentDvShares, cachedDvShares, Math.Rounding.Up);\\n\\n        // Neither of these numbers include rewards from the DV\\n        if (currentDvDebtValue < updatedDebtBasis) {\\n            // We are currently sitting at a loss. Limit the value we can pull from\\n            // the destination vault\\n            currentDvDebtValue = currentDvDebtValue.mulDiv(userShares, totalVaultShares, Math.Rounding.Down);\\n            currentDvShares = currentDvShares.mulDiv(userShares, totalVaultShares, Math.Rounding.Down);\\n        }\\n\\n        // Shouldn't pull more than we want\\n        // Or, we're not in profit so we limit the pull\\n        if (currentDvDebtValue < maxAssetsToPull) {\\n            maxAssetsToPull = currentDvDebtValue;\\n        }\\n\\n        // Calculate the portion of shares to burn based on the assets we need to pull\\n        // and the current total debt value. These are destination vault shares.\\n        sharesToBurn = currentDvShares.mulDiv(maxAssetsToPull, currentDvDebtValue, Math.Rounding.Up);\\n\\n        // This is what will be deducted from totalDebt with the withdrawal. The totalDebt number\\n        // is calculated based on the cached values so we need to be sure to reduce it\\n        // proportional to the original cached debt value\\n        totalDebtBurn = cachedCurrentDebt.mulDiv(sharesToBurn, cachedDvShares, Math.Rounding.Up);\\n    }\\n\\n    /// @notice Perform deposit and debt info update for the \\\"in\\\" destination during a rebalance\\n    /// @dev This \\\"in\\\" function performs less validations than its \\\"out\\\" version\\n    /// @param dvIn The \\\"in\\\" destination vault\\n    /// @param tokenIn The underlyer for dvIn\\n    /// @param depositAmount The amount of tokenIn that will be deposited\\n    /// @return debtDecrease The previous amount of debt dvIn accounted for in totalDebt\\n    /// @return debtIncrease The current amount of debt dvIn should account for in totalDebt\\n    function handleRebalanceIn(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault dvIn,\\n        address tokenIn,\\n        uint256 depositAmount\\n    ) external returns (uint256 debtDecrease, uint256 debtIncrease) {\\n        (debtDecrease, debtIncrease) = _handleRebalanceIn(destInfo, dvIn, tokenIn, depositAmount);\\n    }\\n\\n    /// @notice Perform deposit and debt info update for the \\\"in\\\" destination during a rebalance\\n    /// @dev This \\\"in\\\" function performs less validations than its \\\"out\\\" version\\n    /// @param dvIn The \\\"in\\\" destination vault\\n    /// @param tokenIn The underlyer for dvIn\\n    /// @param depositAmount The amount of tokenIn that will be deposited\\n    /// @return debtDecrease The previous amount of debt dvIn accounted for in totalDebt\\n    /// @return debtIncrease The current amount of debt dvIn should account for in totalDebt\\n    function _handleRebalanceIn(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault dvIn,\\n        address tokenIn,\\n        uint256 depositAmount\\n    ) private returns (uint256 debtDecrease, uint256 debtIncrease) {\\n        LibAdapter._approve(IERC20(tokenIn), address(dvIn), depositAmount);\\n\\n        // Snapshot our current shares so we know how much to back out\\n        uint256 originalShareBal = dvIn.balanceOf(address(this));\\n\\n        // deposit to dv\\n        uint256 newShares = dvIn.depositUnderlying(depositAmount);\\n\\n        // Update the debt info snapshot\\n        (debtDecrease, debtIncrease) =\\n            _recalculateDestInfo(destInfo, dvIn, originalShareBal, originalShareBal + newShares, true);\\n    }\\n\\n    /**\\n     * @notice Perform withdraw and debt info update for the \\\"out\\\" destination during a rebalance\\n     * @dev This \\\"out\\\" function performs more validations and handles idle as opposed to \\\"in\\\" which does not\\n     *  debtDecrease The previous amount of debt destinationOut accounted for in totalDebt\\n     *  debtIncrease The current amount of debt destinationOut should account for in totalDebt\\n     *  idleDecrease Amount of baseAsset that was sent from the vault. > 0 only when tokenOut == baseAsset\\n     *  idleIncrease Amount of baseAsset that was claimed from Destination Vault\\n     * @param params Rebalance out params\\n     * @param destOutInfo The \\\"out\\\" destination vault info\\n     * @return assetChange debt and idle change data\\n     */\\n    function handleRebalanceOut(\\n        RebalanceOutParams memory params,\\n        DestinationInfo storage destOutInfo\\n    ) external returns (IdleDebtChange memory assetChange) {\\n        (assetChange) = _handleRebalanceOut(params, destOutInfo);\\n    }\\n\\n    /**\\n     * @notice Perform withdraw and debt info update for the \\\"out\\\" destination during a rebalance\\n     * @dev This \\\"out\\\" function performs more validations and handles idle as opposed to \\\"in\\\" which does not\\n     *  debtDecrease The previous amount of debt destinationOut accounted for in totalDebt\\n     *  debtIncrease The current amount of debt destinationOut should account for in totalDebt\\n     *  idleDecrease Amount of baseAsset that was sent from the vault. > 0 only when tokenOut == baseAsset\\n     *  idleIncrease Amount of baseAsset that was claimed from Destination Vault\\n     * @param params Rebalance out params\\n     * @param destOutInfo The \\\"out\\\" destination vault info\\n     * @return assetChange debt and idle change data\\n     */\\n    function _handleRebalanceOut(\\n        RebalanceOutParams memory params,\\n        DestinationInfo storage destOutInfo\\n    ) private returns (IdleDebtChange memory assetChange) {\\n        // Handle decrease (shares going \\\"Out\\\", cashing in shares and sending underlying back to swapper)\\n        // If the tokenOut is _asset we assume they are taking idle\\n        // which is already in the contract\\n        if (params.amountOut > 0) {\\n            if (params.tokenOut != address(params._baseAsset)) {\\n                IDestinationVault dvOut = IDestinationVault(params.destinationOut);\\n\\n                // Snapshot our current shares so we know how much to back out\\n                uint256 originalShareBal = dvOut.balanceOf(address(this));\\n\\n                // Burning our shares will claim any pending baseAsset\\n                // rewards and send them to us. Make sure we capture them\\n                // so they can end up in idle\\n                uint256 beforeBaseAssetBal = params._baseAsset.balanceOf(address(this));\\n\\n                // withdraw underlying from dv\\n                // slither-disable-next-line unused-return\\n                dvOut.withdrawUnderlying(params.amountOut, params.receiver);\\n\\n                assetChange.idleIncrease = params._baseAsset.balanceOf(address(this)) - beforeBaseAssetBal;\\n\\n                // Update the debt info snapshot\\n                (assetChange.debtDecrease, assetChange.debtIncrease) = _recalculateDestInfo(\\n                    destOutInfo, dvOut, originalShareBal, originalShareBal - params.amountOut, true\\n                );\\n            } else {\\n                // If we are shutdown then the only operations we should be performing are those that get\\n                // the base asset back to the vault. We shouldn't be sending out more\\n                if (params._shutdown) {\\n                    revert VaultShutdown();\\n                }\\n                // Working with idle baseAsset which should be in the vault already\\n                // Just send it out\\n                IERC20(params.tokenOut).safeTransfer(params.receiver, params.amountOut);\\n                assetChange.idleDecrease = params.amountOut;\\n            }\\n        }\\n    }\\n\\n    function recalculateDestInfo(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault destVault,\\n        uint256 originalShares,\\n        uint256 currentShares,\\n        bool resetDebtBasis\\n    ) external returns (uint256 totalDebtDecrease, uint256 totalDebtIncrease) {\\n        (totalDebtDecrease, totalDebtIncrease) =\\n            _recalculateDestInfo(destInfo, destVault, originalShares, currentShares, resetDebtBasis);\\n    }\\n\\n    function _recalculateDestInfo(\\n        DestinationInfo storage destInfo,\\n        IDestinationVault destVault,\\n        uint256 originalShares,\\n        uint256 currentShares,\\n        bool resetDebtBasis\\n    ) private returns (uint256 totalDebtDecrease, uint256 totalDebtIncrease) {\\n        // Figure out what to back out of our totalDebt number.\\n        // We could have had withdraws since the last snapshot which means our\\n        // cached currentDebt number should be decreased based on the remaining shares\\n        // totalDebt is decreased using the same proportion of shares method during withdrawals\\n        // so this should represent whatever is remaining.\\n\\n        // Figure out how much our debt is currently worth\\n        uint256 dvDebtValue = destVault.debtValue(currentShares);\\n\\n        // Calculate what we're backing out based on the original shares\\n        uint256 currentDebt = (destInfo.currentDebt * originalShares) / Math.max(destInfo.ownedShares, 1);\\n        destInfo.currentDebt = dvDebtValue;\\n        destInfo.lastReport = block.timestamp;\\n        destInfo.ownedShares = currentShares;\\n        if (resetDebtBasis) {\\n            destInfo.debtBasis = dvDebtValue;\\n        }\\n\\n        totalDebtDecrease = currentDebt;\\n        totalDebtIncrease = dvDebtValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/vault/IBaseAssetVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20Metadata as IERC20 } from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IBaseAssetVault {\\n    /// @notice Asset that this Vault primarily manages\\n    /// @dev Vault decimals should be the same as the baseAsset\\n    function baseAsset() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IMainRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IBaseRewarder } from \\\"./IBaseRewarder.sol\\\";\\nimport { IExtraRewarder } from \\\"src/interfaces/rewarders/IExtraRewarder.sol\\\";\\n\\ninterface IMainRewarder is IBaseRewarder {\\n    error ExtraRewardsNotAllowed();\\n\\n    event ExtraRewardAdded(address reward);\\n    event ExtraRewardsCleared();\\n    event ExtraRewardRemoved(address reward);\\n\\n    /**\\n     * @notice Adds an ExtraRewarder contract address to the extraRewards array.\\n     * @param reward The address of the ExtraRewarder contract.\\n     */\\n    function addExtraReward(address reward) external;\\n\\n    /**\\n     * @notice Withdraws the specified amount of tokens from the vault for the specified account, and transfers all\\n     * rewards for the account from this contract and any linked extra reward contracts.\\n     * @param account The address of the account to withdraw tokens and claim rewards for.\\n     * @param amount The amount of tokens to withdraw.\\n     * @param claim If true, claims all rewards for the account from this contract and any linked extra reward\\n     * contracts.\\n     */\\n    function withdraw(address account, uint256 amount, bool claim) external;\\n\\n    /**\\n     * @notice Clears the extraRewards array.\\n     */\\n    function clearExtraRewards() external;\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account from this contract and any linked extra reward\\n     * contracts.\\n     * @dev If claimExtras is true, also claims all rewards from linked extra reward contracts.\\n     * @param account The address of the account to claim rewards for.\\n     * @param claimExtras If true, claims rewards from linked extra reward contracts.\\n     */\\n    function getReward(address account, bool claimExtras) external;\\n\\n    /**\\n     * @notice Number of extra rewards currently registered\\n     */\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the rewarder at the specified index\\n     */\\n    function getExtraRewarder(uint256 index) external view returns (IExtraRewarder);\\n\\n    /**\\n     * @notice Token that is tracked as the deposit token\\n     * @dev Rewards don't actually take possession of token\\n     */\\n    function stakeTracker() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"IERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/libs/LibAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary LibAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant CURVE_REGISTRY_ETH_ADDRESS_POINTER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    error MinLpAmountNotReached();\\n    error LpTokenAmountMismatch();\\n    error NoNonZeroAmountProvided();\\n    error InvalidBalanceChange();\\n\\n    // Utils\\n    function _approve(IERC20 token, address spender, uint256 amount) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance > 0) {\\n            token.safeDecreaseAllowance(spender, currentAllowance);\\n        }\\n        token.safeIncreaseAllowance(spender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategy/ILMPStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStrategy } from \\\"src/interfaces/strategy/IStrategy.sol\\\";\\n\\ninterface ILMPStrategy {\\n    /// @notice verify that a rebalance (swap between destinations) meets all the strategy constraints\\n    /// @dev Signature identical to IStrategy.verifyRebalance\\n    function verifyRebalance(\\n        IStrategy.RebalanceParams memory,\\n        IStrategy.SummaryStats memory\\n    ) external returns (bool, string memory message);\\n\\n    /// @notice called by the LMPVault when NAV is updated\\n    /// @dev can only be called by the strategy's registered LMPVault\\n    /// @param navPerShare The navPerShare to record\\n    function navUpdate(uint256 navPerShare) external;\\n\\n    /// @notice called by the LMPVault when a rebalance is completed\\n    /// @dev can only be called by the strategy's registered LMPVault\\n    /// @param rebalanceParams The parameters for the rebalance that was executed\\n    function rebalanceSuccessfullyExecuted(IStrategy.RebalanceParams memory rebalanceParams) external;\\n\\n    /// @notice called by the LMPVault during rebalance process\\n    /// @param rebalanceParams The parameters for the rebalance that was executed\\n    function getRebalanceOutSummaryStats(IStrategy.RebalanceParams memory rebalanceParams)\\n        external\\n        returns (IStrategy.SummaryStats memory outSummary);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IBaseRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IStakeTracking } from \\\"src/interfaces/rewarders/IStakeTracking.sol\\\";\\n\\ninterface IBaseRewarder {\\n    event RewardAdded(\\n        uint256 reward,\\n        uint256 rewardRate,\\n        uint256 lastUpdateBlock,\\n        uint256 periodInBlockFinish,\\n        uint256 historicalRewards\\n    );\\n    event UserRewardUpdated(\\n        address indexed user, uint256 amount, uint256 rewardPerTokenStored, uint256 lastUpdateBlock\\n    );\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event QueuedRewardsUpdated(uint256 startingQueuedRewards, uint256 startingNewRewards, uint256 queuedRewards);\\n    event AddedToWhitelist(address indexed wallet);\\n    event RemovedFromWhitelist(address indexed wallet);\\n\\n    event TokeLockDurationUpdated(uint256 newDuration);\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account\\n     */\\n    function getReward() external;\\n\\n    /**\\n     * @notice Stakes the specified amount of tokens for the specified account.\\n     * @param account The address of the account to stake tokens for.\\n     * @param amount The amount of tokens to stake.\\n     */\\n    function stake(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Calculate the earned rewards for an account.\\n     * @param account Address of the account.\\n     * @return The earned rewards for the given account.\\n     */\\n    function earned(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the rewards per token for the current block.\\n     * @dev The total amount of rewards available in the system is fixed, and it needs to be distributed among the users\\n     * based on their token balances and staking duration.\\n     * Rewards per token represent the amount of rewards that each token is entitled to receive at the current block.\\n     * The calculation takes into account the reward rate, the time duration since the last update,\\n     * and the total supply of tokens in the staking pool.\\n     * @return The updated rewards per token value for the current block.\\n     */\\n    function rewardPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current reward rate per block.\\n     * @return The current reward rate per block.\\n     */\\n    function rewardRate() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the current TOKE lock duration.\\n     * @return The current TOKE lock duration.\\n     */\\n    function tokeLockDuration() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the last block where rewards are applicable.\\n     * @return The last block number where rewards are applicable.\\n     */\\n    function lastBlockRewardApplicable() external view returns (uint256);\\n\\n    /**\\n     * @notice The total amount of tokens staked\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of tokens staked for the specified account\\n     * @param account The address of the account to get the balance of\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Queue new rewards to be distributed.\\n     * @param newRewards The amount of new rewards to be queued.\\n     */\\n    function queueNewRewards(uint256 newRewards) external;\\n\\n    /**\\n     * @notice Token distributed as rewards\\n     * @return reward token address\\n     */\\n    function rewardToken() external view returns (address);\\n\\n    /**\\n     * @notice Add an address to the whitelist.\\n     * @param wallet The address to be added to the whitelist.\\n     */\\n    function addToWhitelist(address wallet) external;\\n\\n    /**\\n     * @notice Remove an address from the whitelist.\\n     * @param wallet The address to be removed from the whitelist.\\n     */\\n    function removeFromWhitelist(address wallet) external;\\n\\n    /**\\n     * @notice Check if an address is whitelisted.\\n     * @param wallet The address to be checked.\\n     * @return bool indicating if the address is whitelisted.\\n     */\\n    function isWhitelisted(address wallet) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IExtraRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) 2023 Tokemak Ops Ltd. All rights reserved.\\npragma solidity 0.8.17;\\n\\nimport { IBaseRewarder } from \\\"./IBaseRewarder.sol\\\";\\n\\ninterface IExtraRewarder is IBaseRewarder {\\n    /**\\n     * @notice Withdraws the specified amount of tokens from the vault for the specified account.\\n     * @param account The address of the account to withdraw tokens for.\\n     * @param amount The amount of tokens to withdraw.\\n     */\\n    function withdraw(address account, uint256 amount) external;\\n\\n    /**\\n     * @notice Claims and transfers all rewards for the specified account from this contract.\\n     * @param account The address of the account to claim rewards for.\\n     */\\n    function getReward(address account) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/rewarders/IStakeTracking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\ninterface IStakeTracking {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"erc4626-tests/=lib/erc4626-tests/\",\r\n      \"prb-math/=lib/prb-math/\",\r\n      \"usingtellor/=lib/usingtellor/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"_systemRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSnapshotStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSnapshotTaken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UndefinedAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priorFeeApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeApr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unfilteredFeeApr\",\"type\":\"uint256\"}],\"name\":\"DexSnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CREDITS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NON_TRIVIAL_ANNUAL_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_STALE_CHECK\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNAPSHOT_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value2\",\"type\":\"uint256\"}],\"name\":\"_differsByMoreThanFivePercent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessController\",\"outputs\":[{\"internalType\":\"contract IAccessController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastSnapshotTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"reservesInEth\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"safeTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"annualizedRewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint40[]\",\"name\":\"periodFinishForRewards\",\"type\":\"uint40[]\"},{\"internalType\":\"uint8\",\"name\":\"incentiveCredits\",\"type\":\"uint8\"}],\"internalType\":\"struct IDexLSTStats.StakingIncentiveStats\",\"name\":\"stakingIncentiveStats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastSnapshotTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseApr\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"discount\",\"type\":\"int256\"},{\"internalType\":\"uint24[10]\",\"name\":\"discountHistory\",\"type\":\"uint24[10]\"},{\"internalType\":\"uint40[5]\",\"name\":\"discountTimestampByPercent\",\"type\":\"uint40[5]\"},{\"internalType\":\"uint256[]\",\"name\":\"slashingCosts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"slashingTimestamps\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ILSTStats.LSTStatsData[]\",\"name\":\"lstStatsData\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDexLSTStats.DexLSTStatsData\",\"name\":\"dexLSTStatsData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayInitTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAprId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_annualizedReward\",\"type\":\"uint256\"}],\"name\":\"getPlatformTokenMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveCredits\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIncentiveTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSnapshotRewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSnapshotRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastSnapshotTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSnapshotTotalAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"extraRewarder\",\"type\":\"address\"}],\"name\":\"resolveRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IBaseRewardPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeTotalSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyerStats\",\"outputs\":[{\"internalType\":\"contract IDexLSTStats\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConvexCalculator", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000406d2d96871f798fcf54d5969f69f55f803eea4", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}