{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/lotterypot2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract Lottery is ReentrancyGuard {\r\n    address public owner;\r\n    address[] public participants;\r\n    mapping(address => bool) public hasParticipated;\r\n    address public winner; // State variable to store winner's address\r\n    uint256 public ticketPrice = 0.1 ether;\r\n    uint256 public maxTickets = 10;\r\n    uint256 public lotteryEndTime;\r\n    bool public lotteryEnded = false;\r\n\r\n    // Events\r\n    event TicketPurchased(address indexed participant);\r\n    event LotteryWon(address indexed winner, uint256 prize);\r\n    event PrizeWithdrawn(address indexed winner, uint256 prize);\r\n    event LotteryReset();\r\n\r\n    constructor(uint256 _duration) {\r\n        owner = msg.sender;\r\n        lotteryEndTime = block.timestamp + _duration;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function buyTicket() external payable {\r\n        require(!lotteryEnded, \"Lottery has ended\");\r\n        require(msg.value == ticketPrice, \"Incorrect Ether sent\");\r\n        require(participants.length < maxTickets, \"Maximum tickets sold\");\r\n        require(!hasParticipated[msg.sender], \"You have already participated\");\r\n\r\n        participants.push(msg.sender);\r\n        hasParticipated[msg.sender] = true;\r\n\r\n        emit TicketPurchased(msg.sender);\r\n        \r\n        if (participants.length == maxTickets) {\r\n            endLottery();\r\n        }\r\n    }\r\n\r\n    function endLottery() internal {\r\n        require(!lotteryEnded, \"Lottery already ended\");\r\n        require(block.timestamp >= lotteryEndTime || participants.length == maxTickets, \"Lottery not yet over\");\r\n\r\n        lotteryEnded = true;\r\n        uint256 randomIndex = randomMod(participants.length);\r\n        winner = participants[randomIndex]; // Set the winner's address\r\n        \r\n        uint256 prize = (address(this).balance * 9) / 10;\r\n        payable(winner).transfer(prize); // Automatically send prize to winner\r\n        \r\n        // Transfer remaining balance to the owner\r\n        payable(owner).transfer(address(this).balance);\r\n\r\n        emit LotteryWon(winner, prize);\r\n    }\r\n\r\n    function randomMod(uint _modulus) internal view returns(uint256) {\r\n        // Be aware that this is not a secure form of randomness and is vulnerable to attack in a production environment.\r\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, participants))) % _modulus;\r\n    }\r\n\r\n    function manualEndLottery() external onlyOwner {\r\n        endLottery();\r\n    }\r\n\r\n    function resetLottery(uint256 _duration) external onlyOwner {\r\n        require(lotteryEnded, \"Previous lottery hasn't ended yet\");\r\n\r\n        // Resetting state\r\n        for (uint i = 0; i < participants.length; i++) {\r\n            hasParticipated[participants[i]] = false;\r\n        }\r\n        participants = new address[](0);\r\n        lotteryEnded = false;\r\n        lotteryEndTime = block.timestamp + _duration;\r\n        winner = address(0); // Reset the winner address\r\n\r\n        emit LotteryReset();\r\n    }\r\n\r\n    function getWinner() public view returns (address) {\r\n        require(lotteryEnded, \"Lottery has not ended yet\");\r\n        return winner;\r\n    }\r\n\r\n    // Removed withdrawPrize() as winnings are now sent automatically\r\n\r\n    // Additional getter function if you want to return all participants\r\n    function getParticipants() public view returns (address[] memory) {\r\n        return participants;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LotteryReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"LotteryWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"PrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasParticipated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualEndLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"resetLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Lottery", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000002a300", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a0aae9b1046226e3cf8d86bd98a4670323202f4263288d172c38766a7077037d"}