{"SourceCode": "#pragma version 0.3.10\r\n#pragma optimize gas\r\n#pragma evm-version shanghai\r\n\"\"\"\r\n@title Curve Lending Bot Factory\r\n@license Apache 2.0\r\n@author Volume.finance\r\n\"\"\"\r\nstruct FeeData:\r\n    refund_wallet: address\r\n    gas_fee: uint256\r\n    service_fee_collector: address\r\n    service_fee: uint256\r\n\r\nstruct SwapInfo:\r\n    route: address[9]\r\n    swap_params: uint256[3][4]\r\n    amount: uint256\r\n    pools: address[4]\r\n    expected: uint256\r\n\r\ninterface Bot:\r\n    def add_collateral(swap_infos: DynArray[SwapInfo, MAX_SIZE], collateral: address, lend_amount: uint256): nonpayable\r\n    def repay(swap_infos: DynArray[SwapInfo, MAX_SIZE], collateral: address, repay_amount: uint256): nonpayable\r\n    def health(collateral: address) -> int256: view\r\n    def state(collateral: address) -> uint256[4]: view\r\n    def loan_exists(collateral: address) -> bool: view\r\n\r\ninterface ERC20:\r\n    def balanceOf(_from: address) -> uint256: view\r\n\r\ninterface ControllerFactory:\r\n    def WETH() -> address: view\r\n    def stablecoin() -> address: view\r\n\r\nMAX_SIZE: constant(uint256) = 8\r\nDENOMINATOR: constant(uint256) = 10000\r\nWETH: immutable(address)\r\ncrvUSD: immutable(address)\r\nCONTROLLER_FACTORY: immutable(address)\r\nROUTER: immutable(address)\r\nblueprint: public(address)\r\ncompass: public(address)\r\nbot_to_owner: public(HashMap[address, address])\r\nowner_to_bot: public(HashMap[address, address])\r\npaloma: public(bytes32)\r\nfee_data: public(FeeData)\r\n\r\nevent UpdateBlueprint:\r\n    old_blueprint: address\r\n    new_blueprint: address\r\n\r\nevent UpdateCompass:\r\n    old_compass: address\r\n    new_compass: address\r\n\r\nevent DeployCurveLendingBot:\r\n    bot: address\r\n    owner: address\r\n\r\n# Bot <-> Pool\r\nevent AddCollateral:\r\n    bot: address\r\n    collateral: address\r\n    collateral_amount: uint256\r\n\r\nevent RemoveCollateral:\r\n    bot: address\r\n    collateral: address\r\n    collateral_amount: uint256\r\n\r\nevent Borrow:\r\n    bot: address\r\n    collateral: address\r\n    amount: uint256\r\n\r\nevent Repay:\r\n    bot: address\r\n    collateral: address\r\n    amount: uint256\r\n\r\n# User <-> Bot\r\nevent DepositCollateral:\r\n    bot: address\r\n    collateral: address\r\n    collateral_amount: uint256\r\n\r\nevent WithdrawCollateral:\r\n    bot: address\r\n    collateral: address\r\n    collateral_amount: uint256\r\n\r\nevent OutputStablecoin:\r\n    bot: address\r\n    amount: uint256\r\n\r\nevent InputStablecoin:\r\n    bot: address\r\n    amount: uint256\r\n\r\nevent FeePaid:\r\n    bot: address\r\n    collateral: address\r\n    amount: uint256\r\n\r\nevent GasPaid:\r\n    bot: address\r\n    amount: uint256\r\n\r\nevent BotStarted:\r\n    bot: address\r\n    collateral: address\r\n    health_threshold: int256\r\n    leverage: uint256\r\n    expire: uint256\r\n    repayable: bool\r\n\r\nevent BotCanceled:\r\n    bot: address\r\n    collateral: address\r\n\r\nevent UpdateRefundWallet:\r\n    old_refund_wallet: address\r\n    new_refund_wallet: address\r\n\r\nevent SetPaloma:\r\n    paloma: bytes32\r\n\r\nevent UpdateGasFee:\r\n    old_gas_fee: uint256\r\n    new_gas_fee: uint256\r\n\r\nevent UpdateServiceFeeCollector:\r\n    old_service_fee_collector: address\r\n    new_service_fee_collector: address\r\n\r\nevent UpdateServiceFee:\r\n    old_service_fee: uint256\r\n    new_service_fee: uint256\r\n\r\n@external\r\ndef __init__(_blueprint: address, _compass: address, controller_factory: address, _refund_wallet: address, _gas_fee: uint256, _service_fee_collector: address, _service_fee: uint256, router: address):\r\n    self.blueprint = _blueprint\r\n    self.compass = _compass\r\n    self.fee_data = FeeData({\r\n        refund_wallet: _refund_wallet,\r\n        gas_fee: _gas_fee,\r\n        service_fee_collector: _service_fee_collector,\r\n        service_fee: _service_fee\r\n    })\r\n    CONTROLLER_FACTORY = controller_factory\r\n    WETH = ControllerFactory(controller_factory).WETH()\r\n    ROUTER = router\r\n    crvUSD = ControllerFactory(controller_factory).stablecoin()\r\n    log UpdateCompass(empty(address), _compass)\r\n    log UpdateBlueprint(empty(address), _blueprint)\r\n    log UpdateRefundWallet(empty(address), _refund_wallet)\r\n    log UpdateGasFee(empty(uint256), _gas_fee)\r\n    log UpdateServiceFeeCollector(empty(address), _service_fee_collector)\r\n    log UpdateServiceFee(empty(uint256), _service_fee)\r\n\r\n@external\r\ndef deploy_curve_lending_bot():\r\n    assert self.owner_to_bot[msg.sender] == empty(address), \"Already user has bot\"\r\n    bot: address = create_from_blueprint(self.blueprint, CONTROLLER_FACTORY, WETH, crvUSD, msg.sender, ROUTER, code_offset=3)\r\n    self.bot_to_owner[bot] = msg.sender\r\n    self.owner_to_bot[msg.sender] = bot\r\n    log DeployCurveLendingBot(bot, msg.sender)\r\n\r\n@external\r\ndef create_loan_event(collateral: address, collateral_amount: uint256, lend_amount: uint256, debt: uint256, withdraw_amount: uint256, health_threshold: int256, leverage: uint256, expire: uint256, repayable: bool):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    log DepositCollateral(msg.sender, collateral, collateral_amount)\r\n    log AddCollateral(msg.sender, collateral, lend_amount)\r\n    log Borrow(msg.sender, collateral, debt)\r\n    log OutputStablecoin(msg.sender, withdraw_amount)\r\n    log BotStarted(msg.sender, collateral, health_threshold, leverage, expire, repayable)\r\n\r\n@external\r\ndef cancel_event(collateral: address, collateral_amount: uint256, withdraw_amount: uint256, input_amount: uint256, repay_amount: uint256):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    log InputStablecoin(msg.sender, input_amount)\r\n    log Repay(msg.sender, collateral, repay_amount)\r\n    log RemoveCollateral(msg.sender, collateral, collateral_amount)\r\n    log WithdrawCollateral(msg.sender, collateral, withdraw_amount)\r\n    log BotCanceled(msg.sender, collateral)\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_collateral(bots: DynArray[address, MAX_SIZE], collateral: DynArray[address, MAX_SIZE], lend_amount: DynArray[uint256, MAX_SIZE]):\r\n    assert msg.sender == self.compass, \"Not compass\"\r\n    _len: uint256 = len(bots)\r\n    assert _len == len(collateral) and _len == len(lend_amount), \"Validation error\"\r\n    payload_len: uint256 = unsafe_add(unsafe_mul(unsafe_add(_len, 2), 96), 36)\r\n    assert len(msg.data) == payload_len, \"Invalid payload\"\r\n    assert self.paloma == convert(slice(msg.data, unsafe_sub(payload_len, 32), 32), bytes32), \"Invalid paloma\"\r\n    for i in range(MAX_SIZE):\r\n        if i >= _len:\r\n            break\r\n        assert self.bot_to_owner[bots[i]] != empty(address), \"Bot not exist\"\r\n        Bot(bots[i]).add_collateral([], collateral[i], lend_amount[i])\r\n        log AddCollateral(bots[i], collateral[i], lend_amount[i])\r\n        log GasPaid(bots[i], self.fee_data.gas_fee)\r\n\r\n@external\r\ndef add_collateral_event(collateral: address, collateral_amount: uint256, lend_amount: uint256):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    log DepositCollateral(msg.sender, collateral, collateral_amount)\r\n    log AddCollateral(msg.sender, collateral, lend_amount)\r\n\r\n@external\r\ndef borrow_more_event(collateral: address, lend_amount: uint256, withdraw_amount: uint256):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    log AddCollateral(msg.sender, collateral, lend_amount)\r\n    log Borrow(msg.sender, collateral, withdraw_amount)\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef repay(bots: DynArray[address, MAX_SIZE], collateral: DynArray[address, MAX_SIZE], repay_amount: DynArray[uint256, MAX_SIZE]):\r\n    assert msg.sender == self.compass, \"Not compass\"\r\n    _len: uint256 = len(bots)\r\n    assert _len == len(collateral) and _len == len(repay_amount), \"Validation error\"\r\n    payload_len: uint256 = unsafe_add(unsafe_mul(unsafe_add(_len, 2), 96), 36)\r\n    assert len(msg.data) == payload_len, \"Invalid payload\"\r\n    assert self.paloma == convert(slice(msg.data, unsafe_sub(payload_len, 32), 32), bytes32), \"Invalid paloma\"\r\n    for i in range(MAX_SIZE):\r\n        if i >= _len:\r\n            break\r\n        assert self.bot_to_owner[bots[i]] != empty(address), \"Bot not exist\"\r\n        Bot(bots[i]).repay([], collateral[i], repay_amount[i])\r\n        log GasPaid(bots[i], self.fee_data.gas_fee)\r\n\r\n@external\r\ndef repay_event(collateral: address, input_amount: uint256, repay_amount: uint256):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    log InputStablecoin(msg.sender, input_amount)\r\n    log Repay(msg.sender, collateral, repay_amount)\r\n\r\n@external\r\ndef remove_collateral_event(collateral: address, collateral_amount: uint256, withdraw_amount: uint256):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    log RemoveCollateral(msg.sender, collateral, collateral_amount)\r\n    log WithdrawCollateral(msg.sender, collateral, withdraw_amount)\r\n\r\n@external\r\ndef withdraw_event(collateral: address, withdraw_amount: uint256):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    if collateral == crvUSD:\r\n        log OutputStablecoin(msg.sender, withdraw_amount)\r\n    else:\r\n        log WithdrawCollateral(msg.sender, collateral, withdraw_amount)\r\n\r\n@external\r\ndef bot_start_event(collateral: address, health_threshold: int256, leverage: uint256, expire: uint256, repayable: bool):\r\n    assert self.bot_to_owner[msg.sender] != empty(address), \"Not bot\"\r\n    log BotStarted(msg.sender, collateral, health_threshold, leverage, expire, repayable)\r\n\r\n@external\r\n@view\r\ndef health(collateral: address, bot: address) -> int256:\r\n    return Bot(bot).health(collateral)\r\n\r\n@external\r\n@view\r\ndef loan_exists(collateral: address, bot: address) -> bool:\r\n    return Bot(bot).loan_exists(collateral)\r\n\r\n@external\r\n@view\r\ndef collateral_reserves(collateral: address, bot: address) -> uint256:\r\n    if collateral == WETH:\r\n        return bot.balance\r\n    else:\r\n        return ERC20(collateral).balanceOf(bot)\r\n\r\n@external\r\n@view\r\ndef state(collateral: address, bot: address) -> uint256[4]:\r\n    return Bot(bot).state(collateral)\r\n\r\n@external\r\ndef update_compass(new_compass: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    self.compass = new_compass\r\n    log UpdateCompass(msg.sender, new_compass)\r\n\r\n@external\r\ndef update_blueprint(new_blueprint: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_blueprint:address = self.blueprint\r\n    self.blueprint = new_blueprint\r\n    log UpdateCompass(old_blueprint, new_blueprint)\r\n\r\n@external\r\ndef set_paloma():\r\n    assert msg.sender == self.compass and self.paloma == empty(bytes32) and len(msg.data) == 36, \"Invalid\"\r\n    _paloma: bytes32 = convert(slice(msg.data, 4, 32), bytes32)\r\n    self.paloma = _paloma\r\n    log SetPaloma(_paloma)\r\n\r\n@external\r\ndef update_refund_wallet(new_refund_wallet: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_refund_wallet: address = self.fee_data.refund_wallet\r\n    self.fee_data.refund_wallet = new_refund_wallet\r\n    log UpdateRefundWallet(old_refund_wallet, new_refund_wallet)\r\n\r\n@external\r\ndef update_gas_fee(new_gas_fee: uint256):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_gas_fee: uint256 = self.fee_data.gas_fee\r\n    self.fee_data.gas_fee = new_gas_fee\r\n    log UpdateGasFee(old_gas_fee, new_gas_fee)\r\n\r\n@external\r\ndef update_service_fee_collector(new_service_fee_collector: address):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_service_fee_collector: address = self.fee_data.service_fee_collector\r\n    self.fee_data.service_fee_collector = new_service_fee_collector\r\n    log UpdateServiceFeeCollector(old_service_fee_collector, new_service_fee_collector)\r\n\r\n@external\r\ndef update_service_fee(new_service_fee: uint256):\r\n    assert msg.sender == self.compass and len(msg.data) == 68 and convert(slice(msg.data, 36, 32), bytes32) == self.paloma, \"Unauthorized\"\r\n    old_service_fee: uint256 = self.fee_data.service_fee\r\n    self.fee_data.service_fee = new_service_fee\r\n    log UpdateServiceFee(old_service_fee, new_service_fee)", "ABI": "[{\"name\":\"UpdateBlueprint\",\"inputs\":[{\"name\":\"old_blueprint\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_blueprint\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateCompass\",\"inputs\":[{\"name\":\"old_compass\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_compass\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"DeployCurveLendingBot\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddCollateral\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveCollateral\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Borrow\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Repay\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"DepositCollateral\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"WithdrawCollateral\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral_amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"OutputStablecoin\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"InputStablecoin\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"FeePaid\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"GasPaid\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"BotStarted\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false},{\"name\":\"health_threshold\",\"type\":\"int256\",\"indexed\":false},{\"name\":\"leverage\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"expire\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"repayable\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"BotCanceled\",\"inputs\":[{\"name\":\"bot\",\"type\":\"address\",\"indexed\":false},{\"name\":\"collateral\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateRefundWallet\",\"inputs\":[{\"name\":\"old_refund_wallet\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_refund_wallet\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetPaloma\",\"inputs\":[{\"name\":\"paloma\",\"type\":\"bytes32\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateGasFee\",\"inputs\":[{\"name\":\"old_gas_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_gas_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateServiceFeeCollector\",\"inputs\":[{\"name\":\"old_service_fee_collector\",\"type\":\"address\",\"indexed\":false},{\"name\":\"new_service_fee_collector\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateServiceFee\",\"inputs\":[{\"name\":\"old_service_fee\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_service_fee\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_blueprint\",\"type\":\"address\"},{\"name\":\"_compass\",\"type\":\"address\"},{\"name\":\"controller_factory\",\"type\":\"address\"},{\"name\":\"_refund_wallet\",\"type\":\"address\"},{\"name\":\"_gas_fee\",\"type\":\"uint256\"},{\"name\":\"_service_fee_collector\",\"type\":\"address\"},{\"name\":\"_service_fee\",\"type\":\"uint256\"},{\"name\":\"router\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_curve_lending_bot\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"create_loan_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"name\":\"lend_amount\",\"type\":\"uint256\"},{\"name\":\"debt\",\"type\":\"uint256\"},{\"name\":\"withdraw_amount\",\"type\":\"uint256\"},{\"name\":\"health_threshold\",\"type\":\"int256\"},{\"name\":\"leverage\",\"type\":\"uint256\"},{\"name\":\"expire\",\"type\":\"uint256\"},{\"name\":\"repayable\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cancel_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"name\":\"withdraw_amount\",\"type\":\"uint256\"},{\"name\":\"input_amount\",\"type\":\"uint256\"},{\"name\":\"repay_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_collateral\",\"inputs\":[{\"name\":\"bots\",\"type\":\"address[]\"},{\"name\":\"collateral\",\"type\":\"address[]\"},{\"name\":\"lend_amount\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_collateral_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"name\":\"lend_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"borrow_more_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"lend_amount\",\"type\":\"uint256\"},{\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repay\",\"inputs\":[{\"name\":\"bots\",\"type\":\"address[]\"},{\"name\":\"collateral\",\"type\":\"address[]\"},{\"name\":\"repay_amount\",\"type\":\"uint256[]\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"repay_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"input_amount\",\"type\":\"uint256\"},{\"name\":\"repay_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_collateral_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bot_start_event\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"health_threshold\",\"type\":\"int256\"},{\"name\":\"leverage\",\"type\":\"uint256\"},{\"name\":\"expire\",\"type\":\"uint256\"},{\"name\":\"repayable\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"health\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"bot\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"loan_exists\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"bot\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"collateral_reserves\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"bot\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"state\",\"inputs\":[{\"name\":\"collateral\",\"type\":\"address\"},{\"name\":\"bot\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_compass\",\"inputs\":[{\"name\":\"new_compass\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_blueprint\",\"inputs\":[{\"name\":\"new_blueprint\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_paloma\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_refund_wallet\",\"inputs\":[{\"name\":\"new_refund_wallet\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_gas_fee\",\"inputs\":[{\"name\":\"new_gas_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_service_fee_collector\",\"inputs\":[{\"name\":\"new_service_fee_collector\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"update_service_fee\",\"inputs\":[{\"name\":\"new_service_fee\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"blueprint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"compass\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"bot_to_owner\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner_to_bot\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"paloma\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee_data\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"refund_wallet\",\"type\":\"address\"},{\"name\":\"gas_fee\",\"type\":\"uint256\"},{\"name\":\"service_fee_collector\",\"type\":\"address\"},{\"name\":\"service_fee\",\"type\":\"uint256\"}]}]}]", "ContractName": "Curve Lending Bot Factory", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "000000000000000000000000d926d2fc266724a92296dcffae1b0cf89be240bb000000000000000000000000a00cf3504ffacff301e4973e21b44c052d087157000000000000000000000000c9332fdcb1c491dcc683bae86fe3cb70360738bc0000000000000000000000006dc0a87638cd75cc700ccdb226c7ab6c054bc70b00000000000000000000000000000000000000000000000000354a6ba7a180000000000000000000000000007a16ff8270133f063aab6c9977183d9e72835428000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099a58482bd75cbab83b27ec03ca68ff489b5788f", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}