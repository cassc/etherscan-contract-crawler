{"SourceCode": "/*\r\n * Crypto stamp Collection Code and Prototype\r\n * Actual code to be used via EIP1167 proxy for Collections of ERC721 and ERC1155 assets,\r\n * for example digital-physical collectible postage stamps\r\n *\r\n * Developed by Capacity Blockchain Solutions GmbH <capacity.at>\r\n * for \u00d6sterreichische Post AG <post.at>\r\n */\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/OZ_ERC1155/IERC1155.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n    @title ERC-1155 Multi Token Standard basic interface\r\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n */\r\nabstract contract IERC1155 is IERC165 {\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256);\r\n\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view virtual returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address operator, bool approved) external virtual;\r\n\r\n    function isApprovedForAll(address account, address operator) external view virtual returns (bool);\r\n\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external virtual;\r\n\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external virtual;\r\n}\r\n\r\n// File: contracts/CollectionNotificationI.sol\r\n\r\n/*\r\nInterface for Collection notification contracts.\r\n*/\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface CollectionNotificationI is IERC165 {\r\n    /*\r\n     *     Calculate the interface ID for ERC 165:\r\n     *\r\n     *     bytes4(keccak256('onContractAdded(bool)')) == 0xdaf96bfb\r\n     *     bytes4(keccak256('onContractRemoved()')) == 0x4664c35c\r\n     *     bytes4(keccak256('onAssetAdded(address,uint256,uint8)')) == 0x60dec1cc\r\n     *     bytes4(keccak256('onAssetRemoved(address,uint256,uint8)')) == 0xb5ed6ea2\r\n     *\r\n     *     => 0xdaf96bfb ^ 0x4664c35c ^ 0x60dec1cc ^ 0xb5ed6ea2 == 0x49ae07c9\r\n     */\r\n\r\n    enum TokenType {\r\n        ERC721,\r\n        ERC1155\r\n    }\r\n\r\n    /**\r\n     * @notice Notify about being added as a notification contract on the Collection\r\n     * @dev The Collection smart contract calls this function when adding this contract\r\n     * as a notification contract. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onContractAdded.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the Collection contract address is always the message sender.\r\n     * @param initial This is being called in the initial constructor of the Collection\r\n     * @return bytes4 `bytes4(keccak256(\"onContractAdded(bool)\"))`\r\n     */\r\n    function onContractAdded(bool initial)\r\n    external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Notify about being removed as a notification contract on the Collection\r\n     * @dev The Collection smart contract calls this function when removing this contract\r\n     * as a notification contract. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onContractRemoved.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the Collection contract address is always the message sender.\r\n     * @return bytes4 `bytes4(keccak256(\"onContractRemoved()\"))`\r\n     */\r\n    function onContractRemoved()\r\n    external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Notify about adding an asset to the Collection\r\n     * @dev The Collection smart contract calls this function when adding any asset to\r\n     * its internal tracking of assets. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onAssetAdded.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the Collection contract address is always the message sender.\r\n     * @param tokenAddress The address of the token contract\r\n     * @param tokenId The token identifier which is being transferred\r\n     * @param tokenType The type of token this asset represents (can be ERC721 or ERC1155)\r\n     * @return bytes4 `bytes4(keccak256(\"onAssetAdded(address,uint256,uint8)\"))`\r\n     */\r\n    function onAssetAdded(address tokenAddress, uint256 tokenId, TokenType tokenType)\r\n    external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Notify about removing an asset from the Collection\r\n     * @dev The Collection smart contract calls this function when removing any asset from\r\n     * its internal tracking of assets. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onAssetAdded.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the Collection contract address is always the message sender.\r\n     * @param tokenAddress The address of the token contract\r\n     * @param tokenId The token identifier which is being transferred\r\n     * @param tokenType The type of token this asset represents (can be ERC721 or ERC1155)\r\n     * @return bytes4 `bytes4(keccak256(\"onAssetRemoved(address,uint256,uint8)\"))`\r\n     */\r\n    function onAssetRemoved(address tokenAddress, uint256 tokenId, TokenType tokenType)\r\n    external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transfered from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from`, `to` cannot be zero.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/CollectionsI.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Outward-facing interface of a Collections contract.\r\n */\r\ninterface CollectionsI is IERC721 {\r\n    event NewCollection(address indexed owner, address collectionAddress);\r\n\r\n    /**\r\n     * @dev Creates a new Collection.\r\n     */\r\n    function create(address _notificationContract,\r\n                    string calldata _ensName,\r\n                    string calldata _ensSubdomainName,\r\n                    address _ensSubdomainRegistrarAddress,\r\n                    address _ensReverseRegistrarAddress)\r\n    external;\r\n\r\n    /**\r\n     * @dev Create a collection for a different owner. Only callable by a create controller role.\r\n     */\r\n    function createFor(address payable _newOwner,\r\n                       address _notificationContract,\r\n                       string calldata _ensName,\r\n                       string calldata _ensSubdomainName,\r\n                       address _ensSubdomainRegistrarAddress,\r\n                       address _ensReverseRegistrarAddress)\r\n    external payable;\r\n\r\n    /**\r\n     * @dev Removes (burns) an empty Collection. Only the Collection contract itself can call this.\r\n     */\r\n    function burn(uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns if a Collection NFT exists for the specified `tokenId`.\r\n     */\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns whether the given spender can transfer a given `tokenId`.\r\n     */\r\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the Collection address for a token ID.\r\n     */\r\n    function collectionAddress(uint256 tokenId) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the token ID for a Collection address.\r\n     */\r\n    function tokenIdForCollection(address collectionAddr) external view returns (uint256 tokenId);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ENSSimpleRegistrarI.sol\r\n\r\n/*\r\n * Interface for simple ENS Registrar\r\n * Exposing a registerAddr() signature modeled after the sample at\r\n * https://docs.ens.domains/contract-developer-guide/writing-a-registrar\r\n * together with the setAddr() from the AddrResolver.\r\n */\r\npragma solidity ^0.6.0;\r\n\r\ninterface ENSSimpleRegistrarI {\r\n    function registerAddr(bytes32 label, address target) external;\r\n}\r\n\r\n// File: contracts/ENSReverseRegistrarI.sol\r\n\r\n/*\r\n * Interfaces for ENS Reverse Registrar\r\n * See https://github.com/ensdomains/ens/blob/master/contracts/ReverseRegistrar.sol for full impl\r\n * Also see https://github.com/wealdtech/wealdtech-solidity/blob/master/contracts/ens/ENSReverseRegister.sol\r\n *\r\n * Use this as follows (registryAddress is the address of the ENS registry to use):\r\n * -----\r\n * // This hex value is caclulated by namehash('addr.reverse')\r\n * bytes32 public constant ENS_ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\r\n * function registerReverseENS(address registryAddress, string memory calldata) external {\r\n *     require(registryAddress != address(0), \"need a valid registry\");\r\n *     address reverseRegistrarAddress = ENSRegistryOwnerI(registryAddress).owner(ENS_ADDR_REVERSE_NODE)\r\n *     require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * or\r\n * -----\r\n * function registerReverseENS(address reverseRegistrarAddress, string memory calldata) external {\r\n *    require(reverseRegistrarAddress != address(0), \"need a valid reverse registrar\");\r\n *     ENSReverseRegistrarI(reverseRegistrarAddress).setName(name);\r\n * }\r\n * -----\r\n * ENS deployments can be found at https://docs.ens.domains/ens-deployments\r\n * E.g. Etherscan can be used to look up that owner on those contracts.\r\n * namehash.hash(\"addr.reverse\") == \"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\"\r\n * Ropsten: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c\"\r\n * Mainnet: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x084b1c3C81545d370f3634392De611CaaBFf8148\"\r\n */\r\npragma solidity ^0.6.0;\r\n\r\ninterface ENSRegistryOwnerI {\r\n    function owner(bytes32 node) external view returns (address);\r\n}\r\n\r\ninterface ENSReverseRegistrarI {\r\n    function setName(string calldata name) external returns (bytes32 node);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\nabstract contract IERC721Receiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\r\n     * otherwise the caller will revert the transaction. The selector to be\r\n     * returned can be obtained as `this.onERC721Received.selector`. This\r\n     * function MAY throw to revert and reject the transfer.\r\n     * Note: the ERC721 contract address is always the message sender.\r\n     * @param operator The address which called `safeTransferFrom` function\r\n     * @param from The address which previously owned the token\r\n     * @param tokenId The NFT identifier which is being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\r\n    public virtual returns (bytes4);\r\n}\r\n\r\n// File: contracts/OZ_ERC1155/IERC1155Receiver.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n    @title ERC-1155 Multi Token Receiver Interface\r\n    @dev See https://eips.ethereum.org/EIPS/eip-1155\r\n*/\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// File: contracts/CollectionI.sol\r\n\r\n/*\r\nInterface for a single Collection, which is a very lightweight contract that can be the owner of ERC721 tokens.\r\n*/\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n// Convert to interface once https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2113 is solved.\r\nabstract contract CollectionI is IERC165, IERC721Receiver, IERC1155Receiver  {\r\n\r\n    /**\r\n     * @dev True is this is the prototype, false if this is an active (clone/proxy) collection contract.\r\n     */\r\n    bool public isPrototype;\r\n\r\n    /**\r\n     * @dev The linked Collections factory (the ERC721 contract).\r\n     */\r\n    CollectionsI public collections;\r\n\r\n    /**\r\n     * @dev The linked notification contract (e.g. achievements).\r\n     */\r\n    address public notificationContract;\r\n\r\n    /**\r\n     * @dev Initializes a new Collection. Needs to be called by the Collections factory.\r\n     */\r\n    function initialRegister(address _notificationContract,\r\n                             string calldata _ensName,\r\n                             string calldata _ensSubdomainName,\r\n                             address _ensSubdomainRegistrarAddress,\r\n                             address _ensReverseRegistrarAddress)\r\n    external virtual;\r\n\r\n    /**\r\n     * @dev Get collection owner from ERC 721 parent (Collections factory).\r\n     */\r\n    function ownerAddress() external view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Determine if the Collection owns a specific asset.\r\n     */\r\n    function ownsAsset(address _tokenAddress, uint256 _tokenId) external view virtual returns(bool);\r\n\r\n    /**\r\n     * @dev Get count of owned assets.\r\n     */\r\n    function ownedAssetsCount() external view virtual returns (uint256);\r\n\r\n    /**\r\n     * @dev Make sure ownership of a certain asset is recorded correctly (added if the collection owns it or removed if it doesn't).\r\n     */\r\n    function syncAssetOwnership(address _tokenAddress, uint256 _tokenId) external virtual;\r\n\r\n    /**\r\n     * @dev Transfer an owned asset to a new owner (for ERC1155, a single item of that asset).\r\n     */\r\n    function safeTransferTo(address _tokenAddress, uint256 _tokenId, address _to) external virtual;\r\n\r\n    /**\r\n     * @dev Transfer a certain amount of an owned asset to a new owner (for ERC721, _value is ignored).\r\n     */\r\n    function safeTransferTo(address _tokenAddress, uint256 _tokenId, address _to, uint256 _value) external virtual;\r\n\r\n    /**\r\n     * @dev Destroy and burn an empty Collection. Can only be called by owner and only on empty collections.\r\n     */\r\n    function destroy() external virtual;\r\n\r\n    /**\r\n     * @dev Forward calls to external contracts. Can only be called by owner.\r\n     * Given a contract address and an already-encoded payload (with a function call etc.),\r\n     * we call that contract with this payload, e.g. to trigger actions in the name of the collection.\r\n     */\r\n    function externalCall(address payable _remoteAddress, bytes calldata _callPayload) external virtual payable;\r\n\r\n    /**\r\n     * @dev Register ENS name. Can only be called by owner.\r\n     */\r\n    function registerENS(string calldata _name, address _registrarAddress) external virtual;\r\n\r\n    /**\r\n     * @dev Register Reverse ENS name. Can only be called by owner.\r\n     */\r\n    function registerReverseENS(address _reverseRegistrarAddress, string calldata _name) external virtual;\r\n}\r\n\r\n// File: contracts/Collection.sol\r\n\r\n/*\r\nSingle Collection, which is a very lightweight contract that can be the owner of ERC721 tokens.\r\n*/\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Collection is CollectionI  {\r\n    using SafeMath for uint256;\r\n\r\n    // See ERC165.sol, ERC721.sol, ERC1155.sol, and CollectionNotificationI.sol\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\r\n    bytes4 private constant _INTERFACE_ID_ERC1155RECEIVER = 0x4e2312e0;\r\n    bytes4 private constant _INTERFACE_ID_COLLECTION_NOTIFICATION = 0x49ae07c9;\r\n\r\n    struct AssetInfo {\r\n        address tokenAddress;\r\n        uint256 tokenId;\r\n        CollectionNotificationI.TokenType tokenType;\r\n    }\r\n\r\n    AssetInfo[] public ownedAssets;\r\n    mapping(bytes32 => uint256) public ownedAssetIndex; // for looking up an asset\r\n\r\n    event NotificationContractTransferred(address indexed previousNotificationContract, address indexed newNotificationContract);\r\n    event AssetAdded(address tokenAddress, uint256 tokenId);\r\n    event AssetRemoved(address tokenAddress, uint256 tokenId);\r\n    event CollectionDestroyed(address operator);\r\n    // TestTracker events - never emitted in this contract but helpful for running our tests.\r\n    event SeenContractAdded(bool initial);\r\n    event SeenContractRemoved();\r\n    event SeenAssetAdded(address tokenAddress, uint256 tokenId, CollectionNotificationI.TokenType tokenType);\r\n    event SeenAssetRemoved(address tokenAddress, uint256 tokenId, CollectionNotificationI.TokenType tokenType);\r\n\r\n    modifier onlyOwner {\r\n        require(!isPrototype && msg.sender == ownerAddress(), \"Only Collection owner or zero allowed.\");\r\n        _;\r\n    }\r\n\r\n    modifier requireActive {\r\n        require(!isPrototype, \"Needs an active contract, not the prototype.\");\r\n        _;\r\n    }\r\n\r\n    constructor()\r\n    public {\r\n       // The initially deployed contract is just a prototype and code holder.\r\n        // Clones will proxy their commends to this one and actually work.\r\n        isPrototype = true;\r\n    }\r\n\r\n    function initialRegister(address _notificationContract,\r\n                             string calldata _ensName,\r\n                             string calldata _ensSubdomainName,\r\n                             address _ensSubdomainRegistrarAddress,\r\n                             address _ensReverseRegistrarAddress)\r\n    external override\r\n    requireActive\r\n    {\r\n        // Make sure that this function has not been called on this contract yet.\r\n        require(address(collections) == address(0), \"Cannot be initialized twice.\");\r\n        // Make sure that caller is an ERC721 contract itself.\r\n        collections = CollectionsI(msg.sender);\r\n        require(collections.supportsInterface(_INTERFACE_ID_ERC721), \"Creator needs to be ERC721!\");\r\n        if (_notificationContract != address(0)) {\r\n            _transferNotificationContract(_notificationContract, true);\r\n        }\r\n        // Register ENS name if we did get a registrar.\r\n        if (_ensSubdomainRegistrarAddress != address(0)) {\r\n            _registerENS(_ensName, _ensSubdomainRegistrarAddress);\r\n        }\r\n        // We also set a reverse record via https://docs.ens.domains/contract-api-reference/reverseregistrar#set-name which needs a full name.\r\n        if (_ensReverseRegistrarAddress != address(0)) {\r\n            _registerReverseENS(_ensReverseRegistrarAddress, string(abi.encodePacked(_ensName, \".\", _ensSubdomainName)));\r\n        }\r\n    }\r\n\r\n    /*** ERC165 ***/\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\r\n        // We know what interfaces the collection supports, so hardcode the handling.\r\n        if (interfaceId == _INTERFACE_ID_ERC165) { return true; }\r\n        else if (interfaceId == _ERC721_RECEIVED) { return true; }\r\n        else if (interfaceId == _INTERFACE_ID_ERC1155RECEIVER) { return true; }\r\n        return false;\r\n    }\r\n\r\n    /*** Enable adjusting variables after deployment ***/\r\n\r\n    function transferNotificationContract(address _newNotificationContract)\r\n    public\r\n    onlyOwner\r\n    {\r\n        _transferNotificationContract(_newNotificationContract, false);\r\n    }\r\n\r\n    function _transferNotificationContract(address _newNotificationContract, bool _initial)\r\n    private\r\n    {\r\n        if (notificationContract != _newNotificationContract) {\r\n            emit NotificationContractTransferred(notificationContract, _newNotificationContract);\r\n            if (notificationContract != address(0)) {\r\n                require(\r\n                    CollectionNotificationI(notificationContract).onContractRemoved() ==\r\n                        CollectionNotificationI(notificationContract).onContractRemoved.selector,\r\n                    \"onContractRemoved failure\"\r\n                );\r\n            }\r\n            notificationContract = _newNotificationContract;\r\n            if (notificationContract != address(0)) {\r\n                require(IERC165(notificationContract).supportsInterface(_INTERFACE_ID_COLLECTION_NOTIFICATION),\r\n                        \"Need to implement the actual collection notification interface!\");\r\n                require(\r\n                    CollectionNotificationI(notificationContract).onContractAdded(_initial) ==\r\n                        CollectionNotificationI(notificationContract).onContractAdded.selector,\r\n                    \"onContractAdded failure\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /*** Deal with ERC721 and ERC1155 tokens we receive ***/\r\n\r\n    // Override ERC721Receiver to record receiving of ERC721 tokens.\r\n    // Also, comment out all params that are in the interface but not actually used, to quiet compiler warnings.\r\n    function onERC721Received(address /*_operator*/, address /*_from*/, uint256 _tokenId, bytes memory /*_data*/)\r\n    public override\r\n    requireActive\r\n    returns (bytes4)\r\n    {\r\n        address _tokenAddress = msg.sender;\r\n        // Make sure whoever called this plays nice, check for token being an ERC721 contract.\r\n        require(IERC165(_tokenAddress).supportsInterface(_INTERFACE_ID_ERC721), \"onERC721Received caller needs to implement ERC721!\");\r\n        // If we think we own this asset already, we don't need to add it, but this is still weird and should not happen.\r\n        if (!ownsAsset(_tokenAddress, _tokenId)) {\r\n            _addtoAssets(_tokenAddress, _tokenId, CollectionNotificationI.TokenType.ERC721);\r\n        }\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(address /*_operator*/, address /*_from*/, uint256 _id, uint256 /*_value*/, bytes calldata /*_data*/)\r\n    external override\r\n    requireActive\r\n    returns(bytes4)\r\n    {\r\n        address _tokenAddress = msg.sender;\r\n        // Make sure whoever called this plays nice, check for token being an ERC1155 contract.\r\n        require(IERC165(_tokenAddress).supportsInterface(_INTERFACE_ID_ERC1155), \"onERC1155Received caller needs to implement ERC1155!\");\r\n        // If we think we own this asset already, we don't need to add it. On ERC115 this can happen easily.\r\n        if (!ownsAsset(_tokenAddress, _id)) {\r\n            _addtoAssets(_tokenAddress, _id, CollectionNotificationI.TokenType.ERC1155);\r\n        }\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address /*_operator*/, address /*_from*/, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata /*_data*/)\r\n    external override\r\n    requireActive\r\n    returns(bytes4)\r\n    {\r\n        address _tokenAddress = msg.sender;\r\n        // Make sure whoever called this plays nice, check for token being an ERC1155 contract.\r\n        require(IERC165(_tokenAddress).supportsInterface(_INTERFACE_ID_ERC1155), \"onERC1155BatchReceived caller needs to implement ERC1155!\");\r\n        uint256 batchcount = _ids.length;\r\n        require(batchcount == _values.length, \"Both ids and values need to be the same length.\");\r\n        for (uint256 i = 0; i < batchcount; i++) {\r\n          if (!ownsAsset(_tokenAddress, _ids[i])) {\r\n              _addtoAssets(_tokenAddress, _ids[i], CollectionNotificationI.TokenType.ERC1155);\r\n          }\r\n        }\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    /*** Special Collection functionality ***/\r\n\r\n    // Get collection owner from ERC 721 parent (Collections factory)\r\n    function ownerAddress()\r\n    public view override\r\n    requireActive\r\n    returns (address)\r\n    {\r\n        return collections.ownerOf(uint256(address(this)));\r\n    }\r\n\r\n    function ownsAsset(address _tokenAddress, uint256 _tokenId)\r\n    public view override\r\n    requireActive\r\n    returns(bool)\r\n    {\r\n        // Check if we do have this in our owned asset data.\r\n        uint256 probableIndex = lookupIndex(_tokenAddress, _tokenId);\r\n        if (probableIndex >= ownedAssets.length ||\r\n            ownedAssets[probableIndex].tokenAddress != _tokenAddress ||\r\n            ownedAssets[probableIndex].tokenId != _tokenId) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function ownedAssetsCount()\r\n    public view override\r\n    requireActive\r\n    returns (uint256) {\r\n        return ownedAssets.length;\r\n    }\r\n\r\n    function syncAssetOwnership(address _tokenAddress, uint256 _tokenId)\r\n    public override\r\n    requireActive\r\n    {\r\n        // Check if we do have this in our owned asset data.\r\n        CollectionNotificationI.TokenType tokenType;\r\n        bool hasOwnership;\r\n        if (IERC165(_tokenAddress).supportsInterface(_INTERFACE_ID_ERC1155)) {\r\n            hasOwnership = (IERC1155(_tokenAddress).balanceOf(address(this), _tokenId) > 0);\r\n            tokenType = CollectionNotificationI.TokenType.ERC1155;\r\n        }\r\n        else if (IERC165(_tokenAddress).supportsInterface(_INTERFACE_ID_ERC721)) {\r\n            hasOwnership = (IERC721(_tokenAddress).ownerOf(_tokenId) == address(this));\r\n            tokenType = CollectionNotificationI.TokenType.ERC721;\r\n        }\r\n        else {\r\n            revert(\"Token address has to be either ERC721 or ERC1155!\");\r\n        }\r\n        bool isOwned = ownsAsset(_tokenAddress, _tokenId);\r\n        if (isOwned && !hasOwnership) {\r\n            // We think we own the asset but it moved on the contract, remove it.\r\n            _removeFromAssets(_tokenAddress, _tokenId, tokenType);\r\n        }\r\n        else if (!isOwned && hasOwnership) {\r\n            // The contract says we own it but we think we don't, add it.\r\n            _addtoAssets(_tokenAddress, _tokenId, tokenType);\r\n        }\r\n    }\r\n\r\n    // Internal helper to add item to assets - make sure we have tested for !ownsAsset before.\r\n    function _addtoAssets(address _tokenAddress, uint256 _tokenId, CollectionNotificationI.TokenType _tokenType)\r\n    internal\r\n    {\r\n        ownedAssets.push(AssetInfo(_tokenAddress, _tokenId, _tokenType));\r\n        uint256 newIndex = ownedAssets.length.sub(1);\r\n        ownedAssetIndex[getLookupHash(ownedAssets[newIndex])] = newIndex;\r\n        emit AssetAdded(_tokenAddress, _tokenId);\r\n\r\n        if (notificationContract != address(0)) {\r\n            require(\r\n                CollectionNotificationI(notificationContract).onAssetAdded(_tokenAddress, _tokenId, _tokenType) ==\r\n                    CollectionNotificationI(notificationContract).onAssetAdded.selector,\r\n                \"onAssetAdded failure\"\r\n            );\r\n        }\r\n    }\r\n\r\n    // Internal helper to remove item from assets - make sure we have tested for ownsAsset before.\r\n    function _removeFromAssets(address _tokenAddress, uint256 _tokenId, CollectionNotificationI.TokenType _tokenType)\r\n    internal\r\n    {\r\n        bytes32 lookupHash = getLookupHash(_tokenAddress, _tokenId);\r\n        uint256 currentIndex = ownedAssetIndex[lookupHash];\r\n        require(ownedAssets[currentIndex].tokenType == _tokenType, \"Mismatching token types!\");\r\n        uint256 lastIndex = ownedAssets.length.sub(1);\r\n        // When the asset to delete is the last one, the swap operation is unnecessary\r\n        if (currentIndex != lastIndex) {\r\n            AssetInfo storage lastAsset = ownedAssets[lastIndex];\r\n            ownedAssets[currentIndex] = lastAsset; // Move the last asset to the slot of the to-delete asset\r\n            ownedAssetIndex[getLookupHash(lastAsset)] = currentIndex; // Update the moved asset's index\r\n        }\r\n        // Deletes the contents at the last position of the array and re-sets the index.\r\n        ownedAssets.pop();\r\n        ownedAssetIndex[lookupHash] = 0;\r\n        emit AssetRemoved(_tokenAddress, _tokenId);\r\n\r\n        if (notificationContract != address(0)) {\r\n            require(\r\n                CollectionNotificationI(notificationContract).onAssetRemoved(_tokenAddress, _tokenId, _tokenType) ==\r\n                    CollectionNotificationI(notificationContract).onAssetRemoved.selector,\r\n                \"onAssetRemoved failure\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /*** Provide functions to transfer owned assets away ***/\r\n\r\n    function safeTransferTo(address _tokenAddress, uint256 _tokenId, address _to)\r\n    external override\r\n    {\r\n        // Called function checks if it's the owner or an allowed account calling this.\r\n        safeTransferTo(_tokenAddress, _tokenId, _to, 1);\r\n    }\r\n\r\n    function safeTransferTo(address _tokenAddress, uint256 _tokenId, address _to, uint256 _value)\r\n    public override\r\n    {\r\n        require(collections.isApprovedOrOwner(msg.sender, uint256(address(this))), \"Only an approved address or Collection owner allowed.\");\r\n        // In theory, we could enforce a syncAssetOwnership() here but we'd still need the require.\r\n        require(ownsAsset(_tokenAddress, _tokenId), \"We do not own this asset.\");\r\n        uint256 assetIndex = lookupIndex(_tokenAddress, _tokenId);\r\n        if (ownedAssets[assetIndex].tokenType == CollectionNotificationI.TokenType.ERC721) {\r\n            IERC721(_tokenAddress).safeTransferFrom(address(this), _to, _tokenId);\r\n            // _removeFromAssets calls onAssetRemoved() which will check we already do not own it any more.\r\n            _removeFromAssets(_tokenAddress, _tokenId, CollectionNotificationI.TokenType.ERC721);\r\n        }\r\n        else { // ERC1155\r\n            IERC1155 tokenContract = IERC1155(_tokenAddress);\r\n            tokenContract.safeTransferFrom(address(this), _to, _tokenId, _value, \"\");\r\n            // Only remove from assets if we now do not own any of this token after the transaction.\r\n            if (tokenContract.balanceOf(address(this), _tokenId) == 0) {\r\n                // _removeFromAssets calls onAssetRemoved() which will check we already do not own it any more.\r\n                _removeFromAssets(_tokenAddress, _tokenId, CollectionNotificationI.TokenType.ERC1155);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*** Internal helpers to calculate the hash to use for the lookup mapping. ***/\r\n\r\n    function getLookupHash(address _tokenAddress, uint256 _tokenId)\r\n    private pure\r\n    returns(bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_tokenAddress, _tokenId));\r\n    }\r\n\r\n    function getLookupHash(AssetInfo memory _assetInfo)\r\n    private pure\r\n    returns(bytes32)\r\n    {\r\n        return getLookupHash(_assetInfo.tokenAddress, _assetInfo.tokenId);\r\n    }\r\n\r\n    function lookupIndex(address _tokenAddress, uint256 _tokenId)\r\n    public view\r\n    returns(uint256)\r\n    {\r\n        return ownedAssetIndex[getLookupHash(_tokenAddress, _tokenId)];\r\n    }\r\n\r\n    /*** Destroy Collection ***/\r\n\r\n    // Destroys and burns an empty Collection.\r\n    function destroy()\r\n    external override\r\n    onlyOwner\r\n    {\r\n        require(ownedAssets.length == 0, \"Only empty collections can be destroyed.\");\r\n        address payable collectionOwner = payable(ownerAddress());\r\n        collections.burn(uint256(address(this)));\r\n        emit CollectionDestroyed(msg.sender);\r\n        selfdestruct(collectionOwner);\r\n    }\r\n\r\n    /*** Forward calls to external contracts ***/\r\n\r\n    // Given a contract address and an already-encoded payload (with a function call etc.),\r\n    // we call that contract with this payload, e.g. to trigger actions in the name of the collection.\r\n    function externalCall(address payable _remoteAddress, bytes calldata _callPayload)\r\n    external override payable\r\n    onlyOwner\r\n    {\r\n        // .call() forwards all available gas, we forward the sent ether explicitly.\r\n        (bool success, /*bytes memory data*/) = _remoteAddress.call{value: msg.value}(_callPayload);\r\n        if (!success) { revert(\"Error in remote call!\"); }\r\n    }\r\n\r\n    /*** ENS registration access ***/\r\n\r\n    // There is no standard for how to register a name with an ENS registrar.\r\n    // Examples are:\r\n    // .eth permanent registrar controller: https://docs.ens.domains/contract-api-reference/.eth-permanent-registrar/controller#register-name\r\n    // .test registrar: https://docs.ens.domains/contract-api-reference/testregistrar#register-a-domain\r\n    // Sample custom registrar: https://docs.ens.domains/contract-developer-guide/writing-a-registrar\r\n    // Either the plain name or the label has can be required to call the function for registration, see\r\n    // https://docs.ens.domains/contract-api-reference/name-processing for the description on name processing.\r\n    // The registrar usually ends up calling setSubnodeOwner(bytes32 node, bytes32 label, address owner),\r\n    // see https://github.com/ensdomains/ens/blob/master/contracts/ENS.sol for the ENS interface.\r\n    // Because of all this, the function *only* works with a registrar with the same register() signature as\r\n    // the sample custom FIFS registrar. Any more complicated registrations need to be done via externalCall().\r\n    function registerENS(string memory _name, address _registrarAddress)\r\n    public override\r\n    onlyOwner\r\n    {\r\n        _registerENS(_name, _registrarAddress);\r\n    }\r\n\r\n    function _registerENS(string memory _name, address _registrarAddress)\r\n    private\r\n    {\r\n        require(_registrarAddress != address(0), \"Need valid registrar.\");\r\n        bytes32 label = keccak256(bytes(_name));\r\n        ENSSimpleRegistrarI(_registrarAddress).registerAddr(label, address(this));\r\n    }\r\n\r\n    /*** Enable reverse ENS registration ***/\r\n\r\n    // Call this with the address of the reverse registrar for the respecitve network and the ENS name to register.\r\n    // The reverse registrar can be found as the owner of 'addr.reverse' in the ENS system.\r\n    // See https://docs.ens.domains/ens-deployments for address of ENS deployments, e.g. Etherscan can be used to look up that owner on those.\r\n    // namehash.hash(\"addr.reverse\") == \"0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2\"\r\n    // Ropsten: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x6F628b68b30Dc3c17f345c9dbBb1E483c2b7aE5c\"\r\n    // Mainnet: ens.owner(namehash.hash(\"addr.reverse\")) == \"0x084b1c3C81545d370f3634392De611CaaBFf8148\"\r\n    function registerReverseENS(address _reverseRegistrarAddress, string memory _name)\r\n    public override\r\n    onlyOwner\r\n    {\r\n        _registerReverseENS(_reverseRegistrarAddress, _name);\r\n    }\r\n\r\n    function _registerReverseENS(address _reverseRegistrarAddress, string memory _name)\r\n    private\r\n    {\r\n        require(_reverseRegistrarAddress != address(0), \"Need valid reverse registrar.\");\r\n        ENSReverseRegistrarI(_reverseRegistrarAddress).setName(_name);\r\n    }\r\n\r\n    /*** Make sure currency or NFT doesn't get stranded in this contract ***/\r\n\r\n    // If this contract gets a balance in some ERC20 contract after it's finished, then we can rescue it.\r\n    function rescueToken(address _foreignToken, address _to)\r\n    external\r\n    onlyOwner\r\n    {\r\n        IERC20 erc20Token = IERC20(_foreignToken);\r\n        erc20Token.transfer(_to, erc20Token.balanceOf(address(this)));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"CollectionDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNotificationContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNotificationContract\",\"type\":\"address\"}],\"name\":\"NotificationContractTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CollectionNotificationI.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"SeenAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CollectionNotificationI.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"SeenAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"initial\",\"type\":\"bool\"}],\"name\":\"SeenContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SeenContractRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"contract CollectionsI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_remoteAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callPayload\",\"type\":\"bytes\"}],\"name\":\"externalCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_notificationContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ensName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ensSubdomainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ensSubdomainRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensReverseRegistrarAddress\",\"type\":\"address\"}],\"name\":\"initialRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrototype\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lookupIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notificationContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ownedAssetIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum CollectionNotificationI.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownedAssetsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_registrarAddress\",\"type\":\"address\"}],\"name\":\"registerENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reverseRegistrarAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerReverseENS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foreignToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeTransferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"syncAssetOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newNotificationContract\",\"type\":\"address\"}],\"name\":\"transferNotificationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Collection", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a464fcdbed867a713eff945f52a512a1a1346e9872a4df2e6ffe0c85eeff7b39"}