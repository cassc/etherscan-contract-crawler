{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n\r\n    function _maxWalletSize() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n\r\ncontract AirdropContractV2 {\r\n\r\n    \r\n    using SafeMath for uint256;\r\n    address public deployer;\r\n    address public enqAdmin;\r\n    address public lushAddress;\r\n    mapping(address => uint256) public airdropAllocation;\r\n    bool isActive;\r\n    bool isContributionOpen;\r\n\r\n    uint public marketCap = 400 * 10**18;// 400 ETH initial market cap\r\n    uint public totalETHContribution;\r\n    uint public thisRoundETHContribution;\r\n    \r\n\r\n    constructor(address _enqAdmin) payable {\r\n        deployer = msg.sender;\r\n        enqAdmin = _enqAdmin;\r\n    }\r\n\r\n    /// @notice User calls this function to claim airdrop\r\n    function claimAirdrop() external{\r\n        require(isActive  == true, \"Not active yet\");\r\n        uint256 yourAirdropAlloc = airdropAllocation[msg.sender];\r\n        require(yourAirdropAlloc  > 0, \"Nothing to claim\");\r\n\r\n\r\n        airdropAllocation[msg.sender] = 0;\r\n        ERC20(lushAddress).transfer(msg.sender, yourAirdropAlloc);\r\n    }\r\n\r\n    function contribute() external payable{\r\n        require(isContributionOpen  == true, \"Contribution not open\");\r\n        uint contributionAmount = msg.value;\r\n        uint lushAmount = contributionAmount.mul(ERC20(lushAddress).totalSupply()).div(marketCap);\r\n        uint totalWalletAmount = lushAmount + ERC20(lushAddress).balanceOf(msg.sender);\r\n\r\n        uint maxThreshold = 150000000 * 10**18;\r\n        require(totalWalletAmount <  maxThreshold, \"Reached Max Wallet Threshold\");\r\n\r\n        thisRoundETHContribution = thisRoundETHContribution.add(contributionAmount);\r\n        require(thisRoundETHContribution <= marketCap.div(20), \"No more allocation\");\r\n        ERC20(lushAddress).transfer(msg.sender, lushAmount);\r\n    }\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////Admin Functions////////////////////////////////////////////////\r\n\r\n    /// @notice Upload EnqAI wallet balances\r\n    /// @notice Can split entire list of holders and call this function multiple times (since holder count is large)\r\n    /// @param walletAddresses Array of wallets\r\n    /// @param walletAmounts EnqAI balances corresponding to each wallet - MAKE SURE THIS DATA IS IN THE SAME ORDER AS walletAddresses\r\n    function uploadEnqHolderData(address[] memory walletAddresses, uint256[] memory walletAmounts) external{\r\n        require(msg.sender  == enqAdmin, \"No permission\");\r\n        require(isActive  == false, \"Can only upload balances prior to start of activation\");\r\n\r\n\r\n        for (uint8 i = 0; i < walletAddresses.length; i++) {\r\n            airdropAllocation[walletAddresses[i]] = walletAmounts[i];\r\n        }\r\n    }\r\n\r\n\r\n    /// @notice Execute this function after finished calling uploadEnqHolderData\r\n    function activateAirdrop(address _lushAddress) external{\r\n        require(msg.sender  == deployer, \"No permission\");\r\n        isActive = true;\r\n        isContributionOpen = true;\r\n        lushAddress = _lushAddress;\r\n    }\r\n\r\n    function renewContribution(uint _newMarketCap) external{\r\n        require(msg.sender  == deployer, \"No permission\");\r\n        require(_newMarketCap  > marketCap, \"New market cap should be larger\");\r\n        uint thisRoundContributed = thisRoundETHContribution;\r\n        totalETHContribution = totalETHContribution + thisRoundContributed;\r\n        thisRoundETHContribution = 0;\r\n        marketCap = _newMarketCap;\r\n    }\r\n\r\n    function updateIsContributionOpen(bool _isOpen) external {\r\n        require(msg.sender  == deployer, \"No permission\");\r\n        isContributionOpen = _isOpen;\r\n    }\r\n\r\n    function extractETH() external {\r\n        require(msg.sender  == deployer, \"No permission\");\r\n        if(address(this).balance > 0){\r\n            payable(deployer).transfer(address(this).balance);\r\n        }\r\n    }\r\n    function extractRemainingLush() external {\r\n        require(msg.sender  == deployer, \"No permission\");\r\n        uint256 lushContractBalance = ERC20(lushAddress).balanceOf(address(this));\r\n        ERC20(lushAddress).transfer(deployer, lushContractBalance);\r\n    }   \r\n\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_enqAdmin\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lushAddress\",\"type\":\"address\"}],\"name\":\"activateAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enqAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractRemainingLush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lushAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMarketCap\",\"type\":\"uint256\"}],\"name\":\"renewContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisRoundETHContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"updateIsContributionOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"walletAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"walletAmounts\",\"type\":\"uint256[]\"}],\"name\":\"uploadEnqHolderData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AirdropContractV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000eb627fcf91a920b3648eced741373b4cf0e20622", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5af96f737c4b12c6d9bde91a2e2389ece1e730d67261b4e160294b702b0b8386"}