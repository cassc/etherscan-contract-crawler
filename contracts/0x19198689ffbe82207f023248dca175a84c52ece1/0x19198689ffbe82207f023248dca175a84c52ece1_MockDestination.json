{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"scripts/contract_extensions/MockDestination.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IBaseReceiverPortal} from '../../src/contracts/interfaces/IBaseReceiverPortal.sol';\\n\\ncontract MockDestination is IBaseReceiverPortal {\\n  address public immutable CROSS_CHAIN_CONTROLLER;\\n\\n  event TestWorked(address indexed originSender, uint256 indexed originChainId, bytes message);\\n\\n  constructor(address crossChainController) {\\n    require(crossChainController != address(0), 'WRONG_CROSS_CHAIN_CONTROLLER');\\n    CROSS_CHAIN_CONTROLLER = crossChainController;\\n  }\\n\\n  function receiveCrossChainMessage(\\n    address originSender,\\n    uint256 originChainId,\\n    bytes memory message\\n  ) external {\\n    require(msg.sender == CROSS_CHAIN_CONTROLLER, 'CALLER_NOT_CROSS_CHAIN_CONTROLLER');\\n    emit TestWorked(originSender, originChainId, message);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IBaseReceiverPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IBaseReceiverPortal\\n * @author BGD Labs\\n * @notice interface defining the method that needs to be implemented by all receiving portals, as its the one that\\n           will be called when a received message gets confirmed\\n */\\ninterface IBaseReceiverPortal {\\n  /**\\n   * @notice method called by CrossChainController when a message has been confirmed\\n   * @param originSender address of the sender of the bridged message\\n   * @param originChainId id of the chain where the message originated\\n   * @param message bytes bridged containing the desired information\\n   */\\n  function receiveCrossChainMessage(\\n    address originSender,\\n    uint256 originChainId,\\n    bytes memory message\\n  ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solidity-utils/=lib/solidity-utils/src/\",\r\n      \"hyperlane-monorepo/=lib/hyperlane-monorepo/solidity/contracts/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@aave/core-v3/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"aave-v3-core/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"fx-portal/=lib/fx-portal/contracts/\",\r\n      \"nitro-contracts/=lib/nitro-contracts/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossChainController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"TestWorked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSS_CHAIN_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveCrossChainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MockDestination", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ed42a7d8559a463722ca4bed50e0cc05a386b0e1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}