{"SourceCode": "pragma solidity 0.4.24;\r\n\r\ninterface ERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _who) external view returns (uint256);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC223Basic additions to ERC20Basic\r\n * @dev see also: https://github.com/ethereum/EIPs/issues/223               \r\n *\r\n*/\r\ncontract ERC223 is ERC20 {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes indexed _data);\r\n\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\r\n    function contractFallback(address _to, uint _value, bytes _data) internal returns (bool success);\r\n    function isContract(address _addr) internal view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private owner_;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner_ = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @return the address of the owner.\r\n    */\r\n    function owner() public view returns(address) {\r\n        return owner_;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner_, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to relinquish control of the contract.\r\n    * @notice Renouncing to ownership will leave the contract without an owner.\r\n    * It will not be possible to call the functions with the `onlyOwner`\r\n    * modifier anymore.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner_);\r\n        owner_ = address(0);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Cannot transfer ownership to zero address.\");\r\n        emit OwnershipTransferred(owner_, _newOwner);\r\n        owner_ = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n        return _a / _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Generic223Receiver {\r\n    uint public sentValue;\r\n    address public tokenAddr;\r\n    address public tokenSender;\r\n    bool public calledFoo;\r\n\r\n    bytes public tokenData;\r\n    bytes4 public tokenSig;\r\n\r\n    Tkn private tkn;\r\n\r\n    bool private __isTokenFallback;\r\n\r\n    struct Tkn {\r\n        address addr;\r\n        address sender;\r\n        uint256 value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    modifier tokenPayable {\r\n        assert(__isTokenFallback);\r\n        _;\r\n    }\r\n\r\n    function tokenFallback(address _sender, uint _value, bytes _data) public returns (bool success) {\r\n\r\n        tkn = Tkn(msg.sender, _sender, _value, _data, getSig(_data));\r\n        __isTokenFallback = true;\r\n        address(this).delegatecall(_data);\r\n        __isTokenFallback = false;\r\n        return true;\r\n    }\r\n\r\n    function foo() public tokenPayable {\r\n        saveTokenValues();\r\n        calledFoo = true;\r\n    }\r\n\r\n    function getSig(bytes _data) private pure returns (bytes4 sig) {\r\n        uint lngth = _data.length < 4 ? _data.length : 4;\r\n        for (uint i = 0; i < lngth; i++) {\r\n            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (lngth - 1 - i))));\r\n        }\r\n    }\r\n\r\n    function saveTokenValues() private {\r\n        tokenAddr = tkn.addr;\r\n        tokenSender = tkn.sender;\r\n        sentValue = tkn.value;\r\n        tokenSig = tkn.sig;\r\n        tokenData = tkn.data;\r\n    }\r\n}\r\n\r\ncontract InvoxFinanceToken is ERC223, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string private name_ = \"Invox Finance Token\";\r\n    string private symbol_ = \"INVOX\";\r\n    uint256 private decimals_ = 18;\r\n    uint256 public totalSupply = 464000000 * (10 ** decimals_);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    mapping (address => uint256) internal balances_;\r\n    mapping (address => mapping (address => uint256)) private allowed_;\r\n\r\n    constructor() public {\r\n        balances_[msg.sender] = balances_[msg.sender].add(totalSupply);\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    function() public payable { revert(\"Cannot send ETH to this address.\"); }\r\n    \r\n    function name() public view returns(string) {\r\n        return name_;\r\n    }\r\n\r\n    function symbol() public view returns(string) {\r\n        return symbol_;\r\n    }\r\n\r\n    function decimals() public view returns(uint256) {\r\n        return decimals_;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function safeTransfer(address _to, uint256 _value) public {\r\n        require(transfer(_to, _value), \"Transfer failed.\");\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _value) public {\r\n        require(transferFrom(_from, _to, _value), \"Transfer failed.\");\r\n    }\r\n\r\n    function safeApprove( address _spender, uint256 _currentValue, uint256 _value ) public {\r\n        require(allowed_[msg.sender][_spender] == _currentValue, \"Current allowance value does not match.\");\r\n        approve(_spender, _value);\r\n    }\r\n\r\n    // ERC20\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances_[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed_[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances_[msg.sender], \"Value exceeds balance of msg.sender.\");\r\n        require(_to != address(0), \"Cannot send tokens to zero address.\");\r\n\r\n        balances_[msg.sender] = balances_[msg.sender].sub(_value);\r\n        balances_[_to] = balances_[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed_[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= balances_[_from], \"Value exceeds balance of msg.sender.\");\r\n        require(_value <= allowed_[_from][msg.sender], \"Value exceeds allowance of msg.sender for this owner.\");\r\n        require(_to != address(0), \"Cannot send tokens to zero address.\");\r\n\r\n        balances_[_from] = balances_[_from].sub(_value);\r\n        balances_[_to] = balances_[_to].add(_value);\r\n        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed_[msg.sender][_spender] = allowed_[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed_[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed_[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    // ERC223\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        require(_to != address(0), \"Cannot transfer token to zero address.\");\r\n        require(_value <= balanceOf(msg.sender), \"Value exceeds balance of msg.sender.\");\r\n        \r\n        transfer(_to, _value);\r\n\r\n        if (isContract(_to)) {\r\n            return contractFallback(_to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function contractFallback(address _to, uint _value, bytes _data) internal returns (bool success) {\r\n        Generic223Receiver receiver = Generic223Receiver(_to);\r\n        return receiver.tokenFallback(msg.sender, _value, _data);\r\n    }\r\n\r\n    // Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        // retrieve the size of the code on target address, this needs assembly\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        return length > 0;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "InvoxFinanceToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://73a35a85361d3cc835e10569015e470b35e297b4ac206511c8441320de39007e"}