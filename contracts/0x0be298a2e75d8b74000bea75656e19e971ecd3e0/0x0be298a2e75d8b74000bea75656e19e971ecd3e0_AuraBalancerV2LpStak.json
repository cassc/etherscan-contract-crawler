{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/release/infrastructure/staking-wrappers/aura-balancer-v2-lp/AuraBalancerV2LpStakingWrapperLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {IAuraStashToken} from \\\"../../../../external-interfaces/IAuraStashToken.sol\\\";\\nimport {ConvexCurveLpStakingWrapperLib} from \\\"../convex-curve-lp/ConvexCurveLpStakingWrapperLib.sol\\\";\\n\\n/// @title AuraBalancerV2LpStakingWrapperLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library contract for AuraBalancerV2LpStakingWrapper instances\\ncontract AuraBalancerV2LpStakingWrapperLib is ConvexCurveLpStakingWrapperLib {\\n    constructor(address _owner, address _convexBooster, address _balToken, address _auraToken)\\n        ConvexCurveLpStakingWrapperLib(_owner, _convexBooster, _balToken, _auraToken)\\n    {}\\n\\n    /// @dev Helper to get the pool id at which stash tokens are exclusively used for extra rewards.\\n    /// In Aura, this is the case for pools with pid >= 48.\\n    /// See: https://forum.aura.finance/t/aip-29-finish-migration-of-aura-pools-to-optimize-integrations-enact-aip-26\\n    function __stashTokenStartPid() internal pure override returns (uint256 startPid_) {\\n        return 48;\\n    }\\n\\n    /// @dev Helper to get the selector for querying the underlying token of a stash token\\n    function __stashTokenUnderlyingSelector() internal pure override returns (bytes4 selector_) {\\n        return IAuraStashToken.baseToken.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IAuraStashToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IAuraStashToken Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAuraStashToken {\\n    function baseToken() external view returns (address baseToken_);\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/staking-wrappers/convex-curve-lp/ConvexCurveLpStakingWrapperLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {ERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"openzeppelin-solc-0.8/utils/Address.sol\\\";\\nimport {IConvexBaseRewardPool} from \\\"../../../../external-interfaces/IConvexBaseRewardPool.sol\\\";\\nimport {IConvexBooster} from \\\"../../../../external-interfaces/IConvexBooster.sol\\\";\\nimport {IConvexStashTokenWrapper} from \\\"../../../../external-interfaces/IConvexStashTokenWrapper.sol\\\";\\nimport {IConvexVirtualBalanceRewardPool} from \\\"../../../../external-interfaces/IConvexVirtualBalanceRewardPool.sol\\\";\\nimport {StakingWrapperBase} from \\\"../StakingWrapperBase.sol\\\";\\nimport {StakingWrapperLibBase} from \\\"../StakingWrapperLibBase.sol\\\";\\nimport {IConvexCurveLpStakingWrapper} from \\\"./IConvexCurveLpStakingWrapper.sol\\\";\\nimport {IConvexCurveLpStakingWrapperFactory} from \\\"./IConvexCurveLpStakingWrapperFactory.sol\\\";\\n\\n/// @title ConvexCurveLpStakingWrapperLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library contract for ConvexCurveLpStakingWrapper instances\\ncontract ConvexCurveLpStakingWrapperLib is IConvexCurveLpStakingWrapper, StakingWrapperLibBase {\\n    using SafeERC20 for ERC20;\\n\\n    IConvexBooster private immutable CONVEX_BOOSTER_CONTRACT;\\n    address private immutable CRV_TOKEN;\\n    address private immutable CVX_TOKEN;\\n\\n    address private convexPool;\\n    uint256 private convexPoolId;\\n    address private curveLPToken;\\n\\n    constructor(address _owner, address _convexBooster, address _crvToken, address _cvxToken)\\n        StakingWrapperBase(_owner, \\\"\\\", \\\"\\\")\\n    {\\n        CONVEX_BOOSTER_CONTRACT = IConvexBooster(_convexBooster);\\n        CRV_TOKEN = _crvToken;\\n        CVX_TOKEN = _cvxToken;\\n    }\\n\\n    /// @notice Initializes the proxy\\n    /// @param _pid The Convex pool id for which to use the proxy\\n    function init(uint256 _pid) external override {\\n        // Can validate with any variable set here\\n        require(getCurveLpToken() == address(0), \\\"init: Initialized\\\");\\n\\n        IConvexBooster.PoolInfo memory poolInfo = CONVEX_BOOSTER_CONTRACT.poolInfo(_pid);\\n\\n        // Set ERC20 info on proxy\\n        __setTokenName(string(abi.encodePacked(\\\"Enzyme Staked: \\\", ERC20(poolInfo.token).name())));\\n        __setTokenSymbol(string(abi.encodePacked(\\\"stk\\\", ERC20(poolInfo.token).symbol())));\\n\\n        curveLPToken = poolInfo.lptoken;\\n        convexPool = poolInfo.crvRewards;\\n        convexPoolId = _pid;\\n\\n        __addRewardToken(CRV_TOKEN);\\n        __addRewardToken(CVX_TOKEN);\\n        addExtraRewards();\\n\\n        setApprovals();\\n    }\\n\\n    /// @notice Adds rewards tokens that have not yet been added to the wrapper\\n    /// @dev Anybody can call, in case more pool tokens are added.\\n    /// Is called prior to every new harvest.\\n    function addExtraRewards() public override {\\n        IConvexBaseRewardPool convexPoolContract = IConvexBaseRewardPool(getConvexPool());\\n\\n        uint256 extraRewardsCount = convexPoolContract.extraRewardsLength();\\n        for (uint256 i; i < extraRewardsCount; i++) {\\n            address rewardToken = IConvexVirtualBalanceRewardPool(convexPoolContract.extraRewards(i)).rewardToken();\\n\\n            // Handle wrapped reward tokens (\\\"stash tokens\\\")\\n            if (convexPoolId >= __stashTokenStartPid()) {\\n                (bytes memory returnData) = Address.functionStaticCall({\\n                    target: rewardToken,\\n                    data: abi.encodeWithSelector(__stashTokenUnderlyingSelector())\\n                });\\n\\n                rewardToken = abi.decode(returnData, (address));\\n            }\\n\\n            // __addRewardToken silently ignores duplicates\\n            __addRewardToken(rewardToken);\\n        }\\n    }\\n\\n    /// @notice Sets necessary ERC20 approvals, as-needed\\n    function setApprovals() public override {\\n        ERC20(getCurveLpToken()).safeApprove(address(CONVEX_BOOSTER_CONTRACT), type(uint256).max);\\n    }\\n\\n    /// @dev Helper to get the pool id at which stash tokens are exclusively used for extra rewards.\\n    /// In Convex, this is the case for pools with pid >= 151.\\n    /// See https://github.com/convex-eth/platform/blob/25d5eafb75fe497c2aee6ce99f3f4f465209c886/contracts/contracts/wrappers/ConvexStakingWrapper.sol#L187-L190\\n    function __stashTokenStartPid() internal pure virtual returns (uint256 startPid_) {\\n        return 151;\\n    }\\n\\n    /// @dev Helper to get the selector for querying the underlying token of a stash token\\n    function __stashTokenUnderlyingSelector() internal pure virtual returns (bytes4 selector_) {\\n        return IConvexStashTokenWrapper.token.selector;\\n    }\\n\\n    ////////////////////////////////\\n    // STAKING WRAPPER BASE LOGIC //\\n    ////////////////////////////////\\n\\n    /// @dev Logic to be run during a deposit, specific to the integrated protocol.\\n    /// Do not mint staking tokens, which already happens during __deposit().\\n    function __depositLogic(address _from, uint256 _amount) internal override {\\n        ERC20(getCurveLpToken()).safeTransferFrom(_from, address(this), _amount);\\n        CONVEX_BOOSTER_CONTRACT.deposit({_pid: convexPoolId, _amount: _amount, _stake: true});\\n    }\\n\\n    /// @dev Logic to be run during a checkpoint to harvest new rewards, specific to the integrated protocol.\\n    /// Can also be used to add new rewards tokens dynamically.\\n    /// Do not checkpoint, only harvest the rewards.\\n    function __harvestRewardsLogic() internal override {\\n        // It's probably overly-cautious to check rewards on every call,\\n        // but more convenient to always check than to monitor for rewards changes.\\n        addExtraRewards();\\n\\n        IConvexBaseRewardPool(getConvexPool()).getReward();\\n    }\\n\\n    /// @dev Logic to be run during a withdrawal, specific to the integrated protocol.\\n    /// Do not burn staking tokens, which already happens during __withdraw().\\n    function __withdrawLogic(address _to, uint256 _amount) internal override {\\n        IConvexBaseRewardPool(getConvexPool()).withdrawAndUnwrap({_amount: _amount, _claim: false});\\n        ERC20(getCurveLpToken()).safeTransfer(_to, _amount);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the associated Convex reward pool address\\n    /// @return convexPool_ The reward pool\\n    function getConvexPool() public view override returns (address convexPool_) {\\n        return convexPool;\\n    }\\n\\n    /// @notice Gets the associated Convex reward pool id (pid)\\n    /// @return convexPoolId_ The pid\\n    function getConvexPoolId() public view override returns (uint256 convexPoolId_) {\\n        return convexPoolId;\\n    }\\n\\n    /// @notice Gets the associated Curve LP token\\n    /// @return curveLPToken_ The Curve LP token\\n    function getCurveLpToken() public view override returns (address curveLPToken_) {\\n        return curveLPToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IConvexBaseRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IConvexBaseRewardPool Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IConvexBaseRewardPool {\\n    function balanceOf(address _account) external view returns (uint256 balance_);\\n\\n    function extraRewards(uint256 _index) external view returns (address rewardPool_);\\n\\n    function extraRewardsLength() external view returns (uint256 length_);\\n\\n    function getReward() external returns (bool success_);\\n\\n    function withdraw(uint256 _amount, bool _claim) external returns (bool success_);\\n\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool success_);\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IConvexBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IConvexBooster Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IConvexBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns (bool success_);\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory poolInfo_);\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IConvexStashTokenWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IConvexStashTokenWrapper Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IConvexStashTokenWrapper {\\n    function token() external view returns (address token_);\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/IConvexVirtualBalanceRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IConvexVirtualBalanceRewardPool Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IConvexVirtualBalanceRewardPool {\\n    function rewardToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/staking-wrappers/StakingWrapperBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {ReentrancyGuard} from \\\"openzeppelin-solc-0.8/security/ReentrancyGuard.sol\\\";\\nimport {ERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"openzeppelin-solc-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AddressArrayLib} from \\\"../../../utils/0.8.19/AddressArrayLib.sol\\\";\\nimport {IStakingWrapper} from \\\"./IStakingWrapper.sol\\\";\\n\\n/// @title StakingWrapperBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for staking wrappers\\n/// @dev Can be used as a base for both standard deployments and proxy targets\\nabstract contract StakingWrapperBase is IStakingWrapper, ERC20, ReentrancyGuard {\\n    using AddressArrayLib for address[];\\n    using SafeERC20 for ERC20;\\n\\n    event Deposited(address indexed from, address indexed to, uint256 amount);\\n\\n    event PauseToggled(bool isPaused);\\n\\n    event RewardTokenAdded(address token);\\n\\n    event TotalHarvestIntegralUpdated(address indexed rewardToken, uint256 integral);\\n\\n    event TotalHarvestLastCheckpointBalanceUpdated(address indexed rewardToken, uint256 lastCheckpointBalance);\\n\\n    event UserHarvestUpdated(\\n        address indexed user, address indexed rewardToken, uint256 integral, uint256 claimableReward\\n    );\\n\\n    event Withdrawn(address indexed caller, address indexed from, address indexed to, uint256 amount);\\n\\n    uint8 private constant DEFAULT_DECIMALS = 18;\\n    uint256 private constant INTEGRAL_PRECISION = 1e18;\\n    address internal immutable OWNER;\\n\\n    // `paused` blocks new deposits\\n    bool private paused;\\n    address[] private rewardTokens;\\n    mapping(address => TotalHarvestData) private rewardTokenToTotalHarvestData;\\n    mapping(address => mapping(address => UserHarvestData)) private rewardTokenToUserToHarvestData;\\n\\n    modifier notEmpty(address _account) {\\n        require(_account != address(0), \\\"Empty account\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == OWNER, \\\"Only owner callable\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner, string memory _tokenName, string memory _tokenSymbol) ERC20(_tokenName, _tokenSymbol) {\\n        OWNER = _owner;\\n    }\\n\\n    /// @notice Toggles pause for deposits\\n    /// @param _isPaused True if next state is paused, false if unpaused\\n    function togglePause(bool _isPaused) external override onlyOwner {\\n        paused = _isPaused;\\n\\n        emit PauseToggled(_isPaused);\\n    }\\n\\n    ////////////////////////////\\n    // DEPOSITOR INTERACTIONS //\\n    ////////////////////////////\\n\\n    // CLAIM REWARDS\\n\\n    /// @notice Claims all rewards for a given account, including any accrued since the last checkpoint\\n    /// @param _for The account for which to claim rewards\\n    /// @return rewardTokens_ The reward tokens\\n    /// @return claimedAmounts_ The reward token amounts claimed\\n    /// @dev Can be called off-chain to simulate the total harvestable rewards for a particular user\\n    function claimRewardsFor(address _for)\\n        external\\n        override\\n        nonReentrant\\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_)\\n    {\\n        __checkpoint([_for, address(0)]);\\n\\n        return __claimRewardTokens(_for);\\n    }\\n\\n    /// @notice Claims all rewards for a given account, not including any accrued since the last checkpoint\\n    /// @param _for The account for which to claim rewards\\n    /// @return rewardTokens_ The reward tokens\\n    /// @return claimedAmounts_ The reward token amounts claimed\\n    /// @dev Can be called off-chain to simulate the total harvestable rewards for a particular user.\\n    /// Does NOT give up claim to rewards accrued since the last checkpoint.\\n    function claimRewardsForWithoutCheckpoint(address _for)\\n        external\\n        override\\n        nonReentrant\\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_)\\n    {\\n        return __claimRewardTokens(_for);\\n    }\\n\\n    // DEPOSIT\\n\\n    /// @notice Deposits tokens to be staked, minting staking token to a specified account\\n    /// @param _to The account to receive staking tokens\\n    /// @param _amount The amount of tokens to deposit\\n    function depositTo(address _to, uint256 _amount) external override {\\n        __deposit({_from: msg.sender, _to: _to, _amount: _amount});\\n    }\\n\\n    /// @dev Helper to deposit tokens to be staked\\n    function __deposit(address _from, address _to, uint256 _amount) private nonReentrant notEmpty(_to) {\\n        require(!isPaused(), \\\"__deposit: Paused\\\");\\n\\n        // Checkpoint before minting\\n        __checkpoint([_to, address(0)]);\\n        _mint(_to, _amount);\\n\\n        __depositLogic({_onBehalf: _from, _amount: _amount});\\n\\n        emit Deposited(_from, _to, _amount);\\n    }\\n\\n    // WITHDRAWAL\\n\\n    /// @notice Withdraws staked tokens, returning tokens to a specified account\\n    /// @param _to The account to receive tokens\\n    /// @param _amount The amount of tokens to withdraw\\n    function withdrawTo(address _to, uint256 _amount) external override {\\n        __withdraw({_from: msg.sender, _to: _to, _amount: _amount, _checkpoint: true});\\n    }\\n\\n    /// @notice Withdraws staked tokens on behalf of AccountA, returning tokens to a specified AccountB\\n    /// @param _onBehalf The account on behalf to withdraw\\n    /// @param _to The account to receive tokens\\n    /// @param _amount The amount of tokens to withdraw\\n    /// @dev The caller must have an adequate ERC20.allowance() for _onBehalf\\n    function withdrawToOnBehalf(address _onBehalf, address _to, uint256 _amount) external override {\\n        // Validate and reduce sender approval\\n        _approve(_onBehalf, msg.sender, allowance(_onBehalf, msg.sender) - _amount);\\n\\n        __withdraw({_from: _onBehalf, _to: _to, _amount: _amount, _checkpoint: true});\\n    }\\n\\n    /// @notice Withdraws staked tokens, returning tokens to a specified account,\\n    /// but giving up any rewards accrued since the previous checkpoint\\n    /// @param _to The account to receive tokens\\n    /// @param _amount The amount of tokens to withdraw\\n    /// @dev Simply runs withdrawal logic without checkpointing rewards, in case of rewards-related failure.\\n    /// Redeemer can still claim rewards accrued up to the previous checkpoint.\\n    function withdrawToWithoutCheckpoint(address _to, uint256 _amount) external override {\\n        __withdraw({_from: msg.sender, _to: _to, _amount: _amount, _checkpoint: false});\\n    }\\n\\n    /// @dev Helper to withdraw staked tokens\\n    function __withdraw(address _from, address _to, uint256 _amount, bool _checkpoint)\\n        private\\n        nonReentrant\\n        notEmpty(_to)\\n    {\\n        // Checkpoint before burning\\n        if (_checkpoint) {\\n            __checkpoint([_from, address(0)]);\\n        }\\n\\n        _burn(_from, _amount);\\n\\n        __withdrawLogic({_to: _to, _amount: _amount});\\n\\n        emit Withdrawn(msg.sender, _from, _to, _amount);\\n    }\\n\\n    /////////////\\n    // REWARDS //\\n    /////////////\\n\\n    // Rewards tokens are added by the inheriting contract. Rewards tokens should be added, but not removed.\\n    // If new rewards tokens need to be added over time, that logic must be handled by the inheriting contract,\\n    // and can make use of __harvestRewardsLogic() if necessary\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper to add new reward tokens. Silently ignores duplicates.\\n    function __addRewardToken(address _rewardToken) internal {\\n        if (!rewardTokens.contains(_rewardToken)) {\\n            rewardTokens.push(_rewardToken);\\n\\n            emit RewardTokenAdded(_rewardToken);\\n        }\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to calculate an unaccounted for reward amount due to a user based on integral values\\n    function __calcClaimableRewardForIntegralDiff(\\n        address _account,\\n        uint256 _totalHarvestIntegral,\\n        uint256 _userHarvestIntegral\\n    ) private view returns (uint256 claimableReward_) {\\n        return balanceOf(_account) * (_totalHarvestIntegral - _userHarvestIntegral) / INTEGRAL_PRECISION;\\n    }\\n\\n    /// @dev Helper to calculate an unaccounted for integral amount based on checkpoint balance diff\\n    function __calcIntegralForBalDiff(uint256 _supply, uint256 _currentBalance, uint256 _lastCheckpointBalance)\\n        private\\n        pure\\n        returns (uint256 integral_)\\n    {\\n        if (_supply > 0) {\\n            uint256 balDiff = _currentBalance - _lastCheckpointBalance;\\n            if (balDiff > 0) {\\n                return balDiff * INTEGRAL_PRECISION / _supply;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @dev Helper to checkpoint harvest data for specified accounts.\\n    /// Harvests all rewards prior to checkpoint.\\n    function __checkpoint(address[2] memory _accounts) private {\\n        __harvestRewardsLogic();\\n\\n        uint256 supply = totalSupply();\\n\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            __checkpointRewardToken({_rewardToken: rewardTokens[i], _accounts: _accounts, _supply: supply});\\n        }\\n    }\\n\\n    /// @dev Helper to update harvest data\\n    function __checkpointRewardToken(address _rewardToken, address[2] memory _accounts, uint256 _supply) internal {\\n        TotalHarvestData storage totalHarvestData = rewardTokenToTotalHarvestData[_rewardToken];\\n\\n        uint256 totalIntegral = totalHarvestData.integral;\\n        uint256 bal = ERC20(_rewardToken).balanceOf(address(this));\\n        uint256 integralToAdd = __calcIntegralForBalDiff({\\n            _supply: _supply,\\n            _currentBalance: bal,\\n            _lastCheckpointBalance: totalHarvestData.lastCheckpointBalance\\n        });\\n        if (integralToAdd > 0) {\\n            totalIntegral = totalIntegral + integralToAdd;\\n            totalHarvestData.integral = uint128(totalIntegral);\\n            emit TotalHarvestIntegralUpdated(_rewardToken, totalIntegral);\\n\\n            totalHarvestData.lastCheckpointBalance = uint128(bal);\\n            emit TotalHarvestLastCheckpointBalanceUpdated(_rewardToken, bal);\\n        }\\n\\n        for (uint256 i; i < _accounts.length; i++) {\\n            // skip address(0), passed in upon mint and burn\\n            if (_accounts[i] == address(0)) continue;\\n\\n            UserHarvestData storage userHarvestData = rewardTokenToUserToHarvestData[_rewardToken][_accounts[i]];\\n\\n            uint256 userIntegral = userHarvestData.integral;\\n            if (userIntegral < totalIntegral) {\\n                uint256 claimableReward = uint256(userHarvestData.claimableReward)\\n                    + __calcClaimableRewardForIntegralDiff({\\n                        _account: _accounts[i],\\n                        _totalHarvestIntegral: totalIntegral,\\n                        _userHarvestIntegral: userIntegral\\n                    });\\n                userHarvestData.claimableReward = uint128(claimableReward);\\n                userHarvestData.integral = uint128(totalIntegral);\\n\\n                emit UserHarvestUpdated(_accounts[i], _rewardToken, totalIntegral, claimableReward);\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to claim all reward tokens for an account\\n    function __claimRewardTokens(address _account)\\n        private\\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_)\\n    {\\n        rewardTokens_ = getRewardTokens();\\n        uint256 rewardTokensLength = rewardTokens_.length;\\n        claimedAmounts_ = new uint256[](rewardTokensLength);\\n\\n        for (uint256 i; i < rewardTokensLength; i++) {\\n            ERC20 rewardToken = ERC20(rewardTokens_[i]);\\n            UserHarvestData storage userHarvestData = rewardTokenToUserToHarvestData[address(rewardToken)][_account];\\n\\n            uint256 claimableAmount = userHarvestData.claimableReward;\\n            if (claimableAmount > 0) {\\n                claimedAmounts_[i] = claimableAmount;\\n\\n                // Set the user's claimable reward to 0\\n                userHarvestData.claimableReward = 0;\\n\\n                emit UserHarvestUpdated(_account, address(rewardToken), userHarvestData.integral, 0);\\n\\n                ERC20(rewardToken).safeTransfer(_account, claimableAmount);\\n            }\\n        }\\n\\n        return (rewardTokens_, claimedAmounts_);\\n    }\\n\\n    ////////////////////////////////\\n    // REQUIRED VIRTUAL FUNCTIONS //\\n    ////////////////////////////////\\n\\n    /// @dev Logic to be run during a deposit, specific to the integrated protocol.\\n    /// Do not mint staking tokens, which already happens during __deposit().\\n    function __depositLogic(address _onBehalf, uint256 _amount) internal virtual;\\n\\n    /// @dev Logic to be run during a checkpoint to harvest new rewards, specific to the integrated protocol.\\n    /// Can also be used to add new rewards tokens dynamically.\\n    /// Do not checkpoint, only harvest the rewards.\\n    function __harvestRewardsLogic() internal virtual;\\n\\n    /// @dev Logic to be run during a withdrawal, specific to the integrated protocol.\\n    /// Do not burn staking tokens, which already happens during __withdraw().\\n    function __withdrawLogic(address _to, uint256 _amount) internal virtual;\\n\\n    /////////////////////\\n    // ERC20 OVERRIDES //\\n    /////////////////////\\n\\n    /// @notice Gets the token decimals\\n    /// @return decimals_ The token decimals\\n    /// @dev Implementing contracts should override to set different decimals\\n    function decimals() public view virtual override returns (uint8 decimals_) {\\n        return DEFAULT_DECIMALS;\\n    }\\n\\n    /// @dev Overrides ERC20._transfer() in order to checkpoint sender and recipient pre-transfer rewards\\n    function _transfer(address _from, address _to, uint256 _amount) internal override nonReentrant {\\n        __checkpoint([_from, _to]);\\n        super._transfer(_from, _to, _amount);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the reward token at a particular index\\n    /// @return rewardToken_ The reward token address\\n    function getRewardTokenAtIndex(uint256 _index) public view override returns (address rewardToken_) {\\n        return rewardTokens[_index];\\n    }\\n\\n    /// @notice Gets the count of reward tokens being harvested\\n    /// @return count_ The count\\n    function getRewardTokenCount() public view override returns (uint256 count_) {\\n        return rewardTokens.length;\\n    }\\n\\n    /// @notice Gets all reward tokens being harvested\\n    /// @return rewardTokens_ The reward tokens\\n    function getRewardTokens() public view override returns (address[] memory rewardTokens_) {\\n        return rewardTokens;\\n    }\\n\\n    /// @notice Gets the TotalHarvestData for a specified reward token\\n    /// @param _rewardToken The reward token\\n    /// @return totalHarvestData_ The TotalHarvestData\\n    function getTotalHarvestDataForRewardToken(address _rewardToken)\\n        public\\n        view\\n        override\\n        returns (TotalHarvestData memory totalHarvestData_)\\n    {\\n        return rewardTokenToTotalHarvestData[_rewardToken];\\n    }\\n\\n    /// @notice Gets the UserHarvestData for a specified account and reward token\\n    /// @param _user The account\\n    /// @param _rewardToken The reward token\\n    /// @return userHarvestData_ The UserHarvestData\\n    function getUserHarvestDataForRewardToken(address _user, address _rewardToken)\\n        public\\n        view\\n        override\\n        returns (UserHarvestData memory userHarvestData_)\\n    {\\n        return rewardTokenToUserToHarvestData[_rewardToken][_user];\\n    }\\n\\n    /// @notice Checks if deposits and new reward harvesting are paused\\n    /// @return isPaused_ True if paused\\n    function isPaused() public view override returns (bool isPaused_) {\\n        return paused;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/staking-wrappers/StakingWrapperLibBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\nimport {StakingWrapperBase} from \\\"./StakingWrapperBase.sol\\\";\\n\\n/// @title StakingWrapperLibBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A staking wrapper base for proxy targets, extending StakingWrapperBase\\nabstract contract StakingWrapperLibBase is StakingWrapperBase {\\n    event TokenNameSet(string name);\\n\\n    event TokenSymbolSet(string symbol);\\n\\n    string private tokenName;\\n    string private tokenSymbol;\\n\\n    /// @dev Helper function to set token name\\n    function __setTokenName(string memory _name) internal {\\n        tokenName = _name;\\n\\n        emit TokenNameSet(_name);\\n    }\\n\\n    /// @dev Helper function to set token symbol\\n    function __setTokenSymbol(string memory _symbol) internal {\\n        tokenSymbol = _symbol;\\n\\n        emit TokenSymbolSet(_symbol);\\n    }\\n\\n    /////////////////////\\n    // ERC20 OVERRIDES //\\n    /////////////////////\\n\\n    /// @notice Gets the token name\\n    /// @return name_ The token name\\n    /// @dev Overrides the constructor-set storage for use in proxies\\n    function name() public view override returns (string memory name_) {\\n        return tokenName;\\n    }\\n\\n    /// @notice Gets the token symbol\\n    /// @return symbol_ The token symbol\\n    /// @dev Overrides the constructor-set storage for use in proxies\\n    function symbol() public view override returns (string memory symbol_) {\\n        return tokenSymbol;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/staking-wrappers/convex-curve-lp/IConvexCurveLpStakingWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport {IStakingWrapper} from \\\"../IStakingWrapper.sol\\\";\\n\\n/// @title IConvexCurveLpStakingWrapper Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IConvexCurveLpStakingWrapper is IStakingWrapper {\\n    function addExtraRewards() external;\\n\\n    function getConvexPool() external view returns (address convexPool_);\\n\\n    function getConvexPoolId() external view returns (uint256 convexPoolId_);\\n\\n    function getCurveLpToken() external view returns (address curveLPToken_);\\n\\n    function init(uint256 _pid) external;\\n\\n    function setApprovals() external;\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/staking-wrappers/convex-curve-lp/IConvexCurveLpStakingWrapperFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport {IDispatcherOwnedBeacon} from \\\"../../../../utils/0.8.19/dispatcher-owned-beacon/IDispatcherOwnedBeacon.sol\\\";\\n\\n/// @title IConvexCurveLpStakingWrapperFactory Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IConvexCurveLpStakingWrapperFactory is IDispatcherOwnedBeacon {\\n    function deploy(uint256 _pid) external returns (address wrapperProxy_);\\n\\n    function getCurveLpTokenForWrapper(address _wrapper) external view returns (address lpToken_);\\n\\n    function getWrapperForConvexPool(uint256 _pid) external view returns (address wrapper_);\\n\\n    function pauseWrappers(address[] calldata _wrappers) external;\\n\\n    function unpauseWrappers(address[] calldata _wrappers) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-solc-0.8/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/0.8.19/AddressArrayLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.8.19;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove) internal returns (bool removed_) {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    /// @dev Helper to verify if a storage array contains a particular value\\n    function storageArrayContains(address[] storage _self, address _target) internal view returns (bool doesContain_) {\\n        uint256 arrLength = _self.length;\\n        for (uint256 i; i < arrLength; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd) internal pure returns (address[] memory nextArray_) {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target) internal pure returns (bool doesContain_) {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/release/infrastructure/staking-wrappers/IStakingWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IStakingWrapper interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IStakingWrapper {\\n    struct TotalHarvestData {\\n        uint128 integral;\\n        uint128 lastCheckpointBalance;\\n    }\\n\\n    struct UserHarvestData {\\n        uint128 integral;\\n        uint128 claimableReward;\\n    }\\n\\n    function claimRewardsFor(address _for)\\n        external\\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_);\\n\\n    function claimRewardsForWithoutCheckpoint(address _for)\\n        external\\n        returns (address[] memory rewardTokens_, uint256[] memory claimedAmounts_);\\n\\n    function depositTo(address _to, uint256 _amount) external;\\n\\n    function togglePause(bool _isPaused) external;\\n\\n    function withdrawTo(address _to, uint256 _amount) external;\\n\\n    function withdrawToOnBehalf(address _onBehalf, address _to, uint256 _amount) external;\\n\\n    function withdrawToWithoutCheckpoint(address _to, uint256 _amount) external;\\n\\n    // STATE GETTERS\\n\\n    function getRewardTokenAtIndex(uint256 _index) external view returns (address rewardToken_);\\n\\n    function getRewardTokenCount() external view returns (uint256 count_);\\n\\n    function getRewardTokens() external view returns (address[] memory rewardTokens_);\\n\\n    function getTotalHarvestDataForRewardToken(address _rewardToken)\\n        external\\n        view\\n        returns (TotalHarvestData memory totalHarvestData_);\\n\\n    function getUserHarvestDataForRewardToken(address _user, address _rewardToken)\\n        external\\n        view\\n        returns (UserHarvestData memory userHarvestData_);\\n\\n    function isPaused() external view returns (bool isPaused_);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/0.8.19/dispatcher-owned-beacon/IDispatcherOwnedBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/// @title IDispatcherOwnedBeacon Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcherOwnedBeacon {\\n    function getOwner() external view returns (address owner_);\\n\\n    // From OpenZeppelin's IBeacon interface (which is only scoped in OZ to >=0.8.0)\\n    function implementation() external view returns (address implementation_);\\n\\n    function setImplementation(address _nextImplementation) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"@uniswap/v3-core/=lib/uniswap-v3-core/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-solc-0.6/=lib/openzeppelin-solc-0.6/contracts/\",\r\n      \"openzeppelin-solc-0.7/=lib/openzeppelin-solc-0.7/contracts/\",\r\n      \"openzeppelin-solc-0.8/=lib/openzeppelin-solc-0.8/contracts/\",\r\n      \"uniswap-v3-core/=lib/uniswap-v3-core/\",\r\n      \"uniswap-v3-core-0.8/=lib/uniswap-v3-core-0.8/\",\r\n      \"uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\",\r\n      \"uniswap-v3-periphery-0.8/=lib/uniswap-v3-periphery-0.8/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_convexBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auraToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TokenNameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenSymbolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"integral\",\"type\":\"uint256\"}],\"name\":\"TotalHarvestIntegralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastCheckpointBalance\",\"type\":\"uint256\"}],\"name\":\"TotalHarvestLastCheckpointBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"integral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableReward\",\"type\":\"uint256\"}],\"name\":\"UserHarvestUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"claimRewardsFor\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"claimRewardsForWithoutCheckpoint\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConvexPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"convexPool_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConvexPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"convexPoolId_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"curveLPToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRewardTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getTotalHarvestDataForRewardToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"integral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lastCheckpointBalance\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingWrapper.TotalHarvestData\",\"name\":\"totalHarvestData_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getUserHarvestDataForRewardToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"integral\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"claimableReward\",\"type\":\"uint128\"}],\"internalType\":\"struct IStakingWrapper.UserHarvestData\",\"name\":\"userHarvestData_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPaused_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToWithoutCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AuraBalancerV2LpStakingWrapperLib", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008895e8859ed407296f6dba3e89989dfa4d9d58dc000000000000000000000000a57b8d98dae62b26ec3bcc4a365338157060b234000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c0c293ce456ff0ed870add98a0828dd4d2903dbf", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}