{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Roller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IERC404.sol\\\";\\n\\ncontract Roller {\\n    address private immutable SLAVE = 0x395A2f3F3a94e3e6f20EeF67dDB325CE6262b0e1;\\n\\n    function _roll(address ERC404, uint256 length) internal returns (uint256) {\\n        IERC404 ctrl = IERC404(ERC404);\\n        uint256 unit = 10 ** 18;\\n        require(ctrl.balanceOf(address(this)) / unit >= length, \\\"Not enough balance to roll\\\");\\n\\n        IERC404(ERC404).transfer(address(this), unit * length);\\n\\n        return ctrl.minted();\\n    }\\n\\n    function roll_PandoraUntilRed() public {\\n        address pandora = 0x9E9FbDE7C7a83c43913BddC8779158F1368F0413;\\n        IERC404 ctrl = IERC404(pandora);\\n        uint256 unit = 10 ** 18;\\n        uint256 boxes = ctrl.balanceOf(msg.sender) / unit;\\n        require(boxes > 0, \\\"Not enough balance to roll\\\");\\n\\n        ctrl.transferFrom(msg.sender, address(this), unit * boxes);\\n\\n        uint256 lastId = ctrl.minted();\\n        bool flip = true;\\n        while (boxes > 0) {\\n            for (uint256 i = 0; i < boxes; ++i) {\\n                uint256 id = lastId - i;\\n                if (240 < uint8(bytes1(keccak256(abi.encodePacked(id))))) {\\n                    --boxes;\\n                    ctrl.transferFrom(flip ? address(this) : SLAVE, msg.sender, id);\\n                }\\n            }\\n            if (flip) {\\n                ctrl.transfer(SLAVE, boxes * unit);\\n            } else {\\n                ctrl.transferFrom(SLAVE, address(this), boxes * unit);\\n            }\\n            flip = !flip;\\n            lastId = ctrl.minted();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IERC404 {\\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\\n    function minted() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"roll_PandoraUntilRed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Roller", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}