{"SourceCode": "pragma solidity ^0.4.18;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event UpdateToken(address _newtoken);\r\n    \r\n    // Function to set balances from new Token\r\n    function setBalance(address _to,uint256 _value) external ;\r\n    \r\n    // Function to set allowed from new Token\r\n    function setAllowed(address _spender,address _to,uint256 _value) external;\r\n    \r\n    // Function to set total supply from new Token.\r\n    function setTotalSupply(uint256 _value) external;\r\n    \r\n    function getDecimals() constant returns (uint256 decimals);\r\n    \r\n    function eventTransfer(address _from, address  _to, uint256 _value) external;\r\n    function eventApproval(address _owner, address  _spender, uint256 _value) external;\r\n    function eventBurn(address from, uint256 value) external;\r\n}\r\n\r\ncontract NewToken{\r\n    \r\n    function transfer(address _sender,address _to,uint256 value) returns (bool);\r\n    function transferFrom(address _sender,address from,address _to,uint256 value) returns (bool);\r\n    function approve(address _sender,address _spender, uint256 _value) returns (bool success);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function onePercent(uint256 a) internal constant returns (uint256){\r\n      return div(a,uint256(100));\r\n  }\r\n  \r\n  function power(uint256 a,uint256 b) internal constant returns (uint256){\r\n      return mul(a,10**b);\r\n  }\r\n}\r\n\r\ncontract StandardToken is Token {\r\n    using SafeMath for uint256;\r\n    address newToken=0x0;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public _totalSupply=0;\r\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    // there is 3 level. 1 - inbound tx, 2 - outbount tx, 3 - all tx;\r\n    mapping(uint8 =>mapping(address=>bool)) internal whitelist;\r\n    mapping(address=>uint8) internal whitelistModerator;\r\n    \r\n    uint256 public maxFee;\r\n    uint256 public feePercantage;\r\n    address public _owner;\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    modifier canModifyWhitelistIn {\r\n        require(whitelistModerator[msg.sender]==1 || whitelistModerator[msg.sender]==3);\r\n        _;\r\n    }\r\n    \r\n    modifier canModifyWhitelistOut {\r\n        require(whitelistModerator[msg.sender]==2 || whitelistModerator[msg.sender]==3);\r\n        _;\r\n    }\r\n    \r\n    modifier canModifyWhitelist {\r\n        require(whitelistModerator[msg.sender]==3);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyNewToken {\r\n        require(msg.sender==newToken);\r\n        _;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if(newToken!=0x0){\r\n            return NewToken(newToken).transfer(msg.sender,_to,_value);\r\n        }\r\n        uint256 fee=getFee(_value);\r\n        uint256 valueWithFee=_value;\r\n         if(withFee(msg.sender,_to)){\r\n            valueWithFee=valueWithFee.add(fee);\r\n        }\r\n        if (balances[msg.sender] >= valueWithFee && _value > 0) {\r\n            //Do Transfer\r\n            doTransfer(msg.sender,_to,_value,fee);\r\n            return true;\r\n        }  else { return false; }\r\n    }\r\n    \r\n    function withFee(address _from,address _to) private returns(bool){\r\n        return !whitelist[2][_from] && !whitelist[1][_to] && !whitelist[3][_to] && !whitelist[3][_from];\r\n    }\r\n    \r\n    function getFee(uint256 _value) private returns (uint256){\r\n        uint256 feeOfValue=_value.onePercent().mul(feePercantage);\r\n        uint256 fee=uint256(maxFee).power(decimals);\r\n         // Check if 1% burn fee exceeds maxfee\r\n        // If so then hard cap for burn fee is maxfee\r\n        if (feeOfValue>= fee) {\r\n            return fee;\r\n        // If 1% burn fee is less than maxfee\r\n        // then use 1% burn fee\r\n        } \r\n        if (feeOfValue < fee) {\r\n            return feeOfValue;\r\n        }\r\n    }\r\n    function doTransfer(address _from,address _to,uint256 _value,uint256 fee) internal {\r\n            balances[_from] =balances[_from].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            Transfer(_from, _to, _value);\r\n            if(withFee(_from,_to)) {\r\n                doBurn(_from,fee);\r\n            }\r\n    }\r\n    \r\n    function doBurn(address _from,uint256 _value) private returns (bool success){\r\n        require(balanceOf(_from) >= _value);   // Check if the sender has enough\r\n        balances[_from] =balances[_from].sub(_value);            // Subtract from the sender\r\n        _totalSupply =_totalSupply.sub(_value);                      // Updates totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    function burn(address _from,uint256 _value) onlyOwner public returns (bool success) {\r\n        return doBurn(_from,_value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if(newToken!=0x0){\r\n            return NewToken(newToken).transferFrom(msg.sender,_from,_to,_value);\r\n        }\r\n        uint256 fee=getFee(_value);\r\n        uint256 valueWithFee=_value;\r\n        if(withFee(_from,_to)){\r\n            valueWithFee=valueWithFee.add(fee);\r\n        }\r\n        if (balances[_from] >= valueWithFee && \r\n            (allowed[_from][msg.sender] >= valueWithFee || allowed[_from][msg.sender] == _value) &&\r\n            _value > 0 ) {\r\n            doTransfer(_from,_to,_value,fee);\r\n            if(allowed[_from][msg.sender] == _value){\r\n                allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(_value);\r\n            }\r\n            else{\r\n                allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(valueWithFee);\r\n            }\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if(newToken!=0x0){\r\n            return NewToken(newToken).approve(msg.sender,_spender,_value);\r\n        }\r\n        uint256 valueWithFee=_value;\r\n        if(withFee(_spender,0x0)){\r\n            uint256 fee=getFee(_value);  \r\n            valueWithFee=valueWithFee.add(fee);\r\n        }\r\n        allowed[msg.sender][_spender] = valueWithFee;\r\n        Approval(msg.sender, _spender, valueWithFee);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function totalSupply() constant returns (uint totalSupply){\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function setTotalSupply(uint256 _value) onlyNewToken external {\r\n        _totalSupply=_value;\r\n    }\r\n    \r\n    function setBalance(address _to,uint256 _value) onlyNewToken external {\r\n        balances[_to]=_value;\r\n    }\r\n    \r\n    function setAllowed(address _spender,address _to,uint256 _value) onlyNewToken external {\r\n        allowed[_to][_spender]=_value;\r\n    }\r\n    function getDecimals() constant returns (uint256 decimals){\r\n        return decimals;\r\n    }\r\n    \r\n    function eventTransfer(address _from, address  _to, uint256 _value) onlyNewToken external{\r\n        Transfer(_from,_to,_value);\r\n    }\r\n    \r\n    function eventApproval(address _owner, address  _spender, uint256 _value)onlyNewToken external{\r\n        Approval(_owner,_spender,_value);\r\n    }\r\n    function eventBurn(address from, uint256 value)onlyNewToken external{\r\n        Burn(from,value);\r\n    }\r\n}\r\n\r\n\r\ncontract EqualToken is StandardToken {\r\n\r\n    function () {\r\n        //if ether is sent to this address, send it back.\r\n        revert();\r\n    }\r\n\r\n    /* Public variables of the token */\r\n    \r\n    /*\r\n    NOTE:\r\n    The following variables are OPTIONAL vanities. One does not have to include them.\r\n    They allow one to customise the token contract & in no way influences the core functionality.\r\n    Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public name;                   //fancy name: eg Simon Bucks\r\n    string public symbol;                 //An identifier: eg SBX\r\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\r\n    address public oldToken=0x0;    \r\n    // Fee info\r\n    string public feeInfo = \"Each operation costs 1% of the transaction amount, but not more than 250 tokens.\";\r\n\r\n    function EqualToken() {\r\n        _owner=msg.sender;\r\n        whitelistModerator[msg.sender]=3;\r\n        whitelist[3][msg.sender]=true;\r\n        \r\n        \r\n        maxFee=250; // max fee for transfer\r\n        feePercantage=1; // fee in percents\r\n        \r\n        name = \"EQUAL\";                      // Set the name for display purposes\r\n        decimals = 18;                            // Amount of decimals for display purposes\r\n        symbol = \"EQL\";                          // Set the symbol for display purposes\r\n    }\r\n\r\n    function setOldToken(address _oldToken) onlyOwner public{\r\n        require(oldToken==0x0);\r\n        oldToken=_oldToken;\r\n        Token token=Token(_oldToken);\r\n        _totalSupply=token.totalSupply();\r\n        balances[msg.sender] =_totalSupply;\r\n        Transfer(0x0,msg.sender,_totalSupply);\r\n    }\r\n    \r\n    // Redistibute new token with same balances;\r\n    function redistribute(address[] holders) onlyOwner public{\r\n        require(oldToken!=0x0);\r\n        Token token=Token(oldToken);\r\n        for(uint256 i=0;i<holders.length;++i){\r\n            address _to=holders[i];\r\n            if(balances[_to]==0){\r\n                uint256 balance=token.balanceOf(_to);\r\n                balances[_to]=balance;\r\n                balances[msg.sender]=balances[msg.sender].sub(balance);\r\n                Transfer(msg.sender,_to,balance);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function allocate(address _address,uint256 percent) private{\r\n        uint256 bal=_totalSupply.onePercent().mul(percent);\r\n        //balances[_address]=bal;\r\n        whitelist[3][_address]=true;\r\n        doTransfer(msg.sender,_address,bal,0);\r\n    }\r\n   \r\n    // Set address access to inbound whitelist. \r\n    function setWhitelistIn(address _address,bool _value) canModifyWhitelistIn public{\r\n        setWhitelistValue(_address,_value,1);\r\n    }\r\n    \r\n    // Set address access to outbound whitelist. \r\n    function setWhitelistOut(address _address,bool _value) canModifyWhitelistOut public{\r\n        setWhitelistValue(_address,_value,2);\r\n    }\r\n    \r\n    // Set address access to inbound and outbound whitelist. \r\n    function setWhitelist(address _address,bool _value) canModifyWhitelist public{\r\n        setWhitelistValue(_address,_value,3);\r\n    }\r\n    \r\n    function setWhitelistValue(address _address,bool _withoutFee,uint8 _type) internal {\r\n        whitelist[_type][_address]=_withoutFee;\r\n    }\r\n    \r\n    // Set address of moderator whitelist\r\n    // _level can be: 0 -not moderator, 1 -inbound,2 - outbound, 3 -all\r\n    function setWhitelistModerator(address _address,uint8 _level) onlyOwner public {\r\n        whitelistModerator[_address]=_level;\r\n    }\r\n    \r\n    //Set max fee value\r\n    function setMaxFee(uint256 newFee) onlyOwner public {\r\n        maxFee=newFee;\r\n    }\r\n    \r\n    //Set fee percent value\r\n    function setFeePercent(uint256 newFee) onlyOwner public {\r\n        feePercantage=newFee;\r\n    }\r\n    \r\n    //Set fee info\r\n    function setFeeInfo(string newFeeInfo) onlyOwner public {\r\n       feeInfo=newFeeInfo;\r\n    }\r\n    \r\n    function setNewToken(address _newtoken) onlyOwner public{\r\n        newToken=_newtoken;\r\n        UpdateToken(_newtoken);\r\n    }\r\n    \r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        if(!approve(_spender,_value)){\r\n            return false;\r\n        }\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { revert(); }\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"eventTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFeeInfo\",\"type\":\"string\"}],\"name\":\"setFeeInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"eventBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhitelistIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhitelistOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldToken\",\"type\":\"address\"}],\"name\":\"setOldToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newtoken\",\"type\":\"address\"}],\"name\":\"setNewToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setMaxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"eventApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercantage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holders\",\"type\":\"address[]\"}],\"name\":\"redistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"setWhitelistModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDecimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newtoken\",\"type\":\"address\"}],\"name\":\"UpdateToken\",\"type\":\"event\"}]", "ContractName": "EqualToken", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://69a021846381dd2a17b93e23924abff41470c5a59121fc106cc174e13e576eb7"}