{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC1155.sol\\\";\\nimport \\\"./interface/IERC1155Metadata.sol\\\";\\nimport \\\"./interface/IERC1155Receiver.sol\\\";\\n\\ncontract ERC1155 is IERC1155, IERC1155Metadata {\\n    /*//////////////////////////////////////////////////////////////\\n                        State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n    string public symbol;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Mappings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    mapping(uint256 => string) internal _uri;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        return _uri[tokenId];\\n    }\\n\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf[accounts[i]][ids[i]];\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC1155 logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        address owner = msg.sender;\\n        require(owner != operator, \\\"APPROVING_SELF\\\");\\n        isApprovedForAll[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(from == msg.sender || isApprovedForAll[from][msg.sender], \\\"!OWNER_OR_APPROVED\\\");\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(from == msg.sender || isApprovedForAll[from][msg.sender], \\\"!OWNER_OR_APPROVED\\\");\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Internal logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"TO_ZERO_ADDR\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = balanceOf[from][id];\\n        require(fromBalance >= amount, \\\"INSUFFICIENT_BAL\\\");\\n        unchecked {\\n            balanceOf[from][id] = fromBalance - amount;\\n        }\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n        require(to != address(0), \\\"TO_ZERO_ADDR\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = balanceOf[from][id];\\n            require(fromBalance >= amount, \\\"INSUFFICIENT_BAL\\\");\\n            unchecked {\\n                balanceOf[from][id] = fromBalance - amount;\\n            }\\n            balanceOf[to][id] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory newuri) internal virtual {\\n        _uri[tokenId] = newuri;\\n    }\\n\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"TO_ZERO_ADDR\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        balanceOf[to][id] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"TO_ZERO_ADDR\\\");\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"FROM_ZERO_ADDR\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = balanceOf[from][id];\\n        require(fromBalance >= amount, \\\"INSUFFICIENT_BAL\\\");\\n        unchecked {\\n            balanceOf[from][id] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"FROM_ZERO_ADDR\\\");\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        address operator = msg.sender;\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = balanceOf[from][id];\\n            require(fromBalance >= amount, \\\"INSUFFICIENT_BAL\\\");\\n            unchecked {\\n                balanceOf[from][id] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"TOKENS_REJECTED\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"!ERC1155RECEIVER\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"TOKENS_REJECTED\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"!ERC1155RECEIVER\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title ERC-1155 Multi Token Standard\\n    @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\n */\\ninterface IERC1155 {\\n    /**\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        The `_operator` argument MUST be msg.sender.\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\n        The `_id` argument MUST be the token type being transferred.\\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\n    */\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _value\\n    );\\n\\n    /**\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        The `_operator` argument MUST be msg.sender.\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\n        The `_ids` argument MUST be the list of tokens being transferred.\\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\n    */\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _values\\n    );\\n\\n    /**\\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\\n    */\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n    /**\\n        @dev MUST emit when the URI is updated for a token ID.\\n        URIs are defined in RFC 3986.\\n        The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\n    */\\n    event URI(string _value, uint256 indexed _id);\\n\\n    /**\\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `_to` is the zero address.\\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n        MUST revert on any other error.\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param _from    Source address\\n        @param _to      Target address\\n        @param _id      ID of the token type\\n        @param _value   Transfer amount\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n    */\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\n\\n    /**\\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `_to` is the zero address.\\n        MUST revert if length of `_ids` is not the same as length of `_values`.\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\n        MUST revert on any other error.\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param _from    Source address\\n        @param _to      Target address\\n        @param _ids     IDs of each token type (order and length must match _values array)\\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\n    */\\n    function safeBatchTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n        @notice Get the balance of an account's Tokens.\\n        @param _owner  The address of the token holder\\n        @param _id     ID of the Token\\n        @return        The _owner's balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n\\n    /**\\n        @notice Get the balance of multiple account/token pairs\\n        @param _owners The addresses of the token holders\\n        @param _ids    ID of the Tokens\\n        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\\n     */\\n    function balanceOfBatch(\\n        address[] calldata _owners,\\n        uint256[] calldata _ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n        @dev MUST emit the ApprovalForAll event on success.\\n        @param _operator  Address to add to the set of authorized operators\\n        @param _approved  True if the operator is approved, false to revoke approval\\n    */\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n\\n    /**\\n        @notice Queries the approval status of an operator for a given owner.\\n        @param _owner     The owner of the Tokens\\n        @param _operator  Address of authorized operator\\n        @return           True if the operator is approved, false if not\\n    */\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC1155Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n    Note: The ERC-165 identifier for this interface is 0x0e89341c.\\n*/\\ninterface IERC1155Metadata {\\n    /**\\n        @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n        @dev URIs are defined in RFC 3986.\\n        The URI may point to a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\n        @return URI string\\n    */\\n    function uri(uint256 _id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/eip/interface/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/BatchMintMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  @title   Batch-mint Metadata\\n *  @notice  The `BatchMintMetadata` is a contract extension for any base NFT contract. It lets the smart contract\\n *           using this extension set metadata for `n` number of NFTs all at once. This is enabled by storing a single\\n *           base URI for a batch of `n` NFTs, where the metadata for each NFT in a relevant batch is `baseURI/tokenId`.\\n */\\n\\ncontract BatchMintMetadata {\\n    /// @dev Invalid index for batch\\n    error BatchMintInvalidBatchId(uint256 index);\\n\\n    /// @dev Invalid token\\n    error BatchMintInvalidTokenId(uint256 tokenId);\\n\\n    /// @dev Metadata frozen\\n    error BatchMintMetadataFrozen(uint256 batchId);\\n\\n    /// @dev Largest tokenId of each batch of tokens with the same baseURI + 1 {ex: batchId 100 at position 0 includes tokens 0-99}\\n    uint256[] private batchIds;\\n\\n    /// @dev Mapping from id of a batch of tokens => to base URI for the respective batch of tokens.\\n    mapping(uint256 => string) private baseURI;\\n\\n    /// @dev Mapping from id of a batch of tokens => to whether the base URI for the respective batch of tokens is frozen.\\n    mapping(uint256 => bool) public batchFrozen;\\n\\n    /// @dev This event emits when the metadata of all tokens are frozen.\\n    /// While not currently supported by marketplaces, this event allows\\n    /// future indexing if desired.\\n    event MetadataFrozen();\\n\\n    // @dev This event emits when the metadata of a range of tokens is updated.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n\\n    /**\\n     *  @notice         Returns the count of batches of NFTs.\\n     *  @dev            Each batch of tokens has an in ID and an associated `baseURI`.\\n     *                  See {batchIds}.\\n     */\\n    function getBaseURICount() public view returns (uint256) {\\n        return batchIds.length;\\n    }\\n\\n    /**\\n     *  @notice         Returns the ID for the batch of tokens at the given index.\\n     *  @dev            See {getBaseURICount}.\\n     *  @param _index   Index of the desired batch in batchIds array.\\n     */\\n    function getBatchIdAtIndex(uint256 _index) public view returns (uint256) {\\n        if (_index >= getBaseURICount()) {\\n            revert BatchMintInvalidBatchId(_index);\\n        }\\n        return batchIds[_index];\\n    }\\n\\n    /// @dev Returns the id for the batch of tokens the given tokenId belongs to.\\n    function _getBatchId(uint256 _tokenId) internal view returns (uint256 batchId, uint256 index) {\\n        uint256 numOfTokenBatches = getBaseURICount();\\n        uint256[] memory indices = batchIds;\\n\\n        for (uint256 i = 0; i < numOfTokenBatches; i += 1) {\\n            if (_tokenId < indices[i]) {\\n                index = i;\\n                batchId = indices[i];\\n\\n                return (batchId, index);\\n            }\\n        }\\n\\n        revert BatchMintInvalidTokenId(_tokenId);\\n    }\\n\\n    /// @dev Returns the baseURI for a token. The intended metadata URI for the token is baseURI + tokenId.\\n    function _getBaseURI(uint256 _tokenId) internal view returns (string memory) {\\n        uint256 numOfTokenBatches = getBaseURICount();\\n        uint256[] memory indices = batchIds;\\n\\n        for (uint256 i = 0; i < numOfTokenBatches; i += 1) {\\n            if (_tokenId < indices[i]) {\\n                return baseURI[indices[i]];\\n            }\\n        }\\n\\n        revert BatchMintInvalidTokenId(_tokenId);\\n    }\\n\\n    /// @dev returns the starting tokenId of a given batchId.\\n    function _getBatchStartId(uint256 _batchID) internal view returns (uint256) {\\n        uint256 numOfTokenBatches = getBaseURICount();\\n        uint256[] memory indices = batchIds;\\n\\n        for (uint256 i = 0; i < numOfTokenBatches; i++) {\\n            if (_batchID == indices[i]) {\\n                if (i > 0) {\\n                    return indices[i - 1];\\n                }\\n                return 0;\\n            }\\n        }\\n\\n        revert BatchMintInvalidBatchId(_batchID);\\n    }\\n\\n    /// @dev Sets the base URI for the batch of tokens with the given batchId.\\n    function _setBaseURI(uint256 _batchId, string memory _baseURI) internal {\\n        if (batchFrozen[_batchId]) {\\n            revert BatchMintMetadataFrozen(_batchId);\\n        }\\n        baseURI[_batchId] = _baseURI;\\n        emit BatchMetadataUpdate(_getBatchStartId(_batchId), _batchId);\\n    }\\n\\n    /// @dev Freezes the base URI for the batch of tokens with the given batchId.\\n    function _freezeBaseURI(uint256 _batchId) internal {\\n        string memory baseURIForBatch = baseURI[_batchId];\\n        if (bytes(baseURIForBatch).length == 0) {\\n            revert BatchMintInvalidBatchId(_batchId);\\n        }\\n        batchFrozen[_batchId] = true;\\n        emit MetadataFrozen();\\n    }\\n\\n    /// @dev Mints a batch of tokenIds and associates a common baseURI to all those Ids.\\n    function _batchMintMetadata(\\n        uint256 _startId,\\n        uint256 _amountToMint,\\n        string memory _baseURIForTokens\\n    ) internal returns (uint256 nextTokenIdToMint, uint256 batchId) {\\n        batchId = _startId + _amountToMint;\\n        nextTokenIdToMint = batchId;\\n\\n        batchIds.push(batchId);\\n\\n        baseURI[batchId] = _baseURIForTokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/ContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IContractMetadata.sol\\\";\\n\\n/**\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nabstract contract ContractMetadata is IContractMetadata {\\n    /// @dev The sender is not authorized to perform the action\\n    error ContractMetadataUnauthorized();\\n\\n    /// @notice Returns the contract metadata URI.\\n    string public override contractURI;\\n\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert ContractMetadataUnauthorized();\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        string memory prevURI = contractURI;\\n        contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/DelayedReveal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IDelayedReveal.sol\\\";\\n\\n/**\\n *  @title   Delayed Reveal\\n *  @notice  Thirdweb's `DelayedReveal` is a contract extension for base NFT contracts. It lets you create batches of\\n *           'delayed-reveal' NFTs. You can learn more about the usage of delayed reveal NFTs here - https://blog.thirdweb.com/delayed-reveal-nfts\\n */\\n\\nabstract contract DelayedReveal is IDelayedReveal {\\n    /// @dev The contract doesn't have any url to be delayed revealed\\n    error DelayedRevealNothingToReveal();\\n\\n    /// @dev The result of the returned an incorrect hash\\n    error DelayedRevealIncorrectResultHash(bytes32 expected, bytes32 actual);\\n\\n    /// @dev Mapping from tokenId of a batch of tokens => to delayed reveal data.\\n    mapping(uint256 => bytes) public encryptedData;\\n\\n    /// @dev Sets the delayed reveal data for a batchId.\\n    function _setEncryptedData(uint256 _batchId, bytes memory _encryptedData) internal {\\n        encryptedData[_batchId] = _encryptedData;\\n    }\\n\\n    /**\\n     *  @notice             Returns revealed URI for a batch of NFTs.\\n     *  @dev                Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.\\n     *                      Reverts if there's no encrypted URI for `_batchId`.\\n     *                      See {encryptDecrypt}.\\n     *\\n     *  @param _batchId     ID of the batch for which URI is being revealed.\\n     *  @param _key         Secure key used by caller/admin for encryption of baseURI.\\n     *\\n     *  @return revealedURI Decrypted base URI.\\n     */\\n    function getRevealURI(uint256 _batchId, bytes calldata _key) public view returns (string memory revealedURI) {\\n        bytes memory data = encryptedData[_batchId];\\n        if (data.length == 0) {\\n            revert DelayedRevealNothingToReveal();\\n        }\\n\\n        (bytes memory encryptedURI, bytes32 provenanceHash) = abi.decode(data, (bytes, bytes32));\\n\\n        revealedURI = string(encryptDecrypt(encryptedURI, _key));\\n\\n        if (keccak256(abi.encodePacked(revealedURI, _key, block.chainid)) != provenanceHash) {\\n            revert DelayedRevealIncorrectResultHash(\\n                provenanceHash,\\n                keccak256(abi.encodePacked(revealedURI, _key, block.chainid))\\n            );\\n        }\\n    }\\n\\n    /**\\n     *  @notice         Encrypt/decrypt data on chain.\\n     *  @dev            Encrypt/decrypt given `data` with `key`. Uses inline assembly.\\n     *                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\\n     *\\n     *  @param data     Bytes of data to encrypt/decrypt.\\n     *  @param key      Secure key used by caller for encryption/decryption.\\n     *\\n     *  @return result  Output after encryption/decryption of given data.\\n     */\\n    function encryptDecrypt(bytes memory data, bytes calldata key) public pure override returns (bytes memory result) {\\n        // Store data length on stack for later use\\n        uint256 length = data.length;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Set result to free memory pointer\\n            result := mload(0x40)\\n            // Increase free memory pointer by lenght + 32\\n            mstore(0x40, add(add(result, length), 32))\\n            // Set result length\\n            mstore(result, length)\\n        }\\n\\n        // Iterate over the data stepping by 32 bytes\\n        for (uint256 i = 0; i < length; i += 32) {\\n            // Generate hash of the key and offset\\n            bytes32 hash = keccak256(abi.encodePacked(key, i));\\n\\n            bytes32 chunk;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // Read 32-bytes data chunk\\n                chunk := mload(add(data, add(i, 32)))\\n            }\\n            // XOR the chunk with hash\\n            chunk ^= hash;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // Write 32-byte encrypted chunk\\n                mstore(add(result, add(i, 32)), chunk)\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @notice         Returns whether the relvant batch of NFTs is subject to a delayed reveal.\\n     *  @dev            Returns `true` if `_batchId`'s base URI is encrypted.\\n     *  @param _batchId ID of a batch of NFTs.\\n     */\\n    function isEncryptedBatch(uint256 _batchId) public view returns (bool) {\\n        return encryptedData[_batchId].length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/Drop1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IDrop1155.sol\\\";\\nimport \\\"../lib/MerkleProof.sol\\\";\\n\\nabstract contract Drop1155 is IDrop1155 {\\n    /// @dev The sender is not authorized to perform the action\\n    error DropUnauthorized();\\n\\n    /// @dev Exceeded the max token total supply\\n    error DropExceedMaxSupply();\\n\\n    /// @dev No active claim condition\\n    error DropNoActiveCondition();\\n\\n    /// @dev Claim condition invalid currency or price\\n    error DropClaimInvalidTokenPrice(\\n        address expectedCurrency,\\n        uint256 expectedPricePerToken,\\n        address actualCurrency,\\n        uint256 actualExpectedPricePerToken\\n    );\\n\\n    /// @dev Claim condition exceeded limit\\n    error DropClaimExceedLimit(uint256 expected, uint256 actual);\\n\\n    /// @dev Claim condition exceeded max supply\\n    error DropClaimExceedMaxSupply(uint256 expected, uint256 actual);\\n\\n    /// @dev Claim condition not started yet\\n    error DropClaimNotStarted(uint256 expected, uint256 actual);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from token ID => the set of all claim conditions, at any given moment, for tokens of the token ID.\\n    mapping(uint256 => ClaimConditionList) public claimCondition;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Drop logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets an account claim tokens.\\n    function claim(\\n        address _receiver,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _pricePerToken,\\n        AllowlistProof calldata _allowlistProof,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        _beforeClaim(_tokenId, _receiver, _quantity, _currency, _pricePerToken, _allowlistProof, _data);\\n\\n        uint256 activeConditionId = getActiveClaimConditionId(_tokenId);\\n\\n        verifyClaim(\\n            activeConditionId,\\n            _dropMsgSender(),\\n            _tokenId,\\n            _quantity,\\n            _currency,\\n            _pricePerToken,\\n            _allowlistProof\\n        );\\n\\n        // Update contract state.\\n        claimCondition[_tokenId].conditions[activeConditionId].supplyClaimed += _quantity;\\n        claimCondition[_tokenId].supplyClaimedByWallet[activeConditionId][_dropMsgSender()] += _quantity;\\n\\n        // If there's a price, collect price.\\n        collectPriceOnClaim(_tokenId, address(0), _quantity, _currency, _pricePerToken);\\n\\n        // Mint the relevant NFTs to claimer.\\n        transferTokensOnClaim(_receiver, _tokenId, _quantity);\\n\\n        emit TokensClaimed(activeConditionId, _dropMsgSender(), _receiver, _tokenId, _quantity);\\n\\n        _afterClaim(_tokenId, _receiver, _quantity, _currency, _pricePerToken, _allowlistProof, _data);\\n    }\\n\\n    /// @dev Lets a contract admin set claim conditions.\\n    function setClaimConditions(\\n        uint256 _tokenId,\\n        ClaimCondition[] calldata _conditions,\\n        bool _resetClaimEligibility\\n    ) external virtual override {\\n        if (!_canSetClaimConditions()) {\\n            revert DropUnauthorized();\\n        }\\n        ClaimConditionList storage conditionList = claimCondition[_tokenId];\\n        uint256 existingStartIndex = conditionList.currentStartId;\\n        uint256 existingPhaseCount = conditionList.count;\\n\\n        /**\\n         *  The mapping `supplyClaimedByWallet` uses a claim condition's UID as a key.\\n         *\\n         *  If `_resetClaimEligibility == true`, we assign completely new UIDs to the claim\\n         *  conditions in `_conditions`, effectively resetting the restrictions on claims expressed\\n         *  by `supplyClaimedByWallet`.\\n         */\\n        uint256 newStartIndex = existingStartIndex;\\n        if (_resetClaimEligibility) {\\n            newStartIndex = existingStartIndex + existingPhaseCount;\\n        }\\n\\n        conditionList.count = _conditions.length;\\n        conditionList.currentStartId = newStartIndex;\\n\\n        uint256 lastConditionStartTimestamp;\\n        for (uint256 i = 0; i < _conditions.length; i++) {\\n            require(i == 0 || lastConditionStartTimestamp < _conditions[i].startTimestamp, \\\"ST\\\");\\n\\n            uint256 supplyClaimedAlready = conditionList.conditions[newStartIndex + i].supplyClaimed;\\n            if (supplyClaimedAlready > _conditions[i].maxClaimableSupply) {\\n                revert DropExceedMaxSupply();\\n            }\\n\\n            conditionList.conditions[newStartIndex + i] = _conditions[i];\\n            conditionList.conditions[newStartIndex + i].supplyClaimed = supplyClaimedAlready;\\n\\n            lastConditionStartTimestamp = _conditions[i].startTimestamp;\\n        }\\n\\n        /**\\n         *  Gas refunds (as much as possible)\\n         *\\n         *  If `_resetClaimEligibility == true`, we assign completely new UIDs to the claim\\n         *  conditions in `_conditions`. So, we delete claim conditions with UID < `newStartIndex`.\\n         *\\n         *  If `_resetClaimEligibility == false`, and there are more existing claim conditions\\n         *  than in `_conditions`, we delete the existing claim conditions that don't get replaced\\n         *  by the conditions in `_conditions`.\\n         */\\n        if (_resetClaimEligibility) {\\n            for (uint256 i = existingStartIndex; i < newStartIndex; i++) {\\n                delete conditionList.conditions[i];\\n            }\\n        } else {\\n            if (existingPhaseCount > _conditions.length) {\\n                for (uint256 i = _conditions.length; i < existingPhaseCount; i++) {\\n                    delete conditionList.conditions[newStartIndex + i];\\n                }\\n            }\\n        }\\n\\n        emit ClaimConditionsUpdated(_tokenId, _conditions, _resetClaimEligibility);\\n    }\\n\\n    /// @dev Checks a request to claim NFTs against the active claim condition's criteria.\\n    function verifyClaim(\\n        uint256 _conditionId,\\n        address _claimer,\\n        uint256 _tokenId,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _pricePerToken,\\n        AllowlistProof calldata _allowlistProof\\n    ) public view virtual returns (bool isOverride) {\\n        ClaimCondition memory currentClaimPhase = claimCondition[_tokenId].conditions[_conditionId];\\n        uint256 claimLimit = currentClaimPhase.quantityLimitPerWallet;\\n        uint256 claimPrice = currentClaimPhase.pricePerToken;\\n        address claimCurrency = currentClaimPhase.currency;\\n\\n        /*\\n         * Here `isOverride` implies that if the merkle proof verification fails,\\n         * the claimer would claim through open claim limit instead of allowlisted limit.\\n         */\\n        if (currentClaimPhase.merkleRoot != bytes32(0)) {\\n            (isOverride, ) = MerkleProof.verify(\\n                _allowlistProof.proof,\\n                currentClaimPhase.merkleRoot,\\n                keccak256(\\n                    abi.encodePacked(\\n                        _claimer,\\n                        _allowlistProof.quantityLimitPerWallet,\\n                        _allowlistProof.pricePerToken,\\n                        _allowlistProof.currency\\n                    )\\n                )\\n            );\\n        }\\n\\n        if (isOverride) {\\n            claimLimit = _allowlistProof.quantityLimitPerWallet != 0\\n                ? _allowlistProof.quantityLimitPerWallet\\n                : claimLimit;\\n            claimPrice = _allowlistProof.pricePerToken != type(uint256).max\\n                ? _allowlistProof.pricePerToken\\n                : claimPrice;\\n            claimCurrency = _allowlistProof.pricePerToken != type(uint256).max && _allowlistProof.currency != address(0)\\n                ? _allowlistProof.currency\\n                : claimCurrency;\\n        }\\n\\n        uint256 supplyClaimedByWallet = claimCondition[_tokenId].supplyClaimedByWallet[_conditionId][_claimer];\\n\\n        if (_currency != claimCurrency || _pricePerToken != claimPrice) {\\n            revert DropClaimInvalidTokenPrice(_currency, _pricePerToken, claimCurrency, claimPrice);\\n        }\\n\\n        if (_quantity == 0 || (_quantity + supplyClaimedByWallet > claimLimit)) {\\n            revert DropClaimExceedLimit(claimLimit, _quantity + supplyClaimedByWallet);\\n        }\\n\\n        if (currentClaimPhase.supplyClaimed + _quantity > currentClaimPhase.maxClaimableSupply) {\\n            revert DropClaimExceedMaxSupply(\\n                currentClaimPhase.maxClaimableSupply,\\n                currentClaimPhase.supplyClaimed + _quantity\\n            );\\n        }\\n\\n        if (currentClaimPhase.startTimestamp > block.timestamp) {\\n            revert DropClaimNotStarted(currentClaimPhase.startTimestamp, block.timestamp);\\n        }\\n    }\\n\\n    /// @dev At any given moment, returns the uid for the active claim condition.\\n    function getActiveClaimConditionId(uint256 _tokenId) public view returns (uint256) {\\n        ClaimConditionList storage conditionList = claimCondition[_tokenId];\\n        for (uint256 i = conditionList.currentStartId + conditionList.count; i > conditionList.currentStartId; i--) {\\n            if (block.timestamp >= conditionList.conditions[i - 1].startTimestamp) {\\n                return i - 1;\\n            }\\n        }\\n\\n        revert DropNoActiveCondition();\\n    }\\n\\n    /// @dev Returns the claim condition at the given uid.\\n    function getClaimConditionById(\\n        uint256 _tokenId,\\n        uint256 _conditionId\\n    ) external view returns (ClaimCondition memory condition) {\\n        condition = claimCondition[_tokenId].conditions[_conditionId];\\n    }\\n\\n    /// @dev Returns the supply claimed by claimer for a given conditionId.\\n    function getSupplyClaimedByWallet(\\n        uint256 _tokenId,\\n        uint256 _conditionId,\\n        address _claimer\\n    ) public view returns (uint256 supplyClaimedByWallet) {\\n        supplyClaimedByWallet = claimCondition[_tokenId].supplyClaimedByWallet[_conditionId][_claimer];\\n    }\\n\\n    /*////////////////////////////////////////////////////////////////////\\n        Optional hooks that can be implemented in the derived contract\\n    ///////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Exposes the ability to override the msg sender.\\n    function _dropMsgSender() internal virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /// @dev Runs before every `claim` function call.\\n    function _beforeClaim(\\n        uint256 _tokenId,\\n        address _receiver,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _pricePerToken,\\n        AllowlistProof calldata _allowlistProof,\\n        bytes memory _data\\n    ) internal virtual {}\\n\\n    /// @dev Runs after every `claim` function call.\\n    function _afterClaim(\\n        uint256 _tokenId,\\n        address _receiver,\\n        uint256 _quantity,\\n        address _currency,\\n        uint256 _pricePerToken,\\n        AllowlistProof calldata _allowlistProof,\\n        bytes memory _data\\n    ) internal virtual {}\\n\\n    /*///////////////////////////////////////////////////////////////\\n        Virtual functions: to be implemented in derived contract\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Collects and distributes the primary sale value of NFTs being claimed.\\n    function collectPriceOnClaim(\\n        uint256 _tokenId,\\n        address _primarySaleRecipient,\\n        uint256 _quantityToClaim,\\n        address _currency,\\n        uint256 _pricePerToken\\n    ) internal virtual;\\n\\n    /// @dev Transfers the NFTs being claimed.\\n    function transferTokensOnClaim(address _to, uint256 _tokenId, uint256 _quantityBeingClaimed) internal virtual;\\n\\n    /// @dev Determine what wallet can update claim conditions\\n    function _canSetClaimConditions() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/LazyMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/ILazyMint.sol\\\";\\nimport \\\"./BatchMintMetadata.sol\\\";\\n\\n/**\\n *  The `LazyMint` is a contract extension for any base NFT contract. It lets you 'lazy mint' any number of NFTs\\n *  at once. Here, 'lazy mint' means defining the metadata for particular tokenIds of your NFT contract, without actually\\n *  minting a non-zero balance of NFTs of those tokenIds.\\n */\\n\\nabstract contract LazyMint is ILazyMint, BatchMintMetadata {\\n    /// @dev The sender is not authorized to perform the action\\n    error LazyMintUnauthorized();\\n    error LazyMintInvalidAmount();\\n\\n    /// @notice The tokenId assigned to the next new NFT to be lazy minted.\\n    uint256 internal nextTokenIdToLazyMint;\\n\\n    /**\\n     *  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\\n     *\\n     *  @param _amount           The number of NFTs to lazy mint.\\n     *  @param _baseURIForTokens The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each\\n     *                           of those NFTs is `${baseURIForTokens}/${tokenId}`.\\n     *  @param _data             Additional bytes data to be used at the discretion of the consumer of the contract.\\n     *  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together.\\n     */\\n    function lazyMint(\\n        uint256 _amount,\\n        string calldata _baseURIForTokens,\\n        bytes calldata _data\\n    ) public virtual override returns (uint256 batchId) {\\n        if (!_canLazyMint()) {\\n            revert LazyMintUnauthorized();\\n        }\\n\\n        if (_amount == 0) {\\n            revert LazyMintInvalidAmount();\\n        }\\n\\n        uint256 startId = nextTokenIdToLazyMint;\\n\\n        (nextTokenIdToLazyMint, batchId) = _batchMintMetadata(startId, _amount, _baseURIForTokens);\\n\\n        emit TokensLazyMinted(startId, startId + _amount - 1, _baseURIForTokens, _data);\\n\\n        return batchId;\\n    }\\n\\n    /// @dev Returns whether lazy minting can be performed in the given execution context.\\n    function _canLazyMint() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/Address.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        address sender = _msgSender();\\n        bool isForwarder = msg.sender != sender;\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (isForwarder) {\\n                results[i] = Address.functionDelegateCall(address(this), abi.encodePacked(data[i], sender));\\n            } else {\\n                results[i] = Address.functionDelegateCall(address(this), data[i]);\\n            }\\n        }\\n        return results;\\n    }\\n\\n    /// @notice Returns the sender in the given execution context.\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IOwnable.sol\\\";\\n\\n/**\\n *  @title   Ownable\\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *           information about who the contract's owner is.\\n */\\n\\nabstract contract Ownable is IOwnable {\\n    /// @dev The sender is not authorized to perform the action\\n    error OwnableUnauthorized();\\n\\n    /// @dev Owner of the contract (purpose: OpenSea compatibility)\\n    address private _owner;\\n\\n    /// @dev Reverts if caller is not the owner.\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner) {\\n            revert OwnableUnauthorized();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Returns the owner of the contract.\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     *  @notice Lets an authorized wallet set a new owner for the contract.\\n     *  @param _newOwner The address to set as the new owner of the contract.\\n     */\\n    function setOwner(address _newOwner) external override {\\n        if (!_canSetOwner()) {\\n            revert OwnableUnauthorized();\\n        }\\n        _setupOwner(_newOwner);\\n    }\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        address _prevOwner = _owner;\\n        _owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/PrimarySale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IPrimarySale.sol\\\";\\n\\n/**\\n *  @title   Primary Sale\\n *  @notice  Thirdweb's `PrimarySale` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of primary sales, and lets the inheriting contract perform conditional logic that uses information about\\n *           primary sales, if desired.\\n */\\n\\nabstract contract PrimarySale is IPrimarySale {\\n    /// @dev The sender is not authorized to perform the action\\n    error PrimarySaleUnauthorized();\\n\\n    /// @dev The recipient is invalid\\n    error PrimarySaleInvalidRecipient(address recipient);\\n\\n    /// @dev The address that receives all primary sales value.\\n    address private recipient;\\n\\n    /// @dev Returns primary sale recipient address.\\n    function primarySaleRecipient() public view override returns (address) {\\n        return recipient;\\n    }\\n\\n    /**\\n     *  @notice         Updates primary sale recipient.\\n     *  @dev            Caller should be authorized to set primary sales info.\\n     *                  See {_canSetPrimarySaleRecipient}.\\n     *                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\\n     *\\n     *  @param _saleRecipient   Address to be set as new recipient of primary sales.\\n     */\\n    function setPrimarySaleRecipient(address _saleRecipient) external override {\\n        if (!_canSetPrimarySaleRecipient()) {\\n            revert PrimarySaleUnauthorized();\\n        }\\n        _setupPrimarySaleRecipient(_saleRecipient);\\n    }\\n\\n    /// @dev Lets a contract admin set the recipient for all primary sales.\\n    function _setupPrimarySaleRecipient(address _saleRecipient) internal {\\n        if (_saleRecipient == address(0)) {\\n            revert PrimarySaleInvalidRecipient(_saleRecipient);\\n        }\\n\\n        recipient = _saleRecipient;\\n        emit PrimarySaleRecipientUpdated(_saleRecipient);\\n    }\\n\\n    /// @dev Returns whether primary sale recipient can be set in the given execution context.\\n    function _canSetPrimarySaleRecipient() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IRoyalty.sol\\\";\\n\\n/**\\n *  @title   Royalty\\n *  @notice  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *           that uses information about royalty fees, if desired.\\n *\\n *  @dev     The `Royalty` contract is ERC2981 compliant.\\n */\\n\\nabstract contract Royalty is IRoyalty {\\n    /// @dev The sender is not authorized to perform the action\\n    error RoyaltyUnauthorized();\\n\\n    /// @dev The recipient is invalid\\n    error RoyaltyInvalidRecipient(address recipient);\\n\\n    /// @dev The fee bps exceeded the max value\\n    error RoyaltyExceededMaxFeeBps(uint256 max, uint256 actual);\\n\\n    /// @dev The (default) address that receives all royalty value.\\n    address private royaltyRecipient;\\n\\n    /// @dev The (default) % of a sale to take as royalty (in basis points).\\n    uint16 private royaltyBps;\\n\\n    /// @dev Token ID => royalty recipient and bps for token\\n    mapping(uint256 => RoyaltyInfo) private royaltyInfoForToken;\\n\\n    /**\\n     *  @notice   View royalty info for a given token and sale price.\\n     *  @dev      Returns royalty amount and recipient for `tokenId` and `salePrice`.\\n     *  @param tokenId          The tokenID of the NFT for which to query royalty info.\\n     *  @param salePrice        Sale price of the token.\\n     *\\n     *  @return receiver        Address of royalty recipient account.\\n     *  @return royaltyAmount   Royalty amount calculated at current royaltyBps value.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view virtual override returns (address receiver, uint256 royaltyAmount) {\\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(tokenId);\\n        receiver = recipient;\\n        royaltyAmount = (salePrice * bps) / 10_000;\\n    }\\n\\n    /**\\n     *  @notice          View royalty info for a given token.\\n     *  @dev             Returns royalty recipient and bps for `_tokenId`.\\n     *  @param _tokenId  The tokenID of the NFT for which to query royalty info.\\n     */\\n    function getRoyaltyInfoForToken(uint256 _tokenId) public view override returns (address, uint16) {\\n        RoyaltyInfo memory royaltyForToken = royaltyInfoForToken[_tokenId];\\n\\n        return\\n            royaltyForToken.recipient == address(0)\\n                ? (royaltyRecipient, uint16(royaltyBps))\\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\\n    }\\n\\n    /**\\n     *  @notice Returns the defualt royalty recipient and BPS for this contract's NFTs.\\n     */\\n    function getDefaultRoyaltyInfo() external view override returns (address, uint16) {\\n        return (royaltyRecipient, uint16(royaltyBps));\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps.\\n     *  @dev            Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\\n     *\\n     *  @param _royaltyRecipient   Address to be set as default royalty recipient.\\n     *  @param _royaltyBps         Updated royalty bps.\\n     */\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert RoyaltyUnauthorized();\\n        }\\n\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /// @dev Lets a contract admin update the default royalty recipient and bps.\\n    function _setupDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) internal {\\n        if (_royaltyBps > 10_000) {\\n            revert RoyaltyExceededMaxFeeBps(10_000, _royaltyBps);\\n        }\\n\\n        royaltyRecipient = _royaltyRecipient;\\n        royaltyBps = uint16(_royaltyBps);\\n\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps for a particular token.\\n     *  @dev            Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\\n     *\\n     *  @param _recipient   Address to be set as royalty recipient for given token Id.\\n     *  @param _bps         Updated royalty bps for the token Id.\\n     */\\n    function setRoyaltyInfoForToken(uint256 _tokenId, address _recipient, uint256 _bps) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert RoyaltyUnauthorized();\\n        }\\n\\n        _setupRoyaltyInfoForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Lets a contract admin set the royalty recipient and bps for a particular token Id.\\n    function _setupRoyaltyInfoForToken(uint256 _tokenId, address _recipient, uint256 _bps) internal {\\n        if (_bps > 10_000) {\\n            revert RoyaltyExceededMaxFeeBps(10_000, _bps);\\n        }\\n\\n        royaltyInfoForToken[_tokenId] = RoyaltyInfo({ recipient: _recipient, bps: _bps });\\n\\n        emit RoyaltyForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Returns whether royalty info can be set in the given execution context.\\n    function _canSetRoyaltyInfo() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IClaimCondition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  The interface `IClaimCondition` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\\n *\\n *  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\\n *  or added to by the contract admin. At any moment, there is only one active claim condition.\\n */\\n\\ninterface IClaimCondition {\\n    /**\\n     *  @notice The criteria that make up a claim condition.\\n     *\\n     *  @param startTimestamp                 The unix timestamp after which the claim condition applies.\\n     *                                        The same claim condition applies until the `startTimestamp`\\n     *                                        of the next claim condition.\\n     *\\n     *  @param maxClaimableSupply             The maximum total number of tokens that can be claimed under\\n     *                                        the claim condition.\\n     *\\n     *  @param supplyClaimed                  At any given point, the number of tokens that have been claimed\\n     *                                        under the claim condition.\\n     *\\n     *  @param quantityLimitPerWallet         The maximum number of tokens that can be claimed by a wallet.\\n     *\\n     *  @param merkleRoot                     The allowlist of addresses that can claim tokens under the claim\\n     *                                        condition.\\n     *\\n     *  @param pricePerToken                  The price required to pay per token claimed.\\n     *\\n     *  @param currency                       The currency in which the `pricePerToken` must be paid.\\n     *\\n     *  @param metadata                       Claim condition metadata.\\n     */\\n    struct ClaimCondition {\\n        uint256 startTimestamp;\\n        uint256 maxClaimableSupply;\\n        uint256 supplyClaimed;\\n        uint256 quantityLimitPerWallet;\\n        bytes32 merkleRoot;\\n        uint256 pricePerToken;\\n        address currency;\\n        string metadata;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IClaimConditionMultiPhase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./IClaimCondition.sol\\\";\\n\\n/**\\n *  The interface `IClaimConditionMultiPhase` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\\n *\\n *  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.\\n *  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\\n *  or added to by the contract admin. At any moment, there is only one active claim condition.\\n */\\n\\ninterface IClaimConditionMultiPhase is IClaimCondition {\\n    /**\\n     *  @notice The set of all claim conditions, at any given moment.\\n     *  Claim Phase ID = [currentStartId, currentStartId + length - 1];\\n     *\\n     *  @param currentStartId           The uid for the first claim condition amongst the current set of\\n     *                                  claim conditions. The uid for each next claim condition is one\\n     *                                  more than the previous claim condition's uid.\\n     *\\n     *  @param count                    The total number of phases / claim conditions in the list\\n     *                                  of claim conditions.\\n     *\\n     *  @param conditions                   The claim conditions at a given uid. Claim conditions\\n     *                                  are ordered in an ascending order by their `startTimestamp`.\\n     *\\n     *  @param supplyClaimedByWallet    Map from a claim condition uid and account to supply claimed by account.\\n     */\\n    struct ClaimConditionList {\\n        uint256 currentStartId;\\n        uint256 count;\\n        mapping(uint256 => ClaimCondition) conditions;\\n        mapping(uint256 => mapping(address => uint256)) supplyClaimedByWallet;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IDelayedReveal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `DelayedReveal` is a contract extension for base NFT contracts. It lets you create batches of\\n *  'delayed-reveal' NFTs. You can learn more about the usage of delayed reveal NFTs here - https://blog.thirdweb.com/delayed-reveal-nfts\\n */\\n\\ninterface IDelayedReveal {\\n    /// @dev Emitted when tokens are revealed.\\n    event TokenURIRevealed(uint256 indexed index, string revealedURI);\\n\\n    /**\\n     *  @notice Reveals a batch of delayed reveal NFTs.\\n     *\\n     *  @param identifier The ID for the batch of delayed-reveal NFTs to reveal.\\n     *\\n     *  @param key        The key with which the base URI for the relevant batch of NFTs was encrypted.\\n     */\\n    function reveal(uint256 identifier, bytes calldata key) external returns (string memory revealedURI);\\n\\n    /**\\n     *  @notice Performs XOR encryption/decryption.\\n     *\\n     *  @param data The data to encrypt. In the case of delayed-reveal NFTs, this is the \\\"revealed\\\" state\\n     *              base URI of the relevant batch of NFTs.\\n     *\\n     *  @param key  The key with which to encrypt data\\n     */\\n    function encryptDecrypt(bytes memory data, bytes calldata key) external pure returns (bytes memory result);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IDrop1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./IClaimConditionMultiPhase.sol\\\";\\n\\n/**\\n *  The interface `IDrop1155` is written for thirdweb's 'Drop' contracts, which are distribution mechanisms for tokens.\\n *\\n *  An authorized wallet can set a series of claim conditions, ordered by their respective `startTimestamp`.\\n *  A claim condition defines criteria under which accounts can mint tokens. Claim conditions can be overwritten\\n *  or added to by the contract admin. At any moment, there is only one active claim condition.\\n */\\n\\ninterface IDrop1155 is IClaimConditionMultiPhase {\\n    /**\\n     *  @param proof Proof of concerned wallet's inclusion in an allowlist.\\n     *  @param quantityLimitPerWallet The total quantity of tokens the allowlisted wallet is eligible to claim over time.\\n     *  @param pricePerToken The price per token the allowlisted wallet must pay to claim tokens.\\n     *  @param currency The currency in which the allowlisted wallet must pay the price for claiming tokens.\\n     */\\n    struct AllowlistProof {\\n        bytes32[] proof;\\n        uint256 quantityLimitPerWallet;\\n        uint256 pricePerToken;\\n        address currency;\\n    }\\n\\n    /// @notice Emitted when tokens are claimed.\\n    event TokensClaimed(\\n        uint256 indexed claimConditionIndex,\\n        address indexed claimer,\\n        address indexed receiver,\\n        uint256 tokenId,\\n        uint256 quantityClaimed\\n    );\\n\\n    /// @notice Emitted when the contract's claim conditions are updated.\\n    event ClaimConditionsUpdated(uint256 indexed tokenId, ClaimCondition[] claimConditions, bool resetEligibility);\\n\\n    /**\\n     *  @notice Lets an account claim a given quantity of NFTs.\\n     *\\n     *  @param receiver                       The receiver of the NFTs to claim.\\n     *  @param tokenId                        The tokenId of the NFT to claim.\\n     *  @param quantity                       The quantity of NFTs to claim.\\n     *  @param currency                       The currency in which to pay for the claim.\\n     *  @param pricePerToken                  The price per token to pay for the claim.\\n     *  @param allowlistProof                 The proof of the claimer's inclusion in the merkle root allowlist\\n     *                                        of the claim conditions that apply.\\n     *  @param data                           Arbitrary bytes data that can be leveraged in the implementation of this interface.\\n     */\\n    function claim(\\n        address receiver,\\n        uint256 tokenId,\\n        uint256 quantity,\\n        address currency,\\n        uint256 pricePerToken,\\n        AllowlistProof calldata allowlistProof,\\n        bytes memory data\\n    ) external payable;\\n\\n    /**\\n     *  @notice Lets a contract admin (account with `DEFAULT_ADMIN_ROLE`) set claim conditions.\\n     *\\n     *  @param tokenId                  The token ID for which to set mint conditions.\\n     *  @param phases                   Claim conditions in ascending order by `startTimestamp`.\\n     *\\n     *  @param resetClaimEligibility    Whether to honor the restrictions applied to wallets who have claimed tokens in the current conditions,\\n     *                                  in the new claim conditions being set.\\n     *\\n     */\\n    function setClaimConditions(uint256 tokenId, ClaimCondition[] calldata phases, bool resetClaimEligibility) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/ILazyMint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `LazyMint` is a contract extension for any base NFT contract. It lets you 'lazy mint' any number of NFTs\\n *  at once. Here, 'lazy mint' means defining the metadata for particular tokenIds of your NFT contract, without actually\\n *  minting a non-zero balance of NFTs of those tokenIds.\\n */\\n\\ninterface ILazyMint {\\n    /// @dev Emitted when tokens are lazy minted.\\n    event TokensLazyMinted(uint256 indexed startTokenId, uint256 endTokenId, string baseURI, bytes encryptedBaseURI);\\n\\n    /**\\n     *  @notice Lazy mints a given amount of NFTs.\\n     *\\n     *  @param amount           The number of NFTs to lazy mint.\\n     *\\n     *  @param baseURIForTokens The base URI for the 'n' number of NFTs being lazy minted, where the metadata for each\\n     *                          of those NFTs is `${baseURIForTokens}/${tokenId}`.\\n     *\\n     *  @param extraData        Additional bytes data to be used at the discretion of the consumer of the contract.\\n     *\\n     *  @return batchId         A unique integer identifier for the batch of NFTs lazy minted together.\\n     */\\n    function lazyMint(\\n        uint256 amount,\\n        string calldata baseURIForTokens,\\n        bytes calldata extraData\\n    ) external returns (uint256 batchId);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *  information about who the contract's owner is.\\n */\\n\\ninterface IOwnable {\\n    /// @dev Returns the owner of the contract.\\n    function owner() external view returns (address);\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external;\\n\\n    /// @dev Emitted when a new Owner is set.\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IPrimarySale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Primary` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of primary sales, and lets the inheriting contract perform conditional logic that uses information about\\n *  primary sales, if desired.\\n */\\n\\ninterface IPrimarySale {\\n    /// @dev The adress that receives all primary sales value.\\n    function primarySaleRecipient() external view returns (address);\\n\\n    /// @dev Lets a module admin set the default recipient of all primary sales.\\n    function setPrimarySaleRecipient(address _saleRecipient) external;\\n\\n    /// @dev Emitted when a new sale recipient is set.\\n    event PrimarySaleRecipientUpdated(address indexed recipient);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/extension/interface/IRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../eip/interface/IERC2981.sol\\\";\\n\\n/**\\n *  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about royalty fees, if desired.\\n *\\n *  The `Royalty` contract is ERC2981 compliant.\\n */\\n\\ninterface IRoyalty is IERC2981 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(uint256 tokenId, address recipient, uint256 bps) external;\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n\\n    /// @dev Emitted when royalty info is updated.\\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Emitted when royalty recipient for tokenId is set\\n    event RoyaltyForToken(uint256 indexed tokenId, address indexed royaltyRecipient, uint256 royaltyBps);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../../eip/interface/IERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/infra/interface/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.1;\\n\\n/// @author thirdweb, OpenZeppelin Contracts (v4.9.0)\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n// Helper interfaces\\nimport { IWETH } from \\\"../infra/interface/IWETH.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../external-deps/openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20 for IERC20;\\n\\n    error CurrencyTransferLibMismatchedValue(uint256 expected, uint256 actual);\\n    error CurrencyTransferLibFailedNativeTransfer(address recipient, uint256 value);\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                if (_amount != msg.value) {\\n                    revert CurrencyTransferLibMismatchedValue(msg.value, _amount);\\n                }\\n                IWETH(_nativeTokenWrapper).deposit{ value: _amount }();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(address _currency, address _from, address _to, uint256 _amount) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            revert CurrencyTransferLibFailedNativeTransfer(to, value);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(address to, uint256 value, address _nativeTokenWrapper) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{ value: value }();\\n            IERC20(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/lib/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author OpenZeppelin, thirdweb\\n\\nlibrary MerkleProof {\\n    function verify(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool, uint256) {\\n        bytes32 computedHash = leaf;\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            index *= 2;\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n                index += 1;\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return (computedHash == root, index);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@thirdweb-dev/contracts/lib/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\n        str = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(str, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            str := mload(0x40)\\n\\n            // Allocate the memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(str, 0x80))\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            str := add(str, 2)\\n            mstore(str, 40)\\n\\n            let o := add(str, 0x20)\\n            mstore(add(o, 40), 0)\\n\\n            value := shl(96, value)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {\\n                let i := 0\\n            } 1 {\\n\\n            } {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) {\\n                    break\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(raw)\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(str, add(length, length)) // Store the length of the output.\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let o := add(str, 0x20)\\n            let end := add(raw, length)\\n\\n            for {\\n\\n            } iszero(eq(raw, end)) {\\n\\n            } {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/ApestheticsDrops.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport {ERC1155} from \\\"@thirdweb-dev/contracts/eip/ERC1155.sol\\\";\\n\\nimport \\\"@thirdweb-dev/contracts/extension/ContractMetadata.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/Multicall.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/Ownable.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/Royalty.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/BatchMintMetadata.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/PrimarySale.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/Drop1155.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/LazyMint.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/extension/DelayedReveal.sol\\\";\\n\\nimport {CurrencyTransferLib} from \\\"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/lib/Strings.sol\\\";\\n\\n\\n//\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\\n//\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\\n//\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n//\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\\n\\n\\ncontract ApestheticsDrops is\\n    ERC1155,\\n    ContractMetadata,\\n    Ownable,\\n    Royalty,\\n    Multicall,\\n    BatchMintMetadata,\\n    PrimarySale,\\n    LazyMint,\\n    DelayedReveal,\\n    Drop1155\\n{\\n    using Strings for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Mappings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice Returns the total supply of NFTs of a given tokenId\\n     *  @dev Mapping from tokenId => total circulating supply of NFTs of that tokenId.\\n     */\\n    mapping(uint256 => uint256) public totalSupply;\\n\\n    /// @dev Mapping from token ID => maximum possible total circulating supply of tokens with that ID.\\n    mapping(uint256 => uint256) public maxTotalSupply;\\n\\n    /// @dev Mapping from token ID => the address of the recipient of primary sales.\\n    mapping(uint256 => address) public saleRecipient;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Emitted when the global max supply of a token is updated.\\n    event MaxTotalSupplyUpdated(uint256 tokenId, uint256 maxTotalSupply);\\n\\n    /// @dev Emitted when the sale recipient for a particular tokenId is updated.\\n    event SaleRecipientForTokenUpdated(uint256 indexed tokenId, address saleRecipient);\\n\\n    event TokenPurchased(address indexed buyer, uint256 indexed tokenId, uint256 quantity);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Initializes the contract with the given parameters.\\n     *\\n     * @param _defaultAdmin         The default admin for the contract.\\n     * @param _name                 The name of the contract.\\n     * @param _symbol               The symbol of the contract.\\n     * @param _royaltyRecipient     The address to which royalties should be sent.\\n     * @param _royaltyBps           The royalty basis points to be charged. Max = 10000 (10000 = 100%, 1000 = 10%)\\n     * @param _primarySaleRecipient The address to which primary sale revenue should be sent.\\n     */\\n    constructor(\\n        address _defaultAdmin,\\n        string memory _name,\\n        string memory _symbol,\\n        address _royaltyRecipient,\\n        uint128 _royaltyBps,\\n        address _primarySaleRecipient\\n    ) ERC1155(_name, _symbol) {\\n        _setupOwner(_defaultAdmin);\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n        _setupPrimarySaleRecipient(_primarySaleRecipient);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC165 Logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev See ERC165: https://eips.ethereum.org/EIPS/eip-165\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c || // ERC165 Interface ID for ERC1155MetadataURI\\n            interfaceId == type(IERC2981).interfaceId; // ERC165 ID for ERC2981\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Minting/burning logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice         Lets an owner or approved operator burn NFTs of the given tokenId.\\n     *\\n     *  @param _owner   The owner of the NFT to burn.\\n     *  @param _tokenId The tokenId of the NFT to burn.\\n     *  @param _amount  The amount of the NFT to burn.\\n     */\\n    function burn(address _owner, uint256 _tokenId, uint256 _amount) external virtual {\\n        address caller = msg.sender;\\n\\n        require(caller == _owner || isApprovedForAll[_owner][caller], \\\"Unapproved caller\\\");\\n        require(balanceOf[_owner][_tokenId] >= _amount, \\\"Not enough tokens owned\\\");\\n\\n        _burn(_owner, _tokenId, _amount);\\n    }\\n\\n    /**\\n     *  @notice         Lets an owner or approved operator burn NFTs of the given tokenIds.\\n     *\\n     *  @param _owner    The owner of the NFTs to burn.\\n     *  @param _tokenIds The tokenIds of the NFTs to burn.\\n     *  @param _amounts  The amounts of the NFTs to burn.\\n     */\\n    function burnBatch(address _owner, uint256[] memory _tokenIds, uint256[] memory _amounts) external virtual {\\n        address caller = msg.sender;\\n\\n        require(caller == _owner || isApprovedForAll[_owner][caller], \\\"Unapproved caller\\\");\\n        require(_tokenIds.length == _amounts.length, \\\"Length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i += 1) {\\n            require(balanceOf[_owner][_tokenIds[i]] >= _amounts[i], \\\"Not enough tokens owned\\\");\\n        }\\n\\n        _burnBatch(_owner, _tokenIds, _amounts);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Overriden metadata logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice         Returns the metadata URI for an NFT.\\n     * @dev            See `BatchMintMetadata` for handling of metadata in this contract.\\n     *\\n     * @param _tokenId The tokenId of an NFT.\\n     * @return         The metadata URI for the given NFT.\\n     */\\n    function uri(uint256 _tokenId) public view virtual override returns (string memory) {\\n        (uint256 batchId,) = _getBatchId(_tokenId);\\n        string memory batchUri = _getBaseURI(_tokenId);\\n\\n        if (isEncryptedBatch(batchId)) {\\n            return string(abi.encodePacked(batchUri, \\\"0\\\"));\\n        } else {\\n            return string(abi.encodePacked(batchUri, _tokenId.toString()));\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Delayed reveal logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice       Lets an authorized address reveal a batch of delayed reveal NFTs.\\n     *\\n     *  @param _index       The ID for the batch of delayed-reveal NFTs to reveal.\\n     *  @param _key         The key with which the base URI for the relevant batch of NFTs was encrypted.\\n     *  @return revealedURI The revealed URI for the batch of NFTs.\\n     */\\n    function reveal(uint256 _index, bytes calldata _key) public virtual override returns (string memory revealedURI) {\\n        require(_canReveal(), \\\"Not authorized\\\");\\n\\n        uint256 batchId = getBatchIdAtIndex(_index);\\n        revealedURI = getRevealURI(batchId, _key);\\n\\n        _setEncryptedData(batchId, \\\"\\\");\\n        _setBaseURI(batchId, revealedURI);\\n\\n        emit TokenURIRevealed(_index, revealedURI);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Overriden lazy minting logic\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\\n     *\\n     *  @param _amount           The number of NFTs to lazy mint.\\n     *  @param _baseURIForTokens The placeholder base URI for the 'n' number of NFTs being lazy minted, where the\\n     *                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\\n     *  @param _data             The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\\n     *  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together.\\n     */\\n    function lazyMint(\\n        uint256 _amount,\\n        string calldata _baseURIForTokens,\\n        bytes calldata _data\\n    ) public override returns (uint256 batchId) {\\n        if (_data.length > 0) {\\n            (bytes memory encryptedURI, bytes32 provenanceHash) = abi.decode(_data, (bytes, bytes32));\\n            if (encryptedURI.length != 0 && provenanceHash != \\\"\\\") {\\n                _setEncryptedData(nextTokenIdToLazyMint + _amount, _data);\\n            }\\n        }\\n\\n        return LazyMint.lazyMint(_amount, _baseURIForTokens, _data);\\n    }\\n\\n    /// @notice The tokenId assigned to the next new NFT to be lazy minted.\\n    function nextTokenIdToMint() public view virtual returns (uint256) {\\n        return nextTokenIdToLazyMint;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Setter functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Lets a module admin set a max total supply for token.\\n    function setMaxTotalSupply(uint256 _tokenId, uint256 _maxTotalSupply) external {\\n        require(_canSetClaimConditions(), \\\"Not authorized\\\");\\n\\n        maxTotalSupply[_tokenId] = _maxTotalSupply;\\n        emit MaxTotalSupplyUpdated(_tokenId, _maxTotalSupply);\\n    }\\n\\n    /// @dev Lets a contract admin set the recipient for all primary sales.\\n    function setSaleRecipientForToken(uint256 _tokenId, address _saleRecipient) external {\\n        require(_canSetPrimarySaleRecipient(), \\\"Not authorized\\\");\\n        saleRecipient[_tokenId] = _saleRecipient;\\n        emit SaleRecipientForTokenUpdated(_tokenId, _saleRecipient);\\n    }\\n\\n    /**\\n     * @notice Updates the base URI for a batch of tokens.\\n     *\\n     * @param _index Index of the desired batch in batchIds array.\\n     * @param _uri   the new base URI for the batch.\\n     */\\n    function updateBatchBaseURI(uint256 _index, string calldata _uri) external {\\n        require(_canSetContractURI(), \\\"Not authorized\\\");\\n        uint256 batchId = getBatchIdAtIndex(_index);\\n        _setBaseURI(batchId, _uri);\\n    }\\n\\n    /**\\n     * @notice Freezes the base URI for a batch of tokens.\\n     *\\n     * @param _index Index of the desired batch in batchIds array.\\n     */\\n    function freezeBatchBaseURI(uint256 _index) external {\\n        require(_canSetContractURI(), \\\"Not authorized\\\");\\n        uint256 batchId = getBatchIdAtIndex(_index);\\n        _freezeBaseURI(batchId);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Runs before every `claim` function call.\\n     *\\n     * @param _tokenId The tokenId of the NFT being claimed.\\n     */\\n    function _beforeClaim(\\n        uint256 _tokenId,\\n        address,\\n        uint256 _quantity,\\n        address,\\n        uint256,\\n        AllowlistProof calldata,\\n        bytes memory\\n    ) internal view virtual override {\\n        if (_tokenId >= nextTokenIdToLazyMint) {\\n            revert(\\\"Not enough minted tokens\\\");\\n        }\\n        require(\\n            maxTotalSupply[_tokenId] == 0 || totalSupply[_tokenId] + _quantity <= maxTotalSupply[_tokenId],\\n            \\\"exceed max total supply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Collects and distributes the primary sale value of NFTs being claimed.\\n     *\\n     * @param _primarySaleRecipient The address to which primary sale revenue should be sent.\\n     * @param _quantityToClaim      The quantity of NFTs being claimed.\\n     * @param _currency             The currency in which the NFTs are being sold.\\n     * @param _pricePerToken        The price per NFT being claimed.\\n     */\\n\\n    function collectPriceOnClaim(\\n        uint256 _tokenId,\\n        address _primarySaleRecipient,\\n        uint256 _quantityToClaim,\\n        address _currency,\\n        uint256 _pricePerToken\\n    ) internal virtual override {\\n        if (_pricePerToken == 0) {\\n            require(msg.value == 0, \\\"!Value\\\");\\n            return;\\n        }\\n\\n        uint256 totalPrice = _quantityToClaim * _pricePerToken;\\n\\n        bool validMsgValue;\\n        if (_currency == CurrencyTransferLib.NATIVE_TOKEN) {\\n            validMsgValue = msg.value == totalPrice;\\n        } else {\\n            validMsgValue = msg.value == 0;\\n        }\\n        require(validMsgValue, \\\"Invalid msg value\\\");\\n\\n        address _saleRecipient = _primarySaleRecipient == address(0)\\n            ? (saleRecipient[_tokenId] == address(0) ? primarySaleRecipient() : saleRecipient[_tokenId])\\n            : _primarySaleRecipient;\\n\\n        CurrencyTransferLib.transferCurrency(_currency, msg.sender, _saleRecipient, totalPrice);\\n    }\\n\\n    /**\\n     * @dev Transfers the NFTs being claimed.\\n     *\\n     * @param _to                    The address to which the NFTs are being transferred.\\n     * @param _tokenId               The tokenId of the NFTs being claimed.\\n     * @param _quantityBeingClaimed  The quantity of NFTs being claimed.\\n     */\\n    function transferTokensOnClaim(\\n        address _to,\\n        uint256 _tokenId,\\n        uint256 _quantityBeingClaimed\\n    ) internal override {\\n        _mint(_to, _tokenId, _quantityBeingClaimed, \\\"\\\");\\n        emit TokenPurchased(_to, _tokenId, _quantityBeingClaimed);\\n    }\\n\\n    /**\\n     * @dev Runs before every token transfer / mint / burn.\\n     *\\n     * @param operator The address performing the token transfer.\\n     * @param from     The address from which the token is being transferred.\\n     * @param to       The address to which the token is being transferred.\\n     * @param ids      The tokenIds of the tokens being transferred.\\n     * @param amounts  The amounts of the tokens being transferred.\\n     * @param data     Any additional data being passed in the token transfer.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    function _canSetPrimarySaleRecipient() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    function _canSetOwner() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    function _canSetRoyaltyInfo() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    function _canSetContractURI() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    function _canSetClaimConditions() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    function _canLazyMint() internal view virtual override returns (bool) {\\n        return msg.sender == owner();\\n    }\\n\\n    function _canReveal() internal view virtual returns (bool) {\\n        return msg.sender == owner();\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [\r\n      \":@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \":@thirdweb-dev/=node_modules/@thirdweb-dev/\",\r\n      \":ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \":forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_primarySaleRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"BatchMintInvalidBatchId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMintInvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"BatchMintMetadataFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractMetadataUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CurrencyTransferLibFailedNativeTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"}],\"name\":\"DelayedRevealIncorrectResultHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelayedRevealNothingToReveal\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"DropClaimExceedLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"DropClaimExceedMaxSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedPricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actualCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualExpectedPricePerToken\",\"type\":\"uint256\"}],\"name\":\"DropClaimInvalidTokenPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"DropClaimNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DropExceedMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DropNoActiveCondition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DropUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintInvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleInvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrimarySaleUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"RoyaltyExceededMaxFeeBps\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RoyaltyInvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct IClaimCondition.ClaimCondition[]\",\"name\":\"claimConditions\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"resetEligibility\",\"type\":\"bool\"}],\"name\":\"ClaimConditionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MetadataFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"saleRecipient\",\"type\":\"address\"}],\"name\":\"SaleRecipientForTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"TokenURIRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimConditionIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDrop1155.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentStartId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encryptDecrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"freezeBatchBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getActiveClaimConditionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_conditionId\",\"type\":\"uint256\"}],\"name\":\"getClaimConditionById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition\",\"name\":\"condition\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"getRevealURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_conditionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getSupplyClaimedByWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyClaimedByWallet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"isEncryptedBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primarySaleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"saleRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxClaimableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct IClaimCondition.ClaimCondition[]\",\"name\":\"_conditions\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_resetClaimEligibility\",\"type\":\"bool\"}],\"name\":\"setClaimConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setPrimarySaleRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"}],\"name\":\"setSaleRecipientForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"updateBatchBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_conditionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"quantityLimitPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"internalType\":\"struct IDrop1155.AllowlistProof\",\"name\":\"_allowlistProof\",\"type\":\"tuple\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOverride\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ApestheticsDrops", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004ef578dff126703e48a1322c6d8d3644c27ea7e600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000004ef578dff126703e48a1322c6d8d3644c27ea7e600000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ef578dff126703e48a1322c6d8d3644c27ea7e6000000000000000000000000000000000000000000000000000000000000001141706573746865746963732044726f7073000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4150455354484554494353000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}