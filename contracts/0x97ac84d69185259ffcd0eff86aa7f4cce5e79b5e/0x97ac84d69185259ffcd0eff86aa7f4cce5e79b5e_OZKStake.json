{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    error NotOwner();\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (_owner != msg.sender) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract OZKStake is Ownable {\r\n    error StakingWindowClosed();\r\n    error StakingInProgress();\r\n    error StakingNotInProgress();\r\n    error InsufficientBalance();\r\n    error NothingStaked();\r\n    error NotAllowed();\r\n\r\n    event Stake(address sender, uint256 cycle, uint256 amount);\r\n    event Unstake(address sender, uint256 cycle, uint256 amount);\r\n\r\n    uint256 public constant STAKING_OPEN_WINDOW = 3 days;\r\n    address public immutable TOKEN;\r\n    uint256 public immutable STAKING_DURATION;\r\n\r\n    mapping(uint256 => uint256) public depositedAmount;\r\n    mapping(uint256 => mapping(address => uint256)) public userStakedAmountMap;\r\n    mapping(uint256 => uint256) public totalStakedToken;\r\n\r\n    bool public allowEmergencyTokenWithdraw = false;\r\n    uint256 public cycle;\r\n    uint256 public openTime;\r\n\r\n    constructor(address token_, uint256 stakingDuration_) {\r\n        TOKEN = token_;\r\n        STAKING_DURATION = stakingDuration_;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // owners\r\n    function open() external payable onlyOwner {\r\n        uint256 __openTime = openTime;\r\n        if (block.timestamp >= __openTime && block.timestamp <= __openTime + STAKING_DURATION) {\r\n            revert StakingInProgress();\r\n        }\r\n        cycle += 1;\r\n        openTime = block.timestamp;\r\n        _deposit();\r\n    }\r\n\r\n    function deposit() public payable onlyOwner {\r\n        if (!isInProgress()) revert StakingNotInProgress();\r\n        _deposit();\r\n    }\r\n\r\n    function emergencyWithdraw() external onlyOwner {\r\n        (bool success,) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function syncDepositedAmount(uint256 amount, uint256 cycle_) external onlyOwner {\r\n        if (address(this).balance < amount) revert InsufficientBalance();\r\n        depositedAmount[cycle_] = amount;\r\n    }\r\n\r\n    function setAllowTokenWithdrawal(bool allow_) external onlyOwner {\r\n        allowEmergencyTokenWithdraw = allow_;\r\n    }\r\n\r\n    // external\r\n    function stake(uint256 amount_) external {\r\n        if (!isOpen()) revert StakingWindowClosed();\r\n\r\n        uint256 __cycle = cycle;\r\n\r\n        userStakedAmountMap[__cycle][msg.sender] += amount_;\r\n        totalStakedToken[__cycle] += amount_;\r\n\r\n        emit Stake(msg.sender, __cycle, amount_);\r\n\r\n        IERC20(TOKEN).transferFrom(msg.sender, address(this), amount_);\r\n    }\r\n\r\n    function unstake(uint256 cycle_) external {\r\n        if (cycle_ == cycle && block.timestamp <= openTime + STAKING_DURATION) revert StakingInProgress();\r\n\r\n        // check amount staked\r\n        uint256 __amountStaked = userStakedAmountMap[cycle_][msg.sender];\r\n        if (__amountStaked == 0) revert NothingStaked();\r\n\r\n        // calculate amount\r\n        uint256 __totalStaked = totalStakedToken[cycle_];\r\n        uint256 claimableReward = 0;\r\n        if (__totalStaked != 0) {\r\n            claimableReward = depositedAmount[cycle_] * __amountStaked / __totalStaked;\r\n        }\r\n\r\n        // update state\r\n        userStakedAmountMap[cycle_][msg.sender] -= __amountStaked;\r\n\r\n        emit Unstake(msg.sender, cycle_, __amountStaked);\r\n\r\n        // withdraw\r\n        IERC20(TOKEN).transfer(msg.sender, __amountStaked);\r\n        (bool success,) = msg.sender.call{value: claimableReward}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    function emergencyTokenWithdraw(uint256 cycle_) external {\r\n        if (!allowEmergencyTokenWithdraw) revert NotAllowed();\r\n\r\n        // check amount staked\r\n        uint256 __amountStaked = userStakedAmountMap[cycle_][msg.sender];\r\n        if (__amountStaked == 0) revert NothingStaked();\r\n\r\n        // update state\r\n        userStakedAmountMap[cycle_][msg.sender] -= __amountStaked;\r\n\r\n        emit Unstake(msg.sender, cycle_, __amountStaked);\r\n\r\n        // withdraw\r\n        IERC20(TOKEN).transfer(msg.sender, __amountStaked);\r\n    }\r\n\r\n    // views\r\n    function isOpen() public view returns (bool) {\r\n        uint256 __openTime = openTime;\r\n        if (block.timestamp >= __openTime && block.timestamp <= __openTime + STAKING_OPEN_WINDOW) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isInProgress() public view returns (bool) {\r\n        uint256 __openTime = openTime;\r\n        if (block.timestamp >= __openTime && block.timestamp <= __openTime + STAKING_DURATION) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function claimable(uint256 cycle_, address addr) external view returns (uint256) {\r\n        uint256 __amountStaked = userStakedAmountMap[cycle_][addr];\r\n        uint256 __totalStaked = totalStakedToken[cycle_];\r\n\r\n        if (__totalStaked == 0) return 0;\r\n        return depositedAmount[cycle_] * __amountStaked / __totalStaked;\r\n    }\r\n\r\n    // private\r\n    function _deposit() private {\r\n        depositedAmount[cycle] += msg.value;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingWindowClosed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STAKING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_OPEN_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowEmergencyTokenWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"allow_\",\"type\":\"bool\"}],\"name\":\"setAllowTokenWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"}],\"name\":\"syncDepositedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedAmountMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OZKStake", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b4fc1fc74effa5dc15a031eb8159302cfa4f12880000000000000000000000000000000000000000000000000000000000127500", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://720355354176a3a33439aeebf819b45048f6a7b837db3c95f8d7fbf3e6ff4e08"}