{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DixelClubV2NFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./lib/ERC721Initializable.sol\\\";\\nimport \\\"./lib/ERC721Queryable.sol\\\";\\nimport \\\"./lib/ColorUtils.sol\\\";\\nimport \\\"./lib/StringUtils.sol\\\";\\nimport \\\"./IDixelClubV2Factory.sol\\\";\\nimport \\\"./Shared.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./SVGGenerator.sol\\\"; // inheriting Constants\\n\\n/* Change Logs\\n\\n<Version 2>\\n1. Added default dimemsions on SVG for better compatibility (Opensea)\\n2. Fixed white gapp issues on Safari & iPhone browsers (hack: 25f5e59)\\n3. Allow new-line characters on descriptions\\n\\n<Version 3>\\n1. Remove JSON string validator (should be done on front-end)\\n\\n*/\\n\\ncontract DixelClubV2NFT is ERC721Queryable, Ownable, Constants, SVGGenerator {\\n    error DixelClubV2__NotExist();\\n    error DixelClubV2__Initalized();\\n    error DixelClubV2__InvalidCost(uint256 expected, uint256 actual);\\n    error DixelClubV2__MaximumMinted();\\n    error DixelClubV2__NotStarted(uint40 beginAt, uint40 nowAt);\\n    error DixelClubV2__NotWhitelisted();\\n    error DixelClubV2__NotApproved();\\n    error DixelClubV2__PublicCollection();\\n    error DixelClubV2__PrivateCollection();\\n    error DixelClubV2__InvalidRoyalty(uint256 invalid);\\n    error DixelClubV2__AlreadyStarted();\\n    error DixelClubV2__DescriptionTooLong();\\n    error DixelClubV2__WhiteListValueDoNotMatch(address expected, address actual);\\n\\n    struct EditionData {\\n        uint24[PALETTE_SIZE] palette; // 24bit color (16,777,216) - up to 16 colors\\n    }\\n\\n    IDixelClubV2Factory private _factory;\\n    uint40 private _initializedAt;\\n    Shared.MetaData private _metaData; // Collection meta data\\n\\n    EditionData[] private _editionData; // Color (palette) data for each edition\\n    uint8[PIXEL_ARRAY_SIZE] private _pixels; // 8 * 288 = 2304bit = 9 of 256bit storage block. Each uint8 saves 2 pixels.\\n\\n    // NOTE: Implemented whitelist managing function with the simplest structure for gas saving\\n    // - EnumerableMap adds 3-5x more gas\\n    // - MerkleTree doesn't fit for managing the actual list on-chain\\n    address[] private _whitelist;\\n    string private _description;\\n\\n    event Mint(address indexed to, uint256 indexed tokenId);\\n    event Burn(uint256 indexed tokenId);\\n\\n    modifier checkTokenExists(uint256 tokenId) {\\n        if (!_exists(tokenId)) revert DixelClubV2__NotExist();\\n        _;\\n    }\\n\\n    function init(\\n        address owner_,\\n        string calldata name_,\\n        string calldata symbol_,\\n        string calldata description_,\\n        Shared.MetaData calldata metaData_,\\n        uint24[PALETTE_SIZE] calldata palette_,\\n        uint8[PIXEL_ARRAY_SIZE] calldata pixels_\\n    ) external {\\n        if(_initializedAt != 0) revert DixelClubV2__Initalized();\\n        _initializedAt = uint40(block.timestamp);\\n\\n        _factory = IDixelClubV2Factory(msg.sender);\\n\\n        // ERC721 attributes\\n        _name = name_;\\n        _symbol = symbol_;\\n        _description = description_;\\n\\n        // Custom attributes\\n        _metaData = metaData_;\\n        _pixels = pixels_;\\n\\n        // Transfer ownership to the collection creator, so he/she can edit info on marketplaces like Opeansea\\n        _transferOwnership(owner_);\\n\\n        // Mint edition #0 to the creator with the default palette set automatically\\n        _mintNewEdition(owner_, palette_);\\n    }\\n\\n    function mintPublic(address to, uint24[PALETTE_SIZE] calldata palette) external payable {\\n        if(_metaData.whitelistOnly) revert DixelClubV2__PrivateCollection();\\n\\n        _mintWithFees(to, palette);\\n    }\\n\\n    function mintPrivate(uint256 whitelistIndex, address to, uint24[PALETTE_SIZE] calldata palette) external payable {\\n        if(!_metaData.whitelistOnly) revert DixelClubV2__PublicCollection();\\n\\n        _removeWhitelist(whitelistIndex, msg.sender);\\n\\n        _mintWithFees(to, palette);\\n    }\\n\\n    function _mintWithFees(address to, uint24[PALETTE_SIZE] calldata palette) private {\\n        uint256 mintingCost = uint256(_metaData.mintingCost);\\n\\n        if(msg.value != mintingCost) revert DixelClubV2__InvalidCost(mintingCost, msg.value);\\n        if(nextTokenId() >= _metaData.maxSupply) revert DixelClubV2__MaximumMinted();\\n        if(uint40(block.timestamp) < _metaData.mintingBeginsFrom) revert DixelClubV2__NotStarted(_metaData.mintingBeginsFrom, uint40(block.timestamp));\\n\\n        if (mintingCost > 0) {\\n            // Send fee to the beneficiary\\n            uint256 fee = (mintingCost * _factory.mintingFee()) / FRICTION_BASE;\\n            (bool sent, ) = (_factory.beneficiary()).call{ value: fee }(\\\"\\\");\\n            require(sent, \\\"FEE_TRANSFER_FAILED\\\");\\n\\n            // Send the rest of minting cost to the collection creator\\n            (bool sent2, ) = (owner()).call{ value: mintingCost - fee }(\\\"\\\");\\n            require(sent2, \\\"MINTING_COST_TRANSFER_FAILED\\\");\\n        }\\n\\n        _mintNewEdition(to, palette);\\n    }\\n\\n    function _mintNewEdition(address to, uint24[PALETTE_SIZE] calldata palette) private {\\n        uint256 nextId = nextTokenId();\\n\\n        _editionData.push(EditionData(palette));\\n        unchecked {\\n            assert(nextId == _editionData.length - 1);\\n        }\\n\\n        _safeMint(to, nextId);\\n\\n        emit Mint(to, nextId);\\n    }\\n\\n    function burn(uint256 tokenId) external {\\n        if(!_isApprovedOrOwner(msg.sender, tokenId)) revert DixelClubV2__NotApproved(); // This will check existence of token\\n\\n        delete _editionData[tokenId];\\n        _burn(tokenId);\\n\\n        emit Burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override checkTokenExists(tokenId) returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(tokenJSON(tokenId)))));\\n    }\\n\\n    // Contract-level metadata for Opeansea\\n    // REF: https://docs.opensea.io/docs/contract-level-metadata\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(contractJSON()))));\\n    }\\n\\n    // MARK: - Whitelist related functions\\n\\n    // @dev Maximum length of list parameter can be limited by block gas limit of blockchain\\n    // @notice Duplicated address input means multiple allowance\\n    function addWhitelist(address[] calldata list) external onlyOwner {\\n        if(!_metaData.whitelistOnly) revert DixelClubV2__PublicCollection();\\n\\n        uint256 length = list.length; // gas saving\\n        for (uint256 i; i != length;) {\\n            _whitelist.push(list[i]); // O(1) for adding 1 address\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _removeWhitelist(uint256 index, address value) private {\\n        if(!_metaData.whitelistOnly) revert DixelClubV2__PublicCollection();\\n        if (_whitelist[index] != value) revert DixelClubV2__WhiteListValueDoNotMatch(value, _whitelist[index]);\\n\\n        _whitelist[index] = _whitelist[_whitelist.length - 1]; // put the last element into the delete index\\n        _whitelist.pop(); // delete the last element to decrease array length;\\n    }\\n\\n    // @dev O(1) for removing by index\\n    function removeWhitelist(uint256 index, address value) external onlyOwner {\\n        _removeWhitelist(index, value);\\n    }\\n\\n    function resetWhitelist() external onlyOwner {\\n        delete _whitelist;\\n    }\\n\\n    // @dev offset & limit for pagination\\n    function getAllWhitelist(uint256 offset, uint256 limit) external view returns (address[] memory list) {\\n        unchecked {\\n            address[] memory clone = _whitelist; // gas saving\\n            uint256 length = clone.length; // gas saving\\n            uint256 count = limit;\\n\\n            if (offset >= length) {\\n                return list; // empty list\\n            } else if (offset + limit > length) {\\n                count = length - offset;\\n            }\\n\\n            list = new address[](count);\\n            for (uint256 i = 0; i != count; ++i) {\\n                list[i] = clone[offset + i];\\n            }\\n        }\\n    }\\n\\n    function getWhitelistCount() external view returns (uint256) {\\n        return _whitelist.length;\\n    }\\n\\n    // @dev utility function for front-end, that can be reverted if the list is too big\\n    function getWhitelistAllowanceLeft(address wallet) external view returns (uint256 allowance) {\\n        unchecked {\\n            address[] memory clone = _whitelist; // gas saving\\n            uint256 length = clone.length; // gas saving\\n            for (uint256 i; i != length; ++i) {\\n                if (clone[i] == wallet) {\\n                    allowance++;\\n                }\\n            }\\n\\n            return allowance;\\n        }\\n    }\\n\\n    // @dev utility function for front-end, that can be reverted if the list is too big\\n    function getWhitelistIndex(address wallet) external view returns (uint256) {\\n        unchecked {\\n            address[] memory clone = _whitelist; // gas saving\\n            uint256 length = clone.length; // gas saving\\n            for (uint256 i; i != length; ++i) {\\n                if (clone[i] == wallet) {\\n                    return i;\\n                }\\n            }\\n\\n            revert DixelClubV2__NotWhitelisted();\\n        }\\n    }\\n\\n\\n    // MARK: - Update metadata\\n\\n    function updateMetadata(bool whitelistOnly, bool hidden, uint24 royaltyFriction, uint40 mintingBeginsFrom, uint152 mintingCost) external onlyOwner {\\n        if(royaltyFriction > MAX_ROYALTY_FRACTION) revert DixelClubV2__InvalidRoyalty(royaltyFriction);\\n        if(_metaData.mintingBeginsFrom != mintingBeginsFrom && uint40(block.timestamp) >= _metaData.mintingBeginsFrom) revert DixelClubV2__AlreadyStarted();\\n\\n        _metaData.whitelistOnly = whitelistOnly;\\n        if (!_metaData.whitelistOnly) {\\n            delete _whitelist; // empty whitelist array data if it becomes public\\n        }\\n\\n        _metaData.hidden = hidden;\\n        _metaData.royaltyFriction = royaltyFriction;\\n        _metaData.mintingBeginsFrom = mintingBeginsFrom < block.timestamp ? uint40(block.timestamp) : mintingBeginsFrom;\\n        _metaData.mintingCost = mintingCost;\\n    }\\n\\n    function updateDescription(string calldata description) external onlyOwner {\\n        if (bytes(description).length > 1000) revert DixelClubV2__DescriptionTooLong(); // ~900 gas per character\\n\\n        _description = description;\\n    }\\n\\n    // MARK: - External utility functions\\n\\n    function generateSVG(uint256 tokenId) external view checkTokenExists(tokenId) returns (string memory) {\\n        return _generateSVG(_editionData[tokenId].palette, _pixels);\\n    }\\n\\n    function generateBase64SVG(uint256 tokenId) public view checkTokenExists(tokenId) returns (string memory) {\\n        return _generateBase64SVG(_editionData[tokenId].palette, _pixels);\\n    }\\n\\n    function tokenJSON(uint256 tokenId) public view checkTokenExists(tokenId) returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{\\\"name\\\":\\\"',\\n            _symbol, ' #', ColorUtils.uint2str(tokenId),\\n            '\\\",\\\"description\\\":\\\"',\\n            _description,\\n            '\\\",\\\"external_url\\\":\\\"https://dixel.club/collection/',\\n            ColorUtils.uint2str(block.chainid), '/', StringUtils.address2str(address(this)), '/', ColorUtils.uint2str(tokenId),\\n            '\\\",\\\"image\\\":\\\"',\\n            generateBase64SVG(tokenId),\\n            '\\\"}'\\n        ));\\n    }\\n\\n    function contractJSON() public view returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{\\\"name\\\":\\\"',\\n            _name,\\n            '\\\",\\\"description\\\":\\\"',\\n            _description,\\n            '\\\",\\\"image\\\":\\\"',\\n            generateBase64SVG(0),\\n            '\\\",\\\"external_link\\\":\\\"https://dixel.club/collection/',\\n            ColorUtils.uint2str(block.chainid), '/', StringUtils.address2str(address(this)),\\n            '\\\",\\\"seller_fee_basis_points\\\":\\\"',\\n            ColorUtils.uint2str(_metaData.royaltyFriction),\\n            '\\\",\\\"fee_recipient\\\":\\\"',\\n            StringUtils.address2str(owner()),\\n            '\\\"}'\\n        ));\\n    }\\n\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function listData() external view returns (uint40 initializedAt_, bool hidden_) {\\n        initializedAt_ = _initializedAt;\\n        hidden_ = _metaData.hidden;\\n    }\\n\\n    function metaData() external view returns (\\n        string memory name_,\\n        bool whitelistOnly_,\\n        uint24 maxSupply_,\\n        uint24 royaltyFriction_,\\n        uint40 mintingBeginsFrom_,\\n        uint168 mintingCost_,\\n        string memory description_,\\n        uint256 nextTokenId_,\\n        uint256 totalSupply_,\\n        address owner_,\\n        uint8[PIXEL_ARRAY_SIZE] memory pixels_,\\n        uint24[PALETTE_SIZE] memory defaultPalette_\\n    ) {\\n        name_ = name();\\n        whitelistOnly_ = _metaData.whitelistOnly;\\n        maxSupply_ = _metaData.maxSupply;\\n        royaltyFriction_ = _metaData.royaltyFriction;\\n        mintingBeginsFrom_ = _metaData.mintingBeginsFrom;\\n        mintingCost_ = _metaData.mintingCost;\\n        description_ = _description;\\n        nextTokenId_ = nextTokenId();\\n        totalSupply_ = totalSupply();\\n        owner_ = owner();\\n        pixels_ = _pixels;\\n        defaultPalette_ = _editionData[0].palette;\\n    }\\n\\n    function paletteOf(uint256 tokenId) external view checkTokenExists(tokenId) returns (uint24[PALETTE_SIZE] memory) {\\n        return _editionData[tokenId].palette;\\n    }\\n\\n    function getAllPixels() external view returns (uint8[PIXEL_ARRAY_SIZE] memory) {\\n        return _pixels;\\n    }\\n\\n    // MARK: - Override extensions\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721Initializable) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev IERC2981 implementation\\n     * - NOTE: ERC2981 royalty info may not be applied on some marketplaces\\n     * - NOTE: Opensea uses contract-level metadata: https://docs.opensea.io/docs/contract-level-metadata\\n     */\\n    function royaltyInfo(uint256 /*_tokenId*/, uint256 _salePrice) public view returns (address, uint256) {\\n        // NOTE:\\n        // 1. The same royalty friction for all tokens in the same collection\\n        // 2. Receiver is collection owner\\n\\n        return (owner(), (_salePrice * _metaData.royaltyFriction) / FRICTION_BASE);\\n    }\\n\\n    // NFT implementation version\\n    function version() external pure virtual returns (uint16) {\\n        return 3;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ERC721Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev A slightly modified version of ERC721.sol (from Openzeppelin 4.6.0) for initialization pattern\\n *   - remove constructor\\n *   - make `_name`, `_symbol` and `_owners` internal instead of private\\n *   - rename ERC721 -> ERC721Initializable\\n */\\nabstract contract ERC721Initializable is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string internal _name;\\n\\n    // Token symbol\\n    string internal _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Initializable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Initializable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Initializable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Initializable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        unchecked {\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Initializable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ERC721Queryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport './ERC721Initializable.sol';\\n\\n/**\\n * @title ERC721A Queryable + ERC721Enumerable#totalSupply only to save gas\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721Queryable is ERC721Initializable {\\n    error ERC721Queryable__InvalidQueryRange();\\n\\n    // @dev Store total number of Tokens.\\n    uint256 private _totalSupply;\\n\\n    // @dev The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        unchecked {\\n            if (from == address(0)) {\\n                ++_totalSupply;\\n                ++_currentIndex;\\n            } else if (to == address(0)) {\\n                --_totalSupply;\\n            }\\n        }\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function nextTokenId() public view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721Queryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start` < `stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert ERC721Queryable__InvalidQueryRange();\\n\\n            if (stop > _currentIndex) {\\n                stop = _currentIndex;\\n            }\\n\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (stop - start < tokenIdsMaxLength) {\\n                tokenIdsMaxLength = stop - start;\\n            }\\n\\n            uint256 tokenIdsIdx;\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                if(_owners[i] == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721Queryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K pfp collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n\\n            for (uint256 i = 0; tokenIdsIdx != tokenIdsLength; ++i) {\\n                if(_owners[i] == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n\\n            return tokenIds;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/ColorUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary ColorUtils {\\n    function uint2str(uint256 i) internal pure returns (string memory) {\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(i - i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function uint2hex(uint24 i) internal pure returns (string memory) {\\n        bytes memory o = new bytes(6);\\n        uint24 mask = 0x00000f; // hex 15\\n        uint256 k = 6;\\n        do {\\n            k--;\\n            uint8 masked = uint8(i & mask);\\n            o[k] = bytes1((masked > 9) ? (masked + 87) : (masked + 48)); // ASCII a-f => +87 | 0-9 => +48\\n            i >>= 4;\\n        } while (k > 0);\\n\\n        return string(o);\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/StringUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\npragma solidity ^0.8.13;\\n\\nlibrary StringUtils {\\n    function address2str(address addr) internal pure returns (string memory) {\\n        return Strings.toHexString(uint160(addr), 20);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IDixelClubV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Shared.sol\\\";\\n\\ninterface IDixelClubV2Factory {\\n  function beneficiary() external view returns (address);\\n  function mintingFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Shared.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.13;\\n\\nlibrary Shared {\\n    struct MetaData {\\n        bool whitelistOnly;\\n        bool hidden;\\n        uint24 maxSupply; // can be minted up to MAX_SUPPLY\\n        uint24 royaltyFriction; // used for `royaltyInfo` (ERC2981) and `seller_fee_basis_points` (Opeansea's Contract-level metadata)\\n        uint40 mintingBeginsFrom; // Timestamp that minting event begins\\n        uint152 mintingCost; // Native token (ETH, BNB, KLAY, etc)\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract Constants {\\n    uint256 public constant MAX_SUPPLY = 1000000; // 1M hardcap max\\n    uint256 public constant MAX_ROYALTY_FRACTION = 1000; // 10%\\n    uint256 public constant FRICTION_BASE = 10000;\\n\\n    uint256 internal constant PALETTE_SIZE = 16; // 16 colors max - equal to the data type max value of CANVAS_SIZE (2^8 = 16)\\n    uint256 internal constant CANVAS_SIZE = 24; // 24x24 pixels\\n    uint256 internal constant TOTAL_PIXEL_COUNT = CANVAS_SIZE * CANVAS_SIZE; // 24x24\\n    uint256 internal constant PIXEL_ARRAY_SIZE = TOTAL_PIXEL_COUNT / 2; // packing 2 pixels in each uint8\\n}\\n\"\r\n    },\r\n    \"contracts/SVGGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./lib/ColorUtils.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n* @title Dixel SVG image generator\\n*/\\nabstract contract SVGGenerator is Constants {\\n\\n    // Using paths for each palette color (speed: 700-2300 / size: 1-5KB)\\n    // - pros: faster average speed, smaller svg size (over 50%)\\n    // - cons: slower worst-case speed\\n\\n\\n    // NOTE: viewBox -0.5 on top to prevent top side crop issue\\n    // ref: https://codepen.io/shshaw/post/vector-pixels-svg-optimization-animation-and-understanding-path-data#crazy-pants-optimization-4\\n\\n    // NOTE: viewbox height 23.999 & preserveAspectRatio=\\\"none\\\" to prevent gpas between shapes when it's resized to an indivisible dimensions (e.g. 480x480 -> fine, but 500x500 shows gaps)\\n    // ref: https://codepen.io/sydneyitguy/pen/MWVgOjG\\n    string private constant HEADER = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 -0.5 24 23.999\\\" width=\\\"960\\\" height=\\\"960\\\" preserveAspectRatio=\\\"none\\\" shape-rendering=\\\"crispEdges\\\">';\\n    string private constant FOOTER = '</svg>';\\n\\n    function _generateSVG(uint24[PALETTE_SIZE] memory palette, uint8[PIXEL_ARRAY_SIZE] memory pixels) internal pure returns (string memory) {\\n        string[PALETTE_SIZE] memory paths;\\n\\n        for (uint256 y; y < CANVAS_SIZE;) {\\n            uint256 prev = pixels[y * CANVAS_SIZE / 2] & 15; // prev pixel color. see comment below. x=0 so no shifting needed.\\n            paths[prev] = string(abi.encodePacked(paths[prev], \\\"M0 \\\", ColorUtils.uint2str(y)));\\n            uint256 width = 1;\\n\\n            for (uint256 x = 1; x < CANVAS_SIZE;) {\\n                /*\\n                    Pixels array: we're packing 2 pixels into each uint8.\\n                    So pixels[y * CANVAS_SIZE/2 + x/2] contains pixels (x,y) and (x+1,y).\\n                    The 4 rightmost bits are (x,y), so to extract that value we mask pixels[y * CANVAS_SIZE/2 + x/2] with 15 (\\\"00001111\\\").\\n                    The 4 leftmost bits are (x+1,y), so to extract that value we shift pixels[y * CANVAS_SIZE/2 + x/2]\\n                        4 places to the right, and then mask it with 15 (\\\"00001111\\\").\\n                 */\\n                uint256 current = (pixels[y * CANVAS_SIZE/2 + x/2] >> (4*(x%2))) & 15; // current pixel color.\\n\\n                if (prev == current) {\\n                    width++;\\n                } else {\\n                    paths[prev] = string(abi.encodePacked(paths[prev], \\\"h\\\", ColorUtils.uint2str(width)));\\n                    width = 1;\\n\\n                    paths[current] = string(abi.encodePacked(paths[current], \\\"M\\\", ColorUtils.uint2str(x), \\\" \\\", ColorUtils.uint2str(y)));\\n                }\\n\\n                if (x == CANVAS_SIZE - 1) {\\n                    paths[current] = string(abi.encodePacked(paths[current], \\\"h\\\", ColorUtils.uint2str(width)));\\n                }\\n\\n                prev = current;\\n\\n                unchecked {\\n                    ++x;\\n                }\\n            }\\n            unchecked {\\n                ++y;\\n            }\\n        }\\n\\n        string memory joined;\\n        for (uint256 i; i < PALETTE_SIZE;) {\\n            if (bytes(paths[i]).length > 0) {\\n                joined = string(abi.encodePacked(joined, '<path stroke=\\\"#', ColorUtils.uint2hex(palette[i]), '\\\" d=\\\"', paths[i], '\\\"/>'));\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return string(abi.encodePacked(HEADER, joined, FOOTER));\\n    }\\n\\n    // Using block-stacking approach with color variables (speed: ~1500 / size: ~8.5KB)\\n    // - pros: constant speed & svg size, faster worst-case speed\\n    // - cons: slower average speed, bigger svg size\\n\\n    /* DEPRECATED in favor of the solution above\\n    string private constant HEADER = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" viewBox=\\\"0 0 24 24\\\" shape-rendering=\\\"crispEdges\\\"><style>';\\n    string private constant FOOTER = '</style><defs><rect id=\\\"p\\\" width=\\\"40\\\" height=\\\"40\\\"/><svg id=\\\"r\\\"><use href=\\\"#p\\\" fill=\\\"var(--a)\\\"/><use href=\\\"#p\\\" x=\\\"1\\\" fill=\\\"var(--b)\\\"/><use href=\\\"#p\\\" x=\\\"2\\\" fill=\\\"var(--c)\\\"/><use href=\\\"#p\\\" x=\\\"3\\\" fill=\\\"var(--d)\\\"/><use href=\\\"#p\\\" x=\\\"4\\\" fill=\\\"var(--e)\\\"/><use href=\\\"#p\\\" x=\\\"5\\\" fill=\\\"var(--f)\\\"/><use href=\\\"#p\\\" x=\\\"6\\\" fill=\\\"var(--g)\\\"/><use href=\\\"#p\\\" x=\\\"7\\\" fill=\\\"var(--h)\\\"/><use href=\\\"#p\\\" x=\\\"8\\\" fill=\\\"var(--i)\\\"/><use href=\\\"#p\\\" x=\\\"9\\\" fill=\\\"var(--j)\\\"/><use href=\\\"#p\\\" x=\\\"10\\\" fill=\\\"var(--k)\\\"/><use href=\\\"#p\\\" x=\\\"11\\\" fill=\\\"var(--l)\\\"/><use href=\\\"#p\\\" x=\\\"12\\\" fill=\\\"var(--m)\\\"/><use href=\\\"#p\\\" x=\\\"13\\\" fill=\\\"var(--n)\\\"/><use href=\\\"#p\\\" x=\\\"14\\\" fill=\\\"var(--o)\\\"/><use href=\\\"#p\\\" x=\\\"15\\\" fill=\\\"var(--p)\\\"/><use href=\\\"#p\\\" x=\\\"16\\\" fill=\\\"var(--q)\\\"/><use href=\\\"#p\\\" x=\\\"17\\\" fill=\\\"var(--r)\\\"/><use href=\\\"#p\\\" x=\\\"18\\\" fill=\\\"var(--s)\\\"/><use href=\\\"#p\\\" x=\\\"19\\\" fill=\\\"var(--t)\\\"/><use href=\\\"#p\\\" x=\\\"20\\\" fill=\\\"var(--u)\\\"/><use href=\\\"#p\\\" x=\\\"21\\\" fill=\\\"var(--v)\\\"/><use href=\\\"#p\\\" x=\\\"22\\\" fill=\\\"var(--w)\\\"/><use href=\\\"#p\\\" x=\\\"23\\\" fill=\\\"var(--x)\\\"/></svg></defs><use href=\\\"#r\\\" class=\\\"a\\\"/><use href=\\\"#r\\\" y=\\\"1\\\" class=\\\"b\\\"/><use href=\\\"#r\\\" y=\\\"2\\\" class=\\\"c\\\"/><use href=\\\"#r\\\" y=\\\"3\\\" class=\\\"d\\\"/><use href=\\\"#r\\\" y=\\\"4\\\" class=\\\"e\\\"/><use href=\\\"#r\\\" y=\\\"5\\\" class=\\\"f\\\"/><use href=\\\"#r\\\" y=\\\"6\\\" class=\\\"g\\\"/><use href=\\\"#r\\\" y=\\\"7\\\" class=\\\"h\\\"/><use href=\\\"#r\\\" y=\\\"8\\\" class=\\\"i\\\"/><use href=\\\"#r\\\" y=\\\"9\\\" class=\\\"j\\\"/><use href=\\\"#r\\\" y=\\\"10\\\" class=\\\"k\\\"/><use href=\\\"#r\\\" y=\\\"11\\\" class=\\\"l\\\"/><use href=\\\"#r\\\" y=\\\"12\\\" class=\\\"m\\\"/><use href=\\\"#r\\\" y=\\\"13\\\" class=\\\"n\\\"/><use href=\\\"#r\\\" y=\\\"14\\\" class=\\\"o\\\"/><use href=\\\"#r\\\" y=\\\"15\\\" class=\\\"p\\\"/><use href=\\\"#r\\\" y=\\\"16\\\" class=\\\"q\\\"/><use href=\\\"#r\\\" y=\\\"17\\\" class=\\\"r\\\"/><use href=\\\"#r\\\" y=\\\"18\\\" class=\\\"s\\\"/><use href=\\\"#r\\\" y=\\\"19\\\" class=\\\"t\\\"/><use href=\\\"#r\\\" y=\\\"20\\\" class=\\\"u\\\"/><use href=\\\"#r\\\" y=\\\"21\\\" class=\\\"v\\\"/><use href=\\\"#r\\\" y=\\\"22\\\" class=\\\"w\\\"/><use href=\\\"#r\\\" y=\\\"23\\\" class=\\\"x\\\"/></svg>';\\n    bytes32 private constant CLASS = 'abcdefghijklmnopqrstuvwx'; // class names for each row, pixel (length must be equal to CANVAS_SIZE)\\n\\n    function _generateSVG(uint24[PALETTE_SIZE] memory palette, uint8[TOTAL_PIXEL_COUNT] memory pixels) internal pure returns (string memory) {\\n        string memory joined;\\n        string[CANVAS_SIZE] memory styles;\\n\\n        for (uint256 x = 0; x < CANVAS_SIZE; x++) {\\n            styles[x] = string(abi.encodePacked(styles[x], '.', CLASS[x], '{'));\\n\\n            for (uint256 y = 0; y < CANVAS_SIZE; y++) {\\n                styles[x] = string(abi.encodePacked(styles[x], '--', CLASS[y], ':#', ColorUtils.uint2hex(palette[pixels[x * CANVAS_SIZE + y]]), ';'));\\n            }\\n\\n            styles[x] = string(abi.encodePacked(styles[x], '}'));\\n            joined = string(abi.encodePacked(joined, styles[x]));\\n        }\\n\\n        return string(abi.encodePacked(HEADER, joined, FOOTER));\\n    }\\n    */\\n\\n    function _generateBase64SVG(uint24[PALETTE_SIZE] memory palette, uint8[PIXEL_ARRAY_SIZE] memory pixels) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"data:image/svg+xml;base64,\\\", Base64.encode(bytes(_generateSVG(palette, pixels)))));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"DixelClubV2__AlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__DescriptionTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__Initalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"DixelClubV2__InvalidCost\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invalid\",\"type\":\"uint256\"}],\"name\":\"DixelClubV2__InvalidRoyalty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__MaximumMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__NotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"beginAt\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"nowAt\",\"type\":\"uint40\"}],\"name\":\"DixelClubV2__NotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__PrivateCollection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DixelClubV2__PublicCollection\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"DixelClubV2__WhiteListValueDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721Queryable__InvalidQueryRange\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FRICTION_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ROYALTY_FRACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateBase64SVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPixels\",\"outputs\":[{\"internalType\":\"uint8[288]\",\"name\":\"\",\"type\":\"uint8[288]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getAllWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWhitelistAllowanceLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWhitelistIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"whitelistOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hidden\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"royaltyFriction\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"mintingBeginsFrom\",\"type\":\"uint40\"},{\"internalType\":\"uint152\",\"name\":\"mintingCost\",\"type\":\"uint152\"}],\"internalType\":\"struct Shared.MetaData\",\"name\":\"metaData_\",\"type\":\"tuple\"},{\"internalType\":\"uint24[16]\",\"name\":\"palette_\",\"type\":\"uint24[16]\"},{\"internalType\":\"uint8[288]\",\"name\":\"pixels_\",\"type\":\"uint8[288]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"initializedAt_\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"hidden_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"whitelistOnly_\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"maxSupply_\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"royaltyFriction_\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"mintingBeginsFrom_\",\"type\":\"uint40\"},{\"internalType\":\"uint168\",\"name\":\"mintingCost_\",\"type\":\"uint168\"},{\"internalType\":\"string\",\"name\":\"description_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nextTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint8[288]\",\"name\":\"pixels_\",\"type\":\"uint8[288]\"},{\"internalType\":\"uint24[16]\",\"name\":\"defaultPalette_\",\"type\":\"uint24[16]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"whitelistIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint24[16]\",\"name\":\"palette\",\"type\":\"uint24[16]\"}],\"name\":\"mintPrivate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint24[16]\",\"name\":\"palette\",\"type\":\"uint24[16]\"}],\"name\":\"mintPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"paletteOf\",\"outputs\":[{\"internalType\":\"uint24[16]\",\"name\":\"\",\"type\":\"uint24[16]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenJSON\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"whitelistOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hidden\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"royaltyFriction\",\"type\":\"uint24\"},{\"internalType\":\"uint40\",\"name\":\"mintingBeginsFrom\",\"type\":\"uint40\"},{\"internalType\":\"uint152\",\"name\":\"mintingCost\",\"type\":\"uint152\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "DixelClubV2NFT", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}