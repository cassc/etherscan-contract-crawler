{"SourceCode": "/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */\r\n/* -.-.-.-.-.   BANK OF NOWHERE LOTTO  V2.07  .-.-.-.-. */\r\n/* -.-.-.-.-.    [[ BUILT BY REBEL LABS ]]    .-.-.-.-. */\r\n/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */\r\n\r\n\r\n// File: @api3/airnode-protocol/contracts/rrp/interfaces/IWithdrawalUtilsV0.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWithdrawalUtilsV0 {\r\n    event RequestedWithdrawal(\r\n        address indexed airnode,\r\n        address indexed sponsor,\r\n        bytes32 indexed withdrawalRequestId,\r\n        address sponsorWallet\r\n    );\r\n\r\n    event FulfilledWithdrawal(\r\n        address indexed airnode,\r\n        address indexed sponsor,\r\n        bytes32 indexed withdrawalRequestId,\r\n        address sponsorWallet,\r\n        uint256 amount\r\n    );\r\n\r\n    function requestWithdrawal(address airnode, address sponsorWallet) external;\r\n\r\n    function fulfillWithdrawal(\r\n        bytes32 withdrawalRequestId,\r\n        address airnode,\r\n        address sponsor\r\n    ) external payable;\r\n\r\n    function sponsorToWithdrawalRequestCount(address sponsor)\r\n        external\r\n        view\r\n        returns (uint256 withdrawalRequestCount);\r\n}\r\n\r\n// File: @api3/airnode-protocol/contracts/rrp/interfaces/ITemplateUtilsV0.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ITemplateUtilsV0 {\r\n    event CreatedTemplate(\r\n        bytes32 indexed templateId,\r\n        address airnode,\r\n        bytes32 endpointId,\r\n        bytes parameters\r\n    );\r\n\r\n    function createTemplate(\r\n        address airnode,\r\n        bytes32 endpointId,\r\n        bytes calldata parameters\r\n    ) external returns (bytes32 templateId);\r\n\r\n    function getTemplates(bytes32[] calldata templateIds)\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory airnodes,\r\n            bytes32[] memory endpointIds,\r\n            bytes[] memory parameters\r\n        );\r\n\r\n    function templates(bytes32 templateId)\r\n        external\r\n        view\r\n        returns (\r\n            address airnode,\r\n            bytes32 endpointId,\r\n            bytes memory parameters\r\n        );\r\n}\r\n\r\n// File: @api3/airnode-protocol/contracts/rrp/interfaces/IAuthorizationUtilsV0.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAuthorizationUtilsV0 {\r\n    function checkAuthorizationStatus(\r\n        address[] calldata authorizers,\r\n        address airnode,\r\n        bytes32 requestId,\r\n        bytes32 endpointId,\r\n        address sponsor,\r\n        address requester\r\n    ) external view returns (bool status);\r\n\r\n    function checkAuthorizationStatuses(\r\n        address[] calldata authorizers,\r\n        address airnode,\r\n        bytes32[] calldata requestIds,\r\n        bytes32[] calldata endpointIds,\r\n        address[] calldata sponsors,\r\n        address[] calldata requesters\r\n    ) external view returns (bool[] memory statuses);\r\n}\r\n\r\n// File: @api3/airnode-protocol/contracts/rrp/interfaces/IAirnodeRrpV0.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IAirnodeRrpV0 is\r\n    IAuthorizationUtilsV0,\r\n    ITemplateUtilsV0,\r\n    IWithdrawalUtilsV0\r\n{\r\n    event SetSponsorshipStatus(\r\n        address indexed sponsor,\r\n        address indexed requester,\r\n        bool sponsorshipStatus\r\n    );\r\n\r\n    event MadeTemplateRequest(\r\n        address indexed airnode,\r\n        bytes32 indexed requestId,\r\n        uint256 requesterRequestCount,\r\n        uint256 chainId,\r\n        address requester,\r\n        bytes32 templateId,\r\n        address sponsor,\r\n        address sponsorWallet,\r\n        address fulfillAddress,\r\n        bytes4 fulfillFunctionId,\r\n        bytes parameters\r\n    );\r\n\r\n    event MadeFullRequest(\r\n        address indexed airnode,\r\n        bytes32 indexed requestId,\r\n        uint256 requesterRequestCount,\r\n        uint256 chainId,\r\n        address requester,\r\n        bytes32 endpointId,\r\n        address sponsor,\r\n        address sponsorWallet,\r\n        address fulfillAddress,\r\n        bytes4 fulfillFunctionId,\r\n        bytes parameters\r\n    );\r\n\r\n    event FulfilledRequest(\r\n        address indexed airnode,\r\n        bytes32 indexed requestId,\r\n        bytes data\r\n    );\r\n\r\n    event FailedRequest(\r\n        address indexed airnode,\r\n        bytes32 indexed requestId,\r\n        string errorMessage\r\n    );\r\n\r\n    function setSponsorshipStatus(address requester, bool sponsorshipStatus)\r\n        external;\r\n\r\n    function makeTemplateRequest(\r\n        bytes32 templateId,\r\n        address sponsor,\r\n        address sponsorWallet,\r\n        address fulfillAddress,\r\n        bytes4 fulfillFunctionId,\r\n        bytes calldata parameters\r\n    ) external returns (bytes32 requestId);\r\n\r\n    function makeFullRequest(\r\n        address airnode,\r\n        bytes32 endpointId,\r\n        address sponsor,\r\n        address sponsorWallet,\r\n        address fulfillAddress,\r\n        bytes4 fulfillFunctionId,\r\n        bytes calldata parameters\r\n    ) external returns (bytes32 requestId);\r\n\r\n    function fulfill(\r\n        bytes32 requestId,\r\n        address airnode,\r\n        address fulfillAddress,\r\n        bytes4 fulfillFunctionId,\r\n        bytes calldata data,\r\n        bytes calldata signature\r\n    ) external returns (bool callSuccess, bytes memory callData);\r\n\r\n    function fail(\r\n        bytes32 requestId,\r\n        address airnode,\r\n        address fulfillAddress,\r\n        bytes4 fulfillFunctionId,\r\n        string calldata errorMessage\r\n    ) external;\r\n\r\n    function sponsorToRequesterToSponsorshipStatus(\r\n        address sponsor,\r\n        address requester\r\n    ) external view returns (bool sponsorshipStatus);\r\n\r\n    function requesterToRequestCountPlusOne(address requester)\r\n        external\r\n        view\r\n        returns (uint256 requestCountPlusOne);\r\n\r\n    function requestIsAwaitingFulfillment(bytes32 requestId)\r\n        external\r\n        view\r\n        returns (bool isAwaitingFulfillment);\r\n}\r\n\r\n// File: @api3/airnode-protocol/contracts/rrp/requesters/RrpRequesterV0.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/// @title The contract to be inherited to make Airnode RRP requests\r\ncontract RrpRequesterV0 {\r\n    IAirnodeRrpV0 public immutable airnodeRrp;\r\n\r\n    /// @dev Reverts if the caller is not the Airnode RRP contract.\r\n    /// Use it as a modifier for fulfill and error callback methods, but also\r\n    /// check `requestId`.\r\n    modifier onlyAirnodeRrp() {\r\n        require(msg.sender == address(airnodeRrp), \"Caller not Airnode RRP\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Airnode RRP address is set at deployment and is immutable.\r\n    /// RrpRequester is made its own sponsor by default. RrpRequester can also\r\n    /// be sponsored by others and use these sponsorships while making\r\n    /// requests, i.e., using this default sponsorship is optional.\r\n    /// @param _airnodeRrp Airnode RRP contract address\r\n    constructor(address _airnodeRrp) {\r\n        airnodeRrp = IAirnodeRrpV0(_airnodeRrp);\r\n        IAirnodeRrpV0(_airnodeRrp).setSponsorshipStatus(address(this), true);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/BONLottoV2_07.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */\r\n/* -.-.-.-.-.   BANK OF NOWHERE LOTTO  V2.07  .-.-.-.-. */\r\n/* -.-.-.-.-.    [[ BUILT BY REBEL LABS ]]    .-.-.-.-. */\r\n/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. */\r\n\r\n/* .---------------------- setup ---------------------. //\r\n- (1) Deploy contract\r\n- (2) Create 'sponsor wallet' for API3 QRNG system\r\n- (3) Fund sponsor wallet with MATIC\r\n- (4) Call address(this).setRequestParameters()\r\n// .--------------------------------------------------. */\r\n\r\n\r\n\r\n\r\ncontract LottoV2 is Ownable, RrpRequesterV0 {\r\n    \r\n    // LOTTO VARS\r\n    address private treasury;\r\n    address private dev1;\r\n    address private dev2;\r\n    address public player1W;\r\n    address public player2W;\r\n    uint256 public betPrice;\r\n    uint256 public counter;\r\n    bool public lottoOpen;\r\n    bool public taxSwitch;\r\n\r\n    mapping(uint256 => bool) public pastLottoClaimed;\r\n    mapping(uint256 => address) public pastLottoPlayer1;\r\n    mapping(uint256 => address) public pastLottoPlayer2;\r\n    mapping(uint256 => address) public pastLottoResults;\r\n    mapping(uint256 => uint256) public pastLottoRewards;\r\n    mapping(bytes32 => uint256) public pastLottoAPI3CallCounter;\r\n    mapping(uint256 => uint256) public pastLottoAPI3CallResult;\r\n\r\n    event BetDetails (uint256 playersCounter, uint256 counterReward);\r\n    event ClaimDetails (uint256 claimedCounter, uint256 claimedRewards);\r\n\r\n    // API3 VARS\r\n    address public airnode;\r\n    bytes32 public endpointIdUint256;\r\n    address public sponsorWallet;\r\n    mapping(bytes32 => bool) public expectingRequestWithIdToBeFulfilled;\r\n\r\n    constructor(\r\n        address _treasury,\r\n        address _dev1,\r\n        address _dev2,\r\n        uint256 _betPrice,\r\n        address _airnodeRrp\r\n        ) RrpRequesterV0(_airnodeRrp){\r\n        treasury = _treasury;\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        player1W = address(0);\r\n        player2W = address(0);\r\n        betPrice = _betPrice;\r\n        counter = 0;\r\n        lottoOpen = true;\r\n        taxSwitch = true;\r\n    }\r\n\r\n    // --- PUBLIC FUNCTIONS ---\r\n\r\n    function bet() public payable{\r\n        // REQUIREMENTS STAGE\r\n        require(betPrice <= msg.value, \"Need more gas to pay the betPrice\");\r\n        require(lottoOpen == true, \"Lotto is not accepting bets\");\r\n        require(player1W != msg.sender, \"Can not bet twice\");\r\n\r\n        // PAYMENT STAGE\r\n        if(taxSwitch == true){\r\n            _sendTaxes();\r\n        }\r\n\r\n        // EVALUATE STAGE\r\n        if ((player1W == address(0)) && (player2W == address(0))){\r\n            // PLAYER'S 1 TURN\r\n            counter++;\r\n            player1W = msg.sender;\r\n            pastLottoPlayer1[counter] = player1W;\r\n            pastLottoRewards[counter] = (betPrice - (betPrice * 10 / 100)) *2;\r\n        }\r\n        else if ((player1W != address(0)) && (player2W == address(0))){\r\n            // PLAYER'S 2 TURN\r\n            player2W = msg.sender;\r\n            pastLottoPlayer2[counter] = player2W;\r\n\r\n            // API3 QRNG CALL\r\n            _makeAPICall();\r\n\r\n            // RESET LOTTO\r\n            player1W = address(0);\r\n            player2W = address(0);\r\n            betPrice = betPrice * 11 / 10;\r\n        }\r\n\r\n        emit BetDetails(counter, pastLottoRewards[counter]);\r\n    }\r\n\r\n    function checkLotto(uint256 _counter) public view returns(\r\n        address winner, \r\n        uint256 rewards, \r\n        bool claimed){\r\n        require(lottoOpen, \"Lotto is not open\");\r\n        winner = pastLottoResults[_counter];\r\n        rewards = pastLottoRewards[_counter];\r\n        claimed = pastLottoClaimed[_counter];\r\n        return (winner, rewards, claimed);\r\n    }\r\n    \r\n    function claimLotto(uint256 _counter) public returns(uint256 rewards){\r\n        require(pastLottoResults[_counter] == msg.sender, \"This wallet is not the winner\");\r\n        require(pastLottoClaimed[_counter] != true, \"This reward has already been claimed\");\r\n        require(lottoOpen, \"Lotto is not open\");\r\n\r\n        pastLottoClaimed[_counter] = true;\r\n        rewards = pastLottoRewards[_counter];\r\n        (bool transfer1, )  = payable(msg.sender).call{value: rewards}(\"rewards\");\r\n        require(transfer1, \"Transfer failed\");\r\n\r\n        emit ClaimDetails(_counter, rewards);\r\n        return (rewards);\r\n    }\r\n    \r\n    // --- DEV FUNCTIONS ---\r\n    function _sendTaxes() internal{\r\n        uint256 tax1 = betPrice * 6 / 100;\r\n        uint256 tax2 = betPrice * 2 / 100;\r\n        uint256 tax3 = betPrice * 2 / 100;\r\n        payable(treasury).transfer(tax1);\r\n        payable(dev1).transfer(tax2);\r\n        payable(dev2).transfer(tax3);\r\n    }\r\n    \r\n    function resetLotto(\r\n        address _treasury, \r\n        address _dev1, \r\n        address _dev2, \r\n        address _player1W, \r\n        address _player2W, \r\n        uint256 _betPrice, \r\n        uint256 _counter,\r\n        bool _lottoOpen,\r\n        bool _taxSwitch,\r\n        bool _resetFunds, \r\n        address _erc20token\r\n        ) external onlyOwner{\r\n        treasury = _treasury;\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        player1W = _player1W;\r\n        player2W = _player2W;\r\n        betPrice = _betPrice; \r\n        counter = _counter;\r\n        lottoOpen = _lottoOpen;\r\n        taxSwitch = _taxSwitch;\r\n        \r\n        if(_resetFunds == true){\r\n            uint256 erc20Balance = IERC20(_erc20token).balanceOf(address(this));\r\n            if(erc20Balance > 0){\r\n                bool transferAOne = IERC20(_erc20token).transfer(treasury, erc20Balance);\r\n                require(transferAOne, \"transfer failed!\");\r\n            }\r\n            uint256 gasBalance = address(this).balance;\r\n            if(gasBalance > 0){\r\n                ( bool transferBOne, ) = payable(treasury).call{value: gasBalance}(\"\");\r\n                require(transferBOne, \"Transfer failed.\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function pauseLotto(bool _lottoOpen) external onlyOwner{\r\n        lottoOpen = _lottoOpen;\r\n    }\r\n    \r\n    // --- API3 FUNCTIONS ---\r\n    function setRequestParameters(\r\n        address _airnode,\r\n        bytes32 _endpointIdUint256,\r\n        address _sponsorWallet\r\n        ) external onlyOwner {\r\n        airnode = _airnode;\r\n        endpointIdUint256 = _endpointIdUint256;\r\n        sponsorWallet = _sponsorWallet;\r\n    }\r\n\r\n    function _makeAPICall() private{\r\n        bytes32 requestId = airnodeRrp.makeFullRequest(\r\n            airnode,\r\n            endpointIdUint256,\r\n            address(this),\r\n            sponsorWallet,\r\n            address(this),\r\n            this.fulfillUint256.selector,\r\n            \"\"\r\n        );\r\n        expectingRequestWithIdToBeFulfilled[requestId] = true;\r\n        pastLottoAPI3CallCounter[requestId] = counter;\r\n    }\r\n\r\n    function fulfillUint256(bytes32 requestId, bytes calldata data) external onlyAirnodeRrp{\r\n        require(expectingRequestWithIdToBeFulfilled[requestId],\"Request ID not known\");\r\n        expectingRequestWithIdToBeFulfilled[requestId] = false;\r\n        uint256 qrngUint256 = abi.decode(data, (uint256));\r\n\r\n        uint256 requestIdCounter = pastLottoAPI3CallCounter[requestId];\r\n        pastLottoAPI3CallResult[requestIdCounter] = qrngUint256;\r\n        if(qrngUint256 % 2 == 0){\r\n            pastLottoResults[requestIdCounter] = pastLottoPlayer2[requestIdCounter];\r\n        } else{\r\n            pastLottoResults[requestIdCounter] = pastLottoPlayer1[requestIdCounter];\r\n        }\r\n    }\r\n    \r\n    fallback() external payable{\r\n    }\r\n    receive() external payable{\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_airnodeRrp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playersCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"counterReward\",\"type\":\"uint256\"}],\"name\":\"BetDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedCounter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"name\":\"ClaimDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"airnode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airnodeRrp\",\"outputs\":[{\"internalType\":\"contract IAirnodeRrpV0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"}],\"name\":\"checkLotto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"}],\"name\":\"claimLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpointIdUint256\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"expectingRequestWithIdToBeFulfilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfillUint256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lottoOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pastLottoAPI3CallCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastLottoAPI3CallResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastLottoClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastLottoPlayer1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastLottoPlayer2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastLottoResults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pastLottoRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lottoOpen\",\"type\":\"bool\"}],\"name\":\"pauseLotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"player1W\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"player2W\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_player1W\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_player2W\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lottoOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_taxSwitch\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_resetFunds\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_erc20token\",\"type\":\"address\"}],\"name\":\"resetLotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_endpointIdUint256\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_sponsorWallet\",\"type\":\"address\"}],\"name\":\"setRequestParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sponsorWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LottoV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000ef538a11fb3441eb9b5444654a8075cd63afddff000000000000000000000000c70c1a847ee38883179a2ec0767868257b18bd670000000000000000000000002b5ff8cba8ed3a6e7813cd5e55ecd95b87791cee00000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000a0ad79d995ddeeb18a14eaef56a549a04e3aa1bd", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://25c81dca3603e9a0caaa7624c443438c99634e9f066b659f166588eedbd37091"}