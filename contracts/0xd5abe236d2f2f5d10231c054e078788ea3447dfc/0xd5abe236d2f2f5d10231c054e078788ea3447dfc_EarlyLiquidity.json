{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/EarlyLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IEarlyLiquidity} from \\\"@/interfaces/IEarlyLiquidity.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ABDKMath64x64} from \\\"@/libraries/ABDKMath64x64.sol\\\";\\nimport {IMinerPool} from \\\"@/interfaces/IMinerPool.sol\\\";\\n\\ninterface IDecimals {\\n    error IncorrectDecimals();\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @title EarlyLiquidity\\n * @author @DavidVorick\\n * @author twitter: @0xSimon github: @0xSimbo\\n * @notice This contract allows users to buy Glow tokens with USDC\\n * @dev the cost of glow rises exponentially with the amount of glow sold\\n *         -  The price at increment x = 0.003 * 2^((x)/ 100_000_000)\\n *            - if the function above to get price of increment x if f(x)\\n *            - Then, the price to buy y tokens is \u03a3 f(x) from x = the total increments sold, to x = the total increments sold + y\\n *            - For example, to buy the first ten increments, (aka the first .1 tokens), the price is\\n *                 -   f(0) + f(1) .... + f(9)\\n *                 - To buy the next ten increments, or token .1 -> .2, the price is\\n *                 -   f(10) + f(11) ... + f(19)\\n * @dev to calculate the price for y tokens in real time, we use the sum of a geometric series which allows us\\n *         - to efficiently calculate the price of y tokens in real time rather than looping through all the increments\\n */\\n\\ncontract EarlyLiquidity is IEarlyLiquidity {\\n    using ABDKMath64x64 for int128;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  constants                                 */\\n    /* -------------------------------------------------------------------------- */\\n    /// @dev Represents 1.0000000069314718 in 64x64 format, or `r` in the geometric series\\n    int128 private constant _RATIO = 18446744201572638720;\\n\\n    /// @dev Represents 0.003 USDC in 64x64 format\\n    int128 private constant _POINT_ZERO_ZERO_THREE = 55340232221128654848000;\\n\\n    /// @dev Represents 1 in 64x64 format\\n    int128 private constant _ONE = 18446744073709551616;\\n\\n    /// @dev Represents ln(r) in 64x64 format\\n    int128 private constant _LN_RATIO = 127863086660;\\n\\n    /// @dev Represents  1e8 in 64x64 format\\n    int128 private constant _ONE_HUNDRED_MILLION = 100_000_000 << 64;\\n\\n    /// @dev Represents ln(2) in 64x64 format\\n    int128 private constant _LN_2 = 12786308645202655659;\\n\\n    /// @dev represents (1-r) in 64x64 format\\n    /// @dev r =  1 - 1.0000000069314718 =  0000000069314718\\n    int128 private constant _DENOMINATOR = -127863086349;\\n\\n    /// @dev The number of decimals for USDC\\n    uint256 public constant USDC_DECIMALS = 6;\\n\\n    /**\\n     * @notice the total amount of .01 increments to sell\\n     *     - equals to 12,000,000 GLW total\\n     * @dev The total number of glow tokens to sell\\n     * @dev 12 million GLOW tokens\\n     * @dev .01 * 1_200_000_000 = 12_000_000\\n     */\\n    uint256 public constant TOTAL_INCREMENTS_TO_SELL = 1_200_000_000;\\n\\n    /**\\n     * @notice the minimum increment that tokens can be bought in .01 GLW\\n     * @dev The minimum increment that tokens can be bought in\\n     * @dev this is essential so our floating point math doesn't break\\n     */\\n    uint256 public constant MIN_TOKEN_INCREMENT = 1e16;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 immutables                                 */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice USDC token\\n     * @dev The USDC token\\n     */\\n    IERC20 public immutable USDC_TOKEN;\\n\\n    /**\\n     * @notice The address of the holding contract\\n     * @dev the holding contract holds all USDC tokens\\n     */\\n    address public immutable HOLDING_CONTRACT;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 state vars                                */\\n    /* -------------------------------------------------------------------------- */\\n    /// @dev tokens are demagnified by 1e18 to make floating point math easier\\n    /// @dev the {totalSold} function returns the total sold in 1e18 (GLW DECIMALS)\\n    uint256 private _totalIncrementsSold;\\n\\n    /// @notice The Glow token\\n    IERC20 public immutable GLOW_TOKEN;\\n\\n    /// @notice The miner pool contract\\n    /// @dev all USDC is donated to the miner pool\\n    IMinerPool public immutable MINER_POOL;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 constructor                                */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Constructs the EarlyLiquidity contract\\n     * @param _usdcAddress The address of the USDC token\\n     * @param _holdingContract The address of the holding contract\\n     * @param _glowToken The address of the glow token\\n     * @param _minerPoolAddress The address of the miner pool\\n     */\\n    constructor(address _usdcAddress, address _holdingContract, address _glowToken, address _minerPoolAddress)\\n        payable\\n    {\\n        USDC_TOKEN = IERC20(_usdcAddress);\\n        uint256 decimals = uint256(IDecimals(_usdcAddress).decimals());\\n        if (decimals != USDC_DECIMALS) {\\n            _revert(IDecimals.IncorrectDecimals.selector);\\n        }\\n        HOLDING_CONTRACT = _holdingContract;\\n        GLOW_TOKEN = IERC20(_glowToken);\\n        MINER_POOL = IMinerPool(_minerPoolAddress);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                  buy glow                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @inheritdoc IEarlyLiquidity\\n     */\\n    function buy(uint256 increments, uint256 maxCost) external {\\n        // Cache the minerPool in memory for gas optimization.\\n        IMinerPool pool = MINER_POOL;\\n        address _holdingContract = HOLDING_CONTRACT;\\n\\n        // Calculate the total cost of the desired amount of tokens.\\n        uint256 totalCost = getPrice(increments);\\n\\n        // If the computed total cost is greater than the user's specified max cost, revert the transaction.\\n        if (totalCost > maxCost) {\\n            _revert(IEarlyLiquidity.PriceTooHigh.selector);\\n        }\\n\\n        // Calculate the exact amount of tokens to send to the user. Convert the normalized increments back to its original scale.\\n        // Impossible to overflow since this is equal to {increments} in the function inputs\\n        // 1 increment = .01 (or 1e16) glw\\n        uint256 glowToSend = increments * 1e16;\\n\\n        // Check the balance of USDC in the miner pool before making a transfer.\\n        uint256 balBefore = USDC_TOKEN.balanceOf(_holdingContract);\\n\\n        // Transfer USDC from the user to the miner pool to pay for the tokens.\\n        SafeERC20.safeTransferFrom(USDC_TOKEN, msg.sender, _holdingContract, totalCost);\\n\\n        // Check the balance of USDC in the miner pool after the transfer to find the actual transferred amount.\\n        uint256 balAfter = USDC_TOKEN.balanceOf(_holdingContract);\\n        //Underflow should be impossible, unless the USDC contract is hacked and malicious\\n        //in which case, this transaction will revert\\n        //For almost all cases possible, this should not underflow/revert\\n        uint256 diff = balAfter - balBefore;\\n\\n        // Transfer the desired amount of tokens to the user.\\n        SafeERC20.safeTransfer(GLOW_TOKEN, msg.sender, glowToSend);\\n\\n        // Donate the received USDC to the miner rewards pool, possibly accounting for a tax or fee.\\n        pool.donateToUSDCMinerRewardsPoolEarlyLiquidity(diff);\\n\\n        // Update the total amount of tokens sold by adding the normalized amount to the total.\\n        _totalIncrementsSold += increments;\\n\\n        // Emit an event to log the purchase details.\\n        emit IEarlyLiquidity.Purchase(msg.sender, glowToSend, totalCost);\\n\\n        // End of function; the explicit 'return' here is unnecessary but it indicates the function's conclusion.\\n        return;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 view functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @inheritdoc IEarlyLiquidity\\n     */\\n    function getPrice(uint256 incrementsToPurchase) public view returns (uint256) {\\n        if (incrementsToPurchase == 0) return 0;\\n\\n        return _getPrice(_totalIncrementsSold, incrementsToPurchase);\\n    }\\n\\n    /**\\n     * @inheritdoc IEarlyLiquidity\\n     */\\n    function totalSold() public view returns (uint256) {\\n        return _totalIncrementsSold * MIN_TOKEN_INCREMENT;\\n    }\\n\\n    /**\\n     * @inheritdoc IEarlyLiquidity\\n     */\\n    function getCurrentPrice() external view returns (uint256) {\\n        return _getPrice(_totalIncrementsSold, 1);\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 internal view                              */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice Calculates the price of a given amount of tokens\\n     * @param totalIncrementsSold The total amount of .01 increments sold\\n     * @param incrementsToBuy The amount of .01 increments to buy\\n     * @return price price of the increments to purchase in USDC\\n     * @dev since our increments are in .01, the function evaluates to \u03a3 .003 * 2^((incrementId)/ 100_000_000)\\n     *         - for increment id = totalIncrementsSold  id: to incrementId = incrementsToBuy\\n     *         - rounding errors do occur due to floating point math, but divergence is sub 1e-7\\n     */\\n\\n    function _getPrice(uint256 totalIncrementsSold, uint256 incrementsToBuy) private pure returns (uint256) {\\n        // Check if the combined total of tokens sold and tokens to buy exceed the allowed amount.\\n        // If it does, revert the transaction.\\n        if (totalIncrementsSold + incrementsToBuy > TOTAL_INCREMENTS_TO_SELL) {\\n            _revert(IEarlyLiquidity.AllSold.selector);\\n        }\\n\\n        // Convert the number of increments to buy into a fixed-point representation.\\n        int128 n = ABDKMath64x64.fromUInt(incrementsToBuy);\\n\\n        // Compute r^n, where 'r' is the common ratio of the geometric series.\\n        // Using logarithmic properties, we compute the exponent as: n * ln(r).\\n        // This step computes the value of r raised to the power of n.\\n        int128 rToTheN = ABDKMath64x64.exp(ABDKMath64x64.mul(n, _LN_RATIO));\\n\\n        // Calculate the numerator for the sum formula of an infinite geometric series:\\n        // numerator = 1 - r^n\\n        int128 numerator = _ONE.sub(rToTheN);\\n\\n        // Divide the numerator by the denominator, where the denominator is typically\\n        // (1 - r) for the sum of an infinite geometric series. Here, the denominator\\n        // the fixed-point representation of (1 - r).\\n        int128 divisionResult = numerator.div(_DENOMINATOR);\\n\\n        // Calculate the first term in the geometric series. The first term is based on\\n        // the total amount of increments already sold.\\n        int128 firstTermInSeries = _getFirstTermInSeries(totalIncrementsSold);\\n\\n        //divisionResult > than geometricSeries, so we convert divisionResult to uint256\\n        uint256 firstTimeInSerieWithFixed = uint256(int256(firstTermInSeries));\\n        //divisionResult is always positive so we can cast it to uint256\\n        uint256 divUint = uint256(int256(divisionResult));\\n        //We do the fixed point math in uint256 domain since we know that the result will be positive\\n        //Below is a fixed point multiplication\\n        uint256 mulResFixed = firstTimeInSerieWithFixed * divUint >> 64;\\n        //convert {mulResFixed} back to uint256\\n        return mulResFixed >> 64;\\n\\n        // The following comments are for the purpose of explaining why the code cannot overflow.\\n        //The maximum value of totalIncrementsSold is 1,200,000,000\\n        //The maximum value of incrementsToBuy is     1,200,000,000\\n        //The max value of n is 1,200,000\\n        // _LN_RATIO  = ln(1.0000000069314718)\\n        //The maximum value of rToTheN is e^(1,200,000,000 * ln(r)) = e^8.317766180304424 = 4096.000055644491\\n        //The maximum value of numerator is 1 -  4096 = -4095\\n        //The maximum value of divisionResult is -4095 / -0.0000000069314718  = 590,783,619,721.2834\\n        //The maximum value of firstTermInSeries is 3000 * 2^12 = 12288000\\n        //The maximum value of geometricSeries is 12288000 * 590,783,619,721.2834  = 7.259549119135131e+18\\n        //This cant overflow since it's < 2^63-1\\n    }\\n\\n    /**\\n     *   @notice Calculates the first term in the geometric series for the current price of the current token\\n     *  @param totalIncrementsSold - the total number of increments that have already been sold\\n     *   @return  firstTerm -  first term to be used in the geometric series\\n     */\\n    function _getFirstTermInSeries(uint256 totalIncrementsSold) private pure returns (int128) {\\n        // Convert 'totalSold' to a fixed-point representation using ABDKMath64x64.\\n        // This is done to perform mathematical operations with precision.\\n        int128 floatingPointTotalSold = ABDKMath64x64.fromUInt(totalIncrementsSold);\\n\\n        // The goal is to compute the exponent for: 2^(totalIncrements / 100,000,000)\\n        // Using logarithmic properties, this can be re-written using the identity:\\n        // b^c = a^(ln(b)*c) => 2^(totalIncrements / 100,000,000) = e^(ln(2) * totalIncrements / 100,000,000)\\n        // Here, '_LN_2' is the natural logarithm of 2, and '_ONE_HUNDRED_MILLION' represents 100,000,000.\\n        int128 exponent = _LN_2.mul(floatingPointTotalSold).div(_ONE_HUNDRED_MILLION);\\n\\n        // Compute e^(exponent), which effectively calculates 2^(totalIncrements / 100,000,000)\\n        // because of the earlier logarithmic transformation.\\n        int128 baseResult = ABDKMath64x64.exp(exponent);\\n\\n        // Multiply the result by 0.003, where '_POINT_ZERO_ZERO_THREE' is the fixed-point representation of 0.003.\\n        int128 result = _POINT_ZERO_ZERO_THREE.mul(baseResult);\\n\\n        // The following comments are for the purpose of explaining why the code cannot overflow.\\n        //ln(2) = 0.693147......\\n        //floatingPointTotalSold will never be more than 1,200,000,000\\n        //so the maximum value of the exponent will be .693147 * 1,200,000,000 / 100,000,000 = 8.316\\n        //None of those numbers are greater than 2^63-1 (the maximum value of a 64x6x int)\\n        //Max value of baseResult possible is e^8.316 = 4,089 (rounded up)\\n        //The max input that baseResult can take in is 43 since (e^44 > type(64x64).max > e^43)\\n        //We will never cause an overflow in the exponent calculation\\n        //Max value of result is 1,000 * 4,088 = 4088000\\n        //This is well within the range of 2^63-1 = 9,223,372,036,854,775,807 approx 9.223372e+18\\n        // Return the final result.\\n        return result;\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                 private utils                              */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice More efficiently reverts with a bytes4 selector\\n     * @param selector The selector to revert with\\n     */\\n    function _revert(bytes4 selector) private pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x0, selector)\\n            revert(0x0, 0x04)\\n        }\\n    }\\n\\n    /**\\n     * @dev for more efficient zero address checks\\n     */\\n    function _isZeroAddress(address a) private pure returns (bool isZero) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly (\\\"memory-safe\\\") {\\n            isZero := iszero(a)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        if (nonceAfter != nonceBefore + 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IEarlyLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IEarlyLiquidity {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                  */\\n    /* -------------------------------------------------------------------------- */\\n    error PriceTooHigh();\\n    error ModNotZero();\\n    error AllSold();\\n    error MinerPoolAlreadySet();\\n    error ZeroAddress();\\n    error TooManyIncrements();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   events                                  */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice emitted when a purchase is made\\n     * @param buyer The address of the buyer\\n     * @param glwReceived The amount of glow the buyer received\\n     * @param totalUSDCSpent The total amount of USDC the buyer spent to buy the tokens\\n     * @dev emitted when {buy} is successfully called\\n     */\\n\\n    event Purchase(address indexed buyer, uint256 glwReceived, uint256 totalUSDCSpent);\\n\\n    /**\\n     * @notice Buys tokens with USDC\\n     * @param increments The amount of increments to buy\\n     *             - an {increment} is .01 GLW\\n     * @param maxCost The maximum cost to pay for all the increments\\n     */\\n    function buy(uint256 increments, uint256 maxCost) external;\\n\\n    /**\\n     * @notice Calculates the price of a given amount of tokens\\n     * @param increments The amount of increments to buy\\n     * @return price - the total price in USDC for the given amount of increments\\n     */\\n    function getPrice(uint256 increments) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total amount of GLW tokens sold so far\\n     * @return totalSold - total amount of GLW tokens sold so far (18 decimal value)\\n     */\\n    function totalSold() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current price of the next token.\\n     * @return currentPrice current price of the next token in microdollars\\n     */\\n    function getCurrentPrice() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/libraries/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n    /*\\n    * Minimum value signed 64.64-bit fixed point number may have. \\n    */\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /*\\n    * Maximum value signed 64.64-bit fixed point number may have. \\n    */\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromInt(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(x << 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n     * rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64-bit integer number\\n     */\\n    function toInt(int128 x) internal pure returns (int64) {\\n        unchecked {\\n            return int64(x >> 64);\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n     * number rounding down.  Revert on underflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return unsigned 64-bit integer number\\n     */\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n     * number rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 128.128-bin fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function from128x128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = x >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n     * number.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 128.128 fixed point number\\n     */\\n    function to128x128(int128 x) internal pure returns (int256) {\\n        unchecked {\\n            return int256(x) << 64;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function add(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) + y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sub(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) - y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = int256(x) * y >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n     * number and y is signed 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y signed 256-bit integer number\\n     * @return signed 256-bit integer number\\n     */\\n    function muli(int128 x, int256 y) internal pure returns (int256) {\\n        unchecked {\\n            if (x == MIN_64x64) {\\n                require(\\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                        && y <= 0x1000000000000000000000000000000000000000000000000\\n                );\\n                return -y << 63;\\n            } else {\\n                bool negativeResult = false;\\n                if (x < 0) {\\n                    x = -x;\\n                    negativeResult = true;\\n                }\\n                if (y < 0) {\\n                    y = -y; // We rely on overflow behavior here\\n                    negativeResult = !negativeResult;\\n                }\\n                uint256 absoluteResult = mulu(x, uint256(y));\\n                if (negativeResult) {\\n                    require(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\\n                    return -int256(absoluteResult); // We rely on overflow behavior here\\n                } else {\\n                    require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                    return int256(absoluteResult);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64 fixed point number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function div(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            int256 result = (int256(x) << 64) / y;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @param y signed 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divi(int256 x, int256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            bool negativeResult = false;\\n            if (x < 0) {\\n                x = -x; // We rely on overflow behavior here\\n                negativeResult = true;\\n            }\\n            if (y < 0) {\\n                y = -y; // We rely on overflow behavior here\\n                negativeResult = !negativeResult;\\n            }\\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\\n            if (negativeResult) {\\n                require(absoluteResult <= 0x80000000000000000000000000000000);\\n                return -int128(absoluteResult); // We rely on overflow behavior here\\n            } else {\\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(absoluteResult); // We rely on overflow behavior here\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divuu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function neg(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return -x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function abs(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != MIN_64x64);\\n            return x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /**\\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n     * zero.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function avg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            return int128((int256(x) + int256(y)) >> 1);\\n        }\\n    }\\n\\n    /**\\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n     * Revert on overflow or in case x * y is negative.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 m = int256(x) * int256(y);\\n            require(m >= 0);\\n            require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\\n            return int128(sqrtu(uint256(m)));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @param y uint256 value\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                    }\\n                    absX = absX * absX >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = absResult * absX >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = absX * absX >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function sqrt(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x >= 0);\\n            return int128(sqrtu(uint256(int256(x)) << 64));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = msb - 64 << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Revert if x <= 0.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return int128(int256(uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0) {\\n                result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n            }\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural exponent of x.  Revert on overflow.\\n     *\\n     * @param x signed 64.64-bit fixed point number\\n     * @return signed 64.64-bit fixed point number\\n     */\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return exp_2(int128(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n     * integer numbers.  Revert on overflow or when y is zero.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @param y unsigned 256-bit integer number\\n     * @return unsigned 64.64-bit fixed point number\\n     */\\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\\n                result = (x << 64) / y;\\n            } else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                result += xh == hi >> 128 ? xl / y : 1;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /**\\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n     * number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return unsigned 128-bit integer number\\n     */\\n    function sqrtu(uint256 x) private pure returns (uint128) {\\n        unchecked {\\n            if (x == 0) {\\n                return 0;\\n            } else {\\n                uint256 xx = x;\\n                uint256 r = 1;\\n                if (xx >= 0x100000000000000000000000000000000) {\\n                    xx >>= 128;\\n                    r <<= 64;\\n                }\\n                if (xx >= 0x10000000000000000) {\\n                    xx >>= 64;\\n                    r <<= 32;\\n                }\\n                if (xx >= 0x100000000) {\\n                    xx >>= 32;\\n                    r <<= 16;\\n                }\\n                if (xx >= 0x10000) {\\n                    xx >>= 16;\\n                    r <<= 8;\\n                }\\n                if (xx >= 0x100) {\\n                    xx >>= 8;\\n                    r <<= 4;\\n                }\\n                if (xx >= 0x10) {\\n                    xx >>= 4;\\n                    r <<= 2;\\n                }\\n                if (xx >= 0x4) r <<= 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1;\\n                r = (r + x / r) >> 1; // Seven iterations should be enough\\n                uint256 r1 = x / r;\\n                return uint128(r < r1 ? r : r1);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMinerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IMinerPool {\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   errors                                    */\\n    /* -------------------------------------------------------------------------- */\\n    error ElectricityFuturesSignatureExpired();\\n    error ElectricityFuturesAuctionEnded();\\n    error ElectricityFuturesAuctionBidTooLow();\\n    error ElectricityFuturesAuctionAuthorizationTooLong();\\n    error ElectricityFuturesAuctionInvalidSignature();\\n    error ElectricityFutureAuctionBidMustBeGreaterThanMinimumBid();\\n    error CallerNotEarlyLiquidity();\\n    error NotUSDCToken();\\n    error InvalidProof();\\n    error UserAlreadyClaimed();\\n    error AlreadyMintedToCarbonCreditAuction();\\n    error BucketNotFinalized();\\n    error CallerNotVetoCouncilMember();\\n    error CannotDelayEmptyBucket();\\n    error CannotDelayBucketThatNeedsToUpdateSlashNonce();\\n    error BucketAlreadyDelayed();\\n    error SignerNotGCA();\\n    error SignatureDoesNotMatchUser();\\n    error GlowWeightOverflow();\\n    error USDCWeightOverflow();\\n    error GlowWeightGreaterThanTotalWeight();\\n    error USDCWeightGreaterThanTotalWeight();\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                     state-changing                        */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice Allows anyone to donate USDC into the miner USDC rewards pool\\n     * @notice the amount is split across 192 weeks starting at the current week + 16\\n     * @param amount -  amount to deposit\\n     */\\n    function donateToUSDCMinerRewardsPool(uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the early liquidity to donate USDC into the miner USDC rewards pool\\n     * @notice the amount is split across 192 weeks starting at the current week + 16\\n     * @dev the USDC token must be a valid USDC token\\n     * @dev early liquidity will safeTransfer from the user to the miner pool\\n     *     -   and then call this function directly.\\n     *     -   we do this to prevent extra transfers.\\n     * @param amount -  amount to deposit\\n     */\\n    function donateToUSDCMinerRewardsPoolEarlyLiquidity(uint256 amount) external;\\n\\n    /**\\n     * @notice allows a user to claim their rewards for a bucket\\n     * @dev It's highly recommended to use a CLI or UI to call this function.\\n     *             - the proof can only be generated off-chain with access to the entire tree\\n     *             - furthermore, USDC tokens must be correctly input in order to receive rewards\\n     *             - the USDC tokens should be kept on record off-chain.\\n     *             - failure to input all correct USDC Tokens will result in lost rewards\\n     * @param bucketId - the id of the bucket\\n     * @param glwWeight - the weight of the user's glw rewards\\n     * @param USDCWeight - the weight of the user's USDC rewards\\n     * @param proof - the merkle proof of the user's rewards\\n     *                     - the leaves are {payoutWallet, glwWeight, USDCWeight}\\n     * @param index - the index of the report in the bucket\\n     *                     - that contains the merkle root where the user's rewards are stored\\n     * @param user - the address of the user\\n     * @param claimFromInflation - whether or not to claim glow from inflation\\n     * @param signature - the eip712 signature that allows a relayer to execute the action\\n     *               - to claim for a user.\\n     *               - the relayer is not able to access rewards under any means\\n     *               - rewards are always sent to the {user}\\n     */\\n    function claimRewardFromBucket(\\n        uint256 bucketId,\\n        uint256 glwWeight,\\n        uint256 USDCWeight,\\n        bytes32[] calldata proof,\\n        uint256 index,\\n        address user,\\n        bool claimFromInflation,\\n        bytes memory signature\\n    ) external;\\n\\n    /**\\n     * @notice allows a veto council member to delay the finalization of a bucket\\n     * @dev the bucket must already be initialized in order to be delayed\\n     * @dev the bucket cannot be finalized in order to be delayed\\n     * @dev the bucket can be delayed multiple times\\n     * @param bucketId - the id of the bucket to delay\\n     */\\n    function delayBucketFinalization(uint256 bucketId) external;\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                                   view                                    */\\n    /* -------------------------------------------------------------------------- */\\n    /**\\n     * @notice returns true if a bucket has been delayed\\n     * @param bucketId - the id of the bucket\\n     * @return true if the bucket has been delayed\\n     */\\n    function hasBucketBeenDelayed(uint256 bucketId) external view returns (bool);\\n\\n    /**\\n     * @notice returns the bytes32 digest of the claim reward from bucket message\\n     * @param bucketId - the id of the bucket\\n     * @param glwWeight - the weight of the user's glw rewards in the leaf of the report root\\n     * @param USDCWeight - the weight of the user's USDC rewards in the leaf of the report root\\n     * @param index - the index of the report in the bucket\\n     *                     - that contains the merkle root where the user's rewards are stored\\n     * @param claimFromInflation - whether or not to claim glow from inflation\\n     * @return the bytes32 digest of the claim reward from bucket message\\n     */\\n    function createClaimRewardFromBucketDigest(\\n        uint256 bucketId,\\n        uint256 glwWeight,\\n        uint256 USDCWeight,\\n        uint256 index,\\n        bool claimFromInflation\\n    ) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@/=src/\",\r\n      \"@solady/=lib/solady/src/\",\r\n      \"@unifapv2/=src/UnifapV2/\",\r\n      \"clones/=lib/clones-with-immutable-args/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@clones/=lib/unifap-v2/lib/clones-with-immutable-args/src/\",\r\n      \"@ds/=lib/unifap-v2/lib/ds-test/src/\",\r\n      \"@solmate/=lib/unifap-v2/lib/solmate/src/\",\r\n      \"@std/=lib/unifap-v2/lib/forge-std/src/\",\r\n      \"abdk-libraries-solidity/=lib/abdk-libraries-solidity/\",\r\n      \"clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\r\n      \"clones/=lib/unifap-v2/lib/clones-with-immutable-args/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solady/=lib/solady/\",\r\n      \"unifap-v2/=lib/unifap-v2/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/libraries/HalfLife.sol\": {\r\n        \"HalfLife\": \"0xcf4d7552ca9f07c474d69e89a88943fabb60b199\"\r\n      },\r\n      \"src/libraries/HalfLifeCarbonCreditAuction.sol\": {\r\n        \"HalfLifeCarbonCreditAuction\": \"0xd178525026bafc51d045a2e98b0c79a526d446de\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holdingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glowToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minerPoolAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllSold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinerPoolAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ModNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyIncrements\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"glwReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalUSDCSpent\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GLOW_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOLDING_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_POOL\",\"outputs\":[{\"internalType\":\"contract IMinerPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKEN_INCREMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_INCREMENTS_TO_SELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incrementsToPurchase\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EarlyLiquidity", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000e010ec500720be9ef3f82129e7ed2ee1fb7955f2000000000000000000000000d5970622b740a2ea5a5574616c193968b10e1297000000000000000000000000f4fbc617a5733eaaf9af08e1ab816b103388d8b60000000000000000000000006fa8c7a89b22bf3212392b778905b12f3dbaf5c4", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}