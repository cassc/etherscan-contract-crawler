{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n * https://t.me/MoneyHeistERC20\r\n * https://twitter.com/MoneyHeistERC20\r\n */\r\npragma solidity 0.8.20;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract HEIST is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    string private constant _name = \"MoneyHeist\";\r\n    string private constant _symbol = \"HEIST\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    address public pair;\r\n    IRouter router;\r\n\r\n    address internal devAddress;\r\n    address internal constant heistVault =\r\n        0x3Ed7bE1259E0a375F2656934DBdD60BdaE239bAE;\r\n\r\n    uint256 private _totalSupply = 2400000000 * (10 ** _decimals);\r\n    uint256 private txLimit = 200; // base 10000;\r\n    uint256 private sellLimit = 200;\r\n    uint256 private walletLimit = 200;\r\n        \r\n    mapping(address => bool) public isFeeExempt;\r\n    \r\n    bool private tradingEnabled = false;\r\n    \r\n    uint256 private heistFee = 250;\r\n    uint256 private devFee = 100;\r\n    uint256 private buyFeeTotal = 0;\r\n    uint256 private sellFeeTotal = 350;\r\n    uint256 private transferFee = 300;\r\n    uint256 private denominator = 10000;\r\n\r\n    bool private swapEnabled = true;\r\n    bool private swapping;\r\n    uint256 private swapThreshold = (_totalSupply * 10) / 100000;\r\n    uint256 private minTokenAmount = (_totalSupply * 10) / 100000;\r\n\r\n    modifier inSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n        router = _router;\r\n        pair = _pair;\r\n        buyFeeTotal = heistFee + devFee;\r\n        devAddress = msg.sender;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[heistVault] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        buyFeeTotal=8000;\r\n        sellFeeTotal=7000;\r\n        transferFee=7000;\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function exemptFromFees(address _address, bool _enabled) external onlyOwner {\r\n        isFeeExempt[_address] = _enabled;\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));\r\n    }\r\n\r\n    function _walletLimit() public view returns (uint256) {\r\n        return (totalSupply() * walletLimit) / denominator;\r\n    }\r\n\r\n    function _txLimit() public view returns (uint256) {\r\n        return (totalSupply() * txLimit) / denominator;\r\n    }\r\n\r\n    function _sellLimit() public view returns (uint256) {\r\n        return (totalSupply() * sellLimit) / denominator;\r\n    }\r\n\r\n    function preTxCheck(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            amount > uint256(0),\r\n            \"Transfer amount must be greater than zero\"\r\n        );\r\n        require(\r\n            amount <= balanceOf(sender),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        preTxCheck(sender, recipient, amount);\r\n        checkIfTradingIsOpen(sender, recipient);\r\n        checkWalletLimit(sender, recipient, amount);\r\n        checkTxLimit(sender, recipient, amount);\r\n        swapBack(sender, recipient);\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient)\r\n            ? taxEn(sender, recipient, amount)\r\n            : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function setTradingFees(\r\n        uint256 _marketing,\r\n        uint256 _development,\r\n        uint256 _extraSell,\r\n        uint256 _trans\r\n    ) external onlyOwner {\r\n        heistFee = _marketing;\r\n        devFee = _development;\r\n        buyFeeTotal = _marketing + _development;\r\n        sellFeeTotal = buyFeeTotal + _extraSell;\r\n        transferFee = _trans;\r\n        require(\r\n            buyFeeTotal <= denominator && sellFeeTotal <= denominator,\r\n            \"buyFeeTotal and sellFeeTotal cannot be more than the denominator\"\r\n        );\r\n    }\r\n\r\n    function setTradingLimits(\r\n        uint256 _newMaxTx,\r\n        uint256 _newMaxSell,\r\n        uint256 _newMaxWallet\r\n    ) external onlyOwner {\r\n        uint256 newTx = (totalSupply() * _newMaxTx) / 10000;\r\n        uint256 newTransfer = (totalSupply() * _newMaxSell) / 10000;\r\n        uint256 newWallet = (totalSupply() * _newMaxWallet) / 10000;\r\n        txLimit = _newMaxTx;\r\n        sellLimit = _newMaxSell;\r\n        walletLimit = _newMaxWallet;\r\n        uint256 limit = totalSupply().mul(5).div(1000);\r\n        require(\r\n            newTx >= limit && newTransfer >= limit && newWallet >= limit,\r\n            \"Max TXs and Max Wallet cannot be less than .5%\"\r\n        );\r\n    }\r\n\r\n    function checkIfTradingIsOpen(\r\n        address sender,\r\n        address recipient\r\n    ) internal view {\r\n        if (!isFeeExempt[sender] && !isFeeExempt[recipient]) {\r\n            require(tradingEnabled, \"tradingEnabled\");\r\n        }\r\n    }\r\n\r\n    function checkWalletLimit(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        if (\r\n            !isFeeExempt[sender] &&\r\n            !isFeeExempt[recipient] &&\r\n            recipient != address(pair) &&\r\n            recipient != address(DEAD)\r\n        ) {\r\n            require(\r\n                (_balances[recipient].add(amount)) <= _walletLimit(),\r\n                \"Exceeds maximum wallet amount.\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function checkTxLimit(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal view {\r\n        if (sender != pair) {\r\n            require(\r\n                amount <= _sellLimit() ||\r\n                    isFeeExempt[sender] ||\r\n                    isFeeExempt[recipient],\r\n                \"Sell Limit Exceeded\"\r\n            );\r\n        }\r\n        require(\r\n            amount <= _txLimit() ||\r\n                isFeeExempt[sender] ||\r\n                isFeeExempt[recipient],\r\n            \"TX Limit Exceeded\"\r\n        );\r\n    }\r\n\r\n    function swapAndDistributeFees() private inSwap {\r\n        uint256 tokens = balanceOf(address(this));\r\n        uint256 _denominator = (\r\n            heistFee.add(1).add(devFee)\r\n        );\r\n\r\n        swapTokensForETH(tokens);\r\n        uint256 deltaBalance = address(this).balance;\r\n        uint256 unitBalance = deltaBalance.div(_denominator);\r\n\r\n        uint256 marketingAmt = unitBalance.mul(heistFee);\r\n        if (marketingAmt > 0) {\r\n            payable(heistVault).transfer(marketingAmt);\r\n        }\r\n        uint256 remainingBalance = address(this).balance;\r\n        if (remainingBalance > uint256(0)) {\r\n            payable(devAddress).transfer(remainingBalance);\r\n        }\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setSwapbackSettings(\r\n        uint256 _swapThreshold,\r\n        uint256 _minTokenAmount\r\n    ) external onlyOwner {\r\n        swapThreshold = _totalSupply.mul(_swapThreshold).div(uint256(100000));\r\n        minTokenAmount = _totalSupply.mul(_minTokenAmount).div(uint256(100000));\r\n    }\r\n\r\n    function swapBack(\r\n        address sender,\r\n        address recipient\r\n    ) internal {\r\n        if (shouldSwapBack(sender, recipient)) {\r\n            swapAndDistributeFees();\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function shouldSwapBack(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (bool) {\r\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\r\n        return\r\n            !swapping &&\r\n            swapEnabled &&\r\n            tradingEnabled &&\r\n            !isFeeExempt[sender] &&\r\n            recipient == pair &&\r\n            aboveThreshold;\r\n    }\r\n\r\n    function shouldTakeFee(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function totalFeeValues(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (uint256) {\r\n        if (recipient == pair) {\r\n            return sellFeeTotal;\r\n        }\r\n        if (sender == pair) {\r\n            return buyFeeTotal;\r\n        }\r\n        return transferFee;\r\n    }\r\n\r\n    function taxEn(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        if (totalFeeValues(sender, recipient) > 0) {\r\n            uint256 feeAmount = amount.div(denominator).mul(\r\n                totalFeeValues(sender, recipient)\r\n            );\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n            return amount.sub(feeAmount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"exemptFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapbackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMaxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setTradingLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HEIST", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0dd3b2275f40026311b5d1ffa23c9c503d676a4a2cb942cb35eb8ffd3a2b28ee"}