{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/karen/Sources/rg/eth-contracts/token-distributor/contracts/EtherDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ncontract EtherDistribution {\\n\\n    /// Constant member variables\\n    uint256 public constant PERCENTAGE100 = 100000;\\n\\n    /// Private variables\\n    address[] private _distributionAddresses;\\n    uint32[] private _distributionSharePercentages;\\n\\n    /// Events\\n    event Received(address, uint);\\n\\n    /// Constructor\\n    constructor(address[] memory distributionAddresses_,\\n                uint32[] memory distributionSharePercentages_) {\\n\\n        require(distributionAddresses_.length == distributionSharePercentages_.length, \\n            'Error: addresses size shall be equal to the share percentages size');\\n    \\n        uint256 sum = 0;\\n        for (uint8 i = 0; i < distributionSharePercentages_.length; ++i) {\\n            sum += distributionSharePercentages_[i];\\n            require(PERCENTAGE100 >= distributionSharePercentages_[i],\\n                                'Error: immediateReleasePercentage must be less than or equal to 100000');\\n        }\\n        require(PERCENTAGE100 == sum, 'Error: Sum of distribution share percentages must be 100000');\\n\\n        _distributionAddresses = distributionAddresses_;\\n        _distributionSharePercentages = distributionSharePercentages_;\\n    }\\n\\n    function getDistributionAddresses() view external returns(address[] memory) {\\n        return _distributionAddresses;\\n    }\\n\\n    function getDistributionSharePercentages() view external returns(uint32[] memory) {\\n        return _distributionSharePercentages;\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n\\n        uint256 sum = 0;\\n        uint256 value = 0;\\n        bool sent;\\n        bytes memory data;\\n\\n        for (uint8 i = 0; i < _distributionSharePercentages.length - 1; ++i) {\\n            value = msg.value * _distributionSharePercentages[i] / PERCENTAGE100;\\n            sum += value;\\n\\n            (sent, data) = _distributionAddresses[i].call{\\n                value: value\\n            }(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        (sent, data) = _distributionAddresses[_distributionAddresses.length - 1].call{\\n                value: msg.value - sum\\n            }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"distributionAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"distributionSharePercentages_\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionSharePercentages\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EtherDistribution", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003bb79b5bb66729d2bc48a755e2b9109e91e57ead000000000000000000000000854180d9ca2c757e41fd9b8f71fde9edbc3bdeb900000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000017cdc00000000000000000000000000000000000000000000000000000000000009c4", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}