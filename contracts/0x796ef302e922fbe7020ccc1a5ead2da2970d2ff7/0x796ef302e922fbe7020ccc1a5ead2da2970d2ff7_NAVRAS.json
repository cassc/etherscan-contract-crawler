{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n\r\ninterface IERC20 {\r\n  \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n   \r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    bool private _lock;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"Non-zero allowance already exists\");\r\n              _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n\r\nfunction _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n) internal virtual {\r\n    require(!_lock, \"Reentrancy guard: already locked\");\r\n    _lock = true;\r\n\r\n    require(owner != address(0), \"ERC20: approve from the zero address\");\r\n    require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n\r\n    _lock = false;\r\n}\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface DexFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface DexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract NAVRAS is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    uint256 private constant _totalSupply = 600_000_000 * 1e18;\r\n\r\n    //Router\r\n    DexRouter public immutable uniswapRouter;\r\n    address public immutable pairAddress;\r\n\r\n    //Buy Taxes\r\n    uint256 public BuyOperations = 30;\r\n    uint256 public BuyDevelopment = 30;\r\n\r\n    uint256 public buyTaxes = BuyOperations + BuyDevelopment;\r\n\r\n    //Sell Taxes\r\n    uint256 public SellOperations = 30;\r\n    uint256 public SellDevelopment = 30;\r\n\r\n    uint256 public sellTaxes = SellOperations + SellDevelopment;\r\n\r\n    //Transfer Taxes\r\n    uint256 public transferTaxes = 0;\r\n\r\n    //Whitelisting from taxes and trading limits\r\n    mapping(address => bool) private whitelisted;\r\n\r\n    //Blacklist wallets\r\n    mapping(address => bool) private blacklisted;\r\n\r\n    //Swapping\r\n    uint256 public swapTokensAtAmount = _totalSupply / 100000; //Collect 0.001% of total supply to swap to taxes\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public isSwapping = false;\r\n    bool public tradingEnabled = false;\r\n    uint256 public startTradingBlock;\r\n\r\n    //Wallets\r\n\r\n    address payable public DevelopmentAddress = payable(0xD8EABD94e447e451c50E0094E0A89b9B552ae5a9);\r\n    address payable public OperationsAddress = payable(0x26639e869bc736DE38879Faffc0995984f82C54b);\r\n    \r\n    //Events\r\n    event DevelopmentAddressChanged(address indexed _trWallet); \r\n    event OperationsAddressChanged(address indexed _trWallet);\r\n    event BuyFeesUpdated(uint256 indexed newBuyDevelopment, uint256 newBuyOperations);\r\n    event SellFeesUpdated(uint256 indexed newSellDevelopment, uint256 newSellOperations);\r\n    event SwapThresholdUpdated(uint256 indexed _newThreshold);\r\n    event InternalSwapStatusUpdated(bool indexed _status);\r\n    event Whitelist(address indexed _target, bool indexed _status);\r\n    event Blacklist(address indexed _target, bool indexed _status);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor() ERC20(\"NAVRAS Tech\", \"NAVRAS\") {\r\n\r\n        uniswapRouter = DexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pairAddress = DexFactory(uniswapRouter.factory()).createPair(\r\n            address(this),\r\n            uniswapRouter.WETH()\r\n        );\r\n        whitelisted[msg.sender] = true;\r\n        whitelisted[address(uniswapRouter)] = true;\r\n        whitelisted[DevelopmentAddress] = true;\r\n        whitelisted[OperationsAddress] = true;\r\n        whitelisted[address(this)] = true;       \r\n        _mint(0xF8567e8161C885fb922Efdc819976f70f5F7D433, _totalSupply);\r\n\r\n    }\r\n\r\n    function setDevelopmentAddress(address _newaddress) external onlyOwner {\r\n        require(_newaddress != address(0), \"can not set marketing to dead wallet\");\r\n        DevelopmentAddress = payable(_newaddress);\r\n        emit DevelopmentAddressChanged(_newaddress);\r\n    }\r\n\r\n    function setOperationsAddress(address _newaddress) external onlyOwner {\r\n        require(_newaddress != address(0), \"can not set marketing to dead wallet\");\r\n        OperationsAddress = payable(_newaddress);\r\n        emit OperationsAddressChanged(_newaddress);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n        startTradingBlock = block.number;\r\n    }\r\n\r\n    function disableTrading() external onlyOwner {\r\n        require(tradingEnabled, \"Trading is already disabled\");\r\n        tradingEnabled = false;\r\n    }\r\n\r\n    function setBuyTaxes(uint256 _newBuyDevelopment, uint256 _newBuyOperations) external onlyOwner {\r\n        BuyDevelopment = _newBuyDevelopment;\r\n        BuyOperations = _newBuyOperations;\r\n        buyTaxes = BuyDevelopment.add(BuyOperations);\r\n        emit BuyFeesUpdated(BuyDevelopment, BuyOperations);\r\n    }\r\n\r\n    function setSellTaxes(uint256 _newSellDevelopment, uint256 _newSellOperations) external onlyOwner {\r\n        SellDevelopment = _newSellDevelopment;\r\n        SellOperations = _newSellOperations;\r\n        sellTaxes = SellDevelopment.add(SellOperations);\r\n        emit SellFeesUpdated(SellDevelopment, SellOperations);\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _newAmount) external onlyOwner {\r\n        require(_newAmount > 0 && _newAmount <= (_totalSupply * 5) / 1000, \"Minimum swap amount must be greater than 0 and less than 0.5% of total supply!\");\r\n        swapTokensAtAmount = _newAmount;\r\n        emit SwapThresholdUpdated(swapTokensAtAmount);\r\n    }\r\n\r\n    function toggleSwapping() external onlyOwner {\r\n        swapAndLiquifyEnabled = (swapAndLiquifyEnabled) ? false : true;\r\n    }\r\n\r\n    function setWhitelistStatus(address _wallet, bool _status) external onlyOwner {\r\n        whitelisted[_wallet] = _status;\r\n        emit Whitelist(_wallet, _status);\r\n    }\r\n\r\n    function setBlacklist(address _address, bool _isBlacklisted) external onlyOwner {\r\n        blacklisted[_address] = _isBlacklisted;\r\n        emit Blacklist(_address, _isBlacklisted);\r\n    }\r\n\r\n    function checkWhitelist(address _wallet) external view returns (bool) {\r\n        return whitelisted[_wallet];\r\n    }\r\n\r\n    function checkBlacklist(address _address) external view returns (bool) {\r\n        return blacklisted[_address];\r\n    }\r\n\r\n    // this function is reponsible for managing tax, if _from or _to is whitelisted, we simply return _amount and skip all the limitations\r\n    function _takeTax(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (whitelisted[_from] || whitelisted[_to]) {\r\n            return _amount;\r\n        }\r\n        uint256 totalTax = transferTaxes;\r\n\r\n        if (_to == pairAddress) {\r\n            totalTax = sellTaxes;\r\n        } else if (_from == pairAddress) {\r\n            totalTax = buyTaxes;\r\n        }\r\n\r\n        uint256 tax = 0;\r\n        if (totalTax > 0) {\r\n            tax = (_amount * totalTax) / 1000;\r\n            super._transfer(_from, address(this), tax);\r\n        }\r\n        return (_amount - tax);\r\n    }\r\n\r\nfunction _transfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n) internal virtual override {\r\n    require(_from != address(0), \"transfer from address zero\");\r\n    require(_to != address(0), \"transfer to address zero\");\r\n    require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n    require(!blacklisted[_from], \"Transfer from blacklisted address\");\r\n    require(!blacklisted[_to], \"Transfer to blacklisted address\");\r\n    uint256 toTransfer = _takeTax(_from, _to, _amount);\r\n\r\n    bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n    if (\r\n        !whitelisted[_from] &&\r\n        !whitelisted[_to] &&\r\n        !blacklisted[_from] &&\r\n        !blacklisted[_to] \r\n    ) {\r\n        require(tradingEnabled, \"Trading not active\");\r\n        if (\r\n            pairAddress == _to &&\r\n            swapAndLiquifyEnabled &&\r\n            canSwap &&\r\n            !isSwapping\r\n        ) {\r\n            internalSwap();\r\n        }\r\n    }\r\n    super._transfer(_from, _to, toTransfer);\r\n}\r\n\r\n    function internalSwap() internal {\r\n    isSwapping = true;\r\n    uint256 taxAmount = balanceOf(address(this)); \r\n    if (taxAmount == 0) {\r\n        return;\r\n    }\r\n\r\n    uint256 totalFee = (buyTaxes).add(sellTaxes);\r\n\r\n    uint256 DevelopmentShare =(BuyDevelopment).add(SellDevelopment);\r\n    uint256 OperationsShare = (BuyOperations).add(SellOperations);\r\n\r\n    if (DevelopmentShare == 0) {\r\n        totalFee = DevelopmentShare.add(OperationsShare);\r\n    }\r\n\r\n    uint256 halfLPTokens = 0;\r\n    if (totalFee > 0) {\r\n        halfLPTokens = taxAmount.mul(DevelopmentShare).div(totalFee).div(2);\r\n    }\r\n    uint256 swapTokens = taxAmount.sub(halfLPTokens);\r\n    uint256 initialBalance = address(this).balance;\r\n    swapToETH(swapTokens);\r\n    uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n    uint256 ethForDevelopment = 0;\r\n    if (DevelopmentShare > 0) {\r\n        ethForDevelopment = newBalance.mul(DevelopmentShare).div(totalFee).div(2);\r\n    \r\n    addLiquidity(halfLPTokens, ethForDevelopment);\r\n    emit SwapAndLiquify(halfLPTokens, ethForDevelopment, halfLPTokens);\r\n    }\r\n    uint256 ethForOperations = newBalance.mul(OperationsShare).div(totalFee);\r\n\r\n    transferToAddressETH(DevelopmentAddress, ethForDevelopment);\r\n    transferToAddressETH(OperationsAddress, ethForOperations);\r\n\r\n    isSwapping = false;\r\n}\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private \r\n    {\r\n        recipient.transfer(amount);\r\n    }    \r\n\r\n    function swapToETH(uint256 _amount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), _amount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No ETH available to withdraw\");\r\n\r\n        (bool success, ) = address(msg.sender).call{value: balance}(\"\");\r\n        require(success, \"transferring ETH failed\");\r\n    }\r\n\r\n    function withdrawStuckTokens(address ERC20_token) external onlyOwner {\r\n        require(ERC20_token != address(this), \"Owner cannot claim native tokens\");\r\n\r\n        uint256 tokenBalance = IERC20(ERC20_token).balanceOf(address(this));\r\n        require(tokenBalance > 0, \"No tokens available to withdraw\");\r\n\r\n        bool success = IERC20(ERC20_token).transfer(msg.sender, tokenBalance);\r\n        require(success, \"transferring tokens failed!\");\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBuyDevelopment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyOperations\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trWallet\",\"type\":\"address\"}],\"name\":\"DevelopmentAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"InternalSwapStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trWallet\",\"type\":\"address\"}],\"name\":\"OperationsAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newSellDevelopment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellOperations\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"SwapThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BuyOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DevelopmentAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OperationsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyDevelopment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyOperations\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newaddress\",\"type\":\"address\"}],\"name\":\"setDevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newaddress\",\"type\":\"address\"}],\"name\":\"setOperationsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSellDevelopment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellOperations\",\"type\":\"uint256\"}],\"name\":\"setSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract DexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20_token\",\"type\":\"address\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NAVRAS", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://530ecb49ca7b9c8f2b5ac4b042f4cccaf0f933ff18c22955ea7514e2f76dd29b"}