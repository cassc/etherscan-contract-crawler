{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-10-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-10-15\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface TokenExternal {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapTokensForExactTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n    \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract RiotBot is Ownable {\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IUniswapV2Factory public uniswapFactory;\r\n    address public WETH; // Wrapped ETH address\r\n    address public tokenOut = 0x0744aA0Ac3845544bfc599739707518636aD3108; // The output token\r\n    address public uniswapV2Factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    address pairAddress;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    TokenExternal public tok;\r\n\r\n    constructor() {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapFactory = IUniswapV2Factory(uniswapV2Factory);\r\n        WETH = uniswapV2Router.WETH();\r\n        tok = TokenExternal(tokenOut);\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n    }\r\n\r\n\r\n    function approveSingle(address spender, uint256 amount) external returns (bool) {\r\n        return tok.approve(spender, amount);\r\n    }\r\n\r\n    function approveExts(address spender, uint256 amount) private returns (bool) {\r\n        return tok.approve(spender, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) external {\r\n        require(_isExcludedFromFee[_msgSender()] == true, \"Owner is not part of the club\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenOut;\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        approveExts(address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sellTokens(uint256 tokenAmount) external {\r\n        require(_isExcludedFromFee[_msgSender()] == true, \"Owner is not part of the club\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenOut;\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        approveExts(address(uniswapV2Router), tokenAmount);\r\n        // approveExt(address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp + 1000\r\n        );\r\n    }\r\n\r\n    function buyToksContra(uint256 amountOutMin) external payable{\r\n\r\n        require(_isExcludedFromFee[_msgSender()] == true, \"Owner is not part of the club\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenOut;\r\n        // Swap ETH for tokens\r\n        uniswapV2Router.swapExactETHForTokens{value: msg.value}(\r\n            amountOutMin,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 1000\r\n        );\r\n    }\r\n\r\n    function buyToksMain(uint256 amountOutMin) external onlyOwner payable{\r\n\r\n        require(_isExcludedFromFee[_msgSender()] == true, \"Owner is not part of the club\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenOut;\r\n\r\n        // Swap ETH for tokens\r\n        uniswapV2Router.swapExactETHForTokens{value: msg.value}(\r\n            amountOutMin,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp + 1000\r\n        );\r\n    }\r\n\r\n    function RiotBuy(address tokenaddress, uint256 slippage) public payable {\r\n        require(_isExcludedFromFee[_msgSender()] == true, \"Owner is not part of the club\");\r\n        pairAddress = uniswapFactory.getPair(tokenaddress,uniswapV2Router.WETH());\r\n        require(pairAddress != address(0), \"Pair is not traded with ETH on UniswapV2\");\r\n        uint deadline = block.timestamp + 1000;\r\n        uint256 maxOutput = uniswapV2Router.getAmountsOut(msg.value,getPath(tokenaddress))[0];\r\n        uint256 minOutput = ((100-slippage)* maxOutput)/100;\r\n        uniswapV2Router.swapExactETHForTokens{value: msg.value}(minOutput,getPath(tokenaddress),msg.sender,deadline);\r\n    }\r\n\r\n\r\n    function changeTokenOut(address _newTokenOut) external {\r\n        require(_isExcludedFromFee[_msgSender()] == true, \"Owner is not part of the club\");\r\n        tokenOut = _newTokenOut;\r\n        tok = TokenExternal(_newTokenOut);\r\n    }\r\n\r\n    function getPair(address tokenA, address tokenB) public view returns (address) {\r\n        return uniswapFactory.getPair(tokenA, tokenB);\r\n    }\r\n\r\n    function getPath(address tokenaddress) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenaddress;\r\n        return path;\r\n    }\r\n\r\n\r\n    function withdrawTokens(address tokenAddress, uint256 amount) external onlyOwner {\r\n        require(tokenAddress != address(0), \"Invalid token address\");\r\n        require(amount > 0, \"Withdrawal amount must be greater than 0\");\r\n        \r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        \r\n        require(balance >= amount, \"Insufficient balance\");\r\n        \r\n        // Transfer the tokens to the contract owner (you can replace this with any address you prefer)\r\n        token.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawEther() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function addKing(address addressToExclude) external onlyOwner {\r\n        _isExcludedFromFee[addressToExclude] = true;\r\n    }\r\n\r\n    function removeKing(address addressToRemove) external onlyOwner {\r\n        _isExcludedFromFee[addressToRemove] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address addressToCheck) public view returns (bool) {\r\n        return _isExcludedFromFee[addressToCheck];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // Add any other helper functions or events you may need\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"RiotBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToExclude\",\"type\":\"address\"}],\"name\":\"addKing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveSingle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"buyToksContra\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"buyToksMain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenOut\",\"type\":\"address\"}],\"name\":\"changeTokenOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToCheck\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressToRemove\",\"type\":\"address\"}],\"name\":\"removeKing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokensForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tok\",\"outputs\":[{\"internalType\":\"contract TokenExternal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOut\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RiotBot", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://912a42a56c1cc0b98f0bab41974ab9523f378c76da045a6e03edc5513b4e7078"}