{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @title Proxy\r\n * @author Pragma Labs\r\n * @dev Implementation based on ERC-1967: Proxy Storage Slots\r\n * See https://eips.ethereum.org/EIPS/eip-1967\r\n */\r\ncontract Proxy {\r\n    /* //////////////////////////////////////////////////////////////\r\n                                STORAGE\r\n    ////////////////////////////////////////////////////////////// */\r\n\r\n    // Storage slot with the address of the current implementation.\r\n    // This is the hardcoded keccak-256 hash of: \"eip1967.proxy.implementation\" subtracted by 1.\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    // Storage slot for the Vault logic, a struct to avoid storage conflict when dealing with upgradeable contracts.\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    /* //////////////////////////////////////////////////////////////\r\n                                EVENTS\r\n    ////////////////////////////////////////////////////////////// */\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /* //////////////////////////////////////////////////////////////\r\n                            CONSTRUCTOR\r\n    ////////////////////////////////////////////////////////////// */\r\n\r\n    /**\r\n     * @param logic The contract address of the Vault logic.\r\n     */\r\n    constructor(address logic) payable {\r\n        _getAddressSlot(_IMPLEMENTATION_SLOT).value = logic;\r\n        emit Upgraded(logic);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the implementation address.\r\n     * Will run if call data is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _delegate(_getAddressSlot(_IMPLEMENTATION_SLOT).value);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the implementation address.\r\n     * Will run if no other function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _delegate(_getAddressSlot(_IMPLEMENTATION_SLOT).value);\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        IMPLEMENTATION LOGIC\r\n    ///////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Returns an `AddressSlot` with member `value` located at `slot`.\r\n     * @param slot The slot where the address of the Logic contract is stored.\r\n     * @return r The address stored in slot.\r\n     */\r\n    function _getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                        DELEGATION LOGIC\r\n    ///////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @param implementation The contract address of the logic.\r\n     * @dev Delegates the current call to `implementation`.\r\n     * This function does not return to its internal call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal virtual {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"logic\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003ae354d7e49039ccd582f1f3c9e65034ffd17bad", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11e75c3e8e5b67430835b3661d964c0ef5e567b0ac09360b6d2fed0c1c3bd79e"}