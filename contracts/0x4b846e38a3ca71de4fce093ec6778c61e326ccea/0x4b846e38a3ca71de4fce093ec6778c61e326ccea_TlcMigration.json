{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/src/Administrable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAdministrable.sol\\\";\\n\\nimport \\\"./libraries/LibAdministrable.sol\\\";\\nimport \\\"./libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrable\\n/// @author Kiln\\n/// @notice This contract handles the administration of the contracts\\nabstract contract Administrable is IAdministrable {\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin() {\\n        if (msg.sender != LibAdministrable._getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyPendingAdmin() {\\n        if (msg.sender != LibAdministrable._getPendingAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getAdmin() external view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function getPendingAdmin() external view returns (address) {\\n        return LibAdministrable._getPendingAdmin();\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function proposeAdmin(address _newAdmin) external onlyAdmin {\\n        _setPendingAdmin(_newAdmin);\\n    }\\n\\n    /// @inheritdoc IAdministrable\\n    function acceptAdmin() external onlyPendingAdmin {\\n        _setAdmin(LibAdministrable._getPendingAdmin());\\n        _setPendingAdmin(address(0));\\n    }\\n\\n    /// @notice Internal utility to set the admin address\\n    /// @param _admin Address to set as admin\\n    function _setAdmin(address _admin) internal {\\n        LibSanitize._notZeroAddress(_admin);\\n        LibAdministrable._setAdmin(_admin);\\n        emit SetAdmin(_admin);\\n    }\\n\\n    /// @notice Internal utility to set the pending admin address\\n    /// @param _pendingAdmin Address to set as pending admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        LibAdministrable._setPendingAdmin(_pendingAdmin);\\n        emit SetPendingAdmin(_pendingAdmin);\\n    }\\n\\n    /// @notice Internal utility to retrieve the address of the current admin\\n    /// @return The address of admin\\n    function _getAdmin() internal view returns (address) {\\n        return LibAdministrable._getAdmin();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IAdministrable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Administrable Interface\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the ownership of the contracts\\ninterface IAdministrable {\\n    /// @notice The pending admin address changed\\n    /// @param pendingAdmin New pending admin address\\n    event SetPendingAdmin(address indexed pendingAdmin);\\n\\n    /// @notice The admin address changed\\n    /// @param admin New admin address\\n    event SetAdmin(address indexed admin);\\n\\n    /// @notice Retrieves the current admin address\\n    /// @return The admin address\\n    function getAdmin() external view returns (address);\\n\\n    /// @notice Retrieve the current pending admin address\\n    /// @return The pending admin address\\n    function getPendingAdmin() external view returns (address);\\n\\n    /// @notice Proposes a new address as admin\\n    /// @dev This security prevents setting an invalid address as an admin. The pending\\n    /// @dev admin has to claim its ownership of the contract, and prove that the new\\n    /// @dev address is able to perform regular transactions.\\n    /// @param _newAdmin New admin address\\n    function proposeAdmin(address _newAdmin) external;\\n\\n    /// @notice Accept the transfer of ownership\\n    /// @dev Only callable by the pending admin. Resets the pending admin if succesful.\\n    function acceptAdmin() external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibAdministrable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/shared/AdministratorAddress.sol\\\";\\nimport \\\"../state/shared/PendingAdministratorAddress.sol\\\";\\n\\n/// @title Lib Administrable\\n/// @author Kiln\\n/// @notice This library handles the admin and pending admin storage vars\\nlibrary LibAdministrable {\\n    /// @notice Retrieve the system admin\\n    /// @return The address of the system admin\\n    function _getAdmin() internal view returns (address) {\\n        return AdministratorAddress.get();\\n    }\\n\\n    /// @notice Retrieve the pending system admin\\n    /// @return The adress of the pending system admin\\n    function _getPendingAdmin() internal view returns (address) {\\n        return PendingAdministratorAddress.get();\\n    }\\n\\n    /// @notice Sets the system admin\\n    /// @param _admin New system admin\\n    function _setAdmin(address _admin) internal {\\n        AdministratorAddress.set(_admin);\\n    }\\n\\n    /// @notice Sets the pending system admin\\n    /// @param _pendingAdmin New pending system admin\\n    function _setPendingAdmin(address _pendingAdmin) internal {\\n        PendingAdministratorAddress.set(_pendingAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibSanitize.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./LibErrors.sol\\\";\\nimport \\\"./LibBasisPoints.sol\\\";\\n\\n/// @title Lib Sanitize\\n/// @notice Utilities to sanitize input values\\nlibrary LibSanitize {\\n    /// @notice Reverts if address is 0\\n    /// @param _address Address to check\\n    function _notZeroAddress(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert LibErrors.InvalidZeroAddress();\\n        }\\n    }\\n\\n    /// @notice Reverts if string is empty\\n    /// @param _string String to check\\n    function _notEmptyString(string memory _string) internal pure {\\n        if (bytes(_string).length == 0) {\\n            revert LibErrors.InvalidEmptyString();\\n        }\\n    }\\n\\n    /// @notice Reverts if fee is invalid\\n    /// @param _fee Fee to check\\n    function _validFee(uint256 _fee) internal pure {\\n        if (_fee > LibBasisPoints.BASIS_POINTS_MAX) {\\n            revert LibErrors.InvalidFee();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/shared/AdministratorAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Administrator Address Storage\\n/// @notice Utility to manage the Administrator Address in storage\\nlibrary AdministratorAddress {\\n    /// @notice Storage slot of the Administrator Address\\n    bytes32 public constant ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.administratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Administrator Address\\n    /// @return The Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Administrator Address\\n    /// @param _newValue New Administrator Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/shared/PendingAdministratorAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Pending Administrator Address Storage\\n/// @notice Utility to manage the Pending Administrator Address in storage\\nlibrary PendingAdministratorAddress {\\n    /// @notice Storage slot of the Pending Administrator Address\\n    bytes32 public constant PENDING_ADMINISTRATOR_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.pendingAdministratorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Pending Administrator Address\\n    /// @return The Pending Administrator Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Pending Administrator Address\\n    /// @param _newValue New Pending Administrator Address\\n    function set(address _newValue) internal {\\n        LibUnstructuredStorage.setStorageAddress(PENDING_ADMINISTRATOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibUnstructuredStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier:    MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title Lib Unstructured Storage\\n/// @notice Utilities to work with unstructured storage\\nlibrary LibUnstructuredStorage {\\n    /// @notice Retrieve a bool value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bool value\\n    function getStorageBool(bytes32 _position) internal view returns (bool data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an address value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The address value\\n    function getStorageAddress(bytes32 _position) internal view returns (address data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve a bytes32 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The bytes32 value\\n    function getStorageBytes32(bytes32 _position) internal view returns (bytes32 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Retrieve an uint256 value at a storage slot\\n    /// @param _position The storage slot to retrieve\\n    /// @return data The uint256 value\\n    function getStorageUint256(bytes32 _position) internal view returns (uint256 data) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data := sload(_position)\\n        }\\n    }\\n\\n    /// @notice Sets a bool value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bool value to set\\n    function setStorageBool(bytes32 _position, bool _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an address value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The address value to set\\n    function setStorageAddress(bytes32 _position, address _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets a bytes32 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The bytes32 value to set\\n    function setStorageBytes32(bytes32 _position, bytes32 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n\\n    /// @notice Sets an uint256 value at a storage slot\\n    /// @param _position The storage slot to set\\n    /// @param _data The uint256 value to set\\n    function setStorageUint256(bytes32 _position, uint256 _data) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(_position, _data)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibErrors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Errors\\n/// @notice Library of common errors\\nlibrary LibErrors {\\n    /// @notice The operator is unauthorized for the caller\\n    /// @param caller Address performing the call\\n    error Unauthorized(address caller);\\n\\n    /// @notice The call was invalid\\n    error InvalidCall();\\n\\n    /// @notice The argument was invalid\\n    error InvalidArgument();\\n\\n    /// @notice The address is zero\\n    error InvalidZeroAddress();\\n\\n    /// @notice The string is empty\\n    error InvalidEmptyString();\\n\\n    /// @notice The fee is invalid\\n    error InvalidFee();\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibBasisPoints.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Basis Points\\n/// @notice Holds the basis points max value\\nlibrary LibBasisPoints {\\n    /// @notice The max value for basis points (represents 100%)\\n    uint256 internal constant BASIS_POINTS_MAX = 10_000;\\n}\\n\"\r\n    },\r\n    \"contracts/src/River.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IWithdraw.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\nimport \\\"./interfaces/ICoverageFund.1.sol\\\";\\n\\nimport \\\"./components/ConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/UserDepositManager.1.sol\\\";\\nimport \\\"./components/SharesManager.1.sol\\\";\\nimport \\\"./components/OracleManager.1.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\n\\nimport \\\"./state/river/AllowlistAddress.sol\\\";\\nimport \\\"./state/river/RedeemManagerAddress.sol\\\";\\nimport \\\"./state/river/OperatorsRegistryAddress.sol\\\";\\nimport \\\"./state/river/CollectorAddress.sol\\\";\\nimport \\\"./state/river/ELFeeRecipientAddress.sol\\\";\\nimport \\\"./state/river/CoverageFundAddress.sol\\\";\\nimport \\\"./state/river/BalanceToRedeem.sol\\\";\\nimport \\\"./state/river/GlobalFee.sol\\\";\\nimport \\\"./state/river/MetadataURI.sol\\\";\\nimport \\\"./state/river/LastConsensusLayerReport.sol\\\";\\n\\n/// @title River (v1)\\n/// @author Kiln\\n/// @notice This contract merges all the manager contracts and implements all the virtual methods stitching all components together\\ncontract RiverV1 is\\n    ConsensusLayerDepositManagerV1,\\n    UserDepositManagerV1,\\n    SharesManagerV1,\\n    OracleManagerV1,\\n    Initializable,\\n    Administrable,\\n    IRiverV1\\n{\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external init(0) {\\n        _setAdmin(_systemAdministratorAddress);\\n\\n        CollectorAddress.set(_collectorAddress);\\n        emit SetCollector(_collectorAddress);\\n\\n        GlobalFee.set(_globalFee);\\n        emit SetGlobalFee(_globalFee);\\n\\n        ELFeeRecipientAddress.set(_elFeeRecipientAddress);\\n        emit SetELFeeRecipient(_elFeeRecipientAddress);\\n\\n        AllowlistAddress.set(_allowlistAddress);\\n        emit SetAllowlist(_allowlistAddress);\\n\\n        OperatorsRegistryAddress.set(_operatorRegistryAddress);\\n        emit SetOperatorsRegistry(_operatorRegistryAddress);\\n\\n        ConsensusLayerDepositManagerV1.initConsensusLayerDepositManagerV1(\\n            _depositContractAddress, _withdrawalCredentials\\n        );\\n\\n        OracleManagerV1.initOracleManagerV1(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _minDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external init(1) {\\n        RedeemManagerAddress.set(_redeemManager);\\n        emit SetRedeemManager(_redeemManager);\\n\\n        _setDailyCommittableLimits(\\n            DailyCommittableLimits.DailyCommittableLimitsStruct({\\n                minDailyNetCommittableAmount: _minDailyNetCommittableAmount_,\\n                maxDailyRelativeCommittableAmount: _maxDailyRelativeCommittableAmount_\\n            })\\n        );\\n\\n        initOracleManagerV1_1(\\n            _epochsPerFrame,\\n            _slotsPerEpoch,\\n            _secondsPerSlot,\\n            _genesisTime,\\n            _epochsToAssumedFinality,\\n            _annualAprUpperBound,\\n            _relativeLowerBound\\n        );\\n\\n        _approve(address(this), _redeemManager, type(uint256).max);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function initRiverV1_2() external init(2) {\\n        // force committed balance to a multiple of 32 ETH and\\n        // move extra funds back to the deposit buffer\\n        uint256 dustToUncommit = CommittedBalance.get() % DEPOSIT_SIZE;\\n        _setCommittedBalance(CommittedBalance.get() - dustToUncommit);\\n        _setBalanceToDeposit(BalanceToDeposit.get() + dustToUncommit);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getGlobalFee() external view returns (uint256) {\\n        return GlobalFee.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getAllowlist() external view returns (address) {\\n        return AllowlistAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCollector() external view returns (address) {\\n        return CollectorAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getELFeeRecipient() external view returns (address) {\\n        return ELFeeRecipientAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getCoverageFund() external view returns (address) {\\n        return CoverageFundAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getRedeemManager() external view returns (address) {\\n        return RedeemManagerAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getMetadataURI() external view returns (string memory) {\\n        return MetadataURI.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory)\\n    {\\n        return DailyCommittableLimits.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl)\\n        external\\n        onlyAdmin\\n    {\\n        _setDailyCommittableLimits(_dcl);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getBalanceToRedeem() external view returns (uint256) {\\n        return BalanceToRedeem.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds)\\n    {\\n        return IRedeemManagerV1(RedeemManagerAddress.get()).resolveRedeemRequests(_redeemRequestIds);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 _redeemRequestId) {\\n        IAllowlistV1(AllowlistAddress.get()).onlyAllowed(msg.sender, LibAllowlistMasks.REDEEM_MASK);\\n        _transfer(msg.sender, address(this), _lsETHAmount);\\n        return IRedeemManagerV1(RedeemManagerAddress.get()).requestRedeem(_lsETHAmount, _recipient);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses)\\n    {\\n        return IRedeemManagerV1(RedeemManagerAddress.get()).claimRedeemRequests(\\n            _redeemRequestIds, _withdrawalEventIds, true, type(uint16).max\\n        );\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setGlobalFee(uint256 _newFee) external onlyAdmin {\\n        GlobalFee.set(_newFee);\\n        emit SetGlobalFee(_newFee);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setAllowlist(address _newAllowlist) external onlyAdmin {\\n        AllowlistAddress.set(_newAllowlist);\\n        emit SetAllowlist(_newAllowlist);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCollector(address _newCollector) external onlyAdmin {\\n        CollectorAddress.set(_newCollector);\\n        emit SetCollector(_newCollector);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setELFeeRecipient(address _newELFeeRecipient) external onlyAdmin {\\n        ELFeeRecipientAddress.set(_newELFeeRecipient);\\n        emit SetELFeeRecipient(_newELFeeRecipient);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setCoverageFund(address _newCoverageFund) external onlyAdmin {\\n        CoverageFundAddress.set(_newCoverageFund);\\n        emit SetCoverageFund(_newCoverageFund);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function setMetadataURI(string memory _metadataURI) external onlyAdmin {\\n        LibSanitize._notEmptyString(_metadataURI);\\n        MetadataURI.set(_metadataURI);\\n        emit SetMetadataURI(_metadataURI);\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function getOperatorsRegistry() external view returns (address) {\\n        return OperatorsRegistryAddress.get();\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendELFees() external payable {\\n        if (msg.sender != ELFeeRecipientAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendCLFunds() external payable {\\n        if (msg.sender != WithdrawalCredentials.getAddress()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendCoverageFunds() external payable {\\n        if (msg.sender != CoverageFundAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @inheritdoc IRiverV1\\n    function sendRedeemManagerExceedingFunds() external payable {\\n        if (msg.sender != RedeemManagerAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Overridden handler to pass the system admin inside components\\n    /// @return The address of the admin\\n    function _getRiverAdmin()\\n        internal\\n        view\\n        override(OracleManagerV1, ConsensusLayerDepositManagerV1)\\n        returns (address)\\n    {\\n        return Administrable._getAdmin();\\n    }\\n\\n    /// @notice Overridden handler called whenever a token transfer is triggered\\n    /// @param _from Token sender\\n    /// @param _to Token receiver\\n    function _onTransfer(address _from, address _to) internal view override {\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (allowlist.isDenied(_from)) {\\n            revert Denied(_from);\\n        }\\n        if (allowlist.isDenied(_to)) {\\n            revert Denied(_to);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever a user deposits ETH to the system. Mints the adequate amount of shares.\\n    /// @param _depositor User address that made the deposit\\n    /// @param _amount Amount of ETH deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal override {\\n        uint256 mintedShares = SharesManagerV1._mintShares(_depositor, _amount);\\n        IAllowlistV1 allowlist = IAllowlistV1(AllowlistAddress.get());\\n        if (_depositor == _recipient) {\\n            allowlist.onlyAllowed(_depositor, LibAllowlistMasks.DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n        } else {\\n            allowlist.onlyAllowed(_depositor, LibAllowlistMasks.DEPOSIT_MASK); // this call reverts if unauthorized or denied\\n            if (allowlist.isDenied(_recipient)) {\\n                revert Denied(_recipient);\\n            }\\n            _transfer(_depositor, _recipient, mintedShares);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever a deposit to the consensus layer is made. Should retrieve _requestedAmount or lower keys\\n    /// @param _requestedAmount Amount of keys required. Contract is expected to send _requestedAmount or lower.\\n    /// @return publicKeys Array of fundable public keys\\n    /// @return signatures Array of signatures linked to the public keys\\n    function _getNextValidators(uint256 _requestedAmount)\\n        internal\\n        override\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return IOperatorsRegistryV1(OperatorsRegistryAddress.get()).pickNextValidatorsToDeposit(_requestedAmount);\\n    }\\n\\n    /// @notice Overridden handler to pull funds from the execution layer fee recipient to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the execution layer fee recipient\\n    /// @return The amount pulled from the execution layer fee recipient\\n    function _pullELFees(uint256 _max) internal override returns (uint256) {\\n        address elFeeRecipient = ELFeeRecipientAddress.get();\\n        uint256 initialBalance = address(this).balance;\\n        IELFeeRecipientV1(payable(elFeeRecipient)).pullELFees(_max);\\n        uint256 collectedELFees = address(this).balance - initialBalance;\\n        if (collectedELFees > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + collectedELFees);\\n        }\\n        emit PulledELFees(collectedELFees);\\n        return collectedELFees;\\n    }\\n\\n    /// @notice Overridden handler to pull funds from the coverage fund to River and return the delta in the balance\\n    /// @param _max The maximum amount to pull from the coverage fund\\n    /// @return The amount pulled from the coverage fund\\n    function _pullCoverageFunds(uint256 _max) internal override returns (uint256) {\\n        address coverageFund = CoverageFundAddress.get();\\n        if (coverageFund == address(0)) {\\n            return 0;\\n        }\\n        uint256 initialBalance = address(this).balance;\\n        ICoverageFundV1(payable(coverageFund)).pullCoverageFunds(_max);\\n        uint256 collectedCoverageFunds = address(this).balance - initialBalance;\\n        if (collectedCoverageFunds > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + collectedCoverageFunds);\\n        }\\n        emit PulledCoverageFunds(collectedCoverageFunds);\\n        return collectedCoverageFunds;\\n    }\\n\\n    /// @notice Overridden handler called whenever the balance of ETH handled by the system increases. Computes the fees paid to the collector\\n    /// @param _amount Additional ETH received\\n    function _onEarnings(uint256 _amount) internal override {\\n        uint256 oldTotalSupply = _totalSupply();\\n        if (oldTotalSupply == 0) {\\n            revert ZeroMintedShares();\\n        }\\n        uint256 newTotalBalance = _assetBalance();\\n        uint256 globalFee = GlobalFee.get();\\n        uint256 numerator = _amount * oldTotalSupply * globalFee;\\n        uint256 denominator = (newTotalBalance * LibBasisPoints.BASIS_POINTS_MAX) - (_amount * globalFee);\\n        uint256 sharesToMint = denominator == 0 ? 0 : (numerator / denominator);\\n\\n        if (sharesToMint > 0) {\\n            address collector = CollectorAddress.get();\\n            _mintRawShares(collector, sharesToMint);\\n            uint256 newTotalSupply = _totalSupply();\\n            uint256 oldTotalBalance = newTotalBalance - _amount;\\n            emit RewardsEarned(collector, oldTotalBalance, oldTotalSupply, newTotalBalance, newTotalSupply);\\n        }\\n    }\\n\\n    /// @notice Overridden handler called whenever the total balance of ETH is requested\\n    /// @return The current total asset balance managed by River\\n    function _assetBalance() internal view override(SharesManagerV1, OracleManagerV1) returns (uint256) {\\n        IOracleManagerV1.StoredConsensusLayerReport storage storedReport = LastConsensusLayerReport.get();\\n        uint256 clValidatorCount = storedReport.validatorsCount;\\n        uint256 depositedValidatorCount = DepositedValidatorCount.get();\\n        if (clValidatorCount < depositedValidatorCount) {\\n            return storedReport.validatorsBalance + BalanceToDeposit.get() + CommittedBalance.get()\\n                + BalanceToRedeem.get()\\n                + (depositedValidatorCount - clValidatorCount) * ConsensusLayerDepositManagerV1.DEPOSIT_SIZE;\\n        } else {\\n            return\\n                storedReport.validatorsBalance + BalanceToDeposit.get() + CommittedBalance.get() + BalanceToRedeem.get();\\n        }\\n    }\\n\\n    /// @notice Internal utility to set the daily committable limits\\n    /// @param _dcl The new daily committable limits\\n    function _setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) internal {\\n        DailyCommittableLimits.set(_dcl);\\n        emit SetMaxDailyCommittableAmounts(_dcl.minDailyNetCommittableAmount, _dcl.maxDailyRelativeCommittableAmount);\\n    }\\n\\n    /// @notice Sets the balance to deposit, but not yet committed\\n    /// @param _newBalanceToDeposit The new balance to deposit value\\n    function _setBalanceToDeposit(uint256 _newBalanceToDeposit) internal override(UserDepositManagerV1) {\\n        emit SetBalanceToDeposit(BalanceToDeposit.get(), _newBalanceToDeposit);\\n        BalanceToDeposit.set(_newBalanceToDeposit);\\n    }\\n\\n    /// @notice Sets the balance to redeem, to be used to satisfy redeem requests on the redeem manager\\n    /// @param _newBalanceToRedeem The new balance to redeem value\\n    function _setBalanceToRedeem(uint256 _newBalanceToRedeem) internal {\\n        emit SetBalanceToRedeem(BalanceToRedeem.get(), _newBalanceToRedeem);\\n        BalanceToRedeem.set(_newBalanceToRedeem);\\n    }\\n\\n    /// @notice Sets the committed balance, ready to be deposited to the consensus layer\\n    /// @param _newCommittedBalance The new committed balance value\\n    function _setCommittedBalance(uint256 _newCommittedBalance) internal override(ConsensusLayerDepositManagerV1) {\\n        emit SetBalanceCommittedToDeposit(CommittedBalance.get(), _newCommittedBalance);\\n        CommittedBalance.set(_newCommittedBalance);\\n    }\\n\\n    /// @notice Pulls funds from the Withdraw contract, and adds funds to deposit and redeem balances\\n    /// @param _skimmedEthAmount The new amount of skimmed eth to pull\\n    /// @param _exitedEthAmount The new amount of exited eth to pull\\n    function _pullCLFunds(uint256 _skimmedEthAmount, uint256 _exitedEthAmount) internal override {\\n        uint256 currentBalance = address(this).balance;\\n        uint256 totalAmountToPull = _skimmedEthAmount + _exitedEthAmount;\\n        IWithdrawV1(WithdrawalCredentials.getAddress()).pullEth(totalAmountToPull);\\n        uint256 collectedCLFunds = address(this).balance - currentBalance;\\n        if (collectedCLFunds != _skimmedEthAmount + _exitedEthAmount) {\\n            revert InvalidPulledClFundsAmount(_skimmedEthAmount + _exitedEthAmount, collectedCLFunds);\\n        }\\n        if (_skimmedEthAmount > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + _skimmedEthAmount);\\n        }\\n        if (_exitedEthAmount > 0) {\\n            _setBalanceToRedeem(BalanceToRedeem.get() + _exitedEthAmount);\\n        }\\n        emit PulledCLFunds(_skimmedEthAmount, _exitedEthAmount);\\n    }\\n\\n    /// @notice Pulls funds from the redeem manager exceeding eth buffer\\n    /// @param _max The maximum amount to pull\\n    function _pullRedeemManagerExceedingEth(uint256 _max) internal override returns (uint256) {\\n        uint256 currentBalance = address(this).balance;\\n        IRedeemManagerV1(RedeemManagerAddress.get()).pullExceedingEth(_max);\\n        uint256 collectedExceedingEth = address(this).balance - currentBalance;\\n        if (collectedExceedingEth > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + collectedExceedingEth);\\n        }\\n        emit PulledRedeemManagerExceedingEth(collectedExceedingEth);\\n        return collectedExceedingEth;\\n    }\\n\\n    /// @notice Use the balance to redeem to report a withdrawal event on the redeem manager\\n    function _reportWithdrawToRedeemManager() internal override {\\n        IRedeemManagerV1 redeemManager_ = IRedeemManagerV1(RedeemManagerAddress.get());\\n        uint256 underlyingAssetBalance = _assetBalance();\\n        uint256 totalSupply = _totalSupply();\\n\\n        if (underlyingAssetBalance > 0 && totalSupply > 0) {\\n            // we compute the redeem manager demands in eth and lsEth based on current conversion rate\\n            uint256 redeemManagerDemand = redeemManager_.getRedeemDemand();\\n            uint256 suppliedRedeemManagerDemand = redeemManagerDemand;\\n            uint256 suppliedRedeemManagerDemandInEth = _balanceFromShares(suppliedRedeemManagerDemand);\\n            uint256 availableBalanceToRedeem = BalanceToRedeem.get();\\n\\n            // if demand is higher than available eth, we update demand values to use the available eth\\n            if (suppliedRedeemManagerDemandInEth > availableBalanceToRedeem) {\\n                suppliedRedeemManagerDemandInEth = availableBalanceToRedeem;\\n                suppliedRedeemManagerDemand = _sharesFromBalance(suppliedRedeemManagerDemandInEth);\\n            }\\n\\n            emit ReportedRedeemManager(\\n                redeemManagerDemand, suppliedRedeemManagerDemand, suppliedRedeemManagerDemandInEth\\n            );\\n\\n            if (suppliedRedeemManagerDemandInEth > 0) {\\n                // the available balance to redeem is updated\\n                _setBalanceToRedeem(availableBalanceToRedeem - suppliedRedeemManagerDemandInEth);\\n\\n                // we burn the shares of the redeem manager associated with the amount of eth provided\\n                _burnRawShares(address(redeemManager_), suppliedRedeemManagerDemand);\\n\\n                // perform a report withdraw call to the redeem manager\\n                redeemManager_.reportWithdraw{value: suppliedRedeemManagerDemandInEth}(suppliedRedeemManagerDemand);\\n            }\\n        }\\n    }\\n\\n    /// @notice Requests exits of validators after possibly rebalancing deposit and redeem balances\\n    /// @param _exitingBalance The currently exiting funds, soon to be received on the execution layer\\n    /// @param _depositToRedeemRebalancingAllowed True if rebalancing from deposit to redeem is allowed\\n    function _requestExitsBasedOnRedeemDemandAfterRebalancings(\\n        uint256 _exitingBalance,\\n        uint32[] memory _stoppedValidatorCounts,\\n        bool _depositToRedeemRebalancingAllowed,\\n        bool _slashingContainmentModeEnabled\\n    ) internal override {\\n        IOperatorsRegistryV1(OperatorsRegistryAddress.get()).reportStoppedValidatorCounts(\\n            _stoppedValidatorCounts, DepositedValidatorCount.get()\\n        );\\n\\n        if (_slashingContainmentModeEnabled) {\\n            return;\\n        }\\n\\n        uint256 totalSupply = _totalSupply();\\n        if (totalSupply > 0) {\\n            uint256 availableBalanceToRedeem = BalanceToRedeem.get();\\n            uint256 availableBalanceToDeposit = BalanceToDeposit.get();\\n            uint256 redeemManagerDemandInEth =\\n                _balanceFromShares(IRedeemManagerV1(RedeemManagerAddress.get()).getRedeemDemand());\\n\\n            // if after all rebalancings, the redeem manager demand is still higher than the balance to redeem and exiting eth, we compute\\n            // the amount of validators to exit in order to cover the remaining demand\\n            if (availableBalanceToRedeem + _exitingBalance < redeemManagerDemandInEth) {\\n                // if reblancing is enabled and the redeem manager demand is higher than exiting eth, we add eth for deposit buffer to redeem buffer\\n                if (_depositToRedeemRebalancingAllowed && availableBalanceToDeposit > 0) {\\n                    uint256 rebalancingAmount = LibUint256.min(\\n                        availableBalanceToDeposit, redeemManagerDemandInEth - _exitingBalance - availableBalanceToRedeem\\n                    );\\n                    if (rebalancingAmount > 0) {\\n                        availableBalanceToRedeem += rebalancingAmount;\\n                        _setBalanceToRedeem(availableBalanceToRedeem);\\n                        _setBalanceToDeposit(availableBalanceToDeposit - rebalancingAmount);\\n                    }\\n                }\\n\\n                IOperatorsRegistryV1 or = IOperatorsRegistryV1(OperatorsRegistryAddress.get());\\n\\n                (uint256 totalStoppedValidatorCount, uint256 totalRequestedExitsCount) =\\n                    or.getStoppedAndRequestedExitCounts();\\n\\n                // what we are calling pre-exiting balance is the amount of eth that should soon enter the exiting balance\\n                // because exit requests have been made and operators might have a lag to process them\\n                // we take them into account to not exit too many validators\\n                uint256 preExitingBalance = (\\n                    totalRequestedExitsCount > totalStoppedValidatorCount\\n                        ? (totalRequestedExitsCount - totalStoppedValidatorCount)\\n                        : 0\\n                ) * DEPOSIT_SIZE;\\n\\n                if (availableBalanceToRedeem + _exitingBalance + preExitingBalance < redeemManagerDemandInEth) {\\n                    uint256 validatorCountToExit = LibUint256.ceil(\\n                        redeemManagerDemandInEth - (availableBalanceToRedeem + _exitingBalance + preExitingBalance),\\n                        DEPOSIT_SIZE\\n                    );\\n\\n                    or.demandValidatorExits(validatorCountToExit, DepositedValidatorCount.get());\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Skims the redeem balance and sends remaining funds to the deposit balance\\n    function _skimExcessBalanceToRedeem() internal override {\\n        uint256 availableBalanceToRedeem = BalanceToRedeem.get();\\n\\n        // if the available balance to redeem is not 0, it means that all the redeem requests are fulfilled, we should redirect funds for deposits\\n        if (availableBalanceToRedeem > 0) {\\n            _setBalanceToDeposit(BalanceToDeposit.get() + availableBalanceToRedeem);\\n            _setBalanceToRedeem(0);\\n        }\\n    }\\n\\n    /// @notice Commits the deposit balance up to the allowed daily limit in batches of 32 ETH.\\n    /// @notice Committed funds are funds waiting to be deposited but that cannot be used to fund the redeem manager anymore\\n    /// @notice This two step process is required to prevent possible out of gas issues we would have from actually funding the validators at this point\\n    /// @param _period The period between current and last report\\n    function _commitBalanceToDeposit(uint256 _period) internal override {\\n        uint256 underlyingAssetBalance = _assetBalance();\\n        uint256 currentBalanceToDeposit = BalanceToDeposit.get();\\n        DailyCommittableLimits.DailyCommittableLimitsStruct memory dcl = DailyCommittableLimits.get();\\n\\n        // we compute the max daily committable amount by taking the asset balance without the balance to deposit into account\\n        // this value is the daily maximum amount we can commit for deposits\\n        // we take the maximum value between a net amount and an amount relative to the asset balance\\n        // this ensures that the amount we can commit is not too low in the beginning and that it is not too high when volumes grow\\n        // the relative amount is computed from the committed and activated funds (on the CL or committed to be on the CL soon) and not\\n        // the deposit balance\\n        // this value is computed by subtracting the current balance to deposit from the underlying asset balance\\n        uint256 currentMaxDailyCommittableAmount = LibUint256.max(\\n            dcl.minDailyNetCommittableAmount,\\n            (uint256(dcl.maxDailyRelativeCommittableAmount) * (underlyingAssetBalance - currentBalanceToDeposit))\\n                / LibBasisPoints.BASIS_POINTS_MAX\\n        );\\n        // we adapt the value for the reporting period by using the asset balance as upper bound\\n        uint256 currentMaxCommittableAmount =\\n            LibUint256.min((currentMaxDailyCommittableAmount * _period) / 1 days, currentBalanceToDeposit);\\n        // we only commit multiples of 32 ETH\\n        currentMaxCommittableAmount = (currentMaxCommittableAmount / DEPOSIT_SIZE) * DEPOSIT_SIZE;\\n\\n        if (currentMaxCommittableAmount > 0) {\\n            _setCommittedBalance(CommittedBalance.get() + currentMaxCommittableAmount);\\n            _setBalanceToDeposit(currentBalanceToDeposit - currentMaxCommittableAmount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IAllowlist.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of allowed recipients.\\ninterface IAllowlistV1 {\\n    /// @notice The permissions of several accounts have changed\\n    /// @param accounts List of accounts\\n    /// @param permissions New permissions for each account at the same index\\n    event SetAllowlistPermissions(address[] accounts, uint256[] permissions);\\n\\n    /// @notice The stored allower address has been changed\\n    /// @param allower The new allower address\\n    event SetAllower(address indexed allower);\\n\\n    /// @notice The provided accounts list is empty\\n    error InvalidAlloweeCount();\\n\\n    /// @notice The account is denied access\\n    /// @param _account The denied account\\n    error Denied(address _account);\\n\\n    /// @notice The provided accounts and permissions list have different lengths\\n    error MismatchedAlloweeAndStatusCount();\\n\\n    /// @notice Initializes the allowlist\\n    /// @param _admin Address of the Allowlist administrator\\n    /// @param _allower Address of the allower\\n    function initAllowlistV1(address _admin, address _allower) external;\\n\\n    /// @notice Retrieves the allower address\\n    /// @return The address of the allower\\n    function getAllower() external view returns (address);\\n\\n    /// @notice This method returns true if the user has the expected permission and\\n    ///         is not in the deny list\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected and user is allowed\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method returns true if the user is in the deny list\\n    /// @param _account Recipient to verify\\n    /// @return True if user is denied access\\n    function isDenied(address _account) external view returns (bool);\\n\\n    /// @notice This method returns true if the user has the expected permission\\n    ///         ignoring any deny list membership\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    /// @return True if mask is respected\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool);\\n\\n    /// @notice This method retrieves the raw permission value\\n    /// @param _account Recipient to verify\\n    /// @return The raw permissions value of the account\\n    function getPermissions(address _account) external view returns (uint256);\\n\\n    /// @notice This method should be used as a modifier and is expected to revert\\n    ///         if the user hasn't got the required permission or if the user is\\n    ///         in the deny list.\\n    /// @param _account Recipient to verify\\n    /// @param _mask Combination of permissions to verify\\n    function onlyAllowed(address _account, uint256 _mask) external view;\\n\\n    /// @notice Changes the allower address\\n    /// @param _newAllowerAddress New address allowed to edit the allowlist\\n    function setAllower(address _newAllowerAddress) external;\\n\\n    /// @notice Sets the allowlisting status for one or more accounts\\n    /// @dev The permission value is overridden and not updated\\n    /// @param _accounts Accounts with statuses to edit\\n    /// @param _permissions Allowlist permissions for each account, in the same order as _accounts\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IOperatorRegistry.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/operatorsRegistry/Operators.2.sol\\\";\\n\\n/// @title Operators Registry Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the list of operators and their keys\\ninterface IOperatorsRegistryV1 {\\n    /// @notice A new operator has been added to the registry\\n    /// @param index The operator index\\n    /// @param name The operator display name\\n    /// @param operatorAddress The operator address\\n    event AddedOperator(uint256 indexed index, string name, address indexed operatorAddress);\\n\\n    /// @notice The operator status has been changed\\n    /// @param index The operator index\\n    /// @param active True if the operator is active\\n    event SetOperatorStatus(uint256 indexed index, bool active);\\n\\n    /// @notice The operator limit has been changed\\n    /// @param index The operator index\\n    /// @param newLimit The new operator staking limit\\n    event SetOperatorLimit(uint256 indexed index, uint256 newLimit);\\n\\n    /// @notice The operator stopped validator count has been changed\\n    /// @param index The operator index\\n    /// @param newStoppedValidatorCount The new stopped validator count\\n    event SetOperatorStoppedValidatorCount(uint256 indexed index, uint256 newStoppedValidatorCount);\\n\\n    /// @notice The operator address has been changed\\n    /// @param index The operator index\\n    /// @param newOperatorAddress The new operator address\\n    event SetOperatorAddress(uint256 indexed index, address indexed newOperatorAddress);\\n\\n    /// @notice The operator display name has been changed\\n    /// @param index The operator index\\n    /// @param newName The new display name\\n    event SetOperatorName(uint256 indexed index, string newName);\\n\\n    /// @notice The operator or the admin added new validator keys and signatures\\n    /// @dev The public keys and signatures are concatenated\\n    /// @dev A public key is 48 bytes long\\n    /// @dev A signature is 96 bytes long\\n    /// @dev [P1, S1, P2, S2, ..., PN, SN] where N is the bytes length divided by (96 + 48)\\n    /// @param index The operator index\\n    /// @param publicKeysAndSignatures The concatenated public keys and signatures\\n    event AddedValidatorKeys(uint256 indexed index, bytes publicKeysAndSignatures);\\n\\n    /// @notice The operator or the admin removed a public key and its signature from the registry\\n    /// @param index The operator index\\n    /// @param publicKey The BLS public key that has been removed\\n    event RemovedValidatorKey(uint256 indexed index, bytes publicKey);\\n\\n    /// @notice The stored river address has been changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The operator edited its keys after the snapshot block\\n    /// @dev This means that we cannot assume that its key set is checked by the snapshot\\n    /// @dev This happens only if the limit was meant to be increased\\n    /// @param index The operator index\\n    /// @param currentLimit The current operator limit\\n    /// @param newLimit The new operator limit that was attempted to be set\\n    /// @param latestKeysEditBlockNumber The last block number at which the operator changed its keys\\n    /// @param snapshotBlock The block number of the snapshot\\n    event OperatorEditsAfterSnapshot(\\n        uint256 indexed index,\\n        uint256 currentLimit,\\n        uint256 newLimit,\\n        uint256 indexed latestKeysEditBlockNumber,\\n        uint256 indexed snapshotBlock\\n    );\\n\\n    /// @notice The call didn't alter the limit of the operator\\n    /// @param index The operator index\\n    /// @param limit The limit of the operator\\n    event OperatorLimitUnchanged(uint256 indexed index, uint256 limit);\\n\\n    /// @notice The stopped validator array has been changed\\n    /// @notice A validator is considered stopped if exiting, exited or slashed\\n    /// @notice This event is emitted when the oracle reports new stopped validators counts\\n    /// @param stoppedValidatorCounts The new stopped validator counts\\n    event UpdatedStoppedValidators(uint32[] stoppedValidatorCounts);\\n\\n    /// @notice The requested exit count has been updated\\n    /// @param index The operator index\\n    /// @param count The count of requested exits\\n    event RequestedValidatorExits(uint256 indexed index, uint256 count);\\n\\n    /// @notice The exit request demand has been updated\\n    /// @param previousValidatorExitsDemand The previous exit request demand\\n    /// @param nextValidatorExitsDemand The new exit request demand\\n    event SetCurrentValidatorExitsDemand(uint256 previousValidatorExitsDemand, uint256 nextValidatorExitsDemand);\\n\\n    /// @notice The total requested exit has been updated\\n    /// @param previousTotalValidatorExitsRequested The previous total requested exit\\n    /// @param newTotalValidatorExitsRequested The new total requested exit\\n    event SetTotalValidatorExitsRequested(\\n        uint256 previousTotalValidatorExitsRequested, uint256 newTotalValidatorExitsRequested\\n    );\\n\\n    /// @notice A validator key got funded on the deposit contract\\n    /// @notice This event was introduced during a contract upgrade, in order to cover all possible public keys, this event\\n    /// @notice will be replayed for past funded keys in order to have a complete coverage of all the funded public keys.\\n    /// @notice In this particuliar scenario, the deferred value will be set to true, to indicate that we are not going to have\\n    /// @notice the expected additional events and side effects in the same transaction (deposit to official DepositContract etc ...) because\\n    /// @notice the event was synthetically crafted.\\n    /// @param index The operator index\\n    /// @param publicKeys BLS Public key that got funded\\n    /// @param deferred True if event has been replayed in the context of a migration\\n    event FundedValidatorKeys(uint256 indexed index, bytes[] publicKeys, bool deferred);\\n\\n    /// @notice The requested exit count has been update to fill the gap with the reported stopped count\\n    /// @param index The operator index\\n    /// @param oldRequestedExits The old requested exit count\\n    /// @param newRequestedExits The new requested exit count\\n    event UpdatedRequestedValidatorExitsUponStopped(\\n        uint256 indexed index, uint32 oldRequestedExits, uint32 newRequestedExits\\n    );\\n\\n    /// @notice The calling operator is inactive\\n    /// @param index The operator index\\n    error InactiveOperator(uint256 index);\\n\\n    /// @notice A funded key deletion has been attempted\\n    error InvalidFundedKeyDeletionAttempt();\\n\\n    /// @notice The index provided are not sorted properly (descending order)\\n    error InvalidUnsortedIndexes();\\n\\n    /// @notice The provided operator and limits array have different lengths\\n    error InvalidArrayLengths();\\n\\n    /// @notice The provided operator and limits array are empty\\n    error InvalidEmptyArray();\\n\\n    /// @notice The provided key count is 0\\n    error InvalidKeyCount();\\n\\n    /// @notice The provided concatenated keys do not have the expected length\\n    error InvalidKeysLength();\\n\\n    /// @notice The index that is removed is out of bounds\\n    error InvalidIndexOutOfBounds();\\n\\n    /// @notice The value for the operator limit is too high\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param keyCount The operator key count\\n    error OperatorLimitTooHigh(uint256 index, uint256 limit, uint256 keyCount);\\n\\n    /// @notice The value for the limit is too low\\n    /// @param index The operator index\\n    /// @param limit The new limit provided\\n    /// @param fundedKeyCount The operator funded key count\\n    error OperatorLimitTooLow(uint256 index, uint256 limit, uint256 fundedKeyCount);\\n\\n    /// @notice The provided list of operators is not in increasing order\\n    error UnorderedOperatorList();\\n\\n    /// @notice Thrown when an invalid empty stopped validator array is provided\\n    error InvalidEmptyStoppedValidatorCountsArray();\\n\\n    /// @notice Thrown when the sum of stopped validators is invalid\\n    error InvalidStoppedValidatorCountsSum();\\n\\n    /// @notice Throw when an element in the stopped validator array is decreasing\\n    error StoppedValidatorCountsDecreased();\\n\\n    /// @notice Thrown when the number of elements in the array is too high compared to operator count\\n    error StoppedValidatorCountsTooHigh();\\n\\n    /// @notice Thrown when no exit requests can be performed\\n    error NoExitRequestsToPerform();\\n\\n    /// @notice The provided stopped validator count array is shrinking\\n    error StoppedValidatorCountArrayShrinking();\\n\\n    /// @notice The provided stopped validator count of an operator is above its funded validator count\\n    error StoppedValidatorCountAboveFundedCount(uint256 operatorIndex, uint32 stoppedCount, uint32 fundedCount);\\n\\n    /// @notice Initializes the operators registry\\n    /// @param _admin Admin in charge of managing operators\\n    /// @param _river Address of River system\\n    function initOperatorsRegistryV1(address _admin, address _river) external;\\n\\n    /// @notice Initializes the operators registry for V1_1\\n    function initOperatorsRegistryV1_1() external;\\n\\n    /// @notice Retrieve the River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Get operator details\\n    /// @param _index The index of the operator\\n    /// @return The details of the operator\\n    function getOperator(uint256 _index) external view returns (OperatorsV2.Operator memory);\\n\\n    /// @notice Get operator count\\n    /// @return The operator count\\n    function getOperatorCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the stopped validator count for an operator index\\n    /// @param _idx The index of the operator\\n    /// @return The stopped validator count of the operator\\n    function getOperatorStoppedValidatorCount(uint256 _idx) external view returns (uint32);\\n\\n    /// @notice Retrieve the total stopped validator count\\n    /// @return The total stopped validator count\\n    function getTotalStoppedValidatorCount() external view returns (uint32);\\n\\n    /// @notice Retrieve the total requested exit count\\n    /// @notice This value is the amount of exit requests that have been performed, emitting an event for operators to catch\\n    /// @return The total requested exit count\\n    function getTotalValidatorExitsRequested() external view returns (uint256);\\n\\n    /// @notice Get the current exit request demand waiting to be triggered\\n    /// @notice This value is the amount of exit requests that are demanded and not yet performed by the contract\\n    /// @return The current exit request demand\\n    function getCurrentValidatorExitsDemand() external view returns (uint256);\\n\\n    /// @notice Retrieve the total stopped and requested exit count\\n    /// @return The total stopped count\\n    /// @return The total requested exit count\\n    function getStoppedAndRequestedExitCounts() external view returns (uint32, uint256);\\n\\n    /// @notice Retrieve the raw stopped validators array from storage\\n    /// @return The stopped validator array\\n    function getStoppedValidatorCountPerOperator() external view returns (uint32[] memory);\\n\\n    /// @notice Get the details of a validator\\n    /// @param _operatorIndex The index of the operator\\n    /// @param _validatorIndex The index of the validator\\n    /// @return publicKey The public key of the validator\\n    /// @return signature The signature used during deposit\\n    /// @return funded True if validator has been funded\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded);\\n\\n    /// @notice Retrieve the active operator set\\n    /// @return The list of active operators and their details\\n    function listActiveOperators() external view returns (OperatorsV2.Operator[] memory);\\n\\n    /// @notice Allows river to override the stopped validators array\\n    /// @notice This actions happens during the Oracle report processing\\n    /// @param _stoppedValidatorCounts The new stopped validators array\\n    /// @param _depositedValidatorCount The total deposited validator count\\n    function reportStoppedValidatorCounts(uint32[] calldata _stoppedValidatorCounts, uint256 _depositedValidatorCount)\\n        external;\\n\\n    /// @notice Adds an operator to the registry\\n    /// @dev Only callable by the administrator\\n    /// @param _name The name identifying the operator\\n    /// @param _operator The address representing the operator, receiving the rewards\\n    /// @return The index of the new operator\\n    function addOperator(string calldata _name, address _operator) external returns (uint256);\\n\\n    /// @notice Changes the operator address of an operator\\n    /// @dev Only callable by the administrator or the previous operator address\\n    /// @param _index The operator index\\n    /// @param _newOperatorAddress The new address of the operator\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external;\\n\\n    /// @notice Changes the operator name\\n    /// @dev Only callable by the administrator or the operator\\n    /// @param _index The operator index\\n    /// @param _newName The new operator name\\n    function setOperatorName(uint256 _index, string calldata _newName) external;\\n\\n    /// @notice Changes the operator status\\n    /// @dev Only callable by the administrator\\n    /// @param _index The operator index\\n    /// @param _newStatus The new status of the operator\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external;\\n\\n    /// @notice Changes the operator staking limit\\n    /// @dev Only callable by the administrator\\n    /// @dev The operator indexes must be in increasing order and contain no duplicate\\n    /// @dev The limit cannot exceed the total key count of the operator\\n    /// @dev The _indexes and _newLimits must have the same length.\\n    /// @dev Each limit value is applied to the operator index at the same index in the _indexes array.\\n    /// @param _operatorIndexes The operator indexes, in increasing order and duplicate free\\n    /// @param _newLimits The new staking limit of the operators\\n    /// @param _snapshotBlock The block number at which the snapshot was computed\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint32[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external;\\n\\n    /// @notice Adds new keys for an operator\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @param _index The operator index\\n    /// @param _keyCount The amount of keys provided\\n    /// @param _publicKeysAndSignatures Public keys of the validator, concatenated\\n    function addValidators(uint256 _index, uint32 _keyCount, bytes calldata _publicKeysAndSignatures) external;\\n\\n    /// @notice Remove validator keys\\n    /// @dev Only callable by the administrator or the operator address\\n    /// @dev The indexes must be provided sorted in decreasing order and duplicate-free, otherwise the method will revert\\n    /// @dev The operator limit will be set to the lowest deleted key index if the operator's limit wasn't equal to its total key count\\n    /// @dev The operator or the admin cannot remove funded keys\\n    /// @dev When removing validators, the indexes of specific unfunded keys can be changed in order to properly\\n    /// @dev remove the keys from the storage array. Beware of this specific behavior when chaining calls as the\\n    /// @dev targeted public key indexes can point to a different key after a first call was made and performed\\n    /// @dev some swaps\\n    /// @param _index The operator index\\n    /// @param _indexes The indexes of the keys to remove\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external;\\n\\n    /// @notice Retrieve validator keys based on operator statuses\\n    /// @param _count Max amount of keys requested\\n    /// @return publicKeys An array of public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function pickNextValidatorsToDeposit(uint256 _count)\\n        external\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Public endpoint to consume the exit request demand and perform the actual exit requests\\n    /// @notice The selection algorithm will pick validators based on their active validator counts\\n    /// @notice This value is computed by using the count of funded keys and taking into account the stopped validator counts and exit requests\\n    /// @param _count Max amount of exits to request\\n    function requestValidatorExits(uint256 _count) external;\\n\\n    /// @notice Increases the exit request demand\\n    /// @dev This method is only callable by the river contract, and to actually forward the information to the node operators via event emission, the unprotected requestValidatorExits method must be called\\n    /// @param _count The amount of exit requests to add to the demand\\n    /// @param _depositedValidatorCount The total deposited validator count\\n    function demandValidatorExits(uint256 _count, uint256 _depositedValidatorCount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IRiver.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/river/DailyCommittableLimits.sol\\\";\\n\\nimport \\\"./components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"./components/IOracleManager.1.sol\\\";\\nimport \\\"./components/ISharesManager.1.sol\\\";\\nimport \\\"./components/IUserDepositManager.1.sol\\\";\\n\\n/// @title River Interface (v1)\\n/// @author Kiln\\n/// @notice The main system interface\\ninterface IRiverV1 is IConsensusLayerDepositManagerV1, IUserDepositManagerV1, ISharesManagerV1, IOracleManagerV1 {\\n    /// @notice Funds have been pulled from the Execution Layer Fee Recipient\\n    /// @param amount The amount pulled\\n    event PulledELFees(uint256 amount);\\n\\n    /// @notice Funds have been pulled from the Coverage Fund\\n    /// @param amount The amount pulled\\n    event PulledCoverageFunds(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the redeem manager\\n    /// @param amount The amount pulled\\n    event PulledRedeemManagerExceedingEth(uint256 amount);\\n\\n    /// @notice Emitted when funds are pulled from the CL recipient\\n    /// @param pulledSkimmedEthAmount The amount of skimmed ETH pulled\\n    /// @param pullExitedEthAmount The amount of exited ETH pulled\\n    event PulledCLFunds(uint256 pulledSkimmedEthAmount, uint256 pullExitedEthAmount);\\n\\n    /// @notice The stored Execution Layer Fee Recipient has been changed\\n    /// @param elFeeRecipient The new Execution Layer Fee Recipient\\n    event SetELFeeRecipient(address indexed elFeeRecipient);\\n\\n    /// @notice The stored Coverage Fund has been changed\\n    /// @param coverageFund The new Coverage Fund\\n    event SetCoverageFund(address indexed coverageFund);\\n\\n    /// @notice The stored Collector has been changed\\n    /// @param collector The new Collector\\n    event SetCollector(address indexed collector);\\n\\n    /// @notice The stored Allowlist has been changed\\n    /// @param allowlist The new Allowlist\\n    event SetAllowlist(address indexed allowlist);\\n\\n    /// @notice The stored Global Fee has been changed\\n    /// @param fee The new Global Fee\\n    event SetGlobalFee(uint256 fee);\\n\\n    /// @notice The stored Operators Registry has been changed\\n    /// @param operatorRegistry The new Operators Registry\\n    event SetOperatorsRegistry(address indexed operatorRegistry);\\n\\n    /// @notice The stored Metadata URI string has been changed\\n    /// @param metadataURI The new Metadata URI string\\n    event SetMetadataURI(string metadataURI);\\n\\n    /// @notice The system underlying supply increased. This is a snapshot of the balances for accounting purposes\\n    /// @param _collector The address of the collector during this event\\n    /// @param _oldTotalUnderlyingBalance Old total ETH balance under management by River\\n    /// @param _oldTotalSupply Old total supply in shares\\n    /// @param _newTotalUnderlyingBalance New total ETH balance under management by River\\n    /// @param _newTotalSupply New total supply in shares\\n    event RewardsEarned(\\n        address indexed _collector,\\n        uint256 _oldTotalUnderlyingBalance,\\n        uint256 _oldTotalSupply,\\n        uint256 _newTotalUnderlyingBalance,\\n        uint256 _newTotalSupply\\n    );\\n\\n    /// @notice Emitted when the daily committable limits are changed\\n    /// @param minNetAmount The minimum amount that must be used as the daily committable amount\\n    /// @param maxRelativeAmount The maximum amount that can be used as the daily committable amount, relative to the total underlying supply\\n    event SetMaxDailyCommittableAmounts(uint256 minNetAmount, uint256 maxRelativeAmount);\\n\\n    /// @notice Emitted when the redeem manager address is changed\\n    /// @param redeemManager The address of the redeem manager\\n    event SetRedeemManager(address redeemManager);\\n\\n    /// @notice Emitted when the balance to deposit is updated\\n    /// @param oldAmount The old balance to deposit\\n    /// @param newAmount The new balance to deposit\\n    event SetBalanceToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance to redeem is updated\\n    /// @param oldAmount The old balance to redeem\\n    /// @param newAmount The new balance to redeem\\n    event SetBalanceToRedeem(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the balance committed to deposit\\n    /// @param oldAmount The old balance committed to deposit\\n    /// @param newAmount The new balance committed to deposit\\n    event SetBalanceCommittedToDeposit(uint256 oldAmount, uint256 newAmount);\\n\\n    /// @notice Emitted when the redeem manager received a withdraw event report\\n    /// @param redeemManagerDemand The total demand in LsETH of the redeem manager\\n    /// @param suppliedRedeemManagerDemand The amount of LsETH demand actually supplied\\n    /// @param suppliedRedeemManagerDemandInEth The amount in ETH of the supplied demand\\n    event ReportedRedeemManager(\\n        uint256 redeemManagerDemand, uint256 suppliedRedeemManagerDemand, uint256 suppliedRedeemManagerDemandInEth\\n    );\\n\\n    /// @notice Thrown when the amount received from the Withdraw contract doe not match the requested amount\\n    /// @param requested The amount that was requested\\n    /// @param received The amount that was received\\n    error InvalidPulledClFundsAmount(uint256 requested, uint256 received);\\n\\n    /// @notice The computed amount of shares to mint is 0\\n    error ZeroMintedShares();\\n\\n    /// @notice The access was denied\\n    /// @param account The account that was denied\\n    error Denied(address account);\\n\\n    /// @notice Initializes the River system\\n    /// @param _depositContractAddress Address to make Consensus Layer deposits\\n    /// @param _elFeeRecipientAddress Address that receives the execution layer fees\\n    /// @param _withdrawalCredentials Credentials to use for every validator deposit\\n    /// @param _oracleAddress The address of the Oracle contract\\n    /// @param _systemAdministratorAddress Administrator address\\n    /// @param _allowlistAddress Address of the allowlist contract\\n    /// @param _operatorRegistryAddress Address of the operator registry\\n    /// @param _collectorAddress Address receiving the the global fee on revenue\\n    /// @param _globalFee Amount retained when the ETH balance increases and sent to the collector\\n    function initRiverV1(\\n        address _depositContractAddress,\\n        address _elFeeRecipientAddress,\\n        bytes32 _withdrawalCredentials,\\n        address _oracleAddress,\\n        address _systemAdministratorAddress,\\n        address _allowlistAddress,\\n        address _operatorRegistryAddress,\\n        address _collectorAddress,\\n        uint256 _globalFee\\n    ) external;\\n\\n    /// @notice Initialized version 1.1 of the River System\\n    /// @param _redeemManager The redeem manager address\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    /// @param _maxDailyNetCommittableAmount_ The net daily committable limit\\n    /// @param _maxDailyRelativeCommittableAmount_ The relative daily committable limit\\n    function initRiverV1_1(\\n        address _redeemManager,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound,\\n        uint128 _maxDailyNetCommittableAmount_,\\n        uint128 _maxDailyRelativeCommittableAmount_\\n    ) external;\\n\\n    /// @notice Initializes version 1.2 of the River System\\n    function initRiverV1_2() external;\\n\\n    /// @notice Get the current global fee\\n    /// @return The global fee\\n    function getGlobalFee() external view returns (uint256);\\n\\n    /// @notice Retrieve the allowlist address\\n    /// @return The allowlist address\\n    function getAllowlist() external view returns (address);\\n\\n    /// @notice Retrieve the collector address\\n    /// @return The collector address\\n    function getCollector() external view returns (address);\\n\\n    /// @notice Retrieve the execution layer fee recipient\\n    /// @return The execution layer fee recipient address\\n    function getELFeeRecipient() external view returns (address);\\n\\n    /// @notice Retrieve the coverage fund\\n    /// @return The coverage fund address\\n    function getCoverageFund() external view returns (address);\\n\\n    /// @notice Retrieve the redeem manager\\n    /// @return The redeem manager address\\n    function getRedeemManager() external view returns (address);\\n\\n    /// @notice Retrieve the operators registry\\n    /// @return The operators registry address\\n    function getOperatorsRegistry() external view returns (address);\\n\\n    /// @notice Retrieve the metadata uri string value\\n    /// @return The metadata uri string value\\n    function getMetadataURI() external view returns (string memory);\\n\\n    /// @notice Retrieve the configured daily committable limits\\n    /// @return The daily committable limits structure\\n    function getDailyCommittableLimits()\\n        external\\n        view\\n        returns (DailyCommittableLimits.DailyCommittableLimitsStruct memory);\\n\\n    /// @notice Resolves the provided redeem requests by calling the redeem manager\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of matching withdrawal events, or error codes\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Set the daily committable limits\\n    /// @param _dcl The Daily Committable Limits structure\\n    function setDailyCommittableLimits(DailyCommittableLimits.DailyCommittableLimitsStruct memory _dcl) external;\\n\\n    /// @notice Retrieve the current balance to redeem\\n    /// @return The current balance to redeem\\n    function getBalanceToRedeem() external view returns (uint256);\\n\\n    /// @notice Performs a redeem request on the redeem manager\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The address that will own the redeem request\\n    /// @return redeemRequestId The ID of the newly created redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims several redeem requests\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of resolved withdrawal event ids\\n    /// @return claimStatuses The operation status results\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Changes the global fee parameter\\n    /// @param _newFee New fee value\\n    function setGlobalFee(uint256 _newFee) external;\\n\\n    /// @notice Changes the allowlist address\\n    /// @param _newAllowlist New address for the allowlist\\n    function setAllowlist(address _newAllowlist) external;\\n\\n    /// @notice Changes the collector address\\n    /// @param _newCollector New address for the collector\\n    function setCollector(address _newCollector) external;\\n\\n    /// @notice Changes the execution layer fee recipient\\n    /// @param _newELFeeRecipient New address for the recipient\\n    function setELFeeRecipient(address _newELFeeRecipient) external;\\n\\n    /// @notice Changes the coverage fund\\n    /// @param _newCoverageFund New address for the fund\\n    function setCoverageFund(address _newCoverageFund) external;\\n\\n    /// @notice Sets the metadata uri string value\\n    /// @param _metadataURI The new metadata uri string value\\n    function setMetadataURI(string memory _metadataURI) external;\\n\\n    /// @notice Input for execution layer fee earnings\\n    function sendELFees() external payable;\\n\\n    /// @notice Input for consensus layer funds, containing both exit and skimming\\n    function sendCLFunds() external payable;\\n\\n    /// @notice Input for coverage funds\\n    function sendCoverageFunds() external payable;\\n\\n    /// @notice Input for the redeem manager funds\\n    function sendRedeemManagerExceedingFunds() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IWithdraw.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Withdraw Interface (V1)\\n/// @author Kiln\\n/// @notice This contract is in charge of holding the exit and skimming funds and allow river to pull these funds\\ninterface IWithdrawV1 {\\n    /// @notice Emitted when the linked River address is changed\\n    /// @param river The new River address\\n    event SetRiver(address river);\\n\\n    /// @param _river The address of the River contract\\n    function initializeWithdrawV1(address _river) external;\\n\\n    /// @notice Retrieve the withdrawal credentials to use\\n    /// @return The withdrawal credentials\\n    function getCredentials() external view returns (bytes32);\\n\\n    /// @notice Retrieve the linked River address\\n    /// @return The River address\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Callable by River, sends the specified amount of ETH to River\\n    /// @param _amount The amount to pull\\n    function pullEth(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IELFeeRecipient.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Execution Layer Fee Recipient Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to receive all the execution layer fees from the proposed blocks + bribes\\ninterface IELFeeRecipientV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The fallback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice Initialize the fee recipient with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initELFeeRecipientV1(address _riverAddress) external;\\n\\n    /// @notice Pulls ETH to the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullELFees(uint256 _maxAmount) external;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/ICoverageFund.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Coverage Fund Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to receive donations for the slashing coverage fund and pull the funds into river\\ninterface ICoverageFundV1 {\\n    /// @notice The storage river address has changed\\n    /// @param river The new river address\\n    event SetRiver(address indexed river);\\n\\n    /// @notice A donation has been made to the coverage fund\\n    /// @param donator Address that performed the donation\\n    /// @param amount The amount donated\\n    event Donate(address indexed donator, uint256 amount);\\n\\n    /// @notice The fallback or receive callback has been triggered\\n    error InvalidCall();\\n\\n    /// @notice A donation with 0 ETH has been performed\\n    error EmptyDonation();\\n\\n    /// @notice Initialize the coverage fund with the required arguments\\n    /// @param _riverAddress Address of River\\n    function initCoverageFundV1(address _riverAddress) external;\\n\\n    /// @notice Pulls ETH into the River contract\\n    /// @dev Only callable by the River contract\\n    /// @param _maxAmount The maximum amount to pull into the system\\n    function pullCoverageFunds(uint256 _maxAmount) external;\\n\\n    /// @notice Donates ETH to the coverage fund contract\\n    function donate() external payable;\\n\\n    /// @notice Ether receiver\\n    receive() external payable;\\n\\n    /// @notice Invalid fallback detector\\n    fallback() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/src/components/ConsensusLayerDepositManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IConsensusLayerDepositManager.1.sol\\\";\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\nimport \\\"../libraries/LibBytes.sol\\\";\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\nimport \\\"../state/river/DepositContractAddress.sol\\\";\\nimport \\\"../state/river/WithdrawalCredentials.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\nimport \\\"../state/river/CommittedBalance.sol\\\";\\n\\n/// @title Consensus Layer Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the interactions with the official deposit contract, funding all validators\\n/// @notice Whenever a deposit to the consensus layer is requested, this contract computed the amount of keys\\n/// @notice that could be deposited depending on the amount available in the contract. It then tries to retrieve\\n/// @notice validator keys by calling its internal virtual method _getNextValidators. This method should be\\n/// @notice overridden by the implementing contract to provide [0; _keyCount] keys when invoked.\\nabstract contract ConsensusLayerDepositManagerV1 is IConsensusLayerDepositManagerV1 {\\n    /// @notice Size of a BLS Public key in bytes\\n    uint256 public constant PUBLIC_KEY_LENGTH = 48;\\n    /// @notice Size of a BLS Signature in bytes\\n    uint256 public constant SIGNATURE_LENGTH = 96;\\n    /// @notice Size of a deposit in ETH\\n    uint256 public constant DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Handler called to retrieve the internal River admin address\\n    /// @dev Must be Overridden\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Handler called to change the committed balance to deposit\\n    /// @param newCommittedBalance The new committed balance value\\n    function _setCommittedBalance(uint256 newCommittedBalance) internal virtual;\\n\\n    /// @notice Internal helper to retrieve validator keys ready to be funded\\n    /// @dev Must be overridden\\n    /// @param _keyCount The amount of keys (or less) to return.\\n    function _getNextValidators(uint256 _keyCount)\\n        internal\\n        virtual\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures);\\n\\n    /// @notice Initializer to set the deposit contract address and the withdrawal credentials to use\\n    /// @param _depositContractAddress The address of the deposit contract\\n    /// @param _withdrawalCredentials The withdrawal credentials to apply to all deposits\\n    function initConsensusLayerDepositManagerV1(address _depositContractAddress, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        DepositContractAddress.set(_depositContractAddress);\\n        emit SetDepositContractAddress(_depositContractAddress);\\n\\n        WithdrawalCredentials.set(_withdrawalCredentials);\\n        emit SetWithdrawalCredentials(_withdrawalCredentials);\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getCommittedBalance() external view returns (uint256) {\\n        return CommittedBalance.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getBalanceToDeposit() external view returns (uint256) {\\n        return BalanceToDeposit.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getWithdrawalCredentials() external view returns (bytes32) {\\n        return WithdrawalCredentials.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function getDepositedValidatorCount() external view returns (uint256) {\\n        return DepositedValidatorCount.get();\\n    }\\n\\n    /// @inheritdoc IConsensusLayerDepositManagerV1\\n    function depositToConsensusLayer(uint256 _maxCount) external {\\n        uint256 committedBalance = CommittedBalance.get();\\n        uint256 keyToDepositCount = LibUint256.min(committedBalance / DEPOSIT_SIZE, _maxCount);\\n\\n        if (keyToDepositCount == 0) {\\n            revert NotEnoughFunds();\\n        }\\n\\n        // it's up to the internal overriden _getNextValidators method to provide two array of the same\\n        // size for the publicKeys and the signatures\\n        (bytes[] memory publicKeys, bytes[] memory signatures) = _getNextValidators(keyToDepositCount);\\n\\n        uint256 receivedPublicKeyCount = publicKeys.length;\\n\\n        if (receivedPublicKeyCount == 0) {\\n            revert NoAvailableValidatorKeys();\\n        }\\n\\n        if (receivedPublicKeyCount > keyToDepositCount) {\\n            revert InvalidPublicKeyCount();\\n        }\\n\\n        bytes32 withdrawalCredentials = WithdrawalCredentials.get();\\n\\n        if (withdrawalCredentials == 0) {\\n            revert InvalidWithdrawalCredentials();\\n        }\\n\\n        for (uint256 idx = 0; idx < receivedPublicKeyCount;) {\\n            _depositValidator(publicKeys[idx], signatures[idx], withdrawalCredentials);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        _setCommittedBalance(committedBalance - DEPOSIT_SIZE * receivedPublicKeyCount);\\n        uint256 currentDepositedValidatorCount = DepositedValidatorCount.get();\\n        DepositedValidatorCount.set(currentDepositedValidatorCount + receivedPublicKeyCount);\\n        emit SetDepositedValidatorCount(\\n            currentDepositedValidatorCount, currentDepositedValidatorCount + receivedPublicKeyCount\\n        );\\n    }\\n\\n    /// @notice Deposits 32 ETH to the official Deposit contract\\n    /// @param _publicKey The public key of the validator\\n    /// @param _signature The signature provided by the operator\\n    /// @param _withdrawalCredentials The withdrawal credentials provided by River\\n    function _depositValidator(bytes memory _publicKey, bytes memory _signature, bytes32 _withdrawalCredentials)\\n        internal\\n    {\\n        if (_publicKey.length != PUBLIC_KEY_LENGTH) {\\n            revert InconsistentPublicKeys();\\n        }\\n\\n        if (_signature.length != SIGNATURE_LENGTH) {\\n            revert InconsistentSignatures();\\n        }\\n        uint256 value = DEPOSIT_SIZE;\\n\\n        uint256 depositAmount = value / 1 gwei;\\n\\n        bytes32 pubkeyRoot = sha256(bytes.concat(_publicKey, bytes16(0)));\\n        bytes32 signatureRoot = sha256(\\n            bytes.concat(\\n                sha256(LibBytes.slice(_signature, 0, 64)),\\n                sha256(bytes.concat(LibBytes.slice(_signature, 64, SIGNATURE_LENGTH - 64), bytes32(0)))\\n            )\\n        );\\n\\n        bytes32 depositDataRoot = sha256(\\n            bytes.concat(\\n                sha256(bytes.concat(pubkeyRoot, _withdrawalCredentials)),\\n                sha256(bytes.concat(bytes32(LibUint256.toLittleEndian64(depositAmount)), signatureRoot))\\n            )\\n        );\\n\\n        uint256 targetBalance = address(this).balance - value;\\n\\n        IDepositContract(DepositContractAddress.get()).deposit{value: value}(\\n            _publicKey, abi.encodePacked(_withdrawalCredentials), _signature, depositDataRoot\\n        );\\n        if (address(this).balance != targetBalance) {\\n            revert ErrorOnDeposit();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/components/UserDepositManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IUserDepositManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/BalanceToDeposit.sol\\\";\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inbound transfers cases or the explicit submissions\\nabstract contract UserDepositManagerV1 is IUserDepositManagerV1 {\\n    /// @notice Handler called whenever a user has sent funds to the contract\\n    /// @dev Must be overridden\\n    /// @param _depositor Address that made the deposit\\n    /// @param _recipient Address that receives the minted shares\\n    /// @param _amount Amount deposited\\n    function _onDeposit(address _depositor, address _recipient, uint256 _amount) internal virtual;\\n    function _setBalanceToDeposit(uint256 newBalanceToDeposit) internal virtual;\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    function depositAndTransfer(address _recipient) external payable {\\n        LibSanitize._notZeroAddress(_recipient);\\n        _deposit(_recipient);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    receive() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    /// @inheritdoc IUserDepositManagerV1\\n    fallback() external payable {\\n        revert LibErrors.InvalidCall();\\n    }\\n\\n    /// @notice Internal utility calling the deposit handler and emitting the deposit details\\n    /// @param _recipient The account receiving the minted shares\\n    function _deposit(address _recipient) internal {\\n        if (msg.value == 0) {\\n            revert EmptyDeposit();\\n        }\\n\\n        _setBalanceToDeposit(BalanceToDeposit.get() + msg.value);\\n\\n        _onDeposit(msg.sender, _recipient, msg.value);\\n\\n        emit UserDeposit(msg.sender, _recipient, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/components/SharesManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/ISharesManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\n\\nimport \\\"../state/river/Shares.sol\\\";\\nimport \\\"../state/river/SharesPerOwner.sol\\\";\\nimport \\\"../state/shared/ApprovalsPerOwner.sol\\\";\\n\\n/// @title Shares Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the shares of the depositor and the ERC20 interface\\nabstract contract SharesManagerV1 is ISharesManagerV1 {\\n    /// @notice Internal hook triggered on the external transfer call\\n    /// @dev Must be overridden\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    function _onTransfer(address _from, address _to) internal view virtual;\\n\\n    /// @notice Internal method to override to provide the total underlying asset balance\\n    /// @dev Must be overridden\\n    /// @return The total asset balance of the system\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Modifier used to ensure that the transfer is allowed by using the internal hook to perform internal checks\\n    /// @param _from Address of the sender\\n    /// @param _to Address of the recipient\\n    modifier transferAllowed(address _from, address _to) {\\n        _onTransfer(_from, _to);\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure the amount transferred is not 0\\n    /// @param _value Amount to check\\n    modifier isNotZero(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Modifier used to ensure that the sender has enough funds for the transfer\\n    /// @param _owner Address of the sender\\n    /// @param _value Value that is required to be sent\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"LsETH\\\";\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function totalUnderlyingSupply() external view returns (uint256) {\\n        return _assetBalance();\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function balanceOfUnderlying(address _owner) public view returns (uint256) {\\n        return _balanceFromShares(SharesPerOwner.get(_owner));\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256) {\\n        return _balanceFromShares(_shares);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256) {\\n        return _sharesFromBalance(_underlyingAssetAmount);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        transferAllowed(msg.sender, _to)\\n        isNotZero(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        transferAllowed(_from, _to)\\n        isNotZero(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ISharesManagerV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue);\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance in shares to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            _approve(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the allowance of an owner to a spender\\n    /// @param _owner The owner of the shares\\n    /// @param _spender The allowed spender of the shares\\n    /// @param _value The new allowance value\\n    function _approve(address _owner, address _spender, uint256 _value) internal {\\n        LibSanitize._notZeroAddress(_owner);\\n        LibSanitize._notZeroAddress(_spender);\\n        ApprovalsPerOwner.set(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the total supply of tokens\\n    /// @return The total supply\\n    function _totalSupply() internal view returns (uint256) {\\n        return Shares.get();\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        SharesPerOwner.set(_from, SharesPerOwner.get(_from) - _value);\\n        SharesPerOwner.set(_to, SharesPerOwner.get(_to) + _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to retrieve the underlying asset balance for the given shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The balance from the given shares\\n    function _balanceFromShares(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return ((_shares * _assetBalance())) / _totalSharesValue;\\n    }\\n\\n    /// @notice Internal utility to retrieve the shares count for a given underlying asset amount\\n    /// @param _balance Amount of underlying asset balance to convert\\n    /// @return The shares from the given balance\\n    function _sharesFromBalance(uint256 _balance) internal view returns (uint256) {\\n        uint256 _totalSharesValue = Shares.get();\\n\\n        if (_totalSharesValue == 0) {\\n            return 0;\\n        }\\n\\n        return (_balance * _totalSharesValue) / _assetBalance();\\n    }\\n\\n    /// @notice Internal utility to mint shares for the specified user\\n    /// @dev This method assumes that funds received are now part of the _assetBalance()\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _underlyingAssetValue Value of underlying asset received, to convert into shares\\n    /// @return sharesToMint The amnount of minted shares\\n    function _mintShares(address _owner, uint256 _underlyingAssetValue) internal returns (uint256 sharesToMint) {\\n        uint256 oldTotalAssetBalance = _assetBalance() - _underlyingAssetValue;\\n\\n        if (oldTotalAssetBalance == 0) {\\n            sharesToMint = _underlyingAssetValue;\\n            _mintRawShares(_owner, _underlyingAssetValue);\\n        } else {\\n            sharesToMint = (_underlyingAssetValue * _totalSupply()) / oldTotalAssetBalance;\\n            _mintRawShares(_owner, sharesToMint);\\n        }\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of shares per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account in shares\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return SharesPerOwner.get(_owner);\\n    }\\n\\n    /// @notice Internal utility to mint shares without any conversion, and emits a mint Transfer event\\n    /// @param _owner Account that should receive the new shares\\n    /// @param _value Amount of shares to mint\\n    function _mintRawShares(address _owner, uint256 _value) internal {\\n        _setTotalSupply(Shares.get() + _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) + _value);\\n        emit Transfer(address(0), _owner, _value);\\n    }\\n\\n    /// @notice Internal utility to burn shares without any conversion, and emits a burn Transfer event\\n    /// @param _owner Account that should burn its shares\\n    /// @param _value Amount of shares to burn\\n    function _burnRawShares(address _owner, uint256 _value) internal {\\n        _setTotalSupply(Shares.get() - _value);\\n        SharesPerOwner.set(_owner, SharesPerOwner.get(_owner) - _value);\\n        emit Transfer(_owner, address(0), _value);\\n    }\\n\\n    /// @notice Internal utility to set the total supply and emit an event\\n    /// @param newTotalSupply The new total supply value\\n    function _setTotalSupply(uint256 newTotalSupply) internal {\\n        Shares.set(newTotalSupply);\\n        emit SetTotalSupply(newTotalSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/components/OracleManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/components/IOracleManager.1.sol\\\";\\nimport \\\"../interfaces/IRedeemManager.1.sol\\\";\\n\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\nimport \\\"../state/river/LastConsensusLayerReport.sol\\\";\\nimport \\\"../state/river/OracleAddress.sol\\\";\\nimport \\\"../state/river/CLValidatorTotalBalance.sol\\\";\\nimport \\\"../state/river/CLValidatorCount.sol\\\";\\nimport \\\"../state/river/DepositedValidatorCount.sol\\\";\\nimport \\\"../state/river/LastOracleRoundId.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the inputs provided by the oracle\\n/// @notice The Oracle contract is plugged to this contract and is in charge of pushing\\n/// @notice data whenever a new report has been deemed valid. The report consists in two\\n/// @notice values: the sum of all balances of all deposited validators and the count of\\n/// @notice validators that have been activated on the consensus layer.\\nabstract contract OracleManagerV1 is IOracleManagerV1 {\\n    uint256 internal constant ONE_YEAR = 365 days;\\n    /// @notice Size of a deposit in ETH\\n    uint256 public constant _DEPOSIT_SIZE = 32 ether;\\n\\n    /// @notice Handler called if the delta between the last and new validator balance sum is positive\\n    /// @dev Must be overridden\\n    /// @param _profits The positive increase in the validator balance sum (staking rewards)\\n    function _onEarnings(uint256 _profits) internal virtual;\\n\\n    /// @notice Handler called to pull the Execution layer fees from the recipient\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullELFees(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to pull the coverage funds\\n    /// @dev Must be overridden\\n    /// @param _max The maximum amount to pull inside the system\\n    /// @return The amount pulled inside the system\\n    function _pullCoverageFunds(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Handler called to retrieve the system administrator address\\n    /// @dev Must be overridden\\n    /// @return The system administrator address\\n    function _getRiverAdmin() internal view virtual returns (address);\\n\\n    /// @notice Overridden handler called whenever the total balance of ETH is requested\\n    /// @return The current total asset balance managed by River\\n    function _assetBalance() internal view virtual returns (uint256);\\n\\n    /// @notice Pulls funds from the Withdraw contract, and adds funds to deposit and redeem balances\\n    /// @param _skimmedEthAmount The new amount of skimmed eth to pull\\n    /// @param _exitedEthAmount The new amount of exited eth to pull\\n    function _pullCLFunds(uint256 _skimmedEthAmount, uint256 _exitedEthAmount) internal virtual;\\n\\n    /// @notice Pulls funds from the redeem manager exceeding eth buffer\\n    /// @param _max The maximum amount to pull\\n    /// @return The amount pulled\\n    function _pullRedeemManagerExceedingEth(uint256 _max) internal virtual returns (uint256);\\n\\n    /// @notice Use the balance to redeem to report a withdrawal event on the redeem manager\\n    function _reportWithdrawToRedeemManager() internal virtual;\\n\\n    /// @notice Requests exits of validators after possibly rebalancing deposit and redeem balances\\n    /// @param _exitingBalance The currently exiting funds, soon to be received on the execution layer\\n    /// @param _depositToRedeemRebalancingAllowed True if rebalancing from deposit to redeem is allowed\\n    function _requestExitsBasedOnRedeemDemandAfterRebalancings(\\n        uint256 _exitingBalance,\\n        uint32[] memory _stoppedValidatorCounts,\\n        bool _depositToRedeemRebalancingAllowed,\\n        bool _slashingContainmentModeEnabled\\n    ) internal virtual;\\n\\n    /// @notice Skims the redeem balance and sends remaining funds to the deposit balance\\n    function _skimExcessBalanceToRedeem() internal virtual;\\n\\n    /// @notice Commits the deposit balance up to the allowed daily limit\\n    /// @param _period The period between current and last report\\n    function _commitBalanceToDeposit(uint256 _period) internal virtual;\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdmin_OMV1() {\\n        if (msg.sender != _getRiverAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Set the initial oracle address\\n    /// @param _oracle Address of the oracle\\n    function initOracleManagerV1(address _oracle) internal {\\n        OracleAddress.set(_oracle);\\n        emit SetOracle(_oracle);\\n    }\\n\\n    /// @notice Initializes version 1.1 of the oracle manager\\n    /// @param _epochsPerFrame The amounts of epochs in a frame\\n    /// @param _slotsPerEpoch The slots inside an epoch\\n    /// @param _secondsPerSlot The seconds inside a slot\\n    /// @param _genesisTime The genesis timestamp\\n    /// @param _epochsToAssumedFinality The number of epochs before an epoch is considered final on-chain\\n    /// @param _annualAprUpperBound The reporting upper bound\\n    /// @param _relativeLowerBound The reporting lower bound\\n    function initOracleManagerV1_1(\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint64 _epochsToAssumedFinality,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) internal {\\n        CLSpec.set(\\n            CLSpec.CLSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime,\\n                epochsToAssumedFinality: _epochsToAssumedFinality\\n            })\\n        );\\n        emit SetSpec(_epochsPerFrame, _slotsPerEpoch, _secondsPerSlot, _genesisTime, _epochsToAssumedFinality);\\n        ReportBounds.set(\\n            ReportBounds.ReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        emit SetBounds(_annualAprUpperBound, _relativeLowerBound);\\n\\n        IOracleManagerV1.StoredConsensusLayerReport memory storedReport;\\n        storedReport.epoch = uint256(LastOracleRoundId.get());\\n        storedReport.validatorsBalance = CLValidatorTotalBalance.get();\\n        storedReport.validatorsSkimmedBalance = 0;\\n        storedReport.validatorsExitedBalance = 0;\\n        storedReport.validatorsExitingBalance = 0;\\n        storedReport.validatorsCount = uint32(CLValidatorCount.get());\\n        storedReport.rebalanceDepositToRedeemMode = false;\\n        storedReport.slashingContainmentMode = false;\\n        LastConsensusLayerReport.set(storedReport);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getOracle() external view returns (address) {\\n        return OracleAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorTotalBalance() external view returns (uint256) {\\n        return LastConsensusLayerReport.get().validatorsBalance;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLValidatorCount() external view returns (uint256) {\\n        return LastConsensusLayerReport.get().validatorsCount;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getExpectedEpochId() external view returns (uint256) {\\n        CLSpec.CLSpecStruct memory cls = CLSpec.get();\\n        uint256 currentEpoch = _currentEpoch(cls);\\n        return LibUint256.max(\\n            LastConsensusLayerReport.get().epoch + cls.epochsPerFrame,\\n            currentEpoch - (currentEpoch % cls.epochsPerFrame)\\n        );\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function isValidEpoch(uint256 _epoch) external view returns (bool) {\\n        return _isValidEpoch(CLSpec.get(), _epoch);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getTime() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getLastCompletedEpochId() external view returns (uint256) {\\n        return LastConsensusLayerReport.get().epoch;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCurrentEpochId() external view returns (uint256) {\\n        return _currentEpoch(CLSpec.get());\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory) {\\n        return CLSpec.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime) {\\n        CLSpec.CLSpecStruct memory cls = CLSpec.get();\\n        uint256 currentEpoch = _currentEpoch(cls);\\n        _startEpochId = currentEpoch - (currentEpoch % cls.epochsPerFrame);\\n        _startTime = _startEpochId * cls.slotsPerEpoch * cls.secondsPerSlot;\\n        _endTime = (_startEpochId + cls.epochsPerFrame) * cls.slotsPerEpoch * cls.secondsPerSlot - 1;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256) {\\n        return _epochId - (_epochId % CLSpec.get().epochsPerFrame);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory) {\\n        return ReportBounds.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory) {\\n        return LastConsensusLayerReport.get();\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setOracle(address _oracleAddress) external onlyAdmin_OMV1 {\\n        OracleAddress.set(_oracleAddress);\\n        emit SetOracle(_oracleAddress);\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external onlyAdmin_OMV1 {\\n        CLSpec.set(_newValue);\\n        emit SetSpec(\\n            _newValue.epochsPerFrame,\\n            _newValue.slotsPerEpoch,\\n            _newValue.secondsPerSlot,\\n            _newValue.genesisTime,\\n            _newValue.epochsToAssumedFinality\\n        );\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external onlyAdmin_OMV1 {\\n        ReportBounds.set(_newValue);\\n        emit SetBounds(_newValue.annualAprUpperBound, _newValue.relativeLowerBound);\\n    }\\n\\n    /// @notice Structure holding internal variables used during reporting\\n    struct ConsensusLayerDataReportingVariables {\\n        uint256 preReportUnderlyingBalance;\\n        uint256 postReportUnderlyingBalance;\\n        uint256 lastReportExitedBalance;\\n        uint256 lastReportSkimmedBalance;\\n        uint256 exitedAmountIncrease;\\n        uint256 skimmedAmountIncrease;\\n        uint256 timeElapsedSinceLastReport;\\n        uint256 availableAmountToUpperBound;\\n        uint256 redeemManagerDemand;\\n        ConsensusLayerDataReportingTrace trace;\\n    }\\n\\n    /// @inheritdoc IOracleManagerV1\\n    function setConsensusLayerData(IOracleManagerV1.ConsensusLayerReport calldata _report) external {\\n        // only the oracle is allowed to call this endpoint\\n        if (msg.sender != OracleAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        CLSpec.CLSpecStruct memory cls = CLSpec.get();\\n\\n        // we start by verifying that the reported epoch is valid based on the consensus layer spec\\n        if (!_isValidEpoch(cls, _report.epoch)) {\\n            revert InvalidEpoch(_report.epoch);\\n        }\\n\\n        ConsensusLayerDataReportingVariables memory vars;\\n\\n        {\\n            IOracleManagerV1.StoredConsensusLayerReport storage lastStoredReport = LastConsensusLayerReport.get();\\n\\n            vars.lastReportExitedBalance = lastStoredReport.validatorsExitedBalance;\\n\\n            // we ensure that the reported total exited balance is not decreasing\\n            if (_report.validatorsExitedBalance < vars.lastReportExitedBalance) {\\n                revert InvalidDecreasingValidatorsExitedBalance(\\n                    vars.lastReportExitedBalance, _report.validatorsExitedBalance\\n                );\\n            }\\n\\n            // we compute the exited amount increase by taking the delta between reports\\n            vars.exitedAmountIncrease = _report.validatorsExitedBalance - vars.lastReportExitedBalance;\\n\\n            vars.lastReportSkimmedBalance = lastStoredReport.validatorsSkimmedBalance;\\n\\n            // we ensure that the reported total skimmed balance is not decreasing\\n            if (_report.validatorsSkimmedBalance < vars.lastReportSkimmedBalance) {\\n                revert InvalidDecreasingValidatorsSkimmedBalance(\\n                    vars.lastReportSkimmedBalance, _report.validatorsSkimmedBalance\\n                );\\n            }\\n\\n            // we ensure that the reported validator count is not decreasing\\n            if (\\n                _report.validatorsCount > DepositedValidatorCount.get()\\n                    || _report.validatorsCount < lastStoredReport.validatorsCount\\n            ) {\\n                revert InvalidValidatorCountReport(\\n                    _report.validatorsCount, DepositedValidatorCount.get(), lastStoredReport.validatorsCount\\n                );\\n            }\\n\\n            // we compute the new skimmed amount by taking the delta between reports\\n            vars.skimmedAmountIncrease = _report.validatorsSkimmedBalance - vars.lastReportSkimmedBalance;\\n\\n            vars.timeElapsedSinceLastReport = _timeBetweenEpochs(cls, lastStoredReport.epoch, _report.epoch);\\n        }\\n\\n        // we retrieve the current total underlying balance before any reporting data is applied to the system\\n        vars.preReportUnderlyingBalance = _assetBalance();\\n\\n        // if we have new exited / skimmed eth available, we pull funds from the consensus layer recipient\\n        if (vars.exitedAmountIncrease + vars.skimmedAmountIncrease > 0) {\\n            // this method pulls and updates ethToDeposit / ethToRedeem accordingly\\n            _pullCLFunds(vars.skimmedAmountIncrease, vars.exitedAmountIncrease);\\n        }\\n\\n        {\\n            // we update the system parameters, this will have an impact on how the total underlying balance is computed\\n            IOracleManagerV1.StoredConsensusLayerReport memory storedReport;\\n\\n            storedReport.epoch = _report.epoch;\\n            storedReport.validatorsBalance = _report.validatorsBalance;\\n            storedReport.validatorsSkimmedBalance = _report.validatorsSkimmedBalance;\\n            storedReport.validatorsExitedBalance = _report.validatorsExitedBalance;\\n            storedReport.validatorsExitingBalance = _report.validatorsExitingBalance;\\n            storedReport.validatorsCount = _report.validatorsCount;\\n            storedReport.rebalanceDepositToRedeemMode = _report.rebalanceDepositToRedeemMode;\\n            storedReport.slashingContainmentMode = _report.slashingContainmentMode;\\n            LastConsensusLayerReport.set(storedReport);\\n        }\\n\\n        ReportBounds.ReportBoundsStruct memory rb = ReportBounds.get();\\n\\n        // we compute the maximum allowed increase in balance based on the pre report value\\n        uint256 maxIncrease = _maxIncrease(rb, vars.preReportUnderlyingBalance, vars.timeElapsedSinceLastReport);\\n\\n        // we retrieve the new total underlying balance after system parameters are changed\\n        vars.postReportUnderlyingBalance = _assetBalance();\\n\\n        // we can now compute the earned rewards from the consensus layer balances\\n        // in order to properly account for the balance increase, we compare the sums of current balances, skimmed balance and exited balances\\n        // we also synthetically increase the current balance by 32 eth per new activated validator, this way we have no discrepency due\\n        // to currently activating funds that were not yet accounted in the consensus layer balances\\n        if (vars.postReportUnderlyingBalance >= vars.preReportUnderlyingBalance) {\\n            // if this happens, we revert and the reporting process is cancelled\\n            if (vars.postReportUnderlyingBalance > vars.preReportUnderlyingBalance + maxIncrease) {\\n                revert TotalValidatorBalanceIncreaseOutOfBound(\\n                    vars.preReportUnderlyingBalance,\\n                    vars.postReportUnderlyingBalance,\\n                    vars.timeElapsedSinceLastReport,\\n                    rb.annualAprUpperBound\\n                );\\n            }\\n\\n            // we update the rewards based on the balance delta\\n            vars.trace.rewards = vars.postReportUnderlyingBalance - vars.preReportUnderlyingBalance;\\n\\n            // we update the available amount to upper bound (the amount of eth we can still pull and stay below the upper reporting bound)\\n            vars.availableAmountToUpperBound = maxIncrease - vars.trace.rewards;\\n        } else {\\n            // otherwise if the balance has decreased, we verify that we are not exceeding the lower reporting bound\\n\\n            // we compute the maximum allowed decrease in balance\\n            uint256 maxDecrease = _maxDecrease(rb, vars.preReportUnderlyingBalance);\\n\\n            // we verify that the bound is not crossed\\n            if (\\n                vars.postReportUnderlyingBalance\\n                    < vars.preReportUnderlyingBalance - LibUint256.min(maxDecrease, vars.preReportUnderlyingBalance)\\n            ) {\\n                revert TotalValidatorBalanceDecreaseOutOfBound(\\n                    vars.preReportUnderlyingBalance,\\n                    vars.postReportUnderlyingBalance,\\n                    vars.timeElapsedSinceLastReport,\\n                    rb.relativeLowerBound\\n                );\\n            }\\n\\n            // we update the available amount to upper bound to be equal to the maximum allowed increase plus the negative delta due to the loss\\n            vars.availableAmountToUpperBound =\\n                maxIncrease + (vars.preReportUnderlyingBalance - vars.postReportUnderlyingBalance);\\n        }\\n\\n        // if we have available amount to upper bound after the reporting values are applied\\n        if (vars.availableAmountToUpperBound > 0) {\\n            // we pull the funds from the execution layer fee recipient\\n            vars.trace.pulledELFees = _pullELFees(vars.availableAmountToUpperBound);\\n            // we update the rewards\\n            vars.trace.rewards += vars.trace.pulledELFees;\\n            // we update the available amount accordingly\\n            vars.availableAmountToUpperBound -= vars.trace.pulledELFees;\\n        }\\n\\n        // if we have available amount to upper bound after the execution layer fees are pulled\\n        if (vars.availableAmountToUpperBound > 0) {\\n            // we pull the funds from the exceeding eth buffer of the redeem manager\\n            vars.trace.pulledRedeemManagerExceedingEthBuffer =\\n                _pullRedeemManagerExceedingEth(vars.availableAmountToUpperBound);\\n            // we update the available amount accordingly\\n            vars.availableAmountToUpperBound -= vars.trace.pulledRedeemManagerExceedingEthBuffer;\\n        }\\n\\n        // if we have available amount to upper bound after pulling the exceeding eth buffer, we attempt to pull coverage funds\\n        if (vars.availableAmountToUpperBound > 0) {\\n            // we pull the funds from the coverage recipient\\n            vars.trace.pulledCoverageFunds = _pullCoverageFunds(vars.availableAmountToUpperBound);\\n            // we do not update the rewards as coverage is not considered rewards\\n            // we do not update the available amount as there are no more pulling actions to perform afterwards\\n        }\\n\\n        // if our rewards are not null, we dispatch the fee to the collector\\n        if (vars.trace.rewards > 0) {\\n            _onEarnings(vars.trace.rewards);\\n        }\\n\\n        _requestExitsBasedOnRedeemDemandAfterRebalancings(\\n            _report.validatorsExitingBalance,\\n            _report.stoppedValidatorCountPerOperator,\\n            _report.rebalanceDepositToRedeemMode,\\n            _report.slashingContainmentMode\\n        );\\n\\n        // we use the updated balanceToRedeem value to report a withdraw event on the redeem manager\\n        _reportWithdrawToRedeemManager();\\n\\n        // if funds are left in the balance to redeem, we move them to the deposit balance\\n        _skimExcessBalanceToRedeem();\\n\\n        // we update the committable amount based on daily maximum allowed\\n        _commitBalanceToDeposit(vars.timeElapsedSinceLastReport);\\n\\n        // we emit a summary event with all the reporting details\\n        emit ProcessedConsensusLayerReport(_report, vars.trace);\\n    }\\n\\n    /// @notice Retrieve the current epoch based on the current timestamp\\n    /// @param _cls The consensus layer spec struct\\n    /// @return The current epoch\\n    function _currentEpoch(CLSpec.CLSpecStruct memory _cls) internal view returns (uint256) {\\n        return ((block.timestamp - _cls.genesisTime) / _cls.secondsPerSlot) / _cls.slotsPerEpoch;\\n    }\\n\\n    /// @notice Verifies if the given epoch is valid\\n    /// @param _cls The consensus layer spec struct\\n    /// @param _epoch The epoch to verify\\n    /// @return True if valid\\n    function _isValidEpoch(CLSpec.CLSpecStruct memory _cls, uint256 _epoch) internal view returns (bool) {\\n        return (\\n            _currentEpoch(_cls) >= _epoch + _cls.epochsToAssumedFinality\\n                && _epoch > LastConsensusLayerReport.get().epoch && _epoch % _cls.epochsPerFrame == 0\\n        );\\n    }\\n\\n    /// @notice Retrieves the maximum increase in balance based on current total underlying supply and period since last report\\n    /// @param _rb The report bounds struct\\n    /// @param _prevTotalEth The total underlying supply during reporting\\n    /// @param _timeElapsed The time since last report\\n    /// @return The maximum allowed increase in balance\\n    function _maxIncrease(ReportBounds.ReportBoundsStruct memory _rb, uint256 _prevTotalEth, uint256 _timeElapsed)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_prevTotalEth * _rb.annualAprUpperBound * _timeElapsed) / (LibBasisPoints.BASIS_POINTS_MAX * ONE_YEAR);\\n    }\\n\\n    /// @notice Retrieves the maximum decrease in balance based on current total underlying supply\\n    /// @param _rb The report bounds struct\\n    /// @param _prevTotalEth The total underlying supply during reporting\\n    /// @return The maximum allowed decrease in balance\\n    function _maxDecrease(ReportBounds.ReportBoundsStruct memory _rb, uint256 _prevTotalEth)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_prevTotalEth * _rb.relativeLowerBound) / LibBasisPoints.BASIS_POINTS_MAX;\\n    }\\n\\n    /// @notice Retrieve the number of seconds between two epochs\\n    /// @param _cls The consensus layer spec struct\\n    /// @param _epochPast The starting epoch\\n    /// @param _epochNow The current epoch\\n    /// @return The number of seconds between the two epochs\\n    function _timeBetweenEpochs(CLSpec.CLSpecStruct memory _cls, uint256 _epochPast, uint256 _epochNow)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (_epochNow - _epochPast) * (_cls.secondsPerSlot * _cls.slotsPerEpoch);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/Initializable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./state/shared/Version.sol\\\";\\n\\n/// @title Initializable\\n/// @author Kiln\\n/// @notice This contract ensures that initializers are called only once per version\\ncontract Initializable {\\n    /// @notice Disable initialization on implementations\\n    constructor() {\\n        Version.set(type(uint256).max);\\n        emit Initialize(type(uint256).max, msg.data);\\n    }\\n\\n    /// @notice An error occured during the initialization\\n    /// @param version The version that was attempting to be initialized\\n    /// @param expectedVersion The version that was expected\\n    error InvalidInitialization(uint256 version, uint256 expectedVersion);\\n\\n    /// @notice Emitted when the contract is properly initialized\\n    /// @param version New version of the contracts\\n    /// @param cdata Complete calldata that was used during the initialization\\n    event Initialize(uint256 version, bytes cdata);\\n\\n    /// @notice Use this modifier on initializers along with a hard-coded version number\\n    /// @param _version Version to initialize\\n    modifier init(uint256 _version) {\\n        if (_version != Version.get()) {\\n            revert InvalidInitialization(_version, Version.get());\\n        }\\n        Version.set(_version + 1); // prevents reentrency on the called method\\n        _;\\n        emit Initialize(_version, msg.data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibAllowlistMasks.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Lib Allowlist Masks\\n/// @notice Holds all the mask values\\nlibrary LibAllowlistMasks {\\n    /// @notice Mask used for denied accounts\\n    uint256 internal constant DENY_MASK = 0x1 << 255;\\n    /// @notice The mask for the deposit right\\n    uint256 internal constant DEPOSIT_MASK = 0x1;\\n    /// @notice The mask for the donation right\\n    uint256 internal constant DONATE_MASK = 0x1 << 1;\\n    /// @notice The mask for the redeem right\\n    uint256 internal constant REDEEM_MASK = 0x1 << 2;\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/AllowlistAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allowlist Address Storage\\n/// @notice Utility to manage the Allowlist Address in storage\\nlibrary AllowlistAddress {\\n    /// @notice Storage slot of the Allowlist Address\\n    bytes32 internal constant ALLOWLIST_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlistAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allowlist Address\\n    /// @return The Allowlist Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWLIST_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allowlist Address\\n    /// @param _newValue New Allowlist Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWLIST_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/RedeemManagerAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Redeem Manager Address Storage\\n/// @notice Utility to manage the Redeem Manager Address in storage\\nlibrary RedeemManagerAddress {\\n    /// @notice Storage slot of the Redeem Manager Address\\n    bytes32 internal constant REDEEM_MANAGER_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.redeemManagerAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Redeem Manager Address\\n    /// @return The Redeem Manager Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(REDEEM_MANAGER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Redeem Manager Address\\n    /// @param _newValue New Redeem Manager Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(REDEEM_MANAGER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/OperatorsRegistryAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Registry Address Storage\\n/// @notice Utility to manage the Operators Registry Address in storage\\nlibrary OperatorsRegistryAddress {\\n    /// @notice Storage slot of the Operators Registry Address\\n    bytes32 internal constant OPERATORS_REGISTRY_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.operatorsRegistryAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Operators Registry Address\\n    /// @return The Operators Registry Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Operators Registry Address\\n    /// @param _newValue New Operators Registry Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(OPERATORS_REGISTRY_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/CollectorAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Collector Address Storage\\n/// @notice Utility to manage the Collector Address in storage\\nlibrary CollectorAddress {\\n    /// @notice Storage slot of the Collector Address\\n    bytes32 internal constant COLLECTOR_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.collectorAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Collector Address\\n    /// @return The Collector Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COLLECTOR_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Collector Address\\n    /// @param _newValue New Collector Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COLLECTOR_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/ELFeeRecipientAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient Address Storage\\n/// @notice Utility to manage the Execution Layer Fee Recipient Address in storage\\nlibrary ELFeeRecipientAddress {\\n    /// @notice Storage slot of the Execution Layer Fee Recipient Address\\n    bytes32 internal constant EL_FEE_RECIPIENT_ADDRESS =\\n        bytes32(uint256(keccak256(\\\"river.state.elFeeRecipientAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Execution Layer Fee Recipient Address\\n    /// @return The Execution Layer Fee Recipient Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(EL_FEE_RECIPIENT_ADDRESS);\\n    }\\n\\n    /// @notice Sets the Execution Layer Fee Recipient Address\\n    /// @param _newValue New Execution Layer Fee Recipient Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(EL_FEE_RECIPIENT_ADDRESS, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/CoverageFundAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Coverage Fund Address Storage\\n/// @notice Utility to manage the Coverage Fund Address in storage\\nlibrary CoverageFundAddress {\\n    /// @notice Storage slot of the Coverage Fund Address\\n    bytes32 internal constant COVERAGE_FUND_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.coverageFundAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Coverage Fund Address\\n    /// @return The Coverage Fund Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(COVERAGE_FUND_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Coverage Fund Address\\n    /// @param _newValue New Coverage Fund Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(COVERAGE_FUND_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/BalanceToRedeem.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary BalanceToRedeem {\\n    bytes32 internal constant BALANCE_TO_REDEEM_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceToRedeem\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_TO_REDEEM_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_TO_REDEEM_SLOT, newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/GlobalFee.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Global Fee Storage\\n/// @notice Utility to manage the Global Fee in storage\\nlibrary GlobalFee {\\n    /// @notice Storage slot of the Global Fee\\n    bytes32 internal constant GLOBAL_FEE_SLOT = bytes32(uint256(keccak256(\\\"river.state.globalFee\\\")) - 1);\\n\\n    /// @notice Retrieve the Global Fee\\n    /// @return The Global Fee\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(GLOBAL_FEE_SLOT);\\n    }\\n\\n    /// @notice Sets the Global Fee\\n    /// @param _newValue New Global Fee\\n    function set(uint256 _newValue) internal {\\n        LibSanitize._validFee(_newValue);\\n        LibUnstructuredStorage.setStorageUint256(GLOBAL_FEE_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/MetadataURI.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Metadata URI Storage\\n/// @notice Utility to manage the Metadata in storage\\nlibrary MetadataURI {\\n    /// @notice Storage slot of the Metadata URI\\n    bytes32 internal constant METADATA_URI_SLOT = bytes32(uint256(keccak256(\\\"river.state.metadataUri\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The metadata value\\n        string value;\\n    }\\n\\n    /// @notice Retrieve the metadata URI\\n    /// @return The metadata URI string\\n    function get() internal view returns (string memory) {\\n        bytes32 slot = METADATA_URI_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the metadata URI value\\n    /// @param _newValue The new metadata URI value\\n    function set(string memory _newValue) internal {\\n        bytes32 slot = METADATA_URI_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/LastConsensusLayerReport.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../interfaces/components/IOracleManager.1.sol\\\";\\n\\n/// @title Last Consensus Layer Report Storage\\n/// @notice Utility to manage the Last Consensus Layer Report in storage\\nlibrary LastConsensusLayerReport {\\n    /// @notice Storage slot of the Last Consensus Layer Report\\n    bytes32 internal constant LAST_CONSENSUS_LAYER_REPORT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastConsensusLayerReport\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        IOracleManagerV1.StoredConsensusLayerReport value;\\n    }\\n\\n    /// @notice Retrieve the Last Consensus Layer Report from storage\\n    /// @return The Last Consensus Layer Report\\n    function get() internal view returns (IOracleManagerV1.StoredConsensusLayerReport storage) {\\n        bytes32 slot = LAST_CONSENSUS_LAYER_REPORT_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Last Consensus Layer Report value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(IOracleManagerV1.StoredConsensusLayerReport memory _newValue) internal {\\n        bytes32 slot = LAST_CONSENSUS_LAYER_REPORT_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/operatorsRegistry/Operators.2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\nlibrary OperatorsV2 {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.v2.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= RequestedExits\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint32 keys;\\n        /// @custom attribute The block at which the last edit happened in the operator details\\n        uint64 latestKeysEditBlockNumber;\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute Staking limit of the operator\\n        uint32 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The original index of the operator\\n        uint32 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint32 picked;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory for the exit selection\\n    struct CachedExitableOperator {\\n        /// @custom:attribute The count of funded validators\\n        uint32 funded;\\n        /// @custom:attribute The count of exit requests made to this operator\\n        uint32 requestedExits;\\n        /// @custom:attribute The original index of the operator\\n        uint32 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint32 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operators in storage\\n    /// @return The Operator structure array\\n    function getAll() internal view returns (Operator[] storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve the stopped validator count for an operator by its index\\n    /// @param stoppedValidatorCounts The storage pointer to the raw array containing the stopped validator counts\\n    /// @param index The index of the operator to lookup\\n    /// @return The amount of stopped validators for the given operator index\\n    function _getStoppedValidatorCountAtIndex(uint32[] storage stoppedValidatorCounts, uint256 index)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        if (index + 1 >= stoppedValidatorCounts.length) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[index + 1];\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the fundable operator count, also returned by the method\\n    /// @return The list of active and fundable operators\\n    /// @return The count of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 fundableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n        CachedOperator[] memory fundableOperators = new CachedOperator[](operatorCount);\\n\\n        uint32[] storage stoppedValidatorCounts = getStoppedValidators();\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (\\n                _hasFundableKeys(r.value[idx])\\n                    && _getStoppedValidatorCountAtIndex(stoppedValidatorCounts, idx) >= r.value[idx].requestedExits\\n            ) {\\n                Operator storage op = r.value[idx];\\n                fundableOperators[fundableCount] = CachedOperator({\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++fundableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return (fundableOperators, fundableCount);\\n    }\\n\\n    /// @notice Retrieve all the active and exitable operators\\n    /// @dev This method will return a memory array of length equal to the number of operator, but only\\n    /// @dev populated up to the exitable operator count, also returned by the method\\n    /// @return The list of active and exitable operators\\n    /// @return The count of active and exitable operators\\n    function getAllExitable() internal view returns (CachedExitableOperator[] memory, uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 exitableCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        CachedExitableOperator[] memory exitableOperators = new CachedExitableOperator[](operatorCount);\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasExitableKeys(r.value[idx])) {\\n                Operator storage op = r.value[idx];\\n                exitableOperators[exitableCount] = CachedExitableOperator({\\n                    funded: op.funded,\\n                    requestedExits: op.requestedExits,\\n                    index: uint32(idx),\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++exitableCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return (exitableOperators, exitableCount);\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint32 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = uint64(block.number);\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n\\n    /// @notice Checks if an operator is active and has exitable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and exitable\\n    function _hasExitableKeys(OperatorsV2.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.funded > _operator.requestedExits);\\n    }\\n\\n    /// @notice Storage slot of the Stopped Validators\\n    bytes32 internal constant STOPPED_VALIDATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.stoppedValidators\\\")) - 1);\\n\\n    struct SlotStoppedValidators {\\n        uint32[] value;\\n    }\\n\\n    /// @notice Retrieve the storage pointer of the Stopped Validators array\\n    /// @return The Stopped Validators storage pointer\\n    function getStoppedValidators() internal view returns (uint32[] storage) {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Sets the entire stopped validators array\\n    /// @param value The new stopped validators array\\n    function setRawStoppedValidators(uint32[] memory value) internal {\\n        bytes32 slot = STOPPED_VALIDATORS_SLOT;\\n\\n        SlotStoppedValidators storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = value;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/DailyCommittableLimits.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Daily Committable Limits storage\\n/// @notice Utility to manage the Daily Committable Limits in storage\\nlibrary DailyCommittableLimits {\\n    /// @notice Storage slot of the Daily Committable Limits storage\\n    bytes32 internal constant DAILY_COMMITTABLE_LIMITS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.dailyCommittableLimits\\\")) - 1);\\n\\n    /// @notice The daily committable limits structure\\n    struct DailyCommittableLimitsStruct {\\n        uint128 minDailyNetCommittableAmount;\\n        uint128 maxDailyRelativeCommittableAmount;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        DailyCommittableLimitsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Daily Committable Limits from storage\\n    /// @return The Daily Committable Limits\\n    function get() internal view returns (DailyCommittableLimitsStruct memory) {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Daily Committable Limits value in storage\\n    /// @param _newValue The new value to set in storage\\n    function set(DailyCommittableLimitsStruct memory _newValue) internal {\\n        bytes32 slot = DAILY_COMMITTABLE_LIMITS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/components/IConsensusLayerDepositManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensys Layer Deposit Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the interactions with the official deposit contract\\ninterface IConsensusLayerDepositManagerV1 {\\n    /// @notice The stored deposit contract address changed\\n    /// @param depositContract Address of the deposit contract\\n    event SetDepositContractAddress(address indexed depositContract);\\n\\n    /// @notice The stored withdrawal credentials changed\\n    /// @param withdrawalCredentials The withdrawal credentials to use for deposits\\n    event SetWithdrawalCredentials(bytes32 withdrawalCredentials);\\n\\n    /// @notice Emitted when the deposited validator count is updated\\n    /// @param oldDepositedValidatorCount The old deposited validator count value\\n    /// @param newDepositedValidatorCount The new deposited validator count value\\n    event SetDepositedValidatorCount(uint256 oldDepositedValidatorCount, uint256 newDepositedValidatorCount);\\n\\n    /// @notice Not enough funds to deposit one validator\\n    error NotEnoughFunds();\\n\\n    /// @notice The length of the BLS Public key is invalid during deposit\\n    error InconsistentPublicKeys();\\n\\n    /// @notice The length of the BLS Signature is invalid during deposit\\n    error InconsistentSignatures();\\n\\n    /// @notice The internal key retrieval returned no keys\\n    error NoAvailableValidatorKeys();\\n\\n    /// @notice The received count of public keys to deposit is invalid\\n    error InvalidPublicKeyCount();\\n\\n    /// @notice The received count of signatures to deposit is invalid\\n    error InvalidSignatureCount();\\n\\n    /// @notice The withdrawal credentials value is null\\n    error InvalidWithdrawalCredentials();\\n\\n    /// @notice An error occured during the deposit\\n    error ErrorOnDeposit();\\n\\n    /// @notice Returns the amount of ETH not yet committed for deposit\\n    /// @return The amount of ETH not yet committed for deposit\\n    function getBalanceToDeposit() external view returns (uint256);\\n\\n    /// @notice Returns the amount of ETH committed for deposit\\n    /// @return The amount of ETH committed for deposit\\n    function getCommittedBalance() external view returns (uint256);\\n\\n    /// @notice Retrieve the withdrawal credentials\\n    /// @return The withdrawal credentials\\n    function getWithdrawalCredentials() external view returns (bytes32);\\n\\n    /// @notice Get the deposited validator count (the count of deposits made by the contract)\\n    /// @return The deposited validator count\\n    function getDepositedValidatorCount() external view returns (uint256);\\n\\n    /// @notice Deposits current balance to the Consensus Layer by batches of 32 ETH\\n    /// @param _maxCount The maximum amount of validator keys to fund\\n    function depositToConsensusLayer(uint256 _maxCount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/components/IOracleManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../state/river/CLSpec.sol\\\";\\nimport \\\"../../state/river/ReportBounds.sol\\\";\\n\\n/// @title Oracle Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inputs provided by the oracle\\ninterface IOracleManagerV1 {\\n    /// @notice The stored oracle address changed\\n    /// @param oracleAddress The new oracle address\\n    event SetOracle(address indexed oracleAddress);\\n\\n    /// @notice The consensus layer data provided by the oracle has been updated\\n    /// @param validatorCount The new count of validators running on the consensus layer\\n    /// @param validatorTotalBalance The new total balance sum of all validators\\n    /// @param roundId Round identifier\\n    event ConsensusLayerDataUpdate(uint256 validatorCount, uint256 validatorTotalBalance, bytes32 roundId);\\n\\n    /// @notice The Consensus Layer Spec is changed\\n    /// @param epochsPerFrame The number of epochs inside a frame\\n    /// @param slotsPerEpoch The number of slots inside an epoch\\n    /// @param secondsPerSlot The number of seconds inside a slot\\n    /// @param genesisTime The genesis timestamp\\n    /// @param epochsToAssumedFinality The number of epochs before an epoch is considered final\\n    event SetSpec(\\n        uint64 epochsPerFrame,\\n        uint64 slotsPerEpoch,\\n        uint64 secondsPerSlot,\\n        uint64 genesisTime,\\n        uint64 epochsToAssumedFinality\\n    );\\n\\n    /// @notice The Report Bounds are changed\\n    /// @param annualAprUpperBound The reporting upper bound\\n    /// @param relativeLowerBound The reporting lower bound\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice The provided report has beend processed\\n    /// @param report The report that was provided\\n    /// @param trace The trace structure providing more insights on internals\\n    event ProcessedConsensusLayerReport(\\n        IOracleManagerV1.ConsensusLayerReport report, ConsensusLayerDataReportingTrace trace\\n    );\\n\\n    /// @notice The reported validator count is invalid\\n    /// @param providedValidatorCount The received validator count value\\n    /// @param depositedValidatorCount The number of deposits performed by the system\\n    /// @param lastReportedValidatorCount The last reported validator count\\n    error InvalidValidatorCountReport(\\n        uint256 providedValidatorCount, uint256 depositedValidatorCount, uint256 lastReportedValidatorCount\\n    );\\n\\n    /// @notice Thrown when an invalid epoch was reported\\n    /// @param epoch Invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice The balance increase is higher than the maximum allowed by the upper bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param annualAprUpperBound The upper bound value that was used\\n    error TotalValidatorBalanceIncreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 annualAprUpperBound\\n    );\\n\\n    /// @notice The balance decrease is higher than the maximum allowed by the lower bound\\n    /// @param prevTotalEthIncludingExited The previous total balance, including all exited balance\\n    /// @param postTotalEthIncludingExited The post-report total balance, including all exited balance\\n    /// @param timeElapsed The time in seconds since last report\\n    /// @param relativeLowerBound The lower bound value that was used\\n    error TotalValidatorBalanceDecreaseOutOfBound(\\n        uint256 prevTotalEthIncludingExited,\\n        uint256 postTotalEthIncludingExited,\\n        uint256 timeElapsed,\\n        uint256 relativeLowerBound\\n    );\\n\\n    /// @notice The total exited balance decreased\\n    /// @param currentValidatorsExitedBalance The current exited balance\\n    /// @param newValidatorsExitedBalance The new exited balance\\n    error InvalidDecreasingValidatorsExitedBalance(\\n        uint256 currentValidatorsExitedBalance, uint256 newValidatorsExitedBalance\\n    );\\n\\n    /// @notice The total skimmed balance decreased\\n    /// @param currentValidatorsSkimmedBalance The current exited balance\\n    /// @param newValidatorsSkimmedBalance The new exited balance\\n    error InvalidDecreasingValidatorsSkimmedBalance(\\n        uint256 currentValidatorsSkimmedBalance, uint256 newValidatorsSkimmedBalance\\n    );\\n\\n    /// @notice Trace structure emitted via logs during reporting\\n    struct ConsensusLayerDataReportingTrace {\\n        uint256 rewards;\\n        uint256 pulledELFees;\\n        uint256 pulledRedeemManagerExceedingEthBuffer;\\n        uint256 pulledCoverageFunds;\\n    }\\n\\n    /// @notice The format of the oracle report\\n    struct ConsensusLayerReport {\\n        // this is the epoch at which the report was performed\\n        // data should be fetched up to the state of this epoch by the oracles\\n        uint256 epoch;\\n        // the sum of all the validator balances on the consensus layer\\n        // when a validator enters the exit queue, the validator is considered stopped, its balance is accounted in both validatorsExitingBalance and validatorsBalance\\n        // when a validator leaves the exit queue and the funds are sweeped onto the execution layer, the balance is only accounted in validatorsExitedBalance and not in validatorsBalance\\n        // this value can decrease between reports\\n        uint256 validatorsBalance;\\n        // the sum of all the skimmings performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered skimming if\\n        // - the epoch at which it happened is < validator.withdrawableEpoch\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be above 32 eth as skimming\\n        // this value cannot decrease over reports\\n        uint256 validatorsSkimmedBalance;\\n        // the sum of all the exits performed on the validators\\n        // these values can be found in the execution layer block bodies under the withdrawals field\\n        // a withdrawal is considered exit if\\n        // - the epoch at which it happened is >= validator.withdrawableEpoch and in that case we only account for what would be <= 32 eth as exit\\n        // this value cannot decrease over reports\\n        uint256 validatorsExitedBalance;\\n        // the sum of all the exiting balance, which is all the validators on their way to get sweeped and exited\\n        // this includes voluntary exits and slashings\\n        // this value can decrease between reports\\n        uint256 validatorsExitingBalance;\\n        // the count of activated validators\\n        // even validators that are exited are still accounted\\n        // this value cannot decrease over reports\\n        uint32 validatorsCount;\\n        // an array containing the count of stopped validators per operator\\n        // the first element of the array is the sum of all stopped validators\\n        // then index 1 would be operator 0\\n        // these values cannot decrease over reports\\n        uint32[] stoppedValidatorCountPerOperator;\\n        // flag enabled by the oracles when the buffer rebalancing is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // when active, the eth in the deposit buffer can be used to pay for exits in the redeem manager\\n        bool rebalanceDepositToRedeemMode;\\n        // flag enabled by the oracles when the slashing containment is activated\\n        // the activation logic is written in the oracle specification and all oracle members must agree on the activation\\n        // This flag is activated when a pre-defined threshold of slashed validators in our set of validators is reached\\n        // This flag is deactivated when a bottom threshold is met, this means that when we reach the upper threshold and activate the flag, we will deactivate it when we reach the bottom threshold and not before\\n        // when active, no more validator exits can be requested by the protocol\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice The format of the oracle report in storage\\n    /// @notice These fields have the exact same function as the ones in ConsensusLayerReport, but this struct is optimized for storage\\n    struct StoredConsensusLayerReport {\\n        uint256 epoch;\\n        uint256 validatorsBalance;\\n        uint256 validatorsSkimmedBalance;\\n        uint256 validatorsExitedBalance;\\n        uint256 validatorsExitingBalance;\\n        uint32 validatorsCount;\\n        bool rebalanceDepositToRedeemMode;\\n        bool slashingContainmentMode;\\n    }\\n\\n    /// @notice Get oracle address\\n    /// @return The oracle address\\n    function getOracle() external view returns (address);\\n\\n    /// @notice Get CL validator total balance\\n    /// @return The CL Validator total balance\\n    function getCLValidatorTotalBalance() external view returns (uint256);\\n\\n    /// @notice Get CL validator count (the amount of validator reported by the oracles)\\n    /// @return The CL validator count\\n    function getCLValidatorCount() external view returns (uint256);\\n\\n    /// @notice Verifies if the provided epoch is valid\\n    /// @param epoch The epoch to lookup\\n    /// @return True if valid\\n    function isValidEpoch(uint256 epoch) external view returns (bool);\\n\\n    /// @notice Retrieve the block timestamp\\n    /// @return The current timestamp from the EVM context\\n    function getTime() external view returns (uint256);\\n\\n    /// @notice Retrieve expected epoch id\\n    /// @return The current expected epoch id\\n    function getExpectedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the last completed epoch id\\n    /// @return The last completed epoch id\\n    function getLastCompletedEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current epoch id based on block timestamp\\n    /// @return The current epoch id\\n    function getCurrentEpochId() external view returns (uint256);\\n\\n    /// @notice Retrieve the current cl spec\\n    /// @return The Consensus Layer Specification\\n    function getCLSpec() external view returns (CLSpec.CLSpecStruct memory);\\n\\n    /// @notice Retrieve the current frame details\\n    /// @return _startEpochId The epoch at the beginning of the frame\\n    /// @return _startTime The timestamp of the beginning of the frame in seconds\\n    /// @return _endTime The timestamp of the end of the frame in seconds\\n    function getCurrentFrame() external view returns (uint256 _startEpochId, uint256 _startTime, uint256 _endTime);\\n\\n    /// @notice Retrieve the first epoch id of the frame of the provided epoch id\\n    /// @param _epochId Epoch id used to get the frame\\n    /// @return The first epoch id of the frame containing the given epoch id\\n    function getFrameFirstEpochId(uint256 _epochId) external view returns (uint256);\\n\\n    /// @notice Retrieve the report bounds\\n    /// @return The report bounds\\n    function getReportBounds() external view returns (ReportBounds.ReportBoundsStruct memory);\\n\\n    /// @notice Retrieve the last consensus layer report\\n    /// @return The stored consensus layer report\\n    function getLastConsensusLayerReport() external view returns (IOracleManagerV1.StoredConsensusLayerReport memory);\\n\\n    /// @notice Set the oracle address\\n    /// @param _oracleAddress Address of the oracle\\n    function setOracle(address _oracleAddress) external;\\n\\n    /// @notice Set the consensus layer spec\\n    /// @param _newValue The new consensus layer spec value\\n    function setCLSpec(CLSpec.CLSpecStruct calldata _newValue) external;\\n\\n    /// @notice Set the report bounds\\n    /// @param _newValue The new report bounds value\\n    function setReportBounds(ReportBounds.ReportBoundsStruct calldata _newValue) external;\\n\\n    /// @notice Performs all the reporting logics\\n    /// @param _report The consensus layer report structure\\n    function setConsensusLayerData(ConsensusLayerReport calldata _report) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/components/ISharesManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Shares Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the shares of the depositor and the ERC20 interface\\ninterface ISharesManagerV1 is IERC20 {\\n    /// @notice Emitted when the total supply is changed\\n    event SetTotalSupply(uint256 totalSupply);\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value in shares\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Retrieve the token name\\n    /// @return The token name\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieve the token symbol\\n    /// @return The token symbol\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieve the decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieve the total token supply\\n    /// @return The total supply in shares\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the total underlying asset supply\\n    /// @return The total underlying asset supply\\n    function totalUnderlyingSupply() external view returns (uint256);\\n\\n    /// @notice Retrieve the balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The balance of the account in shares\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance of an account\\n    /// @param _owner Address to be checked\\n    /// @return The underlying balance of the account\\n    function balanceOfUnderlying(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieve the underlying asset balance from an amount of shares\\n    /// @param _shares Amount of shares to convert\\n    /// @return The underlying asset balance represented by the shares\\n    function underlyingBalanceFromShares(uint256 _shares) external view returns (uint256);\\n\\n    /// @notice Retrieve the shares count from an underlying asset amount\\n    /// @param _underlyingAssetAmount Amount of underlying asset to convert\\n    /// @return The amount of shares worth the underlying asset amopunt\\n    function sharesFromUnderlyingBalance(uint256 _underlyingAssetAmount) external view returns (uint256);\\n\\n    /// @notice Retrieve the allowance value for a spender\\n    /// @param _owner Address that issued the allowance\\n    /// @param _spender Address that received the allowance\\n    /// @return The allowance in shares for a given spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Performs a transfer from the message sender to the provided account\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Performs a transfer between two recipients\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount of shares to be sent\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves an account for future spendings\\n    /// @dev An approved account can use transferFrom to transfer funds on behalf of the token owner\\n    /// @param _spender Address that is allowed to spend the tokens\\n    /// @param _value The allowed amount in shares, will override previous value\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount of shares to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount of shares to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/components/IUserDepositManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title User Deposit Manager (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the inbound transfers cases or the explicit submissions\\ninterface IUserDepositManagerV1 {\\n    /// @notice User deposited ETH in the system\\n    /// @param depositor Address performing the deposit\\n    /// @param recipient Address receiving the minted shares\\n    /// @param amount Amount in ETH deposited\\n    event UserDeposit(address indexed depositor, address indexed recipient, uint256 amount);\\n\\n    /// @notice And empty deposit attempt was made\\n    error EmptyDeposit();\\n\\n    /// @notice Explicit deposit method to mint on msg.sender\\n    function deposit() external payable;\\n\\n    /// @notice Explicit deposit method to mint on msg.sender and transfer to _recipient\\n    /// @param _recipient Address receiving the minted LsETH\\n    function depositAndTransfer(address _recipient) external payable;\\n\\n    /// @notice Implicit deposit method, when the user performs a regular transfer to the contract\\n    receive() external payable;\\n\\n    /// @notice Invalid call, when the user sends a transaction with a data payload but no method matched\\n    fallback() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/CLSpec.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Consensus Layer Spec Storage\\n/// @notice Utility to manage the Consensus Layer Spec in storage\\nlibrary CLSpec {\\n    /// @notice Storage slot of the Consensus Layer Spec\\n    bytes32 internal constant CL_SPEC_SLOT = bytes32(uint256(keccak256(\\\"river.state.clSpec\\\")) - 1);\\n\\n    /// @notice The Consensus Layer Spec structure\\n    struct CLSpecStruct {\\n        /// @custom:attribute The count of epochs per frame, 225 means 24h\\n        uint64 epochsPerFrame;\\n        /// @custom:attribute The count of slots in an epoch (32 on mainnet)\\n        uint64 slotsPerEpoch;\\n        /// @custom:attribute The seconds in a slot (12 on mainnet)\\n        uint64 secondsPerSlot;\\n        /// @custom:attribute The block timestamp of the first consensus layer block\\n        uint64 genesisTime;\\n        /// @custom:attribute The count of epochs before considering an epoch final on-chain\\n        uint64 epochsToAssumedFinality;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        CLSpecStruct value;\\n    }\\n\\n    /// @notice Retrieve the Consensus Layer Spec from storage\\n    /// @return The Consensus Layer Spec\\n    function get() internal view returns (CLSpecStruct memory) {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Consensus Layer Spec value in storage\\n    /// @param _newCLSpec The new value to set in storage\\n    function set(CLSpecStruct memory _newCLSpec) internal {\\n        bytes32 slot = CL_SPEC_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newCLSpec;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/ReportBounds.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Report Bounds Storage\\n/// @notice Utility to manage the Report Bounds in storage\\nlibrary ReportBounds {\\n    /// @notice Storage slot of the Report Bounds\\n    bytes32 internal constant REPORT_BOUNDS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportBounds\\\")) - 1);\\n\\n    /// @notice The Report Bounds structure\\n    struct ReportBoundsStruct {\\n        /// @custom:attribute The maximum allowed annual apr, checked before submitting a report to River\\n        uint256 annualAprUpperBound;\\n        /// @custom:attribute The maximum allowed balance decrease, also checked before submitting a report to River\\n        uint256 relativeLowerBound;\\n    }\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The structure in storage\\n        ReportBoundsStruct value;\\n    }\\n\\n    /// @notice Retrieve the Report Bounds from storage\\n    /// @return The Report Bounds\\n    function get() internal view returns (ReportBoundsStruct memory) {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Report Bounds in storage\\n    /// @param _newReportBounds The new Report Bounds value\\n    function set(ReportBoundsStruct memory _newReportBounds) internal {\\n        bytes32 slot = REPORT_BOUNDS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value = _newReportBounds;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Deposit Contract Interface\\n/// @notice This interface exposes methods to perform validator deposits\\ninterface IDepositContract {\\n    /// @notice Official deposit method to activate a validator on the consensus layer\\n    /// @param pubkey The 48 bytes long BLS Public key representing the validator\\n    /// @param withdrawalCredentials The 32 bytes long withdrawal credentials, configures the withdrawal recipient\\n    /// @param signature The 96 bytes long BLS Signature performed by the pubkey's private key\\n    /// @param depositDataRoot The root hash of the whole deposit data structure\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawalCredentials,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibBytes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Bytes\\n/// @notice This library helps manipulating bytes\\nlibrary LibBytes {\\n    /// @notice The length overflows an uint\\n    error SliceOverflow();\\n\\n    /// @notice The slice is outside of the initial bytes bounds\\n    error SliceOutOfBounds();\\n\\n    /// @notice Slices the provided bytes\\n    /// @param _bytes Bytes to slice\\n    /// @param _start The starting index of the slice\\n    /// @param _length The length of the slice\\n    /// @return The slice of _bytes starting at _start of length _length\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        unchecked {\\n            if (_length + 31 < _length) {\\n                revert SliceOverflow();\\n            }\\n        }\\n        if (_bytes.length < _start + _length) {\\n            revert SliceOutOfBounds();\\n        }\\n\\n        bytes memory tempBytes;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } { mstore(mc, mload(cc)) }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/libraries/LibUint256.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/// @title Lib Uint256\\n/// @notice Utilities to perform uint operations\\nlibrary LibUint256 {\\n    /// @notice Converts a value to little endian (64 bits)\\n    /// @param _value The value to convert\\n    /// @return result The converted value\\n    function toLittleEndian64(uint256 _value) internal pure returns (uint256 result) {\\n        result = 0;\\n        uint256 tempValue = _value;\\n        result = tempValue & 0xFF;\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        result = (result << 8) | (tempValue & 0xFF);\\n        tempValue >>= 8;\\n\\n        assert(0 == tempValue); // fully converted\\n        result <<= (24 * 8);\\n    }\\n\\n    /// @notice Returns the minimum value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Smallest value between _a and _b\\n    function min(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a > _b ? _b : _a);\\n    }\\n\\n    /// @notice Returns the max value\\n    /// @param _a First value\\n    /// @param _b Second value\\n    /// @return Highest value between _a and _b\\n    function max(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a < _b ? _b : _a);\\n    }\\n\\n    /// @notice Performs a ceiled division\\n    /// @param _a Numerator\\n    /// @param _b Denominator\\n    /// @return ceil(_a / _b)\\n    function ceil(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a / _b) + (_a % _b > 0 ? 1 : 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/DepositContractAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposit Contract Address Storage\\n/// @notice Utility to manage the Deposit Contract Address in storage\\nlibrary DepositContractAddress {\\n    /// @notice Storage slot of the Deposit Contract Address\\n    bytes32 internal constant DEPOSIT_CONTRACT_ADDRESS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositContractAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposit Contract Address\\n    /// @return The Deposit Contract Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposit Contract Address\\n    /// @param _newValue New Deposit Contract Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(DEPOSIT_CONTRACT_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/WithdrawalCredentials.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibErrors.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Withdrawal Credentials Storage\\n/// @notice Utility to manage the Withdrawal Credentials in storage\\nlibrary WithdrawalCredentials {\\n    /// @notice Storage slot of the Withdrawal Credentials\\n    bytes32 internal constant WITHDRAWAL_CREDENTIALS_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.withdrawalCredentials\\\")) - 1);\\n\\n    /// @notice Retrieve the Withdrawal Credentials\\n    /// @return The Withdrawal Credentials\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    /// @notice Retrieve the Withdrawal Credential under its address format\\n    /// @return The Withdrawal Credentials in its address format\\n    function getAddress() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(WITHDRAWAL_CREDENTIALS_SLOT);\\n    }\\n\\n    /// @notice Sets the Withdrawal Credentials\\n    /// @param _newValue New Withdrawal Credentials\\n    function set(bytes32 _newValue) internal {\\n        if (_newValue == bytes32(0)) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        LibUnstructuredStorage.setStorageBytes32(WITHDRAWAL_CREDENTIALS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/DepositedValidatorCount.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Deposited Validator Count Storage\\n/// @notice Utility to manage the Deposited Validator Count in storage\\nlibrary DepositedValidatorCount {\\n    /// @notice Storage slot of the Deposited Validator Count\\n    bytes32 internal constant DEPOSITED_VALIDATOR_COUNT_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.depositedValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Deposited Validator Count\\n    /// @return The Deposited Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Deposited Validator Count\\n    /// @param _newValue New Deposited Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(DEPOSITED_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/BalanceToDeposit.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary BalanceToDeposit {\\n    bytes32 internal constant BALANCE_TO_DEPOSIT_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceToDeposit\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_TO_DEPOSIT_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_TO_DEPOSIT_SLOT, newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/CommittedBalance.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary CommittedBalance {\\n    bytes32 internal constant COMMITTED_BALANCE_SLOT = bytes32(uint256(keccak256(\\\"river.state.committedBalance\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(COMMITTED_BALANCE_SLOT);\\n    }\\n\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(COMMITTED_BALANCE_SLOT, newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/Shares.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Shares Count Storage\\n/// @notice Utility to manage the Shares Count in storage\\nlibrary Shares {\\n    /// @notice Storage slot of the Shares Count\\n    bytes32 internal constant SHARES_SLOT = bytes32(uint256(keccak256(\\\"river.state.shares\\\")) - 1);\\n\\n    /// @notice Retrieve the Shares Count\\n    /// @return The Shares Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(SHARES_SLOT);\\n    }\\n\\n    /// @notice Sets the Shares Count\\n    /// @param _newValue New Shares Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(SHARES_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/SharesPerOwner.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Shares Per Owner Storage\\n/// @notice Utility to manage the Shares Per Owner in storage\\nlibrary SharesPerOwner {\\n    /// @notice Storage slot of the Shares Per Owner\\n    bytes32 internal constant SHARES_PER_OWNER_SLOT = bytes32(uint256(keccak256(\\\"river.state.sharesPerOwner\\\")) - 1);\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its share count\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the share count for given owner\\n    /// @param _owner The address to get the balance of\\n    /// @return The amount of shares\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the amount of shares for an owner\\n    /// @param _owner The owner of the shares to edit\\n    /// @param _newValue The new shares value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = SHARES_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/shared/ApprovalsPerOwner.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Approvals Per Owner Storage\\n/// @notice Utility to manage the Approvals Per Owner in storage\\nlibrary ApprovalsPerOwner {\\n    /// @notice Storage slot of the Approvals Per Owner\\n    bytes32 internal constant APPROVALS_PER_OWNER_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.approvalsPerOwner\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to an operator to the approval amount\\n        mapping(address => mapping(address => uint256)) value;\\n    }\\n\\n    /// @notice Retrieve the approval for an owner to an operator\\n    /// @param _owner The account that gave the approval\\n    /// @param _operator The account receiving the approval\\n    /// @return The value of the approval\\n    function get(address _owner, address _operator) internal view returns (uint256) {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner][_operator];\\n    }\\n\\n    /// @notice Set the approval value for an owner to an operator\\n    /// @param _owner The account that gives the approval\\n    /// @param _operator The account receiving the approval\\n    /// @param _newValue The value of the approval\\n    function set(address _owner, address _operator, uint256 _newValue) internal {\\n        bytes32 slot = APPROVALS_PER_OWNER_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner][_operator] = _newValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IRedeemManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/redeemManager/RedeemQueue.sol\\\";\\nimport \\\"../state/redeemManager/WithdrawalStack.sol\\\";\\n\\n/// @title Redeem Manager Interface (v1)\\n/// @author Kiln\\n/// @notice This contract handles the redeem requests of all users\\ninterface IRedeemManagerV1 {\\n    /// @notice Emitted when a redeem request is created\\n    /// @param owner The owner of the redeem request\\n    /// @param height The height of the redeem request in LsETH\\n    /// @param amount The amount of the redeem request in LsETH\\n    /// @param maxRedeemableEth The maximum amount of eth that can be redeemed from this request\\n    /// @param id The id of the new redeem request\\n    event RequestedRedeem(address indexed owner, uint256 height, uint256 amount, uint256 maxRedeemableEth, uint32 id);\\n\\n    /// @notice Emitted when a withdrawal event is created\\n    /// @param height The height of the withdrawal event in LsETH\\n    /// @param amount The amount of the withdrawal event in LsETH\\n    /// @param ethAmount The amount of eth to distrubute to claimers\\n    /// @param id The id of the withdrawal event\\n    event ReportedWithdrawal(uint256 height, uint256 amount, uint256 ethAmount, uint32 id);\\n\\n    /// @notice Emitted when a redeem request has been satisfied and filled (even partially) from a withdrawal event\\n    /// @param redeemRequestId The id of the redeem request\\n    /// @param withdrawalEventId The id of the withdrawal event used to fill the request\\n    /// @param lsEthAmountSatisfied The amount of LsETH filled\\n    /// @param ethAmountSatisfied The amount of ETH filled\\n    /// @param lsEthAmountRemaining The amount of LsETH remaining\\n    /// @param ethAmountExceeding The amount of eth added to the exceeding buffer\\n    event SatisfiedRedeemRequest(\\n        uint32 indexed redeemRequestId,\\n        uint32 indexed withdrawalEventId,\\n        uint256 lsEthAmountSatisfied,\\n        uint256 ethAmountSatisfied,\\n        uint256 lsEthAmountRemaining,\\n        uint256 ethAmountExceeding\\n    );\\n\\n    /// @notice Emitted when a redeem request claim has been processed and matched at least once and funds are sent to the recipient\\n    /// @param redeemRequestId The id of the redeem request\\n    /// @param recipient The address receiving the redeem request funds\\n    /// @param ethAmount The amount of eth retrieved\\n    /// @param lsEthAmount The total amount of LsETH used to redeem the eth\\n    /// @param remainingLsEthAmount The amount of LsETH remaining\\n    event ClaimedRedeemRequest(\\n        uint32 indexed redeemRequestId,\\n        address indexed recipient,\\n        uint256 ethAmount,\\n        uint256 lsEthAmount,\\n        uint256 remainingLsEthAmount\\n    );\\n\\n    /// @notice Emitted when the redeem demand is set\\n    /// @param oldRedeemDemand The old redeem demand\\n    /// @param newRedeemDemand The new redeem demand\\n    event SetRedeemDemand(uint256 oldRedeemDemand, uint256 newRedeemDemand);\\n\\n    /// @notice Emitted when the River address is set\\n    /// @param river The new river address\\n    event SetRiver(address river);\\n\\n    /// @notice Thrown When a zero value is provided\\n    error InvalidZeroAmount();\\n\\n    /// @notice Thrown when a transfer error occured with LsETH\\n    error TransferError();\\n\\n    /// @notice Thrown when the provided arrays don't have matching lengths\\n    error IncompatibleArrayLengths();\\n\\n    /// @notice Thrown when the provided redeem request id is out of bounds\\n    /// @param id The redeem request id\\n    error RedeemRequestOutOfBounds(uint256 id);\\n\\n    /// @notice Thrown when the withdrawal request id if out of bounds\\n    /// @param id The withdrawal event id\\n    error WithdrawalEventOutOfBounds(uint256 id);\\n\\n    /// @notice Thrown when\\tthe redeem request id is already claimed\\n    /// @param id The redeem request id\\n    error RedeemRequestAlreadyClaimed(uint256 id);\\n\\n    /// @notice Thrown when the redeem request and withdrawal event are not matching during claim\\n    /// @param redeemRequestId The provided redeem request id\\n    /// @param withdrawalEventId The provided associated withdrawal event id\\n    error DoesNotMatch(uint256 redeemRequestId, uint256 withdrawalEventId);\\n\\n    /// @notice Thrown when the provided withdrawal event exceeds the redeem demand\\n    /// @param withdrawalAmount The amount of the withdrawal event\\n    /// @param redeemDemand The current redeem demand\\n    error WithdrawalExceedsRedeemDemand(uint256 withdrawalAmount, uint256 redeemDemand);\\n\\n    /// @notice Thrown when the payment after a claim failed\\n    /// @param recipient The recipient of the payment\\n    /// @param rdata The revert data\\n    error ClaimRedeemFailed(address recipient, bytes rdata);\\n\\n    /// @param _river The address of the River contract\\n    function initializeRedeemManagerV1(address _river) external;\\n\\n    /// @notice Retrieve River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Retrieve the global count of redeem requests\\n    function getRedeemRequestCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a specific redeem request\\n    /// @param _redeemRequestId The id of the request\\n    /// @return The redeem request details\\n    function getRedeemRequestDetails(uint32 _redeemRequestId)\\n        external\\n        view\\n        returns (RedeemQueue.RedeemRequest memory);\\n\\n    /// @notice Retrieve the global count of withdrawal events\\n    function getWithdrawalEventCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a specific withdrawal event\\n    /// @param _withdrawalEventId The id of the withdrawal event\\n    /// @return The withdrawal event details\\n    function getWithdrawalEventDetails(uint32 _withdrawalEventId)\\n        external\\n        view\\n        returns (WithdrawalStack.WithdrawalEvent memory);\\n\\n    /// @notice Retrieve the amount of redeemed LsETH pending to be supplied with withdrawn ETH\\n    /// @return The amount of eth in the buffer\\n    function getBufferedExceedingEth() external view returns (uint256);\\n\\n    /// @notice Retrieve the amount of LsETH waiting to be exited\\n    /// @return The amount of LsETH waiting to be exited\\n    function getRedeemDemand() external view returns (uint256);\\n\\n    /// @notice Resolves the provided list of redeem request ids\\n    /// @dev The result is an array of equal length with ids or error code\\n    /// @dev -1 means that the request is not satisfied yet\\n    /// @dev -2 means that the request is out of bounds\\n    /// @dev -3 means that the request has already been claimed\\n    /// @dev This call was created to be called by an off-chain interface, the output could then be used to perform the claimRewards call in a regular transaction\\n    /// @param _redeemRequestIds The list of redeem requests to resolve\\n    /// @return withdrawalEventIds The list of withdrawal events matching every redeem request (or error codes)\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds);\\n\\n    /// @notice Creates a redeem request\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The recipient owning the redeem request\\n    /// @return redeemRequestId The id of the redeem request\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Creates a redeem request using msg.sender as recipient\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @return redeemRequestId The id of the redeem request\\n    function requestRedeem(uint256 _lsETHAmount) external returns (uint32 redeemRequestId);\\n\\n    /// @notice Claims the rewards of the provided redeem request ids\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for every redeem request claim\\n    /// @param _skipAlreadyClaimed True if the call should not revert on claiming of already claimed requests\\n    /// @param _depth The maximum recursive depth for the resolution of the redeem requests\\n    /// @return claimStatuses The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\\n    function claimRedeemRequests(\\n        uint32[] calldata _redeemRequestIds,\\n        uint32[] calldata _withdrawalEventIds,\\n        bool _skipAlreadyClaimed,\\n        uint16 _depth\\n    ) external returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Claims the rewards of the provided redeem request ids\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for every redeem request claim\\n    /// @return claimStatuses The list of claim statuses. 0 for fully claimed, 1 for partially claimed, 2 for skipped\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses);\\n\\n    /// @notice Reports a withdraw event from River\\n    /// @param _lsETHWithdrawable The amount of LsETH that can be redeemed due to this new withdraw event\\n    function reportWithdraw(uint256 _lsETHWithdrawable) external payable;\\n\\n    /// @notice Pulls exceeding buffer eth\\n    /// @param _max The maximum amount that should be pulled\\n    function pullExceedingEth(uint256 _max) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/OracleAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Address Storage\\n/// @notice Utility to manage the Oracle Address in storage\\nlibrary OracleAddress {\\n    /// @notice Storage slot of the Oracle Address\\n    bytes32 internal constant ORACLE_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Oracle Address\\n    /// @return The Oracle Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ORACLE_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Oracle Address\\n    /// @param _newValue New Oracle Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ORACLE_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/CLValidatorTotalBalance.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Total Balance Storage\\n/// @notice Utility to manage the Consensus Layer Validator Total Balance in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary CLValidatorTotalBalance {\\n    /// @notice Storage slot of the Consensus Layer Validator Total Balance\\n    bytes32 internal constant CL_VALIDATOR_TOTAL_BALANCE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.clValidatorTotalBalance\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Total Balance\\n    /// @return The Consensus Layer Validator Total Balance\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Total Balance\\n    /// @param _newValue New Consensus Layer Validator Total Balance\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_TOTAL_BALANCE_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/CLValidatorCount.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Consensus Layer Validator Count Storage\\n/// @notice Utility to manage the Consensus Layer Validator Count in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary CLValidatorCount {\\n    /// @notice Storage slot of the Consensus Layer Validator Count\\n    bytes32 internal constant CL_VALIDATOR_COUNT_SLOT = bytes32(uint256(keccak256(\\\"river.state.clValidatorCount\\\")) - 1);\\n\\n    /// @notice Retrieve the Consensus Layer Validator Count\\n    /// @return The Consensus Layer Validator Count\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CL_VALIDATOR_COUNT_SLOT);\\n    }\\n\\n    /// @notice Sets the Consensus Layer Validator Count\\n    /// @param _newValue New Consensus Layer Validator Count\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(CL_VALIDATOR_COUNT_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/river/LastOracleRoundId.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Oracle Round Id Storage\\n/// @notice Utility to manage the Last Oracle Round Id in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary LastOracleRoundId {\\n    /// @notice Storage slot of the Last Oracle Round Id\\n    bytes32 internal constant LAST_ORACLE_ROUND_ID_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.lastOracleRoundId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Oracle Round Id\\n    /// @return The Last Oracle Round Id\\n    function get() internal view returns (bytes32) {\\n        return LibUnstructuredStorage.getStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Oracle Round Id\\n    /// @param _newValue New Last Oracle Round Id\\n    function set(bytes32 _newValue) internal {\\n        LibUnstructuredStorage.setStorageBytes32(LAST_ORACLE_ROUND_ID_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/redeemManager/RedeemQueue.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Redeem Manager Redeem Queue storage\\n/// @notice Utility to manage the Redeem Queue in the Redeem Manager\\nlibrary RedeemQueue {\\n    /// @notice Storage slot of the Redeem Queue\\n    bytes32 internal constant REDEEM_QUEUE_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.redeemQueue\\\")) - 1);\\n\\n    /// @notice The Redeemer structure represents the redeem request made by a user\\n    struct RedeemRequest {\\n        /// @custom:attribute The amount of the redeem request in LsETH\\n        uint256 amount;\\n        /// @custom:attribute The maximum amount of ETH redeemable by this request\\n        uint256 maxRedeemableEth;\\n        /// @custom:attribute The owner of the redeem request\\n        address owner;\\n        /// @custom:attribute The height is the cumulative sum of all the sizes of preceding redeem requests\\n        uint256 height;\\n    }\\n\\n    /// @notice Retrieve the Redeem Queue array storage pointer\\n    /// @return data The Redeem Queue array storage pointer\\n    function get() internal pure returns (RedeemRequest[] storage data) {\\n        bytes32 position = REDEEM_QUEUE_ID_SLOT;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/redeemManager/WithdrawalStack.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Redeem Manager Withdrawal Stack storage\\n/// @notice Utility to manage the Withdrawal Stack in the Redeem Manager\\nlibrary WithdrawalStack {\\n    /// @notice Storage slot of the Withdrawal Stack\\n    bytes32 internal constant WITHDRAWAL_STACK_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.withdrawalStack\\\")) - 1);\\n\\n    /// @notice The Redeemer structure represents the withdrawal events made by River\\n    struct WithdrawalEvent {\\n        /// @custom:attribute The amount of the withdrawal event in LsETH\\n        uint256 amount;\\n        /// @custom:attribute The amount of the withdrawal event in ETH\\n        uint256 withdrawnEth;\\n        /// @custom:attribute The height is the cumulative sum of all the sizes of preceding withdrawal events\\n        uint256 height;\\n    }\\n\\n    /// @notice Retrieve the Withdrawal Stack array storage pointer\\n    /// @return data The Withdrawal Stack array storage pointer\\n    function get() internal pure returns (WithdrawalEvent[] storage data) {\\n        bytes32 position = WITHDRAWAL_STACK_ID_SLOT;\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/shared/Version.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Version Storage\\n/// @notice Utility to manage the Version in storage\\nlibrary Version {\\n    /// @notice Storage slot of the Version\\n    bytes32 public constant VERSION_SLOT = bytes32(uint256(keccak256(\\\"river.state.version\\\")) - 1);\\n\\n    /// @notice Retrieve the Version\\n    /// @return The Version\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(VERSION_SLOT);\\n    }\\n\\n    /// @notice Sets the Version\\n    /// @param _newValue New Version\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(VERSION_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/WLSETH.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IWLSETH.1.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/shared/ApprovalsPerOwner.sol\\\";\\nimport \\\"./state/wlseth/BalanceOf.sol\\\";\\n\\n/// @title Wrapped LsETH (v1)\\n/// @author Kiln\\n/// @notice This contract wraps the LsETH token into a rebase token, more suitable for some DeFi use-cases\\n///         like stable swaps.\\ncontract WLSETHV1 is IWLSETHV1, Initializable, ReentrancyGuard {\\n    /// @notice Ensures that the value is not 0\\n    /// @param _value Value that must be > 0\\n    modifier isNotNull(uint256 _value) {\\n        if (_value == 0) {\\n            revert NullTransfer();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Ensures that the owner has enough funds\\n    /// @param _owner Owner of the balance to verify\\n    /// @param _value Minimum required value\\n    modifier hasFunds(address _owner, uint256 _value) {\\n        if (_balanceOf(_owner) < _value) {\\n            revert BalanceTooLow();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function initWLSETHV1(address _river) external init(0) {\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function name() external pure returns (string memory) {\\n        return \\\"Wrapped Liquid Staked ETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function symbol() external pure returns (string memory) {\\n        return \\\"wLsETH\\\";\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function totalSupply() external view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).balanceOfUnderlying(address(this));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return _balanceOf(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function sharesOf(address _owner) external view returns (uint256) {\\n        return BalanceOf.get(_owner);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function allowance(address _owner, address _spender) external view returns (uint256) {\\n        return ApprovalsPerOwner.get(_owner, _spender);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transfer(address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(msg.sender, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(msg.sender, address(0));\\n        }\\n        return _transfer(msg.sender, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        external\\n        isNotNull(_value)\\n        hasFunds(_from, _value)\\n        returns (bool)\\n    {\\n        if (_to == address(0)) {\\n            revert UnauthorizedTransfer(_from, address(0));\\n        }\\n        _spendAllowance(_from, _value);\\n        return _transfer(_from, _to, _value);\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function approve(address _spender, uint256 _value) external returns (bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) + _additionalValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool) {\\n        _approve(msg.sender, _spender, ApprovalsPerOwner.get(msg.sender, _spender) - _subtractableValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function mint(address _recipient, uint256 _shares) external nonReentrant {\\n        BalanceOf.set(_recipient, BalanceOf.get(_recipient) + _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transferFrom(msg.sender, address(this), _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Mint(_recipient, _shares);\\n        emit Transfer(address(0), _recipient, river.underlyingBalanceFromShares(_shares));\\n    }\\n\\n    /// @inheritdoc IWLSETHV1\\n    function burn(address _recipient, uint256 _shares) external nonReentrant {\\n        uint256 shares = BalanceOf.get(msg.sender);\\n        if (_shares > shares) {\\n            revert BalanceTooLow();\\n        }\\n        BalanceOf.set(msg.sender, shares - _shares);\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        if (!river.transfer(_recipient, _shares)) {\\n            revert TokenTransferError();\\n        }\\n        emit Transfer(msg.sender, address(0), river.underlyingBalanceFromShares(_shares));\\n        emit Burn(_recipient, _shares);\\n    }\\n\\n    /// @notice Internal utility to spend the allowance of an account from the message sender\\n    /// @param _from Address owning the allowance\\n    /// @param _value Amount of allowance to spend\\n    function _spendAllowance(address _from, uint256 _value) internal {\\n        uint256 currentAllowance = ApprovalsPerOwner.get(_from, msg.sender);\\n        if (currentAllowance < _value) {\\n            revert AllowanceTooLow(_from, msg.sender, currentAllowance, _value);\\n        }\\n        if (currentAllowance != type(uint256).max) {\\n            _approve(_from, msg.sender, currentAllowance - _value);\\n        }\\n    }\\n\\n    /// @notice Internal utility to change the allowance of an owner to a spender\\n    /// @param _owner The owner of the wrapped tokens\\n    /// @param _spender The allowed spender of the wrapped tokens\\n    /// @param _value The new allowance value\\n    function _approve(address _owner, address _spender, uint256 _value) internal {\\n        LibSanitize._notZeroAddress(_owner);\\n        LibSanitize._notZeroAddress(_spender);\\n        ApprovalsPerOwner.set(_owner, _spender, _value);\\n        emit Approval(_owner, _spender, _value);\\n    }\\n\\n    /// @notice Internal utility to retrieve the amount of token per owner\\n    /// @param _owner Account to be checked\\n    /// @return The balance of the account\\n    function _balanceOf(address _owner) internal view returns (uint256) {\\n        return IRiverV1(payable(RiverAddress.get())).underlyingBalanceFromShares(BalanceOf.get(_owner));\\n    }\\n\\n    /// @notice Internal utility to perform an unchecked transfer\\n    /// @param _from Address sending the tokens\\n    /// @param _to Address receiving the tokens\\n    /// @param _value Amount to be sent\\n    /// @return True if success\\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\\n        uint256 valueToShares = IRiverV1(payable(RiverAddress.get())).sharesFromUnderlyingBalance(_value);\\n        BalanceOf.set(_from, BalanceOf.get(_from) - valueToShares);\\n        BalanceOf.set(_to, BalanceOf.get(_to) + valueToShares);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IWLSETH.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Wrapped LsETH Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to wrap the LsETH token into a rebase token.\\ninterface IWLSETHV1 {\\n    /// @notice A transfer has been made\\n    /// @param from The transfer sender\\n    /// @param to The transfer recipient\\n    /// @param value The amount transfered\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice An approval has been made\\n    /// @param owner The token owner\\n    /// @param spender The account allowed by the owner\\n    /// @param value The amount allowed\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice Tokens have been minted\\n    /// @param recipient The account receiving the new tokens\\n    /// @param shares The amount of LsETH provided\\n    event Mint(address indexed recipient, uint256 shares);\\n\\n    /// @notice Tokens have been burned\\n    /// @param recipient The account that receive the underlying LsETH\\n    /// @param shares The amount of LsETH that got sent back\\n    event Burn(address indexed recipient, uint256 shares);\\n\\n    /// @notice The stored value of river has been changed\\n    /// @param river The new address of river\\n    event SetRiver(address indexed river);\\n\\n    /// @notice The token transfer failed during the minting or burning process\\n    error TokenTransferError();\\n\\n    /// @notice Balance too low to perform operation\\n    error BalanceTooLow();\\n\\n    /// @notice Allowance too low to perform operation\\n    /// @param _from Account where funds are sent from\\n    /// @param _operator Account attempting the transfer\\n    /// @param _allowance Current allowance\\n    /// @param _value Requested transfer value\\n    error AllowanceTooLow(address _from, address _operator, uint256 _allowance, uint256 _value);\\n\\n    /// @notice Invalid empty transfer\\n    error NullTransfer();\\n\\n    /// @notice Invalid transfer recipients\\n    /// @param _from Account sending the funds in the invalid transfer\\n    /// @param _to Account receiving the funds in the invalid transfer\\n    error UnauthorizedTransfer(address _from, address _to);\\n\\n    /// @notice Initializes the wrapped token contract\\n    /// @param _river Address of the River contract\\n    function initWLSETHV1(address _river) external;\\n\\n    /// @notice Retrieves the token full name\\n    /// @return The name of the token\\n    function name() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token symbol\\n    /// @return The symbol of the token\\n    function symbol() external pure returns (string memory);\\n\\n    /// @notice Retrieves the token decimal count\\n    /// @return The decimal count\\n    function decimals() external pure returns (uint8);\\n\\n    /// @notice Retrieves the token total supply\\n    /// @return The total supply\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Retrieves the token balance of the specified user\\n    /// @param _owner Owner to check the balance\\n    /// @return The balance of the owner\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the raw shares count of the user\\n    /// @param _owner Owner to check the shares balance\\n    /// @return The shares of the owner\\n    function sharesOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Retrieves the token allowance given from one address to another\\n    /// @param _owner Owner that gave the allowance\\n    /// @param _spender Spender that received the allowance\\n    /// @return The allowance of the owner to the spender\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /// @notice Transfers tokens between the message sender and a recipient\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Transfers tokens between two accounts\\n    /// @dev It is expected that _from has given at least _value allowance to msg.sender\\n    /// @param _from Sender account\\n    /// @param _to Recipient of the transfer\\n    /// @param _value Amount to transfer\\n    /// @return True if success\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n\\n    /// @notice Approves another account to transfer tokens\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _value Amount to allow\\n    /// @return True if success\\n    function approve(address _spender, uint256 _value) external returns (bool);\\n\\n    /// @notice Increase allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _additionalValue Amount to add\\n    /// @return True if success\\n    function increaseAllowance(address _spender, uint256 _additionalValue) external returns (bool);\\n\\n    /// @notice Decrease allowance to another account\\n    /// @param _spender Spender that receives the allowance\\n    /// @param _subtractableValue Amount to subtract\\n    /// @return True if success\\n    function decreaseAllowance(address _spender, uint256 _subtractableValue) external returns (bool);\\n\\n    /// @notice Mint tokens by providing LsETH tokens\\n    /// @dev The message sender locks LsETH tokens and received wrapped LsETH tokens in exchange\\n    /// @dev The message sender needs to approve the contract to mint the wrapped tokens\\n    /// @dev The minted wrapped LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the new minted wrapped LsETH\\n    /// @param _shares The amount of LsETH to wrap\\n    function mint(address _recipient, uint256 _shares) external;\\n\\n    /// @notice Burn tokens and retrieve underlying LsETH tokens\\n    /// @dev The message sender burns shares from its balance for the LsETH equivalent value\\n    /// @dev The message sender doesn't need to approve the contract to burn the shares\\n    /// @dev The freed LsETH is sent to the specified recipient\\n    /// @param _recipient The account receiving the underlying LsETH tokens after shares are burned\\n    /// @param _shares Amount of LsETH to free by burning wrapped LsETH\\n    function burn(address _recipient, uint256 _shares) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/shared/RiverAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title River Address Storage\\n/// @notice Utility to manage the River Address in storage\\nlibrary RiverAddress {\\n    /// @notice Storage slot of the River Address\\n    bytes32 internal constant RIVER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.riverAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the River Address\\n    /// @return The River Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(RIVER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the River Address\\n    /// @param _newValue New River Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(RIVER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/wlseth/BalanceOf.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Balance Storage\\n/// @notice Utility to manage the Balance in storage\\nlibrary BalanceOf {\\n    /// @notice Storage slot of the Balance\\n    bytes32 internal constant BALANCE_OF_SLOT = bytes32(uint256(keccak256(\\\"river.state.balanceOf\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from an owner to its balance\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve balance of an owner\\n    /// @param _owner The owner of the balance\\n    /// @return The balance of the owner\\n    function get(address _owner) internal view returns (uint256) {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_owner];\\n    }\\n\\n    /// @notice Set the balance of an owner\\n    /// @param _owner The owner to change the balance of\\n    /// @param _newValue New balance value for the owner\\n    function set(address _owner, uint256 _newValue) internal {\\n        bytes32 slot = BALANCE_OF_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_owner] = _newValue;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/oracle/OracleMembers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Oracle Members Storage\\n/// @notice Utility to manage the Oracle Members in storage\\n/// @dev There can only be up to 256 oracle members. This is due to how report statuses are stored in Reports Positions\\nlibrary OracleMembers {\\n    /// @notice Storage slot of the Oracle Members\\n    bytes32 internal constant ORACLE_MEMBERS_SLOT = bytes32(uint256(keccak256(\\\"river.state.oracleMembers\\\")) - 1);\\n\\n    /// @notice The structure in storage\\n    struct Slot {\\n        /// @custom:attribute The array of oracle members\\n        address[] value;\\n    }\\n\\n    /// @notice Retrieve the list of oracle members\\n    /// @return List of oracle members\\n    function get() internal view returns (address[] memory) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Add a new oracle member to the list\\n    /// @param _newOracleMember Address of the new oracle member\\n    function push(address _newOracleMember) internal {\\n        LibSanitize._notZeroAddress(_newOracleMember);\\n\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOracleMember);\\n    }\\n\\n    /// @notice Set an address in the oracle member list\\n    /// @param _index The index to edit\\n    /// @param _newOracleAddress The new value of the oracle member\\n    function set(uint256 _index, address _newOracleAddress) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_index] = _newOracleAddress;\\n    }\\n\\n    /// @notice Retrieve the index of the oracle member\\n    /// @param _memberAddress The address to lookup\\n    /// @return The index of the member, -1 if not found\\n    function indexOf(address _memberAddress) internal view returns (int256) {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx] == _memberAddress) {\\n                return int256(idx);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    /// @notice Delete the oracle member at the given index\\n    /// @param _idx The index of the member to remove\\n    function deleteItem(uint256 _idx) internal {\\n        bytes32 slot = ORACLE_MEMBERS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 lastIdx = r.value.length - 1;\\n        if (lastIdx != _idx) {\\n            r.value[_idx] = r.value[lastIdx];\\n        }\\n\\n        r.value.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/Oracle.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IOracle.1.sol\\\";\\n\\nimport \\\"./Administrable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\nimport \\\"./state/oracle/LastEpochId.sol\\\";\\nimport \\\"./state/oracle/OracleMembers.sol\\\";\\nimport \\\"./state/oracle/Quorum.sol\\\";\\nimport \\\"./state/oracle/ReportsPositions.sol\\\";\\n\\n/// @title Oracle (v1)\\n/// @author Kiln\\n/// @notice This contract handles the input from the allowed oracle members. Highly inspired by Lido's implementation.\\ncontract OracleV1 is IOracleV1, Initializable, Administrable {\\n    modifier onlyAdminOrMember(address _oracleMember) {\\n        if (msg.sender != _getAdmin() && msg.sender != _oracleMember) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function initOracleV1(\\n        address _riverAddress,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external init(0) {\\n        _setAdmin(_administratorAddress);\\n        RiverAddress.set(_riverAddress);\\n        emit SetRiver(_riverAddress);\\n        CLSpec.set(\\n            CLSpec.CLSpecStruct({\\n                epochsPerFrame: _epochsPerFrame,\\n                slotsPerEpoch: _slotsPerEpoch,\\n                secondsPerSlot: _secondsPerSlot,\\n                genesisTime: _genesisTime,\\n                epochsToAssumedFinality: 0\\n            })\\n        );\\n        emit SetSpec(_epochsPerFrame, _slotsPerEpoch, _secondsPerSlot, _genesisTime);\\n        ReportBounds.set(\\n            ReportBounds.ReportBoundsStruct({\\n                annualAprUpperBound: _annualAprUpperBound,\\n                relativeLowerBound: _relativeLowerBound\\n            })\\n        );\\n        emit SetBounds(_annualAprUpperBound, _relativeLowerBound);\\n        Quorum.set(0);\\n        emit SetQuorum(0);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function initOracleV1_1() external init(1) {\\n        _clearReports();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool) {\\n        int256 memberIndex = OracleMembers.indexOf(_oracleMember);\\n        return memberIndex != -1 && ReportsPositions.get(uint256(memberIndex));\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getGlobalReportStatus() external view returns (uint256) {\\n        return ReportsPositions.getRaw();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getReportVariantsCount() external view returns (uint256) {\\n        return ReportsVariants.get().length;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getReportVariantDetails(uint256 _idx)\\n        external\\n        view\\n        returns (ReportsVariants.ReportVariantDetails memory)\\n    {\\n        if (ReportsVariants.get().length <= _idx) {\\n            revert ReportIndexOutOfBounds(_idx, ReportsVariants.get().length);\\n        }\\n        return ReportsVariants.get()[_idx];\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getQuorum() external view returns (uint256) {\\n        return Quorum.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getOracleMembers() external view returns (address[] memory) {\\n        return OracleMembers.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function isMember(address _memberAddress) external view returns (bool) {\\n        return OracleMembers.indexOf(_memberAddress) >= 0;\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function getLastReportedEpochId() external view returns (uint256) {\\n        return LastEpochId.get();\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function addMember(address _newOracleMember, uint256 _newQuorum) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_newOracleMember);\\n        if (memberIdx >= 0) {\\n            revert AddressAlreadyInUse(_newOracleMember);\\n        }\\n        OracleMembers.push(_newOracleMember);\\n        uint256 previousQuorum = Quorum.get();\\n        _clearReportsAndSetQuorum(_newQuorum, previousQuorum);\\n        emit AddMember(_newOracleMember);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function removeMember(address _oracleMember, uint256 _newQuorum) external onlyAdmin {\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert LibErrors.InvalidCall();\\n        }\\n        OracleMembers.deleteItem(uint256(memberIdx));\\n        uint256 previousQuorum = Quorum.get();\\n        _clearReportsAndSetQuorum(_newQuorum, previousQuorum);\\n        emit RemoveMember(_oracleMember);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setMember(address _oracleMember, address _newAddress) external onlyAdminOrMember(_oracleMember) {\\n        LibSanitize._notZeroAddress(_newAddress);\\n        if (OracleMembers.indexOf(_newAddress) >= 0) {\\n            revert AddressAlreadyInUse(_newAddress);\\n        }\\n        int256 memberIdx = OracleMembers.indexOf(_oracleMember);\\n        if (memberIdx < 0) {\\n            revert LibErrors.InvalidCall();\\n        }\\n        OracleMembers.set(uint256(memberIdx), _newAddress);\\n        emit SetMember(_oracleMember, _newAddress);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function setQuorum(uint256 _newQuorum) external onlyAdmin {\\n        uint256 previousQuorum = Quorum.get();\\n        if (previousQuorum == _newQuorum) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        _clearReportsAndSetQuorum(_newQuorum, previousQuorum);\\n    }\\n\\n    /// @inheritdoc IOracleV1\\n    function reportConsensusLayerData(IRiverV1.ConsensusLayerReport calldata _report) external {\\n        // retrieve member index and revert if not oracle member\\n        int256 memberIndex = OracleMembers.indexOf(msg.sender);\\n        if (memberIndex == -1) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        // store last reported epoch to stack\\n        uint256 lastReportedEpochValue = LastEpochId.get();\\n\\n        // checks that the report epoch is not too old\\n        if (_report.epoch < lastReportedEpochValue) {\\n            revert EpochTooOld(_report.epoch, LastEpochId.get());\\n        }\\n        IRiverV1 river = IRiverV1(payable(RiverAddress.get()));\\n        // checks that the report epoch is not invalid\\n        if (!river.isValidEpoch(_report.epoch)) {\\n            revert InvalidEpoch(_report.epoch);\\n        }\\n        // if valid and greater than the lastReportedEpoch, we clear the reporting data\\n        if (_report.epoch > lastReportedEpochValue) {\\n            _clearReports();\\n            LastEpochId.set(_report.epoch);\\n            emit SetLastReportedEpoch(_report.epoch);\\n        }\\n        // we retrieve the voting status of the caller, and revert if already voted\\n        if (ReportsPositions.get(uint256(memberIndex))) {\\n            revert AlreadyReported(_report.epoch, msg.sender);\\n        }\\n        // we register the caller\\n        ReportsPositions.register(uint256(memberIndex));\\n\\n        // we compute the variant by hashing the report\\n        bytes32 variant = _reportChecksum(_report);\\n        // we retrieve the details for the given variant\\n        (int256 variantIndex, uint256 variantVotes) = _getReportVariantIndexAndVotes(variant);\\n        // we retrieve the quorum to stack\\n        uint256 quorum = Quorum.get();\\n\\n        emit ReportedConsensusLayerData(msg.sender, variant, _report, variantVotes + 1, quorum);\\n\\n        // if adding this vote reaches quorum\\n        if (variantVotes + 1 >= quorum) {\\n            // we clear the reporting data\\n            _clearReports();\\n            // we increment the lastReportedEpoch to force reports to be on the last frame\\n            LastEpochId.set(_report.epoch + 1);\\n            // we push the report to river\\n            river.setConsensusLayerData(_report);\\n            emit SetLastReportedEpoch(_report.epoch + 1);\\n        } else if (variantVotes == 0) {\\n            // if we have no votes for the variant, we create the variant details\\n            ReportsVariants.push(ReportsVariants.ReportVariantDetails({variant: variant, votes: 1}));\\n        } else {\\n            // otherwise we increment the vote\\n            ReportsVariants.get()[uint256(variantIndex)].votes += 1;\\n        }\\n    }\\n\\n    /// @notice Internal utility to clear all the reports and edit the quorum if a new value is provided\\n    /// @dev Ensures that the quorum respects invariants\\n    /// @dev The admin is in charge of providing a proper quorum based on the oracle member count\\n    /// @dev The quorum value Q should respect the following invariant, where O is oracle member count\\n    /// @dev (O / 2) + 1 <= Q <= O\\n    /// @param _newQuorum New quorum value\\n    /// @param _previousQuorum The old quorum value\\n    function _clearReportsAndSetQuorum(uint256 _newQuorum, uint256 _previousQuorum) internal {\\n        uint256 memberCount = OracleMembers.get().length;\\n        if ((_newQuorum == 0 && memberCount > 0) || _newQuorum > memberCount) {\\n            revert LibErrors.InvalidArgument();\\n        }\\n        _clearReports();\\n        if (_newQuorum != _previousQuorum) {\\n            Quorum.set(_newQuorum);\\n            emit SetQuorum(_newQuorum);\\n        }\\n    }\\n\\n    /// @notice Internal utility to hash and retrieve the variant id of a report\\n    /// @param _report The reported data structure\\n    /// @return The report variant\\n    function _reportChecksum(IRiverV1.ConsensusLayerReport calldata _report) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(_report));\\n    }\\n\\n    /// @notice Internal utility to clear all reporting details\\n    function _clearReports() internal {\\n        ReportsVariants.clear();\\n        ReportsPositions.clear();\\n        emit ClearedReporting();\\n    }\\n\\n    /// @notice Internal utility to retrieve index and vote count for a given variant\\n    /// @param _variant The variant to lookup\\n    /// @return The index of the variant, -1 if not found\\n    /// @return The vote count of the variant\\n    function _getReportVariantIndexAndVotes(bytes32 _variant) internal view returns (int256, uint256) {\\n        uint256 reportVariantsLength = ReportsVariants.get().length;\\n        for (uint256 idx = 0; idx < reportVariantsLength;) {\\n            if (ReportsVariants.get()[idx].variant == _variant) {\\n                return (int256(idx), ReportsVariants.get()[idx].votes);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        return (-1, 0);\\n    }\\n\\n    /// @notice Internal utility to retrieve a casted River interface\\n    /// @return The casted River interface\\n    function _river() internal view returns (IRiverV1) {\\n        return IRiverV1(payable(RiverAddress.get()));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IOracle.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./IRiver.1.sol\\\";\\nimport \\\"../state/oracle/ReportsVariants.sol\\\";\\n\\n/// @title Oracle Interface (v1)\\n/// @author Kiln\\n/// @notice This interface exposes methods to handle the input from the allowed oracle members.\\n/// @notice Highly inspired by Lido's implementation.\\ninterface IOracleV1 {\\n    /// @notice The storage quorum value has been changed\\n    /// @param newQuorum The new quorum value\\n    event SetQuorum(uint256 newQuorum);\\n\\n    /// @notice A member has been added to the oracle member list\\n    /// @param member The address of the member\\n    event AddMember(address indexed member);\\n\\n    /// @notice A member has been removed from the oracle member list\\n    /// @param member The address of the member\\n    event RemoveMember(address indexed member);\\n\\n    /// @notice A member address has been edited\\n    /// @param oldAddress The previous member address\\n    /// @param newAddress The new member address\\n    event SetMember(address indexed oldAddress, address indexed newAddress);\\n\\n    /// @notice The storage river address value has been changed\\n    /// @param _river The new river address\\n    event SetRiver(address _river);\\n\\n    /// @notice The consensus layer spec has been changed\\n    /// @param epochsPerFrame The number of epochs inside a frame (225 = 24 hours)\\n    /// @param slotsPerEpoch The number of slots inside an epoch (32 on ethereum mainnet)\\n    /// @param secondsPerSlot The time between two slots (12 seconds on ethereum mainnet)\\n    /// @param genesisTime The timestamp of block #0\\n    event SetSpec(uint64 epochsPerFrame, uint64 slotsPerEpoch, uint64 secondsPerSlot, uint64 genesisTime);\\n\\n    /// @notice The report bounds have been changed\\n    /// @param annualAprUpperBound The maximum allowed apr. 10% means increases in balance extrapolated to a year should not exceed 10%.\\n    /// @param relativeLowerBound The maximum allowed balance decrease as a relative % of the total balance\\n    event SetBounds(uint256 annualAprUpperBound, uint256 relativeLowerBound);\\n\\n    /// @notice An oracle member performed a report\\n    /// @param member The oracle member\\n    /// @param variant The variant of the report\\n    /// @param report The raw report structure\\n    /// @param voteCount The vote count\\n    event ReportedConsensusLayerData(\\n        address indexed member,\\n        bytes32 indexed variant,\\n        IRiverV1.ConsensusLayerReport report,\\n        uint256 voteCount,\\n        uint256 quorum\\n    );\\n\\n    /// @notice The last reported epoch has changed\\n    event SetLastReportedEpoch(uint256 lastReportedEpoch);\\n\\n    /// @notice Cleared reporting data\\n    event ClearedReporting();\\n\\n    /// @notice The provided epoch is too old compared to the expected epoch id\\n    /// @param providedEpochId The epoch id provided as input\\n    /// @param minExpectedEpochId The minimum epoch id expected\\n    error EpochTooOld(uint256 providedEpochId, uint256 minExpectedEpochId);\\n\\n    /// @notice Thrown when the reported epoch is invalid\\n    /// @param epoch The invalid epoch\\n    error InvalidEpoch(uint256 epoch);\\n\\n    /// @notice Thrown when the report indexs fetched is out of bounds\\n    /// @param index Requested index\\n    /// @param length Size of the variant array\\n    error ReportIndexOutOfBounds(uint256 index, uint256 length);\\n\\n    /// @notice The member already reported on the given epoch id\\n    /// @param epochId The epoch id provided as input\\n    /// @param member The oracle member\\n    error AlreadyReported(uint256 epochId, address member);\\n\\n    /// @notice The address is already in use by an oracle member\\n    /// @param newAddress The address already in use\\n    error AddressAlreadyInUse(address newAddress);\\n\\n    /// @notice Initializes the oracle\\n    /// @param _river Address of the River contract, able to receive oracle input data after quorum is met\\n    /// @param _administratorAddress Address able to call administrative methods\\n    /// @param _epochsPerFrame CL spec parameter. Number of epochs in a frame.\\n    /// @param _slotsPerEpoch CL spec parameter. Number of slots in one epoch.\\n    /// @param _secondsPerSlot CL spec parameter. Number of seconds between slots.\\n    /// @param _genesisTime CL spec parameter. Timestamp of the genesis slot.\\n    /// @param _annualAprUpperBound CL bound parameter. Maximum apr allowed for balance increase. Delta between updates is extrapolated on a year time frame.\\n    /// @param _relativeLowerBound CL bound parameter. Maximum relative balance decrease.\\n    function initOracleV1(\\n        address _river,\\n        address _administratorAddress,\\n        uint64 _epochsPerFrame,\\n        uint64 _slotsPerEpoch,\\n        uint64 _secondsPerSlot,\\n        uint64 _genesisTime,\\n        uint256 _annualAprUpperBound,\\n        uint256 _relativeLowerBound\\n    ) external;\\n\\n    /// @notice Initializes the oracle\\n    function initOracleV1_1() external;\\n\\n    /// @notice Retrieve River address\\n    /// @return The address of River\\n    function getRiver() external view returns (address);\\n\\n    /// @notice Retrieve member report status\\n    /// @param _oracleMember Address of member to check\\n    /// @return True if member has reported\\n    function getMemberReportStatus(address _oracleMember) external view returns (bool);\\n\\n    /// @notice Retrieve member report status\\n    /// @return The raw report status value\\n    function getGlobalReportStatus() external view returns (uint256);\\n\\n    /// @notice Retrieve report variants count\\n    /// @return The count of report variants\\n    function getReportVariantsCount() external view returns (uint256);\\n\\n    /// @notice Retrieve the details of a report variant\\n    /// @param _idx The index of the report variant\\n    /// @return The report variant details\\n    function getReportVariantDetails(uint256 _idx)\\n        external\\n        view\\n        returns (ReportsVariants.ReportVariantDetails memory);\\n\\n    /// @notice Retrieve the current quorum\\n    /// @return The current quorum\\n    function getQuorum() external view returns (uint256);\\n\\n    /// @notice Retrieve the list of oracle members\\n    /// @return The oracle members\\n    function getOracleMembers() external view returns (address[] memory);\\n\\n    /// @notice Returns true if address is member\\n    /// @dev Performs a naive search, do not call this on-chain, used as an off-chain helper\\n    /// @param _memberAddress Address of the member\\n    /// @return True if address is a member\\n    function isMember(address _memberAddress) external view returns (bool);\\n\\n    /// @notice Retrieve the last reported epoch id\\n    /// @dev The Oracle contracts expects reports on an epoch id >= that the returned value\\n    /// @return The last reported epoch id\\n    function getLastReportedEpochId() external view returns (uint256);\\n\\n    /// @notice Adds new address as oracle member, giving the ability to push cl reports.\\n    /// @dev Only callable by the adminstrator\\n    /// @dev Modifying the quorum clears all the reporting data\\n    /// @param _newOracleMember Address of the new member\\n    /// @param _newQuorum New quorum value\\n    function addMember(address _newOracleMember, uint256 _newQuorum) external;\\n\\n    /// @notice Removes an address from the oracle members.\\n    /// @dev Only callable by the adminstrator\\n    /// @dev Modifying the quorum clears all the reporting data\\n    /// @dev Remaining members that have already voted should vote again for the same frame.\\n    /// @param _oracleMember Address to remove\\n    /// @param _newQuorum New quorum value\\n    function removeMember(address _oracleMember, uint256 _newQuorum) external;\\n\\n    /// @notice Changes the address of an oracle member\\n    /// @dev Only callable by the adminitrator or the member itself\\n    /// @dev Cannot use an address already in use\\n    /// @param _oracleMember Address to change\\n    /// @param _newAddress New address for the member\\n    function setMember(address _oracleMember, address _newAddress) external;\\n\\n    /// @notice Edits the quorum required to forward cl data to River\\n    /// @dev Modifying the quorum clears all the reporting data\\n    /// @param _newQuorum New quorum parameter\\n    function setQuorum(uint256 _newQuorum) external;\\n\\n    /// @notice Submit a report as an oracle member\\n    /// @param _report The report structure\\n    function reportConsensusLayerData(IRiverV1.ConsensusLayerReport calldata _report) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/oracle/LastEpochId.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Last Epoch Id Storage\\n/// @notice Utility to manage the Last Epoch Id in storage\\nlibrary LastEpochId {\\n    /// @notice Storage slot of the Last Epoch Id\\n    bytes32 internal constant LAST_EPOCH_ID_SLOT = bytes32(uint256(keccak256(\\\"river.state.lastEpochId\\\")) - 1);\\n\\n    /// @notice Retrieve the Last Epoch Id\\n    /// @return The Last Epoch Id\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(LAST_EPOCH_ID_SLOT);\\n    }\\n\\n    /// @notice Sets the Last Epoch Id\\n    /// @param _newValue New Last Epoch Id\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(LAST_EPOCH_ID_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/oracle/Quorum.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Quorum Storage\\n/// @notice Utility to manage the Quorum in storage\\nlibrary Quorum {\\n    /// @notice Storage slot of the Quorum\\n    bytes32 internal constant QUORUM_SLOT = bytes32(uint256(keccak256(\\\"river.state.quorum\\\")) - 1);\\n\\n    /// @notice Retrieve the Quorum\\n    /// @return The Quorum\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(QUORUM_SLOT);\\n    }\\n\\n    /// @notice Sets the Quorum\\n    /// @param _newValue New Quorum\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(QUORUM_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/oracle/ReportsPositions.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Reports Positions Storage\\n/// @notice Utility to manage the Reports Positions in storage\\n/// @dev Each bit in the stored uint256 value tells if the member at a given index has reported\\nlibrary ReportsPositions {\\n    /// @notice Storage slot of the Reports Positions\\n    bytes32 internal constant REPORTS_POSITIONS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsPositions\\\")) - 1);\\n\\n    /// @notice Retrieve the Reports Positions at index\\n    /// @param _idx The index to retrieve\\n    /// @return True if already reported\\n    function get(uint256 _idx) internal view returns (bool) {\\n        uint256 mask = 1 << _idx;\\n        return LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) & mask == mask;\\n    }\\n\\n    /// @notice Retrieve the raw Reports Positions from storage\\n    /// @return Raw Reports Positions\\n    function getRaw() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT);\\n    }\\n\\n    /// @notice Register an index as reported\\n    /// @param _idx The index to register\\n    function register(uint256 _idx) internal {\\n        uint256 mask = 1 << _idx;\\n        return LibUnstructuredStorage.setStorageUint256(\\n            REPORTS_POSITIONS_SLOT, LibUnstructuredStorage.getStorageUint256(REPORTS_POSITIONS_SLOT) | mask\\n        );\\n    }\\n\\n    /// @notice Clears all the report positions in storage\\n    function clear() internal {\\n        return LibUnstructuredStorage.setStorageUint256(REPORTS_POSITIONS_SLOT, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/oracle/ReportsVariants.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Reports Variants Storage\\n/// @notice Utility to manage the Reports Variants in storage\\nlibrary ReportsVariants {\\n    /// @notice Storage slot of the Reports Variants\\n    bytes32 internal constant REPORT_VARIANTS_SLOT = bytes32(uint256(keccak256(\\\"river.state.reportsVariants\\\")) - 1);\\n\\n    struct ReportVariantDetails {\\n        bytes32 variant;\\n        uint256 votes;\\n    }\\n\\n    /// @notice Structure in storage\\n    struct Slot {\\n        /// @custom:attribute The list of variants\\n        ReportVariantDetails[] value;\\n    }\\n\\n    /// @notice Retrieve the Reports Variants from storage\\n    /// @return The Reports Variants\\n    function get() internal view returns (ReportVariantDetails[] storage) {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value;\\n    }\\n\\n    /// @notice Set the Reports Variants value at index\\n    /// @param _idx The index to set\\n    /// @param _val The value to set\\n    function set(uint256 _idx, ReportVariantDetails memory _val) internal {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_idx] = _val;\\n    }\\n\\n    /// @notice Add a new variant in the list\\n    /// @param _variant The new variant to add\\n    function push(ReportVariantDetails memory _variant) internal {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_variant);\\n    }\\n\\n    /// @notice Retrieve the index of a specific variant, ignoring the count field\\n    /// @param _variant Variant value to lookup\\n    /// @return The index of the variant, -1 if not found\\n    function indexOfReport(bytes32 _variant) internal view returns (int256) {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        for (uint256 idx = 0; idx < r.value.length;) {\\n            if (r.value[idx].variant == _variant) {\\n                return int256(idx);\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return int256(-1);\\n    }\\n\\n    /// @notice Clear all variants from storage\\n    function clear() internal {\\n        bytes32 slot = REPORT_VARIANTS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        delete r.value;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/Withdraw.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IWithdraw.1.sol\\\";\\nimport \\\"./libraries/LibErrors.sol\\\";\\nimport \\\"./libraries/LibUint256.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\n/// @title Withdraw (v1)\\n/// @author Kiln\\n/// @notice This contract is in charge of holding the exit and skimming funds and allow river to pull these funds\\ncontract WithdrawV1 is IWithdrawV1, Initializable {\\n    modifier onlyRiver() {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IWithdrawV1\\n    function initializeWithdrawV1(address _river) external init(0) {\\n        _setRiver(_river);\\n    }\\n\\n    /// @inheritdoc IWithdrawV1\\n    function getCredentials() external view returns (bytes32) {\\n        return bytes32(\\n            uint256(uint160(address(this))) + 0x0100000000000000000000000000000000000000000000000000000000000000\\n        );\\n    }\\n\\n    /// @inheritdoc IWithdrawV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IWithdrawV1\\n    function pullEth(uint256 _max) external onlyRiver {\\n        uint256 amountToPull = LibUint256.min(address(this).balance, _max);\\n        if (amountToPull > 0) {\\n            IRiverV1(payable(RiverAddress.get())).sendCLFunds{value: amountToPull}();\\n        }\\n    }\\n\\n    /// @notice Internal utility to set the river address\\n    /// @param _river The new river address\\n    function _setRiver(address _river) internal {\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/RedeemManager.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IRedeemManager.1.sol\\\";\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\nimport \\\"./libraries/LibUint256.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/redeemManager/RedeemQueue.sol\\\";\\nimport \\\"./state/redeemManager/WithdrawalStack.sol\\\";\\nimport \\\"./state/redeemManager/BufferedExceedingEth.sol\\\";\\nimport \\\"./state/redeemManager/RedeemDemand.sol\\\";\\n\\n/// @title Redeem Manager (v1)\\n/// @author Kiln\\n/// @notice This contract handles the redeem requests of all users\\ncontract RedeemManagerV1 is Initializable, IRedeemManagerV1 {\\n    /// @notice Value returned when resolving a redeem request that is unsatisfied\\n    int64 internal constant RESOLVE_UNSATISFIED = -1;\\n    /// @notice Value returned when resolving a redeem request that is out of bounds\\n    int64 internal constant RESOLVE_OUT_OF_BOUNDS = -2;\\n    /// @notice Value returned when resolving a redeem request that is already claimed\\n    int64 internal constant RESOLVE_FULLY_CLAIMED = -3;\\n\\n    /// @notice Status value returned when fully claiming a redeem request\\n    uint8 internal constant CLAIM_FULLY_CLAIMED = 0;\\n    /// @notice Status value returned when partially claiming a redeem request\\n    uint8 internal constant CLAIM_PARTIALLY_CLAIMED = 1;\\n    /// @notice Status value returned when a redeem request is already claimed and skipped during a claim\\n    uint8 internal constant CLAIM_SKIPPED = 2;\\n\\n    modifier onlyRiver() {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRedeemerOrRiver() {\\n        {\\n            IRiverV1 river = _castedRiver();\\n            if (msg.sender != address(river)) {\\n                IAllowlistV1(river.getAllowlist()).onlyAllowed(msg.sender, LibAllowlistMasks.REDEEM_MASK);\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRedeemer() {\\n        {\\n            IRiverV1 river = _castedRiver();\\n            IAllowlistV1(river.getAllowlist()).onlyAllowed(msg.sender, LibAllowlistMasks.REDEEM_MASK);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function initializeRedeemManagerV1(address _river) external init(0) {\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRedeemRequestCount() external view returns (uint256) {\\n        return RedeemQueue.get().length;\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRedeemRequestDetails(uint32 _redeemRequestId)\\n        external\\n        view\\n        returns (RedeemQueue.RedeemRequest memory)\\n    {\\n        return RedeemQueue.get()[_redeemRequestId];\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getWithdrawalEventCount() external view returns (uint256) {\\n        return WithdrawalStack.get().length;\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getWithdrawalEventDetails(uint32 _withdrawalEventId)\\n        external\\n        view\\n        returns (WithdrawalStack.WithdrawalEvent memory)\\n    {\\n        return WithdrawalStack.get()[_withdrawalEventId];\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getBufferedExceedingEth() external view returns (uint256) {\\n        return BufferedExceedingEth.get();\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function getRedeemDemand() external view returns (uint256) {\\n        return RedeemDemand.get();\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function resolveRedeemRequests(uint32[] calldata _redeemRequestIds)\\n        external\\n        view\\n        returns (int64[] memory withdrawalEventIds)\\n    {\\n        withdrawalEventIds = new int64[](_redeemRequestIds.length);\\n        WithdrawalStack.WithdrawalEvent memory lastWithdrawalEvent;\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n        uint256 withdrawalEventsLength = withdrawalEvents.length;\\n        if (withdrawalEventsLength > 0) {\\n            lastWithdrawalEvent = withdrawalEvents[withdrawalEventsLength - 1];\\n        }\\n        for (uint256 idx = 0; idx < _redeemRequestIds.length; ++idx) {\\n            withdrawalEventIds[idx] = _resolveRedeemRequestId(_redeemRequestIds[idx], lastWithdrawalEvent);\\n        }\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function requestRedeem(uint256 _lsETHAmount, address _recipient)\\n        external\\n        onlyRedeemerOrRiver\\n        returns (uint32 redeemRequestId)\\n    {\\n        return _requestRedeem(_lsETHAmount, _recipient);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function requestRedeem(uint256 _lsETHAmount) external onlyRedeemer returns (uint32 redeemRequestId) {\\n        return _requestRedeem(_lsETHAmount, msg.sender);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function claimRedeemRequests(\\n        uint32[] calldata redeemRequestIds,\\n        uint32[] calldata withdrawalEventIds,\\n        bool skipAlreadyClaimed,\\n        uint16 _depth\\n    ) external returns (uint8[] memory claimStatuses) {\\n        return _claimRedeemRequests(redeemRequestIds, withdrawalEventIds, skipAlreadyClaimed, _depth);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function claimRedeemRequests(uint32[] calldata _redeemRequestIds, uint32[] calldata _withdrawalEventIds)\\n        external\\n        returns (uint8[] memory claimStatuses)\\n    {\\n        return _claimRedeemRequests(_redeemRequestIds, _withdrawalEventIds, true, type(uint16).max);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function reportWithdraw(uint256 _lsETHWithdrawable) external payable onlyRiver {\\n        uint256 redeemDemand = RedeemDemand.get();\\n        if (_lsETHWithdrawable > redeemDemand) {\\n            revert WithdrawalExceedsRedeemDemand(_lsETHWithdrawable, redeemDemand);\\n        }\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n        uint32 withdrawalEventId = uint32(withdrawalEvents.length);\\n        uint256 height = 0;\\n        uint256 msgValue = msg.value;\\n        if (withdrawalEventId != 0) {\\n            WithdrawalStack.WithdrawalEvent memory previousWithdrawalEvent = withdrawalEvents[withdrawalEventId - 1];\\n            height = previousWithdrawalEvent.height + previousWithdrawalEvent.amount;\\n        }\\n        withdrawalEvents.push(\\n            WithdrawalStack.WithdrawalEvent({height: height, amount: _lsETHWithdrawable, withdrawnEth: msgValue})\\n        );\\n        _setRedeemDemand(redeemDemand - _lsETHWithdrawable);\\n        emit ReportedWithdrawal(height, _lsETHWithdrawable, msgValue, withdrawalEventId);\\n    }\\n\\n    /// @inheritdoc IRedeemManagerV1\\n    function pullExceedingEth(uint256 _max) external onlyRiver {\\n        uint256 amountToSend = LibUint256.min(BufferedExceedingEth.get(), _max);\\n        if (amountToSend > 0) {\\n            BufferedExceedingEth.set(BufferedExceedingEth.get() - amountToSend);\\n            _castedRiver().sendRedeemManagerExceedingFunds{value: amountToSend}();\\n        }\\n    }\\n\\n    /// @notice Internal utility to load and cast the River address\\n    /// @return The casted river address\\n    function _castedRiver() internal view returns (IRiverV1) {\\n        return IRiverV1(payable(RiverAddress.get()));\\n    }\\n\\n    /// @notice Internal utility to verify if a redeem request and a withdrawal event are matching\\n    /// @param _redeemRequest The loaded redeem request\\n    /// @param _withdrawalEvent The load withdrawal event\\n    /// @return True if matching\\n    function _isMatch(\\n        RedeemQueue.RedeemRequest memory _redeemRequest,\\n        WithdrawalStack.WithdrawalEvent memory _withdrawalEvent\\n    ) internal pure returns (bool) {\\n        return (\\n            _redeemRequest.height < _withdrawalEvent.height + _withdrawalEvent.amount\\n                && _redeemRequest.height >= _withdrawalEvent.height\\n        );\\n    }\\n\\n    /// @notice Internal utility to perform a dichotomic search of the withdrawal event to use to claim the redeem request\\n    /// @param _redeemRequest The redeem request to resolve\\n    /// @return The matching withdrawal event\\n    function _performDichotomicResolution(RedeemQueue.RedeemRequest memory _redeemRequest)\\n        internal\\n        view\\n        returns (int64)\\n    {\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n\\n        int64 max = int64(int256(WithdrawalStack.get().length - 1));\\n\\n        if (_isMatch(_redeemRequest, withdrawalEvents[uint64(max)])) {\\n            return max;\\n        }\\n\\n        int64 min = 0;\\n\\n        if (_isMatch(_redeemRequest, withdrawalEvents[uint64(min)])) {\\n            return min;\\n        }\\n\\n        // we start a dichotomic search between min and max\\n        while (min != max) {\\n            int64 mid = (min + max) / 2;\\n\\n            // we identify and verify that the middle element is not matching\\n            WithdrawalStack.WithdrawalEvent memory midWithdrawalEvent = withdrawalEvents[uint64(mid)];\\n            if (_isMatch(_redeemRequest, midWithdrawalEvent)) {\\n                return mid;\\n            }\\n\\n            // depending on the position of the middle element, we update max or min to get our min max range\\n            // closer to our redeem request position\\n            if (_redeemRequest.height < midWithdrawalEvent.height) {\\n                max = mid;\\n            } else {\\n                min = mid;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    /// @notice Internal utility to resolve a redeem request and retrieve its satisfying withdrawal event id, or identify possible errors\\n    /// @param _redeemRequestId The redeem request id\\n    /// @param _lastWithdrawalEvent The last withdrawal event loaded in memory\\n    /// @return withdrawalEventId The id of the withdrawal event matching the redeem request or error code\\n    function _resolveRedeemRequestId(\\n        uint32 _redeemRequestId,\\n        WithdrawalStack.WithdrawalEvent memory _lastWithdrawalEvent\\n    ) internal view returns (int64 withdrawalEventId) {\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        // if the redeem request id is >= than the size of requests, we know it's out of bounds and doesn't exist\\n        if (_redeemRequestId >= redeemRequests.length) {\\n            return RESOLVE_OUT_OF_BOUNDS;\\n        }\\n        RedeemQueue.RedeemRequest memory redeemRequest = redeemRequests[_redeemRequestId];\\n        // if the redeem request remaining amount is 0, we know that the request has been entirely claimed\\n        if (redeemRequest.amount == 0) {\\n            return RESOLVE_FULLY_CLAIMED;\\n        }\\n        // if there are no existing withdrawal events or if the height of the redeem request is higher than the height and\\n        // amount of the last withdrawal element, we know that the redeem request is not yet satisfied\\n        if (\\n            WithdrawalStack.get().length == 0\\n                || (_lastWithdrawalEvent.height + _lastWithdrawalEvent.amount) <= redeemRequest.height\\n        ) {\\n            return RESOLVE_UNSATISFIED;\\n        }\\n        // we know for sure that the redeem request has funds yet to be claimed and there is a withdrawal event we need to identify\\n        // that would allow the user to claim the redeem request\\n        return _performDichotomicResolution(redeemRequest);\\n    }\\n\\n    /// @notice Perform a new redeem request for the specified recipient\\n    /// @param _lsETHAmount The amount of LsETH to redeem\\n    /// @param _recipient The recipient owning the request\\n    /// @return redeemRequestId The id of the newly created redeem request\\n    function _requestRedeem(uint256 _lsETHAmount, address _recipient) internal returns (uint32 redeemRequestId) {\\n        LibSanitize._notZeroAddress(_recipient);\\n        if (_lsETHAmount == 0) {\\n            revert InvalidZeroAmount();\\n        }\\n        if (!_castedRiver().transferFrom(msg.sender, address(this), _lsETHAmount)) {\\n            revert TransferError();\\n        }\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        redeemRequestId = uint32(redeemRequests.length);\\n        uint256 height = 0;\\n        if (redeemRequestId != 0) {\\n            RedeemQueue.RedeemRequest memory previousRedeemRequest = redeemRequests[redeemRequestId - 1];\\n            height = previousRedeemRequest.height + previousRedeemRequest.amount;\\n        }\\n\\n        uint256 maxRedeemableEth = _castedRiver().underlyingBalanceFromShares(_lsETHAmount);\\n\\n        redeemRequests.push(\\n            RedeemQueue.RedeemRequest({\\n                height: height,\\n                amount: _lsETHAmount,\\n                owner: _recipient,\\n                maxRedeemableEth: maxRedeemableEth\\n            })\\n        );\\n\\n        _setRedeemDemand(RedeemDemand.get() + _lsETHAmount);\\n\\n        emit RequestedRedeem(_recipient, height, _lsETHAmount, maxRedeemableEth, redeemRequestId);\\n    }\\n\\n    /// @notice Internal structure used to optimize stack usage in _claimRedeemRequest\\n    struct ClaimRedeemRequestParameters {\\n        /// @custom:attribute The id of the redeem request to claim\\n        uint32 redeemRequestId;\\n        /// @custom:attribute The structure of the redeem request to claim\\n        RedeemQueue.RedeemRequest redeemRequest;\\n        /// @custom:attribute The id of the withdrawal event to use to claim the redeem request\\n        uint32 withdrawalEventId;\\n        /// @custom:attribute The structure of the withdrawal event to use to claim the redeem request\\n        WithdrawalStack.WithdrawalEvent withdrawalEvent;\\n        /// @custom:attribute The count of withdrawal events\\n        uint32 withdrawalEventCount;\\n        /// @custom:attribute The current depth of the recursive call\\n        uint16 depth;\\n        /// @custom:attribute The amount of LsETH redeemed/matched, needs to be reset to 0 for each call/before calling the recursive function\\n        uint256 lsETHAmount;\\n        /// @custom:attribute The amount of eth redeemed/matched, needs to be rest to 0 for each call/before calling the recursive function\\n        uint256 ethAmount;\\n    }\\n\\n    /// @notice Internal structure used to optimize stack usage in _claimRedeemRequest\\n    struct ClaimRedeemRequestInternalVariables {\\n        /// @custom:attribute The eth amount claimed by the user\\n        uint256 ethAmount;\\n        /// @custom:attribute The amount of LsETH matched during this step\\n        uint256 matchingAmount;\\n        /// @custom:attribute The amount of eth redirected to the exceeding eth buffer\\n        uint256 exceedingEthAmount;\\n    }\\n\\n    /// @notice Internal utility to save a redeem request to storage\\n    /// @param _params The parameters of the claim redeem request call\\n    function _saveRedeemRequest(ClaimRedeemRequestParameters memory _params) internal {\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        redeemRequests[_params.redeemRequestId].height = _params.redeemRequest.height;\\n        redeemRequests[_params.redeemRequestId].amount = _params.redeemRequest.amount;\\n        redeemRequests[_params.redeemRequestId].maxRedeemableEth = _params.redeemRequest.maxRedeemableEth;\\n    }\\n\\n    /// @notice Internal utility to claim a redeem request if possible\\n    /// @dev Will call itself recursively if the redeem requests overflows its matching withdrawal event\\n    /// @param _params The parameters of the claim redeem request call\\n    function _claimRedeemRequest(ClaimRedeemRequestParameters memory _params) internal {\\n        ClaimRedeemRequestInternalVariables memory vars;\\n        {\\n            uint256 withdrawalEventEndPosition = _params.withdrawalEvent.height + _params.withdrawalEvent.amount;\\n\\n            // it can occur that the redeem request is overlapping the provided withdrawal event\\n            // the amount that is matched in the withdrawal event is adapted depending on this\\n            vars.matchingAmount =\\n                LibUint256.min(_params.redeemRequest.amount, withdrawalEventEndPosition - _params.redeemRequest.height);\\n            // we can now compute the equivalent eth amount based on the withdrawal event details\\n            vars.ethAmount =\\n                (vars.matchingAmount * _params.withdrawalEvent.withdrawnEth) / _params.withdrawalEvent.amount;\\n\\n            // as each request has a maximum withdrawable amount, we verify that the eth amount is not exceeding this amount, pro rata\\n            // the amount that is matched\\n            uint256 maxRedeemableEthAmount =\\n                (vars.matchingAmount * _params.redeemRequest.maxRedeemableEth) / _params.redeemRequest.amount;\\n\\n            if (maxRedeemableEthAmount < vars.ethAmount) {\\n                vars.exceedingEthAmount = vars.ethAmount - maxRedeemableEthAmount;\\n                BufferedExceedingEth.set(BufferedExceedingEth.get() + vars.exceedingEthAmount);\\n                vars.ethAmount = maxRedeemableEthAmount;\\n            }\\n\\n            // height and amount are updated to reflect the amount that was matched.\\n            // we will always keep this invariant true oldRequest.height + oldRequest.amount == newRequest.height + newRequest.amount\\n            // this also means that if the request wasn't entirely matched, it will now be automatically be assigned to the next\\n            // withdrawal event in the queue, because height is updated based on the amount matched and is now equal to the height\\n            // of the next withdrawal event\\n            // the end position of a redeem request (height + amount) is an invariant that never changes throughout the lifetime of a request\\n            // this end position is used to define the starting position of the next redeem request\\n            _params.redeemRequest.height += vars.matchingAmount;\\n            _params.redeemRequest.amount -= vars.matchingAmount;\\n            _params.redeemRequest.maxRedeemableEth -= vars.ethAmount;\\n\\n            _params.lsETHAmount += vars.matchingAmount;\\n            _params.ethAmount += vars.ethAmount;\\n\\n            // this event signals that an amount has been matched from a redeem request on a withdrawal event\\n            // this event can be triggered several times for the same redeem request, depending on its size and\\n            // how many withdrawal events it overlaps.\\n            emit SatisfiedRedeemRequest(\\n                _params.redeemRequestId,\\n                _params.withdrawalEventId,\\n                vars.matchingAmount,\\n                vars.ethAmount,\\n                _params.redeemRequest.amount,\\n                vars.exceedingEthAmount\\n            );\\n        }\\n\\n        // in the case where we haven't claimed all the redeem request AND that there are other withdrawal events\\n        // available next in the stack, we load the next withdrawal event and call this method recursively\\n        // also we stop the claim process if the claim depth is about to be 0\\n        if (\\n            _params.redeemRequest.amount > 0 && _params.withdrawalEventId + 1 < _params.withdrawalEventCount\\n                && _params.depth > 0\\n        ) {\\n            WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n\\n            ++_params.withdrawalEventId;\\n            _params.withdrawalEvent = withdrawalEvents[_params.withdrawalEventId];\\n            --_params.depth;\\n\\n            _claimRedeemRequest(_params);\\n        } else {\\n            // if we end up here, we either claimed everything or we reached the end of the withdrawal event stack\\n            // in this case we save the current redeem request state to storage and return the status according to the\\n            // remaining claimable amount on the redeem request\\n            _saveRedeemRequest(_params);\\n        }\\n    }\\n\\n    /// @notice Internal utility to claim several redeem requests at once\\n    /// @param _redeemRequestIds The list of redeem requests to claim\\n    /// @param _withdrawalEventIds The list of withdrawal events to use for each redeem request. Should have the same length.\\n    /// @param _skipAlreadyClaimed True if the system should skip redeem requests already claimed, otherwise will revert\\n    /// @param _depth The depth of the recursion to use when claiming a redeem request\\n    /// @return claimStatuses The claim statuses for each redeem request\\n    function _claimRedeemRequests(\\n        uint32[] calldata _redeemRequestIds,\\n        uint32[] calldata _withdrawalEventIds,\\n        bool _skipAlreadyClaimed,\\n        uint16 _depth\\n    ) internal returns (uint8[] memory claimStatuses) {\\n        uint256 redeemRequestIdsLength = _redeemRequestIds.length;\\n        if (redeemRequestIdsLength != _withdrawalEventIds.length) {\\n            revert IncompatibleArrayLengths();\\n        }\\n        claimStatuses = new uint8[](redeemRequestIdsLength);\\n\\n        RedeemQueue.RedeemRequest[] storage redeemRequests = RedeemQueue.get();\\n        WithdrawalStack.WithdrawalEvent[] storage withdrawalEvents = WithdrawalStack.get();\\n\\n        ClaimRedeemRequestParameters memory params;\\n        params.withdrawalEventCount = uint32(withdrawalEvents.length);\\n        uint32 redeemRequestCount = uint32(redeemRequests.length);\\n\\n        for (uint256 idx = 0; idx < redeemRequestIdsLength;) {\\n            // both ids are loaded into params\\n            params.redeemRequestId = _redeemRequestIds[idx];\\n            params.withdrawalEventId = _withdrawalEventIds[idx];\\n\\n            // we start by checking that the id is not out of bounds for the redeem requests\\n            if (params.redeemRequestId >= redeemRequestCount) {\\n                revert RedeemRequestOutOfBounds(params.redeemRequestId);\\n            }\\n\\n            // we check that the withdrawal event id is not out of bounds\\n            if (params.withdrawalEventId >= params.withdrawalEventCount) {\\n                revert WithdrawalEventOutOfBounds(params.withdrawalEventId);\\n            }\\n\\n            // we load the redeem request in memory\\n            params.redeemRequest = redeemRequests[_redeemRequestIds[idx]];\\n\\n            // we check that the redeem request is not already claimed\\n            if (params.redeemRequest.amount == 0) {\\n                if (_skipAlreadyClaimed) {\\n                    claimStatuses[idx] = CLAIM_SKIPPED;\\n                    unchecked {\\n                        ++idx;\\n                    }\\n                    continue;\\n                }\\n                revert RedeemRequestAlreadyClaimed(params.redeemRequestId);\\n            }\\n\\n            // we load the withdrawal event in memory\\n            params.withdrawalEvent = withdrawalEvents[_withdrawalEventIds[idx]];\\n\\n            // now that both entities are loaded in memory, we verify that they indeed match, otherwise we revert\\n            if (!_isMatch(params.redeemRequest, params.withdrawalEvent)) {\\n                revert DoesNotMatch(params.redeemRequestId, params.withdrawalEventId);\\n            }\\n\\n            params.depth = _depth;\\n            params.ethAmount = 0;\\n            params.lsETHAmount = 0;\\n\\n            _claimRedeemRequest(params);\\n\\n            claimStatuses[idx] = params.redeemRequest.amount == 0 ? CLAIM_FULLY_CLAIMED : CLAIM_PARTIALLY_CLAIMED;\\n\\n            {\\n                (bool success, bytes memory rdata) = params.redeemRequest.owner.call{value: params.ethAmount}(\\\"\\\");\\n                if (!success) {\\n                    revert ClaimRedeemFailed(params.redeemRequest.owner, rdata);\\n                }\\n            }\\n            emit ClaimedRedeemRequest(\\n                _redeemRequestIds[idx],\\n                params.redeemRequest.owner,\\n                params.ethAmount,\\n                params.lsETHAmount,\\n                params.redeemRequest.amount\\n            );\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Internal utility to set the redeem demand\\n    /// @param _newValue The new value to set\\n    function _setRedeemDemand(uint256 _newValue) internal {\\n        emit SetRedeemDemand(RedeemDemand.get(), _newValue);\\n        RedeemDemand.set(_newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/redeemManager/BufferedExceedingEth.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Buffered Exceeding Eth storage\\n/// @notice Redeen Manager utility to manage the exceeding ETH with a redeem request\\nlibrary BufferedExceedingEth {\\n    /// @notice Storage slot of the Redeem Buffered Eth\\n    bytes32 internal constant BUFFERED_EXCEEDING_ETH_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.bufferedExceedingEth\\\")) - 1);\\n\\n    /// @notice Retrieve the Redeem Buffered Eth Value\\n    /// @return The Redeem Buffered Eth Value\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BUFFERED_EXCEEDING_ETH_SLOT);\\n    }\\n\\n    /// @notice Sets the Redeem Buffered Eth Value\\n    /// @param newValue The new value\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BUFFERED_EXCEEDING_ETH_SLOT, newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/redeemManager/RedeemDemand.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Redeem Demand storage\\n/// @notice Redeem Manager utility to store the current demand in LsETH\\nlibrary RedeemDemand {\\n    /// @notice Storage slot of the Redeem Demand\\n    bytes32 internal constant REDEEM_DEMAND_SLOT = bytes32(uint256(keccak256(\\\"river.state.redeemDemand\\\")) - 1);\\n\\n    /// @notice Retrieve the Redeem Demand Value\\n    /// @return The Redeem Demand Value\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(REDEEM_DEMAND_SLOT);\\n    }\\n\\n    /// @notice Sets the Redeem Demand Value\\n    /// @param newValue The new value\\n    function set(uint256 newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(REDEEM_DEMAND_SLOT, newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/operatorsRegistry/ValidatorKeys.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibBytes.sol\\\";\\n\\n/// @title Validator Keys Storage\\n/// @notice Utility to manage the validator keys in storage\\nlibrary ValidatorKeys {\\n    /// @notice Storage slot of the Validator Keys\\n    bytes32 internal constant VALIDATOR_KEYS_SLOT = bytes32(uint256(keccak256(\\\"river.state.validatorKeys\\\")) - 1);\\n\\n    /// @notice Length in bytes of a BLS Public Key used for validator deposits\\n    uint256 internal constant PUBLIC_KEY_LENGTH = 48;\\n\\n    /// @notice Length in bytes of a BLS Signature used for validator deposits\\n    uint256 internal constant SIGNATURE_LENGTH = 96;\\n\\n    /// @notice The provided public key is not matching the expected length\\n    error InvalidPublicKey();\\n\\n    /// @notice The provided signature is not matching the expected length\\n    error InvalidSignature();\\n\\n    /// @notice Structure of the Validator Keys in storage\\n    struct Slot {\\n        /// @custom:attribute The mapping from operator index to key index to key value\\n        mapping(uint256 => mapping(uint256 => bytes)) value;\\n    }\\n\\n    /// @notice Retrieve the Validator Key of an operator at a specific index\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx the Validator Key index\\n    /// @return publicKey The Validator Key public key\\n    /// @return signature The Validator Key signature\\n    function get(uint256 _operatorIndex, uint256 _idx)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory signature)\\n    {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        bytes storage entry = r.value[_operatorIndex][_idx];\\n\\n        publicKey = LibBytes.slice(entry, 0, PUBLIC_KEY_LENGTH);\\n        signature = LibBytes.slice(entry, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n    }\\n\\n    /// @notice Retrieve the raw concatenated Validator Keys\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The Validator Key index\\n    /// @return The concatenated public key and signature\\n    function getRaw(uint256 _operatorIndex, uint256 _idx) internal view returns (bytes memory) {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_operatorIndex][_idx];\\n    }\\n\\n    /// @notice Retrieve multiple keys of an operator starting at an index\\n    /// @param _operatorIndex The operator index\\n    /// @param _startIdx The starting index to retrieve the keys from\\n    /// @param _amount The amount of keys to retrieve\\n    /// @return publicKeys The public keys retrieved\\n    /// @return signatures The signatures associated with the public keys\\n    function getKeys(uint256 _operatorIndex, uint256 _startIdx, uint256 _amount)\\n        internal\\n        view\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        publicKeys = new bytes[](_amount);\\n        signatures = new bytes[](_amount);\\n\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n        uint256 idx;\\n        for (; idx < _amount;) {\\n            bytes memory rawCredentials = r.value[_operatorIndex][idx + _startIdx];\\n            publicKeys[idx] = LibBytes.slice(rawCredentials, 0, PUBLIC_KEY_LENGTH);\\n            signatures[idx] = LibBytes.slice(rawCredentials, PUBLIC_KEY_LENGTH, SIGNATURE_LENGTH);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the concatenated Validator Keys at an index for an operator\\n    /// @param _operatorIndex The operator index\\n    /// @param _idx The key index to write on\\n    /// @param _publicKeyAndSignature The concatenated Validator Keys\\n    function set(uint256 _operatorIndex, uint256 _idx, bytes memory _publicKeyAndSignature) internal {\\n        bytes32 slot = VALIDATOR_KEYS_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_operatorIndex][_idx] = _publicKeyAndSignature;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/OperatorsRegistry.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IOperatorRegistry.1.sol\\\";\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\n\\nimport \\\"./libraries/LibUint256.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/operatorsRegistry/Operators.1.sol\\\";\\nimport \\\"./state/operatorsRegistry/Operators.2.sol\\\";\\nimport \\\"./state/operatorsRegistry/ValidatorKeys.sol\\\";\\nimport \\\"./state/operatorsRegistry/TotalValidatorExitsRequested.sol\\\";\\nimport \\\"./state/operatorsRegistry/CurrentValidatorExitsDemand.sol\\\";\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\nimport \\\"./state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.sol\\\";\\nimport \\\"./state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.sol\\\";\\n\\n/// @title Operators Registry (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of operators and their keys\\ncontract OperatorsRegistryV1 is IOperatorsRegistryV1, Initializable, Administrable {\\n    /// @notice Maximum validators given to an operator per selection loop round\\n    uint256 internal constant MAX_VALIDATOR_ATTRIBUTION_PER_ROUND = 5;\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1(address _admin, address _river) external init(0) {\\n        _setAdmin(_admin);\\n        RiverAddress.set(_river);\\n        emit SetRiver(_river);\\n    }\\n\\n    /// @notice Internal migration utility to migrate all operators to OperatorsV2 format\\n    function _migrateOperators_V1_1() internal {\\n        uint256 opCount = OperatorsV1.getCount();\\n\\n        for (uint256 idx = 0; idx < opCount;) {\\n            OperatorsV1.Operator memory oldOperatorValue = OperatorsV1.get(idx);\\n\\n            OperatorsV2.push(\\n                OperatorsV2.Operator({\\n                    limit: uint32(oldOperatorValue.limit),\\n                    funded: uint32(oldOperatorValue.funded),\\n                    requestedExits: 0,\\n                    keys: uint32(oldOperatorValue.keys),\\n                    latestKeysEditBlockNumber: uint64(oldOperatorValue.latestKeysEditBlockNumber),\\n                    active: oldOperatorValue.active,\\n                    name: oldOperatorValue.name,\\n                    operator: oldOperatorValue.operator\\n                })\\n            );\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// MIGRATION: FUNDED VALIDATOR KEY EVENT REBROADCASTING\\n    /// As the event for funded keys was moved from River to this contract because we needed to be able to bind\\n    /// operator indexes to public keys, we need to rebroadcast the past funded validator keys with the new event\\n    /// to keep retro-compatibility\\n\\n    /// Emitted when the event rebroadcasting is done and we attempt to broadcast new events\\n    error FundedKeyEventMigrationComplete();\\n\\n    /// Utility to force the broadcasting of events. Will keep its progress in storage to prevent being DoSed by the number of keys\\n    /// @param _amountToEmit The amount of events to emit at maximum in this call\\n    function forceFundedValidatorKeysEventEmission(uint256 _amountToEmit) external {\\n        uint256 operatorIndex = OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.get();\\n        if (operatorIndex == type(uint256).max) {\\n            revert FundedKeyEventMigrationComplete();\\n        }\\n        if (OperatorsV2.getCount() == 0) {\\n            OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set(type(uint256).max);\\n            return;\\n        }\\n        uint256 keyIndex = OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.get();\\n        while (_amountToEmit > 0 && operatorIndex != type(uint256).max) {\\n            OperatorsV2.Operator memory operator = OperatorsV2.get(operatorIndex);\\n\\n            (bytes[] memory publicKeys,) = ValidatorKeys.getKeys(\\n                operatorIndex, keyIndex, LibUint256.min(_amountToEmit, operator.funded - keyIndex)\\n            );\\n            emit FundedValidatorKeys(operatorIndex, publicKeys, true);\\n            if (keyIndex + publicKeys.length == operator.funded) {\\n                keyIndex = 0;\\n                if (operatorIndex == OperatorsV2.getCount() - 1) {\\n                    operatorIndex = type(uint256).max;\\n                } else {\\n                    ++operatorIndex;\\n                }\\n            } else {\\n                keyIndex += publicKeys.length;\\n            }\\n            _amountToEmit -= publicKeys.length;\\n        }\\n        OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.set(operatorIndex);\\n        OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.set(keyIndex);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function initOperatorsRegistryV1_1() external init(1) {\\n        _migrateOperators_V1_1();\\n    }\\n\\n    /// @notice Prevent unauthorized calls\\n    modifier onlyRiver() virtual {\\n        if (msg.sender != RiverAddress.get()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @notice Prevents anyone except the admin or the given operator to make the call. Also checks if operator is active\\n    /// @notice The admin is able to call this method on behalf of any operator, even if inactive\\n    /// @param _index The index identifying the operator\\n    modifier onlyOperatorOrAdmin(uint256 _index) {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n            return;\\n        }\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        if (!operator.active) {\\n            revert InactiveOperator(_index);\\n        }\\n        if (msg.sender != operator.operator) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getRiver() external view returns (address) {\\n        return RiverAddress.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperator(uint256 _index) external view returns (OperatorsV2.Operator memory) {\\n        return OperatorsV2.get(_index);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorStoppedValidatorCount(uint256 _idx) external view returns (uint32) {\\n        return _getStoppedValidatorsCount(_idx);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getTotalStoppedValidatorCount() external view returns (uint32) {\\n        return _getTotalStoppedValidatorCount();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getTotalValidatorExitsRequested() external view returns (uint256) {\\n        return TotalValidatorExitsRequested.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getCurrentValidatorExitsDemand() external view returns (uint256) {\\n        return CurrentValidatorExitsDemand.get();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getStoppedAndRequestedExitCounts() external view returns (uint32, uint256) {\\n        return\\n            (_getTotalStoppedValidatorCount(), TotalValidatorExitsRequested.get() + CurrentValidatorExitsDemand.get());\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getOperatorCount() external view returns (uint256) {\\n        return OperatorsV2.getCount();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getStoppedValidatorCountPerOperator() external view returns (uint32[] memory) {\\n        uint32[] memory completeList = OperatorsV2.getStoppedValidators();\\n        uint256 listLength = completeList.length;\\n\\n        if (listLength > 0) {\\n            assembly {\\n                // no need to use free memory pointer as we reuse the same memory range\\n\\n                // erase previous word storing length\\n                mstore(completeList, 0)\\n\\n                // move memory pointer up by a word\\n                completeList := add(completeList, 0x20)\\n\\n                // store updated length at new memory pointer location\\n                mstore(completeList, sub(listLength, 1))\\n            }\\n        }\\n\\n        return completeList;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function getValidator(uint256 _operatorIndex, uint256 _validatorIndex)\\n        external\\n        view\\n        returns (bytes memory publicKey, bytes memory signature, bool funded)\\n    {\\n        (publicKey, signature) = ValidatorKeys.get(_operatorIndex, _validatorIndex);\\n        funded = _validatorIndex < OperatorsV2.get(_operatorIndex).funded;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function listActiveOperators() external view returns (OperatorsV2.Operator[] memory) {\\n        return OperatorsV2.getAllActive();\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function reportStoppedValidatorCounts(uint32[] calldata _stoppedValidatorCounts, uint256 _depositedValidatorCount)\\n        external\\n        onlyRiver\\n    {\\n        _setStoppedValidatorCounts(_stoppedValidatorCounts, _depositedValidatorCount);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addOperator(string calldata _name, address _operator) external onlyAdmin returns (uint256) {\\n        OperatorsV2.Operator memory newOperator = OperatorsV2.Operator({\\n            active: true,\\n            operator: _operator,\\n            name: _name,\\n            limit: 0,\\n            funded: 0,\\n            keys: 0,\\n            requestedExits: 0,\\n            latestKeysEditBlockNumber: uint64(block.number)\\n        });\\n\\n        uint256 operatorIndex = OperatorsV2.push(newOperator) - 1;\\n\\n        emit AddedOperator(operatorIndex, _name, _operator);\\n        return operatorIndex;\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorAddress(uint256 _index, address _newOperatorAddress) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notZeroAddress(_newOperatorAddress);\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        operator.operator = _newOperatorAddress;\\n\\n        emit SetOperatorAddress(_index, _newOperatorAddress);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorName(uint256 _index, string calldata _newName) external onlyOperatorOrAdmin(_index) {\\n        LibSanitize._notEmptyString(_newName);\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        operator.name = _newName;\\n\\n        emit SetOperatorName(_index, _newName);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorStatus(uint256 _index, bool _newStatus) external onlyAdmin {\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n        operator.active = _newStatus;\\n\\n        emit SetOperatorStatus(_index, _newStatus);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function setOperatorLimits(\\n        uint256[] calldata _operatorIndexes,\\n        uint32[] calldata _newLimits,\\n        uint256 _snapshotBlock\\n    ) external onlyAdmin {\\n        if (_operatorIndexes.length != _newLimits.length) {\\n            revert InvalidArrayLengths();\\n        }\\n        if (_operatorIndexes.length == 0) {\\n            revert InvalidEmptyArray();\\n        }\\n        for (uint256 idx = 0; idx < _operatorIndexes.length;) {\\n            uint256 operatorIndex = _operatorIndexes[idx];\\n            uint32 newLimit = _newLimits[idx];\\n\\n            // prevents duplicates\\n            if (idx > 0 && !(operatorIndex > _operatorIndexes[idx - 1])) {\\n                revert UnorderedOperatorList();\\n            }\\n\\n            OperatorsV2.Operator storage operator = OperatorsV2.get(operatorIndex);\\n\\n            uint32 currentLimit = operator.limit;\\n            if (newLimit == currentLimit) {\\n                emit OperatorLimitUnchanged(operatorIndex, newLimit);\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // we enter this condition if the operator edited its keys after the off-chain key audit was made\\n            // we will skip any limit update on that operator unless it was a decrease in the initial limit\\n            if (_snapshotBlock < operator.latestKeysEditBlockNumber && newLimit > currentLimit) {\\n                emit OperatorEditsAfterSnapshot(\\n                    operatorIndex, currentLimit, newLimit, operator.latestKeysEditBlockNumber, _snapshotBlock\\n                );\\n                unchecked {\\n                    ++idx;\\n                }\\n                continue;\\n            }\\n\\n            // otherwise, we check for limit invariants that shouldn't happen if the off-chain key audit\\n            // was made properly, and if everything is respected, we update the limit\\n\\n            if (newLimit > operator.keys) {\\n                revert OperatorLimitTooHigh(operatorIndex, newLimit, operator.keys);\\n            }\\n\\n            if (newLimit < operator.funded) {\\n                revert OperatorLimitTooLow(operatorIndex, newLimit, operator.funded);\\n            }\\n\\n            operator.limit = newLimit;\\n            emit SetOperatorLimit(operatorIndex, newLimit);\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function addValidators(uint256 _index, uint32 _keyCount, bytes calldata _publicKeysAndSignatures)\\n        external\\n        onlyOperatorOrAdmin(_index)\\n    {\\n        if (_keyCount == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        if (\\n            _publicKeysAndSignatures.length\\n                != _keyCount * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH)\\n        ) {\\n            revert InvalidKeysLength();\\n        }\\n\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        for (uint256 idx = 0; idx < _keyCount;) {\\n            bytes memory publicKeyAndSignature = LibBytes.slice(\\n                _publicKeysAndSignatures,\\n                idx * (ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH),\\n                ValidatorKeys.PUBLIC_KEY_LENGTH + ValidatorKeys.SIGNATURE_LENGTH\\n            );\\n            ValidatorKeys.set(_index, operator.keys + idx, publicKeyAndSignature);\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        OperatorsV2.setKeys(_index, operator.keys + _keyCount);\\n\\n        emit AddedValidatorKeys(_index, _publicKeysAndSignatures);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function removeValidators(uint256 _index, uint256[] calldata _indexes) external onlyOperatorOrAdmin(_index) {\\n        uint256 indexesLength = _indexes.length;\\n        if (indexesLength == 0) {\\n            revert InvalidKeyCount();\\n        }\\n\\n        OperatorsV2.Operator storage operator = OperatorsV2.get(_index);\\n\\n        uint32 totalKeys = operator.keys;\\n\\n        if (!(_indexes[0] < totalKeys)) {\\n            revert InvalidIndexOutOfBounds();\\n        }\\n\\n        uint256 lastIndex = _indexes[indexesLength - 1];\\n\\n        if (lastIndex < operator.funded) {\\n            revert InvalidFundedKeyDeletionAttempt();\\n        }\\n\\n        bool limitEqualsKeyCount = operator.keys == operator.limit;\\n        OperatorsV2.setKeys(_index, totalKeys - uint32(indexesLength));\\n\\n        uint256 idx;\\n        for (; idx < indexesLength;) {\\n            uint256 keyIndex = _indexes[idx];\\n\\n            if (idx > 0 && !(keyIndex < _indexes[idx - 1])) {\\n                revert InvalidUnsortedIndexes();\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n\\n            uint256 lastKeyIndex = totalKeys - idx;\\n\\n            (bytes memory removedPublicKey,) = ValidatorKeys.get(_index, keyIndex);\\n            (bytes memory lastPublicKeyAndSignature) = ValidatorKeys.getRaw(_index, lastKeyIndex);\\n            ValidatorKeys.set(_index, keyIndex, lastPublicKeyAndSignature);\\n            ValidatorKeys.set(_index, lastKeyIndex, new bytes(0));\\n\\n            emit RemovedValidatorKey(_index, removedPublicKey);\\n        }\\n\\n        if (limitEqualsKeyCount) {\\n            operator.limit = operator.keys;\\n        } else if (lastIndex < operator.limit) {\\n            operator.limit = uint32(lastIndex);\\n        }\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function pickNextValidatorsToDeposit(uint256 _count)\\n        external\\n        onlyRiver\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        return _pickNextValidatorsToDepositFromActiveOperators(_count);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function requestValidatorExits(uint256 _count) external {\\n        uint256 currentValidatorExitsDemand = CurrentValidatorExitsDemand.get();\\n        uint256 exitRequestsToPerform = LibUint256.min(currentValidatorExitsDemand, _count);\\n        if (exitRequestsToPerform == 0) {\\n            revert NoExitRequestsToPerform();\\n        }\\n        uint256 savedCurrentValidatorExitsDemand = currentValidatorExitsDemand;\\n        currentValidatorExitsDemand -= _pickNextValidatorsToExitFromActiveOperators(exitRequestsToPerform);\\n\\n        _setCurrentValidatorExitsDemand(savedCurrentValidatorExitsDemand, currentValidatorExitsDemand);\\n    }\\n\\n    /// @inheritdoc IOperatorsRegistryV1\\n    function demandValidatorExits(uint256 _count, uint256 _depositedValidatorCount) external onlyRiver {\\n        uint256 currentValidatorExitsDemand = CurrentValidatorExitsDemand.get();\\n        uint256 totalValidatorExitsRequested = TotalValidatorExitsRequested.get();\\n        _count = LibUint256.min(\\n            _count, _depositedValidatorCount - (totalValidatorExitsRequested + currentValidatorExitsDemand)\\n        );\\n        if (_count > 0) {\\n            _setCurrentValidatorExitsDemand(currentValidatorExitsDemand, currentValidatorExitsDemand + _count);\\n        }\\n    }\\n\\n    /// @notice Internal utility to retrieve the total stopped validator count\\n    /// @return The total stopped validator count\\n    function _getTotalStoppedValidatorCount() internal view returns (uint32) {\\n        uint32[] storage stoppedValidatorCounts = OperatorsV2.getStoppedValidators();\\n        if (stoppedValidatorCounts.length == 0) {\\n            return 0;\\n        }\\n        return stoppedValidatorCounts[0];\\n    }\\n\\n    /// @notice Internal utility to set the current validator exits demand\\n    /// @param _currentValue The current value\\n    /// @param _newValue The new value\\n    function _setCurrentValidatorExitsDemand(uint256 _currentValue, uint256 _newValue) internal {\\n        CurrentValidatorExitsDemand.set(_newValue);\\n        emit SetCurrentValidatorExitsDemand(_currentValue, _newValue);\\n    }\\n\\n    /// @notice Internal structure to hold variables for the _setStoppedValidatorCounts method\\n    struct SetStoppedValidatorCountInternalVars {\\n        uint256 stoppedValidatorCountsLength;\\n        uint32[] currentStoppedValidatorCounts;\\n        uint256 currentStoppedValidatorCountsLength;\\n        uint32 totalStoppedValidatorCount;\\n        uint32 count;\\n        uint256 currentValidatorExitsDemand;\\n        uint256 cachedCurrentValidatorExitsDemand;\\n        uint256 totalRequestedExits;\\n        uint256 cachedTotalRequestedExits;\\n    }\\n\\n    /// @notice Internal utiltiy to set the stopped validator array after sanity checks\\n    /// @param _stoppedValidatorCounts The stopped validators counts for every operator + the total count in index 0\\n    /// @param _depositedValidatorCount The current deposited validator count\\n    function _setStoppedValidatorCounts(uint32[] calldata _stoppedValidatorCounts, uint256 _depositedValidatorCount)\\n        internal\\n    {\\n        SetStoppedValidatorCountInternalVars memory vars;\\n        // we check that the array is not empty\\n        vars.stoppedValidatorCountsLength = _stoppedValidatorCounts.length;\\n        if (vars.stoppedValidatorCountsLength == 0) {\\n            revert InvalidEmptyStoppedValidatorCountsArray();\\n        }\\n\\n        OperatorsV2.Operator[] storage operators = OperatorsV2.getAll();\\n\\n        // we check that the cells containing operator stopped values are no more than the current operator count\\n        if (vars.stoppedValidatorCountsLength - 1 > operators.length) {\\n            revert StoppedValidatorCountsTooHigh();\\n        }\\n\\n        vars.currentStoppedValidatorCounts = OperatorsV2.getStoppedValidators();\\n        vars.currentStoppedValidatorCountsLength = vars.currentStoppedValidatorCounts.length;\\n\\n        // we check that the number of stopped values is not decreasing\\n        if (vars.stoppedValidatorCountsLength < vars.currentStoppedValidatorCountsLength) {\\n            revert StoppedValidatorCountArrayShrinking();\\n        }\\n\\n        vars.totalStoppedValidatorCount = _stoppedValidatorCounts[0];\\n        vars.count = 0;\\n\\n        // create value to track unsollicited validator exits (e.g. to cover cases when Node Operator exit a validator without being requested to)\\n        vars.currentValidatorExitsDemand = CurrentValidatorExitsDemand.get();\\n        vars.cachedCurrentValidatorExitsDemand = vars.currentValidatorExitsDemand;\\n        vars.totalRequestedExits = TotalValidatorExitsRequested.get();\\n        vars.cachedTotalRequestedExits = vars.totalRequestedExits;\\n\\n        uint256 idx = 1;\\n        uint256 unsollicitedExitsSum;\\n        for (; idx < vars.currentStoppedValidatorCountsLength;) {\\n            // if the previous array was long enough, we check that the values are not decreasing\\n            if (_stoppedValidatorCounts[idx] < vars.currentStoppedValidatorCounts[idx]) {\\n                revert StoppedValidatorCountsDecreased();\\n            }\\n\\n            // we check that the count of stopped validators is not above the funded validator count of an operator\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].funded) {\\n                revert StoppedValidatorCountAboveFundedCount(\\n                    idx - 1, _stoppedValidatorCounts[idx], operators[idx - 1].funded\\n                );\\n            }\\n\\n            // if the stopped validator count is greater than its requested exit count, we update the requested exit count\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].requestedExits) {\\n                emit UpdatedRequestedValidatorExitsUponStopped(\\n                    idx - 1, operators[idx - 1].requestedExits, _stoppedValidatorCounts[idx]\\n                );\\n                unsollicitedExitsSum += _stoppedValidatorCounts[idx] - operators[idx - 1].requestedExits;\\n                operators[idx - 1].requestedExits = _stoppedValidatorCounts[idx];\\n            }\\n            emit SetOperatorStoppedValidatorCount(idx - 1, _stoppedValidatorCounts[idx]);\\n\\n            // we recompute the total to ensure it's not an invalid sum\\n            vars.count += _stoppedValidatorCounts[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        // In case of a new operator we do not check against the current stopped validator count (would revert OOB)\\n        for (; idx < vars.stoppedValidatorCountsLength;) {\\n            // we check that the count of stopped validators is not above the funded validator count of an operator\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].funded) {\\n                revert StoppedValidatorCountAboveFundedCount(\\n                    idx - 1, _stoppedValidatorCounts[idx], operators[idx - 1].funded\\n                );\\n            }\\n\\n            // if the stopped validator count is greater than its requested exit count, we update the requested exit count\\n            if (_stoppedValidatorCounts[idx] > operators[idx - 1].requestedExits) {\\n                emit UpdatedRequestedValidatorExitsUponStopped(\\n                    idx - 1, operators[idx - 1].requestedExits, _stoppedValidatorCounts[idx]\\n                );\\n                unsollicitedExitsSum += _stoppedValidatorCounts[idx] - operators[idx - 1].requestedExits;\\n                operators[idx - 1].requestedExits = _stoppedValidatorCounts[idx];\\n            }\\n            emit SetOperatorStoppedValidatorCount(idx - 1, _stoppedValidatorCounts[idx]);\\n\\n            // we recompute the total to ensure it's not an invalid sum\\n            vars.count += _stoppedValidatorCounts[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        vars.totalRequestedExits += unsollicitedExitsSum;\\n        // we decrease the demand, considering unsollicited exits as if they were answering the demand\\n        vars.currentValidatorExitsDemand -= LibUint256.min(unsollicitedExitsSum, vars.currentValidatorExitsDemand);\\n\\n        if (vars.totalRequestedExits != vars.cachedTotalRequestedExits) {\\n            _setTotalValidatorExitsRequested(vars.cachedTotalRequestedExits, vars.totalRequestedExits);\\n        }\\n\\n        if (vars.currentValidatorExitsDemand != vars.cachedCurrentValidatorExitsDemand) {\\n            _setCurrentValidatorExitsDemand(vars.cachedCurrentValidatorExitsDemand, vars.currentValidatorExitsDemand);\\n        }\\n\\n        // we check that the total is matching the sum of the individual values\\n        if (vars.totalStoppedValidatorCount != vars.count) {\\n            revert InvalidStoppedValidatorCountsSum();\\n        }\\n        // we check that the total is not higher than the current deposited validator count\\n        if (vars.totalStoppedValidatorCount > _depositedValidatorCount) {\\n            revert StoppedValidatorCountsTooHigh();\\n        }\\n        // we set the new stopped validators counts\\n        OperatorsV2.setRawStoppedValidators(_stoppedValidatorCounts);\\n        emit UpdatedStoppedValidators(_stoppedValidatorCounts);\\n    }\\n\\n    /// @notice Internal utility to concatenate bytes arrays together\\n    /// @param _arr1 First array\\n    /// @param _arr2 Second array\\n    /// @return The result of the concatenation of _arr1 + _arr2\\n    function _concatenateByteArrays(bytes[] memory _arr1, bytes[] memory _arr2)\\n        internal\\n        pure\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory res = new bytes[](_arr1.length + _arr2.length);\\n        for (uint256 idx = 0; idx < _arr1.length;) {\\n            res[idx] = _arr1[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        for (uint256 idx = 0; idx < _arr2.length;) {\\n            res[idx + _arr1.length] = _arr2[idx];\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n        return res;\\n    }\\n\\n    /// @notice Internal utility to verify if an operator has fundable keys during the selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return True if at least one fundable key is available\\n    function _hasFundableKeys(OperatorsV2.CachedOperator memory _operator) internal pure returns (bool) {\\n        return (_operator.funded + _operator.picked) < _operator.limit;\\n    }\\n\\n    /// @notice Internal utility to retrieve the actual stopped validator count of an operator from the reported array\\n    /// @param _operatorIndex The operator index\\n    /// @return The count of stopped validators\\n    function _getStoppedValidatorsCount(uint256 _operatorIndex) internal view returns (uint32) {\\n        return OperatorsV2._getStoppedValidatorCountAtIndex(OperatorsV2.getStoppedValidators(), _operatorIndex);\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the deposit selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveValidatorCountForDeposits(OperatorsV2.CachedOperator memory _operator)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return (_operator.funded + _operator.picked) - _getStoppedValidatorsCount(_operator.index);\\n    }\\n\\n    /// @notice Internal utility to retrieve _count or lower fundable keys\\n    /// @dev The selection process starts by retrieving the full list of active operators with at least one fundable key.\\n    /// @dev\\n    /// @dev An operator is considered to have at least one fundable key when their staking limit is higher than their funded key count.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > operator.funded\\n    /// @dev\\n    /// @dev The internal utility will loop on all operators and select the operator with the lowest active validator count.\\n    /// @dev The active validator count is computed by subtracting the stopped validator count to the funded validator count.\\n    /// @dev\\n    /// @dev    activeValidatorCount = operator.funded - operator.stopped\\n    /// @dev\\n    /// @dev During the selection process, we keep in memory all previously selected operators and the number of given validators inside a field\\n    /// @dev called picked that only exists on the CachedOperator structure in memory.\\n    /// @dev\\n    /// @dev    isFundable = operator.active && operator.limit > (operator.funded + operator.picked)\\n    /// @dev    activeValidatorCount = (operator.funded + operator.picked) - operator.stopped\\n    /// @dev\\n    /// @dev When we reach the requested key count or when all available keys are used, we perform a final loop on all the operators and extract keys\\n    /// @dev if any operator has a positive picked count. We then update the storage counters and return the arrays with the public keys and signatures.\\n    /// @param _count Amount of keys required. Contract is expected to send _count or lower.\\n    /// @return publicKeys An array of fundable public keys\\n    /// @return signatures An array of signatures linked to the public keys\\n    function _pickNextValidatorsToDepositFromActiveOperators(uint256 _count)\\n        internal\\n        returns (bytes[] memory publicKeys, bytes[] memory signatures)\\n    {\\n        (OperatorsV2.CachedOperator[] memory operators, uint256 fundableOperatorCount) = OperatorsV2.getAllFundable();\\n\\n        if (fundableOperatorCount == 0) {\\n            return (new bytes[](0), new bytes[](0));\\n        }\\n\\n        while (_count > 0) {\\n            // loop on operators to find the first that has fundable keys, taking into account previous loop round attributions\\n            uint256 selectedOperatorIndex = 0;\\n            for (; selectedOperatorIndex < fundableOperatorCount;) {\\n                if (_hasFundableKeys(operators[selectedOperatorIndex])) {\\n                    break;\\n                }\\n                unchecked {\\n                    ++selectedOperatorIndex;\\n                }\\n            }\\n\\n            // if we reach the end, we have allocated all keys\\n            if (selectedOperatorIndex == fundableOperatorCount) {\\n                break;\\n            }\\n\\n            // we start from the next operator and we try to find one that has fundable keys but a lower (funded + picked) - stopped value\\n            for (uint256 idx = selectedOperatorIndex + 1; idx < fundableOperatorCount;) {\\n                if (\\n                    _getActiveValidatorCountForDeposits(operators[idx])\\n                        < _getActiveValidatorCountForDeposits(operators[selectedOperatorIndex])\\n                        && _hasFundableKeys(operators[idx])\\n                ) {\\n                    selectedOperatorIndex = idx;\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we take the smallest value between limit - (funded + picked), _requestedAmount and MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n            uint256 pickedKeyCount = LibUint256.min(\\n                LibUint256.min(\\n                    operators[selectedOperatorIndex].limit\\n                        - (operators[selectedOperatorIndex].funded + operators[selectedOperatorIndex].picked),\\n                    MAX_VALIDATOR_ATTRIBUTION_PER_ROUND\\n                ),\\n                _count\\n            );\\n\\n            // we update the cached picked amount\\n            operators[selectedOperatorIndex].picked += uint32(pickedKeyCount);\\n\\n            // we update the requested amount count\\n            _count -= pickedKeyCount;\\n        }\\n\\n        // we loop on all operators\\n        for (uint256 idx = 0; idx < fundableOperatorCount; ++idx) {\\n            // if we picked keys on any operator, we extract the keys from storage and concatenate them in the result\\n            // we then update the funded value\\n            if (operators[idx].picked > 0) {\\n                (bytes[] memory _publicKeys, bytes[] memory _signatures) =\\n                    ValidatorKeys.getKeys(operators[idx].index, operators[idx].funded, operators[idx].picked);\\n                emit FundedValidatorKeys(operators[idx].index, _publicKeys, false);\\n                publicKeys = _concatenateByteArrays(publicKeys, _publicKeys);\\n                signatures = _concatenateByteArrays(signatures, _signatures);\\n                (OperatorsV2.get(operators[idx].index)).funded += operators[idx].picked;\\n            }\\n        }\\n    }\\n\\n    /// @notice Internal utility to get the count of active validators during the exit selection process\\n    /// @param _operator The Operator structure in memory\\n    /// @return The count of active validators for the operator\\n    function _getActiveValidatorCountForExitRequests(OperatorsV2.CachedExitableOperator memory _operator)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        return _operator.funded - (_operator.requestedExits + _operator.picked);\\n    }\\n\\n    /// @notice Internal utility to pick the next validator counts to exit for every operator\\n    /// @param _count The count of validators to request exits for\\n    function _pickNextValidatorsToExitFromActiveOperators(uint256 _count) internal returns (uint256) {\\n        (OperatorsV2.CachedExitableOperator[] memory operators, uint256 exitableOperatorCount) =\\n            OperatorsV2.getAllExitable();\\n\\n        if (exitableOperatorCount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 initialExitRequestDemand = _count;\\n        uint256 totalRequestedExitsValue = TotalValidatorExitsRequested.get();\\n        uint256 totalRequestedExitsCopy = totalRequestedExitsValue;\\n\\n        // we loop to find the highest count of active validators, the number of operators that have this amount and the second highest amount\\n        while (_count > 0) {\\n            uint32 highestActiveCount = 0;\\n            uint32 secondHighestActiveCount = 0;\\n            uint32 siblings = 0;\\n\\n            for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n                uint32 activeCount = _getActiveValidatorCountForExitRequests(operators[idx]);\\n\\n                if (activeCount == highestActiveCount) {\\n                    ++siblings;\\n                } else if (activeCount > highestActiveCount) {\\n                    secondHighestActiveCount = highestActiveCount;\\n                    highestActiveCount = activeCount;\\n                    siblings = 1;\\n                } else if (activeCount > secondHighestActiveCount) {\\n                    secondHighestActiveCount = activeCount;\\n                }\\n\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            // we exited all exitable validators\\n            if (highestActiveCount == 0) {\\n                break;\\n            }\\n            // The optimal amount is how much we should dispatch to all the operators with the highest count for them to get the same amount\\n            // of active validators as the second highest count. We then take the minimum between this value and the total we need to exit\\n            uint32 optimalTotalDispatchCount =\\n                uint32(LibUint256.min((highestActiveCount - secondHighestActiveCount) * siblings, _count));\\n\\n            // We lookup the operators again to assign the exit requests\\n            uint256 rest = optimalTotalDispatchCount % siblings;\\n            uint32 baseExitRequestAmount = optimalTotalDispatchCount / siblings;\\n            for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n                if (_getActiveValidatorCountForExitRequests(operators[idx]) == highestActiveCount) {\\n                    uint32 additionalRequestedExits = baseExitRequestAmount + (rest > 0 ? 1 : 0);\\n                    operators[idx].picked += additionalRequestedExits;\\n                    if (rest > 0) {\\n                        --rest;\\n                    }\\n                }\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n\\n            totalRequestedExitsValue += optimalTotalDispatchCount;\\n            _count -= optimalTotalDispatchCount;\\n        }\\n\\n        // We loop over the operators and apply the change, also emit the exit request event\\n        for (uint256 idx = 0; idx < exitableOperatorCount;) {\\n            if (operators[idx].picked > 0) {\\n                uint256 opIndex = operators[idx].index;\\n                uint32 newRequestedExits = operators[idx].requestedExits + operators[idx].picked;\\n\\n                OperatorsV2.get(opIndex).requestedExits = newRequestedExits;\\n                emit RequestedValidatorExits(opIndex, newRequestedExits);\\n            }\\n\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        if (totalRequestedExitsValue != totalRequestedExitsCopy) {\\n            _setTotalValidatorExitsRequested(totalRequestedExitsCopy, totalRequestedExitsValue);\\n        }\\n\\n        return initialExitRequestDemand - _count;\\n    }\\n\\n    /// @notice Internal utility to set the total validator exits requested by the system\\n    /// @param _currentValue The current value of the total validator exits requested\\n    /// @param _newValue The new value of the total validator exits requested\\n    function _setTotalValidatorExitsRequested(uint256 _currentValue, uint256 _newValue) internal {\\n        TotalValidatorExitsRequested.set(_newValue);\\n        emit SetTotalValidatorExitsRequested(_currentValue, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/operatorsRegistry/Operators.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Operators Storage\\n/// @notice Utility to manage the Operators in storage\\n/// @notice This state variable is deprecated and was kept due to migration logic needs\\nlibrary OperatorsV1 {\\n    /// @notice Storage slot of the Operators\\n    bytes32 internal constant OPERATORS_SLOT = bytes32(uint256(keccak256(\\\"river.state.operators\\\")) - 1);\\n\\n    /// @notice The Operator structure in storage\\n    struct Operator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @dev The following values respect this invariant:\\n        /// @dev     keys >= limit >= funded >= stopped\\n\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 stopped;\\n        uint256 latestKeysEditBlockNumber;\\n    }\\n\\n    /// @notice The Operator structure when loaded in memory\\n    struct CachedOperator {\\n        /// @custom:attribute True if the operator is active and allowed to operate on River\\n        bool active;\\n        /// @custom:attribute Display name of the operator\\n        string name;\\n        /// @custom:attribute Address of the operator\\n        address operator;\\n        /// @custom:attribute Staking limit of the operator\\n        uint256 limit;\\n        /// @custom:attribute The count of funded validators\\n        uint256 funded;\\n        /// @custom:attribute The total count of keys of the operator\\n        uint256 keys;\\n        /// @custom:attribute The count of stopped validators\\n        uint256 stopped;\\n        /// @custom:attribute The count of stopped validators. Stopped validators are validators\\n        ///                   that exited the consensus layer (voluntary or slashed)\\n        uint256 index;\\n        /// @custom:attribute The amount of picked keys, buffer used before changing funded in storage\\n        uint256 picked;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotOperator {\\n        /// @custom:attribute Array containing all the operators\\n        Operator[] value;\\n    }\\n\\n    /// @notice The operator was not found\\n    /// @param index The provided index\\n    error OperatorNotFound(uint256 index);\\n\\n    /// @notice Retrieve the operator in storage\\n    /// @param _index The index of the operator\\n    /// @return The Operator structure\\n    function get(uint256 _index) internal view returns (Operator storage) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert OperatorNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Retrieve the operator count in storage\\n    /// @return The count of operators in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Retrieve all the active operators\\n    /// @return The list of active operator structures\\n    function getAllActive() internal view returns (Operator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        Operator[] memory activeOperators = new Operator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (r.value[idx].active) {\\n                activeOperators[activeIdx] = r.value[idx];\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Retrieve all the active and fundable operators\\n    /// @return The list of active and fundable operators\\n    function getAllFundable() internal view returns (CachedOperator[] memory) {\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        uint256 activeCount = 0;\\n        uint256 operatorCount = r.value.length;\\n\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            if (_hasFundableKeys(r.value[idx])) {\\n                unchecked {\\n                    ++activeCount;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        CachedOperator[] memory activeOperators = new CachedOperator[](activeCount);\\n\\n        uint256 activeIdx = 0;\\n        for (uint256 idx = 0; idx < operatorCount;) {\\n            Operator memory op = r.value[idx];\\n            if (_hasFundableKeys(op)) {\\n                activeOperators[activeIdx] = CachedOperator({\\n                    active: op.active,\\n                    name: op.name,\\n                    operator: op.operator,\\n                    limit: op.limit,\\n                    funded: op.funded,\\n                    keys: op.keys,\\n                    stopped: op.stopped,\\n                    index: idx,\\n                    picked: 0\\n                });\\n                unchecked {\\n                    ++activeIdx;\\n                }\\n            }\\n            unchecked {\\n                ++idx;\\n            }\\n        }\\n\\n        return activeOperators;\\n    }\\n\\n    /// @notice Add a new operator in storage\\n    /// @param _newOperator Value of the new operator\\n    /// @return The size of the operator array after the operation\\n    function push(Operator memory _newOperator) internal returns (uint256) {\\n        LibSanitize._notZeroAddress(_newOperator.operator);\\n        LibSanitize._notEmptyString(_newOperator.name);\\n        bytes32 slot = OPERATORS_SLOT;\\n\\n        SlotOperator storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newOperator);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Atomic operation to set the key count and update the latestKeysEditBlockNumber field at the same time\\n    /// @param _index The operator index\\n    /// @param _newKeys The new value for the key count\\n    function setKeys(uint256 _index, uint256 _newKeys) internal {\\n        Operator storage op = get(_index);\\n\\n        op.keys = _newKeys;\\n        op.latestKeysEditBlockNumber = block.number;\\n    }\\n\\n    /// @notice Checks if an operator is active and has fundable keys\\n    /// @param _operator The operator details\\n    /// @return True if active and fundable\\n    function _hasFundableKeys(OperatorsV1.Operator memory _operator) internal pure returns (bool) {\\n        return (_operator.active && _operator.limit > _operator.funded);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/operatorsRegistry/TotalValidatorExitsRequested.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title TotalValidatorExitsRequested Storage\\n/// @notice This value is the amount of performed exit requests, only increased when there is current exit demand\\n/// @notice Utility to manage the TotalValidatorExitsRequested in storage\\nlibrary TotalValidatorExitsRequested {\\n    /// @notice Storage slot of the TotalValidatorExitsRequested\\n    bytes32 internal constant TOTAL_VALIDATOR_EXITS_REQUESTED_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.totalValidatorExitsRequested\\\")) - 1);\\n\\n    /// @notice Retrieve the TotalValidatorExitsRequested\\n    /// @return The TotalValidatorExitsRequested\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(TOTAL_VALIDATOR_EXITS_REQUESTED_SLOT);\\n    }\\n\\n    /// @notice Sets the TotalValidatorExitsRequested\\n    /// @param _newValue New TotalValidatorExitsRequested\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(TOTAL_VALIDATOR_EXITS_REQUESTED_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/operatorsRegistry/CurrentValidatorExitsDemand.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title CurrentValidatorExitsDemand Storage\\n/// @notice This value controls the current demand for exits that still need to be triggered\\n/// @notice in order to notify the operators\\n/// @notice Utility to manage the CurrentValidatorExitsDemand in storage\\nlibrary CurrentValidatorExitsDemand {\\n    /// @notice Storage slot of the CurrentValidatorExitsDemand\\n    bytes32 internal constant CURRENT_VALIDATOR_EXITS_DEMAND_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.currentValidatorExitsDemand\\\")) - 1);\\n\\n    /// @notice Retrieve the CurrentValidatorExitsDemand\\n    /// @return The CurrentValidatorExitsDemand\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(CURRENT_VALIDATOR_EXITS_DEMAND_SLOT);\\n    }\\n\\n    /// @notice Sets the CurrentValidatorExitsDemand\\n    /// @param _newValue New CurrentValidatorExitsDemand\\n    function set(uint256 _newValue) internal {\\n        return LibUnstructuredStorage.setStorageUint256(CURRENT_VALIDATOR_EXITS_DEMAND_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary OperatorsRegistry_FundedKeyEventRebroadcasting_KeyIndex {\\n    bytes32 internal constant KEY_INDEX_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.migration.operatorsRegistry.fundedKeyEventRebroadcasting.keyIndex\\\")) - 1);\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(KEY_INDEX_SLOT);\\n    }\\n\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(KEY_INDEX_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/migration/OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\nlibrary OperatorsRegistry_FundedKeyEventRebroadcasting_OperatorIndex {\\n    bytes32 internal constant OPERATOR_INDEX_SLOT = bytes32(\\n        uint256(keccak256(\\\"river.state.migration.operatorsRegistry.fundedKeyEventRebroadcasting.operatorIndex\\\")) - 1\\n    );\\n\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(OPERATOR_INDEX_SLOT);\\n    }\\n\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(OPERATOR_INDEX_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/ELFeeRecipient.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IELFeeRecipient.1.sol\\\";\\n\\nimport \\\"./libraries/LibUint256.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\n\\n/// @title Execution Layer Fee Recipient (v1)\\n/// @author Kiln\\n/// @notice This contract receives all the execution layer fees from the proposed blocks + bribes\\ncontract ELFeeRecipientV1 is Initializable, IELFeeRecipientV1 {\\n    /// @inheritdoc IELFeeRecipientV1\\n    function initELFeeRecipientV1(address _riverAddress) external init(0) {\\n        RiverAddress.set(_riverAddress);\\n        emit SetRiver(_riverAddress);\\n    }\\n\\n    /// @inheritdoc IELFeeRecipientV1\\n    function pullELFees(uint256 _maxAmount) external {\\n        address river = RiverAddress.get();\\n        if (msg.sender != river) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        uint256 amount = LibUint256.min(_maxAmount, address(this).balance);\\n\\n        if (amount > 0) {\\n            IRiverV1(payable(river)).sendELFees{value: amount}();\\n        }\\n    }\\n\\n    /// @inheritdoc IELFeeRecipientV1\\n    receive() external payable {\\n        this;\\n    }\\n\\n    /// @inheritdoc IELFeeRecipientV1\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/CoverageFund.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IRiver.1.sol\\\";\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\nimport \\\"./interfaces/ICoverageFund.1.sol\\\";\\n\\nimport \\\"./libraries/LibUint256.sol\\\";\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\n\\nimport \\\"./Initializable.sol\\\";\\n\\nimport \\\"./state/shared/RiverAddress.sol\\\";\\nimport \\\"./state/slashingCoverage/BalanceForCoverage.sol\\\";\\n\\n/// @title Coverage Fund (v1)\\n/// @author Kiln\\n/// @notice This contract receive donations for the slashing coverage fund and pull the funds into river\\n/// @notice This contract acts as a temporary buffer for funds that should be pulled in case of a loss of money on the consensus layer due to slashing events.\\n/// @notice There is no fee taken on these funds, they are entirely distributed to the LsETH holders, and no shares will get minted.\\n/// @notice Funds will be distributed by increasing the underlying value of every LsETH share.\\n/// @notice The fund will be called on every report and if eth is available in the contract, River will attempt to pull as much\\n/// @notice ETH as possible. This maximum is defined by the upper bound allowed by the Oracle. This means that it might take multiple\\n/// @notice reports for funds to be pulled entirely into the system due to this upper bound, ensuring a lower secondary market impact.\\n/// @notice The value provided to this contract is computed off-chain and provided manually by Alluvial or any authorized insurance entity.\\n/// @notice The Coverage funds are pulled upon an oracle report, after the ELFees have been pulled in the system, if there is a margin left\\n/// @notice before crossing the upper bound. The reason behind this is to favor the revenue stream, that depends on market and network usage, while\\n/// @notice the coverage fund will be pulled after the revenue stream, and there won't be any commission on the eth pulled.\\n/// @notice Once a Slashing event occurs, the team will do its best to inject the recovery funds in at maximum 365 days\\n/// @notice The entities allowed to donate are selected by the team. It will mainly be treasury entities or insurance protocols able to fill this coverage fund properly.\\ncontract CoverageFundV1 is Initializable, ICoverageFundV1 {\\n    /// @inheritdoc ICoverageFundV1\\n    function initCoverageFundV1(address _riverAddress) external init(0) {\\n        RiverAddress.set(_riverAddress);\\n        emit SetRiver(_riverAddress);\\n    }\\n\\n    /// @inheritdoc ICoverageFundV1\\n    function pullCoverageFunds(uint256 _maxAmount) external {\\n        address river = RiverAddress.get();\\n        if (msg.sender != river) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        uint256 amount = LibUint256.min(_maxAmount, BalanceForCoverage.get());\\n\\n        if (amount > 0) {\\n            BalanceForCoverage.set(BalanceForCoverage.get() - amount);\\n            IRiverV1(payable(river)).sendCoverageFunds{value: amount}();\\n        }\\n    }\\n\\n    /// @inheritdoc ICoverageFundV1\\n    function donate() external payable {\\n        if (msg.value == 0) {\\n            revert EmptyDonation();\\n        }\\n        BalanceForCoverage.set(BalanceForCoverage.get() + msg.value);\\n\\n        IAllowlistV1 allowlist = IAllowlistV1(IRiverV1(payable(RiverAddress.get())).getAllowlist());\\n        allowlist.onlyAllowed(msg.sender, LibAllowlistMasks.DONATE_MASK);\\n\\n        emit Donate(msg.sender, msg.value);\\n    }\\n\\n    /// @inheritdoc ICoverageFundV1\\n    receive() external payable {\\n        revert InvalidCall();\\n    }\\n\\n    /// @inheritdoc ICoverageFundV1\\n    fallback() external payable {\\n        revert InvalidCall();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/slashingCoverage/BalanceForCoverage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\n\\n/// @title Balance For Coverage Value Storage\\n/// @notice Utility to manage the Balance For Coverrage value in storage\\nlibrary BalanceForCoverage {\\n    /// @notice Storage slot of the Balance For Coverage Address\\n    bytes32 internal constant BALANCE_FOR_COVERAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"river.state.balanceForCoverage\\\")) - 1);\\n\\n    /// @notice Get the Balance for Coverage value\\n    /// @return The balance for coverage value\\n    function get() internal view returns (uint256) {\\n        return LibUnstructuredStorage.getStorageUint256(BALANCE_FOR_COVERAGE_SLOT);\\n    }\\n\\n    /// @notice Sets the Balance for Coverage value\\n    /// @param _newValue New Balance for Coverage value\\n    function set(uint256 _newValue) internal {\\n        LibUnstructuredStorage.setStorageUint256(BALANCE_FOR_COVERAGE_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/Allowlist.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IAllowlist.1.sol\\\";\\n\\nimport \\\"./libraries/LibAllowlistMasks.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\nimport \\\"./Administrable.sol\\\";\\n\\nimport \\\"./state/allowlist/AllowerAddress.sol\\\";\\nimport \\\"./state/allowlist/Allowlist.sol\\\";\\n\\n/// @title Allowlist (v1)\\n/// @author Kiln\\n/// @notice This contract handles the list of allowed recipients.\\n/// @notice All accounts have an uint256 value associated with their addresses where\\n/// @notice each bit represents a right in the system. The DENY_MASK defined the mask\\n/// @notice used to identify if the denied bit is on, preventing users from interacting\\n/// @notice with the system\\ncontract AllowlistV1 is IAllowlistV1, Initializable, Administrable {\\n    /// @inheritdoc IAllowlistV1\\n    function initAllowlistV1(address _admin, address _allower) external init(0) {\\n        _setAdmin(_admin);\\n        AllowerAddress.set(_allower);\\n        emit SetAllower(_allower);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function getAllower() external view returns (address) {\\n        return AllowerAddress.get();\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function isAllowed(address _account, uint256 _mask) external view returns (bool) {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & LibAllowlistMasks.DENY_MASK == LibAllowlistMasks.DENY_MASK) {\\n            return false;\\n        }\\n        return userPermissions & _mask == _mask;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function isDenied(address _account) external view returns (bool) {\\n        return Allowlist.get(_account) & LibAllowlistMasks.DENY_MASK == LibAllowlistMasks.DENY_MASK;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function hasPermission(address _account, uint256 _mask) external view returns (bool) {\\n        return Allowlist.get(_account) & _mask == _mask;\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function getPermissions(address _account) external view returns (uint256) {\\n        return Allowlist.get(_account);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function onlyAllowed(address _account, uint256 _mask) external view {\\n        uint256 userPermissions = Allowlist.get(_account);\\n        if (userPermissions & LibAllowlistMasks.DENY_MASK == LibAllowlistMasks.DENY_MASK) {\\n            revert Denied(_account);\\n        }\\n        if (userPermissions & _mask != _mask) {\\n            revert LibErrors.Unauthorized(_account);\\n        }\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function setAllower(address _newAllowerAddress) external onlyAdmin {\\n        AllowerAddress.set(_newAllowerAddress);\\n        emit SetAllower(_newAllowerAddress);\\n    }\\n\\n    /// @inheritdoc IAllowlistV1\\n    function allow(address[] calldata _accounts, uint256[] calldata _permissions) external {\\n        if (msg.sender != AllowerAddress.get() && msg.sender != _getAdmin()) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        if (_accounts.length == 0) {\\n            revert InvalidAlloweeCount();\\n        }\\n\\n        if (_accounts.length != _permissions.length) {\\n            revert MismatchedAlloweeAndStatusCount();\\n        }\\n\\n        for (uint256 i = 0; i < _accounts.length;) {\\n            LibSanitize._notZeroAddress(_accounts[i]);\\n            Allowlist.set(_accounts[i], _permissions[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit SetAllowlistPermissions(_accounts, _permissions);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/allowlist/AllowerAddress.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../libraries/LibUnstructuredStorage.sol\\\";\\nimport \\\"../../libraries/LibSanitize.sol\\\";\\n\\n/// @title Allower Address Storage\\n/// @notice Utility to manage the Allower Address in storage\\nlibrary AllowerAddress {\\n    /// @notice Storage slot of the Allower Address\\n    bytes32 internal constant ALLOWER_ADDRESS_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowerAddress\\\")) - 1);\\n\\n    /// @notice Retrieve the Allower Address\\n    /// @return The Allower Address\\n    function get() internal view returns (address) {\\n        return LibUnstructuredStorage.getStorageAddress(ALLOWER_ADDRESS_SLOT);\\n    }\\n\\n    /// @notice Sets the Allower Address\\n    /// @param _newValue New Allower Address\\n    function set(address _newValue) internal {\\n        LibSanitize._notZeroAddress(_newValue);\\n        LibUnstructuredStorage.setStorageAddress(ALLOWER_ADDRESS_SLOT, _newValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/allowlist/Allowlist.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Allowlist Storage\\n/// @notice Utility to manage the Allowlist mapping in storage\\nlibrary Allowlist {\\n    /// @notice Storage slot of the Allowlist mapping\\n    bytes32 internal constant ALLOWLIST_SLOT = bytes32(uint256(keccak256(\\\"river.state.allowlist\\\")) - 1);\\n\\n    /// @notice Structure stored in storage slot\\n    struct Slot {\\n        /// @custom:attribute Mapping keeping track of permissions per account\\n        mapping(address => uint256) value;\\n    }\\n\\n    /// @notice Retrieve the Allowlist value of an account\\n    /// @param _account The account to verify\\n    /// @return The Allowlist value\\n    function get(address _account) internal view returns (uint256) {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_account];\\n    }\\n\\n    /// @notice Sets the Allowlist value of an account\\n    /// @param _account The account value to set\\n    /// @param _status The value to set\\n    function set(address _account, uint256 _status) internal {\\n        bytes32 slot = ALLOWLIST_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_account] = _status;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/mock/DepositContractMock.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IDepositContract.sol\\\";\\n\\ncontract DepositContractMock is IDepositContract {\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    uint256 public depositCount;\\n    address public receiver;\\n\\n    constructor(address _receiver) {\\n        receiver = _receiver;\\n    }\\n\\n    function to_little_endian_64(uint64 value) internal pure returns (bytes memory ret) {\\n        ret = new bytes(8);\\n        bytes8 bytesValue = bytes8(value);\\n        // Byteswapping during copying to bytes.\\n        ret[0] = bytesValue[7];\\n        ret[1] = bytesValue[6];\\n        ret[2] = bytesValue[5];\\n        ret[3] = bytesValue[4];\\n        ret[4] = bytesValue[3];\\n        ret[5] = bytesValue[2];\\n        ret[6] = bytesValue[1];\\n        ret[7] = bytesValue[0];\\n    }\\n\\n    function deposit(bytes calldata pubkey, bytes calldata withdrawalCredentials, bytes calldata signature, bytes32)\\n        external\\n        payable\\n    {\\n        emit DepositEvent(\\n            pubkey,\\n            withdrawalCredentials,\\n            to_little_endian_64(uint64(msg.value / 1 gwei)),\\n            signature,\\n            to_little_endian_64(uint64(depositCount))\\n        );\\n        depositCount += 1;\\n        (bool sent,) = receiver.call{value: address(this).balance}(\\\"\\\");\\n        require(sent, \\\"Fund transfer failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/components/ERC20VestableVotesUpgradeable.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/components/IERC20VestableVotesUpgradeable.1.sol\\\";\\n\\nimport \\\"../state/tlc/VestingSchedules.2.sol\\\";\\nimport \\\"../state/tlc/IgnoreGlobalUnlockSchedule.sol\\\";\\n\\nimport \\\"../libraries/LibSanitize.sol\\\";\\nimport \\\"../libraries/LibUint256.sol\\\";\\n\\n/// @title ERC20VestableVotesUpgradeableV1\\n/// @author Alluvial\\n/// @notice This is an ERC20 extension that\\n/// @notice   - can be used as source of vote power (inherited from OpenZeppelin ERC20VotesUpgradeable)\\n/// @notice   - can delegate vote power from an account to another account (inherited from OpenZeppelin ERC20VotesUpgradeable)\\n/// @notice   - can manage token vestings: ownership is progressively transferred to a beneficiary according to a vesting schedule\\n/// @notice   - keeps a history (checkpoints) of each account's vote power\\n/// @notice\\n/// @notice Notes from OpenZeppelin [ERC20VotesUpgradeable](https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol)\\n/// @notice   - vote power can be delegated either by calling the {delegate} function, or by providing a signature to be used with {delegateBySig}\\n/// @notice   - keeps a history (checkpoints) of each account's vote power\\n/// @notice   - power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n/// @notice   - by default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n/// @notice requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n/// @notice\\n/// @notice Notes about token vesting\\n/// @notice   - any token holder can call the method {createVestingSchedule} in order to transfer tokens to a beneficiary according to a vesting schedule. When\\n/// @notice     creating a vesting schedule, tokens are transferred to an escrow that holds the token while the vesting progresses. Voting power of the escrowed token is delegated to the\\n/// @notice     beneficiary or a delegatee account set by the vesting schedule creator\\n/// @notice   - the schedule beneficiary call {releaseVestingSchedule} to get vested tokens transferred from escrow\\n/// @notice   - the schedule creator can revoke a revocable schedule by calling {revokeVestingSchedule} in which case the non-vested tokens are transfered from the escrow back to the creator\\n/// @notice   - the schedule beneficiary can delegate escrow voting power to any account by calling {delegateVestingEscrow}\\n/// @notice\\n/// @notice Vesting schedule attributes are\\n/// @notice   - start : start time of the vesting period\\n/// @notice   - cliff duration: duration before which first tokens gets ownable\\n/// @notice   - total duration: duration of the entire vesting (sum of all vesting period durations)\\n/// @notice   - period duration: duration of a single period of vesting\\n/// @notice   - lock duration: duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n/// @notice   - amount: amount of tokens granted by the vesting schedule\\n/// @notice   - beneficiary: beneficiary of tokens after they are releaseVestingScheduled\\n/// @notice   - revocable: whether the schedule can be revoked\\n/// @notice   - ignoreGlobalUnlockSchedule: whether the schedule should ignore the global unlock schedule\\n/// @notice\\n/// @notice Vesting schedule\\n/// @notice   - if currentTime < cliff: vestedToken = 0\\n/// @notice   - if cliff <= currentTime < end: vestedToken = (vestedPeriodCount(currentTime) * periodDuration * amount) / totalDuration\\n/// @notice   - if end < currentTime: vestedToken = amount\\n/// @notice\\n/// @notice Global unlock schedule\\n/// @notice   - the global unlock schedule releases 1/24th of the total scheduled amount every month after the local lock end\\n/// @notice   - the local lock end is the end of the lock period of the vesting schedule\\n/// @notice   - the global unlock schedule is ignored if the vesting schedule has the ignoreGlobalUnlockSchedule flag set to true\\n/// @notice   - the global unlock schedule is only a cap on the vested funds that can be withdrawn, it does not alter the vesting\\n/// @notice\\n/// @notice Remark: After cliff new tokens get vested at the end of each period\\n/// @notice\\n/// @notice Vested token & lock period\\n/// @notice   - a vested token is a token that will be eventually releasable from the escrow to the beneficiary once the lock period is over\\n/// @notice   - lock period prevents beneficiary from releasing vested tokens before the lock period ends. Vested tokens\\n/// @notice will eventually be releasable once the lock period is over\\n/// @notice\\n/// @notice Example: Joe gets a vesting starting on Jan 1st 2022 with duration of 1 year and a lock period of 2 years.\\n/// @notice On Jan 1st 2023, Joe will have all tokens vested but can not yet release it due to the lock period.\\n/// @notice On Jan 1st 2024, lock period is over and Joe can release all tokens.\\nabstract contract ERC20VestableVotesUpgradeableV1 is\\n    Initializable,\\n    IERC20VestableVotesUpgradeableV1,\\n    ERC20VotesUpgradeable\\n{\\n    // internal used to compute the address of the escrow\\n    bytes32 internal constant ESCROW = bytes32(uint256(keccak256(\\\"escrow\\\")) - 1);\\n\\n    function __ERC20VestableVotes_init() internal onlyInitializing {}\\n\\n    function __ERC20VestableVotes_init_unchained() internal onlyInitializing {}\\n\\n    /// @notice This method migrates the state of the vesting schedules from V1 to V2\\n    /// @dev This method should be used if deployment with the old version using V1 state models is upgraded\\n    function migrateVestingSchedulesFromV1ToV2() internal {\\n        if (VestingSchedulesV2.getCount() == 0) {\\n            uint256 existingV1VestingSchedules = VestingSchedulesV1.getCount();\\n            for (uint256 idx; idx < existingV1VestingSchedules;) {\\n                uint256 scheduleAmount = VestingSchedulesV1.get(idx).amount;\\n                uint256 releasedAmount =\\n                    scheduleAmount - LibUint256.min(balanceOf(_deterministicVestingEscrow(idx)), scheduleAmount);\\n                VestingSchedulesV2.migrateVestingScheduleFromV1(idx, releasedAmount);\\n                unchecked {\\n                    ++idx;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function getVestingSchedule(uint256 _index) external view returns (VestingSchedulesV2.VestingSchedule memory) {\\n        return VestingSchedulesV2.get(_index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function isGlobalUnlockedScheduleIgnored(uint256 _index) external view returns (bool) {\\n        return IgnoreGlobalUnlockSchedule.get(_index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function getVestingScheduleCount() external view returns (uint256) {\\n        return VestingSchedulesV2.getCount();\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function vestingEscrow(uint256 _index) external view returns (address) {\\n        return _deterministicVestingEscrow(_index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function computeVestingReleasableAmount(uint256 _index) external view returns (uint256) {\\n        VestingSchedulesV2.VestingSchedule memory vestingSchedule = VestingSchedulesV2.get(_index);\\n        return _computeVestingReleasableAmount(vestingSchedule, false, _index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function computeVestingVestedAmount(uint256 _index) external view returns (uint256) {\\n        VestingSchedulesV2.VestingSchedule memory vestingSchedule = VestingSchedulesV2.get(_index);\\n        return _computeVestedAmount(vestingSchedule, LibUint256.min(_getCurrentTime(), vestingSchedule.end));\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function createVestingSchedule(\\n        uint64 _start,\\n        uint32 _cliffDuration,\\n        uint32 _duration,\\n        uint32 _periodDuration,\\n        uint32 _lockDuration,\\n        bool _revocable,\\n        uint256 _amount,\\n        address _beneficiary,\\n        address _delegatee,\\n        bool _ignoreGlobalUnlockSchedule\\n    ) external returns (uint256) {\\n        return _createVestingSchedule(\\n            msg.sender,\\n            _beneficiary,\\n            _delegatee,\\n            _start,\\n            _cliffDuration,\\n            _duration,\\n            _periodDuration,\\n            _lockDuration,\\n            _revocable,\\n            _amount,\\n            _ignoreGlobalUnlockSchedule\\n        );\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function revokeVestingSchedule(uint256 _index, uint64 _end) external returns (uint256) {\\n        return _revokeVestingSchedule(_index, _end);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function releaseVestingSchedule(uint256 _index) external returns (uint256) {\\n        return _releaseVestingSchedule(_index);\\n    }\\n\\n    /// @inheritdoc IERC20VestableVotesUpgradeableV1\\n    function delegateVestingEscrow(uint256 _index, address _delegatee) external returns (bool) {\\n        return _delegateVestingEscrow(_index, _delegatee);\\n    }\\n\\n    /// @notice Creates a new vesting schedule\\n    /// @param _creator creator of the token vesting\\n    /// @param _beneficiary beneficiary of tokens after they are releaseVestingScheduled\\n    /// @param _delegatee address of the delegate escrowed tokens votes to (if address(0) then it defaults to the beneficiary)\\n    /// @param _start start time of the vesting period\\n    /// @param _cliffDuration duration before which first tokens gets ownable\\n    /// @param _duration duration of the entire vesting (sum of all vesting period durations)\\n    /// @param _periodDuration duration of a single period of vesting\\n    /// @param _lockDuration duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n    /// @param _revocable whether the schedule can be revoked\\n    /// @param _amount amount of tokens granted by the vesting schedule\\n    /// @param _ignoreGlobalUnlockSchedule whether the schedule should ignore the global unlock schedule\\n    /// @return index of the created vesting schedule\\n    function _createVestingSchedule(\\n        address _creator,\\n        address _beneficiary,\\n        address _delegatee,\\n        uint64 _start,\\n        uint32 _cliffDuration,\\n        uint32 _duration,\\n        uint32 _periodDuration,\\n        uint32 _lockDuration,\\n        bool _revocable,\\n        uint256 _amount,\\n        bool _ignoreGlobalUnlockSchedule\\n    ) internal returns (uint256) {\\n        if (balanceOf(_creator) < _amount) {\\n            revert UnsufficientVestingScheduleCreatorBalance();\\n        }\\n\\n        // validate schedule parameters\\n        if (_beneficiary == address(0)) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule beneficiary must be non zero address\\\");\\n        }\\n\\n        if (_duration == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule duration must be > 0\\\");\\n        }\\n\\n        if (_amount == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule amount must be > 0\\\");\\n        }\\n\\n        if (_periodDuration == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule period must be > 0\\\");\\n        }\\n\\n        if (_duration % _periodDuration > 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule duration must split in exact periods\\\");\\n        }\\n\\n        if (_cliffDuration % _periodDuration > 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule cliff duration must split in exact periods\\\");\\n        }\\n\\n        if (_cliffDuration > _duration) {\\n            revert InvalidVestingScheduleParameter(\\n                \\\"Vesting schedule duration must be greater than or equal to the cliff duration\\\"\\n            );\\n        }\\n\\n        if ((_amount * _periodDuration) / _duration == 0) {\\n            revert InvalidVestingScheduleParameter(\\\"Vesting schedule amount too low for duration and period\\\");\\n        }\\n\\n        // if input start time is 0 then default to the current block time\\n        if (_start == 0) {\\n            _start = uint64(block.timestamp);\\n        }\\n\\n        // create new vesting schedule\\n        VestingSchedulesV2.VestingSchedule memory vestingSchedule = VestingSchedulesV2.VestingSchedule({\\n            start: _start,\\n            end: _start + _duration,\\n            lockDuration: _lockDuration,\\n            cliffDuration: _cliffDuration,\\n            duration: _duration,\\n            periodDuration: _periodDuration,\\n            amount: _amount,\\n            creator: _creator,\\n            beneficiary: _beneficiary,\\n            revocable: _revocable,\\n            releasedAmount: 0\\n        });\\n        uint256 index = VestingSchedulesV2.push(vestingSchedule) - 1;\\n\\n        IgnoreGlobalUnlockSchedule.set(index, _ignoreGlobalUnlockSchedule);\\n\\n        // compute escrow address that will hold the token during the vesting\\n        address escrow = _deterministicVestingEscrow(index);\\n\\n        // transfer tokens to the escrow\\n        _transfer(_creator, escrow, _amount);\\n\\n        // delegate escrow tokens\\n        if (_delegatee == address(0)) {\\n            // default delegatee to beneficiary address\\n            _delegate(escrow, _beneficiary);\\n        } else {\\n            _delegate(escrow, _delegatee);\\n        }\\n\\n        emit CreatedVestingSchedule(index, _creator, _beneficiary, _amount);\\n\\n        return index;\\n    }\\n\\n    /// @notice Revoke vesting schedule\\n    /// @param _index Index of the vesting schedule to revoke\\n    /// @param _end End date for the schedule\\n    /// @return returnedAmount amount returned to the vesting schedule creator\\n    function _revokeVestingSchedule(uint256 _index, uint64 _end) internal returns (uint256) {\\n        if (_end == 0) {\\n            // if end time is 0 then default to current block time\\n            _end = uint64(block.timestamp);\\n        } else if (_end < block.timestamp) {\\n            revert VestingScheduleNotRevocableInPast();\\n        }\\n\\n        VestingSchedulesV2.VestingSchedule storage vestingSchedule = VestingSchedulesV2.get(_index);\\n        if (!vestingSchedule.revocable) {\\n            revert VestingScheduleNotRevocable();\\n        }\\n\\n        // revoked end date MUST be after vesting schedule start and before current end\\n        if ((_end < vestingSchedule.start) || (vestingSchedule.end < _end)) {\\n            revert InvalidRevokedVestingScheduleEnd();\\n        }\\n\\n        // only creator can revoke vesting schedule\\n        if (vestingSchedule.creator != msg.sender) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        // return tokens that will never be vested to creator\\n        uint256 vestedAmountAtOldEnd = _computeVestedAmount(vestingSchedule, vestingSchedule.end);\\n        uint256 vestedAmountAtNewEnd = _computeVestedAmount(vestingSchedule, _end);\\n        uint256 returnedAmount = vestedAmountAtOldEnd - vestedAmountAtNewEnd;\\n        if (returnedAmount > 0) {\\n            address escrow = _deterministicVestingEscrow(_index);\\n            _transfer(escrow, msg.sender, returnedAmount);\\n        }\\n\\n        // set schedule end\\n        vestingSchedule.end = uint64(_end);\\n\\n        emit RevokedVestingSchedule(_index, returnedAmount, _end);\\n\\n        return returnedAmount;\\n    }\\n\\n    /// @notice Release vesting schedule\\n    /// @param _index Index of the vesting schedule to release\\n    /// @return released amount\\n    function _releaseVestingSchedule(uint256 _index) internal returns (uint256) {\\n        VestingSchedulesV2.VestingSchedule storage vestingSchedule = VestingSchedulesV2.get(_index);\\n\\n        // only beneficiary can release\\n        if (msg.sender != vestingSchedule.beneficiary) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        // compute releasable amount (taking into account local lock and global unlock schedule if it applies)\\n        uint256 releasableAmount = _computeVestingReleasableAmount(vestingSchedule, true, _index);\\n        if (releasableAmount == 0) {\\n            revert ZeroReleasableAmount();\\n        }\\n\\n        address escrow = _deterministicVestingEscrow(_index);\\n\\n        // transfer all releasable token to the beneficiary\\n        _transfer(escrow, msg.sender, releasableAmount);\\n\\n        // increase released amount as per the release\\n        vestingSchedule.releasedAmount += releasableAmount;\\n\\n        emit ReleasedVestingSchedule(_index, releasableAmount);\\n\\n        return releasableAmount;\\n    }\\n\\n    /// @notice Delegate vesting escrowed tokens\\n    /// @param _index index of the vesting schedule\\n    /// @param _delegatee address to delegate the token to\\n    /// @return True on success\\n    function _delegateVestingEscrow(uint256 _index, address _delegatee) internal returns (bool) {\\n        VestingSchedulesV2.VestingSchedule storage vestingSchedule = VestingSchedulesV2.get(_index);\\n\\n        // only beneficiary can delegate\\n        if (msg.sender != vestingSchedule.beneficiary) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n\\n        // update delegatee\\n        address escrow = _deterministicVestingEscrow(_index);\\n        address oldDelegatee = delegates(escrow);\\n        _delegate(escrow, _delegatee);\\n\\n        emit DelegatedVestingEscrow(_index, oldDelegatee, _delegatee, msg.sender);\\n\\n        return true;\\n    }\\n\\n    /// @notice Internal utility to compute the unique escrow deterministic address\\n    /// @param _index index of the vesting schedule\\n    /// @return escrow The deterministic escrow address for the vesting schedule index\\n    function _deterministicVestingEscrow(uint256 _index) internal view returns (address escrow) {\\n        bytes32 hash = keccak256(abi.encodePacked(address(this), ESCROW, _index));\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    /// @notice Computes the releasable amount of tokens for a vesting schedule.\\n    /// @param _vestingSchedule vesting schedule to compute releasable tokens for\\n    /// @param  _revertIfLocked if true will revert if the schedule is locked\\n    /// @param _index index of the vesting schedule\\n    /// @return amount of release tokens\\n    function _computeVestingReleasableAmount(\\n        VestingSchedulesV2.VestingSchedule memory _vestingSchedule,\\n        bool _revertIfLocked,\\n        uint256 _index\\n    ) internal view returns (uint256) {\\n        uint256 time = _getCurrentTime();\\n        if (time < (_vestingSchedule.start + _vestingSchedule.lockDuration)) {\\n            if (_revertIfLocked) {\\n                revert VestingScheduleIsLocked();\\n            } else {\\n                return 0;\\n            }\\n        }\\n        uint256 releasedAmount = _vestingSchedule.releasedAmount;\\n        uint256 vestedAmount =\\n            _computeVestedAmount(_vestingSchedule, time > _vestingSchedule.end ? _vestingSchedule.end : time);\\n        if (vestedAmount > releasedAmount) {\\n            if (!IgnoreGlobalUnlockSchedule.get(_index)) {\\n                uint256 globalUnlocked = _computeGlobalUnlocked(\\n                    _vestingSchedule.amount, time - (_vestingSchedule.start + _vestingSchedule.lockDuration)\\n                );\\n                if (releasedAmount > globalUnlocked) {\\n                    revert GlobalUnlockUnderlfow();\\n                }\\n                return LibUint256.min(vestedAmount, globalUnlocked) - releasedAmount;\\n            }\\n            unchecked {\\n                return vestedAmount - releasedAmount;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @notice Computes the vested amount of tokens for a vesting schedule.\\n    /// @param _vestingSchedule vesting schedule to compute vested tokens for\\n    /// @param _time time to compute the vested amount at\\n    /// @return amount of release tokens\\n    function _computeVestedAmount(VestingSchedulesV2.VestingSchedule memory _vestingSchedule, uint256 _time)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_time < _vestingSchedule.start + _vestingSchedule.cliffDuration) {\\n            // pre-cliff no tokens have been vested\\n            return 0;\\n        } else if (_time >= _vestingSchedule.start + _vestingSchedule.duration) {\\n            // post vesting all tokens have been vested\\n            return _vestingSchedule.amount;\\n        } else {\\n            uint256 timeFromStart = _time - _vestingSchedule.start;\\n\\n            // compute tokens vested for completely elapsed periods\\n            uint256 vestedDuration = timeFromStart - timeFromStart % _vestingSchedule.periodDuration;\\n\\n            return (vestedDuration * _vestingSchedule.amount) / _vestingSchedule.duration;\\n        }\\n    }\\n\\n    /// @notice Computes the unlocked amount of tokens for a vesting schedule according to the global unlock schedule\\n    /// @param scheduledAmount amount of tokens scheduled for the vesting schedule\\n    /// @param timeSinceLocalLockEnd time since the local lock end\\n    /// @return amount of unlocked tokens\\n    function _computeGlobalUnlocked(uint256 scheduledAmount, uint256 timeSinceLocalLockEnd)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // 1/24 th of the amount per month\\n        uint256 unlockedAmount = (scheduledAmount / 24) * (timeSinceLocalLockEnd / (365 days / 12));\\n        if (unlockedAmount > scheduledAmount) {\\n            return scheduledAmount;\\n        }\\n        return unlockedAmount;\\n    }\\n\\n    /// @notice Returns current time\\n    /// @return The current time\\n    function _getCurrentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20VotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../governance/utils/IVotesUpgradeable.sol\\\";\\nimport \\\"../../../utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, IVotesUpgradeable, ERC20PermitUpgradeable {\\n    function __ERC20Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\\n    }\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCastUpgradeable.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view virtual override returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - MathUpgradeable.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = MathUpgradeable.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSAUpgradeable.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n\\n        Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\\n\\n        oldWeight = oldCkpt.votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && oldCkpt.fromBlock == block.number) {\\n            _unsafeAccess(ckpts, pos - 1).votes = SafeCastUpgradeable.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCastUpgradeable.toUint32(block.number), votes: SafeCastUpgradeable.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/components/IERC20VestableVotesUpgradeable.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../../state/tlc/VestingSchedules.2.sol\\\";\\n\\n/// @title ERC20 Vestable Votes Upgradeable Interface(v1)\\n/// @author Alluvial\\n/// @notice This interface exposes methods to manage vestings\\ninterface IERC20VestableVotesUpgradeableV1 {\\n    /// @notice A new vesting schedule has been created\\n    /// @param index Vesting schedule index\\n    /// @param creator Creator of the vesting schedule\\n    /// @param beneficiary Vesting beneficiary address\\n    /// @param amount Vesting schedule amount\\n    event CreatedVestingSchedule(uint256 index, address indexed creator, address indexed beneficiary, uint256 amount);\\n\\n    /// @notice Vesting schedule has been released\\n    /// @param index Vesting schedule index\\n    /// @param releasedAmount Amount of tokens released to the beneficiary\\n    event ReleasedVestingSchedule(uint256 index, uint256 releasedAmount);\\n\\n    /// @notice Vesting schedule has been revoked\\n    /// @param index Vesting schedule index\\n    /// @param returnedAmount Amount of tokens returned to the creator\\n    /// @param newEnd New end timestamp after revoke action\\n    event RevokedVestingSchedule(uint256 index, uint256 returnedAmount, uint256 newEnd);\\n\\n    /// @notice Vesting escrow has been delegated\\n    /// @param index Vesting schedule index\\n    /// @param oldDelegatee old delegatee\\n    /// @param newDelegatee new delegatee\\n    /// @param beneficiary vesting schedule beneficiary\\n    event DelegatedVestingEscrow(\\n        uint256 index, address indexed oldDelegatee, address indexed newDelegatee, address indexed beneficiary\\n    );\\n\\n    /// @notice Vesting schedule creator has unsufficient balance to create vesting schedule\\n    error UnsufficientVestingScheduleCreatorBalance();\\n\\n    /// @notice Invalid parameter for a vesting schedule\\n    error InvalidVestingScheduleParameter(string msg);\\n\\n    /// @notice Attempt to revoke a schedule in the past\\n    error VestingScheduleNotRevocableInPast();\\n\\n    /// @notice The vesting schedule is not revocable\\n    error VestingScheduleNotRevocable();\\n\\n    /// @notice The vesting schedule is locked\\n    error VestingScheduleIsLocked();\\n\\n    /// @notice Attempt to revoke a vesting schedule with an invalid end parameter\\n    error InvalidRevokedVestingScheduleEnd();\\n\\n    /// @notice No token to release\\n    error ZeroReleasableAmount();\\n\\n    /// @notice Underflow in global unlock logic (should never happen)\\n    error GlobalUnlockUnderlfow();\\n\\n    /// @notice Get vesting schedule\\n    /// @dev The vesting schedule structure represents a static configuration used to compute the desired\\n    /// @dev vesting details of a beneficiary at all times. The values won't change even after tokens are released.\\n    /// @dev The only dynamic field of the structure is end, and is updated whenever a vesting schedule is revoked\\n    /// @param _index Index of the vesting schedule\\n    function getVestingSchedule(uint256 _index) external view returns (VestingSchedulesV2.VestingSchedule memory);\\n\\n    /// @notice Get vesting global unlock schedule activation status for a vesting schedule\\n    /// @param _index Index of the vesting schedule\\n    /// @return true if the vesting schedule should ignore the global unlock schedule\\n    function isGlobalUnlockedScheduleIgnored(uint256 _index) external view returns (bool);\\n\\n    /// @notice Get count of vesting schedules\\n    /// @return count of vesting schedules\\n    function getVestingScheduleCount() external view returns (uint256);\\n\\n    /// @notice Get the address of the escrow for a vesting schedule\\n    /// @param _index Index of the vesting schedule\\n    /// @return address of the escrow\\n    function vestingEscrow(uint256 _index) external view returns (address);\\n\\n    /// @notice Computes the releasable amount of tokens for a vesting schedule.\\n    /// @param _index index of the vesting schedule\\n    /// @return amount of releasable tokens\\n    function computeVestingReleasableAmount(uint256 _index) external view returns (uint256);\\n\\n    /// @notice Computes the vested amount of tokens for a vesting schedule.\\n    /// @param _index index of the vesting schedule\\n    /// @return amount of vested tokens\\n    function computeVestingVestedAmount(uint256 _index) external view returns (uint256);\\n\\n    /// @notice Creates a new vesting schedule\\n    /// @notice There may delay between the time a user should start vesting tokens and the time the vesting schedule is actually created on the contract.\\n    /// @notice Typically a user joins the Liquid Collective but some weeks pass before the user gets all legal agreements in place and signed for the\\n    /// @notice token grant emission to happen. In this case, the vesting schedule created for the token grant would start on the join date which is in the past.\\n    /// @dev As vesting schedules can be created in the past, this means that you should be careful when creating a vesting schedule and what duration parameters\\n    /// @dev you use as this contract would allow creating a vesting schedule in the past and even a vesting schedule that has already ended.\\n    /// @param _start start time of the vesting\\n    /// @param _cliffDuration duration to vesting cliff (in seconds)\\n    /// @param _duration total vesting schedule duration after which all tokens are vested (in seconds)\\n    /// @param _periodDuration duration of a period after which new tokens unlock (in seconds)\\n    /// @param _lockDuration duration during which tokens are locked (in seconds)\\n    /// @param _revocable whether the vesting schedule is revocable or not\\n    /// @param _amount amount of token attributed by the vesting schedule\\n    /// @param _beneficiary address of the beneficiary of the tokens\\n    /// @param _delegatee address to delegate escrow voting power to\\n    /// @param _ignoreGlobalUnlockSchedule whether the vesting schedule should ignore the global lock\\n    /// @return index of the created vesting schedule\\n    function createVestingSchedule(\\n        uint64 _start,\\n        uint32 _cliffDuration,\\n        uint32 _duration,\\n        uint32 _periodDuration,\\n        uint32 _lockDuration,\\n        bool _revocable,\\n        uint256 _amount,\\n        address _beneficiary,\\n        address _delegatee,\\n        bool _ignoreGlobalUnlockSchedule\\n    ) external returns (uint256);\\n\\n    /// @notice Revoke vesting schedule\\n    /// @param _index Index of the vesting schedule to revoke\\n    /// @param _end End date for the schedule\\n    /// @return returnedAmount amount returned to the vesting schedule creator\\n    function revokeVestingSchedule(uint256 _index, uint64 _end) external returns (uint256 returnedAmount);\\n\\n    /// @notice Release vesting schedule\\n    /// @notice When tokens are released from the escrow, the delegated address of the escrow will see its voting power decrease.\\n    /// @notice The beneficiary has to make sure its delegation parameters are set properly to be able to use/delegate the voting power of its balance.\\n    /// @param _index Index of the vesting schedule to release\\n    /// @return released amount\\n    function releaseVestingSchedule(uint256 _index) external returns (uint256);\\n\\n    /// @notice Delegate vesting escrowed tokens\\n    /// @param _index index of the vesting schedule\\n    /// @param _delegatee address to delegate the token to\\n    /// @return True on success\\n    function delegateVestingEscrow(uint256 _index, address _delegatee) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/tlc/VestingSchedules.2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./VestingSchedules.1.sol\\\";\\n\\n/// @title VestingSchedulesV2 Storage\\n/// @notice Utility to manage VestingSchedulesV2 in storage\\nlibrary VestingSchedulesV2 {\\n    /// @notice Storage slot of the Vesting Schedules (note the slot is different from v1)\\n    bytes32 internal constant VESTING_SCHEDULES_SLOT =\\n        bytes32(uint256(keccak256(\\\"erc20VestableVotes.state.v2.schedules\\\")) - 1);\\n\\n    struct VestingSchedule {\\n        // start time of the vesting period\\n        uint64 start;\\n        // date at which the vesting is ended\\n        // initially it is equal to start+duration then to revoke date in case of revoke\\n        uint64 end;\\n        // duration before which first tokens gets ownable\\n        uint32 cliffDuration;\\n        // duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n        uint32 lockDuration;\\n        // duration of the entire vesting (sum of all vesting period durations)\\n        uint32 duration;\\n        // duration of a single period of vesting\\n        uint32 periodDuration;\\n        // amount of tokens granted by the vesting schedule\\n        uint256 amount;\\n        // creator of the token vesting\\n        address creator;\\n        // beneficiary of tokens after they are releaseVestingScheduled\\n        address beneficiary;\\n        // whether the schedule can be revoked\\n        bool revocable;\\n        // amount of released tokens\\n        uint256 releasedAmount;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotVestingSchedule {\\n        /// @custom:attribute Array containing all the vesting schedules\\n        VestingSchedule[] value;\\n    }\\n\\n    /// @notice The VestingSchedule was not found\\n    /// @param index vesting schedule index\\n    error VestingScheduleNotFound(uint256 index);\\n\\n    /// @notice Retrieve the vesting schedule in storage\\n    /// @param _index index of the vesting schedule\\n    /// @return the vesting schedule\\n    function get(uint256 _index) internal view returns (VestingSchedule storage) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert VestingScheduleNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Get vesting schedule count in storage\\n    /// @return The count of vesting schedule in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Add a new vesting schedule in storage\\n    /// @param _newSchedule new vesting schedule to create\\n    /// @return The size of the vesting schedule array after the operation\\n    function push(VestingSchedule memory _newSchedule) internal returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newSchedule);\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Migrate a VestingSchedule from v1 to v2\\n    /// @notice Takes a VestingSchedule in v1 format in stores it in v2 format\\n    /// @param _index of the schedule in v1 to be migrated\\n    /// @param _releasedAmount The released amount to keep in storage\\n    /// @return The index of the created schedule in v2 format\\n    function migrateVestingScheduleFromV1(uint256 _index, uint256 _releasedAmount) internal returns (uint256) {\\n        VestingSchedulesV1.VestingSchedule memory scheduleV1 = VestingSchedulesV1.get(_index);\\n        VestingSchedulesV2.VestingSchedule memory scheduleV2 = VestingSchedulesV2.VestingSchedule({\\n            start: scheduleV1.start,\\n            end: scheduleV1.end,\\n            lockDuration: scheduleV1.lockDuration,\\n            cliffDuration: scheduleV1.cliffDuration,\\n            duration: scheduleV1.duration,\\n            periodDuration: scheduleV1.periodDuration,\\n            amount: scheduleV1.amount,\\n            creator: scheduleV1.creator,\\n            beneficiary: scheduleV1.beneficiary,\\n            revocable: scheduleV1.revocable,\\n            releasedAmount: _releasedAmount\\n        });\\n\\n        return push(scheduleV2) - 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/tlc/IgnoreGlobalUnlockSchedule.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Global unlock schedule activation storage\\n/// @notice Utility to manage the global unlock schedule activation mapping in storage\\n/// @notice The global unlock schedule releases 1/24th of the total scheduled amount every month after the local lock end\\nlibrary IgnoreGlobalUnlockSchedule {\\n    /// @notice Storage slot of the global unlock schedule activation mapping\\n    bytes32 internal constant GLOBAL_UNLOCK_ACTIVATION_SLOT =\\n        bytes32(uint256(keccak256(\\\"tlc.state.globalUnlockScheduleActivation\\\")) - 1);\\n\\n    /// @notice Structure stored in storage slot\\n    struct Slot {\\n        /// @custom:attribute Mapping keeping track of activation per schedule\\n        mapping(uint256 => bool) value;\\n    }\\n\\n    /// @notice Retrieve the global unlock schedule activation value of a schedule, true if the global lock should be ignored\\n    /// @param _scheduleId The schedule id\\n    /// @return The global unlock activation value\\n    function get(uint256 _scheduleId) internal view returns (bool) {\\n        bytes32 slot = GLOBAL_UNLOCK_ACTIVATION_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value[_scheduleId];\\n    }\\n\\n    /// @notice Sets the global unlock schedule activation value of a schedule\\n    /// @param _scheduleId The id of the schedule to modify\\n    /// @param _ignoreGlobalUnlock The value to set, true if the global lock should be ignored\\n    function set(uint256 _scheduleId, bool _ignoreGlobalUnlock) internal {\\n        bytes32 slot = GLOBAL_UNLOCK_ACTIVATION_SLOT;\\n\\n        Slot storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value[_scheduleId] = _ignoreGlobalUnlock;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 51\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/governance/utils/IVotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotesUpgradeable {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/state/tlc/VestingSchedules.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title VestingSchedulesV1 Storage\\n/// @notice Utility to manage VestingSchedulesV1 in storage\\nlibrary VestingSchedulesV1 {\\n    /// @notice Storage slot of the Vesting Schedules\\n    bytes32 internal constant VESTING_SCHEDULES_SLOT =\\n        bytes32(uint256(keccak256(\\\"erc20VestableVotes.state.schedules\\\")) - 1);\\n\\n    struct VestingSchedule {\\n        // start time of the vesting period\\n        uint64 start;\\n        // date at which the vesting is ended\\n        // initially it is equal to start+duration then to revoke date in case of revoke\\n        uint64 end;\\n        // duration before which first tokens gets ownable\\n        uint32 cliffDuration;\\n        // duration before tokens gets unlocked. can exceed the duration of the vesting chedule\\n        uint32 lockDuration;\\n        // duration of the entire vesting (sum of all vesting period durations)\\n        uint32 duration;\\n        // duration of a single period of vesting\\n        uint32 periodDuration;\\n        // amount of tokens granted by the vesting schedule\\n        uint256 amount;\\n        // creator of the token vesting\\n        address creator;\\n        // beneficiary of tokens after they are releaseVestingScheduled\\n        address beneficiary;\\n        // whether the schedule can be revoked\\n        bool revocable;\\n    }\\n\\n    /// @notice The structure at the storage slot\\n    struct SlotVestingSchedule {\\n        /// @custom:attribute Array containing all the vesting schedules\\n        VestingSchedule[] value;\\n    }\\n\\n    /// @notice The VestingSchedule was not found\\n    /// @param index vesting schedule index\\n    error VestingScheduleNotFound(uint256 index);\\n\\n    /// @notice Retrieve the vesting schedule in storage\\n    /// @param _index index of the vesting schedule\\n    /// @return the vesting schedule\\n    function get(uint256 _index) internal view returns (VestingSchedule storage) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        if (r.value.length <= _index) {\\n            revert VestingScheduleNotFound(_index);\\n        }\\n\\n        return r.value[_index];\\n    }\\n\\n    /// @notice Get vesting schedule count in storage\\n    /// @return The count of vesting schedule in storage\\n    function getCount() internal view returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        return r.value.length;\\n    }\\n\\n    /// @notice Add a new vesting schedule in storage\\n    /// @param _newSchedule new vesting schedule to create\\n    /// @return The size of the vesting schedule array after the operation\\n    function push(VestingSchedule memory _newSchedule) internal returns (uint256) {\\n        bytes32 slot = VESTING_SCHEDULES_SLOT;\\n\\n        SlotVestingSchedule storage r;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n\\n        r.value.push(_newSchedule);\\n\\n        return r.value.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/TLC.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./components/ERC20VestableVotesUpgradeable.1.sol\\\";\\nimport \\\"./interfaces/ITLC.1.sol\\\";\\n\\n/// @title TLC (v1)\\n/// @author Alluvial\\n/// @notice The TLC token has a max supply of 1,000,000,000 and 18 decimal places.\\n/// @notice Upon deployment, all minted tokens are send to account provided at construction, in charge of creating the vesting schedules\\n/// @notice The contract is based on ERC20Votes by OpenZeppelin. Users need to delegate their voting power to someone or themselves to be able to vote.\\n/// @notice The contract contains vesting logics allowing vested users to still be able to delegate their voting power while their tokens are held in an escrow\\ncontract TLCV1 is ERC20VestableVotesUpgradeableV1, ITLCV1 {\\n    // Token information\\n    string internal constant NAME = \\\"Liquid Collective\\\";\\n    string internal constant SYMBOL = \\\"TLC\\\";\\n\\n    // Initial supply of token minted\\n    uint256 internal constant INITIAL_SUPPLY = 1_000_000_000e18; // 1 billion TLC\\n\\n    /// @notice Disables implementation initialization\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @inheritdoc ITLCV1\\n    function initTLCV1(address _account) external initializer {\\n        LibSanitize._notZeroAddress(_account);\\n        __ERC20Permit_init(NAME);\\n        __ERC20_init(NAME, SYMBOL);\\n        _mint(_account, INITIAL_SUPPLY);\\n    }\\n\\n    /// @inheritdoc ITLCV1\\n    function migrateVestingSchedules() external reinitializer(2) {\\n        ERC20VestableVotesUpgradeableV1.migrateVestingSchedulesFromV1ToV2();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/ITLC.1.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/contracts/governance/utils/IVotesUpgradeable.sol\\\";\\n\\nimport \\\"./components/IERC20VestableVotesUpgradeable.1.sol\\\";\\n\\n/// @title TLC Interface (v1)\\n/// @author Alluvial\\n/// @notice TLC token interface\\ninterface ITLCV1 is IERC20VestableVotesUpgradeableV1, IVotesUpgradeable, IERC20Upgradeable {\\n    /// @notice Initializes the TLC Token\\n    /// @param _account The initial account to grant all the minted tokens\\n    function initTLCV1(address _account) external;\\n\\n    /// @notice Migrates the vesting schedule state structures\\n    function migrateVestingSchedules() external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/migration/TLC_globalUnlockScheduleMigration.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"../state/tlc/VestingSchedules.2.sol\\\";\\nimport \\\"../state/tlc/IgnoreGlobalUnlockSchedule.sol\\\";\\n\\nstruct VestingScheduleMigration {\\n    // number of consecutive schedules to migrate with the same parameters\\n    uint8 scheduleCount;\\n    // The new lock duration\\n    uint32 newLockDuration;\\n    // if != 0, the new start value\\n    uint64 newStart;\\n    // if != 0, the new end value\\n    uint64 newEnd;\\n    // set cliff to 0 if true\\n    bool setCliff;\\n    // if true set vesting duration to 86400\\n    bool setDuration;\\n    // if true set vesting period duration to 86400\\n    bool setPeriodDuration;\\n    // if true schedule will not be subject to global unlock schedule\\n    bool ignoreGlobalUnlock;\\n}\\n\\nuint256 constant OCTOBER_16_2024 = 1729036800;\\n\\ncontract TlcMigration {\\n    error CliffTooLong(uint256 i);\\n    error WrongUnlockDate(uint256 i);\\n    error WrongEnd(uint256 i);\\n\\n    function migrate() external {\\n        VestingScheduleMigration[] memory migrations = new VestingScheduleMigration[](30);\\n        // 0 -> 6\\n        migrations[0] = VestingScheduleMigration({\\n            scheduleCount: 7,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 75772800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 7\\n        migrations[1] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 70329600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 8\\n        migrations[2] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 65491200,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 9 -> 12\\n        migrations[3] = VestingScheduleMigration({\\n            scheduleCount: 4,\\n            newStart: 0,\\n            newEnd: 1656720000,\\n            newLockDuration: 72403200,\\n            setCliff: true,\\n            setDuration: true,\\n            setPeriodDuration: true,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 13\\n        migrations[4] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 67046400,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 14\\n        migrations[5] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 56505600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 15\\n        migrations[6] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 58233600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 16\\n        migrations[7] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 57974400,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 17\\n        migrations[8] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 53740800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 18\\n        migrations[9] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 75772800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 19\\n        migrations[10] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 49474800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 20\\n        migrations[11] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 75772800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 21\\n        migrations[12] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 49474800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 22\\n        migrations[13] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 75772800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 23\\n        migrations[14] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 49474800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 24 -> 26\\n        migrations[15] = VestingScheduleMigration({\\n            scheduleCount: 3,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 75772800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 27\\n        migrations[16] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 70329600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 28 -> 29\\n        migrations[17] = VestingScheduleMigration({\\n            scheduleCount: 2,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 50371200,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 30\\n        migrations[18] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 50716800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 31\\n        migrations[19] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 50803200,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 32\\n        migrations[20] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 50889600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 33\\n        migrations[21] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 50716800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 34 -> 35\\n        migrations[22] = VestingScheduleMigration({\\n            scheduleCount: 2,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 50889600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 36 -> 60\\n        migrations[23] = VestingScheduleMigration({\\n            scheduleCount: 25,\\n            newStart: 1686175200,\\n            newEnd: 1686261600,\\n            newLockDuration: 42861600,\\n            setCliff: false,\\n            setDuration: true,\\n            setPeriodDuration: true,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 61\\n        migrations[24] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 40953600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 62\\n        migrations[25] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 48729600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: false\\n        });\\n        // 63\\n        migrations[26] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 41644800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 64\\n        migrations[27] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 47001600,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 65\\n        migrations[28] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 45014400,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // 66\\n        migrations[29] = VestingScheduleMigration({\\n            scheduleCount: 1,\\n            newStart: 0,\\n            newEnd: 0,\\n            newLockDuration: 38188800,\\n            setCliff: false,\\n            setDuration: false,\\n            setPeriodDuration: false,\\n            ignoreGlobalUnlock: true\\n        });\\n        // All schedules covered\\n\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < migrations.length; i++) {\\n            VestingScheduleMigration memory migration = migrations[i];\\n            for (uint256 j = 0; j < migration.scheduleCount; j++) {\\n                VestingSchedulesV2.VestingSchedule storage sch = VestingSchedulesV2.get(index);\\n\\n                bool isRevoked = false;\\n                if (sch.start + sch.duration != sch.end) {\\n                    isRevoked = true;\\n                }\\n                // Modifications\\n                sch.lockDuration = migration.newLockDuration;\\n                if (migration.newStart != 0) {\\n                    sch.start = migration.newStart;\\n                }\\n                if (migration.newEnd != 0) {\\n                    sch.end = migration.newEnd;\\n                }\\n                if (migration.setCliff) {\\n                    sch.cliffDuration = 0;\\n                }\\n                if (migration.setDuration) {\\n                    sch.duration = 86400;\\n                }\\n                if (migration.setPeriodDuration) {\\n                    sch.periodDuration = 86400;\\n                }\\n                if (migration.ignoreGlobalUnlock) {\\n                    IgnoreGlobalUnlockSchedule.set(index, true);\\n                }\\n\\n                // Post effects checks\\n                // check cliff is not longer than duration\\n                if (sch.cliffDuration > sch.duration) {\\n                    revert CliffTooLong(index);\\n                }\\n                // sanity checks on non revoked schedules\\n                if (!isRevoked && (sch.end != sch.start + sch.duration)) {\\n                    revert WrongEnd(index);\\n                }\\n                // check all the schedules are locked until unix : 1729036800\\n                if (sch.start + sch.lockDuration != OCTOBER_16_2024) {\\n                    revert WrongUnlockDate(index);\\n                }\\n\\n                index += 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/Firewall.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/IFirewall.sol\\\";\\n\\nimport \\\"./Administrable.sol\\\";\\n\\n/// @title Firewall\\n/// @author Figment\\n/// @notice This contract accepts calls to admin-level functions of an underlying contract, and\\n///         ensures the caller holds an appropriate role for calling that function. There are two roles:\\n///          - An Admin can call anything\\n///          - An Executor can call specific functions. The list of function is customisable.\\n///         Random callers cannot call anything through this contract, even if the underlying function\\n///         is unpermissioned in the underlying contract.\\n///         Calls to non-admin functions should be called at the underlying contract directly.\\ncontract Firewall is IFirewall, Administrable {\\n    /// @inheritdoc IFirewall\\n    address public executor;\\n\\n    /// @inheritdoc IFirewall\\n    address public destination;\\n\\n    /// @inheritdoc IFirewall\\n    mapping(bytes4 => bool) public executorCanCall;\\n\\n    /// @param _admin Address of the administrator, that is able to perform all calls via the Firewall\\n    /// @param _executor Address of the executor, that is able to perform only a subset of calls via the Firewall\\n    /// @param _executorCallableSelectors Initial list of allowed selectors for the executor\\n    constructor(address _admin, address _executor, address _destination, bytes4[] memory _executorCallableSelectors) {\\n        LibSanitize._notZeroAddress(_executor);\\n        LibSanitize._notZeroAddress(_destination);\\n        _setAdmin(_admin);\\n        executor = _executor;\\n        destination = _destination;\\n\\n        emit SetExecutor(_executor);\\n        emit SetDestination(_destination);\\n\\n        for (uint256 i; i < _executorCallableSelectors.length;) {\\n            executorCanCall[_executorCallableSelectors[i]] = true;\\n            emit SetExecutorPermissions(_executorCallableSelectors[i], true);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice Prevents unauthorized calls\\n    modifier onlyAdminOrExecutor() {\\n        if (_getAdmin() != msg.sender && msg.sender != executor) {\\n            revert LibErrors.Unauthorized(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    function setExecutor(address _newExecutor) external onlyAdminOrExecutor {\\n        LibSanitize._notZeroAddress(_newExecutor);\\n        executor = _newExecutor;\\n        emit SetExecutor(_newExecutor);\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    function allowExecutor(bytes4 _functionSelector, bool _executorCanCall) external onlyAdmin {\\n        executorCanCall[_functionSelector] = _executorCanCall;\\n        emit SetExecutorPermissions(_functionSelector, _executorCanCall);\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /// @inheritdoc IFirewall\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /// @notice Performs call checks to verify that the caller is able to perform the call\\n    function _checkCallerRole() internal view {\\n        if (msg.sender == _getAdmin() || (executorCanCall[msg.sig] && msg.sender == executor)) {\\n            return;\\n        }\\n        revert LibErrors.Unauthorized(msg.sender);\\n    }\\n\\n    /// @notice Forwards the current call parameters to the destination address\\n    /// @param _destination Address on which the forwarded call is performed\\n    /// @param _value Message value to attach to the call\\n    function _forward(address _destination, uint256 _value) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the destination.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := call(gas(), _destination, _value, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // call returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /// @notice Internal utility to perform authorization checks and forward a call\\n    function _fallback() internal virtual {\\n        _checkCallerRole();\\n        _forward(destination, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/interfaces/IFirewall.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/// @title Firewall\\n/// @author Figment\\n/// @notice This interface exposes methods to accept calls to admin-level functions of an underlying contract.\\ninterface IFirewall {\\n    /// @notice The stored executor address has been changed\\n    /// @param executor The new executor address\\n    event SetExecutor(address indexed executor);\\n\\n    /// @notice The stored destination address has been changed\\n    /// @param destination The new destination address\\n    event SetDestination(address indexed destination);\\n\\n    /// @notice The storage permission for a selector has been changed\\n    /// @param selector The 4 bytes method selector\\n    /// @param status True if executor is allowed\\n    event SetExecutorPermissions(bytes4 selector, bool status);\\n\\n    /// @notice Retrieve the executor address\\n    /// @return The executor address\\n    function executor() external view returns (address);\\n\\n    /// @notice Retrieve the destination address\\n    /// @return The destination address\\n    function destination() external view returns (address);\\n\\n    /// @notice Returns true if the executor is allowed to perform a call on the given selector\\n    /// @param _selector The selector to verify\\n    /// @return True if executor is allowed to call\\n    function executorCanCall(bytes4 _selector) external view returns (bool);\\n\\n    /// @notice Sets the executor address\\n    /// @param _newExecutor New address for the executor\\n    function setExecutor(address _newExecutor) external;\\n\\n    /// @notice Sets the permission for a function selector\\n    /// @param _functionSelector Method signature on which the permission is changed\\n    /// @param _executorCanCall True if selector is callable by the executor\\n    function allowExecutor(bytes4 _functionSelector, bool _executorCanCall) external;\\n\\n    /// @notice Fallback method. All its parameters are forwarded to the destination if caller is authorized\\n    fallback() external payable;\\n\\n    /// @notice Receive fallback method. All its parameters are forwarded to the destination if caller is authorized\\n    receive() external payable;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"CliffTooLong\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"WrongEnd\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"WrongUnlockDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TlcMigration", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2628731d533f9dba5957d0da5558d516d6e79c2b1876505814a7d47d3c79ce2d"}