{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Liti/farming.sol\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n/// @title Liti Capital Staking contract\r\n/// @author Jaime Delgado\r\n/// @notice no token locking required, uses power law to incentivate staking to the end of the periods\r\n/// @dev All function calls are currently implemented without side effects\r\ncontract Staking {\r\n    struct Campaign {\r\n        uint256 funds;\r\n        uint256 endDate;\r\n    }\r\n    struct StakeInfo {\r\n        uint256 amount;\r\n        uint64 startDate;\r\n        uint64 endDate;\r\n        uint64 rate;\r\n        uint64 coeff;\r\n    }\r\n\r\n    uint256 constant TT = 365 * 24 * 60 * 60;\r\n    address public tokenAddress;\r\n    uint256 constant RATE_DECIMALS = 3;\r\n    uint256[3] public currentRate;\r\n    uint256[3] public powLawCoeff;\r\n    uint256[3] public periods = [30 days, 60 days, 90 days];\r\n    uint256 public maxStaking;\r\n    address public owner;\r\n    Campaign public campaignInfo;\r\n\r\n    mapping(address => uint256) private stakeId;\r\n    mapping(address => mapping(uint256 => StakeInfo)) private stakes;\r\n    mapping(address => uint256) private balances;\r\n\r\n    // Events --------------------------------------------------------------------------\r\n\r\n    ///@dev Emitted when a new campaign is created.\r\n    event NewCampaign(uint256 funds, uint256 endDate);\r\n\r\n    ///@dev Emitted when a campaign funds are increased or extended the time.\r\n    event CampaignEdited(uint256 addedFunds, uint256 newEndDate);\r\n\r\n    ///@dev Emitted when the reward funds are removed.\r\n    event RewardFundsRemoved(uint256 amount);\r\n\r\n    ///@dev Emitted when the rate, powerlaw coeff and maxStaking params are modified.\r\n    event ParamsChanged(\r\n        uint256[3] oldRates,\r\n        uint256[3] newRates,\r\n        uint256[3] oldCoeffs,\r\n        uint256[3] newCoeffs,\r\n        uint256 maxStaking\r\n    );\r\n\r\n    ///@dev Emitted when a new stake is created.\r\n    event Staked(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 startDate,\r\n        uint256 endDate,\r\n        uint256 rate,\r\n        uint256 powLawCoeff,\r\n        uint256 stakeId\r\n    );\r\n\r\n    ///@dev Emitted when an stake is removed.\r\n    event UnStaked(\r\n        address indexed account,\r\n        uint256 amount,\r\n        uint256 reward,\r\n        uint256 stakeId\r\n    );\r\n\r\n    // Constructor ---------------------------------------------------------------------\r\n    constructor(address _tokenAddress) {\r\n        owner = msg.sender;\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    // Modifiers -----------------------------------------------------------------------\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Getters -------------------------------------------------------------------------\r\n    /// @notice getter for stake information\r\n    /// @param account is the account that created the stake\r\n    /// @param userStakeId is the id generated for the stake\r\n    /// @return struct with stake information\r\n    function getStake(address account, uint256 userStakeId)\r\n        public\r\n        view\r\n        returns (StakeInfo memory)\r\n    {\r\n        return stakes[account][userStakeId];\r\n    }\r\n\r\n    /// @notice getter for reward and staked amount\r\n    /// @param account is the account that created the stake\r\n    /// @param userStakeId is the id generated for the stake\r\n    /// @return amount staked, reward at the current timestamp and maxReward\r\n    function getStackAndReward(address account, uint256 userStakeId)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 reward,\r\n            uint256 maxReward\r\n        )\r\n    {\r\n        amount = stakes[account][userStakeId].amount;\r\n        uint256 startDate = stakes[account][userStakeId].startDate;\r\n        uint256 endDate = stakes[account][userStakeId].endDate;\r\n        uint256 rate = stakes[account][userStakeId].rate;\r\n        uint256 coeff = stakes[account][userStakeId].coeff;\r\n        uint256 fd = endDate <= block.timestamp ? endDate : block.timestamp;\r\n        uint256 tp = endDate - startDate;\r\n        uint256 dt = fd - startDate;\r\n        reward =\r\n            (rate * amount * (dt**(coeff + 1))) /\r\n            (TT * (tp**coeff) * (10**RATE_DECIMALS));\r\n        maxReward = (amount * rate * tp) / (TT * (10**RATE_DECIMALS));\r\n    }\r\n\r\n    /// @notice getter for maxReward\r\n    /// @param amount amount staked\r\n    /// @param rate interest rate for this stake\r\n    /// @param tp staking period in seconds\r\n    /// @return maxReward\r\n    function getMaxReward(\r\n        uint256 amount,\r\n        uint256 rate,\r\n        uint256 tp\r\n    ) public pure returns (uint256 maxReward) {\r\n        maxReward = (amount * rate * tp) / (TT * (10**RATE_DECIMALS));\r\n    }\r\n\r\n    // Setters -------------------------------------------------------------------------\r\n    /// @notice assign funds and endDate for a staking campaign\r\n    /// @param funds for rewards\r\n    /// @param endDate date after which no more stakings will accepted\r\n    function newCampaign(uint256 funds, uint256 endDate) public onlyAdmin {\r\n        require(campaignInfo.endDate < block.timestamp, \"Campaign Active\");\r\n        IERC20 wliti = IERC20(tokenAddress);\r\n        require(\r\n            wliti.transferFrom(msg.sender, address(this), funds),\r\n            \"trasfer failed\"\r\n        );\r\n        campaignInfo.funds = campaignInfo.funds + funds;\r\n        campaignInfo.endDate = endDate;\r\n        emit NewCampaign(funds, endDate);\r\n    }\r\n\r\n    /// @notice increase funds and/or extend campaign\r\n    /// @param funds for rewards\r\n    /// @param endDate date after which no more stakings will accepted\r\n    function editCampaign(uint256 funds, uint256 endDate) public onlyAdmin {\r\n        require(campaignInfo.endDate > block.timestamp, \"Campaign inactive\");\r\n        require(endDate >= campaignInfo.endDate, \"Campaign can't be shortened\");\r\n        campaignInfo.endDate = endDate;\r\n        if (funds != 0) {\r\n            IERC20 wliti = IERC20(tokenAddress);\r\n            require(\r\n                wliti.transferFrom(msg.sender, address(this), funds),\r\n                \"transfer failed\"\r\n            );\r\n            campaignInfo.funds = campaignInfo.funds + funds;\r\n        }\r\n        emit CampaignEdited(funds, endDate);\r\n    }\r\n\r\n    /// @notice withdraw funds not commited\r\n    /// @dev only after 3 months of the end of the campaign\r\n    function removeRewardFunds() public onlyAdmin {\r\n        require(\r\n            campaignInfo.endDate + (90 days) < block.timestamp,\r\n            \"Campaign Active\"\r\n        );\r\n        IERC20 wliti = IERC20(tokenAddress);\r\n        require(wliti.transfer(owner, campaignInfo.funds), \"transfer failed\");\r\n        emit RewardFundsRemoved(campaignInfo.funds);\r\n        campaignInfo.funds = 0;\r\n    }\r\n\r\n    /// @notice change parameters of campaign\r\n    /// @param rates interest rates for the three periods\r\n    /// @param coeffs power law coefficients for each period\r\n    /// @param maxStaking_ max staked per address\r\n    function setNewParams(\r\n        uint256[3] memory rates,\r\n        uint256[3] memory coeffs,\r\n        uint256 maxStaking_\r\n    ) public onlyAdmin {\r\n        emit ParamsChanged(\r\n            currentRate,\r\n            rates,\r\n            powLawCoeff,\r\n            coeffs,\r\n            maxStaking_\r\n        );\r\n        currentRate = rates;\r\n        powLawCoeff = coeffs;\r\n        maxStaking = maxStaking_;\r\n    }\r\n\r\n    /// @notice create new stake\r\n    /// @param amount amount staked\r\n    /// @param periodIndex index for one of the three periods\r\n    /// @return userStakeId\r\n    function stake(uint256 amount, uint256 periodIndex)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        uint256 userStakeId = stakeFor(msg.sender, amount, periodIndex);\r\n        return userStakeId;\r\n    }\r\n\r\n    /// @notice create new stake for an account other than msg.sender\r\n    /// @param account account that will own the stake\r\n    /// @param amount amount staked\r\n    /// @param periodIndex index for one of the three periods\r\n    /// @return userStakeId\r\n    function stakeFor(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 periodIndex\r\n    ) public returns (uint256) {\r\n        require(account != address(0), \"Invalid address passed\");\r\n        require(balances[account] + amount <= maxStaking, \"Max exceeded\");\r\n        require(campaignInfo.endDate > block.timestamp, \"Campaign ended\");\r\n        require(periodIndex <= 2, \"Invalid period ID\");\r\n        require(amount != 0, \"Staking zero token\");\r\n\r\n        uint256 maxReward = getMaxReward(\r\n            amount,\r\n            currentRate[periodIndex],\r\n            periods[periodIndex]\r\n        );\r\n        require(\r\n            campaignInfo.funds >= maxReward,\r\n            \"Not enough funds in the contract\"\r\n        );\r\n\r\n        campaignInfo.funds = campaignInfo.funds - maxReward;\r\n        balances[account] = balances[account] + amount;\r\n\r\n        IERC20 wliti = IERC20(tokenAddress);\r\n        require(\r\n            wliti.transferFrom(msg.sender, address(this), amount),\r\n            \"transfer failed\"\r\n        );\r\n\r\n        uint256 userStakeId = stakeId[account];\r\n        stakes[account][userStakeId] = StakeInfo(\r\n            amount,\r\n            uint64(block.timestamp),\r\n            uint64(block.timestamp + periods[periodIndex]),\r\n            uint64(currentRate[periodIndex]),\r\n            uint64(powLawCoeff[periodIndex])\r\n        );\r\n\r\n        emit Staked(\r\n            msg.sender,\r\n            amount,\r\n            block.timestamp,\r\n            block.timestamp + periods[periodIndex],\r\n            currentRate[periodIndex],\r\n            powLawCoeff[periodIndex],\r\n            userStakeId\r\n        );\r\n        stakeId[account] = userStakeId + 1;\r\n        return userStakeId;\r\n    }\r\n\r\n    /// @notice unstake and create new stake of amount plus reward\r\n    /// @param userStakeId_ stake to unstake\r\n    /// @param periodIndex index for one of the three periods\r\n    /// @return userStakeId id of the new stake\r\n    function reStake(uint256 userStakeId_, uint256 periodIndex)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        require(campaignInfo.endDate > block.timestamp, \"Campaign ended\");\r\n        require(periodIndex <= 2, \"Invalid period ID\");\r\n\r\n        (uint256 amount, uint256 reward, uint256 maxReward) = getStackAndReward(\r\n            msg.sender,\r\n            userStakeId_\r\n        );\r\n        require(amount != 0, \"Invalid stake ID\");\r\n        campaignInfo.funds = campaignInfo.funds + (maxReward - reward);\r\n        emit UnStaked(msg.sender, amount, reward, userStakeId_);\r\n\r\n        amount = amount + reward;\r\n        maxReward = getMaxReward(\r\n            amount,\r\n            currentRate[periodIndex],\r\n            periods[periodIndex]\r\n        );\r\n\r\n        require(balances[msg.sender] + amount <= maxStaking, \"Max exceeded\");\r\n        require(\r\n            campaignInfo.funds >= maxReward,\r\n            \"Not enough funds in the contract\"\r\n        );\r\n        campaignInfo.funds = campaignInfo.funds - maxReward;\r\n        balances[msg.sender] = balances[msg.sender] + reward; // only the reward is newly added to the staked amount\r\n\r\n        uint256 userStakeId = stakeId[msg.sender];\r\n        stakes[msg.sender][userStakeId] = StakeInfo(\r\n            amount,\r\n            uint64(block.timestamp),\r\n            uint64(block.timestamp + periods[periodIndex]),\r\n            uint64(currentRate[periodIndex]),\r\n            uint64(powLawCoeff[periodIndex])\r\n        );\r\n\r\n        emit Staked(\r\n            msg.sender,\r\n            amount,\r\n            block.timestamp,\r\n            block.timestamp + periods[periodIndex],\r\n            currentRate[periodIndex],\r\n            powLawCoeff[periodIndex],\r\n            userStakeId\r\n        );\r\n        delete stakes[msg.sender][userStakeId_];\r\n        stakeId[msg.sender] = userStakeId + 1;\r\n\r\n        return userStakeId;\r\n    }\r\n\r\n    /// @notice unstake\r\n    /// @param userStakeId stake to unstake\r\n    function unstake(uint256 userStakeId) public {\r\n        (uint256 amount, uint256 reward, uint256 maxReward) = getStackAndReward(\r\n            msg.sender,\r\n            userStakeId\r\n        );\r\n        require(amount != 0, \"Invalid stake ID\");\r\n        IERC20 wliti = IERC20(tokenAddress);\r\n        require(wliti.transfer(msg.sender, amount + reward), \"transfer failed\");\r\n        delete stakes[msg.sender][userStakeId];\r\n        campaignInfo.funds = campaignInfo.funds + (maxReward - reward);\r\n        balances[msg.sender] = balances[msg.sender] - amount;\r\n        emit UnStaked(msg.sender, amount, reward, userStakeId);\r\n    }\r\n\r\n    /// @notice unstake\r\n    /// @param userStakeId array of stakeIds\r\n    function unstakeMany(uint256[] memory userStakeId) public {\r\n        require(userStakeId.length <= 10, \"Number of un-stakes limted to 10\");\r\n        uint256 totalAmount;\r\n        uint256 totalReward;\r\n        uint256 totalMaxReward;\r\n        for (uint256 i = 0; i < userStakeId.length; i++) {\r\n            uint256 ind = userStakeId[i];\r\n            (\r\n                uint256 amount,\r\n                uint256 reward,\r\n                uint256 maxReward\r\n            ) = getStackAndReward(msg.sender, ind);\r\n            if (amount == 0) continue;\r\n            totalAmount = totalAmount + amount;\r\n            totalReward = totalReward + reward;\r\n            totalMaxReward = totalMaxReward + maxReward;\r\n            delete stakes[msg.sender][ind];\r\n            emit UnStaked(msg.sender, amount, reward, ind);\r\n        }\r\n        campaignInfo.funds =\r\n            campaignInfo.funds -\r\n            (totalMaxReward - totalReward);\r\n        balances[msg.sender] = balances[msg.sender] - totalAmount;\r\n        IERC20 wliti = IERC20(tokenAddress);\r\n        require(\r\n            wliti.transfer(msg.sender, totalAmount + totalReward),\r\n            \"transfer failed\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedFunds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndDate\",\"type\":\"uint256\"}],\"name\":\"CampaignEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"NewCampaign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"oldRates\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"newRates\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"oldCoeffs\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"newCoeffs\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxStaking\",\"type\":\"uint256\"}],\"name\":\"ParamsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardFundsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"powLawCoeff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"campaignInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"editCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"}],\"name\":\"getMaxReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userStakeId\",\"type\":\"uint256\"}],\"name\":\"getStackAndReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userStakeId\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"rate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"coeff\",\"type\":\"uint64\"}],\"internalType\":\"struct Staking.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"newCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"powLawCoeff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userStakeId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodIndex\",\"type\":\"uint256\"}],\"name\":\"reStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeRewardFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"rates\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"coeffs\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"maxStaking_\",\"type\":\"uint256\"}],\"name\":\"setNewParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodIndex\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodIndex\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userStakeId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"userStakeId\",\"type\":\"uint256[]\"}],\"name\":\"unstakeMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000b63128c40737b13647552e0c926bcfeccc35f93", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6cb932daded5e1ee2efbcbac9f9a4ca45757c1178884de20a3713596afbfb90"}