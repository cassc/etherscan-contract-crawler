{"SourceCode": "pragma solidity ^0.4.26;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint a, uint b) internal returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n  function sub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      revert();\r\n    }\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * Pausable\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism.\r\n */\r\n\r\ncontract Pausable is Ownable {\r\n  bool public stopped;\r\n\r\n  modifier stopInEmergency {\r\n    if (stopped) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n \r\n  modifier onlyInEmergency {\r\n    if (!stopped) {\r\n      revert();\r\n    }\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function emergencyStop() external onlyOwner {\r\n    stopped = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function release() external onlyOwner onlyInEmergency {\r\n    stopped = false;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) constant returns (uint);\r\n  function transfer(address to, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint);\r\n  function transferFrom(address from, address to, uint value);\r\n  function approve(address spender, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n \r\n  using SafeMath for uint;\r\n \r\n  mapping(address => uint) balances;\r\n \r\n  /*\r\n   * Fix for the ERC20 short address attack  \r\n  */\r\n  modifier onlyPayloadSize(uint size) {\r\n     if(msg.data.length < size + 4) {\r\n       revert();\r\n     }\r\n     _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n   emit Transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n  mapping (address => mapping (address => uint)) allowed;\r\n\r\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n     var _allowance = allowed[_from][msg.sender];\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // if (_value > _allowance) throw;\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint _value) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract CIRNCoin is StandardToken, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"CIRN Coin\";\r\n  string public symbol = \"CIRN\";\r\n  uint256 public decimals = 18;\r\n  uint256 constant public CIRN_UNIT = 10 ** 18;\r\n  uint256 public INITIAL_SUPPLY = 2500000000000 * CIRN_UNIT; // 2.5 trillion ( 2500000000000 ) CIRN COINS\r\n  uint256 public totalAllocated = 0;             // Counter to keep track of overall token allocation\r\n  uint256 public remaintokens=0;\r\n  uint256 public MINTER_SUPPLY = 10000000 * CIRN_UNIT;\r\n \r\n  //  Constants\r\n    uint256 constant public maxOwnerSupply = 1000000000000 * CIRN_UNIT;           // Owner seperate allocation 1 trillion token\r\n    uint256 constant public otherSupply = 500000000000 * CIRN_UNIT;     //  Other's allocation 500 billions\r\n\r\n\r\naddress public constant OWNERSTAKE = 0xB62F14150C85767680de65b62617Fe1312c16C56;  \r\n   address public constant  OTHERSTAKE = 0xB4845e262cB348A58418Fb9735525c2e6604b8f0;\r\n   \r\n\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  constructor() {\r\n     \r\n       \r\n        totalAllocated+=maxOwnerSupply+otherSupply;  // Add to total Allocated funds\r\n\r\n   remaintokens=INITIAL_SUPPLY-totalAllocated;\r\n     \r\n    totalSupply = INITIAL_SUPPLY;\r\n    //balances[msg.sender] = totalSupply;\r\n    //emit Transfer(0x0, msg.sender, totalSupply);\r\n    balances[OWNERSTAKE] = maxOwnerSupply; // owner seperate CIRN COINS\r\n    balances[OTHERSTAKE] = otherSupply; // other share of CIRN COINS\r\n    //transfer(OWNERSTAKE, maxOwnerSupply);\r\n    //transfer(OTHERSTAKE, otherSupply);\r\n    balances[msg.sender] = remaintokens; // Send remaining tokens to owner's primary wallet from where contract is deployed\r\n   \r\n  }\r\n\r\n  function burn(uint _value) onlyOwner returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Transfer(msg.sender, 0x0, _value);\r\n    return true;\r\n  }\r\n \r\n  function mint(address recipient, uint256 amount) public {\r\n        //require(msg.sender == owner);\r\n        require(totalSupply + amount <= 3500000000000 * 10**18,\"total mintable coin is 1 trillion CIRN\"); // Overflow check\r\n         require(balances[msg.sender] >= MINTER_SUPPLY,\"You must have atleast 10 milion CIRN tokens\");\r\n         require(amount <= MINTER_SUPPLY,\"You can only mint upto 10 million CIRN\");\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        emit Transfer(address(0), recipient, amount);\r\n    }\r\n\r\n}\r\n\r\n/*\r\n  ICO Smart Contract for the CIRNCOIN project\r\n  This smart contract collects ETH, and in return emits equivalent CIRN tokens.\r\n*/\r\ncontract CrowdsaleCIRN is Pausable {\r\n   \r\n    using SafeMath for uint;\r\n\r\n    struct Backer {\r\n    uint weiReceived; // Amount of Ether given\r\n    uint coinSent;\r\n  }\r\n\r\n  /*\r\n  * Constants\r\n  */\r\n \r\n uint public constant MIN_CAP = 0; // no minimum cap\r\n  /* Maximum number of CIRNCOINS to sell */\r\n  uint public constant MAX_CAP = 1000000000000 * 10 **18;\r\n\r\n  // 1 trillion ( 1,000,000,000,000 ) CIRN COINS\r\n\r\n  /* Crowdsale period */\r\n  uint private constant CROWDSALE_PERIOD = 1827 days;\r\n /*uint private constant CROWDSALE_PERIOD = 1 seconds;*/\r\n \r\n \r\n  /* Number of CIRN COINS per Ether */\r\n  uint public constant COIN_PER_ETHER = 909090090090090 * 10**18;\r\n \r\n// price of 1 CIRN Coin= 0.0000000000000011 ETH\r\n\r\n                                       \r\n\r\n  /*\r\n  * Variables\r\n  */\r\n  /* CIRNCoin contract reference */\r\n  CIRNCoin public coin;\r\n    /* Multisig contract that will receive the Ether */\r\n  address public multisigEther;\r\n  /* Number of Ether received */\r\n  uint public etherReceived;\r\n \r\n  //uint public ETHToSend;\r\n \r\n \r\n \r\n  /* Number of CIRNCoin sent to Ether contributors */\r\n  uint public coinSentToEther;\r\n  /* Crowdsale start time */\r\n  uint public startTime;\r\n  /* Crowdsale end time */\r\n  uint public endTime;\r\n \r\n \r\n \r\n \r\n \r\n  /* Is crowdsale still on going */\r\n  bool public crowdsaleClosed=false;\r\n \r\n \r\n\r\n  /* Backers Ether indexed by their Ethereum address */\r\n  mapping(address => Backer) public backers;\r\n\r\n\r\n  /*\r\n  * Modifiers\r\n  */\r\n \r\n\r\n  modifier respectTimeFrame() {\r\n    require ((now > startTime) || (now < endTime )) ;\r\n    _;\r\n  }\r\n\r\n  /*\r\n   * Event\r\n  */\r\n  event LogReceivedETH(address addr, uint value);\r\n  event LogCoinsEmited(address indexed from, uint amount);\r\n\r\n  /*\r\n   * Constructor\r\n  */\r\n  function CrowdsaleCIRN(address _CIRNCoinAddress, address _to) {\r\n    coin = CIRNCoin(_CIRNCoinAddress);\r\n    multisigEther = _to;\r\n  }\r\n\r\n  /*\r\n   * The fallback function corresponds to a donation in ETH\r\n   */\r\n  function() stopInEmergency respectTimeFrame payable {\r\n    receiveETH(msg.sender);\r\n  }\r\n\r\n  /*\r\n   * To call to start the crowdsale\r\n   */\r\n  function start() onlyOwner {\r\n   \r\n    startTime = now ;          \r\n    endTime =  now + CROWDSALE_PERIOD;  \r\n\r\n    crowdsaleClosed=false;\r\n   \r\n \r\n   \r\n  }\r\n\r\n  /*\r\n   *  Receives a donation in Ether\r\n  */\r\n \r\n  function receiveETH(address beneficiary) internal {\r\n\r\n\r\nuint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of CIRN COINS to send\r\nrequire(coinToSend.add(coinSentToEther) <= MAX_CAP,\"coin sent should be maximum 1 trillion\");\r\nrequire(crowdsaleClosed == false,\"crowdsale should be  open\");\r\n\r\nBacker backer = backers[beneficiary];\r\ncoin.transfer(beneficiary, coinToSend); // Transfer CIRN COINS right now\r\n\r\nbacker.coinSent = backer.coinSent.add(coinToSend);\r\nbacker.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer    \r\n\r\netherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\r\ncoinSentToEther = coinSentToEther.add(coinToSend);\r\n\r\n// Send events\r\nLogCoinsEmited(msg.sender ,coinToSend);\r\nLogReceivedETH(beneficiary, etherReceived);\r\n}\r\n\r\n\r\n\r\n  /*\r\n   *Compute the CIRNCoin bonus according to the investment period\r\n   */\r\n  function bonus(uint amount) internal constant returns (uint) {\r\n   \r\n    return amount;\r\n  }\r\n\r\n \r\n\r\n  /*  \r\n  * Failsafe drain\r\n  */\r\n  function drain() onlyOwner {\r\n    //if (!owner.send(this.balance)) revert();\r\n    owner.transfer(this.balance);\r\n   \r\n    crowdsaleClosed = true;\r\n  }\r\n\r\n  /**\r\n   * Allow to change the team multisig address in the case of emergency.\r\n   */\r\n  function setMultisig(address addr) onlyOwner public {\r\n    //if (addr == address(0)) throw;\r\n    require(addr != address(0));\r\n    multisigEther = addr;\r\n  }\r\n\r\n  /**\r\n   * Manually back CIRNCoin owner address.\r\n   */\r\n  function backCIRNCoinOwner() onlyOwner public {\r\n    coin.transferOwnership(owner);\r\n  }\r\n\r\n  /**\r\n   * Transfer remains to owner\r\n   */\r\n  function getRemainCoins() onlyOwner public {\r\n     \r\n    var remains = MAX_CAP - coinSentToEther;\r\n   \r\n    Backer backer = backers[owner];\r\n    coin.transfer(owner, remains); // Transfer CIRNCoins right now\r\n\r\n    backer.coinSent = backer.coinSent.add(remains);\r\n\r\n    coinSentToEther = coinSentToEther.add(remains);\r\n\r\n    // Send events\r\n    emit LogCoinsEmited(this ,remains);\r\n    emit LogReceivedETH(owner, etherReceived);\r\n  }\r\n\r\n\r\n \r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CIRN_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxOwnerSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINTER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OTHERSTAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaintokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otherSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNERSTAKE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "CIRNCoin", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2b3d7d950294a6a5b35df290b1d8f3a403c3b14f5e76c3714dadbc847dd2b0ef"}