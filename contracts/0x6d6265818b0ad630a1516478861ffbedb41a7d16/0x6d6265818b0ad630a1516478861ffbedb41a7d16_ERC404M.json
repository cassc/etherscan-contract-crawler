{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ERC404/ERC404M.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Metadrop Contracts (v2.1.0)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ThirdParty/ERC404/erc404.sol\\\";\\nimport {IErrors} from \\\"../Global/IErrors.sol\\\";\\nimport {Revert} from \\\"../Global/Revert.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract ERC404M is ERC404 {\\n  string baseURI;\\n\\n  event ERC404MCreated(\\n    string name,\\n    string symbol,\\n    uint256 totalNativeSupply,\\n    address indexed deployer\\n  );\\n\\n/**\\n * @dev Constructor\\n *\\n * @param baseURI_ The base URI for the token\\n * @param recipients_ The recipients of the initial distribution\\n * @param amounts_ The amounts of the initial distribution\\n * @param name_ The name of the token\\n * @param symbol_ The symbol of the token\\n * @param decimals_ The number of decimals for the token\\n * @param totalNativeSupply_ The total supply of the token\\n * @param owner_ The owner of the contract\\n */\\n  constructor(\\n    string memory baseURI_,\\n    address[] memory recipients_,\\n    uint256[] memory amounts_,\\n    string memory name_,\\n    string memory symbol_,\\n    uint8 decimals_,\\n    uint256 totalNativeSupply_,\\n    address owner_\\n  ) payable ERC404(name_, symbol_, decimals_, totalNativeSupply_, owner_) {\\n    baseURI = baseURI_;\\n\\n    balanceOf[address(this)] = totalNativeSupply_ * 10 ** decimals_;\\n    setWhitelist(address(this), true);\\n    setWhitelist(owner, true);\\n\\n    _distribute(recipients_, amounts_);\\n    balanceOf[owner] = balanceOf[address(this)];\\n    balanceOf[address(this)] = 0;\\n\\n    require(\\n      msg.value == 1 * 10**17,\\n      \\\"ERC404M: Must send 0.1 ETH to initialize\\\"\\n    );\\n\\n    // METADROP_TREASURY_ADDRESS\\n    (bool success, ) = address(0xDE3FF2A50bd1BA1bd6a608EA0138946Dddf595bc).call{value: msg.value}(\\\"\\\");\\n    require(success, \\\"ERC404M: Failed to send ETH to treasury\\\");\\n\\n    emit ERC404MCreated(\\n      name_,\\n      symbol_,\\n      totalNativeSupply_,\\n      owner_\\n    );\\n  }\\n  /**\\n   * @dev function {distribute}\\n   *\\n   * Distribute tokens to the recipients\\n   *\\n   * @param recipients_ The recipients of the distribution\\n   * @param amounts_ The amounts of the distribution\\n   *\\n   */\\n  function _distribute(\\n    address[] memory recipients_,\\n    uint256[] memory amounts_\\n  ) private\\n  {\\n    require(\\n      recipients_.length == amounts_.length,\\n      \\\"ERC404M: Amounts and recipients must be the same length\\\"\\n    );\\n    uint256 totalAmount = 0;\\n    for (uint256 i = 0; i < recipients_.length; i++) {\\n      _transfer(address(this), recipients_[i], amounts_[i]);\\n      totalAmount += amounts_[i];\\n    }\\n  }\\n\\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n  //\\n  // ERC721 Functions\\n  //\\n  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n  /**\\n   * @dev function {setBaseURI}\\n   *\\n   * Set the base URI for the token\\n   *\\n   * @param baseURI_ The base URI to set\\n   *\\n   */\\n  function setBaseURI(string memory baseURI_) public onlyOwner {\\n    baseURI = baseURI_;\\n  }\\n\\n  /**\\n   * @dev function {tokenURI}\\n   *\\n   *  Returns the URI for a given token ID. Wraps if the tokenID is bigger than total supply.\\n   *\\n   * @param tokenId_ The token ID to query\\n   *\\n   * @return string The URI for the token\\n   */\\n  function tokenURI(\\n    uint256 tokenId_\\n  ) public view override returns (string memory) {\\n    uint256 wrapper = tokenId_ % (totalSupply / (10 ** decimals));\\n    return\\n      bytes(baseURI).length != 0\\n        ? string(abi.encodePacked(baseURI, Strings.toString(wrapper)))\\n        : \\\"\\\";\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Global/IErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Metadrop Contracts (v2.1.0)\\n\\n/**\\n *\\n * @title IErrors.sol. Interface for error definitions used across the platform\\n *\\n * @author metadrop https://metadrop.com/\\n *\\n */\\n\\npragma solidity 0.8.21;\\n\\ninterface IErrors {\\n  enum BondingCurveErrorType {\\n    OK, //                                                  No error\\n    INVALID_NUMITEMS, //                                    The numItem value is 0\\n    SPOT_PRICE_OVERFLOW //                                  The updated spot price doesn't fit into 128 bits\\n  }\\n\\n  error AdapterParamsMustBeEmpty(); //                      The adapter parameters on this LZ call must be empty.\\n\\n  error AdditionToPoolIsBelowPerTransactionMinimum(); //    The contribution amount is less than the minimum.\\n\\n  error AdditionToPoolWouldExceedPoolCap(); //              This addition to the pool would exceed the pool cap.\\n\\n  error AdditionToPoolWouldExceedPerAddressCap(); //        This addition to the pool would exceed the per address cap.\\n\\n  error AddressAlreadySet(); //                             The address being set can only be set once, and is already non-0.\\n\\n  error AllowanceDecreasedBelowZero(); //                   You cannot decrease the allowance below zero.\\n\\n  error AlreadyInitialised(); //                            The contract is already initialised: it cannot be initialised twice!\\n\\n  error AmountExceedsAvailable(); //                        You are requesting more token than is available.\\n\\n  error ApprovalCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\\n\\n  error ApproveFromTheZeroAddress(); //                     Approval cannot be called from the zero address (indeed, how have you??).\\n\\n  error ApproveToTheZeroAddress(); //                       Approval cannot be given to the zero address.\\n\\n  error ApprovalQueryForNonexistentToken(); //              The token does not exist.\\n\\n  error AuctionStatusIsNotEnded(); //                       Throw if the action required the auction to be closed, and it isn't.\\n\\n  error AuctionStatusIsNotOpen(); //                        Throw if the action requires the auction to be open, and it isn't.\\n\\n  error AuxCallFailed(\\n    address[] modules,\\n    uint256 value,\\n    bytes data,\\n    uint256 txGas\\n  ); //                                                     An auxilliary call from the drop factory failed.\\n\\n  error BalanceMismatch(); //                               An error when comparing balance amounts.\\n\\n  error BalanceQueryForZeroAddress(); //                    Cannot query the balance for the zero address.\\n\\n  error BidMustBeBelowTheFloorWhenReducingQuantity(); //    Only bids that are below the floor can reduce the quantity of the bid.\\n\\n  error BidMustBeBelowTheFloorForRefundDuringAuction(); //  Only bids that are below the floor can be refunded during the auction.\\n\\n  error BondingCurveError(BondingCurveErrorType error); //  An error of the type specified has occured in bonding curve processing.\\n\\n  error botProtectionDurationInSecondsMustFitUint128(); //  botProtectionDurationInSeconds cannot be too large.\\n\\n  error BurnExceedsBalance(); //                            The amount you have selected to burn exceeds the addresses balance.\\n\\n  error BurnFromTheZeroAddress(); //                        Tokens cannot be burned from the zero address. (Also, how have you called this!?!)\\n\\n  error CallerIsNotDepositBoxOwner(); //                    The caller is not the owner of the deposit box.\\n\\n  error CallerIsNotFactory(); //                            The caller of this function must match the factory address in storage.\\n\\n  error CallerIsNotFactoryOrProjectOwner(); //              The caller of this function must match the factory address OR project owner address.\\n\\n  error CallerIsNotFactoryProjectOwnerOrPool(); //          The caller of this function must match the factory address, project owner or pool address.\\n\\n  error CallerIsNotTheFeeRecipient(); //                    The caller is not the fee recipient.\\n\\n  error CallerIsNotTheOwner(); //                           The caller is not the owner of this contract.\\n\\n  error CallerIsNotTheManager(); //                         The caller is not the manager of this contract.\\n\\n  error CallerMustBeLzApp(); //                             The caller must be an LZ application.\\n\\n  error CallerIsNotPlatformAdmin(address caller); //        The caller of this function must be part of the platformAdmin group.\\n\\n  error CallerIsNotSuperAdmin(address caller); //           The caller of this function must match the superAdmin address in storage.\\n\\n  error CannotAddLiquidityOnCreateAndUseDRIPool(); //       Cannot use both liquidity added on create and a DRIPool in the same token.\\n\\n  error CannotManuallyFundLPWhenUsingADRIPool(); //         Cannot add liquidity manually when using a DRI pool.\\n\\n  error CannotPerformDuringAutoswap(); //                   Cannot call this function during an autoswap.\\n\\n  error CannotPerformPriorToFunding(); //                   Cannot perform this operation before a token is funded (i.e. liquidity added).\\n\\n  error CannotSetNewOwnerToTheZeroAddress(); //             You can't set the owner of this contract to the zero address (address(0)).\\n\\n  error CannotSetToZeroAddress(); //                        The corresponding address cannot be set to the zero address (address(0)).\\n\\n  error CannotSetNewManagerToTheZeroAddress(); //           Cannot transfer the manager to the zero address (address(0)).\\n\\n  error CannotWithdrawThisToken(); //                       Cannot withdraw the specified token.\\n\\n  error CanOnlyReduce(); //                                 The given operation can only reduce the value specified.\\n\\n  error CollectionAlreadyRevealed(); //                     The collection is already revealed; you cannot call reveal again.\\n\\n  error ContractIsDecommissioned(); //                      This contract is decommissioned!\\n\\n  error ContractIsPaused(); //                              The call requires the contract to be unpaused, and it is paused.\\n\\n  error ContractIsNotPaused(); //                           The call required the contract to be paused, and it is NOT paused.\\n\\n  error DecreasedAllowanceBelowZero(); //                   The request would decrease the allowance below zero, and that is not allowed.\\n\\n  error DestinationIsNotTrustedSource(); //                 The destination that is being called through LZ has not been set as trusted.\\n\\n  error DeductionsOnBuyExceedOrEqualOneHundredPercent(); // The total of all buy deductions cannot equal or exceed 100%.\\n\\n  error DeployerOnly(); //                                  This method can only be called by the deployer address.\\n\\n  error DeploymentError(); //                               Error on deployment.\\n\\n  error DepositBoxIsNotOpen(); //                           This action cannot complete as the deposit box is not open.\\n\\n  error DriPoolAddressCannotBeAddressZero(); //             The Dri Pool address cannot be the zero address.\\n\\n  error GasLimitIsTooLow(); //                              The gas limit for the LayerZero call is too low.\\n\\n  error IncorrectConfirmationValue(); //                    You need to enter the right confirmation value to call this funtion (usually 69420).\\n\\n  error IncorrectPayment(); //                              The function call did not include passing the correct payment.\\n\\n  error InitialLiquidityAlreadyAdded(); //                  Initial liquidity has already been added. You can't do it again.\\n\\n  error InitialLiquidityNotYetAdded(); //                   Initial liquidity needs to have been added for this to succedd.\\n\\n  error InsufficientAllowance(); //                         There is not a high enough allowance for this operation.\\n\\n  error InvalidAdapterParams(); //                          The current adapter params for LayerZero on this contract won't work :(.\\n\\n  error InvalidAddress(); //                                An address being processed in the function is not valid.\\n\\n  error InvalidEndpointCaller(); //                         The calling address is not a valid LZ endpoint. The LZ endpoint was set at contract creation\\n  //                                                        and cannot be altered after. Check the address LZ endpoint address on the contract.\\n\\n  error InvalidHash(); //                                   The passed hash does not meet requirements.\\n\\n  error InvalidMinGas(); //                                 The minimum gas setting for LZ in invalid.\\n\\n  error InvalidOracleSignature(); //                        The signature provided with the contract call is not valid, either in format or signer.\\n\\n  error InvalidPayload(); //                                The LZ payload is invalid\\n\\n  error InvalidReceiver(); //                               The address used as a target for funds is not valid.\\n\\n  error InvalidSourceSendingContract(); //                  The LZ message is being related from a source contract on another chain that is NOT trusted.\\n\\n  error InvalidTotalShares(); //                            Total shares must equal 100 percent in basis points.\\n\\n  error LimitsCanOnlyBeRaised(); //                         Limits are UP ONLY.\\n\\n  error LimitTooHigh(); //                                  The limit has been set too high.\\n\\n  error ListLengthMismatch(); //                            Two or more lists were compared and they did not match length.\\n\\n  error LiquidityPoolMustBeAContractAddress(); //           Cannot add a non-contract as a liquidity pool.\\n\\n  error LiquidityPoolCannotBeAddressZero(); //              Cannot add a liquidity pool from the zero address.\\n\\n  error LPLockUpMustFitUint88(); //                         LP lockup is held in a uint88, so must fit.\\n\\n  error NoTrustedPathRecord(); //                           LZ needs a trusted path record for this to work. What's that, you ask?\\n\\n  error MachineAddressCannotBeAddressZero(); //             Cannot set the machine address to the zero address.\\n\\n  error ManagerUnauthorizedAccount(); //                    The caller is not the pending manager.\\n\\n  error MaxBidQuantityIs255(); //                           Validation: as we use a uint8 array to track bid positions the max bid quantity is 255.\\n\\n  error MaxBuysPerBlockExceeded(); //                       You have exceeded the max buys per block.\\n\\n  error MaxPublicMintAllowanceExceeded(\\n    uint256 requested,\\n    uint256 alreadyMinted,\\n    uint256 maxAllowance\\n  ); //                                                     The calling address has requested a quantity that would exceed the max allowance.\\n\\n  error MaxSupplyTooHigh(); //                              Max supply must fit in a uint128.\\n\\n  error MaxTokensPerWalletExceeded(); //                    The transfer would exceed the max tokens per wallet limit.\\n\\n  error MaxTokensPerTxnExceeded(); //                       The transfer would exceed the max tokens per transaction limit.\\n\\n  error MetadataIsLocked(); //                              The metadata on this contract is locked; it cannot be altered!\\n\\n  error MetadropFactoryOnlyOncePerReveal(); //              This function can only be called (a) by the factory and, (b) just one time!\\n\\n  error MetadropModulesOnly(); //                           Can only be called from a metadrop contract.\\n\\n  error MetadropOracleCannotBeAddressZero(); //             The metadrop Oracle cannot be the zero address (address(0)).\\n\\n  error MinETHCannotExceedMaxBuy(); //                      The min ETH amount cannot exceed the max buy amount.\\n\\n  error MinETHCannotExceedMaxLiquidity(); //                The min ETH amount cannot exceed the max liquidity amount.\\n\\n  error MinGasLimitNotSet(); //                             The minimum gas limit for LayerZero has not been set.\\n\\n  error MintERC2309QuantityExceedsLimit(); //               The `quantity` minted with ERC2309 exceeds the safety limit.\\n\\n  error MintingIsClosedForever(); //                        Minting is, as the error suggests, so over (and locked forever).\\n\\n  error MintToZeroAddress(); //                             Cannot mint to the zero address.\\n\\n  error MintZeroQuantity(); //                              The quantity of tokens minted must be more than zero.\\n\\n  error NewBuyTaxBasisPointsExceedsMaximum(); //            Project owner trying to set the tax rate too high.\\n\\n  error NewSellTaxBasisPointsExceedsMaximum(); //           Project owner trying to set the tax rate too high.\\n\\n  error NoETHForLiquidityPair(); //                         No ETH has been provided for the liquidity pair.\\n\\n  error TaxPeriodStillInForce(); //                         The minimum tax period has not yet expired.\\n\\n  error NoPaymentDue(); //                                  No payment is due for this address.\\n\\n  error NoRefundForCaller(); //                             Error thrown when the calling address has no refund owed.\\n\\n  error NoStoredMessage(); //                               There is no stored message matching the passed parameters.\\n\\n  error NothingToClaim(); //                                The calling address has nothing to claim.\\n\\n  error NoTokenForLiquidityPair(); //                       There is no token to add to the LP.\\n\\n  error OperationDidNotSucceed(); //                        The operation failed (vague much?).\\n\\n  error OracleSignatureHasExpired(); //                     A signature has been provided but it is too old.\\n\\n  error OwnableUnauthorizedAccount(); //                    The caller is not the pending owner.\\n\\n  error OwnershipNotInitializedForExtraData(); //           The `extraData` cannot be set on an uninitialized ownership slot.\\n\\n  error OwnerQueryForNonexistentToken(); //                 The token does not exist.\\n\\n  error ParametersDoNotMatchSignedMessage(); //             The parameters passed with the signed message do not match the message itself.\\n\\n  error ParamTooLargeStartDate(); //                        The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargeEndDate(); //                          The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargeMinETH(); //                           The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargePerAddressMax(); //                    The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargeVestingDays(); //                      The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargePoolSupply(); //                       The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargePoolMaxETH(); //                       The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargePoolPerTxnMinETH(); //                 The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargeContributionFee(); //                  The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargeMaxInitialBuy(); //                    The passed parameter exceeds the var type max.\\n\\n  error ParamTooLargeMaxInitialLiquidity(); //              The passed parameter exceeds the var type max.\\n\\n  error PassedConfigDoesNotMatchApproved(); //              The config provided on the call does not match the approved config.\\n\\n  error PauseCutOffHasPassed(); //                          The time period in which we can pause has passed; this contract can no longer be paused.\\n\\n  error PaymentMustCoverPerMintFee(); //                    The payment passed must at least cover the per mint fee for the quantity requested.\\n\\n  error PermitDidNotSucceed(); //                           The safeERC20 permit failed.\\n\\n  error PlatformAdminCannotBeAddressZero(); //              We cannot use the zero address (address(0)) as a platformAdmin.\\n\\n  error PlatformTreasuryCannotBeAddressZero(); //           The treasury address cannot be set to the zero address.\\n\\n  error PoolCannotBeManuallyStarted(); //                   This pool cannot be manually started.\\n\\n  error PoolIsAboveMinimum(); //                            You required the pool to be below the minimum, and it is not\\n\\n  error PoolIsBelowMinimum(); //                            You required the pool to be above the minimum, and it is not\\n\\n  error PoolMustBeSeededWithETHForInitialLiquidity(); //    You must pass ETH for liquidity with this type of pool.\\n\\n  error PoolPhaseIsNotOpen(); //                            The block.timestamp is either before the pool is open or after it is closed.\\n\\n  error PoolPhaseIsNotFailed(); //                          The pool status must be failed.\\n\\n  error PoolPhaseIsNotSucceeded(); //                       The pool status must be succeeded.\\n\\n  error PoolVestingNotYetComplete(); //                     Tokens in the pool are not yet vested.\\n\\n  error ProjectOwnerCannotBeAddressZero(); //               The project owner has to be a non zero address.\\n\\n  error ProofInvalid(); //                                  The provided proof is not valid with the provided arguments.\\n\\n  error QuantityExceedsRemainingCollectionSupply(); //      The requested quantity would breach the collection supply.\\n\\n  error QuantityExceedsRemainingPhaseSupply(); //           The requested quantity would breach the phase supply.\\n\\n  error QuantityExceedsMaxPossibleCollectionSupply(); //    The requested quantity would breach the maximum trackable supply\\n\\n  error RecipientsAndAmountsMismatch(); //                  The number of recipients and amounts do not match.\\n\\n  error ReferralIdAlreadyUsed(); //                         This referral ID has already been used; they are one use only.\\n\\n  error RequestingMoreThanAvailableBalance(); //             The request exceeds the available balance.\\n\\n  error RequestingMoreThanRemainingAllocation(\\n    uint256 previouslyMinted,\\n    uint256 requested,\\n    uint256 remainingAllocation\\n  ); //                                                     Number of tokens requested for this mint exceeds the remaining allocation (taking the\\n  //                                                        original allocation from the list and deducting minted tokens).\\n\\n  error RouterCannotBeZeroAddress(); //                     The router address cannot be Zero.\\n\\n  error RoyaltyFeeWillExceedSalePrice(); //                 The ERC2981 royalty specified will exceed the sale price.\\n\\n  error ShareTotalCannotBeZero(); //                        The total of all the shares cannot be nothing.\\n\\n  error SliceOutOfBounds(); //                              The bytes slice operation was out of bounds.\\n\\n  error SliceOverflow(); //                                 The bytes slice operation overlowed.\\n\\n  error SuperAdminCannotBeAddressZero(); //                 The superAdmin cannot be the sero address (address(0)).\\n\\n  error SupplyTotalMismatch(); //                           The sum of the team supply and lp supply does not match.\\n\\n  error SupportWindowIsNotOpen(); //                        The project owner has not requested support within the support request expiry window.\\n\\n  error SwapThresholdTooLow(); // The select swap threshold is below the minimum.\\n\\n  error TaxFreeAddressCannotBeAddressZero(); //             A tax free address cannot be address(0)\\n\\n  error TemplateCannotBeAddressZero(); //                   The address for a template cannot be address zero (address(0)).\\n\\n  error TemplateNotFound(); //                              There is no template that matches the passed template Id.\\n\\n  error ThisMintIsClosed(); //                              It's over (well, this mint is, anyway).\\n\\n  error TotalSharesMustMatchDenominator(); //               The total of all shares must equal the denominator value.\\n\\n  error TransferAmountExceedsBalance(); //                  The transfer amount exceeds the accounts available balance.\\n\\n  error TransferCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\\n\\n  error TransferFailed(); //                                The transfer has failed.\\n\\n  error TransferFromIncorrectOwner(); //                    The token must be owned by `from`.\\n\\n  error TransferToNonERC721ReceiverImplementer(); //        Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n\\n  error TransferFromZeroAddress(); //                       Cannot transfer from the zero address. Indeed, this surely is impossible, and likely a waste to check??\\n\\n  error TransferToZeroAddress(); //                         Cannot transfer to the zero address.\\n\\n  error UnrecognisedVRFMode(); //                           Currently supported VRF modes are 0: chainlink and 1: arrng\\n\\n  error UnrecognisedType(); //                              Pool type not found.\\n\\n  error URIQueryForNonexistentToken(); //                   The token does not exist.\\n\\n  error ValueExceedsMaximum(); //                           The value sent exceeds the maximum allowed (super useful explanation huh?).\\n\\n  error VRFCoordinatorCannotBeAddressZero(); //             The VRF coordinator cannot be the zero address (address(0)).\\n\\n  error VestedBalanceExceedsTotalBalance(); //              The vested balance cannot exceed the total balance.\\n}\\n\"\r\n    },\r\n    \"contracts/Global/Revert.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Metadrop Contracts (v2.1.0)\\n\\n/**\\n *\\n * @title Revert.sol. For efficient reverts\\n *\\n * @author metadrop https://metadrop.com/\\n *\\n */\\n\\npragma solidity 0.8.21;\\n\\nabstract contract Revert {\\n  /**\\n   * @dev For more efficient reverts.\\n   */\\n  function _revert(bytes4 errorSelector) internal pure {\\n    assembly {\\n      mstore(0x00, errorSelector)\\n      revert(0x00, 0x04)\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ThirdParty/ERC404/erc404.sol\": {\r\n      \"content\": \"// https://github.com/0xacme/ERC404\\n//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nabstract contract Ownable {\\n  event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n  error Unauthorized();\\n  error InvalidOwner();\\n\\n  address public owner;\\n\\n  modifier onlyOwner() virtual {\\n    if (msg.sender != owner) revert Unauthorized();\\n\\n    _;\\n  }\\n\\n  constructor(address _owner) {\\n    if (_owner == address(0)) revert InvalidOwner();\\n\\n    owner = _owner;\\n\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  function transferOwnership(address _owner) public virtual onlyOwner {\\n    if (_owner == address(0)) revert InvalidOwner();\\n\\n    owner = _owner;\\n\\n    emit OwnershipTransferred(msg.sender, _owner);\\n  }\\n\\n  function revokeOwnership() public virtual onlyOwner {\\n    owner = address(0);\\n\\n    emit OwnershipTransferred(msg.sender, address(0));\\n  }\\n}\\n\\nabstract contract ERC721Receiver {\\n  function onERC721Received(\\n    address,\\n    address,\\n    uint256,\\n    bytes calldata\\n  ) external virtual returns (bytes4) {\\n    return ERC721Receiver.onERC721Received.selector;\\n  }\\n}\\n\\n/// @notice ERC404\\n///         A gas-efficient, mixed ERC20 / ERC721 implementation\\n///         with native liquidity and fractionalization.\\n///\\n///         This is an experimental standard designed to integrate\\n///         with pre-existing ERC20 / ERC721 support as smoothly as\\n///         possible.\\n///\\n/// @dev    In order to support full functionality of ERC20 and ERC721\\n///         supply assumptions are made that slightly constraint usage.\\n///         Ensure decimals are sufficiently large (standard 18 recommended)\\n///         as ids are effectively encoded in the lowest range of amounts.\\n///\\n///         NFTs are spent on ERC20 functions in a FILO queue, this is by\\n///         design.\\n///\\nabstract contract ERC404 is Ownable {\\n  // Events\\n  event ERC20Transfer(address indexed from, address indexed to, uint256 amount);\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 amount\\n  );\\n  event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n  event ERC721Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 indexed id\\n  );\\n  event ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n  );\\n\\n  // Errors\\n  error NotFound();\\n  error AlreadyExists();\\n  error InvalidRecipient();\\n  error InvalidSender();\\n  error UnsafeRecipient();\\n\\n  // Metadata\\n  /// @dev Token name\\n  string public name;\\n\\n  /// @dev Token symbol\\n  string public symbol;\\n\\n  /// @dev Decimals for fractional representation\\n  uint8 public immutable decimals;\\n\\n  /// @dev Total supply in fractionalized representation\\n  uint256 public immutable totalSupply;\\n\\n  /// @dev Current mint counter, monotonically increasing to ensure accurate ownership\\n  uint256 public minted;\\n\\n  // Mappings\\n  /// @dev Balance of user in fractional representation\\n  mapping(address => uint256) public balanceOf;\\n\\n  /// @dev Allowance of user in fractional representation\\n  mapping(address => mapping(address => uint256)) public allowance;\\n\\n  /// @dev Approval in native representaion\\n  mapping(uint256 => address) public getApproved;\\n\\n  /// @dev Approval for all in native representation\\n  mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n  /// @dev Owner of id in native representation\\n  mapping(uint256 => address) internal _ownerOf;\\n\\n  /// @dev Array of owned ids in native representation\\n  mapping(address => uint256[]) internal _owned;\\n\\n  /// @dev Tracks indices for the _owned mapping\\n  mapping(uint256 => uint256) internal _ownedIndex;\\n\\n  /// @dev Addresses whitelisted from minting / burning for gas savings (pairs, routers, etc)\\n  mapping(address => bool) public whitelist;\\n\\n  // Constructor\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    uint256 _totalNativeSupply,\\n    address _owner\\n  ) Ownable(_owner) {\\n    name = _name;\\n    symbol = _symbol;\\n    decimals = _decimals;\\n    totalSupply = _totalNativeSupply * (10 ** decimals);\\n  }\\n\\n  /// @notice Initialization function to set pairs / etc\\n  ///         saving gas by avoiding mint / burn on unnecessary targets\\n  function setWhitelist(address target, bool state) public onlyOwner {\\n    whitelist[target] = state;\\n  }\\n\\n  /// @notice Function to find owner of a given native token\\n  function ownerOf(uint256 id) public view virtual returns (address owner) {\\n    owner = _ownerOf[id];\\n\\n    if (owner == address(0)) {\\n      revert NotFound();\\n    }\\n  }\\n\\n  /// @notice tokenURI must be implemented by child contract\\n  function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n  /// @notice Function for token approvals\\n  /// @dev This function assumes id / native if amount less than or equal to current max id\\n  function approve(\\n    address spender,\\n    uint256 amountOrId\\n  ) public virtual returns (bool) {\\n    if (amountOrId <= minted && amountOrId > 0) {\\n      address owner = _ownerOf[amountOrId];\\n\\n      if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\\n        revert Unauthorized();\\n      }\\n\\n      getApproved[amountOrId] = spender;\\n\\n      emit Approval(owner, spender, amountOrId);\\n    } else {\\n      allowance[msg.sender][spender] = amountOrId;\\n\\n      emit Approval(msg.sender, spender, amountOrId);\\n    }\\n\\n    return true;\\n  }\\n\\n  /// @notice Function native approvals\\n  function setApprovalForAll(address operator, bool approved) public virtual {\\n    isApprovedForAll[msg.sender][operator] = approved;\\n\\n    emit ApprovalForAll(msg.sender, operator, approved);\\n  }\\n\\n  /// @notice Function for mixed transfers\\n  /// @dev This function assumes id / native if amount less than or equal to current max id\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amountOrId\\n  ) public virtual {\\n    if (amountOrId <= minted) {\\n      if (from != _ownerOf[amountOrId]) {\\n        revert InvalidSender();\\n      }\\n\\n      if (to == address(0)) {\\n        revert InvalidRecipient();\\n      }\\n\\n      if (\\n        msg.sender != from &&\\n        !isApprovedForAll[from][msg.sender] &&\\n        msg.sender != getApproved[amountOrId]\\n      ) {\\n        revert Unauthorized();\\n      }\\n\\n      balanceOf[from] -= _getUnit();\\n\\n      unchecked {\\n        balanceOf[to] += _getUnit();\\n      }\\n\\n      _ownerOf[amountOrId] = to;\\n      delete getApproved[amountOrId];\\n\\n      // update _owned for sender\\n      uint256 updatedId = _owned[from][_owned[from].length - 1];\\n      _owned[from][_ownedIndex[amountOrId]] = updatedId;\\n      // pop\\n      _owned[from].pop();\\n      // update index for the moved id\\n      _ownedIndex[updatedId] = _ownedIndex[amountOrId];\\n      // push token to to owned\\n      _owned[to].push(amountOrId);\\n      // update index for to owned\\n      _ownedIndex[amountOrId] = _owned[to].length - 1;\\n\\n      emit Transfer(from, to, amountOrId);\\n      emit ERC20Transfer(from, to, _getUnit());\\n    } else {\\n      uint256 allowed = allowance[from][msg.sender];\\n      if (from != address(this)) {\\n        require(\\n          allowed >= amountOrId,\\n          \\\"ERC404: transfer amount exceeds allowance\\\"\\n        );\\n        if (allowed != type(uint256).max)\\n          allowance[from][msg.sender] = allowed - amountOrId;\\n      }\\n      _transfer(from, to, amountOrId);\\n    }\\n  }\\n\\n  /// @notice Function for fractional transfers\\n  function transfer(address to, uint256 amount) public virtual returns (bool) {\\n    return _transfer(msg.sender, to, amount);\\n  }\\n\\n  /// @notice Function for native transfers with contract support\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id\\n  ) public virtual {\\n    transferFrom(from, to, id);\\n\\n    if (\\n      to.code.length != 0 &&\\n      ERC721Receiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") !=\\n      ERC721Receiver.onERC721Received.selector\\n    ) {\\n      revert UnsafeRecipient();\\n    }\\n  }\\n\\n  /// @notice Function for native transfers with contract support and callback data\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 id,\\n    bytes calldata data\\n  ) public virtual {\\n    transferFrom(from, to, id);\\n\\n    if (\\n      to.code.length != 0 &&\\n      ERC721Receiver(to).onERC721Received(msg.sender, from, id, data) !=\\n      ERC721Receiver.onERC721Received.selector\\n    ) {\\n      revert UnsafeRecipient();\\n    }\\n  }\\n\\n  /// @notice Internal function for fractional transfers\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal returns (bool) {\\n    uint256 unit = _getUnit();\\n    uint256 balanceBeforeSender = balanceOf[from];\\n    uint256 balanceBeforeReceiver = balanceOf[to];\\n    balanceOf[from] -= amount;\\n\\n    unchecked {\\n      balanceOf[to] += amount;\\n    }\\n\\n    // Skip burn for certain addresses to save gas\\n    if (!whitelist[from]) {\\n      uint256 tokens_to_burn = (balanceBeforeSender / unit) -\\n        (balanceOf[from] / unit);\\n      for (uint256 i = 0; i < tokens_to_burn; i++) {\\n        _burn(from);\\n      }\\n    }\\n\\n    // Skip minting for certain addresses to save gas\\n    if (!whitelist[to]) {\\n      uint256 tokens_to_mint = (balanceOf[to] / unit) -\\n        (balanceBeforeReceiver / unit);\\n      for (uint256 i = 0; i < tokens_to_mint; i++) {\\n        _mint(to);\\n      }\\n    }\\n\\n    emit ERC20Transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  // Internal utility logic\\n  function _getUnit() internal view returns (uint256) {\\n    return 10 ** decimals;\\n  }\\n\\n  function _mint(address to) internal virtual {\\n    if (to == address(0)) {\\n      revert InvalidRecipient();\\n    }\\n\\n    unchecked {\\n      minted++;\\n    }\\n\\n    uint256 id = minted;\\n\\n    if (_ownerOf[id] != address(0)) {\\n      revert AlreadyExists();\\n    }\\n\\n    _ownerOf[id] = to;\\n    _owned[to].push(id);\\n    _ownedIndex[id] = _owned[to].length - 1;\\n\\n    emit Transfer(address(0), to, id);\\n  }\\n\\n  function _burn(address from) internal virtual {\\n    if (from == address(0)) {\\n      revert InvalidSender();\\n    }\\n\\n    uint256 id = _owned[from][_owned[from].length - 1];\\n    _owned[from].pop();\\n    delete _ownedIndex[id];\\n    delete _ownerOf[id];\\n    delete getApproved[id];\\n\\n    emit Transfer(from, address(0), id);\\n  }\\n\\n  function _setNameSymbol(string memory _name, string memory _symbol) internal {\\n    name = _name;\\n    symbol = _symbol;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"recipients_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalNativeSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNativeSupply\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"ERC404MCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC404M", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000100000000000000000000000050d17b6ecd06aa3f04ccf17f6580c2d0dfdcac3e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003545354000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035453540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}