{"SourceCode": "{{\r\n  \"sources\": {\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IIntegralERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\nimport 'IERC20.sol';\\n\\ninterface IIntegralERC20 is IERC20 {\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IReserves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\ninterface IReserves {\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n    event Fees(uint256 fee0, uint256 fee1);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 lastTimestamp\\n        );\\n\\n    function getReferences()\\n        external\\n        view\\n        returns (\\n            uint112 reference0,\\n            uint112 reference1,\\n            uint32 epoch\\n        );\\n\\n    function getFees() external view returns (uint256 fee0, uint256 fee1);\\n}\\n\"\r\n    },\r\n    \"IIntegralPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\nimport 'IIntegralERC20.sol';\\nimport 'IReserves.sol';\\n\\ninterface IIntegralPair is IIntegralERC20, IReserves {\\n    event Mint(address indexed sender, address indexed to);\\n    event Burn(address indexed sender, address indexed to);\\n    event Swap(address indexed sender, address indexed to);\\n    event SetMintFee(uint256 fee);\\n    event SetBurnFee(uint256 fee);\\n    event SetSwapFee(uint256 fee);\\n    event SetOracle(address account);\\n    event SetTrader(address trader);\\n    event SetToken0AbsoluteLimit(uint256 limit);\\n    event SetToken1AbsoluteLimit(uint256 limit);\\n    event SetToken0RelativeLimit(uint256 limit);\\n    event SetToken1RelativeLimit(uint256 limit);\\n    event SetPriceDeviationLimit(uint256 limit);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function trader() external view returns (address);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function setMintFee(uint256 fee) external;\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burnFee() external view returns (uint256);\\n\\n    function setBurnFee(uint256 fee) external;\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swapFee() external view returns (uint256);\\n\\n    function setSwapFee(uint256 fee) external;\\n\\n    function setOracle(address account) external;\\n\\n    function setTrader(address account) external;\\n\\n    function token0AbsoluteLimit() external view returns (uint256);\\n\\n    function setToken0AbsoluteLimit(uint256 limit) external;\\n\\n    function token1AbsoluteLimit() external view returns (uint256);\\n\\n    function setToken1AbsoluteLimit(uint256 limit) external;\\n\\n    function token0RelativeLimit() external view returns (uint256);\\n\\n    function setToken0RelativeLimit(uint256 limit) external;\\n\\n    function token1RelativeLimit() external view returns (uint256);\\n\\n    function setToken1RelativeLimit(uint256 limit) external;\\n\\n    function priceDeviationLimit() external view returns (uint256);\\n\\n    function setPriceDeviationLimit(uint256 limit) external;\\n\\n    function collect(address to) external;\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) external;\\n\\n    function sync() external;\\n\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        address _oracle,\\n        address _trader\\n    ) external;\\n\\n    function syncWithOracle() external;\\n\\n    function fullSync() external;\\n\\n    function getSpotPrice() external view returns (uint256 spotPrice);\\n\\n    function getSwapAmount0In(uint256 amount1Out) external view returns (uint256 swapAmount0In);\\n\\n    function getSwapAmount1In(uint256 amount0Out) external view returns (uint256 swapAmount1In);\\n\\n    function getSwapAmount0Out(uint256 amount1In) external view returns (uint256 swapAmount0Out);\\n\\n    function getSwapAmount1Out(uint256 amount0In) external view returns (uint256 swapAmount1Out);\\n\\n    function getDepositAmount0In(uint256 amount0) external view returns (uint256 depositAmount0In);\\n\\n    function getDepositAmount1In(uint256 amount1) external view returns (uint256 depositAmount1In);\\n}\\n\"\r\n    },\r\n    \"SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, 'SM_ADD_OVERFLOW');\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = sub(x, y, 'SM_SUB_UNDERFLOW');\\n    }\\n\\n    function sub(\\n        uint256 x,\\n        uint256 y,\\n        string memory message\\n    ) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, message);\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, 'SM_MUL_OVERFLOW');\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SM_DIV_BY_ZERO');\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"Reserves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\nimport 'IReserves.sol';\\nimport 'IERC20.sol';\\nimport 'SafeMath.sol';\\n\\ncontract Reserves is IReserves {\\n    using SafeMath for uint256;\\n\\n    uint112 private reserve0;\\n    uint112 private reserve1;\\n    uint32 private lastTimestamp;\\n\\n    uint112 private reference0;\\n    uint112 private reference1;\\n    uint32 private lastEpoch;\\n\\n    uint256 private fee0;\\n    uint256 private fee1;\\n\\n    function getReserves()\\n        public\\n        view\\n        override\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        )\\n    {\\n        return (reserve0, reserve1, lastTimestamp);\\n    }\\n\\n    function setReserves(\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint32 _lastTimestamp\\n    ) private {\\n        require(_reserve0 != 0 && _reserve1 != 0, 'RS_ZERO');\\n        reserve0 = _reserve0;\\n        reserve1 = _reserve1;\\n        lastTimestamp = _lastTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    function getReferences()\\n        public\\n        view\\n        override\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        )\\n    {\\n        return (reference0, reference1, lastEpoch);\\n    }\\n\\n    function setReferencesToReserves(uint32 _lastEpoch) internal {\\n        reference0 = reserve0;\\n        reference1 = reserve1;\\n        lastEpoch = _lastEpoch;\\n    }\\n\\n    function updateReserves(uint256 balance0, uint256 balance1) internal {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'RS_OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        setReserves(uint112(balance0), uint112(balance1), blockTimestamp);\\n    }\\n\\n    function adjustReserves(uint256 balance0, uint256 balance1) internal {\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        if (_reserve0 != balance0 || _reserve1 != balance1) {\\n            updateReserves(balance0, balance1);\\n            updateReferences(\\n                uint256(reference0).add(reserve0).sub(_reserve0),\\n                uint256(reference1).add(reserve1).sub(_reserve1)\\n            );\\n        }\\n    }\\n\\n    function syncReserves(address token0, address token1) internal {\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n\\n        uint256 oldBalance0 = fee0.add(_reserve0);\\n        uint256 oldBalance1 = fee1.add(_reserve1);\\n        fee0 = oldBalance0 != 0 ? fee0.mul(balance0).div(oldBalance0) : fee0;\\n        fee1 = oldBalance1 != 0 ? fee1.mul(balance1).div(oldBalance1) : fee1;\\n\\n        uint256 newReserve0 = balance0.sub(fee0);\\n        uint256 newReserve1 = balance1.sub(fee1);\\n        if (_reserve0 != newReserve0 || _reserve1 != newReserve1) {\\n            updateReserves(newReserve0, newReserve1);\\n            updateReferences(\\n                uint256(reference0).add(reserve0).sub(_reserve0),\\n                uint256(reference1).add(reserve1).sub(_reserve1)\\n            );\\n        }\\n    }\\n\\n    function updateReferences(uint256 _reference0, uint256 _reference1) private {\\n        require(_reference0 <= uint112(-1) && _reference1 <= uint112(-1), 'RS_OVERFLOW');\\n        reference0 = uint112(_reference0);\\n        reference1 = uint112(_reference1);\\n    }\\n\\n    function getFees() public view override returns (uint256, uint256) {\\n        return (fee0, fee1);\\n    }\\n\\n    function addFees(uint256 _fee0, uint256 _fee1) internal {\\n        setFees(fee0.add(_fee0), fee1.add(_fee1));\\n    }\\n\\n    function setFees(uint256 _fee0, uint256 _fee1) internal {\\n        fee0 = _fee0;\\n        fee1 = _fee1;\\n        emit Fees(fee0, fee1);\\n    }\\n\\n    function getBalances(address token0, address token1) internal returns (uint256, uint256) {\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\\n        if (fee0 > balance0) {\\n            fee0 = balance0;\\n            emit Fees(fee0, fee1);\\n        }\\n        if (fee1 > balance1) {\\n            fee1 = balance1;\\n            emit Fees(fee0, fee1);\\n        }\\n        return (balance0.sub(fee0), balance1.sub(fee1));\\n    }\\n}\\n\"\r\n    },\r\n    \"AbstractERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\nimport 'IIntegralERC20.sol';\\nimport 'SafeMath.sol';\\n\\nabstract contract AbstractERC20 is IIntegralERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 public override totalSupply;\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32\\n        public constant\\n        override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public override nonces;\\n\\n    function _init(string memory _name) internal {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(_name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external override returns (bool) {\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external override returns (bool) {\\n        uint256 currentAllowance = allowance[msg.sender][spender];\\n        require(currentAllowance >= subtractedValue, 'IA_CANNOT_DECREASE');\\n        _approve(msg.sender, spender, currentAllowance.sub(subtractedValue));\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint256(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(deadline >= block.timestamp, 'IA_EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'IA_INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"IntegralERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\nimport 'AbstractERC20.sol';\\n\\ncontract IntegralERC20 is AbstractERC20 {\\n    string public constant override name = 'Integral LP';\\n    string public constant override symbol = 'ITGR-LP';\\n    uint8 public constant override decimals = 18;\\n\\n    constructor() {\\n        _init(name);\\n    }\\n\\n    /**\\n     * @dev This function should be called on the forked chain to prevent\\n     * replay attacks\\n     */\\n    function updateDomainSeparator() external {\\n        _init(name);\\n    }\\n}\\n\"\r\n    },\r\n    \"Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x > y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IIntegralFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\ninterface IIntegralFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n    event OwnerSet(address owner);\\n\\n    function owner() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        address oracle,\\n        address trader\\n    ) external returns (address pair);\\n\\n    function setOwner(address) external;\\n\\n    function setMintFee(\\n        address tokenA,\\n        address tokenB,\\n        uint256 fee\\n    ) external;\\n\\n    function setBurnFee(\\n        address tokenA,\\n        address tokenB,\\n        uint256 fee\\n    ) external;\\n\\n    function setSwapFee(\\n        address tokenA,\\n        address tokenB,\\n        uint256 fee\\n    ) external;\\n\\n    function setOracle(\\n        address tokenA,\\n        address tokenB,\\n        address oracle\\n    ) external;\\n\\n    function setTrader(\\n        address tokenA,\\n        address tokenB,\\n        address trader\\n    ) external;\\n\\n    function collect(\\n        address tokenA,\\n        address tokenB,\\n        address to\\n    ) external;\\n\\n    function withdraw(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amount,\\n        address to\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"IIntegralOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\ninterface IIntegralOracle {\\n    event OwnerSet(address owner);\\n    event UniswapPairSet(address uniswapPair);\\n    event PriceUpdateIntervalSet(uint32 interval);\\n    event ParametersSet(uint32 epoch, int256[] bidExponents, int256[] bidQs, int256[] askExponents, int256[] askQs);\\n\\n    function owner() external view returns (address);\\n\\n    function setOwner(address) external;\\n\\n    function epoch() external view returns (uint32);\\n\\n    function xDecimals() external view returns (uint8);\\n\\n    function yDecimals() external view returns (uint8);\\n\\n    function getParameters()\\n        external\\n        view\\n        returns (\\n            int256[] memory bidExponents,\\n            int256[] memory bidQs,\\n            int256[] memory askExponents,\\n            int256[] memory askQs\\n        );\\n\\n    function setParameters(\\n        int256[] calldata bidExponents,\\n        int256[] calldata bidQs,\\n        int256[] calldata askExponents,\\n        int256[] calldata askQs\\n    ) external;\\n\\n    function price() external view returns (int256);\\n\\n    function priceUpdateInterval() external view returns (uint32);\\n\\n    function updatePrice() external returns (uint32 _epoch);\\n\\n    function setPriceUpdateInterval(uint32 interval) external;\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function blockTimestampLast() external view returns (uint32);\\n\\n    function tradeX(\\n        uint256 xAfter,\\n        uint256 xBefore,\\n        uint256 yBefore\\n    ) external view returns (uint256 yAfter);\\n\\n    function tradeY(\\n        uint256 yAfter,\\n        uint256 xBefore,\\n        uint256 yBefore\\n    ) external view returns (uint256 xAfter);\\n\\n    function getSpotPrice(uint256 xCurrent, uint256 xBefore) external view returns (uint256 spotPrice);\\n}\\n\"\r\n    },\r\n    \"Normalizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\nimport 'SafeMath.sol';\\n\\nlibrary Normalizer {\\n    using SafeMath for uint256;\\n\\n    function normalize(uint256 amount, uint8 decimals) internal pure returns (uint256) {\\n        if (decimals == 18) {\\n            return amount;\\n        } else if (decimals > 18) {\\n            return amount.div(10**(decimals - 18));\\n        } else {\\n            return amount.mul(10**(18 - decimals));\\n        }\\n    }\\n\\n    function denormalize(uint256 amount, uint8 decimals) internal pure returns (uint256) {\\n        if (decimals == 18) {\\n            return amount;\\n        } else if (decimals > 18) {\\n            return amount.mul(10**(decimals - 18));\\n        } else {\\n            return amount.div(10**(18 - decimals));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IntegralPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Deployed with donations via Gitcoin GR9\\n\\npragma solidity 0.7.5;\\n\\nimport 'IIntegralPair.sol';\\nimport 'Reserves.sol';\\nimport 'IntegralERC20.sol';\\nimport 'Math.sol';\\nimport 'IERC20.sol';\\nimport 'IIntegralFactory.sol';\\nimport 'IIntegralOracle.sol';\\nimport 'Normalizer.sol';\\n\\ncontract IntegralPair is Reserves, IntegralERC20, IIntegralPair {\\n    using SafeMath for uint256;\\n    using Normalizer for uint256;\\n\\n    uint256 private constant PRECISION = 10**18;\\n\\n    uint256 public override mintFee = 0;\\n    uint256 public override burnFee = 0;\\n    uint256 public override swapFee = 0;\\n\\n    uint256 public constant override MINIMUM_LIQUIDITY = 10**3;\\n    uint256 private constant TRADE_MOE = 100000001 * 10**10; // Margin Of Error\\n\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n    address public override oracle;\\n    address public override trader;\\n\\n    uint256 private lastPrice;\\n\\n    uint256 public override token0AbsoluteLimit = uint256(-1);\\n    uint256 public override token1AbsoluteLimit = uint256(-1);\\n    uint256 public override token0RelativeLimit = PRECISION; // 100%\\n    uint256 public override token1RelativeLimit = PRECISION; // 100%\\n    uint256 public override priceDeviationLimit = uint256(-1);\\n\\n    uint256 private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'IP_LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function isContract(address addr) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    function setMintFee(uint256 fee) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        mintFee = fee;\\n        emit SetMintFee(mintFee);\\n    }\\n\\n    function setBurnFee(uint256 fee) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        burnFee = fee;\\n        emit SetBurnFee(burnFee);\\n    }\\n\\n    function setSwapFee(uint256 fee) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        swapFee = fee;\\n        emit SetSwapFee(swapFee);\\n    }\\n\\n    function setOracle(address _oracle) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        require(_oracle != address(0), 'IP_ADDRESS_ZERO');\\n        require(isContract(_oracle), 'IP_ORACLE_MUST_BE_CONTRACT');\\n        oracle = _oracle;\\n        setReferencesToReserves(0);\\n        emit SetOracle(oracle);\\n    }\\n\\n    function setTrader(address _trader) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        trader = _trader;\\n        emit SetTrader(trader);\\n    }\\n\\n    function setToken0AbsoluteLimit(uint256 _token0AbsoluteLimit) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        token0AbsoluteLimit = _token0AbsoluteLimit;\\n        emit SetToken0AbsoluteLimit(token0AbsoluteLimit);\\n    }\\n\\n    function setToken1AbsoluteLimit(uint256 _token1AbsoluteLimit) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        token1AbsoluteLimit = _token1AbsoluteLimit;\\n        emit SetToken1AbsoluteLimit(token1AbsoluteLimit);\\n    }\\n\\n    function setToken0RelativeLimit(uint256 _token0RelativeLimit) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        token0RelativeLimit = _token0RelativeLimit;\\n        emit SetToken0RelativeLimit(token0RelativeLimit);\\n    }\\n\\n    function setToken1RelativeLimit(uint256 _token1RelativeLimit) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        token1RelativeLimit = _token1RelativeLimit;\\n        emit SetToken1RelativeLimit(token1RelativeLimit);\\n    }\\n\\n    function setPriceDeviationLimit(uint256 _priceDeviationLimit) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        priceDeviationLimit = _priceDeviationLimit;\\n        emit SetPriceDeviationLimit(priceDeviationLimit);\\n    }\\n\\n    function collect(address to) external override lock {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        require(to != address(0), 'IP_ADDRESS_ZERO');\\n        (uint256 fee0, uint256 fee1) = getFees();\\n        if (fee0 > 0) _safeTransfer(token0, to, fee0);\\n        if (fee1 > 0) _safeTransfer(token1, to, fee1);\\n        setFees(0, 0);\\n        _sync();\\n    }\\n\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'IP_TRANSFER_FAILED');\\n    }\\n\\n    function canTrade(address user) private view returns (bool) {\\n        return user == trader || user == factory || trader == address(-1);\\n    }\\n\\n    constructor() {\\n        factory = msg.sender;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        address _oracle,\\n        address _trader\\n    ) external override {\\n        require(msg.sender == factory, 'IP_FORBIDDEN');\\n        require(_oracle != address(0), 'IP_ADDRESS_ZERO');\\n        require(isContract(_oracle), 'IP_ORACLE_MUST_BE_CONTRACT');\\n        require(isContract(_token0) && isContract(_token1), 'IP_TOKEN_MUST_BE_CONTRACT');\\n        token0 = _token0;\\n        token1 = _token1;\\n        oracle = _oracle;\\n        trader = _trader;\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external override lock returns (uint256 liquidity) {\\n        require(canTrade(msg.sender), 'IP_UNAUTHORIZED_TRADER');\\n        require(to != address(0), 'IP_ADDRESS_ZERO');\\n        (uint112 reserve0, uint112 reserve1, ) = getReserves();\\n        (uint256 balance0, uint256 balance1) = getBalances(token0, token1);\\n        uint256 amount0 = balance0.sub(reserve0);\\n        uint256 amount1 = balance1.sub(reserve1);\\n\\n        _syncWithOracle();\\n\\n        uint256 _totalSupply = totalSupply; // gas savings\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / reserve0, amount1.mul(_totalSupply) / reserve1);\\n        }\\n\\n        require(liquidity > 0, 'IP_INSUFFICIENT_LIQUIDITY_MINTED');\\n        uint256 fee = liquidity.mul(mintFee).div(PRECISION);\\n        uint256 effectiveLiquidity = liquidity.sub(fee);\\n        _mint(to, effectiveLiquidity);\\n        _mint(factory, fee);\\n\\n        adjustReserves(balance0, balance1);\\n\\n        emit Mint(msg.sender, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external override lock returns (uint256 amount0, uint256 amount1) {\\n        require(canTrade(msg.sender), 'IP_UNAUTHORIZED_TRADER');\\n        require(to != address(0), 'IP_ADDRESS_ZERO');\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        (uint256 balance0, uint256 balance1) = getBalances(token0, token1);\\n        uint256 liquidity = balanceOf[address(this)];\\n        uint256 _totalSupply = totalSupply; // gas savings\\n\\n        _syncWithOracle();\\n\\n        uint256 fee = 0;\\n        if (msg.sender != factory) {\\n            fee = liquidity.mul(burnFee).div(PRECISION);\\n            _transfer(address(this), factory, fee);\\n        }\\n        uint256 effectiveLiquidity = liquidity.sub(fee);\\n        _burn(address(this), effectiveLiquidity);\\n\\n        amount0 = effectiveLiquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = effectiveLiquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'IP_INSUFFICIENT_LIQUIDITY_BURNED');\\n\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n\\n        (balance0, balance1) = getBalances(token0, token1);\\n        adjustReserves(balance0, balance1);\\n\\n        emit Burn(msg.sender, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to\\n    ) external override lock {\\n        require(canTrade(msg.sender), 'IP_UNAUTHORIZED_TRADER');\\n        require(to != address(0), 'IP_ADDRESS_ZERO');\\n        require(amount0Out > 0 || amount1Out > 0, 'IP_INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(amount0Out == 0 || amount1Out == 0, 'IP_MULTIPLE_OUTPUTS_SPECIFIED');\\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'IP_INSUFFICIENT_LIQUIDITY');\\n\\n        _syncWithOracle();\\n\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(to != _token0 && to != _token1, 'IP_INVALID_TO');\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n        }\\n        (uint256 balance0, uint256 balance1) = getBalances(token0, token1);\\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'IP_INSUFFICIENT_INPUT_AMOUNT');\\n\\n        if (amount0Out > 0) {\\n            // trading token1 for token0\\n            (uint112 reference0, uint112 reference1, ) = getReferences();\\n\\n            uint256 fee1 = amount1In.mul(swapFee).div(PRECISION);\\n            uint256 balance0After = IIntegralOracle(oracle).tradeY(balance1.sub(fee1), reference0, reference1);\\n            require(balance0 >= balance0After, 'IP_INVALID_SWAP');\\n            _checkToken0Limits(balance0After, reference0);\\n            uint256 fee0 = balance0.sub(balance0After);\\n            addFees(fee0, fee1);\\n            updateReserves(balance0.sub(fee0), balance1.sub(fee1));\\n        } else {\\n            // trading token0 for token1\\n            (uint112 reference0, uint112 reference1, ) = getReferences();\\n\\n            uint256 fee0 = amount0In.mul(swapFee).div(PRECISION);\\n            uint256 balance1After = IIntegralOracle(oracle).tradeX(balance0.sub(fee0), reference0, reference1);\\n            require(balance1 >= balance1After, 'IP_INVALID_SWAP');\\n            _checkToken1Limits(balance1After, reference1);\\n            uint256 fee1 = balance1.sub(balance1After);\\n            addFees(fee0, fee1);\\n            updateReserves(balance0.sub(fee0), balance1.sub(fee1));\\n        }\\n\\n        _checkPriceDeviationLimit();\\n        emit Swap(msg.sender, to);\\n    }\\n\\n    function _checkPriceDeviationLimit() private view {\\n        uint256 currentPrice = getSpotPrice();\\n\\n        if (lastPrice > 0) {\\n            uint256 difference = lastPrice > currentPrice ? lastPrice.sub(currentPrice) : currentPrice.sub(lastPrice);\\n\\n            require(difference.mul(PRECISION).div(lastPrice) <= priceDeviationLimit, 'IP_P_LIMIT_EXCEEDED');\\n        }\\n    }\\n\\n    function _checkToken0Limits(uint256 balance0After, uint112 reference0) private view {\\n        if (balance0After < reference0) {\\n            uint256 difference = uint256(reference0).sub(balance0After);\\n            require(difference <= token0AbsoluteLimit, 'IP_A0_LIQUIDITY_LIMIT_EXCEEDED');\\n            require(difference.mul(PRECISION).div(reference0) <= token0RelativeLimit, 'IP_R0_LIQUIDITY_LIMIT_EXCEEDED');\\n        }\\n    }\\n\\n    function _checkToken1Limits(uint256 balance1After, uint112 reference1) private view {\\n        if (balance1After < reference1) {\\n            uint256 difference = uint256(reference1).sub(balance1After);\\n            require(difference <= token1AbsoluteLimit, 'IP_A1_LIQUIDITY_LIMIT_EXCEEDED');\\n            require(difference.mul(PRECISION).div(reference1) <= token1RelativeLimit, 'IP_R1_LIQUIDITY_LIMIT_EXCEEDED');\\n        }\\n    }\\n\\n    function sync() public override lock {\\n        require(canTrade(msg.sender), 'IP_UNAUTHORIZED_TRADER');\\n        _sync();\\n    }\\n\\n    // force reserves to match balances\\n    function _sync() internal {\\n        syncReserves(token0, token1);\\n        uint256 tokens = balanceOf[address(this)];\\n        if (tokens > 0) {\\n            _transfer(address(this), factory, tokens);\\n        }\\n    }\\n\\n    function syncWithOracle() external override {\\n        _syncWithOracle();\\n    }\\n\\n    function fullSync() external override {\\n        require(canTrade(msg.sender), 'IP_UNAUTHORIZED_TRADER');\\n        _sync();\\n        _syncWithOracle();\\n    }\\n\\n    function _syncWithOracle() internal {\\n        uint32 epoch = IIntegralOracle(oracle).updatePrice();\\n        (, , uint32 lastEpoch) = getReferences();\\n        if (epoch != lastEpoch) {\\n            setReferencesToReserves(epoch);\\n            lastPrice = getSpotPrice();\\n        }\\n    }\\n\\n    function getSpotPrice() public view override returns (uint256 spotPrice) {\\n        (uint112 reserve0, , ) = getReserves();\\n        (uint112 reference0, , ) = getReferences();\\n        return IIntegralOracle(oracle).getSpotPrice(reserve0, reference0);\\n    }\\n\\n    function getSwapAmount0In(uint256 amount1Out) public view override returns (uint256 swapAmount0In) {\\n        (uint112 reserve0, uint112 reserve1, ) = getReserves();\\n        (uint112 reference0, uint112 reference1, ) = getReferences();\\n        uint256 balance1After = uint256(reserve1).sub(amount1Out);\\n        uint256 balance0After = IIntegralOracle(oracle).tradeY(balance1After, reference0, reference1);\\n        return balance0After.sub(uint256(reserve0)).mul(TRADE_MOE).div(PRECISION.sub(swapFee));\\n    }\\n\\n    function getSwapAmount1In(uint256 amount0Out) public view override returns (uint256 swapAmount1In) {\\n        (uint112 reserve0, uint112 reserve1, ) = getReserves();\\n        (uint112 reference0, uint112 reference1, ) = getReferences();\\n        uint256 balance0After = uint256(reserve0).sub(amount0Out);\\n        uint256 balance1After = IIntegralOracle(oracle).tradeX(balance0After, reference0, reference1);\\n        return balance1After.sub(uint256(reserve1)).mul(TRADE_MOE).div(PRECISION.sub(swapFee));\\n    }\\n\\n    function getSwapAmount0Out(uint256 amount1In) public view override returns (uint256 swapAmount0Out) {\\n        (uint112 reserve0, uint112 reserve1, ) = getReserves();\\n        (uint112 reference0, uint112 reference1, ) = getReferences();\\n        uint256 fee = amount1In.mul(swapFee).div(PRECISION);\\n        uint256 balance0After = IIntegralOracle(oracle).tradeY(\\n            uint256(reserve1).add(amount1In).sub(fee),\\n            reference0,\\n            reference1\\n        );\\n        return uint256(reserve0).sub(balance0After);\\n    }\\n\\n    function getSwapAmount1Out(uint256 amount0In) public view override returns (uint256 swapAmount1Out) {\\n        (uint112 reserve0, uint112 reserve1, ) = getReserves();\\n        (uint112 reference0, uint112 reference1, ) = getReferences();\\n        uint256 fee = amount0In.mul(swapFee).div(PRECISION);\\n        uint256 balance1After = IIntegralOracle(oracle).tradeX(\\n            uint256(reserve0).add(amount0In).sub(fee),\\n            reference0,\\n            reference1\\n        );\\n        return uint256(reserve1).sub(balance1After);\\n    }\\n\\n    function getDepositAmount0In(uint256 amount0) external view override returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = getReserves();\\n        if (reserve0 == 0 || reserve1 == 0) {\\n            return 0;\\n        }\\n        uint8 decimals0 = IIntegralOracle(oracle).xDecimals();\\n        uint8 decimals1 = IIntegralOracle(oracle).yDecimals();\\n\\n        uint256 P = getSpotPrice();\\n        uint256 a = amount0.normalize(decimals0);\\n        uint256 A = uint256(reserve0).normalize(decimals0);\\n        uint256 B = uint256(reserve1).normalize(decimals1);\\n\\n        // ratio after swap = ratio after second mint\\n        // (A + x) / (B - x * P) = (A + a) / B\\n        // x = a * B / (P * (a + A) + B)\\n        uint256 numeratorTimes1e18 = a.mul(B);\\n        uint256 denominator = P.mul(a.add(A)).div(1e18).add(B);\\n        uint256 x = numeratorTimes1e18.div(denominator);\\n        // Don't swap when numbers are too large. This should actually never happen\\n        if (x.mul(P).div(1e18) >= B || x >= a) {\\n            return 0;\\n        }\\n        return x.denormalize(decimals0);\\n    }\\n\\n    function getDepositAmount1In(uint256 amount1) external view override returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = getReserves();\\n        if (reserve0 == 0 || reserve1 == 0) {\\n            return 0;\\n        }\\n        uint8 decimals0 = IIntegralOracle(oracle).xDecimals();\\n        uint8 decimals1 = IIntegralOracle(oracle).yDecimals();\\n\\n        uint256 P = getSpotPrice();\\n        uint256 b = amount1.normalize(decimals1);\\n        uint256 A = uint256(reserve0).normalize(decimals0);\\n        uint256 B = uint256(reserve1).normalize(decimals1);\\n\\n        // ratio after swap = ratio after second mint\\n        // (A - x / P) / (B + x) = A / (B + b)\\n        // x = A * b * P / (A * P + b + B)\\n        uint256 numeratorTimes1e18 = A.mul(b).div(1e18).mul(P);\\n        uint256 denominator = A.mul(P).div(1e18).add(b).add(B);\\n        uint256 x = numeratorTimes1e18.div(denominator);\\n        // Don't swap when numbers are too large. This should actually never happen\\n        if (x.mul(1e18).div(P) >= A || x >= b) {\\n            return 0;\\n        }\\n        return x.denormalize(decimals1);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"libraries\": {\r\n      \"IERC20.sol\": {},\r\n      \"IIntegralERC20.sol\": {},\r\n      \"IReserves.sol\": {},\r\n      \"IIntegralPair.sol\": {},\r\n      \"SafeMath.sol\": {},\r\n      \"Reserves.sol\": {},\r\n      \"AbstractERC20.sol\": {},\r\n      \"IntegralERC20.sol\": {},\r\n      \"Math.sol\": {},\r\n      \"IIntegralFactory.sol\": {},\r\n      \"IIntegralOracle.sol\": {},\r\n      \"Normalizer.sol\": {},\r\n      \"IntegralPair.sol\": {}\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"language\": \"Solidity\"\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee1\",\"type\":\"uint256\"}],\"name\":\"Fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetBurnFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetMintFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetPriceDeviationLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetToken0AbsoluteLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetToken0RelativeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetToken1AbsoluteLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetToken1RelativeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"SetTrader\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount0In\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"getDepositAmount1In\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferences\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"spotPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount0In\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount0In\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount0Out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount0Out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount1In\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount1In\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount1Out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount1Out\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDeviationLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDeviationLimit\",\"type\":\"uint256\"}],\"name\":\"setPriceDeviationLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token0AbsoluteLimit\",\"type\":\"uint256\"}],\"name\":\"setToken0AbsoluteLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token0RelativeLimit\",\"type\":\"uint256\"}],\"name\":\"setToken0RelativeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token1AbsoluteLimit\",\"type\":\"uint256\"}],\"name\":\"setToken1AbsoluteLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token1RelativeLimit\",\"type\":\"uint256\"}],\"name\":\"setToken1RelativeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"setTrader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncWithOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0AbsoluteLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0RelativeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1AbsoluteLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1RelativeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDomainSeparator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IntegralPair", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}