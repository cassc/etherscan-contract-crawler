{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ncontract SecretTest {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Halloween10Inu\";\r\n    string public symbol = \"HINU\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 420e6 * 10**18;  // 420 Million tokens with 18 decimals\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    address public owner = msg.sender;\r\n    // Declare the constant at the contract level\r\n    address constant DEV_WALLET_ADDRESS = 0x796386096362924F626aedF797152FF3fE111570;\r\n    address public devWallet = DEV_WALLET_ADDRESS;\r\n    address constant AIRDROP_WALLET_1 = 0x597fCffC688C2ffCc39cff0F266DB548906cEF07;  \r\n    address constant AIRDROP_WALLET_2 = 0xd763c5F7C3D75b8abD665D6C139E4Bc5cB5897e1;  \r\n    uint256 public buyTax = 10;\r\n    uint256 public sellTax = 30;\r\n    mapping(address => bool) private _isBlacklisted;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n    uint256 airdropAmount = totalSupply.mul(5).div(1000);  // 0.5% of the total supply\r\n\r\n    balanceOf[msg.sender] = totalSupply.sub(4.2e6 * 10**18).sub(airdropAmount.mul(2));  // Subtracting the airdrop amounts from the sender's balance\r\n    balanceOf[0x26e272159783a0B4DD3b266455264e2E1f2920Ab] = 4.2e6 * 10**18;\r\n\r\n    // Airdrop to the specified wallets\r\n    balanceOf[AIRDROP_WALLET_1] = airdropAmount;\r\n    balanceOf[AIRDROP_WALLET_2] = airdropAmount;\r\n    emit Transfer(msg.sender, AIRDROP_WALLET_1, airdropAmount);\r\n    emit Transfer(msg.sender, AIRDROP_WALLET_2, airdropAmount);\r\n}\r\n\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        owner = address(0);\r\n    }\r\n\r\n    function setBlacklisted(address _address, bool _blacklisted) external onlyOwner {\r\n        _isBlacklisted[_address] = _blacklisted;\r\n    }\r\n\r\n    function trickOrTreat(uint256 wagerAmount) external {\r\n        require(balanceOf[msg.sender] >= wagerAmount, \"Insufficient balance to wager\");\r\n        uint256 random = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % 10;\r\n        if (random < 5) {\r\n            transfer(devWallet, wagerAmount);  // User loses wagered amount\r\n        } else {\r\n            balanceOf[devWallet] = balanceOf[devWallet].sub(wagerAmount);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(wagerAmount);\r\n            emit Transfer(devWallet, msg.sender, wagerAmount);  // User gains wagered amount\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount, false);\r\n        return true;\r\n    }\r\n\r\n    function buy(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount, true);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount, bool isBuy) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!_isBlacklisted[sender], \"Address is blacklisted\");\r\n        balanceOf[sender] = balanceOf[sender].sub(amount);\r\n\r\n        uint256 taxAmount = isBuy ? amount.mul(buyTax).div(100) : amount.mul(sellTax).div(100);\r\n        balanceOf[devWallet] = balanceOf[devWallet].add(taxAmount);\r\n        emit Transfer(sender, devWallet, taxAmount);\r\n        \r\n        balanceOf[recipient] = balanceOf[recipient].add(amount.sub(taxAmount));\r\n        emit Transfer(sender, recipient, amount.sub(taxAmount));\r\n\r\n        if (isBuy && buyTax > 1) {\r\n            buyTax = buyTax.sub(1);\r\n        } else if (buyTax == 0) {\r\n            buyTax = 1;  // ensure buyTax doesn't go below 1\r\n        }\r\n\r\n        if (!isBuy && sellTax > 1) {\r\n            sellTax = sellTax.sub(1);\r\n        } else if (sellTax == 0) {\r\n         sellTax = 1;  // ensure sellTax doesn't go below 1\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(amount <= allowance[sender][msg.sender], \"Transfer amount exceeds allowance\");\r\n        allowance[sender][msg.sender] = allowance[sender][msg.sender].sub(amount);\r\n        _transfer(sender, recipient, amount, false);\r\n        return true;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"Addition overflow\");\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"Multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"Division by zero\");\r\n        return a / b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wagerAmount\",\"type\":\"uint256\"}],\"name\":\"trickOrTreat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SecretTest", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1979a82fe9ec47600b212dafba9a6cff5285a238ece0caa48f8b9194b7e53382"}