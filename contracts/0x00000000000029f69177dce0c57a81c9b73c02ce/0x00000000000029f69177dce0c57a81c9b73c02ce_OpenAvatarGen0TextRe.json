{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/dependencies/ens/registry/ENS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n  /**\\n   * @dev Returns the address that owns the specified node.\\n   * @param node The specified node.\\n   * @return address of the owner.\\n   */\\n  function owner(bytes32 node) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/core/dependencies/ens/reverseRegistrar/IReverseRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n  /**\\n   * @dev Transfers ownership of the reverse ENS record associated with the\\n   *      calling account.\\n   * @param owner The address to set as the owner of the reverse record in ENS.\\n   * @return The ENS node hash of the reverse record.\\n   */\\n  function claim(address owner) external returns (bytes32);\\n\\n  /**\\n   * @dev Sets the `name()` record for the reverse ENS record associated with\\n   * the calling account. First updates the resolver to the default reverse\\n   * resolver if necessary.\\n   * @param name The name to set for this address.\\n   * @return The ENS node hash of the reverse record.\\n   */\\n  function setName(string memory name) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/core/dependencies/IERC634.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IERC634: Text Data Interface\\n * @dev This is the same as EIP-634 with different variable names\\n * - rename node -> dna\\n * - +calldata for key in text()\\n * - +external for text()\\n * - +memory for return value of text()\\n */\\ninterface IERC634 {\\n  /**\\n   * @notice Returns the text data associated with a DNA\\n   * @param dna A DNA to lookup text data for\\n   * @param key A key to lookup text data for\\n   * @return text The text data\\n   */\\n  function text(bytes32 dna, string calldata key) external view returns (string memory text);\\n}\\n\"\r\n    },\r\n    \"contracts/core/lib/ENSReverseClaimer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ENS} from '../dependencies/ens/registry/ENS.sol';\\nimport {IReverseRegistrar} from '../dependencies/ens/reverseRegistrar/IReverseRegistrar.sol';\\n\\n/**\\n * @title ENSReverseClaimer\\n * @dev This contract is used to claim reverse ENS records.\\n */\\nabstract contract ENSReverseClaimer is Ownable {\\n  /// @dev The namehash of 'addr.reverse', the domain at which reverse records\\n  ///      are stored in ENS.\\n  bytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n  /**\\n   * @dev Transfers ownership of the reverse ENS record associated with the\\n   *      contract.\\n   * @param ens The ENS registry.\\n   * @param claimant The address to set as the owner of the reverse record in\\n   *                 ENS.\\n   * @return The ENS node hash of the reverse record.\\n   */\\n  function claimReverseENS(ENS ens, address claimant) external onlyOwner returns (bytes32) {\\n    return IReverseRegistrar(ens.owner(ADDR_REVERSE_NODE)).claim(claimant);\\n  }\\n\\n  /**\\n   * @dev Sets the reverse ENS record associated with the contract.\\n   * @param ens The ENS registry.\\n   * @param name The name to set as the reverse record in ENS.\\n   * @return The ENS node hash of the reverse record.\\n   */\\n  function setReverseENS(ENS ens, string calldata name) external onlyOwner returns (bytes32) {\\n    return IReverseRegistrar(ens.owner(ADDR_REVERSE_NODE)).setName(name);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/core/lib/KeepAlive.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title KeepAlive\\n * @dev KeepAlive is a contract designed to maintain its onchain presence in\\n * case of state expiration by using payable receive() and fallback() functions,\\n * while allow the owner to still withdraw funds.\\n * fallback():\\n *   - Default function that gets executed when no other function in the contract\\n *     matches the provided function signature, or when the contract receives\\n *     Ether along with data\\n *   - Can be payable or non-payable\\n *   - Must be marked external\\n * receive():\\n *   - Introduced in Solidity 0.6.0\\n *   - Special function that is executed when a contract receives Ether without\\n *     any data\\n *   - Must be payable\\n *   - Must be marked external\\n *   - Makes it easier to differentiate between intended Ether transfers and\\n *     other function calls\\n */\\ncontract KeepAlive is Ownable {\\n  /**\\n   * @notice Fallback function.\\n   * @dev fallback():\\n   *  - Default function that gets executed when no other function in the contract\\n   *    matches the provided function signature, or when the contract receives\\n   *    Ether along with data\\n   *  - Can be payable or non-payable\\n   *  - Must be marked external\\n   */\\n  // solhint-disable-next-line no-empty-blocks\\n  fallback() external payable {}\\n\\n  /**\\n   * @notice Receive funds.\\n   * @dev receive():\\n   *   - Introduced in Solidity 0.6.0\\n   *   - Special function that is executed when a contract receives Ether without\\n   *     any data\\n   *   - Must be payable\\n   *   - Must be marked external\\n   *   - Makes it easier to differentiate between intended Ether transfers and\\n   *     other function calls\\n   */\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /**\\n   * @notice Withdraw funds from the contract.\\n   */\\n  function withdraw(uint amount) external onlyOwner {\\n    payable(msg.sender).transfer(amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/IOpenAvatar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IOpenAvatarSentinel\\n * @dev An interface for the OpenAvatar sentinel.\\n */\\ninterface IOpenAvatarSentinel {\\n  /// @dev Returns true\\n  function openAvatar() external view returns (bool);\\n}\\n\\n/**\\n * @title IOpenAvatarGeneration\\n * @dev An interface for the OpenAvatar generation.\\n */\\ninterface IOpenAvatarGeneration {\\n  /// @dev Returns the generation of the OpenAvatar\\n  function openAvatarGeneration() external view returns (uint);\\n}\\n\\n/**\\n * @title IOpenAvatar\\n * @dev The OpenAvatar interface.\\n */\\ninterface IOpenAvatar is IOpenAvatarSentinel, IOpenAvatarGeneration {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/IOpenAvatarGen0TextRecords.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.20;\\nimport {IERC634} from './core/dependencies/IERC634.sol';\\n\\n/**\\n * @title Text Record\\n * @notice A key-value string pair.\\n */\\nstruct TextRecord {\\n  string key;\\n  string value;\\n}\\n\\n/**\\n * @title DNA Text Record\\n * @notice A DNA and a key-value string pair.\\n */\\nstruct DNATextRecord {\\n  bytes32 dna;\\n  string key;\\n  string value;\\n}\\n\\n/**\\n * @title IOpenAvatarGen0TextRecords\\n * @dev The TextStore contract stores text data by 32-byte OpenAvatar DNA.\\n *\\n * This contract is based on ERC-634 originally developed for ENS.\\n */\\ninterface IOpenAvatarGen0TextRecords is IERC634 {\\n  function setText(bytes32 dna, string calldata key, string calldata value) external;\\n\\n  function setText2(\\n    bytes32 dna,\\n    string calldata key,\\n    string calldata value,\\n    string calldata key2,\\n    string calldata value2\\n  ) external;\\n\\n  function setText3(\\n    bytes32 dna,\\n    string calldata key,\\n    string calldata value,\\n    string calldata key2,\\n    string calldata value2,\\n    string calldata key3,\\n    string calldata value3\\n  ) external;\\n\\n  function setText4(\\n    bytes32 dna,\\n    string calldata key,\\n    string calldata value,\\n    string calldata key2,\\n    string calldata value2,\\n    string calldata key3,\\n    string calldata value3,\\n    string calldata key4,\\n    string calldata value4\\n  ) external;\\n\\n  function setTexts(bytes32 dna, TextRecord[] calldata records) external;\\n\\n  function setTextBatch(DNATextRecord[] calldata records) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IOpenAvatarGen0Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {IOpenAvatar} from './IOpenAvatar.sol';\\n\\n/**\\n * @title OpenAvatarGen0TokenMetadata\\n * @dev The OpenAvatar metadata.\\n */\\nstruct OpenAvatarGen0TokenMetadata {\\n  uint generation;\\n  uint tokenId;\\n  bytes32 dna;\\n  address creator;\\n  address renderer;\\n}\\n\\n/**\\n * @title IOpenAvatarGen0TokenMetadata\\n * @dev An interface for the OpenAvatar metadata.\\n */\\ninterface IOpenAvatarGen0TokenMetadata {\\n  function getOpenAvatarGen0TokenMetadataByDNA(bytes32 dna) external view returns (OpenAvatarGen0TokenMetadata memory);\\n\\n  function getOpenAvatarGen0TokenMetadataByTokenId(\\n    uint tokenId\\n  ) external view returns (OpenAvatarGen0TokenMetadata memory);\\n\\n  function openAvatarURI(bytes32 dna) external view returns (string memory);\\n}\\n\\n/**\\n * @title IOpenAvatarGen0TokenDNA\\n * @dev An interface for the OpenAvatar DNA.\\n */\\ninterface IOpenAvatarGen0TokenDNA {\\n  function getDNAByTokenId(uint tokenId) external view returns (bytes32);\\n\\n  function getDNAsByTokenIds(uint[] calldata tokenIds) external view returns (bytes32[] memory);\\n\\n  function getTokenIdByDNA(bytes32 dna) external view returns (uint);\\n\\n  function getTokenIdsByDNAs(bytes32[] calldata dnas) external view returns (uint[] memory);\\n\\n  function creatorOf(uint tokenId) external view returns (address);\\n\\n  function creatorOfDNA(bytes32 dna) external view returns (address);\\n\\n  function ownerOfDNA(bytes32 dna) external view returns (address);\\n\\n  function ownerOfDNAs(bytes32[] calldata dnas) external view returns (address[] memory);\\n}\\n\\n/*\\n| Function                  | Mint State | Payment       | Batch  | Specify Recipient |\\n|---------------------------|------------|---------------|--------|-------------------|\\n| mint(dna)                 | Public     | mintPrice     | No     | No                |\\n| mintTo(to, dna)           | Public     | mintPrice     | No     | Yes               |\\n| mintBatch(dnas)           | Public     | mintPrice * N | Yes    | No                |\\n| mintBatchTo(to, dnas)     | Public     | mintPrice * N | Yes    | Yes               |\\n*/\\n\\n/**\\n * @title IOpenAvatarGen0TokenMintRead\\n * @notice An interface for reading OpenAvatar minting state.\\n */\\ninterface IOpenAvatarGen0TokenMintRead {\\n  /////////////////////////////////////////////////////////////////////////////\\n  // Supply\\n  /////////////////////////////////////////////////////////////////////////////\\n  function supplySoftCap() external view returns (uint16);\\n\\n  function supplyHardCap() external view returns (uint16);\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // Mint Price\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  function getMintPrice() external view returns (uint);\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // Mint State\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  function isMinted(bytes32 dna) external view returns (bool);\\n\\n  function isMintedEach(bytes32[] calldata dnas) external view returns (bool[] memory);\\n}\\n\\n/**\\n * @title IOpenAvatarGen0TokenMintWrite\\n * @notice An interface for minting OpenAvatars.\\n */\\ninterface IOpenAvatarGen0TokenMintWrite {\\n  /////////////////////////////////////////////////////////////////////////////\\n  // Mint\\n  /////////////////////////////////////////////////////////////////////////////\\n  function mint(bytes32 dna) external payable;\\n\\n  function mintTo(address to, bytes32 dna) external payable;\\n\\n  function mintBatch(bytes32[] calldata dnas) external payable;\\n\\n  function mintBatchTo(address to, bytes32[] calldata dnas) external payable;\\n}\\n\\n/**\\n * @title IOpenAvatarGen0TokenMintAdmin\\n * @notice An interface allowing the public mint price to be updated.\\n */\\ninterface IOpenAvatarGen0TokenMintAdmin {\\n  /////////////////////////////////////////////////////////////////////////////\\n  // Mint Price\\n  /////////////////////////////////////////////////////////////////////////////\\n  function setMintPrice(uint val) external;\\n}\\n\\n/**\\n * @title IOpenAvatarGen0TokenMint\\n * @notice The mint interfaces for OpenAvatarGen0Token.\\n */\\ninterface IOpenAvatarGen0TokenMint is\\n  IOpenAvatarGen0TokenMintRead,\\n  IOpenAvatarGen0TokenMintWrite,\\n  IOpenAvatarGen0TokenMintAdmin\\n{\\n\\n}\\n\\n/**\\n * @title IOpenAvatar\\n * @dev The OpenAvatar interface.\\n */\\ninterface IOpenAvatarGen0Token is\\n  IOpenAvatar,\\n  IOpenAvatarGen0TokenMetadata,\\n  IOpenAvatarGen0TokenDNA,\\n  IOpenAvatarGen0TokenMint\\n{\\n\\n}\\n\"\r\n    },\r\n    \"contracts/OpenAvatarGen0TextRecords.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {IERC165} from '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\nimport {DNATextRecord, IOpenAvatarGen0TextRecords, TextRecord} from './IOpenAvatarGen0TextRecords.sol';\\nimport {IERC634} from './core/dependencies/IERC634.sol';\\nimport {ENSReverseClaimer} from './core/lib/ENSReverseClaimer.sol';\\nimport {KeepAlive} from './core/lib/KeepAlive.sol';\\nimport {IOpenAvatarGen0TokenDNA} from './IOpenAvatarGen0Token.sol';\\nimport {OpenAvatarGenerationZero} from './OpenAvatarGenerationZero.sol';\\n\\n/**\\n * @title OpenAvatarGen0TextRecords\\n * @author Cory Gabrielsen (cory.eth)\\n *\\n * @notice This contract stores text records as key/value pairs, by 32-byte\\n * OpenAvatar DNA.\\n * @dev This contract is based on ERC-634 text() originally developed for ENS.\\n *\\n *\\n * ----------------------------------------------------------------------------\\n * Text Records\\n * ----------------------------------------------------------------------------\\n * A *Text Record* is a core building block of OpenAvatar.\\n *\\n * Text records are key-value pairs of strings stored onchain by Avatar DNA\\n * in the `OpenAvatarGen0TextRecords` contract. Token owners may store any\\n * key/value pair for their token's DNA.\\n *\\n * This mechanism provides an onchain key/value data store for Avatar DNA.\\n *\\n * Text records may be used by other contracts and applications to read/write\\n * arbitrary data to an OpenAvatar.\\n *\\n * For example, text records are used to determine if the token owner has\\n * set the background color for their Profile Picture Renderer. This allows\\n * token owners to dynamically customize their Avatar onchain, and provides\\n * an example for more complex integrations.\\n */\\ncontract OpenAvatarGen0TextRecords is\\n  IOpenAvatarGen0TextRecords,\\n  OpenAvatarGenerationZero,\\n  ENSReverseClaimer,\\n  KeepAlive\\n{\\n  /// @dev Error when a component is already initialized.\\n  error AlreadyInitialized();\\n  /// @dev Error when the required ERC-165 interfaces are not supported.\\n  error InterfaceUnsupported(address contractAddress, bytes4 interfaceId);\\n  /// @dev Error when the caller is not the token owner.\\n  error NotTokenOwner();\\n\\n  /// @dev The EIP-165 interface id for the text data extension\\n  bytes4 private constant INTERFACE_ID_TEXT = 0x59d1d43c;\\n  /// @dev The ERC-165 interface id for the OpenAvatarDNA (dependency).\\n  bytes4 private constant INTERFACE_ID_OPENAVATAR_GEN0_TOKEN_DNA = 0x2717336f;\\n\\n  /// @dev An event emitted when text data is set for a DNA\\n  event TextChanged(bytes32 indexed dna, string indexedKey, string key);\\n\\n  /// @dev The text data for each DNA\\n  mapping(bytes32 => mapping(string => string)) private texts;\\n\\n  /// @dev The OpenAvatar contract\\n  IOpenAvatarGen0TokenDNA public openAvatarGen0Token;\\n\\n  constructor(address ownerProxy) {\\n    // will be deployed by ImmutableCreate2Factory and then transferred to the\\n    // configured owner.\\n    // using a proxy allows for using same constructor args and thus same\\n    // bytecode for all instances of this contract.\\n\\n    address wantOwner = Ownable(ownerProxy).owner();\\n    if (owner() != wantOwner) {\\n      transferOwnership(wantOwner);\\n    }\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // Initialize Dependencies\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Initialize the contract.\\n   * @param openAvatarGen0Token_ The address of the OpenAvatar token contract.\\n   */\\n  function initialize(address openAvatarGen0Token_) external onlyOwner {\\n    setOpenAvatarGen0Token(openAvatarGen0Token_);\\n  }\\n\\n  /**\\n   * @notice Check if the contract has been initialized.\\n   * @return True if the contract has been initialized, false otherwise.\\n   */\\n  function isInitialized() external view returns (bool) {\\n    return address(openAvatarGen0Token) != address(0);\\n  }\\n\\n  /**\\n   * @dev Get the OpenAvatar token.\\n   * @return The address of the OpenAvatar token read interface contract.\\n   */\\n  function getOpenAvatarGen0Token() external view returns (address) {\\n    return address(openAvatarGen0Token);\\n  }\\n\\n  /**\\n   * @dev Set the OpenAvatar token address.\\n   * @param openAvatarGen0Token_ The address of the OpenAvatar token contract.\\n   */\\n  function setOpenAvatarGen0Token(address openAvatarGen0Token_) internal {\\n    // only set once\\n    if (address(openAvatarGen0Token) != address(0)) revert AlreadyInitialized();\\n\\n    // check ERC-165 support\\n    // only DNA interface is required\\n    if (!IERC165(openAvatarGen0Token_).supportsInterface(INTERFACE_ID_OPENAVATAR_GEN0_TOKEN_DNA)) {\\n      revert InterfaceUnsupported(openAvatarGen0Token_, INTERFACE_ID_OPENAVATAR_GEN0_TOKEN_DNA);\\n    }\\n\\n    // set\\n    openAvatarGen0Token = IOpenAvatarGen0TokenDNA(openAvatarGen0Token_);\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // ERC-165: Standard Interface Detection\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @notice Checks if the contract supports an interface.\\n   * @param interfaceId The interface identifier, as specified in ERC-165.\\n   * @return True if the contract supports interfaceID, false otherwise.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public pure override(OpenAvatarGenerationZero) returns (bool) {\\n    return\\n      interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n      // ERC634\\n      interfaceId == INTERFACE_ID_TEXT || // ERC165 interface ID for ERC634.\\n      // IOpenAvatar\\n      interfaceId == 0xfdf02ac8 || // ERC165 interface ID for IOpenAvatarGeneration.\\n      interfaceId == 0x7b65147c || // ERC165 interface ID for IOpenAvatarSentinel.\\n      interfaceId == 0x86953eb4 || // ERC165 interface ID for IOpenAvatar.\\n      // IOpenAvatarGen0TextRecords\\n      interfaceId == 0x8aacdebd; // ERC165 interface ID for IOpenAvatarGen0TextRecords.\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // ERC-634 equivalent\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Retrieves text metadata for DNA.\\n   * Each DNA may have multiple pieces of metadata, identified by a unique string key.\\n   * f no text data exists for DNA with the key key, the empty string is returned.\\n   * @param dna The DNA to query.\\n   * @param key The text data key to query.\\n   * @return The associated text data.\\n   */\\n  function text(bytes32 dna, string calldata key) external view returns (string memory) {\\n    return texts[dna][key];\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // Setters\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev Sets text records for DNA with the unique key key to value,\\n   * overwriting anything previously stored for DNA and key. To clear a\\n   * text field, set it to the empty string.\\n   * @param dna The DNA to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function _setText(bytes32 dna, string calldata key, string calldata value) internal {\\n    texts[dna][key] = value;\\n    emit TextChanged(dna, key, key);\\n  }\\n\\n  /**\\n   * @dev Sets text records for DNA with the unique key key to value,\\n   * overwriting anything previously stored for DNA and key. To clear a\\n   * text field, set it to the empty string.\\n   * Only callable by the token owner.\\n   * @param dna The DNA to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   */\\n  function setText(bytes32 dna, string calldata key, string calldata value) external {\\n    if (openAvatarGen0Token.ownerOfDNA(dna) != msg.sender) revert NotTokenOwner();\\n    _setText(dna, key, value);\\n  }\\n\\n  /**\\n   * @dev Sets text records for DNA with the unique key key to value,\\n   * overwriting anything previously stored for DNA and key. To clear a\\n   * text field, set it to the empty string.\\n   * Only callable by the token owner.\\n   * @param dna The DNA to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   * @param key2 The second key to set.\\n   * @param value2 The second text data value to set.\\n   */\\n  function setText2(\\n    bytes32 dna,\\n    string calldata key,\\n    string calldata value,\\n    string calldata key2,\\n    string calldata value2\\n  ) external {\\n    if (openAvatarGen0Token.ownerOfDNA(dna) != msg.sender) revert NotTokenOwner();\\n    _setText(dna, key, value);\\n    _setText(dna, key2, value2);\\n  }\\n\\n  /**\\n   * @dev Sets text records for DNA with the unique key key to value,\\n   * overwriting anything previously stored for DNA and key. To clear a\\n   * text field, set it to the empty string.\\n   * Only callable by the token owner.\\n   * @param dna The DNA to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   * @param key2 The second key to set.\\n   * @param value2 The second text data value to set.\\n   * @param key3 The third key to set.\\n   * @param value3 The third text data value to set.\\n   */\\n  function setText3(\\n    bytes32 dna,\\n    string calldata key,\\n    string calldata value,\\n    string calldata key2,\\n    string calldata value2,\\n    string calldata key3,\\n    string calldata value3\\n  ) external {\\n    if (openAvatarGen0Token.ownerOfDNA(dna) != msg.sender) revert NotTokenOwner();\\n    _setText(dna, key, value);\\n    _setText(dna, key2, value2);\\n    _setText(dna, key3, value3);\\n  }\\n\\n  /**\\n   * @dev Sets text records for DNA with the unique key key to value,\\n   * overwriting anything previously stored for DNA and key. To clear a\\n   * text field, set it to the empty string.\\n   * Only callable by the token owner.\\n   * @param dna The DNA to update.\\n   * @param key The key to set.\\n   * @param value The text data value to set.\\n   * @param key2 The second key to set.\\n   * @param value2 The second text data value to set.\\n   * @param key3 The third key to set.\\n   * @param value3 The third text data value to set.\\n   * @param key4 The fourth key to set.\\n\\n   */\\n  function setText4(\\n    bytes32 dna,\\n    string calldata key,\\n    string calldata value,\\n    string calldata key2,\\n    string calldata value2,\\n    string calldata key3,\\n    string calldata value3,\\n    string calldata key4,\\n    string calldata value4\\n  ) external {\\n    if (openAvatarGen0Token.ownerOfDNA(dna) != msg.sender) revert NotTokenOwner();\\n    _setText(dna, key, value);\\n    _setText(dna, key2, value2);\\n    _setText(dna, key3, value3);\\n    _setText(dna, key4, value4);\\n  }\\n\\n  /**\\n   * @dev Sets an array of text records for a DNA. Each text record is a key/value pair.\\n   * Only callable by the token owner.\\n   * @param dna The DNA to update.\\n   * @param records The text records to set.\\n   */\\n  function setTexts(bytes32 dna, TextRecord[] calldata records) external {\\n    if (openAvatarGen0Token.ownerOfDNA(dna) != msg.sender) revert NotTokenOwner();\\n    uint length = records.length;\\n    for (uint256 i = 0; i < length; ) {\\n      TextRecord calldata record = records[i];\\n      _setText(dna, record.key, record.value);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Set a batch text records where each record may be a different DNA.\\n   *\\n   * @param records The records to set.\\n   */\\n  function setTextBatch(DNATextRecord[] calldata records) external {\\n    uint length = records.length;\\n    for (uint256 i = 0; i < length; ) {\\n      DNATextRecord calldata record = records[i];\\n      if (openAvatarGen0Token.ownerOfDNA(record.dna) != msg.sender) revert NotTokenOwner();\\n      _setText(record.dna, record.key, record.value);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OpenAvatarGenerationZero.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.20;\\n\\nimport {IOpenAvatar} from './IOpenAvatar.sol';\\n\\n/**\\n * @title IOpenAvatarGeneration\\n * @dev OpenAvatar Generation 0 common definitions.\\n */\\nabstract contract OpenAvatarGenerationZero is IOpenAvatar {\\n  /// @dev OpenAvatar Generation 0.\\n  uint public constant OPENAVATAR_GENERATION_ZERO = 0;\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // IOpenAvatarGeneration\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @notice Returns 0, in reference to Open Avatar Generation 0.\\n   * @return 0 (zero).\\n   */\\n  function openAvatarGeneration() external pure returns (uint) {\\n    return OPENAVATAR_GENERATION_ZERO;\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // IOpenAvatarSentinel\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @notice Returns true.\\n   * @dev This is a sentinel function to indicate that this contract is an\\n   * OpenAvatar contract.\\n   * @return True.\\n   */\\n  function openAvatar() public pure returns (bool) {\\n    return true;\\n  }\\n\\n  /////////////////////////////////////////////////////////////////////////////\\n  // ERC-165: Standard Interface Detection\\n  /////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @notice Checks if the contract supports an interface.\\n   * @param interfaceId The interface identifier, as specified in ERC-165.\\n   * @return True if the contract supports interfaceID, false otherwise.\\n   */\\n  function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n    return\\n      interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n      // IOpenAvatar\\n      interfaceId == 0xfdf02ac8 || // ERC165 interface ID for IOpenAvatarGeneration.\\n      interfaceId == 0x7b65147c || // ERC165 interface ID for IOpenAvatarSentinel.\\n      interfaceId == 0x86953eb4; // ERC165 interface ID for IOpenAvatar.\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"shanghai\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"stackAllocation\": true\r\n        }\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"InterfaceUnsupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"OPENAVATAR_GENERATION_ZERO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"claimReverseENS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenAvatarGen0Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"openAvatarGen0Token_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAvatar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAvatarGen0Token\",\"outputs\":[{\"internalType\":\"contract IOpenAvatarGen0TokenDNA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAvatarGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ens\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setReverseENS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value2\",\"type\":\"string\"}],\"name\":\"setText2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value3\",\"type\":\"string\"}],\"name\":\"setText3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value3\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key4\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value4\",\"type\":\"string\"}],\"name\":\"setText4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct DNATextRecord[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"name\":\"setTextBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct TextRecord[]\",\"name\":\"records\",\"type\":\"tuple[]\"}],\"name\":\"setTexts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dna\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OpenAvatarGen0TextRecords", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "00000000000000000000000000000000000027390b412440c58100929acfeae2", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}