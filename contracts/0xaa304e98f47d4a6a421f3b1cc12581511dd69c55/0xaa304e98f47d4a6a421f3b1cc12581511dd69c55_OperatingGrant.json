{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OperatingGrant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport \\\"../interfaces/ITellor.sol\\\";\\n\\n/**\\n @author Tellor Inc.\\n @title OperatingGrant\\n @dev This contract allows the Tellor team to receive a grant to fund operations.\\n*/\\ncontract OperatingGrant {\\n    //Storage\\n    uint256 public lastReleaseTime;\\n    uint256 public maxAmount;\\n    address public beneficiary = 0x39E419bA25196794B595B2a595Ea8E527ddC9856;\\n    address public constant tellorAddress = 0x88dF592F8eb5D7Bd38bFeF7dEb0fBc02cf3778a0;\\n\\n    //Events\\n    event TokenWithdrawal (uint256 _amount);\\n\\n\\n    constructor () {\\n        lastReleaseTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Use this function to update the beneficiary address\\n     *\\n     */\\n    function updateBeneficiary (address _newBeneficiary) external {\\n        require(msg.sender == beneficiary, \\\"must be the beneficiary\\\");\\n        beneficiary = _newBeneficiary;\\n    } \\n    \\n    /**\\n     * @dev Use this function to withdraw released tokens\\n     *\\n     */\\n    function withdrawTrb() external {\\n        uint256 _availableBalance = ITellor(tellorAddress).balanceOf(address(this));\\n        if(_availableBalance > maxAmount){\\n            maxAmount = _availableBalance;\\n        }\\n        uint256 _releasedAmount = maxAmount * (block.timestamp - lastReleaseTime)/(86400* 365 * 2); //2 year payout \\n        if(_releasedAmount > _availableBalance){\\n            _releasedAmount = _availableBalance;\\n        }\\n        lastReleaseTime = block.timestamp;\\n        ITellor(tellorAddress).transfer(beneficiary, _releasedAmount);\\n        emit TokenWithdrawal(_releasedAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/ITellor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title ITellor\\n */\\ninterface ITellor {\\n    function balanceOf(address _user) external returns (uint256);\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n}\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTrb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperatingGrant", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}