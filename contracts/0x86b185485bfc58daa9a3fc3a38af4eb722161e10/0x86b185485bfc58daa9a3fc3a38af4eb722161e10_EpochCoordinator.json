{"SourceCode": "// Verified using https://dapp.tools\n\n// hevm: flattened sources of src/lender/coordinator.sol\n// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.5.15 >=0.7.6;\n\n////// lib/tinlake-auth/src/auth.sol\n// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n/* pragma solidity >=0.5.15; */\n\ncontract Auth {\n    mapping (address => uint256) public wards;\n    \n    event Rely(address indexed usr);\n    event Deny(address indexed usr);\n\n    function rely(address usr) external auth {\n        wards[usr] = 1;\n        emit Rely(usr);\n    }\n    function deny(address usr) external auth {\n        wards[usr] = 0;\n        emit Deny(usr);\n    }\n\n    modifier auth {\n        require(wards[msg.sender] == 1, \"not-authorized\");\n        _;\n    }\n\n}\n\n////// lib/tinlake-math/src/math.sol\n// Copyright (C) 2018 Rain <rainbreak@riseup.net>\n/* pragma solidity >=0.5.15; */\n\ncontract Math {\n    uint256 constant ONE = 10 ** 27;\n\n    function safeAdd(uint x, uint y) public pure returns (uint z) {\n        require((z = x + y) >= x, \"safe-add-failed\");\n    }\n\n    function safeSub(uint x, uint y) public pure returns (uint z) {\n        require((z = x - y) <= x, \"safe-sub-failed\");\n    }\n\n    function safeMul(uint x, uint y) public pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"safe-mul-failed\");\n    }\n\n    function safeDiv(uint x, uint y) public pure returns (uint z) {\n        z = x / y;\n    }\n\n    function rmul(uint x, uint y) public pure returns (uint z) {\n        z = safeMul(x, y) / ONE;\n    }\n\n    function rdiv(uint x, uint y) public pure returns (uint z) {\n        require(y > 0, \"division by zero\");\n        z = safeAdd(safeMul(x, ONE), y / 2) / y;\n    }\n\n    function rdivup(uint x, uint y) internal pure returns (uint z) {\n        require(y > 0, \"division by zero\");\n        // always rounds up\n        z = safeAdd(safeMul(x, ONE), safeSub(y, 1)) / y;\n    }\n\n\n}\n\n////// src/fixed_point.sol\n/* pragma solidity >=0.7.6; */\n\nabstract contract FixedPoint {\n    struct Fixed27 {\n        uint value;\n    }\n}\n\n////// src/lender/coordinator.sol\n/* pragma solidity >=0.7.6; */\n\n/* import \"./../fixed_point.sol\"; */\n/* import \"tinlake-auth/auth.sol\"; */\n/* import \"tinlake-math/math.sol\"; */\n\ninterface TrancheLike_3 {\n    function epochUpdate(uint epochID, uint supplyFulfillment_,\n        uint redeemFulfillment_, uint tokenPrice_, uint epochSupplyCurrency, uint epochRedeemCurrency) external;\n    function closeEpoch() external returns(uint totalSupply, uint totalRedeem);\n    function payoutRequestedCurrency() external;\n}\n\nabstract contract AssessorLike_4 is FixedPoint {\n    // definitions\n    function calcSeniorRatio(uint seniorAsset, uint NAV, uint reserve_) public virtual pure returns(uint);\n    function calcSeniorAssetValue(uint seniorRedeem, uint seniorSupply,\n        uint currSeniorAsset, uint reserve_, uint nav_) public virtual pure returns (uint seniorAsset);\n    function calcSeniorRatio(uint seniorRedeem, uint seniorSupply,\n        uint currSeniorAsset, uint newReserve, uint nav) public virtual pure returns (uint seniorRatio);\n\n    // definitions based on assessor state\n    function calcSeniorTokenPrice(uint NAV, uint reserve) public virtual returns(uint tokenPrice);\n    function calcJuniorTokenPrice(uint NAV, uint reserve) public virtual returns(uint tokenPrice);\n\n    // get state\n    function maxReserve() public virtual view returns(uint);\n    function calcUpdateNAV() public virtual returns (uint);\n    function seniorDebt() public virtual returns(uint);\n    function seniorBalance() public virtual returns(uint);\n    function seniorRatioBounds() public virtual view returns(uint minSeniorRatio, uint maxSeniorRatio);\n\n    function totalBalance() public virtual returns(uint);\n    // change state\n    function changeBorrowAmountEpoch(uint currencyAmount) public virtual;\n    function changeSeniorAsset(uint seniorSupply, uint seniorRedeem) public virtual;\n    function changeSeniorAsset(uint seniorRatio, uint seniorSupply, uint seniorRedeem) public virtual;\n}\n\n// The EpochCoordinator keeps track of the epochs and execute epochs them.\n// An epoch execution happens with the maximum amount of redeem and supply which still satisfies\n// all constraints or at least improve certain pool constraints.\n// In most cases all orders can be fulfilled with order maximum without violating any constraints.\n// If it is not possible to satisfy all orders at maximum the coordinators opens a submission period.\n// The problem of finding the maximum amount of supply and redeem orders which still satisfies all constraints\n// can be seen as a linear programming (linear optimization problem).\n// The optimal solution can be calculated off-chain\ncontract EpochCoordinator is Auth, Math, FixedPoint {\n    struct OrderSummary {\n        // all variables are stored in currency\n        uint  seniorRedeem;\n        uint  juniorRedeem;\n        uint  juniorSupply;\n        uint  seniorSupply;\n    }\n\n    modifier minimumEpochTimePassed {\n        require(safeSub(block.timestamp, lastEpochClosed) >= minimumEpochTime);\n        _;\n    }\n                        // timestamp last epoch closed\n    uint                public lastEpochClosed;\n                        // default minimum length of an epoch\n                        // (1 day, with 10 min buffer, so we can close the epochs automatically on a daily basis at the same time)\n    uint                public minimumEpochTime = 1 days - 10 minutes;\n\n    TrancheLike_3         public juniorTranche;\n    TrancheLike_3         public seniorTranche;\n\n    AssessorLike_4        public assessor;\n\n    uint                public lastEpochExecuted;\n    uint                public currentEpoch;\n                        // current best solution submission for an epoch which satisfies all constraints\n    OrderSummary        public bestSubmission;\n                        // current best score of the best solution\n    uint                public bestSubScore;\n                        // flag which tracks if an submission period received a valid solution\n    bool                public gotFullValidSolution;\n                        // snapshot from the the orders in the tranches at epoch close\n    OrderSummary        public order;\n                        // snapshot from the senior token price at epoch close\n    Fixed27             public epochSeniorTokenPrice;\n                        // snapshot from the junior token price at epoch close\n    Fixed27             public epochJuniorTokenPrice;\n\n                        // snapshot from NAV (net asset value of the loans) at epoch close\n    uint                public epochNAV;\n                        // snapshot from the senior asset value at epoch close\n    uint                public epochSeniorAsset;\n                        // snapshot from reserve balance at epoch close\n    uint                public epochReserve;\n                        // flag which indicates if the coordinator is currently in a submission period\n    bool                public submissionPeriod;\n\n                        // weights of the scoring function\n                        // highest priority senior redeem and junior redeem before junior and senior supply\n    uint                public weightSeniorRedeem  = 1000000;\n    uint                public weightJuniorRedeem  =  100000;\n    uint                public weightJuniorSupply =   10000;\n    uint                public weightSeniorSupply =    1000;\n\n                        // challenge period end timestamp\n    uint                public minChallengePeriodEnd;\n                        // after a first valid solution is received others can submit better solutions\n                        // until challenge time is over\n    uint                public challengeTime;\n                        // if the current state is not healthy improvement submissions are allowed\n                        // ratio and reserve improvements receive score points\n                        // keeping track of the best improvements scores\n    uint                public bestRatioImprovement;\n    uint                public bestReserveImprovement;\n\n                        // flag for closing the pool (no new supplies allowed only redeem)\n    bool                public poolClosing = false;\n\n                        // constants\n    int                 public constant SUCCESS = 0;\n    int                 public constant NEW_BEST = 0;\n    int                 public constant ERR_CURRENCY_AVAILABLE = -1;\n    int                 public constant ERR_MAX_ORDER = -2;\n    int                 public constant ERR_MAX_RESERVE = - 3;\n    int                 public constant ERR_MIN_SENIOR_RATIO = -4;\n    int                 public constant ERR_MAX_SENIOR_RATIO = -5;\n    int                 public constant ERR_NOT_NEW_BEST = -6;\n    int                 public constant ERR_POOL_CLOSING = -7;\n    uint                public constant BIG_NUMBER = ONE * ONE;\n\n    event File(bytes32 indexed name, uint value);\n    event File(bytes32 indexed name, bool value);\n    event Depend(bytes32 indexed contractName, address addr);\n\n    constructor(uint challengeTime_) {\n        challengeTime = challengeTime_;\n        lastEpochClosed = block.timestamp;\n        currentEpoch = 1;\n\n        wards[msg.sender] = 1;\n        emit Rely(msg.sender);\n    }\n\n    function file(bytes32 name, uint value) public auth {\n        if (name == \"challengeTime\") {\n            challengeTime = value;\n        } else if (name == \"minimumEpochTime\") {\n            minimumEpochTime = value;\n        } else if (name == \"weightSeniorRedeem\") { weightSeniorRedeem = value; }\n          else if (name == \"weightJuniorRedeem\") { weightJuniorRedeem = value; }\n          else if (name == \"weightJuniorSupply\") { weightJuniorSupply = value; }\n          else if (name == \"weightSeniorSupply\") { weightSeniorSupply = value; }\n          else { revert(\"unknown-name\");}\n        emit File(name, value);\n     }\n\n    function file(bytes32 name, bool value) public auth {\n        if (name == \"poolClosing\") {\n            poolClosing = value;\n        } else { revert(\"unknown-name\"); }\n        emit File(name, value);\n     }\n\n    // sets the dependency to another contract\n    function depend (bytes32 contractName, address addr) public auth {\n        if (contractName == \"juniorTranche\") { juniorTranche = TrancheLike_3(addr); }\n        else if (contractName == \"seniorTranche\") { seniorTranche = TrancheLike_3(addr); }\n        else if (contractName == \"assessor\") { assessor = AssessorLike_4(addr); }\n        else revert();\n        emit Depend(contractName, addr);\n    }\n\n    // an epoch can be closed after a minimum epoch time has passed\n    // closeEpoch creates a snapshot of the current lender state\n    // if all orders can be fulfilled epoch is executed otherwise\n    // submission period starts\n    function closeEpoch() external minimumEpochTimePassed returns (bool epochExecuted) {\n        require(submissionPeriod == false);\n        lastEpochClosed = block.timestamp;\n        currentEpoch = currentEpoch + 1;\n        assessor.changeBorrowAmountEpoch(0);\n\n        (uint orderJuniorSupply, uint orderJuniorRedeem) = juniorTranche.closeEpoch();\n        (uint orderSeniorSupply, uint orderSeniorRedeem) = seniorTranche.closeEpoch();\n        epochSeniorAsset = safeAdd(assessor.seniorDebt(), assessor.seniorBalance());\n\n        // create a snapshot of the current lender state\n\n        epochNAV = assessor.calcUpdateNAV();\n        epochReserve = assessor.totalBalance();\n        //  if no orders exist epoch can be executed without validation\n        if (orderSeniorRedeem == 0 && orderJuniorRedeem == 0 &&\n        orderSeniorSupply == 0 && orderJuniorSupply == 0) {\n\n            juniorTranche.epochUpdate(currentEpoch, 0, 0, 0, 0, 0);\n            seniorTranche.epochUpdate(currentEpoch, 0, 0, 0, 0, 0);\n            // assessor performs re-balancing\n            assessor.changeSeniorAsset(0, 0);\n            assessor.changeBorrowAmountEpoch(epochReserve);\n            lastEpochExecuted = safeAdd(lastEpochExecuted, 1);\n            return true;\n        }\n\n        // calculate current token prices which are used for the execute\n\n        epochSeniorTokenPrice = Fixed27(assessor.calcSeniorTokenPrice(epochNAV, epochReserve));\n        epochJuniorTokenPrice = Fixed27(assessor.calcJuniorTokenPrice(epochNAV, epochReserve));\n        // start closing the pool if juniorTranche lost everything\n        // the flag will change the behaviour of the validate function for not allowing new supplies\n        if(epochJuniorTokenPrice.value == 0) {\n            poolClosing = true;\n        }\n\n        // convert redeem orders in token into currency\n        order.seniorRedeem = rmul(orderSeniorRedeem, epochSeniorTokenPrice.value);\n        order.juniorRedeem = rmul(orderJuniorRedeem, epochJuniorTokenPrice.value);\n        order.juniorSupply = orderJuniorSupply;\n        order.seniorSupply = orderSeniorSupply;\n\n        // epoch is executed if orders can be fulfilled to 100% without constraint violation\n        if (validate(order.seniorRedeem , order.juniorRedeem,\n            order.seniorSupply, order.juniorSupply) == SUCCESS) {\n            _executeEpoch(order.seniorRedeem, order.juniorRedeem,\n                orderSeniorSupply, orderJuniorSupply);\n            return true;\n        }\n        // if 100% order fulfillment is not possible submission period starts\n        // challenge period time starts after first valid submission is received\n        submissionPeriod = true;\n        return false;\n    }\n\n\n    /// internal method to save new optimum\n    /// orders are expressed as currency\n    /// all parameter are 10^18\n    function _saveNewOptimum(uint seniorRedeem, uint juniorRedeem, uint juniorSupply,\n        uint seniorSupply, uint score) internal {\n\n        bestSubmission.seniorRedeem = seniorRedeem;\n        bestSubmission.juniorRedeem = juniorRedeem;\n        bestSubmission.juniorSupply = juniorSupply;\n        bestSubmission.seniorSupply = seniorSupply;\n\n        bestSubScore = score;\n    }\n\n\n    // method to submit a solution for submission period\n    // anybody can submit a solution for the current execution epoch\n    // if solution satisfies all constraints (or at least improves an unhealthy state)\n    // and has the highest score\n    function submitSolution(uint seniorRedeem, uint juniorRedeem,\n        uint juniorSupply, uint seniorSupply) public returns(int) {\n        require(submissionPeriod == true, \"submission-period-not-active\");\n\n        int valid = _submitSolution(seniorRedeem, juniorRedeem, juniorSupply, seniorSupply);\n\n        // if solution is the first valid for this epoch the challenge period starts\n        if(valid == SUCCESS && minChallengePeriodEnd == 0) {\n            minChallengePeriodEnd = safeAdd(block.timestamp, challengeTime);\n        }\n        return valid;\n    }\n\n    // internal method for submit solution\n    function _submitSolution(uint seniorRedeem, uint juniorRedeem,\n        uint juniorSupply, uint seniorSupply) internal returns(int) {\n\n        int valid = validate(seniorRedeem, juniorRedeem, seniorSupply, juniorSupply);\n\n        // every solution needs to satisfy all core constraints\n        // there is no exception\n        if (valid == ERR_CURRENCY_AVAILABLE || valid == ERR_MAX_ORDER || valid == ERR_POOL_CLOSING) {\n            // core constraint violated\n            return valid;\n        }\n\n        // all core constraints and all pool constraints are satisfied\n        if(valid == SUCCESS) {\n            uint score = scoreSolution(seniorRedeem, juniorRedeem, seniorSupply, juniorSupply);\n\n            if(gotFullValidSolution == false) {\n                gotFullValidSolution = true;\n                _saveNewOptimum(seniorRedeem, juniorRedeem, juniorSupply, seniorSupply, score);\n                // solution is new best => 0\n                return SUCCESS;\n            }\n\n            if (score < bestSubScore) {\n                // solution is not the best => -6\n                return ERR_NOT_NEW_BEST;\n            }\n\n            _saveNewOptimum(seniorRedeem, juniorRedeem, juniorSupply, seniorSupply, score);\n\n            // solution is new best => 0\n            return SUCCESS;\n        }\n\n        // proposed solution does not satisfy all pool constraints\n        // if we never received a solution which satisfies all constraints for this epoch\n        // we might accept it as an improvement\n        if (gotFullValidSolution == false) {\n            return _improveScore(seniorRedeem, juniorRedeem, juniorSupply, seniorSupply);\n        }\n\n        // proposed solution doesn't satisfy the pool constraints but a previous submission did\n        return ERR_NOT_NEW_BEST;\n    }\n\n    function absDistance(uint x, uint y) public pure returns(uint delta) {\n        if (x == y) {\n            // gas optimization: for avoiding an additional edge case of 0 distance\n            // distance is set to the smallest value possible\n            return 1;\n        }\n        if(x > y) {\n            return safeSub(x, y);\n        }\n        return safeSub(y, x);\n    }\n\n    function checkRatioInRange(uint ratio, uint minRatio,\n        uint maxRatio) public pure returns (bool) {\n        if (ratio >= minRatio && ratio <= maxRatio ) {\n            return true;\n        }\n        return false;\n    }\n\n    // calculates the improvement score of a solution\n    function _improveScore(uint seniorRedeem, uint juniorRedeem,\n        uint juniorSupply, uint seniorSupply) internal returns(int) {\n        Fixed27 memory currSeniorRatio = Fixed27(assessor.calcSeniorRatio(epochSeniorAsset,\n            epochNAV, epochReserve));\n\n        int err = 0;\n        uint impScoreRatio = 0;\n        uint impScoreReserve = 0;\n\n        if (bestRatioImprovement == 0) {\n            // define no orders (current status) score as benchmark if no previous submission exists\n            // if the current state satisfies all pool constraints it has the highest score\n            (err, impScoreRatio, impScoreReserve) = scoreImprovement(currSeniorRatio.value, epochReserve);\n            saveNewImprovement(impScoreRatio, impScoreReserve);\n        }\n\n        uint newReserve = calcNewReserve(seniorRedeem, juniorRedeem, seniorSupply, juniorSupply);\n\n        Fixed27 memory newSeniorRatio = Fixed27(assessor.calcSeniorRatio(seniorRedeem, seniorSupply,\n            epochSeniorAsset, newReserve, epochNAV));\n\n        (err, impScoreRatio, impScoreReserve) = scoreImprovement(newSeniorRatio.value, newReserve);\n\n        if (err  == ERR_NOT_NEW_BEST) {\n            // solution is not the best => -1\n            return err;\n        }\n\n        saveNewImprovement(impScoreRatio, impScoreReserve);\n\n        // solution doesn't satisfy all pool constraints but improves the current violation\n        // improvement only gets 0 points only solutions in the feasible region receive more\n        _saveNewOptimum(seniorRedeem, juniorRedeem, juniorSupply, seniorSupply, 0);\n        return NEW_BEST;\n    }\n\n    // the score improvement reserve uses the normalized distance to maxReserve/2 as score\n    // as smaller the distance as higher is the score\n    // highest possible score if solution is not violating the reserve\n    function scoreReserveImprovement(uint newReserve_) public view returns (uint score) {\n        if (newReserve_ <= assessor.maxReserve()) {\n            // highest possible score\n            return BIG_NUMBER;\n        }\n\n        return rdiv(ONE, safeSub(newReserve_, assessor.maxReserve()));\n    }\n\n    // the score improvement ratio uses the normalized distance to (minRatio+maxRatio)/2 as score\n    // as smaller the distance as higher is the score\n    // highest possible score if solution is not violating the ratio\n    function scoreRatioImprovement(uint newSeniorRatio) public view returns (uint) {\n        (uint minSeniorRatio, uint maxSeniorRatio) = assessor.seniorRatioBounds();\n        if (checkRatioInRange(newSeniorRatio, minSeniorRatio, maxSeniorRatio) == true) {\n\n            // highest possible score\n            return BIG_NUMBER;\n        }\n        // absDistance of ratio can never be zero\n        return rdiv(ONE, absDistance(newSeniorRatio,\n                safeDiv(safeAdd(minSeniorRatio, maxSeniorRatio), 2)));\n    }\n\n    // internal method to save new improvement score\n    function saveNewImprovement(uint impScoreRatio, uint impScoreReserve) internal {\n        bestRatioImprovement = impScoreRatio;\n        bestReserveImprovement = impScoreReserve;\n    }\n\n    // calculates improvement score for reserve and ratio pool constraints\n    function scoreImprovement(uint newSeniorRatio_, uint newReserve_) public view returns(int, uint, uint) {\n        uint impScoreRatio = scoreRatioImprovement(newSeniorRatio_);\n        uint impScoreReserve = scoreReserveImprovement(newReserve_);\n\n        // the highest priority has fixing the currentSeniorRatio\n        // if the ratio is improved, we can ignore reserve\n        if (impScoreRatio > bestRatioImprovement) {\n            // we found a new best\n            return (NEW_BEST, impScoreRatio, impScoreReserve);\n        }\n\n        // only if the submitted solution ratio score equals the current best ratio\n        // we determine if the submitted solution improves the reserve\n        if (impScoreRatio == bestRatioImprovement) {\n              if (impScoreReserve >= bestReserveImprovement) {\n                  return (NEW_BEST, impScoreRatio, impScoreReserve);\n              }\n        }\n        return (ERR_NOT_NEW_BEST, impScoreRatio, impScoreReserve);\n    }\n\n    // scores a solution in the submission period\n    // the scoring function is a linear function with high weights as coefficient to determine\n    // the priorities. (non-preemptive goal programming)\n    function scoreSolution(uint seniorRedeem, uint juniorRedeem,\n        uint juniorSupply, uint seniorSupply) public view returns(uint) {\n        // the default priority order\n        // 1. senior redeem\n        // 2. junior redeem\n        // 3. junior supply\n        // 4. senior supply\n        return safeAdd(safeAdd(safeMul(seniorRedeem, weightSeniorRedeem), safeMul(juniorRedeem, weightJuniorRedeem)),\n            safeAdd(safeMul(juniorSupply, weightJuniorSupply), safeMul(seniorSupply, weightSeniorSupply)));\n    }\n\n    // validates if a solution satisfy the core constraints\n    // returns: first constraint which is not satisfied or success\n    function validateCoreConstraints(uint currencyAvailable, uint currencyOut, uint seniorRedeem, uint juniorRedeem,\n        uint seniorSupply, uint juniorSupply) public view returns (int err) {\n        // constraint 1: currency available\n        if (currencyOut > currencyAvailable) {\n            // currencyAvailableConstraint => -1\n            return ERR_CURRENCY_AVAILABLE;\n        }\n\n        // constraint 2: max order\n        if (seniorSupply > order.seniorSupply ||\n        juniorSupply > order.juniorSupply ||\n        seniorRedeem > order.seniorRedeem ||\n            juniorRedeem > order.juniorRedeem) {\n            // maxOrderConstraint => -2\n            return ERR_MAX_ORDER;\n        }\n\n        // successful => 0\n        return SUCCESS;\n    }\n\n    // validates if a solution satisfies the ratio constraints\n    // returns: first constraint which is not satisfied or success\n    function validateRatioConstraints(uint assets, uint seniorAsset) public view returns(int) {\n        (uint minSeniorRatio, uint maxSeniorRatio) = assessor.seniorRatioBounds();\n\n        // constraint 4: min senior ratio constraint\n        if (seniorAsset < rmul(assets, minSeniorRatio)) {\n            // minSeniorRatioConstraint => -4\n            return ERR_MIN_SENIOR_RATIO;\n        }\n        // constraint 5: max senior ratio constraint\n        if (seniorAsset > rmul(assets, maxSeniorRatio)) {\n            // maxSeniorRatioConstraint => -5\n            return ERR_MAX_SENIOR_RATIO;\n        }\n        // successful => 0\n        return SUCCESS;\n    }\n\n    // validates if a solution satisfies the pool constraints\n    // returns: first constraint which is not satisfied or success\n    function validatePoolConstraints(uint reserve_, uint seniorAsset, uint nav_) public view returns (int err) {\n        // constraint 3: max reserve\n        if (reserve_ > assessor.maxReserve()) {\n            // maxReserveConstraint => -3\n            return ERR_MAX_RESERVE;\n        }\n\n        uint assets = safeAdd(nav_, reserve_);\n        return validateRatioConstraints(assets, seniorAsset);\n    }\n\n    // validates if a solution satisfies core and pool constraints\n    // returns: first constraint which is not satisfied or success\n    function validate(uint seniorRedeem, uint juniorRedeem,\n        uint seniorSupply, uint juniorSupply) public view returns (int) {\n        return validate(epochReserve, epochNAV, epochSeniorAsset,\n            OrderSummary({seniorRedeem: seniorRedeem,\n                juniorRedeem:juniorRedeem,\n                seniorSupply: seniorSupply,\n                juniorSupply: juniorSupply}));\n    }\n\n    function validate(uint reserve_, uint nav_, uint seniorAsset_, uint seniorRedeem, uint juniorRedeem,\n        uint seniorSupply, uint juniorSupply) public view returns (int) {\n        return validate(reserve_, nav_, seniorAsset_,\n            OrderSummary({seniorRedeem: seniorRedeem,\n            juniorRedeem: juniorRedeem,\n            seniorSupply: seniorSupply,\n            juniorSupply: juniorSupply}));\n    }\n\n    function validate(uint reserve_, uint nav_, uint seniorAsset_, OrderSummary memory trans) view internal returns (int) {\n        uint currencyAvailable = safeAdd(safeAdd(reserve_, trans.seniorSupply), trans.juniorSupply);\n        uint currencyOut = safeAdd(trans.seniorRedeem, trans.juniorRedeem);\n\n        int err = validateCoreConstraints(currencyAvailable, currencyOut, trans.seniorRedeem,\n            trans.juniorRedeem, trans.seniorSupply, trans.juniorSupply);\n\n        if(err != SUCCESS) {\n            return err;\n        }\n\n        uint newReserve = safeSub(currencyAvailable, currencyOut);\n        if(poolClosing == true) {\n            if(trans.seniorSupply == 0 && trans.juniorSupply == 0) {\n                return SUCCESS;\n            }\n            return ERR_POOL_CLOSING;\n\n        }\n        return validatePoolConstraints(newReserve, assessor.calcSeniorAssetValue(trans.seniorRedeem, trans.seniorSupply,\n            seniorAsset_, newReserve, nav_), nav_);\n    }\n\n    // public method to execute an epoch which required a submission period and the challenge period is over\n    function executeEpoch() public {\n        require(block.timestamp >= minChallengePeriodEnd && minChallengePeriodEnd != 0);\n\n        _executeEpoch(bestSubmission.seniorRedeem ,bestSubmission.juniorRedeem,\n            bestSubmission.seniorSupply, bestSubmission.juniorSupply);\n    }\n\n    // calculates the percentage of an order type which can be fulfilled for an epoch\n    function calcFulfillment(uint amount, uint totalOrder) public pure returns(uint percent) {\n        if(amount == 0 || totalOrder == 0) {\n            return 0;\n        }\n        return rdiv(amount, totalOrder);\n    }\n\n    // calculates the new reserve after a solution would be executed\n    function calcNewReserve(uint seniorRedeem, uint juniorRedeem,\n        uint seniorSupply, uint juniorSupply) public view returns(uint) {\n\n        return safeSub(safeAdd(safeAdd(epochReserve, seniorSupply), juniorSupply),\n            safeAdd(seniorRedeem, juniorRedeem));\n    }\n\n    // internal execute epoch communicates the order fulfillment of the best solution to the tranches\n    function _executeEpoch(uint seniorRedeem, uint juniorRedeem,\n        uint seniorSupply, uint juniorSupply) internal {\n\n        uint epochID = safeAdd(lastEpochExecuted, 1);\n        submissionPeriod = false;\n\n        // tranche epochUpdates triggers currency transfers from/to reserve\n        // an mint/burn tokens\n        seniorTranche.epochUpdate(epochID, calcFulfillment(seniorSupply, order.seniorSupply),\n            calcFulfillment(seniorRedeem, order.seniorRedeem),\n            epochSeniorTokenPrice.value,order.seniorSupply, order.seniorRedeem);\n\n        // assessor performs senior debt reBalancing according to new ratio\n        assessor.changeSeniorAsset(seniorSupply, seniorRedeem);\n\n        juniorTranche.epochUpdate(epochID, calcFulfillment(juniorSupply, order.juniorSupply),\n            calcFulfillment(juniorRedeem, order.juniorRedeem),\n            epochJuniorTokenPrice.value, order.juniorSupply, order.juniorRedeem);\n\n        // sends requested currency to senior tranche, if currency was not available before\n        seniorTranche.payoutRequestedCurrency();\n\n        uint newReserve = calcNewReserve(seniorRedeem, juniorRedeem\n        , seniorSupply, juniorSupply);\n\n        // reBalancing again because the reserve has updated after the junior epochUpdate\n        assessor.changeSeniorAsset(0, 0);\n        // the new reserve after this epoch can be used for new loans\n        assessor.changeBorrowAmountEpoch(newReserve);\n\n        // reset state for next epochs\n        lastEpochExecuted = epochID;\n        minChallengePeriodEnd = 0;\n        bestSubScore = 0;\n        gotFullValidSolution = false;\n        bestRatioImprovement = 0;\n        bestReserveImprovement = 0;\n    }\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Depend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIG_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_CURRENCY_AVAILABLE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_MAX_ORDER\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_MAX_RESERVE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_MAX_SENIOR_RATIO\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_MIN_SENIOR_RATIO\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_NOT_NEW_BEST\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_POOL_CLOSING\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEW_BEST\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"absDistance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assessor\",\"outputs\":[{\"internalType\":\"contract AssessorLike_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bestRatioImprovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bestReserveImprovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bestSubScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bestSubmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOrder\",\"type\":\"uint256\"}],\"name\":\"calcFulfillment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"}],\"name\":\"calcNewReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRatio\",\"type\":\"uint256\"}],\"name\":\"checkRatioInRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"epochExecuted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"contractName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"depend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochJuniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSeniorAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochSeniorTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gotFullValidSolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juniorTranche\",\"outputs\":[{\"internalType\":\"contract TrancheLike_3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochClosed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minChallengePeriodEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"order\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolClosing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSeniorRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newReserve_\",\"type\":\"uint256\"}],\"name\":\"scoreImprovement\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSeniorRatio\",\"type\":\"uint256\"}],\"name\":\"scoreRatioImprovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserve_\",\"type\":\"uint256\"}],\"name\":\"scoreReserveImprovement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"}],\"name\":\"scoreSolution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seniorTranche\",\"outputs\":[{\"internalType\":\"contract TrancheLike_3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"}],\"name\":\"submitSolution\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nav_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorAsset_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currencyOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorRedeem\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorSupply\",\"type\":\"uint256\"}],\"name\":\"validateCoreConstraints\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"err\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nav_\",\"type\":\"uint256\"}],\"name\":\"validatePoolConstraints\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"err\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorAsset\",\"type\":\"uint256\"}],\"name\":\"validateRatioConstraints\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightJuniorRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightJuniorSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightSeniorRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightSeniorSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EpochCoordinator", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000708", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}