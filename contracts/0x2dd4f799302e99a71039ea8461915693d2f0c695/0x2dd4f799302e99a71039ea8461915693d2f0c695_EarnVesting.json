{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 15\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/EarnVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract EarnVesting is Ownable {\\n    event Withdrawn(address indexed to, uint256 indexed slot, uint256 amount);\\n\\n    struct Vesting {\\n        /// @notice Total vesting amount (inc activation amount)\\n        uint256 vestingAmount;\\n        /// @notice Alread vested amount\\n        uint256 claimedAmount;\\n        /// @notice Activation amount - released fully after vesting start time\\n        uint256 activationAmount;\\n        /// @notice Vesting beginning time\\n        uint256 timestampStart;\\n        /// @notice Vesting ending time\\n        uint256 timestampEnd;\\n    }\\n\\n    /// @notice Admin address\\n    address public admin;\\n\\n    /// @notice Vesting Token\\n    IERC20 internal _token;\\n\\n    /// @notice List of vestings\\n    /// @dev address => index => Vesting\\n    mapping(address => mapping(uint256 => Vesting)) internal _vesting;\\n\\n    /// @notice Number of vestings for each account\\n    mapping(address => uint256) internal _slotsOf;\\n\\n    /// @notice Is Claiming Enabled\\n    bool public isEnabled;\\n\\n    constructor(IERC20 _tokenContractAddress, address _admin) {\\n        _token = _tokenContractAddress;\\n        admin = _admin;\\n    }\\n\\n    /**\\n     * @notice Enables claiming\\n     */\\n    function setStatus(bool newStatus) external onlyOwner {\\n        isEnabled = newStatus;\\n    }\\n\\n    /**\\n     * @notice Number of vestings for each account\\n     * @param _address Account\\n     */\\n    function slotsOf(address _address) external view returns (uint256) {\\n        return _slotsOf[_address];\\n    }\\n\\n    /**\\n     * @notice Returns vesting information\\n     * @param _address Account\\n     * @param _slot Slot index\\n     */\\n    function vestingInfo(\\n        address _address,\\n        uint256 _slot\\n    ) external view returns (Vesting memory) {\\n        return _vesting[_address][_slot];\\n    }\\n\\n    /**\\n     * @notice Returns vesting information\\n     * @param _address Account\\n     */\\n    function batchVestingInfo(\\n        address _address\\n    ) external view returns (Vesting[] memory) {\\n        Vesting[] memory vestings = new Vesting[](_slotsOf[_address]);\\n        for (uint256 i = 0; i < _slotsOf[_address]; i++) {\\n            Vesting memory v = _vesting[_address][i];\\n            vestings[i] = v;\\n        }\\n        return vestings;\\n    }\\n\\n    /**\\n     * @dev Internal function.\\n     * Calculates vested amount available to claim (at the moment of execution)\\n     */\\n    function _vestedAmount(\\n        Vesting memory vesting\\n    ) internal view returns (uint256) {\\n        if (vesting.vestingAmount == 0) {\\n            return 0;\\n        }\\n\\n        if (block.timestamp < vesting.timestampStart) {\\n            return 0;\\n        }\\n\\n        if (block.timestamp >= vesting.timestampEnd) {\\n            // in case of exceeding end time\\n            return vesting.vestingAmount - vesting.activationAmount;\\n        }\\n\\n        uint256 vestingAmount = vesting.vestingAmount -\\n            vesting.activationAmount;\\n        uint256 vestingPeriod = vesting.timestampEnd - vesting.timestampStart;\\n        uint256 timeSinceVestingStart = block.timestamp -\\n            vesting.timestampStart;\\n        uint256 unlockedAmount = (vestingAmount * timeSinceVestingStart) /\\n            vestingPeriod;\\n        return unlockedAmount;\\n    }\\n\\n    /**\\n     * @notice Returns amount available to claim\\n     * @param _address Owner account\\n     * @param _slot Vesting slot\\n     * @return amount available to withdraw\\n     */\\n    function available(\\n        address _address,\\n        uint256 _slot\\n    ) public view returns (uint256) {\\n        Vesting memory vesting = _vesting[_address][_slot];\\n        uint256 unlocked = vesting.activationAmount + _vestedAmount(vesting);\\n        return unlocked - vesting.claimedAmount;\\n    }\\n\\n    /**\\n     * @notice Returns amount available to claim for all slots\\n     * @param _address Owner account\\n     * @return amount available to withdraw\\n     */\\n    function batchAvailable(address _address) public view returns (uint256) {\\n        uint256 sum = 0;\\n        for (uint256 i = 0; i < _slotsOf[_address]; i++) {\\n            Vesting memory vesting = _vesting[_address][i];\\n            uint256 unlocked = vesting.activationAmount +\\n                _vestedAmount(vesting);\\n            sum += unlocked - vesting.claimedAmount;\\n        }\\n        return sum;\\n    }\\n\\n    /**\\n     * @notice Transfers vesting to another account\\n     * @param _to Recipient address\\n     * @param _slot Vesting slot\\n     */\\n    function transferVesting(address _to, uint256 _slot) external {\\n        Vesting memory vesting = _vesting[msg.sender][_slot];\\n        require(vesting.vestingAmount > 0, \\\"NoVestingFound\\\");\\n\\n        _vesting[msg.sender][_slot] = Vesting(0, 0, 0, 0, 0);\\n\\n        _vesting[_to][_slotsOf[_to]] = vesting;\\n        _slotsOf[_to] += 1;\\n    }\\n\\n    /**\\n     * @notice Adds vesting informations.\\n     * In case of linear vesting of 200 tokens and intial unlock of 50 tokens\\n     *      _amounts[i] should contain 200\\n     *      _initialUnlock[i] should contain 50\\n     * @param _addresses Addresses\\n     * @param _amounts Vesting amount (this value excludes inital unlock amount)\\n     * @param _timestampStart Start timestamps\\n     * @param _timestampEnd End timestamps\\n     * @param _initialUnlock Intially unlocked amounts\\n     */\\n    function addVestingEntries(\\n        address[] memory _addresses,\\n        uint256[] memory _amounts,\\n        uint256[] memory _timestampStart,\\n        uint256[] memory _timestampEnd,\\n        uint256[] memory _initialUnlock\\n    ) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        require(\\n            len == _amounts.length &&\\n                len == _timestampStart.length &&\\n                len == _timestampEnd.length &&\\n                len == _initialUnlock.length,\\n            \\\"ArrayLengthsMismatch\\\"\\n        );\\n\\n        uint256 tokensSum;\\n        for (uint256 i = 0; i < len; i++) {\\n            address account = _addresses[i];\\n\\n            // increase required amount to transfer\\n            tokensSum += _amounts[i];\\n\\n            require(\\n                _initialUnlock[i] <= _amounts[i],\\n                \\\"ActivationAmountCantBeGreaterThanFullAmount\\\"\\n            );\\n\\n            require(\\n                _timestampStart[i] < _timestampEnd[i],\\n                \\\"InvalidTimestamps\\\"\\n            );\\n\\n            Vesting memory vesting = Vesting(\\n                _amounts[i],\\n                0,\\n                _initialUnlock[i],\\n                _timestampStart[i],\\n                _timestampEnd[i]\\n            );\\n\\n            uint256 vestingNum = _slotsOf[account];\\n            _vesting[account][vestingNum] = vesting;\\n            _slotsOf[account]++;\\n        }\\n\\n        require(\\n            _token.balanceOf(msg.sender) >= tokensSum &&\\n                _token.allowance(msg.sender, address(this)) >= tokensSum,\\n            \\\"InsufficientBalanceOrAllowance\\\"\\n        );\\n\\n        _token.transferFrom(msg.sender, address(this), tokensSum);\\n    }\\n\\n    /**\\n     * @notice Withdraws available amount\\n     * @param to User address\\n     * @param _slot Vesting slot\\n     */\\n    function withdraw(address to, uint256 _slot) external {\\n        require(_withdraw(to, _slot), \\\"NothingToClaim\\\");\\n    }\\n\\n    /**\\n     * @notice Withdraws available amount\\n     * @param to User address\\n     * @param _slot Vesting slot\\n     */\\n    function _withdraw(address to, uint256 _slot) internal returns (bool) {\\n        require(isEnabled, \\\"ClaimingDisabled\\\");\\n\\n        Vesting storage vesting = _vesting[to][_slot];\\n\\n        uint256 toWithdraw = available(to, _slot);\\n\\n        // withdraw all available funds\\n        if (toWithdraw > 0) {\\n            vesting.claimedAmount += toWithdraw;\\n            _token.transfer(to, toWithdraw);\\n            emit Withdrawn(to, _slot, toWithdraw);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Withdraws available amounts of first five slots\\n     * @param to User address\\n     */\\n    function batchWithdraw(address to) external {\\n        bool success;\\n        for (uint256 i = 0; i < _slotsOf[to]; i++) {\\n            bool ret = _withdraw(to, i);\\n            success = ret || success;\\n        }\\n        require(success, \\\"NothingToClaim\\\");\\n    }\\n\\n    /**\\n     * @notice Withdraws unclaimed tokens from addresses to admin\\n     * @param from User addresses array\\n     * @param slot Vesting slot array\\n     */\\n    function adminBulkWithraw(\\n        address[] memory from,\\n        uint256[] memory slot\\n    ) external {\\n        require(msg.sender == admin, \\\"NotAdmin\\\");\\n        require(from.length == slot.length, \\\"InvalidInputLength\\\");\\n        uint256 totalToWithdraw = 0;\\n        for (uint256 i = 0; i < from.length; i++) {\\n            totalToWithdraw += _adminWithdraw(from[i], slot[i]);\\n        }\\n        require(totalToWithdraw > 0, \\\"NothingToWithdraw\\\");\\n        _token.transfer(msg.sender, totalToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Calculates total amount to withdraw and set claimed amount to vesting amount\\n     * @param from User address\\n     * @param slot Vesting slot\\n     * @return totalToWithdraw Total amount to withdraw\\n     */\\n    function _adminWithdraw(\\n        address from,\\n        uint256 slot\\n    ) internal returns (uint256) {\\n        Vesting storage vesting = _vesting[from][slot];\\n        uint256 totalToWithdraw = vesting.vestingAmount - vesting.claimedAmount;\\n\\n        _vesting[from][slot] = Vesting(\\n            vesting.vestingAmount,\\n            vesting.vestingAmount,\\n            vesting.activationAmount,\\n            vesting.timestampStart,\\n            vesting.timestampEnd\\n        );\\n\\n        return totalToWithdraw;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestampStart\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_timestampEnd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialUnlock\",\"type\":\"uint256[]\"}],\"name\":\"addVestingEntries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"slot\",\"type\":\"uint256[]\"}],\"name\":\"adminBulkWithraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"batchAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"batchVestingInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct EarnVesting.Vesting[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"slotsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"transferVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct EarnVesting.Vesting\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EarnVesting", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "15", "ConstructorArguments": "00000000000000000000000012ed0641242e4c6c220e3ca8f616e9d5470ac99a000000000000000000000000e1665b254051418e598cd08b2202000cf0a9392f", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}