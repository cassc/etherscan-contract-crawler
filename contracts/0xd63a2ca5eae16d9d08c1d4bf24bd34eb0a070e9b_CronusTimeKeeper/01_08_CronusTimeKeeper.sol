// SPDX-License-Identifier: MIT
pragma solidity ^0.8.15;

import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "../Messagers/interfaces/ITykheFortuneDistributor.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract CronusTimeKeeper is KeeperCompatibleInterface, Initializable {
    uint256 private keepersInterval;
    uint256 private lastTimeStamp;
    address public _owner;
    ITykheFortuneDistributor tykheFortuneDistributor;

    function initialize(address tykheAddress) public initializer {
        keepersInterval = 1 days;
        lastTimeStamp = block.timestamp;
        tykheFortuneDistributor = ITykheFortuneDistributor(tykheAddress);
    }

    // Modifier to verify the caller is the owner of the contract
    modifier onlyOwner() {
        require(msg.sender == _owner);
        _;
    }

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Transfers ownership of the contract to a new account ('newOwner').
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    function updateKeepersInterval(uint256 _keepersInterval)
        internal
        virtual
        onlyOwner
    {
        keepersInterval = _keepersInterval;
    }

    function updateTykheFortuneDistributor(address tykheAddress)
        internal
        virtual
        onlyOwner
    {
        tykheFortuneDistributor = ITykheFortuneDistributor(tykheAddress);
    }

    function checkUpkeep(
        bytes calldata /* checkData */
    )
        external
        view
        override
        returns (
            bool upkeepNeeded,
            bytes memory /* performData */
        )
    {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > keepersInterval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(
        bytes calldata /* performData */
    ) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > keepersInterval) {
            tykheFortuneDistributor.sendFortune();
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
}