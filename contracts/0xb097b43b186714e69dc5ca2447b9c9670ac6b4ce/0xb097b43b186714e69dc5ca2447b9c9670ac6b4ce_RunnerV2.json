{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/RunnerMainnet.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n//0x79a4bc5c74bB69Fbc85EF829e5E322D45EFE475c\r\n\r\n\r\n\r\ncontract RunnerV2 is Ownable{\r\n    IERC20 public token;\r\n    address public Manager;\r\n    uint256 public costPerPlay;\r\n    uint256 public timeframe = 60 * 60 * 3; // 3hours\r\n    uint8 internal burnRatio = 25 ; // 49 %\r\n    uint256 internal lastCall; // timestamp of last manager call\r\n    uint256 internal depositAmt; // deposit amt\r\n    bool private State = false; // state to control if joins allowed\r\n\r\n    struct RoundData{\r\n        uint256 rewardPool;\r\n        uint256 burnPool;\r\n    }\r\n\r\n    struct Rounds {\r\n        RoundData data;\r\n        address[] lastWinners;\r\n    }\r\n    \r\n    mapping(uint256 => Rounds) internal rounds;\r\n    mapping(address=>mapping(address => uint256)) internal users;\r\n    \r\n    modifier onlyManager(){\r\n        require(msg.sender == Manager, \"Not Authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _gameToken\r\n    ) Ownable(msg.sender){\r\n        token = IERC20(_gameToken);\r\n        Manager = msg.sender;\r\n        costPerPlay = 1000 * 10 ** 18;\r\n        depositAmt = costPerPlay;\r\n    }\r\n    // getters\r\n    /*\r\n    @param => roundId nonce;\r\n    Returns => roundData struct\r\n    */\r\n    function getRoundData() public view returns(RoundData memory){\r\n        return rounds[0].data;\r\n    }\r\n\r\n    /* \r\n    Returns => get user fungible balances \r\n    */\r\n    function getUserBalances(address user,address _token) public view returns(uint256){\r\n        return users[user][_token];\r\n    }\r\n    //transfer Manager\r\n    function transferManager(address new_) public onlyManager{\r\n        Manager = new_;\r\n    }\r\n    // returns the last distribution winner list\r\n\r\n    function getLastWinners() public view returns(address[] memory){\r\n        return rounds[0].lastWinners;\r\n    }\r\n    // returns deposit amount for play\r\n    function getDepositAmt() public view returns(uint256) {\r\n        return depositAmt;\r\n    }\r\n    \r\n    //Write functions\r\n\r\n    //start the game post deployment\r\n\r\n    function startGame() public onlyManager{\r\n        State = true;\r\n    }\r\n    // stop allowing joins\r\n    function stopGame() public onlyManager{\r\n        State = false;\r\n    }\r\n\r\n    // user enter into curr round\r\n    function startPlay() public payable returns(bool){\r\n        require(State == true ,\"manager must call startGame()\");\r\n        require(users[msg.sender][address(token)] >= costPerPlay,\"deposit first\");\r\n        users[msg.sender][address(token)] = users[msg.sender][address(token)] - costPerPlay ;\r\n        //uint256 cr = totalRounds;\r\n        uint256 bA = (costPerPlay * uint256(burnRatio) / 100);\r\n        rounds[0].data.rewardPool = rounds[0].data.rewardPool +( costPerPlay - bA);\r\n        rounds[0].data.burnPool = rounds[0].data.burnPool + bA;\r\n        return true;\r\n    }\r\n\r\n    function depositUserERC() public payable {\r\n        bool succ = token.transferFrom(msg.sender , address(this), depositAmt);\r\n        require(succ == true,\"deposit failed\");\r\n        users[msg.sender][address(token)] =users[msg.sender][address(token)] + depositAmt; \r\n    }\r\n\r\n    function withdrawUserERC() public payable {\r\n        uint256 amt = users[msg.sender][address(token)];\r\n        bool succ = token.transfer(msg.sender , amt);\r\n        require(succ == true,\"withdraw failed\");\r\n        users[msg.sender][address(token)] =users[msg.sender][address(token)] - amt; \r\n    }\r\n\r\n    // current winnerlist array -- unsafe now, be sure sum of amounts dont exceed rewardPool amounts\r\n    function selectWinnersAndDistribute(address[] calldata currWinnerList, uint256[] calldata amounts) public onlyManager returns(bool){\r\n        require(lastCall + timeframe <= block.timestamp,\"timeframe not completed\");\r\n        uint256 burnPool = rounds[0].data.burnPool; \r\n        //save winners\r\n        rounds[0].lastWinners = currWinnerList;\r\n        // distribute amounts\r\n        for(uint8 i =0 ; i < currWinnerList.length; i++) {\r\n            uint256 amt = amounts[i];\r\n            address x = currWinnerList[i];\r\n            rounds[0].data.rewardPool = rounds[0].data.rewardPool - amt;\r\n            token.transfer(x , amt);\r\n        }\r\n        // burn the burnPool\r\n        rounds[0].data.burnPool = 0; \r\n        token.transfer(address(0), burnPool);\r\n        lastCall = block.timestamp;\r\n        return true;\r\n    }\r\n\r\n    //manager functions for controlling contract funds\r\n    function withdrawTokens(address to , uint256 amount) public onlyManager {\r\n        require(State == false,\"needs game to be off\");\r\n        token.transfer(to, amount);\r\n    }\r\n\r\n    function withdrawEth(address to, uint256 amount) public onlyManager{\r\n        require(State == false,\"needs game to be off\");\r\n        payable(to).transfer(amount);\r\n    }\r\n    // Setters\r\n    function changeCost(uint256 _newCost) public onlyManager{\r\n        costPerPlay = _newCost;\r\n    }\r\n\r\n    function changeDepAmt(uint256 amount) public onlyManager{\r\n        depositAmt = amount;\r\n    }\r\n\r\n    function changeBurnPercent (uint8 percent) public onlyManager{\r\n        burnRatio = percent;\r\n    }\r\n\r\n    function changeGameToken(address _newtoken) public onlyManager{\r\n        token = IERC20(_newtoken);\r\n    }\r\n    \r\n    //change timeframe per round\r\n    function changeTimeframe(uint256 timeInSeconds) public onlyManager{\r\n        timeframe = timeInSeconds;\r\n    }\r\n\r\n    receive() external payable{}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"name\":\"changeBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"changeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeDepAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newtoken\",\"type\":\"address\"}],\"name\":\"changeGameToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInSeconds\",\"type\":\"uint256\"}],\"name\":\"changeTimeframe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerPlay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositUserERC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPool\",\"type\":\"uint256\"}],\"internalType\":\"struct RunnerV2.RoundData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"currWinnerList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"selectWinnersAndDistribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPlay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUserERC\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RunnerV2", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009609b540e5dedddb147abbf9812ade06b1e61b2c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47b3da8a6f97cf8802c1d81d0e3457fcf321a7226ef16a1441db658bad7af174"}