{"SourceCode": "//SPDX-License-Identifier:  MIT\r\n\r\npragma solidity 0.8.22;\r\n\r\nstruct SetConfigParam {\r\n    uint32 eid;\r\n    uint32 configType;\r\n    bytes config;\r\n}\r\n\r\ninterface IMessageLibManager {\r\n    struct Timeout {\r\n        address lib;\r\n        uint256 expiry;\r\n    }\r\n\r\n    event LibraryRegistered(address newLib);\r\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\r\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\r\n    event DefaultReceiveLibraryTimeoutSet(\r\n        uint32 eid,\r\n        address oldLib,\r\n        uint256 expiry\r\n    );\r\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\r\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\r\n    event ReceiveLibraryTimeoutSet(\r\n        address receiver,\r\n        uint32 eid,\r\n        address oldLib,\r\n        uint256 timeout\r\n    );\r\n\r\n    function registerLibrary(address _lib) external;\r\n\r\n    function isRegisteredLibrary(address _lib) external view returns (bool);\r\n\r\n    function getRegisteredLibraries() external view returns (address[] memory);\r\n\r\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\r\n\r\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\r\n\r\n    function setDefaultReceiveLibrary(\r\n        uint32 _eid,\r\n        address _newLib,\r\n        uint256 _timeout\r\n    ) external;\r\n\r\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\r\n\r\n    function setDefaultReceiveLibraryTimeout(\r\n        uint32 _eid,\r\n        address _lib,\r\n        uint256 _expiry\r\n    ) external;\r\n\r\n    function defaultReceiveLibraryTimeout(\r\n        uint32 _eid\r\n    ) external view returns (address lib, uint256 expiry);\r\n\r\n    function isSupportedEid(uint32 _eid) external view returns (bool);\r\n\r\n    function isValidReceiveLibrary(\r\n        address _receiver,\r\n        uint32 _eid,\r\n        address _lib\r\n    ) external view returns (bool);\r\n\r\n    /// ------------------- OApp interfaces -------------------\r\n    function setSendLibrary(\r\n        address _oapp,\r\n        uint32 _eid,\r\n        address _newLib\r\n    ) external;\r\n\r\n    function getSendLibrary(\r\n        address _sender,\r\n        uint32 _eid\r\n    ) external view returns (address lib);\r\n\r\n    function isDefaultSendLibrary(\r\n        address _sender,\r\n        uint32 _eid\r\n    ) external view returns (bool);\r\n\r\n    function setReceiveLibrary(\r\n        address _oapp,\r\n        uint32 _eid,\r\n        address _newLib,\r\n        uint256 _gracePeriod\r\n    ) external;\r\n\r\n    function getReceiveLibrary(\r\n        address _receiver,\r\n        uint32 _eid\r\n    ) external view returns (address lib, bool isDefault);\r\n\r\n    function setReceiveLibraryTimeout(\r\n        address _oapp,\r\n        uint32 _eid,\r\n        address _lib,\r\n        uint256 _gracePeriod\r\n    ) external;\r\n\r\n    function receiveLibraryTimeout(\r\n        address _receiver,\r\n        uint32 _eid\r\n    ) external view returns (address lib, uint256 expiry);\r\n\r\n    function setConfig(\r\n        address _oapp,\r\n        address _lib,\r\n        SetConfigParam[] calldata _params\r\n    ) external;\r\n\r\n    function getConfig(\r\n        address _oapp,\r\n        address _lib,\r\n        uint32 _eid,\r\n        uint32 _configType\r\n    ) external view returns (bytes memory config);\r\n}\r\n\r\ninterface IMessagingChannel {\r\n    event InboundNonceSkipped(\r\n        uint32 srcEid,\r\n        bytes32 sender,\r\n        address receiver,\r\n        uint64 nonce\r\n    );\r\n    event PacketNilified(\r\n        uint32 srcEid,\r\n        bytes32 sender,\r\n        address receiver,\r\n        uint64 nonce,\r\n        bytes32 payloadHash\r\n    );\r\n    event PacketBurnt(\r\n        uint32 srcEid,\r\n        bytes32 sender,\r\n        address receiver,\r\n        uint64 nonce,\r\n        bytes32 payloadHash\r\n    );\r\n\r\n    function eid() external view returns (uint32);\r\n\r\n    // this is an emergency function if a message cannot be verified for some reasons\r\n    // required to provide _nextNonce to avoid race condition\r\n    function skip(\r\n        address _oapp,\r\n        uint32 _srcEid,\r\n        bytes32 _sender,\r\n        uint64 _nonce\r\n    ) external;\r\n\r\n    function nilify(\r\n        address _oapp,\r\n        uint32 _srcEid,\r\n        bytes32 _sender,\r\n        uint64 _nonce,\r\n        bytes32 _payloadHash\r\n    ) external;\r\n\r\n    function burn(\r\n        address _oapp,\r\n        uint32 _srcEid,\r\n        bytes32 _sender,\r\n        uint64 _nonce,\r\n        bytes32 _payloadHash\r\n    ) external;\r\n\r\n    function nextGuid(\r\n        address _sender,\r\n        uint32 _dstEid,\r\n        bytes32 _receiver\r\n    ) external view returns (bytes32);\r\n\r\n    function inboundNonce(\r\n        address _receiver,\r\n        uint32 _srcEid,\r\n        bytes32 _sender\r\n    ) external view returns (uint64);\r\n\r\n    function outboundNonce(\r\n        address _sender,\r\n        uint32 _dstEid,\r\n        bytes32 _receiver\r\n    ) external view returns (uint64);\r\n\r\n    function inboundPayloadHash(\r\n        address _receiver,\r\n        uint32 _srcEid,\r\n        bytes32 _sender,\r\n        uint64 _nonce\r\n    ) external view returns (bytes32);\r\n\r\n    function lazyInboundNonce(\r\n        address _receiver,\r\n        uint32 _srcEid,\r\n        bytes32 _sender\r\n    ) external view returns (uint64);\r\n}\r\n\r\ninterface IMessagingComposer {\r\n    event ComposeSent(\r\n        address from,\r\n        address to,\r\n        bytes32 guid,\r\n        uint16 index,\r\n        bytes message\r\n    );\r\n    event ComposeDelivered(\r\n        address from,\r\n        address to,\r\n        bytes32 guid,\r\n        uint16 index\r\n    );\r\n    event LzComposeAlert(\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed executor,\r\n        bytes32 guid,\r\n        uint16 index,\r\n        uint256 gas,\r\n        uint256 value,\r\n        bytes message,\r\n        bytes extraData,\r\n        bytes reason\r\n    );\r\n\r\n    function composeQueue(\r\n        address _from,\r\n        address _to,\r\n        bytes32 _guid,\r\n        uint16 _index\r\n    ) external view returns (bytes32 messageHash);\r\n\r\n    function sendCompose(\r\n        address _to,\r\n        bytes32 _guid,\r\n        uint16 _index,\r\n        bytes calldata _message\r\n    ) external;\r\n\r\n    function lzCompose(\r\n        address _from,\r\n        address _to,\r\n        bytes32 _guid,\r\n        uint16 _index,\r\n        bytes calldata _message,\r\n        bytes calldata _extraData\r\n    ) external payable;\r\n}\r\n\r\ninterface IMessagingContext {\r\n    function isSendingMessage() external view returns (bool);\r\n\r\n    function getSendContext()\r\n        external\r\n        view\r\n        returns (uint32 dstEid, address sender);\r\n}\r\n\r\n\r\nstruct MessagingParams {\r\n    uint32 dstEid;\r\n    bytes32 receiver;\r\n    bytes message;\r\n    bytes options;\r\n    bool payInLzToken;\r\n}\r\n\r\nstruct MessagingReceipt {\r\n    bytes32 guid;\r\n    uint64 nonce;\r\n    MessagingFee fee;\r\n}\r\n\r\nstruct MessagingFee {\r\n    uint256 nativeFee;\r\n    uint256 lzTokenFee;\r\n}\r\n\r\nstruct Origin {\r\n    uint32 srcEid;\r\n    bytes32 sender;\r\n    uint64 nonce;\r\n}\r\n\r\ninterface ILayerZeroEndpointV2 is\r\n    IMessageLibManager,\r\n    IMessagingComposer,\r\n    IMessagingChannel,\r\n    IMessagingContext\r\n{\r\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\r\n\r\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\r\n\r\n    event PacketDelivered(Origin origin, address receiver);\r\n\r\n    event LzReceiveAlert(\r\n        address indexed receiver,\r\n        address indexed executor,\r\n        Origin origin,\r\n        bytes32 guid,\r\n        uint256 gas,\r\n        uint256 value,\r\n        bytes message,\r\n        bytes extraData,\r\n        bytes reason\r\n    );\r\n\r\n    event LzTokenSet(address token);\r\n\r\n    event DelegateSet(address sender, address delegate);\r\n\r\n    function quote(\r\n        MessagingParams calldata _params,\r\n        address _sender\r\n    ) external view returns (MessagingFee memory);\r\n\r\n    function send(\r\n        MessagingParams calldata _params,\r\n        address _refundAddress\r\n    ) external payable returns (MessagingReceipt memory);\r\n\r\n    function verify(\r\n        Origin calldata _origin,\r\n        address _receiver,\r\n        bytes32 _payloadHash\r\n    ) external;\r\n\r\n    function verifiable(\r\n        Origin calldata _origin,\r\n        address _receiver\r\n    ) external view returns (bool);\r\n\r\n    function initializable(\r\n        Origin calldata _origin,\r\n        address _receiver\r\n    ) external view returns (bool);\r\n\r\n    function lzReceive(\r\n        Origin calldata _origin,\r\n        address _receiver,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        bytes calldata _extraData\r\n    ) external payable;\r\n\r\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\r\n    function clear(\r\n        address _oapp,\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message\r\n    ) external;\r\n\r\n    function setLzToken(address _lzToken) external;\r\n\r\n    function lzToken() external view returns (address);\r\n\r\n    function nativeToken() external view returns (address);\r\n\r\n    function setDelegate(address _delegate) external;\r\n}\r\n\r\n\r\n/**\r\n * @title IOAppCore\r\n */\r\ninterface IOAppCore {\r\n    // Custom error messages\r\n    error OnlyPeer(uint32 eid, bytes32 sender);\r\n    error NoPeer(uint32 eid);\r\n    error InvalidEndpointCall();\r\n    error InvalidDelegate();\r\n\r\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\r\n    event PeerSet(uint32 eid, bytes32 peer);\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol contract.\r\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\r\n     */\r\n    function oAppVersion()\r\n        external\r\n        view\r\n        returns (uint64 senderVersion, uint64 receiverVersion);\r\n\r\n    /**\r\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\r\n     * @return iEndpoint The LayerZero endpoint as an interface.\r\n     */\r\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\r\n\r\n    /**\r\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\r\n     */\r\n    function peers(uint32 _eid) external view returns (bytes32 peer);\r\n\r\n    /**\r\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\r\n     */\r\n    function setPeer(uint32 _eid, bytes32 _peer) external;\r\n\r\n    /**\r\n     * @notice Sets the delegate address for the OApp Core.\r\n     * @param _delegate The address of the delegate to be set.\r\n     */\r\n    function setDelegate(address _delegate) external;\r\n}\r\n\r\n\r\ninterface ILayerZeroReceiver {\r\n    function allowInitializePath(\r\n        Origin calldata _origin\r\n    ) external view returns (bool);\r\n\r\n    function nextNonce(\r\n        uint32 _eid,\r\n        bytes32 _sender\r\n    ) external view returns (uint64);\r\n\r\n    function lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) external payable;\r\n}\r\n\r\n\r\ninterface IOAppReceiver is ILayerZeroReceiver {\r\n    /**\r\n     * @notice Retrieves the address responsible for 'sending' composeMsg's to the Endpoint.\r\n     * @return sender The address responsible for 'sending' composeMsg's to the Endpoint.\r\n     *\r\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\r\n     * @dev The default sender IS the OApp implementer.\r\n     */\r\n    function composeMsgSender() external view returns (address sender);\r\n}\r\n\r\n\r\n/**\r\n * @dev Struct representing enforced option parameters.\r\n */\r\nstruct EnforcedOptionParam {\r\n    uint32 eid; // Endpoint ID\r\n    uint16 msgType; // Message Type\r\n    bytes options; // Additional options\r\n}\r\n\r\n/**\r\n * @title IOAppOptionsType3\r\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\r\n */\r\ninterface IOAppOptionsType3 {\r\n    // Custom error message for invalid options\r\n    error InvalidOptions(bytes options);\r\n\r\n    // Event emitted when enforced options are set\r\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\r\n\r\n    /**\r\n     * @notice Sets enforced options for specific endpoint and message type combinations.\r\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\r\n     */\r\n    function setEnforcedOptions(\r\n        EnforcedOptionParam[] calldata _enforcedOptions\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Combines options for a given endpoint and message type.\r\n     * @param _eid The endpoint ID.\r\n     * @param _msgType The OApp message type.\r\n     * @param _extraOptions Additional options passed by the caller.\r\n     * @return options The combination of caller specified options AND enforced options.\r\n     */\r\n    function combineOptions(\r\n        uint32 _eid,\r\n        uint16 _msgType,\r\n        bytes calldata _extraOptions\r\n    ) external view returns (bytes memory options);\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title OAppOptionsType3\r\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\r\n */\r\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\r\n    uint16 internal constant OPTION_TYPE_3 = 3;\r\n\r\n    // @dev The \"msgType\" should be defined in the child contract.\r\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption))\r\n        public enforcedOptions;\r\n\r\n    /**\r\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\r\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\r\n     *\r\n     * @dev Only the owner/admin of the OApp can call this function.\r\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\r\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\r\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\r\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\r\n     */\r\n    function setEnforcedOptions(\r\n        EnforcedOptionParam[] calldata _enforcedOptions\r\n    ) public virtual onlyOwner {\r\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\r\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\r\n            _assertOptionsType3(_enforcedOptions[i].options);\r\n            enforcedOptions[_enforcedOptions[i].eid][\r\n                _enforcedOptions[i].msgType\r\n            ] = _enforcedOptions[i].options;\r\n        }\r\n\r\n        emit EnforcedOptionSet(_enforcedOptions);\r\n    }\r\n\r\n    /**\r\n     * @notice Combines options for a given endpoint and message type.\r\n     * @param _eid The endpoint ID.\r\n     * @param _msgType The OAPP message type.\r\n     * @param _extraOptions Additional options passed by the caller.\r\n     * @return options The combination of caller specified options AND enforced options.\r\n     *\r\n     * @dev If there is an enforced lzReceive option:\r\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\r\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\r\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\r\n     */\r\n    function combineOptions(\r\n        uint32 _eid,\r\n        uint16 _msgType,\r\n        bytes calldata _extraOptions\r\n    ) public view virtual returns (bytes memory) {\r\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\r\n\r\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\r\n        if (enforced.length == 0) return _extraOptions;\r\n\r\n        // No caller options, return enforced\r\n        if (_extraOptions.length == 0) return enforced;\r\n\r\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\r\n        if (_extraOptions.length >= 2) {\r\n            _assertOptionsType3(_extraOptions);\r\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\r\n            return bytes.concat(enforced, _extraOptions[2:]);\r\n        }\r\n\r\n        // No valid set of options was found.\r\n        revert InvalidOptions(_extraOptions);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to assert that options are of type 3.\r\n     * @param _options The options to be checked.\r\n     */\r\n    function _assertOptionsType3(\r\n        bytes calldata _options\r\n    ) internal pure virtual {\r\n        uint16 optionsType = uint16(bytes2(_options[0:2]));\r\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\r\n    }\r\n}\r\n\r\n/**\r\n * @title OAppCore\r\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\r\n */\r\nabstract contract OAppCore is IOAppCore, Ownable {\r\n    // The LayerZero endpoint associated with the given OApp\r\n    ILayerZeroEndpointV2 public immutable endpoint;\r\n\r\n    // Mapping to store peers associated with corresponding endpoints\r\n    mapping(uint32 eid => bytes32 peer) public peers;\r\n\r\n    /**\r\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\r\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\r\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\r\n     *\r\n     * @dev The delegate typically should be set as the owner of the contract.\r\n     */\r\n    constructor(address _endpoint, address _delegate) {\r\n        endpoint = ILayerZeroEndpointV2(_endpoint);\r\n\r\n        if (_delegate == address(0)) revert InvalidDelegate();\r\n        endpoint.setDelegate(_delegate);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\r\n     *\r\n     * @dev Only the owner/admin of the OApp can call this function.\r\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\r\n     * @dev Set this to bytes32(0) to remove the peer address.\r\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\r\n     */\r\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\r\n        peers[_eid] = _peer;\r\n        emit PeerSet(_eid, _peer);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\r\n     * ie. the peer is set to bytes32(0).\r\n     * @param _eid The endpoint ID.\r\n     * @return peer The address of the peer associated with the specified endpoint.\r\n     */\r\n    function _getPeerOrRevert(\r\n        uint32 _eid\r\n    ) internal view virtual returns (bytes32) {\r\n        bytes32 peer = peers[_eid];\r\n        if (peer == bytes32(0)) revert NoPeer(_eid);\r\n        return peer;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the delegate address for the OApp.\r\n     * @param _delegate The address of the delegate to be set.\r\n     *\r\n     * @dev Only the owner/admin of the OApp can call this function.\r\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\r\n     */\r\n    function setDelegate(address _delegate) public onlyOwner {\r\n        endpoint.setDelegate(_delegate);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title OAppReceiver\r\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\r\n */\r\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\r\n    // Custom error message for when the caller is not the registered endpoint/\r\n    error OnlyEndpoint(address addr);\r\n\r\n    // @dev The version of the OAppReceiver implementation.\r\n    // @dev Version is bumped when changes are made to this contract.\r\n    uint64 internal constant RECEIVER_VERSION = 1;\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol contract.\r\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\r\n     *\r\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\r\n     * ie. this is a RECEIVE only OApp.\r\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\r\n     */\r\n    function oAppVersion()\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint64 senderVersion, uint64 receiverVersion)\r\n    {\r\n        return (0, RECEIVER_VERSION);\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the address responsible for 'sending' composeMsg's to the Endpoint.\r\n     * @return sender The address responsible for 'sending' composeMsg's to the Endpoint.\r\n     *\r\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\r\n     * @dev The default sender IS the OApp implementer.\r\n     */\r\n    function composeMsgSender() public view virtual returns (address sender) {\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the path initialization is allowed based on the provided origin.\r\n     * @param origin The origin information containing the source endpoint and sender address.\r\n     * @return Whether the path has been initialized.\r\n     *\r\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\r\n     * @dev This defaults to assuming if a peer has been set, its initialized.\r\n     * Can be overridden by the OApp if there is other logic to determine this.\r\n     */\r\n    function allowInitializePath(\r\n        Origin calldata origin\r\n    ) public view virtual returns (bool) {\r\n        return peers[origin.srcEid] == origin.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\r\n     * @dev _srcEid The source endpoint ID.\r\n     * @dev _sender The sender address.\r\n     * @return nonce The next nonce.\r\n     *\r\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\r\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\r\n     * @dev This is also enforced by the OApp.\r\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\r\n     */\r\n    function nextNonce(\r\n        uint32 /*_srcEid*/,\r\n        bytes32 /*_sender*/\r\n    ) public view virtual returns (uint64 nonce) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Entry point for receiving messages or packets from the endpoint.\r\n     * @param _origin The origin information containing the source endpoint and sender address.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address on the src chain.\r\n     *  - nonce: The nonce of the message.\r\n     * @param _guid The unique identifier for the received LayerZero message.\r\n     * @param _message The payload of the received message.\r\n     * @param _executor The address of the executor for the received message.\r\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\r\n     *\r\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\r\n     */\r\n    function lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) public payable virtual {\r\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\r\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\r\n\r\n        // Ensure that the sender matches the expected peer for the source endpoint.\r\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender)\r\n            revert OnlyPeer(_origin.srcEid, _origin.sender);\r\n\r\n        // Call the internal OApp implementation of lzReceive.\r\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\r\n     */\r\n    function _lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) internal virtual;\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                oldAllowance + value\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    oldAllowance - value\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(\r\n            token.approve.selector,\r\n            spender,\r\n            value\r\n        );\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(token.approve.selector, spender, 0)\r\n            );\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(\r\n            nonceAfter == nonceBefore + 1,\r\n            \"SafeERC20: permit did not succeed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        require(\r\n            returndata.length == 0 || abi.decode(returndata, (bool)),\r\n            \"SafeERC20: ERC20 operation did not succeed\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(\r\n        IERC20 token,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success &&\r\n            (returndata.length == 0 || abi.decode(returndata, (bool))) &&\r\n            Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n/**\r\n * @title OAppSender\r\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\r\n */\r\nabstract contract OAppSender is OAppCore {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Custom error messages\r\n    error NotEnoughNative(uint256 msgValue);\r\n    error LzTokenUnavailable();\r\n\r\n    // @dev The version of the OAppSender implementation.\r\n    // @dev Version is bumped when changes are made to this contract.\r\n    uint64 internal constant SENDER_VERSION = 1;\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol contract.\r\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\r\n     *\r\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\r\n     * ie. this is a SEND only OApp.\r\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\r\n     */\r\n    function oAppVersion()\r\n        public\r\n        view\r\n        virtual\r\n        returns (uint64 senderVersion, uint64 receiverVersion)\r\n    {\r\n        return (SENDER_VERSION, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\r\n     * @param _dstEid The destination endpoint ID.\r\n     * @param _message The message payload.\r\n     * @param _options Additional options for the message.\r\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\r\n     * @return fee The calculated MessagingFee for the message.\r\n     *      - nativeFee: The native fee for the message.\r\n     *      - lzTokenFee: The LZ token fee for the message.\r\n     */\r\n    function _quote(\r\n        uint32 _dstEid,\r\n        bytes memory _message,\r\n        bytes memory _options,\r\n        bool _payInLzToken\r\n    ) internal view virtual returns (MessagingFee memory fee) {\r\n        return\r\n            endpoint.quote(\r\n                MessagingParams(\r\n                    _dstEid,\r\n                    _getPeerOrRevert(_dstEid),\r\n                    _message,\r\n                    _options,\r\n                    _payInLzToken\r\n                ),\r\n                address(this)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\r\n     * @param _dstEid The destination endpoint ID.\r\n     * @param _message The message payload.\r\n     * @param _options Additional options for the message.\r\n     * @param _fee The calculated LayerZero fee for the message.\r\n     *      - nativeFee: The native fee.\r\n     *      - lzTokenFee: The lzToken fee.\r\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\r\n     * @return receipt The receipt for the sent message.\r\n     *      - guid: The unique identifier for the sent message.\r\n     *      - nonce: The nonce of the sent message.\r\n     *      - fee: The LayerZero fee incurred for the message.\r\n     */\r\n    function _lzSend(\r\n        uint32 _dstEid,\r\n        bytes memory _message,\r\n        bytes memory _options,\r\n        MessagingFee memory _fee,\r\n        address _refundAddress\r\n    ) internal virtual returns (MessagingReceipt memory receipt) {\r\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\r\n        uint256 messageValue = _payNative(_fee.nativeFee);\r\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\r\n\r\n        return\r\n            // solhint-disable-next-line check-send-result\r\n            endpoint.send{value: messageValue}(\r\n                MessagingParams(\r\n                    _dstEid,\r\n                    _getPeerOrRevert(_dstEid),\r\n                    _message,\r\n                    _options,\r\n                    _fee.lzTokenFee > 0\r\n                ),\r\n                _refundAddress\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to pay the native fee associated with the message.\r\n     * @param _nativeFee The native fee to be paid.\r\n     * @return nativeFee The amount of native currency paid.\r\n     *\r\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\r\n     * this will need to be overridden because msg.value would contain multiple lzFees.\r\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\r\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\r\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\r\n     */\r\n    function _payNative(\r\n        uint256 _nativeFee\r\n    ) internal virtual returns (uint256 nativeFee) {\r\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\r\n        return _nativeFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to pay the LZ token fee associated with the message.\r\n     * @param _lzTokenFee The LZ token fee to be paid.\r\n     *\r\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\r\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\r\n     */\r\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\r\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\r\n        address lzToken = endpoint.lzToken();\r\n        if (lzToken == address(0)) revert LzTokenUnavailable();\r\n\r\n        // Pay LZ token fee by sending tokens to the endpoint.\r\n        IERC20(lzToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(endpoint),\r\n            _lzTokenFee\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\r\n// solhint-disable-next-line no-unused-import\r\n\r\n// @dev Import the 'Origin' so it's exposed to OApp implementers\r\n// solhint-disable-next-line no-unused-import\r\n\r\n/**\r\n * @title OApp\r\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\r\n */\r\nabstract contract OApp is OAppSender, OAppReceiver {\r\n    /**\r\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\r\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\r\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\r\n     */\r\n    constructor(\r\n        address _endpoint,\r\n        address _delegate\r\n    ) OAppCore(_endpoint, _delegate) {}\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol implementation.\r\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\r\n     */\r\n    function oAppVersion()\r\n        public\r\n        pure\r\n        virtual\r\n        override(OAppSender, OAppReceiver)\r\n        returns (uint64 senderVersion, uint64 receiverVersion)\r\n    {\r\n        return (SENDER_VERSION, RECEIVER_VERSION);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Struct representing token parameters for the OFT send() operation.\r\n */\r\nstruct SendParam {\r\n    uint32 dstEid; // Destination endpoint ID.\r\n    bytes32 to; // Recipient address.\r\n    uint256 amountLD; // Amount to send in local decimals.\r\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\r\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\r\n    bytes composeMsg; // The composed message for the send() operation.\r\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\r\n}\r\n\r\n/**\r\n * @dev Struct representing OFT limit information.\r\n * @dev These amounts can change dynamically and are up the the specific oft implementation.\r\n */\r\nstruct OFTLimit {\r\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\r\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\r\n}\r\n\r\n/**\r\n * @dev Struct representing OFT receipt information.\r\n */\r\nstruct OFTReceipt {\r\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\r\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\r\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\r\n}\r\n\r\n/**\r\n * @dev Struct representing OFT fee details.\r\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\r\n */\r\nstruct OFTFeeDetail {\r\n    int256 feeAmountLD; // Amount of the fee in local decimals.\r\n    string description; // Description of the fee.\r\n}\r\n\r\n/**\r\n * @title IOFT\r\n * @dev Interface for the OftChain (OFT) token.\r\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\r\n * @dev This specific interface ID is '0x02e49c2c'.\r\n */\r\ninterface IOFT {\r\n    // Custom error messages\r\n    error InvalidLocalDecimals();\r\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\r\n\r\n    // Events\r\n    event OFTSent(\r\n        bytes32 indexed guid, // GUID of the OFT message.\r\n        uint32 dstEid, // Destination Endpoint ID.\r\n        address indexed fromAddress, // Address of the sender on the src chain.\r\n        uint256 amountLD // Amount of tokens sent in local decimals.\r\n    );\r\n    event OFTReceived(\r\n        bytes32 indexed guid, // GUID of the OFT message.\r\n        uint32 srcEid, // Source Endpoint ID.\r\n        address indexed toAddress, // Address of the recipient on the dst chain.\r\n        uint256 amountLD // Amount of tokens received in local decimals.\r\n    );\r\n\r\n    /**\r\n     * @notice Retrieves interfaceID and the version of the OFT.\r\n     * @return interfaceId The interface ID.\r\n     * @return version The version.\r\n     *\r\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\r\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\r\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\r\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\r\n     */\r\n    function oftVersion()\r\n        external\r\n        view\r\n        returns (bytes4 interfaceId, uint64 version);\r\n\r\n    /**\r\n     * @notice Retrieves the address of the token associated with the OFT.\r\n     * @return token The address of the ERC20 token implementation.\r\n     */\r\n    function token() external view returns (address);\r\n\r\n    /**\r\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\r\n     * @return requiresApproval Needs approval of the underlying token implementation.\r\n     *\r\n     * @dev Allows things like wallet implementers to determine integration requirements,\r\n     * without understanding the underlying token implementation.\r\n     */\r\n    function approvalRequired() external view returns (bool);\r\n\r\n    /**\r\n     * @notice Retrieves the shared decimals of the OFT.\r\n     * @return sharedDecimals The shared decimals of the OFT.\r\n     */\r\n    function sharedDecimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @notice Provides a quote for OFT-related operations.\r\n     * @param _sendParam The parameters for the send operation.\r\n     * @return limit The OFT limit information.\r\n     * @return oftFeeDetails The details of OFT fees.\r\n     * @return receipt The OFT receipt information.\r\n     */\r\n    function quoteOFT(\r\n        SendParam calldata _sendParam\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            OFTLimit memory,\r\n            OFTFeeDetail[] memory oftFeeDetails,\r\n            OFTReceipt memory\r\n        );\r\n\r\n    /**\r\n     * @notice Provides a quote for the send() operation.\r\n     * @param _sendParam The parameters for the send() operation.\r\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\r\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\r\n     *\r\n     * @dev MessagingFee: LayerZero msg fee\r\n     *  - nativeFee: The native fee.\r\n     *  - lzTokenFee: The lzToken fee.\r\n     */\r\n    function quoteSend(\r\n        SendParam calldata _sendParam,\r\n        bool _payInLzToken\r\n    ) external view returns (MessagingFee memory);\r\n\r\n    /**\r\n     * @notice Executes the send() operation.\r\n     * @param _sendParam The parameters for the send operation.\r\n     * @param _fee The fee information supplied by the caller.\r\n     *      - nativeFee: The native fee.\r\n     *      - lzTokenFee: The lzToken fee.\r\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\r\n     * @return receipt The LayerZero messaging receipt from the send() operation.\r\n     * @return oftReceipt The OFT receipt information.\r\n     *\r\n     * @dev MessagingReceipt: LayerZero msg receipt\r\n     *  - guid: The unique identifier for the sent message.\r\n     *  - nonce: The nonce of the sent message.\r\n     *  - fee: The LayerZero fee incurred for the message.\r\n     */\r\n    function send(\r\n        SendParam calldata _sendParam,\r\n        MessagingFee calldata _fee,\r\n        address _refundAddress\r\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\r\n}\r\n\r\n\r\n/**\r\n * @title IOAppMsgInspector\r\n * @dev Interface for the OApp Message Inspector, allowing examination of message and options contents.\r\n */\r\ninterface IOAppMsgInspector {\r\n    // Custom error message for inspection failure\r\n    error InspectionFailed(bytes message, bytes options);\r\n\r\n    /**\r\n     * @notice Allows the inspector to examine LayerZero message contents and optionally throw a revert if invalid.\r\n     * @param _message The message payload to be inspected.\r\n     * @param _options Additional options or parameters for inspection.\r\n     * @return valid A boolean indicating whether the inspection passed (true) or failed (false).\r\n     *\r\n     * @dev Optionally done as a revert, OR use the boolean provided to handle the failure.\r\n     */\r\n    function inspect(\r\n        bytes calldata _message,\r\n        bytes calldata _options\r\n    ) external view returns (bool valid);\r\n}\r\n\r\n\r\nlibrary OFTComposeMsgCodec {\r\n    // Offset constants for decoding composed messages\r\n    uint8 private constant NONCE_OFFSET = 8;\r\n    uint8 private constant SRC_EID_OFFSET = 12;\r\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\r\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\r\n\r\n    /**\r\n     * @dev Encodes a OFT composed message.\r\n     * @param _nonce The nonce value.\r\n     * @param _srcEid The source endpoint ID.\r\n     * @param _amountLD The amount in local decimals.\r\n     * @param _composeMsg The composed message.\r\n     * @return _msg The encoded Composed message.\r\n     */\r\n    function encode(\r\n        uint64 _nonce,\r\n        uint32 _srcEid,\r\n        uint256 _amountLD,\r\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\r\n    ) internal pure returns (bytes memory _msg) {\r\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the nonce from the composed message.\r\n     * @param _msg The message.\r\n     * @return The nonce value.\r\n     */\r\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\r\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the source endpoint ID from the composed message.\r\n     * @param _msg The message.\r\n     * @return The source endpoint ID.\r\n     */\r\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\r\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the amount in local decimals from the composed message.\r\n     * @param _msg The message.\r\n     * @return The amount in local decimals.\r\n     */\r\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\r\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the composeFrom value from the composed message.\r\n     * @param _msg The message.\r\n     * @return The composeFrom value.\r\n     */\r\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\r\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the composed message.\r\n     * @param _msg The message.\r\n     * @return The composed message.\r\n     */\r\n    function composeMsg(\r\n        bytes calldata _msg\r\n    ) internal pure returns (bytes memory) {\r\n        return _msg[COMPOSE_FROM_OFFSET:];\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an address to bytes32.\r\n     * @param _addr The address to convert.\r\n     * @return The bytes32 representation of the address.\r\n     */\r\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(_addr)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts bytes32 to an address.\r\n     * @param _b The bytes32 value to convert.\r\n     * @return The address representation of bytes32.\r\n     */\r\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\r\n        return address(uint160(uint256(_b)));\r\n    }\r\n}\r\n\r\n\r\nlibrary OFTMsgCodec {\r\n    // Offset constants for encoding and decoding OFT messages\r\n    uint8 private constant SEND_TO_OFFSET = 32;\r\n    uint8 private constant SEND_AMOUNT_SD_OFFSET = 40;\r\n\r\n    /**\r\n     * @dev Encodes an OFT LayerZero message.\r\n     * @param _sendTo The recipient address.\r\n     * @param _amountShared The amount in shared decimals.\r\n     * @param _composeMsg The composed message.\r\n     * @return _msg The encoded message.\r\n     * @return hasCompose A boolean indicating whether the message has a composed payload.\r\n     */\r\n    function encode(\r\n        bytes32 _sendTo,\r\n        uint64 _amountShared,\r\n        bytes memory _composeMsg\r\n    ) internal view returns (bytes memory _msg, bool hasCompose) {\r\n        hasCompose = _composeMsg.length > 0;\r\n        // @dev Remote chains will want to know the composed function caller ie. msg.sender on the src.\r\n        _msg = hasCompose\r\n            ? abi.encodePacked(\r\n                _sendTo,\r\n                _amountShared,\r\n                addressToBytes32(msg.sender),\r\n                _composeMsg\r\n            )\r\n            : abi.encodePacked(_sendTo, _amountShared);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the OFT message is composed.\r\n     * @param _msg The OFT message.\r\n     * @return A boolean indicating whether the message is composed.\r\n     */\r\n    function isComposed(bytes calldata _msg) internal pure returns (bool) {\r\n        return _msg.length > SEND_AMOUNT_SD_OFFSET;\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the recipient address from the OFT message.\r\n     * @param _msg The OFT message.\r\n     * @return The recipient address.\r\n     */\r\n    function sendTo(bytes calldata _msg) internal pure returns (bytes32) {\r\n        return bytes32(_msg[:SEND_TO_OFFSET]);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the amount in shared decimals from the OFT message.\r\n     * @param _msg The OFT message.\r\n     * @return The amount in shared decimals.\r\n     */\r\n    function amountSD(bytes calldata _msg) internal pure returns (uint64) {\r\n        return uint64(bytes8(_msg[SEND_TO_OFFSET:SEND_AMOUNT_SD_OFFSET]));\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the composed message from the OFT message.\r\n     * @param _msg The OFT message.\r\n     * @return The composed message.\r\n     */\r\n    function composeMsg(\r\n        bytes calldata _msg\r\n    ) internal pure returns (bytes memory) {\r\n        return _msg[SEND_AMOUNT_SD_OFFSET:];\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an address to bytes32.\r\n     * @param _addr The address to convert.\r\n     * @return The bytes32 representation of the address.\r\n     */\r\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(_addr)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts bytes32 to an address.\r\n     * @param _b The bytes32 value to convert.\r\n     * @return The address representation of bytes32.\r\n     */\r\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\r\n        return address(uint160(uint256(_b)));\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.9.5\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\nenum MessageLibType {\r\n    Send,\r\n    Receive,\r\n    SendAndReceive\r\n}\r\n\r\ninterface IMessageLib is IERC165 {\r\n    function setConfig(\r\n        address _oapp,\r\n        SetConfigParam[] calldata _config\r\n    ) external;\r\n\r\n    function getConfig(\r\n        uint32 _eid,\r\n        address _oapp,\r\n        uint32 _configType\r\n    ) external view returns (bytes memory config);\r\n\r\n    function isSupportedEid(uint32 _eid) external view returns (bool);\r\n\r\n    // message libs of same major version are compatible\r\n    function version()\r\n        external\r\n        view\r\n        returns (uint64 major, uint8 minor, uint8 endpointVersion);\r\n\r\n    function messageLibType() external view returns (MessageLibType);\r\n}\r\n\r\n\r\nstruct Packet {\r\n    uint64 nonce;\r\n    uint32 srcEid;\r\n    address sender;\r\n    uint32 dstEid;\r\n    bytes32 receiver;\r\n    bytes32 guid;\r\n    bytes message;\r\n}\r\n\r\ninterface ISendLib is IMessageLib {\r\n    function send(\r\n        Packet calldata _packet,\r\n        bytes calldata _options,\r\n        bool _payInLzToken\r\n    ) external returns (MessagingFee memory, bytes memory encodedPacket);\r\n\r\n    function quote(\r\n        Packet calldata _packet,\r\n        bytes calldata _options,\r\n        bool _payInLzToken\r\n    ) external view returns (MessagingFee memory);\r\n\r\n    function setTreasury(address _treasury) external;\r\n\r\n    function withdrawFee(address _to, uint256 _amount) external;\r\n\r\n    function withdrawLzTokenFee(\r\n        address _lzToken,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n}\r\n\r\n// File @layerzerolabs/lz-evm-protocol-v2/contracts/libs/AddressCast.sol@v2.0.25\r\n\r\n// Original license: SPDX_License_Identifier: LZBL-1.2\r\n\r\npragma solidity ^0.8.20;\r\n\r\nlibrary AddressCast {\r\n    error AddressCast_InvalidSizeForAddress();\r\n    error AddressCast_InvalidAddress();\r\n\r\n    function toBytes32(\r\n        bytes calldata _addressBytes\r\n    ) internal pure returns (bytes32 result) {\r\n        if (_addressBytes.length > 32) revert AddressCast_InvalidAddress();\r\n        result = bytes32(_addressBytes);\r\n        unchecked {\r\n            uint256 offset = 32 - _addressBytes.length;\r\n            result = result >> (offset * 8);\r\n        }\r\n    }\r\n\r\n    function toBytes32(\r\n        address _address\r\n    ) internal pure returns (bytes32 result) {\r\n        result = bytes32(uint256(uint160(_address)));\r\n    }\r\n\r\n    function toBytes(\r\n        bytes32 _addressBytes32,\r\n        uint256 _size\r\n    ) internal pure returns (bytes memory result) {\r\n        if (_size == 0 || _size > 32)\r\n            revert AddressCast_InvalidSizeForAddress();\r\n        result = new bytes(_size);\r\n        unchecked {\r\n            uint256 offset = 256 - _size * 8;\r\n            assembly {\r\n                mstore(add(result, 32), shl(offset, _addressBytes32))\r\n            }\r\n        }\r\n    }\r\n\r\n    function toAddress(\r\n        bytes32 _addressBytes32\r\n    ) internal pure returns (address result) {\r\n        result = address(uint160(uint256(_addressBytes32)));\r\n    }\r\n\r\n    function toAddress(\r\n        bytes calldata _addressBytes\r\n    ) internal pure returns (address result) {\r\n        if (_addressBytes.length != 20) revert AddressCast_InvalidAddress();\r\n        result = address(bytes20(_addressBytes));\r\n    }\r\n}\r\n\r\n// File @layerzerolabs/lz-evm-protocol-v2/contracts/messagelib/libs/PacketV1Codec.sol@v2.0.25\r\n\r\n// Original license: SPDX_License_Identifier: LZBL-1.2\r\n\r\npragma solidity ^0.8.20;\r\n\r\nlibrary PacketV1Codec {\r\n    using AddressCast for address;\r\n    using AddressCast for bytes32;\r\n\r\n    uint8 internal constant PACKET_VERSION = 1;\r\n\r\n    // header (version + nonce + path)\r\n    // version\r\n    uint256 private constant PACKET_VERSION_OFFSET = 0;\r\n    //    nonce\r\n    uint256 private constant NONCE_OFFSET = 1;\r\n    //    path\r\n    uint256 private constant SRC_EID_OFFSET = 9;\r\n    uint256 private constant SENDER_OFFSET = 13;\r\n    uint256 private constant DST_EID_OFFSET = 45;\r\n    uint256 private constant RECEIVER_OFFSET = 49;\r\n    // payload (guid + message)\r\n    uint256 private constant GUID_OFFSET = 81; // keccak256(nonce + path)\r\n    uint256 private constant MESSAGE_OFFSET = 113;\r\n\r\n    function encode(\r\n        Packet memory _packet\r\n    ) internal pure returns (bytes memory encodedPacket) {\r\n        encodedPacket = abi.encodePacked(\r\n            PACKET_VERSION,\r\n            _packet.nonce,\r\n            _packet.srcEid,\r\n            _packet.sender.toBytes32(),\r\n            _packet.dstEid,\r\n            _packet.receiver,\r\n            _packet.guid,\r\n            _packet.message\r\n        );\r\n    }\r\n\r\n    function encodePacketHeader(\r\n        Packet memory _packet\r\n    ) internal pure returns (bytes memory) {\r\n        return\r\n            abi.encodePacked(\r\n                PACKET_VERSION,\r\n                _packet.nonce,\r\n                _packet.srcEid,\r\n                _packet.sender.toBytes32(),\r\n                _packet.dstEid,\r\n                _packet.receiver\r\n            );\r\n    }\r\n\r\n    function encodePayload(\r\n        Packet memory _packet\r\n    ) internal pure returns (bytes memory) {\r\n        return abi.encodePacked(_packet.guid, _packet.message);\r\n    }\r\n\r\n    function header(\r\n        bytes calldata _packet\r\n    ) internal pure returns (bytes calldata) {\r\n        return _packet[0:GUID_OFFSET];\r\n    }\r\n\r\n    function version(bytes calldata _packet) internal pure returns (uint8) {\r\n        return uint8(bytes1(_packet[PACKET_VERSION_OFFSET:NONCE_OFFSET]));\r\n    }\r\n\r\n    function nonce(bytes calldata _packet) internal pure returns (uint64) {\r\n        return uint64(bytes8(_packet[NONCE_OFFSET:SRC_EID_OFFSET]));\r\n    }\r\n\r\n    function srcEid(bytes calldata _packet) internal pure returns (uint32) {\r\n        return uint32(bytes4(_packet[SRC_EID_OFFSET:SENDER_OFFSET]));\r\n    }\r\n\r\n    function sender(bytes calldata _packet) internal pure returns (bytes32) {\r\n        return bytes32(_packet[SENDER_OFFSET:DST_EID_OFFSET]);\r\n    }\r\n\r\n    function senderAddressB20(\r\n        bytes calldata _packet\r\n    ) internal pure returns (address) {\r\n        return sender(_packet).toAddress();\r\n    }\r\n\r\n    function dstEid(bytes calldata _packet) internal pure returns (uint32) {\r\n        return uint32(bytes4(_packet[DST_EID_OFFSET:RECEIVER_OFFSET]));\r\n    }\r\n\r\n    function receiver(bytes calldata _packet) internal pure returns (bytes32) {\r\n        return bytes32(_packet[RECEIVER_OFFSET:GUID_OFFSET]);\r\n    }\r\n\r\n    function receiverB20(\r\n        bytes calldata _packet\r\n    ) internal pure returns (address) {\r\n        return receiver(_packet).toAddress();\r\n    }\r\n\r\n    function guid(bytes calldata _packet) internal pure returns (bytes32) {\r\n        return bytes32(_packet[GUID_OFFSET:MESSAGE_OFFSET]);\r\n    }\r\n\r\n    function message(\r\n        bytes calldata _packet\r\n    ) internal pure returns (bytes calldata) {\r\n        return bytes(_packet[MESSAGE_OFFSET:]);\r\n    }\r\n\r\n    function payload(\r\n        bytes calldata _packet\r\n    ) internal pure returns (bytes calldata) {\r\n        return bytes(_packet[GUID_OFFSET:]);\r\n    }\r\n\r\n    function payloadHash(\r\n        bytes calldata _packet\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(payload(_packet));\r\n    }\r\n}\r\n\r\n/**\r\n * @title InboundPacket\r\n * @dev Structure representing an inbound packet received by the contract.\r\n */\r\nstruct InboundPacket {\r\n    Origin origin; // Origin information of the packet.\r\n    uint32 dstEid; // Destination endpointId of the packet.\r\n    address receiver; // Receiver address for the packet.\r\n    bytes32 guid; // Unique identifier of the packet.\r\n    uint256 value; // msg.value of the packet.\r\n    address executor; // Executor address for the packet.\r\n    bytes message; // Message payload of the packet.\r\n    bytes extraData; // Additional arbitrary data for the packet.\r\n}\r\n\r\n/**\r\n * @title PacketDecoder\r\n * @dev Library for decoding LayerZero packets.\r\n */\r\nlibrary PacketDecoder {\r\n    using PacketV1Codec for bytes;\r\n\r\n    /**\r\n     * @dev Decode an inbound packet from the given packet data.\r\n     * @param _packet The packet data to decode.\r\n     * @return packet An InboundPacket struct representing the decoded packet.\r\n     */\r\n    function decode(\r\n        bytes calldata _packet\r\n    ) internal pure returns (InboundPacket memory packet) {\r\n        packet.origin = Origin(\r\n            _packet.srcEid(),\r\n            _packet.sender(),\r\n            _packet.nonce()\r\n        );\r\n        packet.dstEid = _packet.dstEid();\r\n        packet.receiver = _packet.receiverB20();\r\n        packet.guid = _packet.guid();\r\n        packet.message = _packet.message();\r\n    }\r\n\r\n    /**\r\n     * @dev Decode multiple inbound packets from the given packet data and associated message values.\r\n     * @param _packets An array of packet data to decode.\r\n     * @param _packetMsgValues An array of associated message values for each packet.\r\n     * @return packets An array of InboundPacket structs representing the decoded packets.\r\n     */\r\n    function decode(\r\n        bytes[] calldata _packets,\r\n        uint256[] memory _packetMsgValues\r\n    ) internal pure returns (InboundPacket[] memory packets) {\r\n        packets = new InboundPacket[](_packets.length);\r\n        for (uint256 i = 0; i < _packets.length; i++) {\r\n            bytes calldata packet = _packets[i];\r\n            packets[i] = PacketDecoder.decode(packet);\r\n            // @dev Allows the verifier to specify the msg.value that gets passed in lzReceive.\r\n            packets[i].value = _packetMsgValues[i];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// @dev Import the Origin so it's exposed to OAppPreCrimeSimulator implementers.\r\n// solhint-disable-next-line no-unused-import\r\n\r\n/**\r\n * @title IOAppPreCrimeSimulator Interface\r\n * @dev Interface for the preCrime simulation functionality in an OApp.\r\n */\r\ninterface IOAppPreCrimeSimulator {\r\n    // @dev simulation result used in PreCrime implementation\r\n    error SimulationResult(bytes result);\r\n    error OnlySelf();\r\n\r\n    /**\r\n     * @dev Emitted when the preCrime contract address is set.\r\n     * @param preCrimeAddress The address of the preCrime contract.\r\n     */\r\n    event PreCrimeSet(address preCrimeAddress);\r\n\r\n    /**\r\n     * @dev Retrieves the address of the preCrime contract implementation.\r\n     * @return The address of the preCrime contract.\r\n     */\r\n    function preCrime() external view returns (address);\r\n\r\n    /**\r\n     * @dev Retrieves the address of the OApp contract.\r\n     * @return The address of the OApp contract.\r\n     */\r\n    function oApp() external view returns (address);\r\n\r\n    /**\r\n     * @dev Sets the preCrime contract address.\r\n     * @param _preCrime The address of the preCrime contract.\r\n     */\r\n    function setPreCrime(address _preCrime) external;\r\n\r\n    /**\r\n     * @dev Mocks receiving a packet, then reverts with a series of data to infer the state/result.\r\n     * @param _packets An array of LayerZero InboundPacket objects representing received packets.\r\n     */\r\n    function lzReceiveAndRevert(\r\n        InboundPacket[] calldata _packets\r\n    ) external payable;\r\n\r\n    /**\r\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\r\n     * @param _eid The endpoint Id to check.\r\n     * @param _peer The peer to check.\r\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\r\n     */\r\n    function isPeer(uint32 _eid, bytes32 _peer) external view returns (bool);\r\n}\r\n\r\nstruct PreCrimePeer {\r\n    uint32 eid;\r\n    bytes32 preCrime;\r\n    bytes32 oApp;\r\n}\r\n\r\n// TODO not done yet\r\ninterface IPreCrime {\r\n    error OnlyOffChain();\r\n\r\n    // for simulate()\r\n    error PacketOversize(uint256 max, uint256 actual);\r\n    error PacketUnsorted();\r\n    error SimulationFailed(bytes reason);\r\n\r\n    // for preCrime()\r\n    error SimulationResultNotFound(uint32 eid);\r\n    error InvalidSimulationResult(uint32 eid, bytes reason);\r\n    error CrimeFound(bytes crime);\r\n\r\n    function getConfig(\r\n        bytes[] calldata _packets,\r\n        uint256[] calldata _packetMsgValues\r\n    ) external returns (bytes memory);\r\n\r\n    function simulate(\r\n        bytes[] calldata _packets,\r\n        uint256[] calldata _packetMsgValues\r\n    ) external payable returns (bytes memory);\r\n\r\n    function buildSimulationResult() external view returns (bytes memory);\r\n\r\n    function preCrime(\r\n        bytes[] calldata _packets,\r\n        uint256[] calldata _packetMsgValues,\r\n        bytes[] calldata _simulations\r\n    ) external;\r\n\r\n    function version() external view returns (uint64 major, uint8 minor);\r\n}\r\n\r\n\r\n/**\r\n * @title OAppPreCrimeSimulator\r\n * @dev Abstract contract serving as the base for preCrime simulation functionality in an OApp.\r\n */\r\nabstract contract OAppPreCrimeSimulator is IOAppPreCrimeSimulator, Ownable {\r\n    // The address of the preCrime implementation.\r\n    address public preCrime;\r\n\r\n    /**\r\n     * @dev Retrieves the address of the OApp contract.\r\n     * @return The address of the OApp contract.\r\n     *\r\n     * @dev The simulator contract is the base contract for the OApp by default.\r\n     * @dev If the simulator is a separate contract, override this function.\r\n     */\r\n    function oApp() external view virtual returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the preCrime contract address.\r\n     * @param _preCrime The address of the preCrime contract.\r\n     */\r\n    function setPreCrime(address _preCrime) public virtual onlyOwner {\r\n        preCrime = _preCrime;\r\n        emit PreCrimeSet(_preCrime);\r\n    }\r\n\r\n    /**\r\n     * @dev Interface for pre-crime simulations. Always reverts at the end with the simulation results.\r\n     * @param _packets An array of InboundPacket objects representing received packets to be delivered.\r\n     *\r\n     * @dev WARNING: MUST revert at the end with the simulation results.\r\n     * @dev Gives the preCrime implementation the ability to mock sending packets to the lzReceive function,\r\n     * WITHOUT actually executing them.\r\n     */\r\n    function lzReceiveAndRevert(\r\n        InboundPacket[] calldata _packets\r\n    ) public payable virtual {\r\n        for (uint256 i = 0; i < _packets.length; i++) {\r\n            InboundPacket calldata packet = _packets[i];\r\n\r\n            // Ignore packets that are not from trusted peers.\r\n            if (!isPeer(packet.origin.srcEid, packet.origin.sender)) continue;\r\n\r\n            // @dev Because a verifier is calling this function, it doesnt have access to executor params:\r\n            //  - address _executor\r\n            //  - bytes calldata _extraData\r\n            // preCrime will NOT work for OApps that rely on these two parameters inside of their _lzReceive().\r\n            // They are instead stubbed to default values, address(0) and bytes(\"\")\r\n            // @dev Calling this.lzReceiveSimulate removes ability for assembly return 0 callstack exit,\r\n            // which would cause the revert to be ignored.\r\n            this.lzReceiveSimulate{value: packet.value}(\r\n                packet.origin,\r\n                packet.guid,\r\n                packet.message,\r\n                packet.executor,\r\n                packet.extraData\r\n            );\r\n        }\r\n\r\n        // @dev Revert with the simulation results. msg.sender must implement IPreCrime.buildSimulationResult().\r\n        revert SimulationResult(IPreCrime(msg.sender).buildSimulationResult());\r\n    }\r\n\r\n    /**\r\n     * @dev Is effectively an internal function because msg.sender must be address(this).\r\n     * Allows resetting the call stack for 'internal' calls.\r\n     * @param _origin The origin information containing the source endpoint and sender address.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address on the src chain.\r\n     *  - nonce: The nonce of the message.\r\n     * @param _guid The unique identifier of the packet.\r\n     * @param _message The message payload of the packet.\r\n     * @param _executor The executor address for the packet.\r\n     * @param _extraData Additional data for the packet.\r\n     */\r\n    function lzReceiveSimulate(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) external payable virtual {\r\n        // @dev Ensure ONLY can be called 'internally'.\r\n        if (msg.sender != address(this)) revert OnlySelf();\r\n        _lzReceiveSimulate(_origin, _guid, _message, _executor, _extraData);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\r\n     * @param _origin The origin information.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address from the src chain.\r\n     *  - nonce: The nonce of the LayerZero message.\r\n     * @param _guid The GUID of the LayerZero message.\r\n     * @param _message The LayerZero message.\r\n     * @param _executor The address of the off-chain executor.\r\n     * @param _extraData Arbitrary data passed by the msg executor.\r\n     *\r\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\r\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\r\n     */\r\n    function _lzReceiveSimulate(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) internal virtual;\r\n\r\n    /**\r\n     * @dev checks if the specified peer is considered 'trusted' by the OApp.\r\n     * @param _eid The endpoint Id to check.\r\n     * @param _peer The peer to check.\r\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\r\n     */\r\n    function isPeer(\r\n        uint32 _eid,\r\n        bytes32 _peer\r\n    ) public view virtual returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title OFTCore\r\n * @dev Abstract contract for the OftChain (OFT) token.\r\n */\r\nabstract contract OFTCore is\r\n    IOFT,\r\n    OApp,\r\n    OAppPreCrimeSimulator,\r\n    OAppOptionsType3\r\n{\r\n    using OFTMsgCodec for bytes;\r\n    using OFTMsgCodec for bytes32;\r\n\r\n    // @notice Provides a conversion rate when swapping between denominations of SD and LD\r\n    //      - shareDecimals == SD == shared Decimals\r\n    //      - localDecimals == LD == local decimals\r\n    // @dev Considers that tokens have different decimal amounts on various chains.\r\n    // @dev eg.\r\n    //  For a token\r\n    //      - locally with 4 decimals --> 1.2345 => uint(12345)\r\n    //      - remotely with 2 decimals --> 1.23 => uint(123)\r\n    //      - The conversion rate would be 10 ** (4 - 2) = 100\r\n    //  @dev If you want to send 1.2345 -> (uint 12345), you CANNOT represent that value on the remote,\r\n    //  you can only display 1.23 -> uint(123).\r\n    //  @dev To preserve the dust that would otherwise be lost on that conversion,\r\n    //  we need to unify a denomination that can be represented on ALL chains inside of the OFT mesh\r\n    uint256 public immutable decimalConversionRate;\r\n\r\n    // @notice Msg types that are used to identify the various OFT operations.\r\n    // @dev This can be extended in child contracts for non-default oft operations\r\n    // @dev These values are used in things like combineOptions() in OAppOptionsType3.sol.\r\n    uint16 public constant SEND = 1;\r\n    uint16 public constant SEND_AND_CALL = 2;\r\n\r\n    // Address of an optional contract to inspect both 'message' and 'options'\r\n    address public msgInspector;\r\n    event MsgInspectorSet(address inspector);\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     * @param _localDecimals The decimals of the token on the local chain (this chain).\r\n     * @param _endpoint The address of the LayerZero endpoint.\r\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\r\n     */\r\n    constructor(\r\n        uint8 _localDecimals,\r\n        address _endpoint,\r\n        address _delegate\r\n    ) OApp(_endpoint, _delegate) {\r\n        if (_localDecimals < sharedDecimals()) revert InvalidLocalDecimals();\r\n        decimalConversionRate = 10 ** (_localDecimals - sharedDecimals());\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the shared decimals of the OFT.\r\n     * @return The shared decimals of the OFT.\r\n     *\r\n     * @dev Sets an implicit cap on the amount of tokens, over uint64.max() will need some sort of outbound cap / totalSupply cap\r\n     * Lowest common decimal denominator between chains.\r\n     * Defaults to 6 decimal places to provide up to 18,446,744,073,709.551615 units (max uint64).\r\n     * For tokens exceeding this totalSupply(), they will need to override the sharedDecimals function with something smaller.\r\n     * ie. 4 sharedDecimals would be 1,844,674,407,370,955.1615\r\n     */\r\n    function sharedDecimals() public pure virtual returns (uint8) {\r\n        return 6;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the message inspector address for the OFT.\r\n     * @param _msgInspector The address of the message inspector.\r\n     *\r\n     * @dev This is an optional contract that can be used to inspect both 'message' and 'options'.\r\n     * @dev Set it to address(0) to disable it, or set it to a contract address to enable it.\r\n     */\r\n    function setMsgInspector(address _msgInspector) public virtual onlyOwner {\r\n        msgInspector = _msgInspector;\r\n        emit MsgInspectorSet(_msgInspector);\r\n    }\r\n\r\n    /**\r\n     * @notice Provides a quote for OFT-related operations.\r\n     * @param _sendParam The parameters for the send operation.\r\n     * @return oftLimit The OFT limit information.\r\n     * @return oftFeeDetails The details of OFT fees.\r\n     * @return oftReceipt The OFT receipt information.\r\n     */\r\n    function quoteOFT(\r\n        SendParam calldata _sendParam\r\n    )\r\n        external\r\n        view\r\n        virtual\r\n        returns (\r\n            OFTLimit memory oftLimit,\r\n            OFTFeeDetail[] memory oftFeeDetails,\r\n            OFTReceipt memory oftReceipt\r\n        )\r\n    {\r\n        uint256 minAmountLD = 0; // Unused in the default implementation.\r\n        uint256 maxAmountLD = type(uint64).max; // Unused in the default implementation.\r\n        oftLimit = OFTLimit(minAmountLD, maxAmountLD);\r\n\r\n        // Unused in the default implementation; reserved for future complex fee details.\r\n        oftFeeDetails = new OFTFeeDetail[](0);\r\n\r\n        // @dev This is the same as the send() operation, but without the actual send.\r\n        // - amountSentLD is the amount in local decimals that would be sent from the sender.\r\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\r\n        // @dev The amountSentLD MIGHT not equal the amount the user actually receives. HOWEVER, the default does.\r\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debitView(\r\n            _sendParam.amountLD,\r\n            _sendParam.minAmountLD,\r\n            _sendParam.dstEid\r\n        );\r\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\r\n    }\r\n\r\n    /**\r\n     * @notice Provides a quote for the send() operation.\r\n     * @param _sendParam The parameters for the send() operation.\r\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\r\n     * @return msgFee The calculated LayerZero messaging fee from the send() operation.\r\n     *\r\n     * @dev MessagingFee: LayerZero msg fee\r\n     *  - nativeFee: The native fee.\r\n     *  - lzTokenFee: The lzToken fee.\r\n     */\r\n    function quoteSend(\r\n        SendParam calldata _sendParam,\r\n        bool _payInLzToken\r\n    ) external view virtual returns (MessagingFee memory msgFee) {\r\n        // @dev mock the amount to receive, this is the same operation used in the send().\r\n        // The quote is as similar as possible to the actual send() operation.\r\n        (, uint256 amountReceivedLD) = _debitView(\r\n            _sendParam.amountLD,\r\n            _sendParam.minAmountLD,\r\n            _sendParam.dstEid\r\n        );\r\n\r\n        // @dev Builds the options and OFT message to quote in the endpoint.\r\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(\r\n            _sendParam,\r\n            amountReceivedLD\r\n        );\r\n\r\n        // @dev Calculates the LayerZero fee for the send() operation.\r\n        return _quote(_sendParam.dstEid, message, options, _payInLzToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes the send operation.\r\n     * @param _sendParam The parameters for the send operation.\r\n     * @param _fee The calculated fee for the send() operation.\r\n     *      - nativeFee: The native fee.\r\n     *      - lzTokenFee: The lzToken fee.\r\n     * @param _refundAddress The address to receive any excess funds.\r\n     * @return msgReceipt The receipt for the send operation.\r\n     * @return oftReceipt The OFT receipt information.\r\n     *\r\n     * @dev MessagingReceipt: LayerZero msg receipt\r\n     *  - guid: The unique identifier for the sent message.\r\n     *  - nonce: The nonce of the sent message.\r\n     *  - fee: The LayerZero fee incurred for the message.\r\n     */\r\n    function send(\r\n        SendParam calldata _sendParam,\r\n        MessagingFee calldata _fee,\r\n        address _refundAddress\r\n    )\r\n        external\r\n        payable\r\n        virtual\r\n        returns (\r\n            MessagingReceipt memory msgReceipt,\r\n            OFTReceipt memory oftReceipt\r\n        )\r\n    {\r\n        // @dev Applies the token transfers regarding this send() operation.\r\n        // - amountSentLD is the amount in local decimals that was ACTUALLY sent from the sender.\r\n        // - amountReceivedLD is the amount in local decimals that will be credited to the recipient on the remote OFT instance.\r\n        (uint256 amountSentLD, uint256 amountReceivedLD) = _debit(\r\n            _sendParam.amountLD,\r\n            _sendParam.minAmountLD,\r\n            _sendParam.dstEid\r\n        );\r\n\r\n        // @dev Builds the options and OFT message to quote in the endpoint.\r\n        (bytes memory message, bytes memory options) = _buildMsgAndOptions(\r\n            _sendParam,\r\n            amountReceivedLD\r\n        );\r\n\r\n        // @dev Sends the message to the LayerZero endpoint and returns the LayerZero msg receipt.\r\n        msgReceipt = _lzSend(\r\n            _sendParam.dstEid,\r\n            message,\r\n            options,\r\n            _fee,\r\n            _refundAddress\r\n        );\r\n        // @dev Formulate the OFT receipt.\r\n        oftReceipt = OFTReceipt(amountSentLD, amountReceivedLD);\r\n\r\n        emit OFTSent(\r\n            msgReceipt.guid,\r\n            _sendParam.dstEid,\r\n            msg.sender,\r\n            amountSentLD\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to build the message and options.\r\n     * @param _sendParam The parameters for the send() operation.\r\n     * @param _amountLD The amount in local decimals.\r\n     * @return message The encoded message.\r\n     * @return options The encoded options.\r\n     */\r\n    function _buildMsgAndOptions(\r\n        SendParam calldata _sendParam,\r\n        uint256 _amountLD\r\n    )\r\n        internal\r\n        view\r\n        virtual\r\n        returns (bytes memory message, bytes memory options)\r\n    {\r\n        bool hasCompose;\r\n        // @dev This generated message has the msg.sender encoded into the payload so the remote knows who the caller is.\r\n        (message, hasCompose) = OFTMsgCodec.encode(\r\n            _sendParam.to,\r\n            _toSD(_amountLD),\r\n            // @dev Must be include a non empty bytes if you want to compose, EVEN if you dont need it on the remote.\r\n            // EVEN if you dont require an arbitrary payload to be sent... eg. '0x01'\r\n            _sendParam.composeMsg\r\n        );\r\n        // @dev Change the msg type depending if its composed or not.\r\n        uint16 msgType = hasCompose ? SEND_AND_CALL : SEND;\r\n        // @dev Combine the callers _extraOptions with the enforced options via the OAppOptionsType3.\r\n        options = combineOptions(\r\n            _sendParam.dstEid,\r\n            msgType,\r\n            _sendParam.extraOptions\r\n        );\r\n\r\n        // @dev Optionally inspect the message and options depending if the OApp owner has set a msg inspector.\r\n        // @dev If it fails inspection, needs to revert in the implementation. ie. does not rely on return boolean\r\n        if (msgInspector != address(0))\r\n            IOAppMsgInspector(msgInspector).inspect(message, options);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to handle the receive on the LayerZero endpoint.\r\n     * @param _origin The origin information.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address from the src chain.\r\n     *  - nonce: The nonce of the LayerZero message.\r\n     * @param _guid The unique identifier for the received LayerZero message.\r\n     * @param _message The encoded message.\r\n     * @dev _executor The address of the executor.\r\n     * @dev _extraData Additional data.\r\n     */\r\n    function _lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address /*_executor*/, // @dev unused in the default implementation.\r\n        bytes calldata /*_extraData*/ // @dev unused in the default implementation.\r\n    ) internal virtual override {\r\n        // @dev The src sending chain doesnt know the address length on this chain (potentially non-evm)\r\n        // Thus everything is bytes32() encoded in flight.\r\n        address toAddress = _message.sendTo().bytes32ToAddress();\r\n        // @dev Credit the amountLD to the recipient and return the ACTUAL amount the recipient received in local decimals\r\n        uint256 amountReceivedLD = _credit(\r\n            toAddress,\r\n            _toLD(_message.amountSD()),\r\n            _origin.srcEid\r\n        );\r\n\r\n        if (_message.isComposed()) {\r\n            // @dev Proprietary composeMsg format for the OFT.\r\n            bytes memory composeMsg = OFTComposeMsgCodec.encode(\r\n                _origin.nonce,\r\n                _origin.srcEid,\r\n                amountReceivedLD,\r\n                _message.composeMsg()\r\n            );\r\n\r\n            // @dev Stores the lzCompose payload that will be executed in a separate tx.\r\n            // Standardizes functionality for executing arbitrary contract invocation on some non-evm chains.\r\n            // @dev The off-chain executor will listen and process the msg based on the src-chain-callers compose options passed.\r\n            // @dev The index is used when a OApp needs to compose multiple msgs on lzReceive.\r\n            // For default OFT implementation there is only 1 compose msg per lzReceive, thus its always 0.\r\n            endpoint.sendCompose(\r\n                toAddress,\r\n                _guid,\r\n                0 /* the index of the composed message*/,\r\n                composeMsg\r\n            );\r\n        }\r\n\r\n        emit OFTReceived(_guid, _origin.srcEid, toAddress, amountReceivedLD);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to handle the OAppPreCrimeSimulator simulated receive.\r\n     * @param _origin The origin information.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address from the src chain.\r\n     *  - nonce: The nonce of the LayerZero message.\r\n     * @param _guid The unique identifier for the received LayerZero message.\r\n     * @param _message The LayerZero message.\r\n     * @param _executor The address of the off-chain executor.\r\n     * @param _extraData Arbitrary data passed by the msg executor.\r\n     *\r\n     * @dev Enables the preCrime simulator to mock sending lzReceive() messages,\r\n     * routes the msg down from the OAppPreCrimeSimulator, and back up to the OAppReceiver.\r\n     */\r\n    function _lzReceiveSimulate(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) internal virtual override {\r\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the peer is considered 'trusted' by the OApp.\r\n     * @param _eid The endpoint ID to check.\r\n     * @param _peer The peer to check.\r\n     * @return Whether the peer passed is considered 'trusted' by the OApp.\r\n     *\r\n     * @dev Enables OAppPreCrimeSimulator to check whether a potential Inbound Packet is from a trusted source.\r\n     */\r\n    function isPeer(\r\n        uint32 _eid,\r\n        bytes32 _peer\r\n    ) public view virtual override returns (bool) {\r\n        return peers[_eid] == _peer;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to remove dust from the given local decimal amount.\r\n     * @param _amountLD The amount in local decimals.\r\n     * @return amountLD The amount after removing dust.\r\n     *\r\n     * @dev Prevents the loss of dust when moving amounts between chains with different decimals.\r\n     * @dev eg. uint(123) with a conversion rate of 100 becomes uint(100).\r\n     */\r\n    function _removeDust(\r\n        uint256 _amountLD\r\n    ) internal view virtual returns (uint256 amountLD) {\r\n        return (_amountLD / decimalConversionRate) * decimalConversionRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to convert an amount from shared decimals into local decimals.\r\n     * @param _amountSD The amount in shared decimals.\r\n     * @return amountLD The amount in local decimals.\r\n     */\r\n    function _toLD(\r\n        uint64 _amountSD\r\n    ) internal view virtual returns (uint256 amountLD) {\r\n        return _amountSD * decimalConversionRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to convert an amount from local decimals into shared decimals.\r\n     * @param _amountLD The amount in local decimals.\r\n     * @return amountSD The amount in shared decimals.\r\n     */\r\n    function _toSD(\r\n        uint256 _amountLD\r\n    ) internal view virtual returns (uint64 amountSD) {\r\n        return uint64(_amountLD / decimalConversionRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to mock the amount mutation from a OFT debit() operation.\r\n     * @param _amountLD The amount to send in local decimals.\r\n     * @param _minAmountLD The minimum amount to send in local decimals.\r\n     * @dev _dstEid The destination endpoint ID.\r\n     * @return amountSentLD The amount sent, in local decimals.\r\n     * @return amountReceivedLD The amount to be received on the remote chain, in local decimals.\r\n     *\r\n     * @dev This is where things like fees would be calculated and deducted from the amount to be received on the remote.\r\n     */\r\n    function _debitView(\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        uint32 /*_dstEid*/\r\n    )\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256 amountSentLD, uint256 amountReceivedLD)\r\n    {\r\n        // @dev Remove the dust so nothing is lost on the conversion between chains with different decimals for the token.\r\n        amountSentLD = _removeDust(_amountLD);\r\n        // @dev The amount to send is the same as amount received in the default implementation.\r\n        amountReceivedLD = amountSentLD;\r\n\r\n        // @dev Check for slippage.\r\n        if (amountReceivedLD < _minAmountLD) {\r\n            revert SlippageExceeded(amountReceivedLD, _minAmountLD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to perform a debit operation.\r\n     * @param _amountLD The amount to send in local decimals.\r\n     * @param _minAmountLD The minimum amount to send in local decimals.\r\n     * @param _dstEid The destination endpoint ID.\r\n     * @return amountSentLD The amount sent in local decimals.\r\n     * @return amountReceivedLD The amount received in local decimals on the remote.\r\n     *\r\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\r\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\r\n     */\r\n    function _debit(\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        uint32 _dstEid\r\n    ) internal virtual returns (uint256 amountSentLD, uint256 amountReceivedLD);\r\n\r\n    /**\r\n     * @dev Internal function to perform a credit operation.\r\n     * @param _to The address to credit.\r\n     * @param _amountLD The amount to credit in local decimals.\r\n     * @param _srcEid The source endpoint ID.\r\n     * @return amountReceivedLD The amount ACTUALLY received in local decimals.\r\n     *\r\n     * @dev Defined here but are intended to be overriden depending on the OFT implementation.\r\n     * @dev Depending on OFT implementation the _amountLD could differ from the amountReceivedLD.\r\n     */\r\n    function _credit(\r\n        address _to,\r\n        uint256 _amountLD,\r\n        uint32 _srcEid\r\n    ) internal virtual returns (uint256 amountReceivedLD);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n/**\r\n * @title OFT Contract\r\n * @dev OFT is an ERC-20 token that extends the functionality of the OFTCore contract.\r\n */\r\nabstract contract OFT is OFTCore, ERC20 {\r\n    /**\r\n     * @dev Constructor for the OFT contract.\r\n     * @param _name The name of the OFT.\r\n     * @param _symbol The symbol of the OFT.\r\n     * @param _lzEndpoint The LayerZero endpoint address.\r\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\r\n     */\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _lzEndpoint,\r\n        address _delegate\r\n    ) ERC20(_name, _symbol) OFTCore(decimals(), _lzEndpoint, _delegate) {}\r\n\r\n    /**\r\n     * @notice Retrieves interfaceID and the version of the OFT.\r\n     * @return interfaceId The interface ID.\r\n     * @return version The version.\r\n     *\r\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\r\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\r\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\r\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\r\n     */\r\n    function oftVersion()\r\n        external\r\n        pure\r\n        virtual\r\n        returns (bytes4 interfaceId, uint64 version)\r\n    {\r\n        return (type(IOFT).interfaceId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the address of the underlying ERC20 implementation.\r\n     * @return The address of the OFT token.\r\n     *\r\n     * @dev In the case of OFT, address(this) and erc20 are the same contract.\r\n     */\r\n    function token() external view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\r\n     * @return requiresApproval Needs approval of the underlying token implementation.\r\n     *\r\n     * @dev In the case of OFT where the contract IS the token, approval is NOT required.\r\n     */\r\n    function approvalRequired() external pure virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens from the sender's specified balance.\r\n     * @param _amountLD The amount of tokens to send in local decimals.\r\n     * @param _minAmountLD The minimum amount to send in local decimals.\r\n     * @param _dstEid The destination chain ID.\r\n     * @return amountSentLD The amount sent in local decimals.\r\n     * @return amountReceivedLD The amount received in local decimals on the remote.\r\n     */\r\n    function _debit(\r\n        uint256 _amountLD,\r\n        uint256 _minAmountLD,\r\n        uint32 _dstEid\r\n    )\r\n        internal\r\n        virtual\r\n        override\r\n        returns (uint256 amountSentLD, uint256 amountReceivedLD)\r\n    {\r\n        (amountSentLD, amountReceivedLD) = _debitView(\r\n            _amountLD,\r\n            _minAmountLD,\r\n            _dstEid\r\n        );\r\n\r\n        // @dev In NON-default OFT, amountSentLD could be 100, with a 10% fee, the amountReceivedLD amount is 90,\r\n        // therefore amountSentLD CAN differ from amountReceivedLD.\r\n\r\n        // @dev Default OFT burns on src.\r\n        _burn(msg.sender, amountSentLD);\r\n    }\r\n\r\n    /**\r\n     * @dev Credits tokens to the specified address.\r\n     * @param _to The address to credit the tokens to.\r\n     * @param _amountLD The amount of tokens to credit in local decimals.\r\n     * @dev _srcEid The source chain ID.\r\n     * @return amountReceivedLD The amount of tokens ACTUALLY received in local decimals.\r\n     */\r\n    function _credit(\r\n        address _to,\r\n        uint256 _amountLD,\r\n        uint32 /*_srcEid*/\r\n    ) internal virtual override returns (uint256 amountReceivedLD) {\r\n        // @dev Default OFT mints on dst.\r\n        _mint(_to, _amountLD);\r\n        // @dev In the case of NON-default OFT, the _amountLD MIGHT not be == amountReceivedLD.\r\n        return _amountLD;\r\n    }\r\n}\r\n\r\n\r\ncontract QorpoToken is OFT {\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _lzEndpoint,\r\n        address _owner,\r\n        address _mintAddress\r\n    ) OFT(_name, _symbol, _lzEndpoint, _owner) {\r\n        uint256 mintAmount =  750000000 * 10 ** decimals();\r\n        _mint(_mintAddress, mintAmount); // mints total supply of 750 million tokens\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLocalDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"SimulationResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"}],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inspector\",\"type\":\"address\"}],\"name\":\"MsgInspectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"OFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"}],\"name\":\"OFTSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preCrimeAddress\",\"type\":\"address\"}],\"name\":\"PreCrimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEND_AND_CALL\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"composeMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"isPeer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct InboundPacket[]\",\"name\":\"_packets\",\"type\":\"tuple[]\"}],\"name\":\"lzReceiveAndRevert\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceiveSimulate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgInspector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oApp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oftVersion\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preCrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"_sendParam\",\"type\":\"tuple\"}],\"name\":\"quoteOFT\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountLD\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTLimit\",\"name\":\"oftLimit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"feeAmountLD\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct OFTFeeDetail[]\",\"name\":\"oftFeeDetails\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountSentLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceivedLD\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTReceipt\",\"name\":\"oftReceipt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"_sendParam\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteSend\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"msgFee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"_sendParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"_fee\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"msgReceipt\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountSentLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceivedLD\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTReceipt\",\"name\":\"oftReceipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msgInspector\",\"type\":\"address\"}],\"name\":\"setMsgInspector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_preCrime\",\"type\":\"address\"}],\"name\":\"setPreCrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QorpoToken", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000001a44076050125825900e736c501f859c50fe728c0000000000000000000000008623f9d75dbb0b7915b509a2e96ca5a2045598e70000000000000000000000008623f9d75dbb0b7915b509a2e96ca5a2045598e7000000000000000000000000000000000000000000000000000000000000000b516f72706f20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005514f52504f000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb03dfd226eb6398ee510bb48a37326839a43f5ed18b7f45451ed67dd5e6e051"}