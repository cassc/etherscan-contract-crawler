{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/proxy/Clones.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary Clones {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt)\r\n        internal\r\n        view\r\n        returns (address predicted)\r\n    {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/IOtoCoMaster.sol\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoMaster {\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev See {OtoCoMaster-baseFee}.\r\n     */\r\n    function baseFee() external view returns (uint256 fee);\r\n\r\n    receive() external payable;\r\n}\r\n\r\n\r\n// File contracts/utils/IOtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoPlugin {\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/OtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract OtoCoPlugin is IOtoCoPlugin, Ownable {\r\n\r\n    // Reference to the OtoCo Master to transfer plugin cost\r\n    IOtoCoMaster public otocoMaster;\r\n\r\n    /**\r\n     * Modifier to allow only series owners to change content.\r\n     * @param tokenId The plugin index to update.\r\n     */\r\n    modifier onlySeriesOwner(uint256 tokenId) {\r\n        require(otocoMaster.ownerOf(tokenId) == msg.sender, \"OtoCoPlugin: Not the entity owner.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Modifier to check if the function set the correct amount of ETH value and transfer it to master.\r\n     * If baseFee are 0 or sender is OtoCoMaster this step is jumped.\r\n     * @dev in the future add/attact/remove could be called from OtoCo Master. In those cases no transfer should be called.\r\n     */\r\n    modifier transferFees() {\r\n        if (otocoMaster.baseFee() > 0 && msg.sender != address(otocoMaster)) payable(otocoMaster).transfer(msg.value);\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _otocoMaster) Ownable() {\r\n        otocoMaster = IOtoCoMaster(_otocoMaster);\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Attach elements are not possible on this plugin.\");\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Remove elements are not possible on this plugin.\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/plugins/Token.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ninterface ISeriesToken {\r\n  function initialize (string memory name, string memory symbol, uint256 supply, address member) external;\r\n}\r\n\r\n/**\r\n * Token factory plugin\r\n */\r\ncontract Token is OtoCoPlugin {\r\n\r\n    event TokenAdded(uint256 indexed series, address token);\r\n    event TokenRemoved(uint256 indexed series, address token);\r\n\r\n    // Token source contract to be cloned\r\n    address public tokenContract;\r\n    // Mapping from entities to deployed tokens\r\n    mapping(uint256 => uint256) public tokensPerEntity;\r\n    // Mapping from entities to deployed tokens\r\n    mapping(uint256 => address[]) public tokensDeployed;\r\n\r\n\r\n    /**\r\n    * Constructor for Token Plugin.\r\n    *\r\n    * @param otocoMaster Address from the Master contract.\r\n    * @param token Address from the token source contract to be cloned.\r\n    * @param prevIds Previously deployed token series indexes.\r\n    * @param prevTokens Addresses from the tokens previously deployed.\r\n     */\r\n    constructor(\r\n        address payable otocoMaster,\r\n        address token,\r\n        uint256[] memory prevIds,\r\n        address[] memory prevTokens\r\n    ) OtoCoPlugin(otocoMaster) {\r\n        tokenContract = token;\r\n        for (uint i = 0; i < prevIds.length; i++ ) {\r\n            tokensDeployed[prevIds[i]].push(prevTokens[i]);\r\n            tokensPerEntity[prevIds[i]]++;\r\n            emit TokenAdded(prevIds[i], prevTokens[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Update token contract base source.\r\n    *\r\n    * @param newAddress New token source to be used\r\n     */\r\n    function updateTokenContract(address newAddress) public onlyOwner {\r\n        tokenContract = newAddress;\r\n    }\r\n\r\n    /**\r\n    * Create a new token for the entity. May only be called by the owner of the series.\r\n    *\r\n    * @param pluginData Encoded parameters to create a new token.\r\n    * @dev seriesId would be the series that will own the token.\r\n    * @dev supply the total supply of tokens to be issued.\r\n    * @dev name the name of the token as string.\r\n    * @dev symbol the symbol that respresent the token.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) public onlySeriesOwner(seriesId) transferFees() payable override {\r\n        (\r\n            uint256 supply,\r\n            string memory name,\r\n            string memory symbol,\r\n            address holder\r\n        ) = abi.decode(pluginData, (uint256, string, string, address));\r\n        address newToken = Clones.clone(tokenContract);\r\n        ISeriesToken(newToken).initialize(name, symbol, supply, holder);\r\n        tokensDeployed[seriesId].push(newToken);\r\n        tokensPerEntity[seriesId]++;\r\n        emit TokenAdded(seriesId, newToken);\r\n    }\r\n\r\n    /**\r\n    * Attaching a pre-existing token to the entity. May only be called by the entity owner.\r\n    *\r\n    * @param pluginData Encoded parameters to create a new token.\r\n    * @dev seriesId Series to remove token from\r\n    * @dev newToken Token address to be attached\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) public onlySeriesOwner(seriesId) transferFees() payable override {\r\n        (\r\n            address newToken\r\n        ) = abi.decode(pluginData, (address));\r\n        tokensDeployed[seriesId].push(newToken);\r\n        tokensPerEntity[seriesId]++;\r\n        emit TokenAdded(seriesId, newToken);\r\n    }\r\n\r\n    /**\r\n    * Remove token from entity\r\n    *\r\n    * @param pluginData Encoded parameters to create a new token.\r\n    * @dev seriesId Series to remove token from\r\n    * @dev toRemove Token index to be removed\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) public onlySeriesOwner(seriesId) transferFees() payable override {\r\n        (\r\n            uint256 toRemove\r\n        ) = abi.decode(pluginData, (uint256));\r\n        address tokenRemoved = tokensDeployed[seriesId][toRemove];\r\n        // Copy last token to the removed slot\r\n        tokensDeployed[seriesId][toRemove] = tokensDeployed[seriesId][tokensDeployed[seriesId].length - 1];\r\n        // Remove the last token from array\r\n        tokensDeployed[seriesId].pop();\r\n        tokensPerEntity[seriesId]--;\r\n        emit TokenRemoved(seriesId, tokenRemoved);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"otocoMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prevIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"prevTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"attachPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otocoMaster\",\"outputs\":[{\"internalType\":\"contract IOtoCoMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensDeployed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://849f3173d5ac030985d8b3ad3cee8d66bffb99513ba7b1d0dbabf7b76b0a8b13"}