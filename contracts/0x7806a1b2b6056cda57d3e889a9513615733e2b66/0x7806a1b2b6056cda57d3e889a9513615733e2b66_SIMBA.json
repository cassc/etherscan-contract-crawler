{"SourceCode": "pragma solidity 0.5.10;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract BlacklistedRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event BlacklistedAdded(address indexed account);\r\n    event BlacklistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _blacklisteds;\r\n\r\n    modifier notBlacklisted(address account) {\r\n        require(!isBlacklisted(account), \"BlacklistedRole: caller is Blacklisted\");\r\n        _;\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return _blacklisteds.has(account);\r\n    }\r\n\r\n    function addBlacklisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _blacklisteds.add(accounts[i]);\r\n            emit BlacklistedAdded(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeBlacklisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _blacklisteds.remove(accounts[i]);\r\n            emit BlacklistedRemoved(accounts[i]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract UpgradedToken is IERC20 {\r\n    function transferByLegacy(address from, address to, uint256 value) external returns (bool);\r\n    function transferFromByLegacy(address sender, address from, address spender, uint256 value) external returns (bool);\r\n    function approveByLegacy(address from, address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\r\n}\r\n\r\ncontract SIMBA is ERC20, BlacklistedRole {\r\n\r\n    address private boss = 0x96f9ED1C9555060da2A04b6250154C9941c1BA5a;\r\n    address private admin1 = 0x422FDC9D18C5aa20851DFe468ec6582b221C7778;\r\n    address private admin2 = 0xD3C8bf4f4d502813393fc69EDFCF24c7019553E9;\r\n\r\n    uint256 transferFee = 5000;\r\n    uint256 welcomeFee = 50000;\r\n    uint256 goodbyeFee = 50000;\r\n\r\n    bool public paused;\r\n    bool public deprecated;\r\n    address public upgradedAddress;\r\n\r\n    modifier notOnPause() {\r\n        require(!paused, 'Transfers are temporary disabled');\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerAndBoss() {\r\n        require(msg.sender == owner() || msg.sender == boss);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n\r\n        _name = \"SIMBA Stablecoin\";\r\n        _symbol = \"SIMBA\";\r\n        _decimals = 0;\r\n\r\n    }\r\n\r\n    function pause() public onlyOwnerAndBoss {\r\n        require(!paused);\r\n\r\n        paused = true;\r\n\r\n        emit OnPaused(msg.sender, now);\r\n    }\r\n\r\n    function unpause() public onlyOwnerAndBoss {\r\n        require(paused);\r\n\r\n        paused = false;\r\n\r\n        emit OnUnpaused(msg.sender, now);\r\n    }\r\n\r\n    function redeem(uint256 amount, string memory comment) public notOnPause {\r\n        require(amount > goodbyeFee);\r\n        uint256 value = amount.sub(goodbyeFee);\r\n        if (goodbyeFee > 0) {\r\n            _transfer(msg.sender, boss, goodbyeFee);\r\n        }\r\n        _burn(msg.sender, value);\r\n        emit OnRedeemed(msg.sender, amount, value, comment, now);\r\n    }\r\n\r\n    function issue(address customerAddress, uint256 amount, string memory comment) public notOnPause {\r\n        require(msg.sender == admin1);\r\n        require(amount > welcomeFee);\r\n        uint256 value = amount.sub(welcomeFee);\r\n        if (welcomeFee > 0) {\r\n            _mint(boss, welcomeFee);\r\n        }\r\n        _mint(customerAddress, value);\r\n        emit OnIssued(customerAddress, amount, value, comment, now);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public notOnPause notBlacklisted(msg.sender) returns (bool) {\r\n        if (deprecated) {\r\n            return UpgradedToken(upgradedAddress).transferByLegacy(msg.sender, recipient, amount);\r\n        } else {\r\n            require(amount > transferFee);\r\n            uint256 value = amount.sub(transferFee);\r\n            if (transferFee > 0) {\r\n                _transfer(msg.sender, boss, transferFee);\r\n            }\r\n            _transfer(msg.sender, recipient, value);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public notOnPause notBlacklisted(sender) returns (bool) {\r\n        if (deprecated) {\r\n            return UpgradedToken(upgradedAddress).transferFromByLegacy(msg.sender, sender, recipient, amount);\r\n        } else {\r\n            require(amount > transferFee);\r\n            uint256 value = amount.sub(transferFee);\r\n            if (transferFee > 0) {\r\n                _transfer(sender, boss, transferFee);\r\n            }\r\n            _transfer(sender, recipient, value);\r\n            _approve(sender, msg.sender, allowance(sender, msg.sender).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function addBlacklisted(address[] memory accounts) public onlyOwnerAndBoss {\r\n        super.addBlacklisted(accounts);\r\n    }\r\n\r\n    function removeBlacklisted(address[] memory accounts) public onlyOwnerAndBoss {\r\n        super.removeBlacklisted(accounts);\r\n    }\r\n\r\n    function destroyBlackFunds(address[] memory accounts) public {\r\n        require(msg.sender == boss);\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            require(isBlacklisted(accounts[i]));\r\n\r\n            uint256 amount = balanceOf(accounts[i]);\r\n            _burn(accounts[i], amount);\r\n        }\r\n\r\n    }\r\n\r\n    function shift(address holder, address recipient, uint256 value) public {\r\n        require(msg.sender == boss);\r\n        require(value > 0);\r\n\r\n        _transfer(holder, recipient, value);\r\n\r\n        emit OnShifted(holder, recipient, value, now);\r\n    }\r\n\r\n    function deputeAdmin1(address newAdmin) public onlyOwnerAndBoss {\r\n        require(newAdmin != address(0));\r\n        emit OnAdminDeputed('admin1', admin1, newAdmin, now);\r\n        admin1 = newAdmin;\r\n    }\r\n\r\n    function deputeAdmin2(address newAdmin) public onlyOwnerAndBoss {\r\n        require(newAdmin != address(0));\r\n        emit OnAdminDeputed('admin2', admin2, newAdmin, now);\r\n        admin2 = newAdmin;\r\n    }\r\n\r\n    function deputeBoss(address newBoss) public onlyOwnerAndBoss {\r\n        require(newBoss != address(0));\r\n        emit OnAdminDeputed('boss', boss, newBoss, now);\r\n        boss = newBoss;\r\n    }\r\n\r\n    function setFee(uint256 _welcomeFee, uint256 _goodbyeFee, uint256 _transferFee) public onlyOwnerAndBoss {\r\n\r\n        welcomeFee = _welcomeFee;\r\n        goodbyeFee = _goodbyeFee;\r\n        transferFee = _transferFee;\r\n\r\n        emit OnFeeSet(welcomeFee, goodbyeFee, transferFee, now);\r\n    }\r\n\r\n    function deprecate(address newAddress) public onlyOwner {\r\n        require(isContract(newAddress));\r\n\r\n        deprecated = true;\r\n        upgradedAddress = newAddress;\r\n\r\n        emit OnDeprecated(now);\r\n    }\r\n\r\n    function approveAndCall(address spender, uint256 amount, bytes calldata extraData) external returns (bool) {\r\n        require(approve(spender, amount));\r\n\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external {\r\n        require(msg.sender == boss || msg.sender == admin2);\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        require(amount > 0);\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    function setName(string memory newName, string memory newSymbol) public onlyOwner {\r\n        emit OnNameSet(_name, _symbol, newName, newSymbol, now);\r\n\r\n        _name = newName;\r\n        _symbol = newSymbol;\r\n    }\r\n\r\n    function balanceOf(address who) public view returns (uint256) {\r\n        if (deprecated) {\r\n            return UpgradedToken(upgradedAddress).balanceOf(who);\r\n        } else {\r\n            return super.balanceOf(who);\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        if (deprecated) {\r\n            return UpgradedToken(upgradedAddress).approveByLegacy(msg.sender, spender, value);\r\n        } else {\r\n            return super.approve(spender, value);\r\n        }\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        if (deprecated) {\r\n            return UpgradedToken(upgradedAddress).allowance(owner, spender);\r\n        } else {\r\n            return super.allowance(owner, spender);\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        if (deprecated) {\r\n            return UpgradedToken(upgradedAddress).totalSupply();\r\n        } else {\r\n            return super.totalSupply();\r\n        }\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    event OnIssued (\r\n        address indexed customerAddress,\r\n        uint256 amount,\r\n        uint256 value,\r\n        string comment,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnRedeemed (\r\n        address indexed customerAddress,\r\n        uint256 amount,\r\n        uint256 value,\r\n        string comment,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnAdminDeputed (\r\n        string indexed adminType,\r\n        address indexed former,\r\n        address indexed current,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnFeeSet (\r\n        uint256 welcomeFee,\r\n        uint256 goodbyeFee,\r\n        uint256 transferFee,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnShifted (\r\n        address holder,\r\n        address recipient,\r\n        uint256 value,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnPaused (\r\n        address sender,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnUnpaused (\r\n        address sender,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnDeprecated (\r\n        uint256 timestamp\r\n    );\r\n\r\n    event OnNameSet (\r\n        string oldName,\r\n        string oldSymbol,\r\n        string newName,\r\n        string newSymbol,\r\n        uint256 timestamp\r\n    );\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addBlacklisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_welcomeFee\",\"type\":\"uint256\"},{\"name\":\"_goodbyeFee\",\"type\":\"uint256\"},{\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBoss\",\"type\":\"address\"}],\"name\":\"deputeBoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"removeBlacklisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"deputeAdmin2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ERC20Token\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"shift\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"deputeAdmin1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"comment\",\"type\":\"string\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comment\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"adminType\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"former\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnAdminDeputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"welcomeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"goodbyeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnShifted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"oldSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"newSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnNameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlacklistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "SIMBA", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://178699fe06c238c812b535339eea90cd3de5d04a36dc3a5f03a909673f67288f"}