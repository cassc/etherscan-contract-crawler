{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Haiku.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FREESTYLE H-AI-KU v2.3.4\\r\\n * @notice This is an extended and composable ERC-721 contract (ERC-721-ExC) for Matto's FREESTYLE H-AI-KU.\\r\\n * @author Matto AKA MonkMatto\\r\\n * @custom:experimental This contract is experimental.\\r\\n * @custom:security-contact info@substratum.art\\r\\n */\\r\\ncontract FREESTYLE_HAIKU is ERC721Royalty, Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n    using Strings for string;\\r\\n\\r\\n    struct Attribute {\\r\\n        string traitType;\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct TokenData {\\r\\n        string name; // The name of the artwork.\\r\\n        string mediaImage; // The image corresponding to the token.\\r\\n        string mediaAnimation; // The animation corresponding to the token.\\r\\n        string description; // The token's description.\\r\\n        string externalUrl; // If data is stored in this field, it will override baseExternalUrl/tokenId in tokenDataOf. To access this dynamic field, use the public function externalUrl().\\r\\n        string additionalData; // Additional data that can get added to the token description by the API.\\r\\n        string artistNameOverride; // Lets the artist set a custom artist name(s) for a token.\\r\\n        string licenseOverride; // Lets the artist set a custom license for a token.\\r\\n        uint256 tokenEntropy; // Seed for random number generation or image creation.\\r\\n        uint256 unlockBlock; // If set, the token is locked until the block number exceeds this value.\\r\\n        uint256 transferCount; // If countTransfers is true, this is the number of times the token has been transferred.\\r\\n        uint256 lastBlockTransferred; // If countTransfers is true, this is the block number of the last transfer.\\r\\n        address royaltyAddressOverride; // Lets the artist set a custom royalty address for a token.\\r\\n        uint8 mediaType; // Defaults to 0 for decentralized storage. 1 denotes directly stored data. 2 denotes generated from script. 204 denotes media accessible elsewhere in smart contract.\\r\\n        uint8 widthRatio; // The media's aspect ratio: widthRatio/heightRatio. Defaults to 1.\\r\\n        uint8 heightRatio; // The media's aspect ratio: widthRatio/heightRatio. Defaults to 1.\\r\\n        bool countTransfers; // If true, the token will count transfers and update transferCount and lastBlockTransferred.\\r\\n        bool frozen; // If true, the token's crucial data cannot be updated.\\r\\n    }\\r\\n\\r\\n    Counters.Counter public tokensMinted;\\r\\n    uint256 public maxSupply = 10 ** 12;\\r\\n    uint96 public royaltyBPS;\\r\\n    bool public mintActive;\\r\\n    string public baseURI;\\r\\n    string public baseExternalUrl;\\r\\n    string public collectionNotes;\\r\\n    string public collection;\\r\\n    string public collectionDescription;\\r\\n    string public defaultArtistName;\\r\\n    string public defaultLicense;\\r\\n    string public projectWebsite;\\r\\n    address public artistAddress;\\r\\n    address public minterAddress;\\r\\n    address public platformAddress;\\r\\n    address public defaultRoyaltyAddress;\\r\\n    mapping(uint256 => TokenData) tokenData;\\r\\n    mapping(uint256 => Attribute[]) private attributes;\\r\\n\\r\\n    constructor() ERC721(\\\"Freestyle H-AI-KU\\\", \\\"FHAIKU\\\") {}\\r\\n\\r\\n    // CUSTOM EVENTS\\r\\n    // These events are watched by the substratum.art platform.\\r\\n    // These will be monitored by the custom backend. They will trigger\\r\\n    // updating the API data returned by the tokenDataOf() function.\\r\\n\\r\\n    /**\\r\\n     * @notice The TokenUpdated event is emitted from multiple functions that\\r\\n     * that affect the rendering of traits/image of the token.\\r\\n     * @param tokenId is the token that is being updated.\\r\\n     */\\r\\n    event TokenUpdated(uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @notice The TokenLocked event is emitted when a token is locked.\\r\\n     * @param tokenId is the token that is being locked.\\r\\n     * @param unlockBlock is the block number when the token will be unlocked.\\r\\n     */\\r\\n    event TokenLocked(uint256 indexed tokenId, uint256 unlockBlock);\\r\\n\\r\\n    // MODIFIERS\\r\\n    // These are reusable code blocks to control function execution.\\r\\n\\r\\n    /**\\r\\n     * @notice onlyArtist restricts functions to the artist.\\r\\n     */\\r\\n    modifier onlyArtist() {\\r\\n        require(msg.sender == artistAddress);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice notFrozen ensures that a token is not frozen.\\r\\n     */\\r\\n    modifier notFrozen(uint256 _tokenId) {\\r\\n        require(tokenData[_tokenId].frozen == false);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // OVERRIDE FUNCTIONS\\r\\n    // These functions are declared as overrides because functions of the\\r\\n    // same name exist in imported contracts.\\r\\n    // 'super.<overridden function>' calls the overridden function.\\r\\n\\r\\n    /**\\r\\n     * @notice _baseURI is an internal function that returns a state value.\\r\\n     * @dev This override is needed when using a custom baseURI.\\r\\n     * @return baseURI, which is a state value.\\r\\n     */\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice _beforeTokenTransfer is an override function that is called\\r\\n     * before a token is transferred.\\r\\n     * @dev This override is needed to check if a token is locked, and if token counts transfers.\\r\\n     * @param _from is the address the token is being transferred from.\\r\\n     * @param _to is the address the token is being transferred to.\\r\\n     * @param _tokenId is the token being transferred.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual override {\\r\\n        require(\\r\\n            ownerOf(_tokenId) == artistAddress || !isTokenLocked(_tokenId),\\r\\n            \\\"Token is locked\\\"\\r\\n        );\\r\\n        if (tokenData[_tokenId].countTransfers) {\\r\\n            tokenData[_tokenId].transferCount++;\\r\\n            tokenData[_tokenId].lastBlockTransferred = block.number;\\r\\n            emit TokenUpdated(_tokenId);\\r\\n        }\\r\\n        super._transfer(_from, _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice this override checks if a token has a specific royalty address set.\\r\\n     * @dev as a mapping, if a token does not have an address set, it returns the\\r\\n     * zero address, so a catch must be used to reset the returned address to the\\r\\n     * contract's default address.\\r\\n     * @param _tokenId is the token to check its royalty information.\\r\\n     * @param _salePrice is the price to calculate the royalty with.\\r\\n     */\\r\\n    function royaltyInfo(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _salePrice\\r\\n    ) public view virtual override returns (address, uint256) {\\r\\n        address royaltyReceiver = tokenData[_tokenId].royaltyAddressOverride ==\\r\\n            address(0)\\r\\n            ? defaultRoyaltyAddress\\r\\n            : tokenData[_tokenId].royaltyAddressOverride;\\r\\n        return (royaltyReceiver, (_salePrice * royaltyBPS) / 10000);\\r\\n    }\\r\\n\\r\\n    // CUSTOM VIEW FUNCTIONS\\r\\n    // These are custom view functions implemented for efficiency.\\r\\n\\r\\n    /**\\r\\n     * @notice additionalDataOf returns the additional data for a token.\\r\\n     * @dev This function returns the additional data for a token.\\r\\n     * If the contents are shorter than 13 bytes, the content is converted into an integer.\\r\\n     * If the conversion is successful and the integer is less than the total number of tokens minted,\\r\\n     * the integer is treated like a tokenId and additionalData is returned from that tokenId.\\r\\n     * @param _tokenId is the token whose additional data will be returned.\\r\\n     * @return additionalData is the additional data for the token or referenced token.\\r\\n     */\\r\\n    function additionalDataOf(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        string memory additionalData = tokenData[_tokenId].additionalData;\\r\\n        if (bytes(additionalData).length == 0) {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n        if (bytes(additionalData).length < 13) {\\r\\n            (uint256 targetId, bool success) = _strToUint(additionalData);\\r\\n            if (success && targetId < tokensMinted.current() + 1) {\\r\\n                return tokenData[targetId].additionalData;\\r\\n            }\\r\\n        }\\r\\n        return additionalData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice externalUrl returns the external URL for a token.\\r\\n     * @dev This function returns the external URL for a token by either using the tokenData.externalUrl field (priority) or the baseExternalUrl with tokenId appended.\\r\\n     * @param _tokenId is the token whose external URL will be returned.\\r\\n     * @return externalUrl is the external URL for the token.\\r\\n     */\\r\\n    function externalUrl(uint256 _tokenId) public view returns (string memory) {\\r\\n        if (bytes(tokenData[_tokenId].externalUrl).length > 0) {\\r\\n            return tokenData[_tokenId].externalUrl;\\r\\n        }\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(baseExternalUrl, Strings.toString(_tokenId))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getAttributeTuples returns the attribute data for a token.\\r\\n     * @dev This function returns the attribute data for a token.\\r\\n     * @param _tokenId is the token whose traits will be returned.\\r\\n     * @return attributes is the array of trait - tuples for the token.\\r\\n     */\\r\\n    function getAttributeTuples(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (Attribute[] memory) {\\r\\n        return attributes[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getDescription returns the description for a token.\\r\\n     * @dev This function returns the description for a token as a string,\\r\\n     * allowing for it to be used composably in other contracts.\\r\\n     * @param _tokenId is the token whose description will be returned.\\r\\n     * @return description is the description for the token.\\r\\n     */\\r\\n    function getDescription(uint256 _tokenId) external view returns (string memory) {\\r\\n        return tokenData[_tokenId].description;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice attributesOf returns the attribute data for a token in JSON format.\\r\\n     * @dev This function returns the attribute data for a token in JSON format.\\r\\n     * @param _tokenId is the token whose traits will be returned.\\r\\n     * @return attributesJSON is a string of traits for the token in JSON format.\\r\\n     */\\r\\n    function attributesOf(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        string memory attributesJSON;\\r\\n        uint256 traitCount = attributes[_tokenId].length;\\r\\n        if (traitCount == 0) {\\r\\n            return '\\\"attributes\\\":[]';\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < traitCount; i++) {\\r\\n                if (i == 0) {\\r\\n                    attributesJSON = string(\\r\\n                        abi.encodePacked(\\r\\n                            '\\\"attributes\\\":[{\\\"trait_type\\\":\\\"',\\r\\n                            attributes[_tokenId][i].traitType,\\r\\n                            '\\\",\\\"value\\\":\\\"',\\r\\n                            attributes[_tokenId][i].value,\\r\\n                            '\\\"}'\\r\\n                        )\\r\\n                    );\\r\\n                } else {\\r\\n                    attributesJSON = string(\\r\\n                        abi.encodePacked(\\r\\n                            attributesJSON,\\r\\n                            ',{\\\"trait_type\\\":\\\"',\\r\\n                            attributes[_tokenId][i].traitType,\\r\\n                            '\\\",\\\"value\\\":\\\"',\\r\\n                            attributes[_tokenId][i].value,\\r\\n                            '\\\"}'\\r\\n                        )\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            attributesJSON = string(abi.encodePacked(attributesJSON, \\\"]\\\"));\\r\\n            return attributesJSON;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice tokenDataOf returns the input data necessary for the generative\\r\\n     * script to create/recreate a Mattos_Fine_Art token.\\r\\n     * @dev For any given token, this function returns all its on-chain data.\\r\\n     * @dev entropyString is set outside of the return to standardize this code.\\r\\n     * @param _tokenId is the token whose inputs will be returned.\\r\\n     * @return tokenData is returned in JSON format.\\r\\n     */\\r\\n    function tokenDataOf(uint256 _tokenId) public view returns (string memory) {\\r\\n        TokenData memory token = tokenData[_tokenId];\\r\\n        string memory externalUrlString = externalUrl(_tokenId);\\r\\n        string memory entropyString = Strings.toString(token.tokenEntropy);\\r\\n        string memory artistName = bytes(token.artistNameOverride).length == 0\\r\\n            ? defaultArtistName\\r\\n            : token.artistNameOverride;\\r\\n        string memory license = bytes(token.licenseOverride).length == 0\\r\\n            ? defaultLicense\\r\\n            : token.licenseOverride;\\r\\n        address royaltyReceiver = token.royaltyAddressOverride == address(0)\\r\\n            ? defaultRoyaltyAddress\\r\\n            : token.royaltyAddressOverride;\\r\\n        string memory transferData;\\r\\n        if (token.countTransfers) {\\r\\n            transferData = string(\\r\\n                abi.encodePacked(\\r\\n                    '\\\",\\\"transfer_count\\\":\\\"',\\r\\n                    Strings.toString(token.transferCount),\\r\\n                    '\\\",\\\"last_transfer_block\\\":\\\"',\\r\\n                    Strings.toString(token.lastBlockTransferred)\\r\\n                )\\r\\n            );\\r\\n        } else {\\r\\n            transferData = '\\\",\\\"transfer_count\\\":\\\"\\\",\\\"last_transfer_block\\\":\\\"';\\r\\n        }\\r\\n        string memory isFrozen = token.frozen ? \\\"true\\\" : \\\"false\\\";\\r\\n        string memory allTokenData = string(\\r\\n            abi.encodePacked(\\r\\n                '{\\\"collection\\\":\\\"',\\r\\n                collection,\\r\\n                '\\\",\\\"name\\\":\\\"',\\r\\n                token.name,\\r\\n                '\\\",\\\"description\\\":\\\"',\\r\\n                token.description,\\r\\n                '\\\",\\\"artist\\\":\\\"',\\r\\n                artistName\\r\\n            )\\r\\n        );\\r\\n        allTokenData = string(\\r\\n            abi.encodePacked(\\r\\n                allTokenData,\\r\\n                '\\\",\\\"image\\\":\\\"',\\r\\n                token.mediaImage,\\r\\n                '\\\",\\\"animation\\\":\\\"',\\r\\n                token.mediaAnimation,\\r\\n                '\\\",\\\"width_ratio\\\":\\\"',\\r\\n                Strings.toString(token.widthRatio),\\r\\n                '\\\",\\\"height_ratio\\\":\\\"',\\r\\n                Strings.toString(token.heightRatio),\\r\\n                '\\\",\\\"media_type\\\":\\\"',\\r\\n                Strings.toString(token.mediaType),\\r\\n                '\\\",\\\"token_data_frozen\\\":\\\"',\\r\\n                isFrozen,\\r\\n                '\\\",\\\"license\\\":\\\"',\\r\\n                license\\r\\n            )\\r\\n        );\\r\\n        allTokenData = string(\\r\\n            abi.encodePacked(\\r\\n                allTokenData,\\r\\n                '\\\",\\\"token_entropy\\\":\\\"',\\r\\n                entropyString,\\r\\n                transferData,\\r\\n                '\\\",\\\"additional_data\\\":\\\"',\\r\\n                additionalDataOf(_tokenId),\\r\\n                '\\\",\\\"website\\\":\\\"',\\r\\n                projectWebsite,\\r\\n                '\\\",\\\"external_url\\\":\\\"',\\r\\n                externalUrlString,\\r\\n                '\\\",\\\"royalty_address\\\":\\\"',\\r\\n                Strings.toHexString(uint160(royaltyReceiver), 20),\\r\\n                '\\\",\\\"royalty_bps\\\":\\\"',\\r\\n                Strings.toString(royaltyBPS),\\r\\n                '\\\",'\\r\\n            )\\r\\n        );\\r\\n        allTokenData = string(\\r\\n            abi.encodePacked(allTokenData, attributesOf(_tokenId), \\\"}\\\")\\r\\n        );\\r\\n        return allTokenData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice isTokenLocked returns whether a token is locked.\\r\\n     * @dev This function returns whether a token is locked. If the current\\r\\n     * block is less than the unlockBlock value, the token is locked.\\r\\n     * @param _tokenId is the token to check.\\r\\n     */\\r\\n    function isTokenLocked(uint256 _tokenId) public view returns (bool) {\\r\\n        return block.number < tokenData[_tokenId].unlockBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice getRemainingLockupBlocks returns the number of blocks remaining\\r\\n     * until a token is unlocked.\\r\\n     * @dev The token automatically unlocks once the block number exceeds the\\r\\n     * unlockBlock value.\\r\\n     * @param _tokenId is the token to check.\\r\\n     */\\r\\n    function getRemainingLockupBlocks(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (uint256) {\\r\\n        if (block.number >= tokenData[_tokenId].unlockBlock) {\\r\\n            return 0;\\r\\n        }\\r\\n        return tokenData[_tokenId].unlockBlock - block.number;\\r\\n    }\\r\\n\\r\\n    // ARTIST CONTROLS\\r\\n    // These functions have various levels of artist-only control\\r\\n    // mechanisms in place.\\r\\n    // All functions should use onlyArtist modifier.\\r\\n\\r\\n    /**\\r\\n     * @notice changeMaxSupply allows changes to the maximum iteration count,\\r\\n     * a value that is checked against during mint.\\r\\n     * @dev This function will only update the maxSupply variable if the\\r\\n     * submitted value is greater than or equal to the current number of minted\\r\\n     * tokens. maxSupply is used in the internal _minter function to cap the\\r\\n     * number of mintable tokens.\\r\\n     * @param _maxSupply is the new maximum supply.\\r\\n     */\\r\\n    function changeMaxSupply(uint256 _maxSupply) external onlyArtist {\\r\\n        require(_maxSupply >= tokensMinted.current());\\r\\n        maxSupply = _maxSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setArtistName allows the artist to update their name.\\r\\n     * @dev This function is used to update the defaultArtistName variable.\\r\\n     * @param _defaultArtistName is the new artist name.\\r\\n     */\\r\\n    function setDefaultArtistName(\\r\\n        string memory _defaultArtistName\\r\\n    ) external onlyArtist {\\r\\n        defaultArtistName = _defaultArtistName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setDefaultLicense allows the artist to update the default license.\\r\\n     * @dev This function is used to update the defaultLicense variable.\\r\\n     * @param _defaultLicense is the new default license.\\r\\n     */\\r\\n    function setDefaultLicense(\\r\\n        string memory _defaultLicense\\r\\n    ) external onlyArtist {\\r\\n        defaultLicense = _defaultLicense;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setCollection allows the artist to update the collection name.\\r\\n     * @dev This function is used to update the collection variable.\\r\\n     * @param _collection is the new collection name.\\r\\n     */\\r\\n    function setCollection(string memory _collection) external onlyArtist {\\r\\n        collection = _collection;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the collection description.\\r\\n     * @dev This is separate from other update functions because the collection description\\r\\n     * size may be large and thus expensive to update.\\r\\n     * @param _collectionDescription is the new collection description.\\r\\n     */\\r\\n    function setCollectionDescription(\\r\\n        string memory _collectionDescription\\r\\n    ) external onlyArtist {\\r\\n        collectionDescription = _collectionDescription;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the base external URL.\\r\\n     * @dev If this is set, and no data is written to the token's externalUrl field, baseExternalUrl/tokenId will be returned from tokenDataOf.\\r\\n     * If this is not set or if any data is written to the token's externalUrl field, the token's externalUrl field will be returned from tokenDataOf.\\r\\n     * @param _baseExternalUrl is the new external base URL. It should end with a slash.\\r\\n     */\\r\\n    function setBaseExternalUrl(\\r\\n        string memory _baseExternalUrl\\r\\n    ) external onlyArtist {\\r\\n        baseExternalUrl = _baseExternalUrl;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the collection notes, which are general and collection-wide.\\r\\n     * @dev This is separate from other update functions because it's unlikely to change.\\r\\n     * @param _collectionNotes new collection notes.\\r\\n     */\\r\\n    function setCollectionNotes(\\r\\n        string memory _collectionNotes\\r\\n    ) external onlyArtist {\\r\\n        collectionNotes = _collectionNotes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setProjectWebsite allows the artist to update the project's website.\\r\\n     * @dev This function is used to update the projectWebsite variable.\\r\\n     * @param _projectWebsite is the new projectWebsite.\\r\\n     */\\r\\n    function setProjectWebsite(\\r\\n        string memory _projectWebsite\\r\\n    ) external onlyArtist {\\r\\n        projectWebsite = _projectWebsite;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setTokenData fills in data required to actualize a token with custom data.\\r\\n     * @dev this is separated from MINT functions to allow flexibility in sales or\\r\\n     * token distribution. Platform is allowed to access this function to assist\\r\\n     * artists and to replace URI's as needed if decentralized storage fails.\\r\\n     * Token must already be minted. tokensMinted.current() is always the last token's Id\\r\\n     * (tokens start at index 1).\\r\\n     * @param _tokenId is the token who's data is being set\\r\\n     * @param _name is the name of the token\\r\\n     * @param _mediaImage is the token mediaImage (additionalData may be used for more info)\\r\\n     * @param _mediaType is the type of media (additionalData may be used for more info)\\r\\n     * 0 for decentralized storage link(s) (eg. IPFS or Arweave)\\r\\n     * 1 for directly stored data (eg. escaped or base64 encoded SVG)\\r\\n     * 2 for generated from script (eg. javascript code)\\r\\n     * (additional types may supported in the future)\\r\\n     * 204 for media accessible elsewhere in smart contract (eg. standard / non-escaped SVG code)\\r\\n     * @param _description is the description of the NFT content.\\r\\n     * @param _tokenEntropy is the token's entropy, used for random number generation or image creation.\\r\\n     * @param _additionalData is any on-chain data specific to the token.\\r\\n     * @param _externalUrl is the external URL for the token.\\r\\n     * @param _attributesArray is the token's attributes in one-dimensional string array,\\r\\n     * eg. [\\\"color\\\", \\\"red\\\", \\\"size\\\", \\\"large\\\"]\\r\\n     * @param _dimensions is a uint8 array of widthRatio and heightRatio data.\\r\\n     */\\r\\n    function setTokenData(\\r\\n        uint256 _tokenId,\\r\\n        string memory _name,\\r\\n        string memory _mediaImage,\\r\\n        string memory _mediaAnimation,\\r\\n        uint8 _mediaType,\\r\\n        string memory _description,\\r\\n        uint256 _tokenEntropy,\\r\\n        string memory _additionalData,\\r\\n        string memory _externalUrl,\\r\\n        string[] memory _attributesArray,\\r\\n        uint8[] memory _dimensions\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        require(_tokenId < tokensMinted.current() + 1);\\r\\n        TokenData storage updateToken = tokenData[_tokenId];\\r\\n        if (bytes(_name).length > 0) updateToken.name = _name;\\r\\n        if (bytes(_mediaImage).length > 0) updateToken.mediaImage = _mediaImage;\\r\\n        if (bytes(_mediaAnimation).length > 0)\\r\\n            updateToken.mediaAnimation = _mediaAnimation;\\r\\n        if (_mediaType != updateToken.mediaType)\\r\\n            updateToken.mediaType = _mediaType;\\r\\n        if (bytes(_description).length > 0)\\r\\n            updateToken.description = _description;\\r\\n        if (_tokenEntropy != updateToken.tokenEntropy)\\r\\n            updateToken.tokenEntropy = _tokenEntropy;\\r\\n        if (bytes(_additionalData).length > 0)\\r\\n            updateToken.additionalData = _additionalData;\\r\\n        if (_attributesArray.length > 0) {\\r\\n            _addAttributes(_tokenId, _attributesArray);\\r\\n        }\\r\\n        if (bytes(_externalUrl).length > 0)\\r\\n            updateToken.externalUrl = _externalUrl;\\r\\n        if (_dimensions.length > 0) {\\r\\n            updateToken.widthRatio = _dimensions[0];\\r\\n            updateToken.heightRatio = _dimensions[1];\\r\\n        } else if (updateToken.widthRatio == 0) {\\r\\n            updateToken.widthRatio = 1;\\r\\n            updateToken.heightRatio = 1;\\r\\n        }\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setTokenOverrides fills in override data for a token.\\r\\n     * @dev This function is used to update the tokenData struct for a token.\\r\\n     * @param _tokenId is the token who's data is being set\\r\\n     * @param _licenseOverride is the new license override.\\r\\n     * @param _artistNameOverride is the new artist name override.\\r\\n     * @param _royaltyAddressOverride is the new royalty address override.\\r\\n     */\\r\\n    function setTokenOverrides(\\r\\n        uint256 _tokenId,\\r\\n        string memory _licenseOverride,\\r\\n        string memory _artistNameOverride,\\r\\n        address _royaltyAddressOverride\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        TokenData storage updateToken = tokenData[_tokenId];\\r\\n        if (bytes(_licenseOverride).length > 0)\\r\\n            updateToken.licenseOverride = _licenseOverride;\\r\\n        if (bytes(_artistNameOverride).length > 0)\\r\\n            updateToken.artistNameOverride = _artistNameOverride;\\r\\n        if (_royaltyAddressOverride != address(0))\\r\\n            updateToken.royaltyAddressOverride = _royaltyAddressOverride;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice setCountTransferBool sets whether a token counts transfers.\\r\\n     * @dev This function is used to update the tokenData struct for a token.\\r\\n     * @param _tokenId is the token who's data is being set\\r\\n     * @param _countTransfers is the new countTransfers bool.\\r\\n     */\\r\\n    function setCountTransferBool(\\r\\n        uint256 _tokenId,\\r\\n        bool _countTransfers\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].countTransfers = _countTransfers;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds a token attribute pair to a token's traits array.\\r\\n     * @dev Each tuple is a attribute type and value, eg. \\\"color\\\" and \\\"red\\\".\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _traitType is the attribute type.\\r\\n     * @param _value is the attribute value.\\r\\n     */\\r\\n    function pushTokenTrait(\\r\\n        uint256 _tokenId,\\r\\n        string memory _traitType,\\r\\n        string memory _value\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        Attribute memory newTrait = Attribute(_traitType, _value);\\r\\n        attributes[_tokenId].push(newTrait);\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Locks a token for a specified number of blocks.\\r\\n     * @dev This function is used to lock a token for a specified number of blocks.\\r\\n     * Only the artist can lock a token if owned, and for a maximum period of 2,000,000 blocks.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _lockPeriodInBlocks is the number of blocks to lock the token for.\\r\\n     */\\r\\n    function setTokenLock(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lockPeriodInBlocks\\r\\n    ) external onlyArtist {\\r\\n        require(ownerOf(_tokenId) == artistAddress, \\\"Artist must own token\\\");\\r\\n        require(_lockPeriodInBlocks <= 2000000, \\\"Lockup period too long\\\");\\r\\n        _lockToken(_tokenId, _lockPeriodInBlocks);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates a token lock.\\r\\n     * @dev This function is used to shorten the lock period of a currently locked token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _lockPeriodInBlocks is the number of blocks to lock the token for.\\r\\n     */\\r\\n    function updateTokenLock(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lockPeriodInBlocks\\r\\n    ) external onlyArtist {\\r\\n        require(isTokenLocked(_tokenId));\\r\\n        require(\\r\\n            _lockPeriodInBlocks < getRemainingLockupBlocks(_tokenId),\\r\\n            \\\"Lockup period too long\\\"\\r\\n        );\\r\\n        _lockToken(_tokenId, _lockPeriodInBlocks);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates a token trait pair in a token's attributes array.\\r\\n     * @dev Index can be ascertained from the public getter function for attributes.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _attributeIndex is the index of the attribute to update.\\r\\n     * @param _traitType is the attribute type.\\r\\n     * @param _value is the attribute value.\\r\\n     */\\r\\n    function updateTokenTrait(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _attributeIndex,\\r\\n        string memory _traitType,\\r\\n        string memory _value\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        attributes[_tokenId][_attributeIndex].traitType = _traitType;\\r\\n        attributes[_tokenId][_attributeIndex].value = _value;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes a token trait pair from a token's attributes array.\\r\\n     * @dev Index can be ascertained from the public getter function for attributes.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _attributeIndex is the index of the attribute to remove.\\r\\n     */\\r\\n    function removeTokenTrait(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _attributeIndex\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        uint256 lastAttributeIndex = attributes[_tokenId].length - 1;\\r\\n        attributes[_tokenId][_attributeIndex] = attributes[_tokenId][\\r\\n            lastAttributeIndex\\r\\n        ];\\r\\n        attributes[_tokenId].pop();\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the name of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _name is the new name.\\r\\n     */\\r\\n    function updateTokenName(\\r\\n        uint256 _tokenId,\\r\\n        string memory _name\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].name = _name;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the mediaImage of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _mediaImage is the new mediaImage.\\r\\n     */\\r\\n    function updateTokenMediaImage(\\r\\n        uint256 _tokenId,\\r\\n        string memory _mediaImage\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].mediaImage = _mediaImage;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the mediaAnimation of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _mediaAnimation is the new mediaAnimation.\\r\\n     */\\r\\n    function updateTokenMediaAnimation(\\r\\n        uint256 _tokenId,\\r\\n        string memory _mediaAnimation\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].mediaAnimation = _mediaAnimation;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the description of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _description is the new description.\\r\\n     */\\r\\n    function updateTokenDescription(\\r\\n        uint256 _tokenId,\\r\\n        string memory _description\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].description = _description;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the externalUrl of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _externalUrl is the new externalUrl.\\r\\n     */\\r\\n    function updateTokenExternalUrl(\\r\\n        uint256 _tokenId,\\r\\n        string memory _externalUrl\\r\\n    ) external onlyArtist {\\r\\n        tokenData[_tokenId].externalUrl = _externalUrl;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the royalty address per token.\\r\\n     * @dev This updates a mapping that is used by royaltyInfo().\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _royaltyAddressOverride is the address for that token.\\r\\n     */\\r\\n    function updateRoyaltyAddressOverride(\\r\\n        uint256 _tokenId,\\r\\n        address _royaltyAddressOverride\\r\\n    ) external onlyArtist {\\r\\n        tokenData[_tokenId].royaltyAddressOverride = _royaltyAddressOverride;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** @notice Updates the additionalData of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _additionalData is the new additionalData.\\r\\n     */\\r\\n    function updateTokenAdditionalData(\\r\\n        uint256 _tokenId,\\r\\n        string memory _additionalData\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].additionalData = _additionalData;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the artistNameOverride of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _artistNameOverride is the new artistNameOverride.\\r\\n     */\\r\\n    function updateArtistNameOverride(\\r\\n        uint256 _tokenId,\\r\\n        string memory _artistNameOverride\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].artistNameOverride = _artistNameOverride;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows manual setting tokenEntropy for a token.\\r\\n     * @dev This is the seed for the Stable Diffusion Model.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _tokenEntropy is the new tokenEntropy.\\r\\n     */\\r\\n    function updateTokenEntropy(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _tokenEntropy\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].tokenEntropy = _tokenEntropy;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the mediaType of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _mediaType is the new mediaType.\\r\\n     */\\r\\n    function updateTokenMediaType(\\r\\n        uint256 _tokenId,\\r\\n        uint8 _mediaType\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].mediaType = _mediaType;\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /** Updates the dimensions of a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _dimensions is a uint8 array of widthRatio and heightRatio data.\\r\\n     */\\r\\n    function updateTokenDimensions(\\r\\n        uint256 _tokenId,\\r\\n        uint8[] memory _dimensions\\r\\n    ) external onlyArtist notFrozen(_tokenId) {\\r\\n        tokenData[_tokenId].widthRatio = _dimensions[0];\\r\\n        tokenData[_tokenId].heightRatio = _dimensions[1];\\r\\n        emit TokenUpdated(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice toggleMint pauses and unpauses mint.\\r\\n     */\\r\\n    function toggleMint() external onlyArtist {\\r\\n        mintActive = !mintActive;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice freezeToken freezes a token's data.\\r\\n     */\\r\\n    function freezeToken(uint256 _tokenId) external onlyArtist {\\r\\n        tokenData[_tokenId].frozen = true;\\r\\n    }\\r\\n\\r\\n    // MINTER CONTROLS\\r\\n    // These functione can only be called by the minter or artist.\\r\\n\\r\\n    /**\\r\\n     * @notice mintToAddress can only be called by the artist and the minter\\r\\n     * account, and it mints to a specified address.\\r\\n     * @dev Variation of a mint function that uses a submitted address as the\\r\\n     * account to mint to. The artist account can bypass the mintActive requirement.\\r\\n     * @param _to is the address to send the token to.\\r\\n     */\\r\\n    function mintToAddress(address _to) external {\\r\\n        require(msg.sender == artistAddress || msg.sender == minterAddress);\\r\\n        require(mintActive || msg.sender == artistAddress);\\r\\n        _minter(_to);\\r\\n    }\\r\\n\\r\\n    // OWNER CONTROLS\\r\\n    // These are contract-level controls.\\r\\n    // All should use the onlyOwner modifier.\\r\\n\\r\\n    /**\\r\\n     * @notice ownerPauseMint pauses minting.\\r\\n     * @dev onlyOwner modifier gates access.\\r\\n     */\\r\\n    function ownerPauseMint() external onlyOwner {\\r\\n        mintActive = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ownerSetMinterAddress sets/updates the project's approved minting address.\\r\\n     * @dev minter can be any type of account.\\r\\n     * @param _minterAddress is the new account to be set as the minter.\\r\\n     */\\r\\n    function ownerSetMinterAddress(address _minterAddress) external onlyOwner {\\r\\n        minterAddress = _minterAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ownerSetAddresses sets authorized addresses.\\r\\n     * @dev This must be set prior to executing many other functions.\\r\\n     * @param _artistAddress is the new artist address.\\r\\n     * @param _platformAddress is the new platform address.\\r\\n     */\\r\\n    function ownerSetAddresses(\\r\\n        address _artistAddress,\\r\\n        address _platformAddress\\r\\n    ) external onlyOwner {\\r\\n        artistAddress = _artistAddress;\\r\\n        platformAddress = _platformAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ownerSetRoyaltyData updates the royalty address and BPS for the project.\\r\\n     * @dev This function allows changes to the payments address and secondary sale\\r\\n     * royalty amount. After setting values, _setDefaultRoyalty is called in\\r\\n     * order to update the imported EIP-2981 contract functions.\\r\\n     * @param _defaultRoyaltyAddress is the new payments address.\\r\\n     * @param _royaltyBPS is the new projet royalty amount, measured in\\r\\n     * base percentage points.\\r\\n     */\\r\\n    function ownerSetRoyaltyData(\\r\\n        address _defaultRoyaltyAddress,\\r\\n        uint96 _royaltyBPS\\r\\n    ) external onlyOwner {\\r\\n        defaultRoyaltyAddress = _defaultRoyaltyAddress;\\r\\n        royaltyBPS = _royaltyBPS;\\r\\n        _setDefaultRoyalty(_defaultRoyaltyAddress, _royaltyBPS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice ownerSetBaseURI sets/updates the project's baseURI.\\r\\n     * @dev baseURI is appended with tokenId and is returned in tokenURI calls.\\r\\n     * @dev _newBaseURI is used instead of _baseURI because an override function\\r\\n     * with that name already exists.\\r\\n     * @param _newBaseURI is the API endpoint base for tokenURI calls.\\r\\n     */\\r\\n    function ownerSetBaseURI(string memory _newBaseURI) external onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    // INTERNAL FUNCTIONS\\r\\n    // These are helper functions that can only be called from within this contract.\\r\\n\\r\\n    /**\\r\\n     * @notice _minter is the internal function that generates mints.\\r\\n     * @dev Minting function called by the public 'mintToAddress' function.\\r\\n     * The artist can bypass the payment requirement.\\r\\n     * @param _to is the address to send the token to.\\r\\n     */\\r\\n    function _minter(address _to) internal {\\r\\n        require(tokensMinted.current() < maxSupply, \\\"All minted.\\\");\\r\\n        tokensMinted.increment();\\r\\n        uint256 tokenId = tokensMinted.current();\\r\\n        _safeMint(_to, tokenId);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n     * @notice _addAttributes adds attributes to a token.\\r\\n     * @dev This function is used to add attributes to a token.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _attributesArray is the token's attributes in one-dimensional string array,\\r\\n     */\\r\\n    function _addAttributes(uint256 _tokenId, string[] memory _attributesArray) internal {\\r\\n            for (uint256 i = 0; i < _attributesArray.length; i += 2) {\\r\\n                Attribute memory newAttribute = Attribute(\\r\\n                    _attributesArray[i],\\r\\n                    _attributesArray[i + 1]\\r\\n                );\\r\\n                attributes[_tokenId].push(newAttribute);\\r\\n            }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to execute token locking logic.\\r\\n     * @param _tokenId is the token to update.\\r\\n     * @param _lockPeriodInBlocks is the number of blocks to lock the token for.\\r\\n     */\\r\\n    function _lockToken(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lockPeriodInBlocks\\r\\n    ) internal {\\r\\n        uint256 unlockBlock = block.number + _lockPeriodInBlocks;\\r\\n        tokenData[_tokenId].unlockBlock = unlockBlock;\\r\\n        emit TokenLocked(_tokenId, unlockBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice _strToUint converts a string to a uint.\\r\\n     * @dev This function is called if a tokenId reference is likely, in the additionalData storage.\\r\\n     * If the string is not a number, the conversion will not be accurate and the function will return false.\\r\\n     * @param _str is the string to convert.\\r\\n     * @return res is the converted uint.\\r\\n     * @return success is whether the conversion was successful.\\r\\n     */\\r\\n    function _strToUint(\\r\\n        string memory _str\\r\\n    ) internal pure returns (uint256 res, bool success) {\\r\\n        for (uint256 i = 0; i < bytes(_str).length; i++) {\\r\\n            if (\\r\\n                (uint8(bytes(_str)[i]) - 48) < 0 ||\\r\\n                (uint8(bytes(_str)[i]) - 48) > 9\\r\\n            ) {\\r\\n                return (0, false);\\r\\n            }\\r\\n            res +=\\r\\n                (uint8(bytes(_str)[i]) - 48) *\\r\\n                10 ** (bytes(_str).length - i - 1);\\r\\n        }\\r\\n        return (res, true);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Royalty.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../common/ERC2981.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\\n * information.\\n *\\n * Royalty information can be specified globally for all token ids via {ERC2981-_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {ERC2981-_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC721Royalty is ERC2981, ERC721 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n        _resetTokenRoyalty(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"additionalDataOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artistAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"attributesOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExternalUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"changeMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNotes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultArtistName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLicense\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"externalUrl\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"freezeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAttributeTuples\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct FREESTYLE_HAIKU.Attribute[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRemainingLockupBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerPauseMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_artistAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"ownerSetAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"ownerSetBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterAddress\",\"type\":\"address\"}],\"name\":\"ownerSetMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultRoyaltyAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyBPS\",\"type\":\"uint96\"}],\"name\":\"ownerSetRoyaltyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectWebsite\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"pushTokenTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attributeIndex\",\"type\":\"uint256\"}],\"name\":\"removeTokenTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBPS\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseExternalUrl\",\"type\":\"string\"}],\"name\":\"setBaseExternalUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_collection\",\"type\":\"string\"}],\"name\":\"setCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_collectionDescription\",\"type\":\"string\"}],\"name\":\"setCollectionDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_collectionNotes\",\"type\":\"string\"}],\"name\":\"setCollectionNotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_countTransfers\",\"type\":\"bool\"}],\"name\":\"setCountTransferBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_defaultArtistName\",\"type\":\"string\"}],\"name\":\"setDefaultArtistName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_defaultLicense\",\"type\":\"string\"}],\"name\":\"setDefaultLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_projectWebsite\",\"type\":\"string\"}],\"name\":\"setProjectWebsite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mediaImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mediaAnimation\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_mediaType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_tokenEntropy\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_additionalData\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_externalUrl\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_attributesArray\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_dimensions\",\"type\":\"uint8[]\"}],\"name\":\"setTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInBlocks\",\"type\":\"uint256\"}],\"name\":\"setTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_licenseOverride\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_artistNameOverride\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyAddressOverride\",\"type\":\"address\"}],\"name\":\"setTokenOverrides\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenDataOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_artistNameOverride\",\"type\":\"string\"}],\"name\":\"updateArtistNameOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_royaltyAddressOverride\",\"type\":\"address\"}],\"name\":\"updateRoyaltyAddressOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_additionalData\",\"type\":\"string\"}],\"name\":\"updateTokenAdditionalData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"updateTokenDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"_dimensions\",\"type\":\"uint8[]\"}],\"name\":\"updateTokenDimensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenEntropy\",\"type\":\"uint256\"}],\"name\":\"updateTokenEntropy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_externalUrl\",\"type\":\"string\"}],\"name\":\"updateTokenExternalUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriodInBlocks\",\"type\":\"uint256\"}],\"name\":\"updateTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_mediaAnimation\",\"type\":\"string\"}],\"name\":\"updateTokenMediaAnimation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_mediaImage\",\"type\":\"string\"}],\"name\":\"updateTokenMediaImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_mediaType\",\"type\":\"uint8\"}],\"name\":\"updateTokenMediaType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_attributeIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_traitType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"updateTokenTrait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FREESTYLE_HAIKU", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}