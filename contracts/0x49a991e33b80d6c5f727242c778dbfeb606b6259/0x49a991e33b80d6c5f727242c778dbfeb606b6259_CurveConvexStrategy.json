{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (token/ERC20/extensions/ERC4626.sol)\\n\\n// ####################################################\\n// ################## IMPORTANT #######################\\n// ####################################################\\n// NOTE fija Finance: ETH native compatibility -- Forked OZ contract and updated deposit method to become payable.\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * CAUTION: When the vault is empty or nearly empty, deposits are at high risk of being stolen through frontrunning with\\n * a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _decimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _decimals = success ? assetDecimals : super.decimals();\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(\\n        IERC20 asset_\\n    ) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_)\\n            .staticcall(\\n                abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n            );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are read from the underlying asset in the constructor and cached. If this fails (e.g., the asset\\n     * has not been created yet), the cached value is set to a default obtained by `super.decimals()` (which depends on\\n     * inheritance but is most likely 18). Override this function in order to set a guaranteed hardcoded value.\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals()\\n        public\\n        view\\n        virtual\\n        override(IERC20Metadata, ERC20)\\n        returns (uint8)\\n    {\\n        return _decimals;\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(\\n        uint256 assets\\n    ) public view virtual override returns (uint256 shares) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view virtual override returns (uint256 assets) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(\\n        address\\n    ) public view virtual override returns (uint256) {\\n        return _isVaultCollateralized() ? type(uint256).max : 0;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) public payable virtual override returns (uint256) {\\n        require(\\n            assets <= maxDeposit(receiver),\\n            \\\"ERC4626: deposit more than max\\\"\\n        );\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(\\n            assets <= maxWithdraw(owner),\\n            \\\"ERC4626: withdraw more than max\\\"\\n        );\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n        uint256 assets = previewRedeem(shares);\\n\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     *\\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\n     * would represent an infinite amount of shares.\\n     */\\n    function _convertToShares(\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? _initialConvertToShares(assets, rounding)\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToAssets} when overriding it.\\n     */\\n    function _initialConvertToShares(\\n        uint256 assets,\\n        Math.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 shares) {\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0)\\n                ? _initialConvertToAssets(shares, rounding)\\n                : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) to apply when the vault is empty.\\n     *\\n     * NOTE: Make sure to keep this function consistent with {_initialConvertToShares} when overriding it.\\n     */\\n    function _initialConvertToAssets(\\n        uint256 shares,\\n        Math.Rounding /*rounding*/\\n    ) internal view virtual returns (uint256 assets) {\\n        return shares;\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Checks if vault is \\\"healthy\\\" in the sense of having assets backing the circulating shares.\\n     */\\n    function _isVaultCollateralized() private view returns (bool) {\\n        return totalAssets() > 0 || totalSupply() == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n// FijaVault errors\\nerror VaultNoAssetMatching();\\nerror VaultNotWhitelisted();\\nerror VaultNoUpdateCandidate();\\nerror VaultUpdateStrategyTimeError();\\nerror VaultStrategyUndefined();\\n\\n// FijaACL errors\\nerror ACLOwnerZero();\\nerror ACLGovZero();\\nerror ACLResellZero();\\nerror ACLNotOwner();\\nerror ACLNotGov();\\nerror ACLNotGovOwner();\\nerror ACLNotReseller();\\nerror ACLNotWhitelist();\\nerror ACLTransferUserNotWhitelist();\\nerror ACLDepositReceiverNotWhitelist();\\nerror ACLRedeemWithdrawReceiverOwnerNotWhitelist();\\nerror ACLWhitelistAddressZero();\\n\\n// Strategy errors\\nerror FijaUnauthorizedFlash();\\nerror FijaInvalidAssetFlash();\\n\\n// Transfer errors\\nerror TransferDisbalance();\\nerror TransferFailed();\\n\\n// emergency mode restriction\\nerror FijaInEmergencyMode();\\n\\nerror FijaInsufficientAmountToWithdraw();\\nerror FijaZeroInput();\\n\"\r\n    },\r\n    \"contracts/base/FijaACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IFijaACL.sol\\\";\\nimport \\\"./errors.sol\\\";\\n\\n///\\n/// @title Access control contract\\n/// @author Fija\\n/// @notice Provides access rights management to child contracts\\n/// @dev some of the methods have default access modifiers and\\n/// some do not have restrictions. Please verify and override to have expected behaviour\\n/// *********** IMPORTANT **************\\n/// whitelist functions in the contract are not protected\\n/// it is responsibility of child contracts to define access rights\\n///\\nabstract contract FijaACL is IFijaACL {\\n    address private _owner;\\n    address private _governance;\\n    address private _reseller;\\n    mapping(address => bool) private _whitelist;\\n\\n    constructor(address governance_, address reseller_) {\\n        _transferOwnership(msg.sender);\\n        _transferGovernance(governance_);\\n        _transferReseller(reseller_);\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account that's not whitelisted.\\n    ///\\n    modifier onlyWhitelisted() {\\n        _checkWhitelist();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the owner.\\n    ///\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the Governance.\\n    ///\\n    modifier onlyGovernance() {\\n        _checkGovernance();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the Reseller.\\n    ///\\n    modifier onlyReseller() {\\n        _checkReseller();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if called by any account other than the Governance or Owner.\\n    ///\\n    modifier onlyOwnerOrGovernance() {\\n        _checkOwnerOrGovernance();\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if receiver and owner are not in the whitelist\\n    ///\\n    modifier onlyReceiverOwnerWhitelisted(address receiver, address owner_) {\\n        _checkReceiverOwnerWhitelisted(receiver, owner_);\\n        _;\\n    }\\n\\n    ///\\n    /// @dev Throws if receiver is not in the whitelist\\n    ///\\n    modifier onlyReceiverWhitelisted(address receiver) {\\n        _checkReceiverWhitelisted(receiver);\\n        _;\\n    }\\n\\n    ///\\n    /// NOTE: emits IFijaACL.WhitelistedAddressAdded\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function addAddressToWhitelist(\\n        address addr\\n    ) public virtual override returns (bool) {\\n        if (isWhitelisted(addr)) {\\n            return false;\\n        }\\n        _addAddressToWhitelist(addr);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// NOTE: emits IFijaACL.WhitelistedAddressRemoved\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function removeAddressFromWhitelist(\\n        address addr\\n    ) public virtual override returns (bool) {\\n        if (!isWhitelisted(addr)) {\\n            return false;\\n        }\\n        _removeAddressFromWhitelist(addr);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function owner() public view virtual override returns (address) {\\n        return _owner;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function governance() public view virtual override returns (address) {\\n        return _governance;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function reseller() public view virtual override returns (address) {\\n        return _reseller;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function isWhitelisted(\\n        address addr\\n    ) public view virtual override returns (bool) {\\n        return _whitelist[addr];\\n    }\\n\\n    ///\\n    /// NOTE: only owner access, emits IFijaACL.OwnershipTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function transferOwnership(\\n        address newOwner\\n    ) external virtual override onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    ///\\n    /// NOTE: only owner or governance access, emits IFijaACL.GovernanceTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function transferGovernance(\\n        address newGovernance\\n    ) external virtual override onlyOwnerOrGovernance {\\n        if (newGovernance == address(0)) {\\n            revert ACLGovZero();\\n        }\\n        _transferGovernance(newGovernance);\\n    }\\n\\n    ///\\n    /// NOTE: only governance access, emits IFijaACL.ResellerTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function transferReseller(\\n        address newReseller\\n    ) external virtual override onlyGovernance {\\n        if (newReseller == address(0)) {\\n            revert ACLResellZero();\\n        }\\n        _transferReseller(newReseller);\\n    }\\n\\n    ///\\n    /// NOTE: only governance access, emits IFijaACL.GovernanceTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function renounceGovernance() external virtual override onlyGovernance {\\n        _transferGovernance(address(0));\\n    }\\n\\n    ///\\n    /// NOTE: only reseller access, emits IFijaACL.ResellerTransferred\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function renounceReseller() external virtual override onlyReseller {\\n        _transferReseller(address(0));\\n    }\\n\\n    ///\\n    /// NOTE: owner cannot be zero address\\n    /// @dev Helper method for transferOwnership.\\n    /// Changes ownership access to new owner address.\\n    /// @param newOwner address of new owner\\n    ///\\n    function _transferOwnership(address newOwner) internal virtual {\\n        if (newOwner == address(0)) {\\n            revert ACLOwnerZero();\\n        }\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    ///\\n    /// @dev Helper method for transferGovernance.\\n    /// Changes governance access to new governance address.\\n    /// @param newGovernance address of new governance\\n    ///\\n    function _transferGovernance(address newGovernance) internal virtual {\\n        address oldGovernance = _governance;\\n        _governance = newGovernance;\\n        emit GovernanceTransferred(oldGovernance, newGovernance);\\n    }\\n\\n    ///\\n    /// @dev Helper method for transferReseller.\\n    /// Changes reseller access to new reseller address.\\n    /// @param newReseller address of new reseller\\n    ///\\n    function _transferReseller(address newReseller) internal virtual {\\n        address oldReseller = _reseller;\\n        _reseller = newReseller;\\n        emit ResellerTransferred(oldReseller, newReseller);\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyOwner modifier\\n    ///\\n    function _checkOwner() internal view virtual {\\n        if (owner() != msg.sender) {\\n            revert ACLNotOwner();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyGovernance modifier\\n    ///\\n    function _checkGovernance() internal view virtual {\\n        if (governance() != msg.sender) {\\n            revert ACLNotGov();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyOwnerOrGovernance modifier\\n    ///\\n    function _checkOwnerOrGovernance() internal view virtual {\\n        if (governance() != msg.sender && owner() != msg.sender) {\\n            revert ACLNotGovOwner();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyReseller modifier\\n    ///\\n    function _checkReseller() internal view virtual {\\n        if (reseller() != msg.sender) {\\n            revert ACLNotReseller();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyWhitelisted modifier\\n    ///\\n    function _checkWhitelist() internal view virtual {\\n        if (!isWhitelisted(msg.sender)) {\\n            revert ACLNotWhitelist();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyReceiverOwnerWhitelisted modifier\\n    ///\\n    function _checkReceiverOwnerWhitelisted(\\n        address receiver,\\n        address owner_\\n    ) internal view virtual {\\n        if (!isWhitelisted(receiver) || !isWhitelisted(owner_)) {\\n            revert ACLRedeemWithdrawReceiverOwnerNotWhitelist();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for onlyReceiverWhitelisted modifier\\n    ///\\n    function _checkReceiverWhitelisted(address receiver) internal view virtual {\\n        if (!isWhitelisted(receiver)) {\\n            revert ACLDepositReceiverNotWhitelist();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method for adding address to contract whitelist.\\n    /// @param addr address to be added to the whitelist\\n    ///\\n    function _addAddressToWhitelist(address addr) internal {\\n        if (addr == address(0)) {\\n            revert ACLWhitelistAddressZero();\\n        }\\n        _whitelist[addr] = true;\\n        emit WhitelistedAddressAdded(addr);\\n    }\\n\\n    ///\\n    /// @dev Helper method for removing address from contract whitelist.\\n    /// @param addr address to be removed from the whitelist\\n    ///\\n    function _removeAddressFromWhitelist(address addr) internal {\\n        _whitelist[addr] = false;\\n        emit WhitelistedAddressRemoved(addr);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/FijaERC4626Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./ERC4626.sol\\\";\\nimport \\\"./FijaACL.sol\\\";\\nimport \\\"../interfaces/IFijaERC4626Base.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n///\\n/// @title Fija ERC4626 Base contract\\n/// @author Fija\\n/// @notice Used as template for implementing ERC4626\\n/// @dev This is mainly used for adding access rights to specific methods.\\n/// NOTE: All mint related methods are disabled from ERC4626\\n///\\nabstract contract FijaERC4626Base is IFijaERC4626Base, FijaACL, ERC4626 {\\n    using Math for uint256;\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    ///\\n    /// @dev maximum amount to deposit/redeem/withdraw in assets in single call\\n    /// NOTE: if user wants to deposits/withdrawls/redeem with amounts above this limit\\n    /// transaction will be rejected\\n    ///\\n    uint256 internal immutable MAX_TICKET_SIZE;\\n\\n    ///\\n    /// @dev maximum value of vault in assets\\n    /// NOTE: all deposits above this value will be rejected\\n    ///\\n    uint256 internal immutable MAX_VAULT_VALUE;\\n\\n    constructor(\\n        IERC20 asset_,\\n        address governance_,\\n        address reseller_,\\n        string memory tokenName_,\\n        string memory tokenSymbol_,\\n        uint256 maxTicketSize_,\\n        uint256 maxVaultValue_\\n    )\\n        ERC4626(asset_)\\n        ERC20(tokenName_, tokenSymbol_)\\n        FijaACL(governance_, reseller_)\\n    {\\n        MAX_TICKET_SIZE = maxTicketSize_;\\n        MAX_VAULT_VALUE = maxVaultValue_;\\n    }\\n\\n    ///\\n    /// @dev Throws if zero input amount (on deposit, withdraw, redeem)\\n    ///\\n    modifier nonZeroAmount(uint256 amount) {\\n        if (amount == 0) {\\n            revert FijaZeroInput();\\n        }\\n        _;\\n    }\\n\\n    ///\\n    /// @inheritdoc IERC4626\\n    ///\\n    function totalAssets()\\n        public\\n        view\\n        virtual\\n        override(IERC4626, ERC4626)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(asset()).balanceOf(address(this));\\n        }\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaERC4626Base\\n    ///\\n    function convertToTokens(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    ///\\n    /// NOTE: caller and \\\"to\\\" must be whitelisted\\n    /// @inheritdoc IERC20\\n    ///\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override(ERC20, IERC20) onlyWhitelisted returns (bool) {\\n        if (!isWhitelisted(to)) {\\n            revert ACLTransferUserNotWhitelist();\\n        }\\n        super.transfer(to, amount);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// NOTE: caller and \\\"to\\\" must be whitelisted\\n    /// @inheritdoc IERC20\\n    ///\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override(ERC20, IERC20) onlyWhitelisted returns (bool) {\\n        if (!isWhitelisted(from) || !isWhitelisted(to)) {\\n            revert ACLTransferUserNotWhitelist();\\n        }\\n        super.transferFrom(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    ///\\n    /// NOTE: only whitelisted access\\n    /// @inheritdoc IERC20\\n    ///\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override(ERC20, IERC20) onlyWhitelisted returns (bool) {\\n        return super.approve(spender, amount);\\n    }\\n\\n    ///\\n    /// NOTE: only whitelisted access\\n    /// @inheritdoc ERC20\\n    ///\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual override onlyWhitelisted returns (bool) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    ///\\n    /// NOTE: only whitelisted access\\n    /// @inheritdoc ERC20\\n    ///\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual override onlyWhitelisted returns (bool) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    ///\\n    /// NOTE: DISABLED\\n    /// @return 0\\n    /// @inheritdoc IERC4626\\n    ///\\n    function mint(\\n        uint256,\\n        address\\n    ) public virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return 0;\\n    }\\n\\n    ///\\n    /// NOTE: DISABLED\\n    /// @return 0\\n    /// @inheritdoc IERC4626\\n    ///\\n    function previewMint(\\n        uint256\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return 0;\\n    }\\n\\n    ///\\n    /// NOTE: DISABLED\\n    /// @return 0\\n    /// @inheritdoc IERC4626\\n    ///\\n    function maxMint(\\n        address\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return 0;\\n    }\\n\\n    ///\\n    /// @dev calculates maximum amount user is allowed to deposit in assets,\\n    /// this depends of current value of vault and user deposit amount.\\n    /// It is controlled by MAX_TICKET_SIZE and MAX_VAULT_VALUE\\n    /// @return maximum amount user can deposit to the vault in assets\\n    ///\\n    function maxDeposit(\\n        address receiver\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        return _maxDeposit(receiver, totalAssets());\\n    }\\n\\n    ///\\n    /// @dev calculates maximum amount user is allowed to withdraw in assets,\\n    /// this on user withdrawal amount request.\\n    /// It is controlled by MAX_TICKET_SIZE\\n    /// @return maximum amount user can withdraw from the vault in assets\\n    ///\\n    function maxWithdraw(\\n        address owner\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        uint256 assets = _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n\\n        return assets > MAX_TICKET_SIZE ? MAX_TICKET_SIZE : assets;\\n    }\\n\\n    ///\\n    /// @dev calculates maximum amount user is allowed to redeem in tokens from the vault\\n    /// It is controlled by MAX_TICKET_SIZE\\n    /// @return maximum amount user can redeem from the vault in tokens\\n    ///\\n    function maxRedeem(\\n        address owner\\n    ) public view virtual override(ERC4626, IERC4626) returns (uint256) {\\n        uint256 tokens = balanceOf(owner);\\n        uint256 assets = _convertToAssets(tokens, Math.Rounding.Down);\\n\\n        return\\n            assets > MAX_TICKET_SIZE\\n                ? convertToTokens(MAX_TICKET_SIZE)\\n                : tokens;\\n    }\\n\\n    ///\\n    /// @dev calculates amount of tokens receiver will get based on asset deposit.\\n    /// @param assets amount of assets caller wants to deposit\\n    /// @param receiver address of the owner of deposit once deposit completes, this address will receive tokens.\\n    /// @return amount of tokens receiver will receive\\n    /// NOTE: this is protected generic template method for deposits and child contracts\\n    /// should provide necessary overriding.\\n    /// Ensure to call super.deposit from child contract to enforce access rights.\\n    /// Caller and receiver must be whitelisted\\n    /// Emits IERC4626.Deposit\\n    ///\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        payable\\n        virtual\\n        override(ERC4626, IERC4626)\\n        onlyWhitelisted\\n        nonZeroAmount(assets)\\n        onlyReceiverWhitelisted(receiver)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            if (assets != msg.value) {\\n                revert TransferDisbalance();\\n            }\\n            uint256 totalAssetBeforeDeposit = totalAssets() - msg.value;\\n            require(\\n                assets <= _maxDeposit(receiver, totalAssetBeforeDeposit),\\n                \\\"ERC4626: deposit more than max\\\"\\n            );\\n\\n            uint256 supply = totalSupply();\\n            uint256 tokens = (assets == 0 || supply == 0)\\n                ? _initialConvertToShares(assets, Math.Rounding.Down)\\n                : assets.mulDiv(\\n                    supply,\\n                    totalAssetBeforeDeposit,\\n                    Math.Rounding.Down\\n                );\\n\\n            _mint(receiver, tokens);\\n\\n            emit Deposit(msg.sender, receiver, assets, tokens);\\n\\n            return tokens;\\n        } else {\\n            return super.deposit(assets, receiver);\\n        }\\n    }\\n\\n    ///\\n    /// @dev Burns exact number of tokens from owner and sends assets to receiver.\\n    /// @param tokens amount of tokens caller wants to redeem\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of tokens\\n    /// @return amount of assets receiver will receive based on exact burnt tokens\\n    /// NOTE: this is protected generic template method for redeeming and child contracts\\n    /// should provide necessary overriding.\\n    /// Ensure to call super.redeem from child contract to enforce access rights.\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function redeem(\\n        uint256 tokens,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        override(ERC4626, IERC4626)\\n        onlyWhitelisted\\n        nonZeroAmount(tokens)\\n        onlyReceiverOwnerWhitelisted(receiver, owner)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            require(\\n                tokens <= maxRedeem(owner),\\n                \\\"ERC4626: redeem more than max\\\"\\n            );\\n            uint256 assets = previewRedeem(tokens);\\n\\n            _burn(owner, tokens);\\n\\n            (bool success, ) = payable(receiver).call{value: assets}(\\\"\\\");\\n            if (!success) {\\n                revert TransferFailed();\\n            }\\n            emit Withdraw(msg.sender, receiver, owner, assets, tokens);\\n\\n            return assets;\\n        } else {\\n            return super.redeem(tokens, receiver, owner);\\n        }\\n    }\\n\\n    ///\\n    /// @dev Burns tokens from owner and sends exact number of assets to receiver\\n    /// @param assets amount of assets caller wants to withdraw\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of tokens\\n    /// @return amount of tokens burnt based on exact assets requested\\n    /// NOTE: this is protected generic template method for withdrawing and child contracts\\n    /// should provide necessary overriding.\\n    /// Ensure to call super.withdraw from child contract to enforce access rights.\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    )\\n        public\\n        virtual\\n        override(ERC4626, IERC4626)\\n        onlyWhitelisted\\n        nonZeroAmount(assets)\\n        onlyReceiverOwnerWhitelisted(receiver, owner)\\n        returns (uint256)\\n    {\\n        if (asset() == ETH) {\\n            require(\\n                assets <= maxWithdraw(owner),\\n                \\\"ERC4626: withdraw more than max\\\"\\n            );\\n\\n            uint256 tokens = previewWithdraw(assets);\\n\\n            _burn(owner, tokens);\\n            (bool success, ) = payable(receiver).call{value: assets}(\\\"\\\");\\n            if (!success) {\\n                revert TransferFailed();\\n            }\\n            emit Withdraw(msg.sender, receiver, owner, assets, tokens);\\n\\n            return tokens;\\n        } else {\\n            return super.withdraw(assets, receiver, owner);\\n        }\\n    }\\n\\n    ///\\n    /// @dev helper method - calculates maximum amount user is allowed to deposit in assets,\\n    /// this depends of current value of vault and user deposit amount.\\n    /// It is controlled by MAX_TICKET_SIZE and MAX_VAULT_VALUE\\n    /// @param totalAsset total assets in deposit currency\\n    /// @return maximum amount user can deposit to the vault in assets\\n    ///\\n    function _maxDeposit(\\n        address,\\n        uint256 totalAsset\\n    ) internal view returns (uint256) {\\n        if (MAX_VAULT_VALUE >= totalAsset) {\\n            uint256 maxValueDiff = MAX_VAULT_VALUE - totalAsset;\\n            if (maxValueDiff <= MAX_TICKET_SIZE) {\\n                return maxValueDiff;\\n            } else {\\n                return MAX_TICKET_SIZE;\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/FijaStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./FijaERC4626Base.sol\\\";\\nimport \\\"../interfaces/IFijaStrategy.sol\\\";\\n\\n///\\n/// @title Strategy Base contract\\n/// @author Fija\\n/// @notice Used as template for implementing strategy\\n/// @dev there are methods with minimum or no functionality\\n/// it is responsibility of child contracts to override them\\n///\\ncontract FijaStrategy is IFijaStrategy, FijaERC4626Base {\\n    bool internal _isEmergencyMode = false;\\n\\n    constructor(\\n        IERC20 asset_,\\n        address governance_,\\n        string memory tokenName_,\\n        string memory tokenSymbol_,\\n        uint256 maxTicketSize_,\\n        uint256 maxVaultValue_\\n    )\\n        FijaERC4626Base(\\n            asset_,\\n            governance_,\\n            address(0),\\n            tokenName_,\\n            tokenSymbol_,\\n            maxTicketSize_,\\n            maxVaultValue_\\n        )\\n    {}\\n\\n    modifier emergencyModeRestriction() {\\n        if (_isEmergencyMode) {\\n            revert FijaInEmergencyMode();\\n        }\\n        _;\\n    }\\n\\n    ///\\n    /// NOTE: only governance access\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function addAddressToWhitelist(\\n        address addr\\n    ) public virtual override onlyGovernance returns (bool) {\\n        return super.addAddressToWhitelist(addr);\\n    }\\n\\n    ///\\n    /// NOTE: only governance access\\n    /// @inheritdoc IFijaACL\\n    ///\\n    function removeAddressFromWhitelist(\\n        address addr\\n    ) public virtual override onlyGovernance returns (bool) {\\n        return super.removeAddressFromWhitelist(addr);\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function needRebalance() external view virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    ///\\n    /// NOTE: Only governance access; Not implemented\\n    /// emits IFijaStrategy.Rebalance\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function rebalance()\\n        external\\n        virtual\\n        override\\n        onlyGovernance\\n        emergencyModeRestriction\\n    {\\n        emit Rebalance(block.timestamp, \\\"\\\");\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function needHarvest() external view virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    ///\\n    /// NOTE: Only governance access; Not implemented\\n    /// emits IFijaStrategy.Harvest\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function harvest()\\n        external\\n        virtual\\n        override\\n        onlyGovernance\\n        emergencyModeRestriction\\n    {\\n        emit Harvest(block.timestamp, 0, 0, asset(), \\\"\\\");\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function needEmergencyMode() external view virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    ///\\n    /// NOTE: Only governance access; Not implemented\\n    /// emits IFijaStrategy.EmergencyMode\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function setEmergencyMode(\\n        bool turnOn\\n    ) external virtual override onlyGovernance {\\n        _isEmergencyMode = turnOn;\\n        emit EmergencyMode(block.timestamp, turnOn);\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function emergencyMode() external view virtual override returns (bool) {\\n        return _isEmergencyMode;\\n    }\\n\\n    ///\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function status() external view virtual override returns (string memory) {\\n        string memory str = string(\\n            abi.encodePacked(\\\"totalAssets=\\\", Strings.toString(totalAssets()))\\n        );\\n\\n        return str;\\n    }\\n\\n    ///\\n    /// NOTE: emergency mode check\\n    /// @inheritdoc FijaERC4626Base\\n    ///\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        payable\\n        virtual\\n        override(FijaERC4626Base, IERC4626)\\n        emergencyModeRestriction\\n        returns (uint256)\\n    {\\n        return super.deposit(assets, receiver);\\n    }\\n\\n    receive() external payable virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\n// ####################################################\\n// ################## IMPORTANT #######################\\n// ####################################################\\n// NOTE fija Finance: ETH native compatibility -- Forked OZ contract and updated deposit method to become payable.\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(\\n        address receiver\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external payable returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(\\n        address receiver\\n    ) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFijaACL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n///\\n/// @title Access control interface\\n/// @author Fija\\n/// @notice Defines methods and events for access control manipulation in contracts\\n///\\ninterface IFijaACL {\\n    ///\\n    /// @dev emits when address is added to whitelist\\n    /// @param addr address added to the whitelist\\n    ///\\n    event WhitelistedAddressAdded(address addr);\\n\\n    ///\\n    /// @dev emits when address is removed from whitelist\\n    /// @param addr address removed from the whitelist\\n    ///\\n    event WhitelistedAddressRemoved(address addr);\\n\\n    ///\\n    /// @dev emits when owner is changed\\n    /// @param previousOwner address of previous owner\\n    /// @param newOwner address of new owner\\n    ///\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    ///\\n    /// @dev emits when governance is changed\\n    /// @param previousGovernance address of previous governance\\n    /// @param newGovernance address of new governance\\n    ///\\n    event GovernanceTransferred(\\n        address indexed previousGovernance,\\n        address indexed newGovernance\\n    );\\n\\n    ///\\n    /// @dev emits when reseller is changed\\n    /// @param previousReseller address of previous reseller\\n    /// @param newReseller address of new reseller\\n    ///\\n    event ResellerTransferred(\\n        address indexed previousReseller,\\n        address indexed newReseller\\n    );\\n\\n    ///\\n    /// @dev adds address to whitelist\\n    /// @param addr address to be added to whitelist\\n    /// @return true if address was added, false if it already in whitelist\\n    ///\\n    function addAddressToWhitelist(address addr) external returns (bool);\\n\\n    ///\\n    /// @dev removes address from whitelist\\n    /// @param addr address to be removed from whitelist\\n    /// @return true if address was removed, false if it not in the whitelist\\n    ///\\n    function removeAddressFromWhitelist(address addr) external returns (bool);\\n\\n    ///\\n    /// @dev contract owner\\n    /// @return address of the current owner\\n    ///\\n    function owner() external view returns (address);\\n\\n    ///\\n    /// @dev contract governance\\n    /// @return address of the current governance\\n    ///\\n    function governance() external view returns (address);\\n\\n    ///\\n    /// @dev contract reseller\\n    /// @return address of the current reseller\\n    ///\\n    function reseller() external view returns (address);\\n\\n    ///\\n    /// @dev checks if address is in whitelist\\n    /// @param addr address to check if it is in whitelist\\n    /// @return true if address is in contract whitelist, false if it is not.\\n    ///\\n    function isWhitelisted(address addr) external view returns (bool);\\n\\n    ///\\n    /// @dev changes ownership to new owner address\\n    /// @param newOwner address of new owner\\n    ///\\n    function transferOwnership(address newOwner) external;\\n\\n    ///\\n    /// @dev changes governance to new governance address.\\n    /// @param newGovernance address of new governance\\n    ///\\n    function transferGovernance(address newGovernance) external;\\n\\n    ///\\n    /// @dev changes reseller to new reseller address.\\n    /// @param newReseller address of new reseller\\n    ///\\n    function transferReseller(address newReseller) external;\\n\\n    ///\\n    /// @dev Leaves the contract without governance.\\n    /// It will not be possible to call `onlyGovernance` functions anymore.\\n    /// Renouncing governance will leave the contract without governance,\\n    /// thereby removing any functionality that is only available to the governance.\\n    ///\\n    function renounceGovernance() external;\\n\\n    ///\\n    /// @dev Leaves the contract without reseller.\\n    /// It will not be possible to call `onlyReseller` functions anymore.\\n    /// Renouncing reseller will leave the contract without reseller,\\n    /// thereby removing any functionality that is only available to the reseller.\\n    ///\\n    function renounceReseller() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFijaERC4626Base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC4626.sol\\\";\\nimport \\\"./IFijaACL.sol\\\";\\n\\n///\\n/// @title Base interface\\n/// @author Fija\\n/// @notice Interface base layer for vault and strategy interfaces\\n///\\ninterface IFijaERC4626Base is IFijaACL, IERC4626 {\\n    ///\\n    /// @dev Returns the amount of tokens that the Vault would exchange for the amount of assets provided, in an ideal\\n    /// scenario where all the conditions are met.\\n    ///\\n    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n    /// - MUST NOT show any variations depending on the caller.\\n    /// - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n    /// \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n    /// from.\\n    /// @param assets amount to be converted to tokens amount\\n    ///\\n    function convertToTokens(\\n        uint256 assets\\n    ) external view returns (uint256 tokens);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFijaStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./IFijaERC4626Base.sol\\\";\\n\\ninterface IFijaStrategy is IFijaERC4626Base {\\n    ///\\n    /// @dev emits when rebalance executes\\n    /// @param timestamp current timestamp when rebalance is executed\\n    /// @param data metadata associated with event\\n    ///\\n    event Rebalance(uint256 indexed timestamp, string data);\\n\\n    ///\\n    /// @dev emits when harvest executes\\n    /// @param timestamp current timestamp when harvest is executed\\n    /// @param harvestResult amount of harvested funds\\n    /// @param profitShare amount of profits\\n    /// @param profitToken address of profit token\\n    /// @param data metadata associated with event\\n    ///\\n    event Harvest(\\n        uint256 indexed timestamp,\\n        uint256 harvestResult,\\n        uint256 profitShare,\\n        address profitToken,\\n        string data\\n    );\\n\\n    ///\\n    /// @dev emits when emergency mode is toggled\\n    /// @param timestamp current timestamp when emergency mode is toggled\\n    /// @param turnOn flag for turning on/off emergency mode\\n    ///\\n    event EmergencyMode(uint256 indexed timestamp, bool turnOn);\\n\\n    ///\\n    /// @dev check if there is a need to rebalance strategy funds\\n    /// @return bool indicating need for rebalance\\n    ///\\n    function needRebalance() external view returns (bool);\\n\\n    ///\\n    /// @dev executes strategy rebalancing\\n    ///\\n    function rebalance() external;\\n\\n    ///\\n    /// @dev check if there is a need to harvest strategy funds\\n    /// @return bool indicating need for harvesting\\n    ///\\n    function needHarvest() external view returns (bool);\\n\\n    ///\\n    /// @dev executes strategy harvesting\\n    ///\\n    function harvest() external;\\n\\n    ///\\n    /// @dev gets emergency mode status of strategy\\n    /// @return flag indicting emergency mode status\\n    ///\\n    function emergencyMode() external view returns (bool);\\n\\n    ///\\n    /// @dev sets emergency mode on/off\\n    /// @param turnOn toggle flag\\n    ///\\n    function setEmergencyMode(bool turnOn) external;\\n\\n    ///\\n    /// @dev check if there is a need for setting strategy in emergency mode\\n    /// @return bool indicating need for emergency mode\\n    ///\\n    function needEmergencyMode() external view returns (bool);\\n\\n    ///\\n    /// @dev gets various strategy status parameters\\n    /// @return status parameters as string\\n    ///\\n    function status() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/convex/interfaces/IApr.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IApr {\\n    function apr(\\n        uint256 _rate,\\n        uint256 _priceOfRewards,\\n        uint256 _priceOfDeposits\\n    ) external view returns (uint256);\\n\\n    function rewardRates(\\n        uint256 _pid\\n    ) external view returns (address[] calldata, uint256[] calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/convex/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IBooster {\\n    function owner() external view returns (address);\\n\\n    function feeToken() external view returns (address);\\n\\n    function feeDistro() external view returns (address);\\n\\n    function lockFees() external view returns (address);\\n\\n    function stakerRewards() external view returns (address);\\n\\n    function lockRewards() external view returns (address);\\n\\n    function setVoteDelegate(address _voteDelegate) external;\\n\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external returns (bool);\\n\\n    function voteGaugeWeight(\\n        address[] calldata _gauge,\\n        uint256[] calldata _weight\\n    ) external returns (bool);\\n\\n    function poolInfo(\\n        uint256 _pid\\n    )\\n        external\\n        view\\n        returns (\\n            address _lptoken,\\n            address _token,\\n            address _gauge,\\n            address _crvRewards,\\n            address _stash,\\n            bool _shutdown\\n        );\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function earmarkFees() external returns (bool);\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/convex/interfaces/ICvxMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICvxMining {\\n    function ConvertCrvToCvx(uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/convex/interfaces/IRewardStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IRewardStaking {\\n    function stakeFor(address, uint256) external;\\n\\n    function stake(uint256) external;\\n\\n    function withdraw(uint256 amount, bool claim) external;\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim) external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function getReward(address _account, bool _claimExtras) external;\\n\\n    function extraRewardsLength() external view returns (uint256);\\n\\n    function extraRewards(uint256 _pid) external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/interfaces/IAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function max_id() external view returns (uint256);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/interfaces/ICurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICurve {\\n    // add liquidity\\n\\n    // 0\\n    function add_liquidity(\\n        uint256[3] calldata _amounts,\\n        uint256 _min_mint_amount\\n    ) external payable;\\n\\n    // 1\\n    function add_liquidity(\\n        uint256[3] calldata _amounts,\\n        uint256 _min_mint_amount,\\n        bool _use_underlying_or_use_eth\\n    ) external payable;\\n\\n    // 2\\n    function add_liquidity(\\n        uint256[2] calldata _amounts,\\n        uint256 _min_mint_amount\\n    ) external payable;\\n\\n    // 3\\n    function add_liquidity(\\n        uint256[4] calldata _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    // 4\\n    function add_liquidity(\\n        uint256[2] calldata _amounts,\\n        uint256 _min_mint_amount,\\n        bool _use_underlying_or_use_eth\\n    ) external payable;\\n\\n    // 5 meta zap\\n    function add_liquidity(\\n        address _pool,\\n        uint256[4] calldata _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    // 6 meta zap\\n    function add_liquidity(\\n        address _pool,\\n        uint256[3] calldata _amounts,\\n        uint256 _min_mint_amount\\n    ) external;\\n\\n    // remove liquidity one coin\\n\\n    // 0\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external;\\n\\n    // 1\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received,\\n        bool _use_underlying\\n    ) external;\\n\\n    // 2\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        uint256 i,\\n        uint256 _min_received,\\n        bool _use_eth\\n    ) external;\\n\\n    // 3\\n    function remove_liquidity_one_coin(\\n        uint256 _burn_amount,\\n        uint256 i,\\n        uint256 _min_received\\n    ) external;\\n\\n    // 4 meta zap\\n    function remove_liquidity_one_coin(\\n        address _pool,\\n        uint256 _burn_amount,\\n        int128 i,\\n        uint256 _min_received\\n    ) external;\\n\\n    // calc token amount\\n\\n    // 0\\n    function calc_token_amount(\\n        uint256[3] calldata _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    // 1\\n    function calc_token_amount(\\n        uint256[2] calldata _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    // 2\\n    function calc_token_amount(\\n        uint256[4] calldata _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    // 3\\n    function calc_token_amount(\\n        uint256[2] calldata _amounts\\n    ) external view returns (uint256);\\n\\n    // 4 meta zap\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[4] calldata _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    // 5 meta zap\\n    function calc_token_amount(\\n        address _pool,\\n        uint256[3] calldata _amounts,\\n        bool _is_deposit\\n    ) external view returns (uint256);\\n\\n    // cal withdraw one coin\\n\\n    // 0\\n    function calc_withdraw_one_coin(\\n        uint256 _burn_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    // 1\\n    function calc_withdraw_one_coin(\\n        uint256 _burn_amount,\\n        int128 i,\\n        bool _use_underlying\\n    ) external view returns (uint256);\\n\\n    // 2\\n    function calc_withdraw_one_coin(\\n        uint256 _burn_amount,\\n        uint256 i\\n    ) external view returns (uint256);\\n\\n    // 3\\n    function calc_withdraw_one_coin(\\n        address _pool,\\n        uint256 _burn_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    // get exchange amount;\\n\\n    //\\n\\n    // 1\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // 4\\n    function get_dy(\\n        address pool,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // 5\\n    function get_dy_underlying(\\n        address pool,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // 6\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // 2\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    // 3\\n    function get_dy_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    ///\\n    // exchange\\n\\n    // 3\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n\\n    // 2\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n\\n    // 5\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n\\n    // 1\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth\\n    ) external payable returns (uint256);\\n\\n    // 4\\n    function exchange(\\n        address pool,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n\\n    // 6\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n\\n    function coins(uint256 index) external view returns (address);\\n\\n    function underlying_coins(uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/interfaces/ICurveMetaRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICurveMetaRegistry {\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_underlying_coins(\\n        address pool\\n    ) external view returns (address[8] calldata);\\n\\n    function is_meta(address pool) external view returns (bool);\\n\\n    function get_coins(\\n        address pool\\n    ) external view returns (address[8] calldata);\\n\\n    function get_balances(\\n        address pool\\n    ) external view returns (uint256[8] calldata);\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/curve/interfaces/IExchangeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IExchangeRegistry {\\n    function get_best_rate(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (address, uint256);\\n\\n    function get_exchange_amount(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function exchange_with_best_rate(\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _expected,\\n        address _receiver\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/CurveConvex/CurveConvexBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../base/FijaStrategy.sol\\\";\\nimport \\\"./CurveConvexStrategyProtocol.sol\\\";\\nimport \\\"./errors.sol\\\";\\nimport \\\"../../protocols/curve/interfaces/ICurve.sol\\\";\\nimport \\\"./ICurveConvexPeriphery.sol\\\";\\n\\nstruct CoinRating {\\n    // token address used in liquidity pools\\n    address coinAddr;\\n    // rating of token used in liquidity pools\\n    uint8 rating;\\n}\\n\\nstruct Pool {\\n    // pool address\\n    address addr;\\n    // deposit zap for the pool\\n    address deposit;\\n    // pool category to reference correct interface\\n    uint8[4] category;\\n}\\n\\nstruct EmergencyPool {\\n    // pool address\\n    address addr;\\n    // deposit zap for pool\\n    address deposit;\\n    // exchange category to reference correct interface\\n    uint8[2] exchangeCategory;\\n}\\n\\nstruct RewardPoolInput {\\n    // address of pool used in reward route\\n    address addr;\\n    // deposit zap for the pool\\n    address deposit;\\n    // \\\"from\\\" address in exchange pair\\n    address from;\\n    // \\\"to\\\" address in exchange pair\\n    address to;\\n    // exchange category to reference correct interface\\n    uint8[2] exchangeCategory;\\n}\\n\\nstruct RewardPool {\\n    // address of pool used in reward route\\n    address addr;\\n    // \\\"from\\\" address in exchange pair\\n    address from;\\n    // \\\"to\\\" address in exchange pair\\n    address to;\\n}\\n\\nstruct ConstructorData {\\n    // flag for checking depeg\\n    bool dePegCheck;\\n    // flag for disabling emergency pool\\n    bool isEmePoolDisabled;\\n    // emergency token address\\n    address emergencyCurrency;\\n    //address used for linking contracts\\n    address linkAddr;\\n    // harvest time frequency\\n    uint256 harvestTime;\\n    // rebalance time param\\n    uint256 rebalanceTimeLower;\\n    // rebalance time param\\n    uint256 rebalanceTimeUpper;\\n    // depeg deviation in bps\\n    uint256 depegDev;\\n    // swap slippage in bps\\n    uint256 slippageSwap;\\n    // slippage during emergency mode in bps\\n    uint256 slippageEmergency;\\n    // threshold used in rebalance procedure\\n    uint256 rebalanceThreshold1;\\n    // threshold used in rebalance procedure\\n    uint256 rebalanceThreshold2;\\n    // liquidity threshold in bps\\n    uint256 liquidityThresholdBps;\\n    // list of liquidity pools used in strategy\\n    Pool[] curvePools;\\n    // list of token ratings used in strategy\\n    CoinRating[] coinRating;\\n    // emergency pool data\\n    EmergencyPool emergencyPool;\\n    // list of pools used in CRV reward route\\n    RewardPoolInput[] crvRewardRoute;\\n    // list of pools used in CVX reward route\\n    RewardPoolInput[] cvxRewardRoute;\\n}\\n\\n///\\n/// @title Curve Convex Base contrat\\n/// @author Fija\\n/// @notice Used to initalize main and periphery contract variables\\n/// @dev Enables spliting contracts to main and periphery with access to same data\\n/// NOTE: Parent contract to CurveConvexPeriphery and CurveConvexStrategy\\n///\\nabstract contract CurveConvexBase is FijaStrategy, CurveConvexStrategyProtocol {\\n    ///\\n    /// @dev number of liquidity pools used in strategy\\n    ///\\n    uint8 internal immutable POOL_NUM;\\n\\n    ///\\n    /// @dev deposit token used in strategy\\n    ///\\n    address internal immutable DEPOSIT_CCY;\\n\\n    ///\\n    /// @dev flag is depeg checked in the strategy\\n    ///\\n    bool internal DE_PEG_CHECK;\\n\\n    ///\\n    /// @dev flag is emergency pool disabled\\n    ///\\n    bool internal EME_POOL_DISABLED;\\n\\n    ///\\n    /// @dev harvest time frequency\\n    ///\\n    uint256 internal HARVEST_TIME;\\n\\n    ///\\n    /// @dev rebalance time parameter\\n    ///\\n    uint256 internal REBALANCE_TIME_UPPER;\\n\\n    ///\\n    /// @dev rebalance time parameter\\n    ///\\n    uint256 internal REBALANCE_TIME_LOWER;\\n\\n    ///\\n    /// @dev depeg deviation in bps\\n    ///\\n    uint256 internal DEPEG_DEVIATION;\\n\\n    ///\\n    /// @dev slippage swap in bps\\n    ///\\n    uint256 internal SLIPPAGE_SWAP;\\n\\n    ///\\n    /// @dev rebalance threshold used when calling needRebalance()\\n    ///\\n    uint256 internal REBALANCE_THR1;\\n\\n    ///\\n    /// @dev rebalance threshold used when calling needRebalance()\\n    ///\\n    uint256 internal REBALANCE_THR2;\\n\\n    ///\\n    /// @dev slippage when in emergency mode\\n    ///\\n    uint256 internal SLIPPAGE_EMERGENCY;\\n\\n    ///\\n    /// @dev liquidity threshold for low-liquidity pool checks\\n    ///\\n    uint256 internal LIQUIDITY_THR_BPS;\\n\\n    ///\\n    /// @dev timestamp for last harvest time in seconds\\n    ///\\n    uint256 internal _lastHarvestTime;\\n\\n    ///\\n    /// @dev timestamp for last rebalance time in seconds\\n    ///\\n    uint256 internal _lastRebalanceTime;\\n\\n    ///\\n    /// @dev emergency token address\\n    ///\\n    address internal EMERGENCY_CCY;\\n\\n    ///\\n    /// @dev pool used to transfer assets to emergency token when emergency mode is triggered\\n    ///\\n    address internal _emergencyPool;\\n\\n    ///\\n    /// @dev list of Curve pools used for providing liquidity\\n    ///\\n    address[] internal _curvePools;\\n\\n    ///\\n    /// @dev list of pools data for CRV reward route\\n    ///\\n    RewardPool[] internal _crvRewardRoute;\\n\\n    ///\\n    /// @dev list of pools data for CVX reward route\\n    ///\\n    RewardPool[] internal _cvxRewardRoute;\\n\\n    ///\\n    /// @dev maps address of reward pool to token address index indicating\\n    /// token position in pool, used in reward route swaps\\n    ///\\n    mapping(address => mapping(address => uint256))\\n        internal _rewardPoolCoinIndex;\\n\\n    ///\\n    /// @dev maps pool to deposit contract, needed when\\n    /// providing liquidity and swaps requires use of seperate deposit contracts\\n    ///\\n    mapping(address => address) internal _poolDepositCtr;\\n\\n    ///\\n    /// @dev maps Curve liquidity pool to corresponding reward contract on Convex\\n    ///\\n    mapping(address => address) internal _poolRewardContract;\\n\\n    ///\\n    /// @dev maps Curve liquidity pool to it's LP token\\n    ///\\n    mapping(address => address) internal _poolLpToken;\\n\\n    ///\\n    /// @dev maps Curve liquidity pool to it's rating\\n    /// 2 decimals precision\\n    ///\\n    mapping(address => uint256) internal _poolRating;\\n\\n    ///\\n    /// @dev maps Curve liquidity pool deposit token index,\\n    /// this indicates deposit token position in the pool, used for swaps\\n    ///\\n    mapping(address => int128) internal _poolDepositCcyIndex;\\n\\n    ///\\n    /// @dev maps Curve liquidity pool to corresponding Convex pool id\\n    ///\\n    mapping(address => uint16) internal _poolConvexPoolId;\\n\\n    ///\\n    /// @dev maps Curve liquidity pool to list of categories,\\n    /// used to invoke correct interface method when working with liquidity\\n    ///\\n    mapping(address => uint8[4]) internal _poolCategory;\\n\\n    ///\\n    /// @dev maps emergency or reward route pool to list of exchange categories,\\n    /// used to invoke correct interface method when performing swaps\\n    ///\\n    mapping(address => uint8[2]) internal _poolExchangeCategory;\\n\\n    constructor(\\n        address depositCurrency_,\\n        address governance_,\\n        string memory tokenName_,\\n        string memory tokenSymbol_,\\n        uint256 maxTicketSize_,\\n        uint256 maxVaultValue_,\\n        ConstructorData memory data_\\n    )\\n        FijaStrategy(\\n            IERC20(depositCurrency_),\\n            governance_,\\n            tokenName_,\\n            tokenSymbol_,\\n            maxTicketSize_,\\n            maxVaultValue_\\n        )\\n    {\\n        _lastHarvestTime = block.timestamp;\\n        _lastRebalanceTime = block.timestamp;\\n\\n        DEPEG_DEVIATION = data_.depegDev;\\n        REBALANCE_TIME_LOWER = data_.rebalanceTimeLower;\\n        REBALANCE_TIME_UPPER = data_.rebalanceTimeUpper;\\n        HARVEST_TIME = data_.harvestTime;\\n\\n        REBALANCE_THR1 = data_.rebalanceThreshold1;\\n        REBALANCE_THR2 = data_.rebalanceThreshold2;\\n\\n        SLIPPAGE_EMERGENCY = data_.slippageEmergency;\\n        SLIPPAGE_SWAP = data_.slippageSwap;\\n\\n        LIQUIDITY_THR_BPS = data_.liquidityThresholdBps;\\n        DE_PEG_CHECK = data_.dePegCheck;\\n        EME_POOL_DISABLED = data_.isEmePoolDisabled;\\n\\n        DEPOSIT_CCY = depositCurrency_;\\n        EMERGENCY_CCY = data_.emergencyCurrency;\\n        POOL_NUM = uint8(data_.curvePools.length);\\n\\n        // #### build CRV route storage var #####\\n        RewardPoolInput[] memory crvRewardRoute = data_.crvRewardRoute;\\n        for (uint8 i = 0; i < crvRewardRoute.length; i++) {\\n            _crvRewardRoute.push(\\n                RewardPool(\\n                    crvRewardRoute[i].addr,\\n                    crvRewardRoute[i].from,\\n                    crvRewardRoute[i].to\\n                )\\n            );\\n\\n            _poolDepositCtr[crvRewardRoute[i].addr] = crvRewardRoute[i].deposit;\\n            _poolExchangeCategory[crvRewardRoute[i].addr] = crvRewardRoute[i]\\n                .exchangeCategory;\\n\\n            // no exchange support, build rewardRoute coin indexes for swaps\\n            if (crvRewardRoute[i].exchangeCategory[0] != 0) {\\n                address rewardRoutePool = crvRewardRoute[i].addr;\\n                address[8] memory poolCoins = _underlyingCoins(rewardRoutePool);\\n\\n                for (uint8 j = 0; j < poolCoins.length; j++) {\\n                    if (poolCoins[j] == address(0)) {\\n                        break;\\n                    }\\n                    _rewardPoolCoinIndex[rewardRoutePool][poolCoins[j]] = j;\\n                }\\n            }\\n        }\\n        // #### build CVX route storage var #####\\n        RewardPoolInput[] memory cvxRewardRoute = data_.cvxRewardRoute;\\n        for (uint8 i = 0; i < cvxRewardRoute.length; i++) {\\n            _cvxRewardRoute.push(\\n                RewardPool(\\n                    cvxRewardRoute[i].addr,\\n                    cvxRewardRoute[i].from,\\n                    cvxRewardRoute[i].to\\n                )\\n            );\\n            _poolDepositCtr[cvxRewardRoute[i].addr] = cvxRewardRoute[i].deposit;\\n            _poolExchangeCategory[cvxRewardRoute[i].addr] = cvxRewardRoute[i]\\n                .exchangeCategory;\\n\\n            // no exchange support, build rewardRoute coin indexes\\n            if (cvxRewardRoute[i].exchangeCategory[0] != 0) {\\n                address rewardRoutePool = cvxRewardRoute[i].addr;\\n                address[8] memory poolCoins = _underlyingCoins(rewardRoutePool);\\n\\n                for (uint8 j = 0; j < poolCoins.length; j++) {\\n                    if (poolCoins[j] == address(0)) {\\n                        break;\\n                    }\\n                    _rewardPoolCoinIndex[rewardRoutePool][poolCoins[j]] = j;\\n                }\\n            }\\n        }\\n        // #### build curve pool storage variables #####\\n        Pool[] memory curvePools = data_.curvePools;\\n        CoinRating[] memory coinRating = data_.coinRating;\\n        for (uint8 i = 0; i < curvePools.length; i++) {\\n            address curveAddr = curvePools[i].addr;\\n            _curvePools.push(curveAddr);\\n            _poolDepositCtr[curveAddr] = curvePools[i].deposit;\\n            _poolCategory[curveAddr] = curvePools[i].category;\\n            _poolLpToken[curveAddr] = Curve_ICurveMetaRegistry.get_lp_token(\\n                curveAddr\\n            );\\n\\n            address[8] memory poolCoins = _underlyingCoins(curveAddr);\\n\\n            _poolDepositCcyIndex[curveAddr] = _findCoinIndex(\\n                poolCoins,\\n                depositCurrency_\\n            );\\n\\n            // create pool ratings\\n            bool isFound;\\n            uint16 ratingSum = 0;\\n            for (uint8 j = 0; j < poolCoins.length; j++) {\\n                if (poolCoins[j] == address(0)) {\\n                    break;\\n                }\\n                isFound = false;\\n                for (uint8 k = 0; k < coinRating.length; k++) {\\n                    if (poolCoins[j] == coinRating[k].coinAddr) {\\n                        isFound = true;\\n                        ratingSum += coinRating[k].rating;\\n                        break;\\n                    }\\n                }\\n                if (!isFound) {\\n                    revert FijaPoolRatingInvalid();\\n                }\\n            }\\n\\n            _poolRating[curveAddr] = (ratingSum * 100) / poolCoins.length;\\n\\n            // associate convex pool with curve pool through curve LP token\\n            uint256 convexPoolLength = Convex_IBooster.poolLength();\\n            isFound = false;\\n            for (uint16 j = 0; j < convexPoolLength; j++) {\\n                // gets curveLP token from convex pool\\n                (\\n                    address clpToken,\\n                    ,\\n                    ,\\n                    address rewardContract,\\n                    ,\\n                    bool isShutdown\\n                ) = Convex_IBooster.poolInfo(j);\\n                // check if convex curveLP tokens matches with curve pool lp token\\n                if (!isShutdown && clpToken == _poolLpToken[curveAddr]) {\\n                    isFound = true;\\n                    _poolConvexPoolId[curveAddr] = j;\\n                    _poolRewardContract[curveAddr] = rewardContract;\\n\\n                    break;\\n                }\\n            }\\n            if (!isFound) {\\n                revert FijaConvexPoolUnknown();\\n            }\\n        }\\n\\n        // #### initalize emergency pool #####\\n        _emergencyPool = data_.emergencyPool.addr;\\n        _poolExchangeCategory[_emergencyPool] = data_\\n            .emergencyPool\\n            .exchangeCategory;\\n        _poolDepositCtr[_emergencyPool] = data_.emergencyPool.deposit;\\n\\n        // no exchange support, build emergency coin indexes\\n        if (data_.emergencyPool.exchangeCategory[0] != 0) {\\n            address[8] memory emeCoins = _underlyingCoins(_emergencyPool);\\n\\n            for (uint8 j = 0; j < emeCoins.length; j++) {\\n                if (emeCoins[j] == address(0)) {\\n                    break;\\n                }\\n                _rewardPoolCoinIndex[_emergencyPool][emeCoins[j]] = j;\\n            }\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method querying which tokens pool supports. Only non-wrapped.\\n    /// @param pool address for which addresses of pool tokens are fetched\\n    /// @return array with token addresses inside pool\\n    ///\\n    function _underlyingCoins(\\n        address pool\\n    ) internal view returns (address[8] memory) {\\n        bool isMeta = Curve_ICurveMetaRegistry.is_meta(pool);\\n\\n        address[8] memory underCoins = Curve_ICurveMetaRegistry\\n            .get_underlying_coins(pool);\\n\\n        if (!isMeta) {\\n            address[8] memory coins = Curve_ICurveMetaRegistry.get_coins(pool);\\n            if (_isEqualAddr(coins, underCoins)) {\\n                if (!_isTokenAddrIn(coins, WETH)) {\\n                    // plain or plain eth pool\\n                    return coins;\\n                } else {\\n                    // pool which takes eth and wrapped eth\\n                    // but replaces WETH with ETH address as it's underlying\\n                    address[8] memory replacedCoins = _findAddrReplace(\\n                        coins,\\n                        WETH,\\n                        ETH\\n                    );\\n                    return replacedCoins;\\n                }\\n            } else {\\n                if (\\n                    _isTokenAddrIn(coins, ETH) &&\\n                    _isTokenAddrIn(underCoins, ETH)\\n                ) {\\n                    // plain eth pool\\n                    return coins;\\n                } else {\\n                    // normal lending pool\\n                    if (_isAllDiffAddr(coins, underCoins)) {\\n                        return underCoins;\\n                    } else {\\n                        revert FijaUnknownPoolForCoins();\\n                    }\\n                }\\n            }\\n        } else {\\n            return underCoins;\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper method finding correct index in array of coins\\n    /// @param coins array of token addresses\\n    /// @param coin address of token for queried index\\n    /// @return token index in coins array\\n    /// NOTE: throws if index is not found\\n    ///\\n    function _findCoinIndex(\\n        address[8] memory coins,\\n        address coin\\n    ) internal pure returns (int128) {\\n        for (uint256 i = 0; i < coins.length; i++) {\\n            if (coins[i] == coin && coins[i] != address(0)) {\\n                return int128(int256(i));\\n            }\\n        }\\n        revert FijaCoinIndexNotFound();\\n    }\\n\\n    ///\\n    /// @dev Helper method to build array which is provided to liquidity methods\\n    /// There is always 1 non-zero value in array, as there is only 1 token to\\n    /// use as deposit token in strategy\\n    /// @param amount array of token addresses\\n    /// @param index indicating token position in the pool\\n    /// @return array of values with 1 non-zero value on index which indicates\\n    /// deposit token index inside pool\\n    ///\\n    function _buildInputAmount(\\n        uint256 amount,\\n        int128 index\\n    ) internal pure returns (uint256[4] memory) {\\n        uint256[4] memory inputs = [\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0)\\n        ];\\n        inputs[uint256(uint128(index))] = amount;\\n        return inputs;\\n    }\\n\\n    ///\\n    /// @dev Helper method which finds address in array and replaces it with different address\\n    /// @param inputAddrs array of token address on which to perform find and replace\\n    /// @param find address of token to replace\\n    /// @param replaceWith address of token to replace with\\n    /// @return array of addresses modified with replaceWith if flag is true\\n    ///\\n    function _findAddrReplace(\\n        address[8] memory inputAddrs,\\n        address find,\\n        address replaceWith\\n    ) private pure returns (address[8] memory) {\\n        for (uint8 i = 0; i < inputAddrs.length; i++) {\\n            if (inputAddrs[i] == find) {\\n                inputAddrs[i] = replaceWith;\\n                break;\\n            }\\n        }\\n        return inputAddrs;\\n    }\\n\\n    ///\\n    /// @dev Helper method which checks if token address exists in array\\n    /// @param inputAddrs array of token address on which to perform find\\n    /// @param token address of token to find\\n    /// @return flag indicating if token is found in the inputAddrs\\n    ///\\n    function _isTokenAddrIn(\\n        address[8] memory inputAddrs,\\n        address token\\n    ) private pure returns (bool) {\\n        for (uint8 i = 0; i < inputAddrs.length; i++) {\\n            if (inputAddrs[i] == token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ///\\n    /// @dev Helper method to verify if 2 array are equal\\n    /// @param A array of token addresses to compare\\n    /// @param B array of token addresses to compare\\n    /// @return flag indicting if arrays are equal\\n    ///\\n    function _isEqualAddr(\\n        address[8] memory A,\\n        address[8] memory B\\n    ) private pure returns (bool) {\\n        for (uint8 i = 0; i < A.length; i++) {\\n            if (A[i] != B[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    ///\\n    /// @dev Helper method to verify if 2 array are different on all positions\\n    /// @param A array of token addresses to compare\\n    /// @param B array of token addresses to compare\\n    /// @return flag indicting if arrays are not equal\\n    ///\\n    function _isAllDiffAddr(\\n        address[8] memory A,\\n        address[8] memory B\\n    ) private pure returns (bool) {\\n        for (uint8 i = 0; i < A.length; i++) {\\n            if (A[i] == B[i] && A[i] != address(0)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/CurveConvex/CurveConvexPeriphery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./CurveConvexStrategyProtocol.sol\\\";\\nimport \\\"./errors.sol\\\";\\nimport \\\"./ICurveConvexPeriphery.sol\\\";\\nimport \\\"./CurveConvexBase.sol\\\";\\nimport \\\"../../interfaces/IFijaStrategy.sol\\\";\\n\\n///\\n/// @title Curve Convex Periphery\\n/// @author Fija\\n/// @notice View methods to support main strategy contract operations\\n/// @dev To offload size and heavy view methods for off-chain usage\\n///\\ncontract CurveConvexPeriphery is CurveConvexBase, ICurveConvexPeriphery {\\n    ///\\n    /// @dev reference to main strategy contract\\n    ///\\n    address internal STRATEGY;\\n\\n    constructor(\\n        address depositCurrency_,\\n        address governance_,\\n        string memory tokenName_,\\n        string memory tokenSymbol_,\\n        uint256 maxTicketSize_,\\n        uint256 maxVaultValue_,\\n        ConstructorData memory data_\\n    )\\n        CurveConvexBase(\\n            depositCurrency_,\\n            governance_,\\n            tokenName_,\\n            tokenSymbol_,\\n            maxTicketSize_,\\n            maxVaultValue_,\\n            data_\\n        )\\n    {}\\n\\n    ///\\n    /// @dev link to base strategy contract\\n    /// @param strategy address to associate periphery contract with main strategy contract\\n    ///\\n    function setStrategy(address strategy) public onlyOwner {\\n        STRATEGY = strategy;\\n    }\\n\\n    ///\\n    /// NOTE: uses pool categories and deposit zap addresses to identify the interface and invoke methods on proper contracts\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function calcTokenAmount(\\n        address pool,\\n        uint256 depositAmount,\\n        bool isDeposit\\n    ) external view override returns (uint256) {\\n        uint8 id = _poolCategory[pool][2];\\n        uint256[4] memory amounts = _buildInputAmount(\\n            depositAmount,\\n            _poolDepositCcyIndex[pool]\\n        );\\n        if (id == 0) {\\n            uint256[3] memory inputs = [amounts[0], amounts[1], amounts[2]];\\n\\n            return ICurve(pool).calc_token_amount(inputs, isDeposit);\\n        } else if (id == 1) {\\n            uint256[2] memory inputs = [amounts[0], amounts[1]];\\n\\n            return ICurve(pool).calc_token_amount(inputs, isDeposit);\\n        } else if (id == 2) {\\n            if (_poolDepositCtr[pool] != address(0)) {\\n                pool = _poolDepositCtr[pool];\\n            }\\n            return ICurve(pool).calc_token_amount(amounts, isDeposit);\\n        } else if (id == 3) {\\n            uint256[2] memory inputs = [amounts[0], amounts[1]];\\n\\n            return ICurve(pool).calc_token_amount(inputs);\\n        } else if (id == 4) {\\n            return\\n                ICurve(_poolDepositCtr[pool]).calc_token_amount(\\n                    pool,\\n                    amounts,\\n                    isDeposit\\n                );\\n        } else if (id == 5) {\\n            uint256[3] memory inputs = [amounts[0], amounts[1], amounts[2]];\\n            return\\n                ICurve(_poolDepositCtr[pool]).calc_token_amount(\\n                    pool,\\n                    inputs,\\n                    isDeposit\\n                );\\n        } else {\\n            revert FijaInvalidPoolCategory();\\n        }\\n    }\\n\\n    ///\\n    /// NOTE: uses pool categories and deposit zap addresses to identify the interface and invoke methods on proper contracts\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function calcWithdrawOneCoin(\\n        address pool,\\n        uint256 burnAmount,\\n        int128 i\\n    ) public view returns (uint256) {\\n        uint8 id = _poolCategory[pool][3];\\n        if (id == 0) {\\n            if (_poolDepositCtr[pool] != address(0)) {\\n                pool = _poolDepositCtr[pool];\\n            }\\n            try ICurve(pool).calc_withdraw_one_coin(burnAmount, i) returns (\\n                uint256 amount\\n            ) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 1) {\\n            try\\n                ICurve(pool).calc_withdraw_one_coin(burnAmount, i, true)\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 2) {\\n            try\\n                ICurve(pool).calc_withdraw_one_coin(\\n                    burnAmount,\\n                    uint256(int256(i))\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 3) {\\n            try\\n                ICurve(_poolDepositCtr[pool]).calc_withdraw_one_coin(\\n                    pool,\\n                    burnAmount,\\n                    i\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else {\\n            revert FijaInvalidPoolCategory();\\n        }\\n    }\\n\\n    ///\\n    /// NOTE: uses pool categories and deposit zap addresses to identify the interface and invoke methods on proper contracts\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function getExchangeAmount(\\n        address pool,\\n        address from,\\n        address to,\\n        uint256 input\\n    ) public view override returns (uint256) {\\n        uint8 id = _poolExchangeCategory[pool][0];\\n        if (id == 0) {\\n            IExchangeRegistry ex = IExchangeRegistry(\\n                Curve_IAddressProvider.get_address(CURVE_EXCHANGE_ID)\\n            );\\n            try ex.get_exchange_amount(pool, from, to, input) returns (\\n                uint256 amount\\n            ) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 1) {\\n            address depo = pool;\\n            if (_poolDepositCtr[pool] != address(0)) {\\n                depo = _poolDepositCtr[pool];\\n            }\\n            try\\n                ICurve(depo).get_dy(\\n                    _rewardPoolCoinIndex[pool][from],\\n                    _rewardPoolCoinIndex[pool][to],\\n                    input\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 2) {\\n            address depo = pool;\\n            if (_poolDepositCtr[pool] != address(0)) {\\n                depo = _poolDepositCtr[pool];\\n            }\\n            try\\n                ICurve(depo).get_dy_underlying(\\n                    int128(uint128(_rewardPoolCoinIndex[pool][from])),\\n                    int128(uint128(_rewardPoolCoinIndex[pool][to])),\\n                    input\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 3) {\\n            // deposit zap\\n            try\\n                ICurve(_poolDepositCtr[pool]).get_dy_underlying(\\n                    _rewardPoolCoinIndex[pool][from],\\n                    _rewardPoolCoinIndex[pool][to],\\n                    input\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 4) {\\n            // deposit zap\\n            try\\n                ICurve(_poolDepositCtr[pool]).get_dy(\\n                    pool,\\n                    _rewardPoolCoinIndex[pool][from],\\n                    _rewardPoolCoinIndex[pool][to],\\n                    input\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 5) {\\n            // deposit zap\\n            try\\n                ICurve(_poolDepositCtr[pool]).get_dy_underlying(\\n                    pool,\\n                    _rewardPoolCoinIndex[pool][from],\\n                    _rewardPoolCoinIndex[pool][to],\\n                    input\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else if (id == 6) {\\n            try\\n                ICurve(pool).get_dy(\\n                    int128(uint128(_rewardPoolCoinIndex[pool][from])),\\n                    int128(uint128(_rewardPoolCoinIndex[pool][to])),\\n                    input\\n                )\\n            returns (uint256 amount) {\\n                return amount;\\n            } catch {\\n                return 0;\\n            }\\n        } else {\\n            revert FijaInvalidPoolCategory();\\n        }\\n    }\\n\\n    ///\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function exposureDiff(\\n        uint256 targetExposure\\n    ) external view override returns (int256[8] memory, uint256[] memory) {\\n        (uint256[2] memory crvCvxInDepositCCy, , ) = crvCvxToDepositCcy(\\n            [PRECISION_18, PRECISION_18]\\n        );\\n        uint256[] memory numerators = new uint256[](POOL_NUM);\\n        uint256 denominator = 0;\\n\\n        for (uint8 i = 0; i < POOL_NUM; i++) {\\n            address pool = _curvePools[i];\\n            numerators[i] =\\n                _poolYield(crvCvxInDepositCCy[0], crvCvxInDepositCCy[1], pool) *\\n                _poolRating[pool];\\n\\n            denominator += numerators[i];\\n        }\\n        int256[8] memory poolExDiff;\\n        uint256[] memory poolAllocationsLogBps = new uint256[](POOL_NUM);\\n\\n        for (uint8 i = 0; i < POOL_NUM; i++) {\\n            address pool = _curvePools[i];\\n\\n            uint256 currentPoolExp = calcWithdrawOneCoin(\\n                pool,\\n                IERC20(_poolRewardContract[pool]).balanceOf(STRATEGY),\\n                _poolDepositCcyIndex[pool]\\n            );\\n            uint256 poolAllocation = (numerators[i] * PRECISION_30) /\\n                denominator;\\n\\n            poolAllocationsLogBps[i] =\\n                (numerators[i] * BASIS_POINTS_DIVISOR) /\\n                denominator;\\n\\n            uint256 targetPoolExposure = (targetExposure * poolAllocation) /\\n                PRECISION_30;\\n\\n            poolExDiff[i] = int256(currentPoolExp) - int256(targetPoolExposure);\\n        }\\n        return (poolExDiff, poolAllocationsLogBps);\\n    }\\n\\n    ///\\n    /// NOTE: exchange hop results are used as part of harvest when exchanging CRV/CVX to deposit tokens, xwthrough reward routes\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function crvCvxToDepositCcy(\\n        uint256[2] memory inputs\\n    )\\n        public\\n        view\\n        returns (uint256[2] memory, uint256[] memory, uint256[] memory)\\n    {\\n        uint8 poolNum = uint8(_crvRewardRoute.length);\\n        bool isEmergencyMode = IFijaStrategy(STRATEGY).emergencyMode();\\n\\n        uint256[] memory crvIntermed = new uint256[](poolNum);\\n\\n        // calculate CRV to deposit currency amount\\n        for (uint8 i = 0; i < poolNum; i++) {\\n            uint256 amount = getExchangeAmount(\\n                _crvRewardRoute[i].addr,\\n                _crvRewardRoute[i].from,\\n                _crvRewardRoute[i].to,\\n                inputs[0]\\n            );\\n            uint256 slippage = SLIPPAGE_SWAP;\\n            if (isEmergencyMode) {\\n                slippage = SLIPPAGE_EMERGENCY;\\n            }\\n            inputs[0] =\\n                (amount * (BASIS_POINTS_DIVISOR - slippage)) /\\n                BASIS_POINTS_DIVISOR;\\n            if (inputs[0] == 0) {\\n                break;\\n            }\\n\\n            crvIntermed[i] = inputs[0];\\n        }\\n        poolNum = uint8(_cvxRewardRoute.length);\\n\\n        uint256[] memory cvxIntermed = new uint256[](poolNum);\\n        // save intermed exchange values to use for swaps\\n\\n        // calculate CVX to deposit currency amount\\n        for (uint8 i = 0; i < poolNum; i++) {\\n            uint256 amount = getExchangeAmount(\\n                _cvxRewardRoute[i].addr,\\n                _cvxRewardRoute[i].from,\\n                _cvxRewardRoute[i].to,\\n                inputs[1]\\n            );\\n            uint256 slippage = SLIPPAGE_SWAP;\\n            if (isEmergencyMode) {\\n                slippage = SLIPPAGE_EMERGENCY;\\n            }\\n            inputs[1] =\\n                (amount * (BASIS_POINTS_DIVISOR - slippage)) /\\n                BASIS_POINTS_DIVISOR;\\n            if (inputs[1] == 0) {\\n                break;\\n            }\\n            cvxIntermed[i] = inputs[1];\\n        }\\n        // amount in depositCCy\\n        return ([inputs[0], inputs[1]], crvIntermed, cvxIntermed);\\n    }\\n\\n    ///\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function needEmergencyMode()\\n        external\\n        view\\n        override(FijaStrategy, ICurveConvexPeriphery)\\n        returns (bool)\\n    {\\n        uint256 depositDec = decimals();\\n\\n        for (uint8 i = 0; i < POOL_NUM; i++) {\\n            address pool = _curvePools[i];\\n\\n            uint256 lpTokenInDepositCCy = calcWithdrawOneCoin(\\n                pool,\\n                PRECISION_18,\\n                _poolDepositCcyIndex[pool]\\n            );\\n\\n            // check de-peg\\n            if (DE_PEG_CHECK) {\\n                address[8] memory coins = _underlyingCoins(pool);\\n                for (uint8 j = 0; j < coins.length; j++) {\\n                    if (coins[j] == address(0)) {\\n                        break;\\n                    }\\n                    if (coins[j] != DEPOSIT_CCY) {\\n                        int128 coinIndex = _findCoinIndex(coins, coins[j]);\\n                        uint256 nonDepositDec = ERC20(coins[j]).decimals();\\n\\n                        uint256 value = calcWithdrawOneCoin(\\n                            pool,\\n                            PRECISION_18,\\n                            coinIndex\\n                        );\\n                        value =\\n                            (((value * 10 ** depositDec) /\\n                                (10 ** nonDepositDec)) * 10000) /\\n                            lpTokenInDepositCCy;\\n                        // 4 decimals precision\\n                        if (\\n                            value < (10000 - DEPEG_DEVIATION) ||\\n                            value > (10000 + DEPEG_DEVIATION)\\n                        ) {\\n                            return true;\\n                        }\\n                    }\\n                }\\n            }\\n            // check low liquidity\\n            uint256 currentPoolExposure = (lpTokenInDepositCCy *\\n                IERC20(_poolRewardContract[pool]).balanceOf(STRATEGY)) /\\n                PRECISION_18;\\n\\n            uint256 tvlPoolPerc = (((lpTokenInDepositCCy *\\n                IERC20(_poolLpToken[pool]).totalSupply()) / PRECISION_18) *\\n                LIQUIDITY_THR_BPS) / BASIS_POINTS_DIVISOR;\\n\\n            if (currentPoolExposure > tvlPoolPerc) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ///\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function totalAssets()\\n        external\\n        view\\n        override(IERC4626, ICurveConvexPeriphery)\\n        returns (uint256)\\n    {\\n        uint256 emergencyCcyValue = 0;\\n\\n        if (IFijaStrategy(STRATEGY).emergencyMode()) {\\n            // calculate value in emergencyCCy\\n            emergencyCcyValue = getExchangeAmount(\\n                _emergencyPool,\\n                EMERGENCY_CCY,\\n                DEPOSIT_CCY,\\n                IERC20(EMERGENCY_CCY).balanceOf(STRATEGY)\\n            );\\n        }\\n        uint256 depositCcyValue;\\n\\n        if (DEPOSIT_CCY == ETH) {\\n            depositCcyValue = STRATEGY.balance;\\n        } else {\\n            depositCcyValue = IERC20(DEPOSIT_CCY).balanceOf(STRATEGY);\\n        }\\n        // calculate value of lp tokens\\n        uint256 valueOfLpTokens = 0;\\n        for (uint8 i = 0; i < POOL_NUM; i++) {\\n            address pool = _curvePools[i];\\n\\n            valueOfLpTokens += calcWithdrawOneCoin(\\n                pool,\\n                IERC20(_poolRewardContract[pool]).balanceOf(STRATEGY),\\n                _poolDepositCcyIndex[pool]\\n            );\\n        }\\n        return valueOfLpTokens + emergencyCcyValue + depositCcyValue;\\n    }\\n\\n    ///\\n    /// NOTE: total assets, pools, Lp tokens amount / pool, assets deployed / pool\\n    /// unclaimed rewards, amount in deposit token on strategy, amount in emergency token on strategy\\n    /// @inheritdoc ICurveConvexPeriphery\\n    ///\\n    function status()\\n        external\\n        view\\n        virtual\\n        override(FijaStrategy, ICurveConvexPeriphery)\\n        returns (string memory)\\n    {\\n        string memory str1 = string(\\n            abi.encodePacked(\\\"totalAssets:\\\", Strings.toString(totalAssets()))\\n        );\\n\\n        string memory str2 = \\\"\\\";\\n\\n        uint256 crvEarned = 0;\\n        for (uint8 i = 0; i < POOL_NUM; i++) {\\n            address pool = _curvePools[i];\\n\\n            uint256 amountInLpTokens = IERC20(_poolRewardContract[pool])\\n                .balanceOf(STRATEGY);\\n\\n            uint256 poolValue = calcWithdrawOneCoin(\\n                pool,\\n                amountInLpTokens,\\n                _poolDepositCcyIndex[pool]\\n            );\\n            str2 = string(\\n                abi.encodePacked(\\n                    str2,\\n                    \\\"|Pool:\\\",\\n                    Strings.toHexString(uint256(uint160(pool)), 20),\\n                    \\\"|LpTokens:\\\",\\n                    Strings.toString(amountInLpTokens),\\n                    \\\"|Value:\\\",\\n                    Strings.toString(poolValue)\\n                )\\n            );\\n\\n            (, , , address rewardContract, , ) = Convex_IBooster.poolInfo(\\n                _poolConvexPoolId[pool]\\n            );\\n            crvEarned += IRewardStaking(rewardContract).earned(STRATEGY);\\n        }\\n\\n        uint256 depositCCyValue;\\n        uint256 emergencyCCyValue = 0;\\n\\n        if (!EME_POOL_DISABLED) {\\n            emergencyCCyValue = IERC20(EMERGENCY_CCY).balanceOf(STRATEGY);\\n        }\\n        if (DEPOSIT_CCY == ETH) {\\n            depositCCyValue = STRATEGY.balance;\\n        } else {\\n            depositCCyValue = IERC20(DEPOSIT_CCY).balanceOf(STRATEGY);\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    str1,\\n                    \\\"|UnclaimedRewards:\\\",\\n                    Strings.toString(\\n                        crvEarned + Convex_ICvxMining.ConvertCrvToCvx(crvEarned)\\n                    ),\\n                    \\\"|DepositCcyAmount:\\\",\\n                    Strings.toString(depositCCyValue),\\n                    \\\"|EmergencyCcyAmount:\\\",\\n                    EME_POOL_DISABLED\\n                        ? \\\"N/A\\\"\\n                        : Strings.toString(emergencyCCyValue),\\n                    str2\\n                )\\n            );\\n    }\\n\\n    ///\\n    /// @dev Helper method to calculatee pool yield\\n    /// @param crvInDepositCCy exchange rate CRV/deposit token\\n    /// @param cvxInDepositCcy exchange rate CVX/deposit token\\n    /// @param pool address of pool\\n    /// @return APR of the pool in bps (14 decimals precision)\\n    /// NOTE: APR is sum of CRV reward apr and CVX reward apr\\n    ///\\n    function _poolYield(\\n        uint256 crvInDepositCCy,\\n        uint256 cvxInDepositCcy,\\n        address pool\\n    ) private view returns (uint256) {\\n        uint256 lpTokenPriceInDepositCcy = calcWithdrawOneCoin(\\n            pool,\\n            PRECISION_18,\\n            _poolDepositCcyIndex[pool]\\n        );\\n\\n        (, uint256[] memory rates) = Convex_IApr.rewardRates(\\n            _poolConvexPoolId[pool]\\n        );\\n        uint256 crvApr = Convex_IApr.apr(\\n            rates[0],\\n            crvInDepositCCy,\\n            lpTokenPriceInDepositCcy\\n        );\\n        uint256 cvxApr = Convex_IApr.apr(\\n            rates[1],\\n            cvxInDepositCcy,\\n            lpTokenPriceInDepositCcy\\n        );\\n\\n        return crvApr + cvxApr;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/CurveConvex/CurveConvexStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../base/FijaStrategy.sol\\\";\\nimport \\\"./CurveConvexStrategyProtocol.sol\\\";\\nimport \\\"./errors.sol\\\";\\nimport \\\"../../protocols/curve/interfaces/ICurve.sol\\\";\\nimport \\\"./ICurveConvexPeriphery.sol\\\";\\nimport \\\"./CurveConvexBase.sol\\\";\\nimport \\\"./CurveConvexPeriphery.sol\\\";\\n\\n///\\n/// @title Curve Convex Strategy\\n/// @author Fija\\n/// @notice Main contract used for asset management\\n/// @dev Responsibe for adding or removing the liquidity from the pool,\\n/// executing swaps, harvesting and rebalancing assets\\n///\\ncontract CurveConvexStrategy is CurveConvexBase {\\n    ICurveConvexPeriphery internal immutable PERIPHERY;\\n\\n    constructor(\\n        address depositCurrency_,\\n        address governance_,\\n        string memory tokenName_,\\n        string memory tokenSymbol_,\\n        uint256 maxTicketSize_,\\n        uint256 maxVaultValue_,\\n        ConstructorData memory data_\\n    )\\n        CurveConvexBase(\\n            depositCurrency_,\\n            governance_,\\n            tokenName_,\\n            tokenSymbol_,\\n            maxTicketSize_,\\n            maxVaultValue_,\\n            data_\\n        )\\n    {\\n        PERIPHERY = ICurveConvexPeriphery(data_.linkAddr);\\n    }\\n\\n    ///\\n    /// NOTE: uses periphery contract to query total assets it has under management\\n    /// @inheritdoc IERC4626\\n    ///\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return PERIPHERY.totalAssets();\\n    }\\n\\n    ///\\n    /// @dev calculates amount of tokens receiver will get based on asset deposit.\\n    /// @param assets amount of assets caller wants to deposit\\n    /// @param receiver address of the owner of deposit once deposit completes, this address will receive tokens.\\n    /// @return amount of tokens receiver will receive\\n    /// NOTE: Executes deposits to curve pools and stakes LP tokens to Convex pools\\n    /// Caller and receiver must be whitelisted\\n    /// Cannot deposit in emergency mode\\n    /// Emits IERC4626.Deposit\\n    ///\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    )\\n        public\\n        payable\\n        virtual\\n        override\\n        emergencyModeRestriction\\n        returns (uint256)\\n    {\\n        uint256 tokens = super.deposit(assets, receiver);\\n\\n        // find lowest negative difference between target and current exposure\\n        (int256[8] memory poolExpDiff, ) = PERIPHERY.exposureDiff(\\n            totalAssets()\\n        );\\n        address depositCcy = DEPOSIT_CCY;\\n        uint256 remainingToDeposit;\\n\\n        if (depositCcy == ETH) {\\n            remainingToDeposit = address(this).balance;\\n        } else {\\n            remainingToDeposit = IERC20(depositCcy).balanceOf(address(this));\\n        }\\n\\n        while (remainingToDeposit > 0) {\\n            uint8 minIndex = 0;\\n            int256 minDiff = 0;\\n\\n            for (uint8 i = 0; i < POOL_NUM; i++) {\\n                if (poolExpDiff[i] < minDiff) {\\n                    minDiff = poolExpDiff[i];\\n                    minIndex = i;\\n                }\\n            }\\n            if (minDiff < 0) {\\n                uint256 assetsToDeposit = 0;\\n                if (int256(remainingToDeposit) + minDiff <= 0) {\\n                    // deposit all assets to pool\\n                    assetsToDeposit = remainingToDeposit;\\n                    remainingToDeposit = 0;\\n                } else {\\n                    // deposit difference\\n                    assetsToDeposit = uint256(minDiff * -1);\\n                    remainingToDeposit -= assetsToDeposit;\\n\\n                    // reduce deposited exposure\\n                    poolExpDiff[minIndex] = 0;\\n                }\\n                address pool = _curvePools[minIndex];\\n\\n                uint256 minAmount = PERIPHERY.calcTokenAmount(\\n                    pool,\\n                    assetsToDeposit,\\n                    true\\n                );\\n                minAmount =\\n                    (minAmount * (BASIS_POINTS_DIVISOR - SLIPPAGE_SWAP)) /\\n                    BASIS_POINTS_DIVISOR;\\n\\n                address depositCtr = _poolDepositCtr[pool];\\n                if (depositCcy != ETH) {\\n                    SafeERC20.forceApprove(\\n                        IERC20(depositCcy),\\n                        depositCtr != address(0) ? depositCtr : pool,\\n                        assetsToDeposit\\n                    );\\n                }\\n                address lpToken = _poolLpToken[pool];\\n\\n                // deposit to curve pools to get LP tokens\\n                _addLiquidity(pool, assetsToDeposit, minAmount);\\n\\n                SafeERC20.forceApprove(\\n                    IERC20(lpToken),\\n                    address(Convex_IBooster),\\n                    IERC20(lpToken).balanceOf(address(this))\\n                );\\n                // stake all LPtokens to convex\\n                Convex_IBooster.depositAll(_poolConvexPoolId[pool], true);\\n            } else {\\n                // no positive discrepancy, so end logic\\n                remainingToDeposit = 0;\\n            }\\n        }\\n        return tokens;\\n    }\\n\\n    ///\\n    /// @dev Burns tokens from owner and sends exact number of assets to receiver\\n    /// @param assets amount of assets caller wants to withdraw\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of tokens\\n    /// @return amount of tokens burnt based on exact assets requested\\n    /// NOTE: unstakes LP tokens from Convex pools and removes liquidity from Curve pools\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual override(IERC4626) returns (uint256) {\\n        _withdraw(assets);\\n        return super.withdraw(assets, receiver, owner);\\n    }\\n\\n    ///\\n    /// @dev Burns exact number of tokens from owner and sends assets to receiver.\\n    /// @param tokens amount of tokens caller wants to redeem\\n    /// @param receiver address of the asset receiver\\n    /// @param owner address of the owner of tokens\\n    /// @return amount of assets receiver will receive based on exact burnt tokens\\n    /// NOTE: unstakes LP tokens from Convex pools and removes liquidity from Curve pools\\n    /// Caller, receiver and owner must be whitelisted\\n    /// Emits IERC4626.Withdraw\\n    ///\\n    function redeem(\\n        uint256 tokens,\\n        address receiver,\\n        address owner\\n    ) external virtual override returns (uint256) {\\n        uint256 assets = previewRedeem(tokens);\\n        _withdraw(assets);\\n        return super.redeem(tokens, receiver, owner);\\n    }\\n\\n    ///\\n    /// NOTE: harvest is scheduled\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function needHarvest() external view virtual override returns (bool) {\\n        if (block.timestamp >= _lastHarvestTime + HARVEST_TIME) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    ///\\n    /// NOTE: Only governance access\\n    /// Restricted in emergency mode\\n    /// emits IFijaStrategy.Harvest\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function harvest()\\n        public\\n        virtual\\n        override\\n        onlyGovernance\\n        emergencyModeRestriction\\n    {\\n        // get rewards from each pool\\n        for (uint8 i = 0; i < POOL_NUM; i++) {\\n            IRewardStaking(_poolRewardContract[_curvePools[i]]).getReward(\\n                address(this),\\n                false\\n            );\\n        }\\n        // convert CRV and CVX rewards to deposit currency\\n        uint256 crvAmount = IERC20(CRV).balanceOf(address(this));\\n        uint256 cvxAmount = IERC20(CVX).balanceOf(address(this));\\n        (\\n            uint256[2] memory output,\\n            uint256[] memory crvIntermed,\\n            uint256[] memory cvxIntermed\\n        ) = PERIPHERY.crvCvxToDepositCcy([crvAmount, cvxAmount]);\\n\\n        if (output[0] != 0) {\\n            uint8 poolNum = uint8(_crvRewardRoute.length);\\n            // calculate CRV to deposit currency amount\\n            for (uint8 i = 0; i < poolNum; i++) {\\n                crvAmount = _exchange(\\n                    _crvRewardRoute[i].addr,\\n                    _crvRewardRoute[i].from,\\n                    _crvRewardRoute[i].to,\\n                    crvAmount,\\n                    crvIntermed[i]\\n                );\\n            }\\n        } else {\\n            crvAmount = 0;\\n        }\\n        if (output[1] != 0) {\\n            uint8 poolNum = uint8(_cvxRewardRoute.length);\\n            // calculate CVX to deposit currency amount\\n            for (uint8 i = 0; i < poolNum; i++) {\\n                cvxAmount = _exchange(\\n                    _cvxRewardRoute[i].addr,\\n                    _cvxRewardRoute[i].from,\\n                    _cvxRewardRoute[i].to,\\n                    cvxAmount,\\n                    cvxIntermed[i]\\n                );\\n            }\\n        } else {\\n            cvxAmount = 0;\\n        }\\n\\n        _lastHarvestTime = block.timestamp;\\n        uint256 totalRewards = crvAmount + cvxAmount;\\n\\n        uint256 share = 0;\\n        address depositCcy = DEPOSIT_CCY;\\n\\n        if (totalRewards > 0) {\\n            share = (totalRewards * 2500) / BASIS_POINTS_DIVISOR;\\n\\n            if (depositCcy == ETH) {\\n                (bool success, ) = payable(governance()).call{value: share}(\\\"\\\");\\n                if (!success) {\\n                    revert TransferFailed();\\n                }\\n            } else {\\n                SafeERC20.safeTransfer(IERC20(depositCcy), governance(), share);\\n            }\\n        }\\n        emit Harvest(block.timestamp, totalRewards, share, depositCcy, \\\"\\\");\\n    }\\n\\n    ///\\n    /// NOTE uses periphery contract to query needEmergencyMode()\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function needEmergencyMode() public view virtual override returns (bool) {\\n        return PERIPHERY.needEmergencyMode();\\n    }\\n\\n    ///\\n    /// NOTE: Only governance access\\n    /// emits IFijaStrategy.EmergencyMode\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function setEmergencyMode(\\n        bool turnOn\\n    ) external virtual override onlyGovernance {\\n        emit EmergencyMode(block.timestamp, turnOn);\\n\\n        address depositCcy = DEPOSIT_CCY;\\n        if (turnOn) {\\n            _isEmergencyMode = true;\\n\\n            for (uint8 i = 0; i < POOL_NUM; i++) {\\n                address pool = _curvePools[i];\\n                address rewardContract = _poolRewardContract[pool];\\n\\n                uint256 balanceLpToken = IERC20(rewardContract).balanceOf(\\n                    address(this)\\n                );\\n                IRewardStaking(rewardContract).withdrawAndUnwrap(\\n                    balanceLpToken,\\n                    false\\n                );\\n                // convert LP tokens to deposit currency\\n                int128 depositIndex = _poolDepositCcyIndex[pool];\\n\\n                uint256 minOutCoin = PERIPHERY.calcWithdrawOneCoin(\\n                    pool,\\n                    balanceLpToken,\\n                    depositIndex\\n                );\\n                // liquidate token\\n                if (minOutCoin != 0) {\\n                    minOutCoin =\\n                        (minOutCoin *\\n                            (BASIS_POINTS_DIVISOR - SLIPPAGE_EMERGENCY)) /\\n                        BASIS_POINTS_DIVISOR;\\n\\n                    address depositCtr = _poolDepositCtr[pool];\\n                    if (depositCtr != address(0)) {\\n                        SafeERC20.forceApprove(\\n                            IERC20(_poolLpToken[pool]),\\n                            depositCtr,\\n                            balanceLpToken\\n                        );\\n                    }\\n                    _removeLiquidityOneCoin(\\n                        pool,\\n                        balanceLpToken,\\n                        depositIndex,\\n                        minOutCoin\\n                    );\\n                }\\n            }\\n            // if emergency pool is disabled no swaps\\n            if (EME_POOL_DISABLED) {\\n                return;\\n            }\\n            // convert all deposit currency to emergency currency\\n            uint256 amountToExchange;\\n            if (depositCcy == ETH) {\\n                amountToExchange = address(this).balance;\\n            } else {\\n                amountToExchange = IERC20(depositCcy).balanceOf(address(this));\\n            }\\n\\n            uint256 minOut = PERIPHERY.getExchangeAmount(\\n                _emergencyPool,\\n                depositCcy,\\n                EMERGENCY_CCY,\\n                amountToExchange\\n            );\\n\\n            if (minOut != 0) {\\n                minOut =\\n                    (minOut * (BASIS_POINTS_DIVISOR - SLIPPAGE_EMERGENCY)) /\\n                    BASIS_POINTS_DIVISOR;\\n\\n                _exchange(\\n                    _emergencyPool,\\n                    depositCcy,\\n                    EMERGENCY_CCY,\\n                    amountToExchange,\\n                    minOut\\n                );\\n            }\\n        } else {\\n            _isEmergencyMode = false;\\n            // if emergency pool is disabled no swaps just rebalance\\n            if (EME_POOL_DISABLED) {\\n                rebalance();\\n                return;\\n            }\\n\\n            // convert emergency currency to deposit currency\\n            uint256 amountToExchange = IERC20(EMERGENCY_CCY).balanceOf(\\n                address(this)\\n            );\\n\\n            uint256 minOut = PERIPHERY.getExchangeAmount(\\n                _emergencyPool,\\n                EMERGENCY_CCY,\\n                depositCcy,\\n                amountToExchange\\n            );\\n            if (minOut != 0) {\\n                minOut =\\n                    (minOut * (BASIS_POINTS_DIVISOR - SLIPPAGE_SWAP)) /\\n                    BASIS_POINTS_DIVISOR;\\n\\n                _exchange(\\n                    _emergencyPool,\\n                    EMERGENCY_CCY,\\n                    depositCcy,\\n                    amountToExchange,\\n                    minOut\\n                );\\n            }\\n            rebalance();\\n        }\\n    }\\n\\n    ///\\n    /// NOTE: rebalance is perfomed based on timespan and total asset thresholds\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function needRebalance() external view virtual override returns (bool) {\\n        uint256 totalAsset = totalAssets();\\n        if (\\n            _lastRebalanceTime + REBALANCE_TIME_UPPER < block.timestamp &&\\n            REBALANCE_THR1 <= totalAsset &&\\n            REBALANCE_THR2 > totalAsset\\n        ) {\\n            return true;\\n        }\\n        if (\\n            _lastRebalanceTime + REBALANCE_TIME_LOWER < block.timestamp &&\\n            REBALANCE_THR2 <= totalAsset\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    ///\\n    /// NOTE: Only governance access\\n    /// Restricted in emergency mode\\n    /// emits IFijaStrategy.Rebalance\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function rebalance()\\n        public\\n        virtual\\n        override\\n        onlyGovernance\\n        emergencyModeRestriction\\n    {\\n        _lastRebalanceTime = block.timestamp;\\n        (\\n            int256[8] memory poolExpDiff,\\n            uint256[] memory poolAllocationsBps\\n        ) = PERIPHERY.exposureDiff(totalAssets());\\n\\n        // first settle the positives, reduction of exposure\\n        uint8 poolNum = POOL_NUM;\\n        for (uint8 i = 0; i < poolNum; i++) {\\n            address pool = _curvePools[i];\\n            if (poolExpDiff[i] > 0) {\\n                // increase lpTokens to withdraw in order to ensure to get atleasst poolExpDiff[i]\\n                uint256 lpTokensToWithdraw = PERIPHERY.calcTokenAmount(\\n                    pool,\\n                    (uint256(poolExpDiff[i]) *\\n                        (BASIS_POINTS_DIVISOR + SLIPPAGE_SWAP)) /\\n                        BASIS_POINTS_DIVISOR,\\n                    false\\n                );\\n                // get lp tokens from convex\\n                IRewardStaking(_poolRewardContract[pool]).withdrawAndUnwrap(\\n                    lpTokensToWithdraw,\\n                    false\\n                );\\n                // special approve for deposit zaps\\n                address depositCtr = _poolDepositCtr[pool];\\n                if (depositCtr != address(0)) {\\n                    SafeERC20.forceApprove(\\n                        IERC20(_poolLpToken[pool]),\\n                        depositCtr,\\n                        lpTokensToWithdraw\\n                    );\\n                }\\n                // liquidate lp tokens on curve\\n                _removeLiquidityOneCoin(\\n                    pool,\\n                    lpTokensToWithdraw,\\n                    _poolDepositCcyIndex[pool],\\n                    uint256(poolExpDiff[i]) //minOut\\n                );\\n            }\\n        }\\n        // second settle the negatives, increase of exposure\\n        string memory str = \\\"\\\";\\n        for (uint8 i = 0; i < poolNum; i++) {\\n            address pool = _curvePools[i];\\n            str = string(\\n                abi.encodePacked(\\n                    str,\\n                    \\\"|Pool:\\\",\\n                    Strings.toHexString(uint256(uint160(pool)), 20),\\n                    \\\"|AllocationBps:\\\",\\n                    Strings.toString(poolAllocationsBps[i])\\n                )\\n            );\\n            if (poolExpDiff[i] < 0) {\\n                uint256 assetsToDeposit = uint256(poolExpDiff[i] * -1);\\n                address depositCcy = DEPOSIT_CCY;\\n                if (depositCcy != ETH) {\\n                    address depositCtr = _poolDepositCtr[pool];\\n                    SafeERC20.forceApprove(\\n                        IERC20(depositCcy),\\n                        depositCtr != address(0) ? depositCtr : pool,\\n                        assetsToDeposit\\n                    );\\n                }\\n                uint256 minOut = PERIPHERY.calcTokenAmount(\\n                    pool,\\n                    assetsToDeposit,\\n                    true\\n                );\\n                minOut =\\n                    (minOut * (BASIS_POINTS_DIVISOR - SLIPPAGE_SWAP)) /\\n                    BASIS_POINTS_DIVISOR;\\n\\n                address lpToken = _poolLpToken[pool];\\n\\n                _addLiquidity(pool, assetsToDeposit, minOut);\\n\\n                SafeERC20.forceApprove(\\n                    IERC20(lpToken),\\n                    address(Convex_IBooster),\\n                    IERC20(lpToken).balanceOf(address(this))\\n                );\\n                // stake LPtokens to convex\\n                Convex_IBooster.depositAll(_poolConvexPoolId[pool], true);\\n            }\\n        }\\n        emit Rebalance(block.timestamp, str);\\n    }\\n\\n    ///\\n    /// NOTE: uses periphery contract to query status()\\n    /// @inheritdoc IFijaStrategy\\n    ///\\n    function status() external view virtual override returns (string memory) {\\n        return PERIPHERY.status();\\n    }\\n\\n    ///\\n    /// @dev Helper for withdraw and redeem methods, contains main logic for\\n    /// balanced assets withdrawals from liquidity pools when\\n    /// @param assets amount of assets caller wants to withdraw\\n    ///\\n    function _withdraw(uint256 assets) private {\\n        uint256 currentBalance;\\n        address depositCcy = DEPOSIT_CCY;\\n\\n        if (depositCcy == ETH) {\\n            currentBalance = address(this).balance;\\n        } else {\\n            currentBalance = IERC20(depositCcy).balanceOf(address(this));\\n        }\\n\\n        // check if we have any\\n        if (assets > currentBalance) {\\n            uint256 remainingToWithdraw = assets - currentBalance;\\n            if (!_isEmergencyMode) {\\n                (int256[8] memory poolExpDiff, ) = PERIPHERY.exposureDiff(\\n                    totalAssets() - assets\\n                );\\n\\n                while (remainingToWithdraw > 0) {\\n                    uint8 maxIndex = 0;\\n                    int256 maxDiff = 0;\\n                    // find biggest positive difference between target and current exposure\\n                    for (uint8 i = 0; i < POOL_NUM; i++) {\\n                        if (poolExpDiff[i] > maxDiff) {\\n                            maxDiff = poolExpDiff[i];\\n                            maxIndex = i;\\n                        }\\n                    }\\n                    if (maxDiff > 0) {\\n                        uint256 assetsToWithdraw = 0;\\n                        if (int256(remainingToWithdraw) - maxDiff <= 0) {\\n                            // withdraw all assets from the pool\\n                            assetsToWithdraw = remainingToWithdraw;\\n                            remainingToWithdraw = 0;\\n                        } else {\\n                            // withdraw difference\\n                            assetsToWithdraw = uint256(maxDiff);\\n                            remainingToWithdraw -= assetsToWithdraw;\\n\\n                            // reduce deposited exposure\\n                            poolExpDiff[maxIndex] = 0;\\n                        }\\n                        address pool = _curvePools[maxIndex];\\n\\n                        uint256 lpTokensToWithdraw = ICurveConvexPeriphery(\\n                            PERIPHERY\\n                        ).calcTokenAmount(pool, assetsToWithdraw, false);\\n\\n                        // include slippage to get enough assets out\\n                        lpTokensToWithdraw =\\n                            (lpTokensToWithdraw *\\n                                (BASIS_POINTS_DIVISOR + SLIPPAGE_SWAP)) /\\n                            BASIS_POINTS_DIVISOR;\\n\\n                        // check if we are burning more then we have\\n                        address rewardContract = _poolRewardContract[pool];\\n                        uint256 lpTokenBalance = IERC20(rewardContract)\\n                            .balanceOf(address(this));\\n\\n                        if (lpTokensToWithdraw > lpTokenBalance) {\\n                            lpTokensToWithdraw = lpTokenBalance;\\n                            assetsToWithdraw =\\n                                (assetsToWithdraw *\\n                                    (BASIS_POINTS_DIVISOR - SLIPPAGE_SWAP)) /\\n                                BASIS_POINTS_DIVISOR;\\n                        }\\n                        // get lp tokens from convex\\n                        IRewardStaking(rewardContract).withdrawAndUnwrap(\\n                            lpTokensToWithdraw,\\n                            false\\n                        );\\n                        // special approval for deposit zaps\\n                        address depositCtr = _poolDepositCtr[pool];\\n                        if (depositCtr != address(0)) {\\n                            SafeERC20.forceApprove(\\n                                IERC20(_poolLpToken[pool]),\\n                                depositCtr,\\n                                lpTokensToWithdraw\\n                            );\\n                        }\\n                        // liquidate lp tokens on curve to get deposit currency out\\n                        _removeLiquidityOneCoin(\\n                            pool,\\n                            lpTokensToWithdraw,\\n                            _poolDepositCcyIndex[pool],\\n                            assetsToWithdraw //minOut\\n                        );\\n                    } else {\\n                        remainingToWithdraw = 0;\\n                    }\\n                }\\n            } else {\\n                // in emergency mode, convert emergency to deposit and withdraw\\n                address emergencyCcy = EMERGENCY_CCY;\\n                uint256 amount = PERIPHERY.getExchangeAmount(\\n                    _emergencyPool,\\n                    depositCcy,\\n                    emergencyCcy,\\n                    remainingToWithdraw\\n                );\\n                if (amount == 0) {\\n                    revert FijaInsufficientAmountToWithdraw();\\n                }\\n\\n                uint256 emergencyCCyAmount = (amount *\\n                    (BASIS_POINTS_DIVISOR + SLIPPAGE_EMERGENCY)) /\\n                    BASIS_POINTS_DIVISOR;\\n\\n                // check if we have enough of emergencyCcy\\n                uint256 emergencyCcyBalance = IERC20(emergencyCcy).balanceOf(\\n                    address(this)\\n                );\\n                if (emergencyCCyAmount > emergencyCcyBalance) {\\n                    emergencyCCyAmount = emergencyCcyBalance;\\n                    remainingToWithdraw =\\n                        (remainingToWithdraw *\\n                            (BASIS_POINTS_DIVISOR - SLIPPAGE_SWAP)) /\\n                        BASIS_POINTS_DIVISOR;\\n                }\\n\\n                _exchange(\\n                    _emergencyPool,\\n                    emergencyCcy,\\n                    depositCcy,\\n                    emergencyCCyAmount,\\n                    remainingToWithdraw\\n                );\\n            }\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper for providing liquidity to Curve pools\\n    /// Used to brige difference in pool interfaces\\n    /// @param pool address to which liquidity is provided\\n    /// @param depositAmount amount in deposit tokens to provide to liquidity pools\\n    /// @param minMintAmount minimum amount of LP token expected to receive\\n    /// NOTE: some pool require use of special deposit contracts for operations\\n    ///\\n    function _addLiquidity(\\n        address pool,\\n        uint256 depositAmount,\\n        uint256 minMintAmount\\n    ) private {\\n        uint8 id = _poolCategory[pool][0];\\n        int128 depositCcyIndex = _poolDepositCcyIndex[pool];\\n\\n        uint256[4] memory amounts = _buildInputAmount(\\n            depositAmount,\\n            depositCcyIndex\\n        );\\n        address depositCcy = DEPOSIT_CCY;\\n\\n        address origPool;\\n        address depositCtr = _poolDepositCtr[pool];\\n        if (depositCtr != address(0)) {\\n            origPool = pool;\\n            pool = depositCtr;\\n        }\\n        if (id == 0) {\\n            uint256 ethValue = 0;\\n            if (depositCcy == ETH) {\\n                ethValue = depositAmount;\\n            }\\n            uint256[3] memory inputs = [amounts[0], amounts[1], amounts[2]];\\n\\n            ICurve(pool).add_liquidity{value: ethValue}(inputs, minMintAmount);\\n        } else if (id == 1) {\\n            uint256[3] memory inputs = [amounts[0], amounts[1], amounts[2]];\\n\\n            uint256 ethValue = 0;\\n            if (depositCcy == ETH) {\\n                ethValue = depositAmount;\\n            }\\n            ICurve(pool).add_liquidity{value: ethValue}(\\n                inputs,\\n                minMintAmount,\\n                true\\n            );\\n        } else if (id == 2) {\\n            uint256[2] memory inputs = [amounts[0], amounts[1]];\\n\\n            uint256 ethValue = 0;\\n            if (depositCcy == ETH) {\\n                ethValue = depositAmount;\\n            }\\n            ICurve(pool).add_liquidity{value: ethValue}(inputs, minMintAmount);\\n        } else if (id == 3) {\\n            ICurve(pool).add_liquidity(amounts, minMintAmount);\\n        } else if (id == 4) {\\n            uint256[2] memory inputs = [amounts[0], amounts[1]];\\n\\n            uint256 ethValue = 0;\\n            if (depositCcy == ETH) {\\n                ethValue = depositAmount;\\n            }\\n\\n            ICurve(pool).add_liquidity{value: ethValue}(\\n                inputs,\\n                minMintAmount,\\n                true\\n            );\\n        } else if (id == 5) {\\n            ICurve(pool).add_liquidity(origPool, amounts, minMintAmount);\\n        } else if (id == 6) {\\n            uint256[3] memory inputs = [amounts[0], amounts[1], amounts[2]];\\n            ICurve(pool).add_liquidity(origPool, inputs, minMintAmount);\\n        } else {\\n            revert FijaInvalidPoolCategory();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper for calculating amount of deposit tokens to receive when burning LP tokens\\n    /// Used to brige difference in pool interfaces\\n    /// @param pool address of Curve liquidity pool which holds LP tokens\\n    /// @param burnAmount amount of LP tokens to burn\\n    /// @param i index indicating token position in the pool, this indicates type of token received in return\\n    /// @param minReceived minimum amount of deposit tokens expected to receive\\n    /// NOTE: some pool require use of special deposit contracts for operations\\n    ///\\n    function _removeLiquidityOneCoin(\\n        address pool,\\n        uint256 burnAmount,\\n        int128 i,\\n        uint256 minReceived\\n    ) private {\\n        uint8 id = _poolCategory[pool][1];\\n        address depositCtr = _poolDepositCtr[pool];\\n\\n        address origPool;\\n        if (depositCtr != address(0)) {\\n            origPool = pool;\\n            pool = depositCtr;\\n        }\\n        if (id == 0) {\\n            ICurve(pool).remove_liquidity_one_coin(burnAmount, i, minReceived);\\n        } else if (id == 1) {\\n            ICurve(pool).remove_liquidity_one_coin(\\n                burnAmount,\\n                i,\\n                minReceived,\\n                true\\n            );\\n        } else if (id == 2) {\\n            ICurve(pool).remove_liquidity_one_coin(\\n                burnAmount,\\n                uint256(int256(i)),\\n                minReceived,\\n                true\\n            );\\n        } else if (id == 3) {\\n            ICurve(pool).remove_liquidity_one_coin(\\n                burnAmount,\\n                uint256(int256(i)),\\n                minReceived\\n            );\\n        } else if (id == 4) {\\n            ICurve(pool).remove_liquidity_one_coin(\\n                origPool,\\n                burnAmount,\\n                i,\\n                minReceived\\n            );\\n        } else {\\n            revert FijaInvalidPoolCategory();\\n        }\\n    }\\n\\n    ///\\n    /// @dev Helper for executing swap between two tokens\\n    /// Used to brige difference in pool interfaces\\n    /// @param pool address of Curve liquidity pool\\n    /// @param from token address exchanging \\\"from\\\"\\n    /// @param to token address exchanging \\\"to\\\"\\n    /// @param input amount of \\\"from\\\" tokens to exchange\\n    /// @param minOut minimum amount of \\\"to\\\" tokens expected to receive\\n    /// NOTE: some pool require use of special deposit contracts for operations\\n    ///\\n    function _exchange(\\n        address pool,\\n        address from,\\n        address to,\\n        uint256 input,\\n        uint256 minOut\\n    ) private returns (uint256) {\\n        address poolDeposit = _poolDepositCtr[pool];\\n        uint8 id = _poolExchangeCategory[pool][1];\\n\\n        uint256 i = _rewardPoolCoinIndex[pool][from];\\n        uint256 j = _rewardPoolCoinIndex[pool][to];\\n        if (id == 0) {\\n            IExchangeRegistry ex = IExchangeRegistry(\\n                Curve_IAddressProvider.get_address(CURVE_EXCHANGE_ID)\\n            );\\n\\n            uint256 ethValue = 0;\\n            if (from == ETH) {\\n                ethValue = input;\\n            } else {\\n                SafeERC20.forceApprove(IERC20(from), address(ex), input);\\n            }\\n            return\\n                ex.exchange{value: ethValue}(\\n                    pool,\\n                    from,\\n                    to,\\n                    input,\\n                    minOut,\\n                    address(this)\\n                );\\n        } else if (id == 1) {\\n            address depo = pool;\\n            if (poolDeposit != address(0)) {\\n                depo = poolDeposit;\\n            }\\n            uint256 ethValue = 0;\\n            if (from == ETH) {\\n                ethValue = input;\\n            } else {\\n                SafeERC20.forceApprove(IERC20(from), depo, input);\\n            }\\n\\n            return\\n                ICurve(depo).exchange{value: ethValue}(\\n                    i,\\n                    j,\\n                    input,\\n                    minOut,\\n                    true\\n                );\\n        } else if (id == 2) {\\n            uint256 ethValue = 0;\\n            if (from == ETH) {\\n                ethValue = input;\\n            } else {\\n                SafeERC20.forceApprove(IERC20(from), pool, input);\\n            }\\n            return\\n                ICurve(pool).exchange_underlying{value: ethValue}(\\n                    int128(uint128(i)),\\n                    int128(uint128(j)),\\n                    input,\\n                    minOut\\n                );\\n        } else if (id == 3) {\\n            // deposit zap\\n            address depo = pool;\\n            if (poolDeposit != address(0)) {\\n                depo = poolDeposit;\\n            }\\n\\n            uint256 ethValue = 0;\\n            if (from == ETH) {\\n                ethValue = input;\\n            } else {\\n                SafeERC20.forceApprove(IERC20(from), depo, input);\\n            }\\n\\n            return\\n                ICurve(depo).exchange_underlying{value: ethValue}(\\n                    i,\\n                    j,\\n                    input,\\n                    minOut\\n                );\\n        } else if (id == 4) {\\n            // deposit zap\\n            uint256 ethValue = 0;\\n            if (from == ETH) {\\n                ethValue = input;\\n            } else {\\n                SafeERC20.forceApprove(IERC20(from), poolDeposit, input);\\n            }\\n            return\\n                ICurve(poolDeposit).exchange{value: ethValue}(\\n                    pool,\\n                    i,\\n                    j,\\n                    input,\\n                    minOut\\n                );\\n        } else if (id == 5) {\\n            address depo = pool;\\n            if (poolDeposit != address(0)) {\\n                depo = poolDeposit;\\n            }\\n            uint256 ethValue = 0;\\n            if (from == ETH) {\\n                ethValue = input;\\n            } else {\\n                SafeERC20.forceApprove(IERC20(from), depo, input);\\n            }\\n            return\\n                ICurve(depo).exchange{value: ethValue}(\\n                    int128(uint128(i)),\\n                    int128(uint128(j)),\\n                    input,\\n                    minOut\\n                );\\n        } else if (id == 6) {\\n            // deposit zap\\n            address depo = pool;\\n            if (poolDeposit != address(0)) {\\n                depo = poolDeposit;\\n            }\\n\\n            uint256 ethValue = 0;\\n            if (from == ETH) {\\n                ethValue = input;\\n            } else {\\n                SafeERC20.forceApprove(IERC20(from), depo, input);\\n            }\\n\\n            return ICurve(depo).exchange{value: ethValue}(i, j, input, minOut);\\n        } else {\\n            revert FijaInvalidPoolCategory();\\n        }\\n    }\\n\\n    receive() external payable override {}\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/CurveConvex/CurveConvexStrategyProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../../protocols/convex/interfaces/IBooster.sol\\\";\\nimport \\\"../../protocols/convex/interfaces/IApr.sol\\\";\\nimport \\\"../../protocols/convex/interfaces/ICvxMining.sol\\\";\\nimport \\\"../../protocols/convex/interfaces/IRewardStaking.sol\\\";\\nimport \\\"../../protocols/curve/interfaces/IAddressProvider.sol\\\";\\nimport \\\"../../protocols/curve/interfaces/IExchangeRegistry.sol\\\";\\nimport \\\"../../protocols/curve/interfaces/ICurveMetaRegistry.sol\\\";\\nimport \\\"../../protocols/curve/interfaces/ICurve.sol\\\";\\n\\n///\\n/// @title Curve Convex Strategy Protocol\\n/// @author Fija\\n/// @notice Hold protocol references and constants used in the strategy\\n/// @dev Inherited by both peripery and main strategy contract\\n///\\ncontract CurveConvexStrategyProtocol {\\n    uint256 internal constant CURVE_EXCHANGE_ID = 2;\\n\\n    uint256 internal constant PRECISION_18 = 10 ** 18;\\n\\n    uint256 internal constant PRECISION_30 = 10 ** 30;\\n\\n    uint256 internal constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    address internal constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    address internal constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n\\n    ///\\n    /// @dev Reference to Curve meta registry. Used for abstracting\\n    /// operations on pools with different interfaces\\n    ///\\n    ICurveMetaRegistry internal constant Curve_ICurveMetaRegistry =\\n        ICurveMetaRegistry(0xF98B45FA17DE75FB1aD0e7aFD971b0ca00e379fC);\\n\\n    ///\\n    /// @dev Reference to Convex booster contract. Used when staking,\\n    /// unstaking Curve LP tokens from Convex pools\\n    ///\\n    IBooster internal constant Convex_IBooster =\\n        IBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n\\n    ///\\n    /// @dev Reference to Convex library. Used to calculate CVX rewards\\n    /// based on CRV rewards\\n    ///\\n    ICvxMining internal constant Convex_ICvxMining =\\n        ICvxMining(0x3c75BFe6FbfDa3A94E7E7E8c2216AFc684dE5343);\\n\\n    ///\\n    /// @dev Reference to Curve address provider which is used to get\\n    /// various Curve contracts consistently, specifically meta exchange\\n    ///\\n    IAddressProvider internal constant Curve_IAddressProvider =\\n        IAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n    ///\\n    /// @dev Reference to Curve APR contract used to calculate CRV and CVX\\n    /// APR rates\\n    ///\\n    IApr internal constant Convex_IApr =\\n        IApr(0x5Fba69a794F395184b5760DAf1134028608e5Cd1);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/CurveConvex/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nerror FijaInvalidPoolCategory();\\nerror FijaEthInputDisbalance();\\nerror FijaEthInputNotFound();\\nerror FijaUnknownPoolForCoins();\\nerror FijaPoolRatingInvalid();\\nerror FijaConvexPoolUnknown();\\nerror FijaCoinIndexNotFound();\\n\"\r\n    },\r\n    \"contracts/strategies/CurveConvex/ICurveConvexPeriphery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ICurveConvexPeriphery {\\n    ///\\n    /// @dev calculates amount of LP token to receive from the pool based on deposit amount\\n    /// @param pool address providing LP tokens\\n    /// @param depositAmount amount of deposit tokens to provide to pool. Amount is always in deposit tokens.\\n    /// @param isDeposit flag to check is the operation for removing or adding the liquidity\\n    /// @return amount of LP tokens to receive\\n    ///\\n    function calcTokenAmount(\\n        address pool,\\n        uint256 depositAmount,\\n        bool isDeposit\\n    ) external view returns (uint256);\\n\\n    ///\\n    /// @dev calculates amount of token on index i inside the pool to receive when burning LP tokens\\n    /// @param pool address LP token's pool\\n    /// @param burnAmount amount of LP tokens to burn\\n    /// @param i token index in the pool\\n    /// @return amount of token to receive\\n    ///\\n    function calcWithdrawOneCoin(\\n        address pool,\\n        uint256 burnAmount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    ///\\n    /// @dev calculates amount to receive when swapping \\\"from\\\" \\\"to\\\"\\n    /// @param pool address of swap pool\\n    /// @param from token address exchanging \\\"from\\\"\\n    /// @param to token address exchanging \\\"to\\\"\\n    /// @param input amount of \\\"from\\\" token to exchange\\n    /// @return amount of \\\"to\\\" token to receive after exchange\\n    ///\\n    function getExchangeAmount(\\n        address pool,\\n        address from,\\n        address to,\\n        uint256 input\\n    ) external view returns (uint256);\\n\\n    ///\\n    /// @dev Calculates pool exposure in deposit tokens, used as a part of rebalancing process\\n    /// @param targetExposure target exposure in deposit tokens\\n    /// @return array of pool exposure difference between current and target exposure in deposit tokens\\n    /// @return pool allocation in bps\\n    ///\\n    function exposureDiff(\\n        uint256 targetExposure\\n    ) external view returns (int256[8] memory, uint256[] memory);\\n\\n    ///\\n    /// @dev Calculates exchange from CRV and CVX amount to deposit tokens amount\\n    /// @param inputs array [CRV amount, CVX amount]\\n    /// @return array [CRV in deposit token amount, CVX in deposit token amount]\\n    /// @return array which stores results of each exchange hop from CRV to target deposit token\\n    /// @return array which stores results of each exchange hop from CVX to target deposit token\\n    ///\\n    function crvCvxToDepositCcy(\\n        uint256[2] memory inputs\\n    )\\n        external\\n        view\\n        returns (uint256[2] memory, uint256[] memory, uint256[] memory);\\n\\n    ///\\n    /// @dev Used as supporting method to main strategy contract totalAssets()\\n    /// Includes all assets under strategy management, includes amount deployed in staked LP tokens,\\n    /// emergency mode assets and to be deployed assets\\n    /// @return total amount of assets in deposit tokens\\n    ///\\n    function totalAssets() external view returns (uint256);\\n\\n    ///\\n    /// @dev Used as supporting method to main strategy contract needEmergencyMode().\\n    /// Checks if there is a need for emergency mode, verifies depeg and low-liquidity conditions\\n    /// @return flag indicating if there is need to go into emergency mode\\n    ///\\n    function needEmergencyMode() external view returns (bool);\\n\\n    ///\\n    /// @dev Used as supporting method to main strategy contract status()\\n    /// checks strategy status\\n    /// @return string with strategy metadata\\n    ///\\n    function status() external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositCurrency_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governance_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTicketSize_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVaultValue_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"dePegCheck\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEmePoolDisabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"emergencyCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"linkAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"harvestTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceTimeLower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceTimeUpper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depegDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageEmergency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityThresholdBps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deposit\",\"type\":\"address\"},{\"internalType\":\"uint8[4]\",\"name\":\"category\",\"type\":\"uint8[4]\"}],\"internalType\":\"struct Pool[]\",\"name\":\"curvePools\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"}],\"internalType\":\"struct CoinRating[]\",\"name\":\"coinRating\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deposit\",\"type\":\"address\"},{\"internalType\":\"uint8[2]\",\"name\":\"exchangeCategory\",\"type\":\"uint8[2]\"}],\"internalType\":\"struct EmergencyPool\",\"name\":\"emergencyPool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8[2]\",\"name\":\"exchangeCategory\",\"type\":\"uint8[2]\"}],\"internalType\":\"struct RewardPoolInput[]\",\"name\":\"crvRewardRoute\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"deposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint8[2]\",\"name\":\"exchangeCategory\",\"type\":\"uint8[2]\"}],\"internalType\":\"struct RewardPoolInput[]\",\"name\":\"cvxRewardRoute\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ConstructorData\",\"name\":\"data_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ACLDepositReceiverNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLGovZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotGov\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotGovOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotReseller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLOwnerZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLRedeemWithdrawReceiverOwnerNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLResellZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLTransferUserNotWhitelist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACLWhitelistAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaCoinIndexNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaConvexPoolUnknown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaInEmergencyMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaInsufficientAmountToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaInvalidPoolCategory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaPoolRatingInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaUnknownPoolForCoins\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FijaZeroInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferDisbalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"turnOn\",\"type\":\"bool\"}],\"name\":\"EmergencyMode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestResult\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"profitToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousReseller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReseller\",\"type\":\"address\"}],\"name\":\"ResellerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needEmergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"needRebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceReseller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reseller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"turnOn\",\"type\":\"bool\"}],\"name\":\"setEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReseller\",\"type\":\"address\"}],\"name\":\"transferReseller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CurveConvexStrategy", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001a7e4e63778b4f12a199c062f3efdd288afcbce8000000000000000000000000feca16ad50edce788ba81213bb0a97b9f3c3801600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000001f66696a61205374726174656779206167455552204375727665436f6e7665780000000000000000000000000000000000000000000000000000000000000000097361674555525f43430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000001abaea1f7c830bd89acc67ec4af516284b1bc33c000000000000000000000000326a62e3d741c28ba9e6c31636c5f0c4208184410000000000000000000000000000000000000000000000000000000000278d00000000000000000000000000000000000000000000000000000000000024ea0000000000000000000000000000000000000000000000000000000000006ebe0000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000098774738bc822200000000000000000000000000000000000000000000000008ffedfb595975900000000000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000440000000000000000000000000ba3436fd341f2c8a928452db3c5a3670d1d5cc73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056000000000000000000000000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000b9446c4ef5ebe66268da6700d26f96273de3d57100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ba3436fd341f2c8a928452db3c5a3670d1d5cc730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000001a7e4e63778b4f12a199c062f3efdd288afcbce80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c581b735a1688071a1746c968e0798d642ede4910000000000000000000000000000000000000000000000000000000000000002000000000000000000000000db25f211ab05b1c97d595516f45794528a807ad800000000000000000000000000000000000000000000000000000000000000020000000000000000000000001abaea1f7c830bd89acc67ec4af516284b1bc33c000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000004ebdf703948ddcea3b11f675b4d1fba9d2414a140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d533a949740bb3306d119cc777fa900ba034cd52000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000007f86bf177dd4f3494b841a37e810a34dd56c829b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000098a7f18d4e56cfe84e3d081b40001b3d5bd3eb8b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000db25f211ab05b1c97d595516f45794528a807ad800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b9446c4ef5ebe66268da6700d26f96273de3d5710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db25f211ab05b1c97d595516f45794528a807ad80000000000000000000000001a7e4e63778b4f12a199c062f3efdd288afcbce8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000b576491f1e6e5e62f1d8f26062ee822b40b0e0d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000004e3fbd56cd56c3e72c1403e103b45db9da5b9d2b000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f86bf177dd4f3494b841a37e810a34dd56c829b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000098a7f18d4e56cfe84e3d081b40001b3d5bd3eb8b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000db25f211ab05b1c97d595516f45794528a807ad800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b9446c4ef5ebe66268da6700d26f96273de3d5710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000db25f211ab05b1c97d595516f45794528a807ad80000000000000000000000001a7e4e63778b4f12a199c062f3efdd288afcbce800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}