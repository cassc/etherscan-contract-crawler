{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/DappInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface ILido {\\n    function submit(address _referral) external payable returns (uint256 StETH);\\n}\\n\\ninterface IUniswapV2Router {\\n    function swapExactETHForTokens(\\n        uint amountOutMin, \\n        address[] calldata path, \\n        address to, \\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IRewardManager {\\n    function dlpUpdateReward(address _account) external;\\n    function lsdUpdateReward(address _account) external;\\n    function treasury() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/LybraInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IMining {\\n    function refreshReward(address user) external;\\n}\\n\\ninterface IStakePool {\\n    function stake(uint256 _amount) external;\\n    function withdraw(uint256 _amount) external;\\n}\\n\\ninterface IMintPool {\\n    function getAsset() external view returns(address);\\n    function depositAssetToMint(uint256 assetAmount, uint256 mintAmount) external;\\n    function depositedAsset(address _user) external view returns (uint256);\\n    // Price of stETH, scaled in 1e18\\n    function getAssetPrice() external view returns (uint256);\\n    function withdraw(address onBehalfOf, uint256 amount) external;\\n    function mint(address onBehalfOf, uint256 amount) external;\\n    function burn(address onBehalfOf, uint256 amount) external;\\n    function checkWithdrawal(address user, uint256 amount) external view returns (uint256 withdrawal);\\n    function getPoolTotalCirculation() external view returns (uint256);\\n    function getBorrowedOf(address user) external view returns (uint256);\\n}\\n\\ninterface IConfigurator {\\n    function getVaultWeight(address pool) external view returns (uint256);\\n    function getEUSDAddress() external view returns (address);\\n    function refreshMintReward(address _account) external;\\n}\\n\\n// eUSD mining incentive, dlp stake reward pool\\ninterface IRewardPool {\\n    function stakedOf(address user) external view returns (uint256);\\n    function balanceOf(address user) external view returns (uint256);\\n    function getBoost(address _account) external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n}\\n\\ninterface IEUSD {\\n    function totalSupply() external view returns (uint256);\\n\\n    function getTotalShares() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferShares(\\n        address _recipient,\\n        uint256 _sharesAmount\\n    ) external returns (uint256);\\n\\n    function getSharesByMintedEUSD(\\n        uint256 _EUSDAmount\\n    ) external view returns (uint256);\\n\\n    function getMintedEUSDByShares(\\n        uint256 _sharesAmount\\n    ) external view returns (uint256);\\n\\n    function mint(\\n        address _recipient,\\n        uint256 _mintAmount\\n    ) external returns (uint256 newTotalShares);\\n\\n    function burnShares(\\n        address _account,\\n        uint256 burnAmount\\n    ) external returns (uint256 newTotalShares);\\n\\n    function burn(\\n        address _account,\\n        uint256 burnAmount\\n    ) external returns (uint256 newTotalShares);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/MatchPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./interfaces/LybraInterfaces.sol\\\";\\nimport \\\"./interfaces/DappInterfaces.sol\\\";\\nimport \\\"./interfaces/IRewardManager.sol\\\";\\n\\nerror ExceedAmountAllowed(uint256 _desired, uint256 _actual);\\n// Insufficient collateral to maintain 200% ratio\\nerror InsufficientCollateral();\\nerror MinLybraDeposit();\\nerror Unauthorized();\\nerror HealthyAccount();\\nerror StakePaused();\\nerror WithdrawPaused();\\nerror ExceedLimit();\\n\\ncontract MatchPool is Initializable, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    // address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    // address constant LBR = 0xed1167b6Dc64E8a366DB86F2E952A482D0981ebd;\\n    // IUniswapV2Router constant ROUTER = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    // Price of ETH-LBR LP token, scaled in 1e8\\n    AggregatorV3Interface private lpPriceFeed;\\n    IConfigurator public lybraConfigurator;\\n    IStakePool public ethlbrStakePool;\\n    IERC20 public ethlbrLpToken;\\n    IRewardManager public rewardManager;\\n    IMintPool[] public mintPools; // Lybra vault for minting eUSD/peUSD\\n\\n    // Total amount of LP token staked into this contract\\n    // which is in turn staked into Lybra LP reward pool\\n    uint256 public totalStaked;\\n    // User address => staked LP token\\n    mapping(address => uint256) public staked;\\n\\n    // Total amount of LSD deposited to this contract, which some might be deposited into Lybra vault for minting eUSD\\n    // P.S. Do note that NOT all LSD must be deposited to Lybra and this contract can hold idle LSD or\\n    //      withdraw LSD from Lybra to achieve the desired collateral ratio { collateralRatioIdeal }\\n    mapping(address => uint256) public totalSupplied;\\n    // Mint vault => user address => supplied ETH/stETH\\n    mapping(address => mapping(address => uint256)) public supplied;\\n\\n    // Total amount of LSD deposited to Lybra vault pool as collateral for minting eUSD/peUSD\\n    mapping(address => uint256) public totalDeposited;\\n    // Total amount of eUSD/peUSD minted\\n    // Users do not determine eUSD/peUSD mint amount, Match Finanace does\\n    mapping(address => uint256) public totalMinted;\\n    // Total amount of eUSD/peUSD borrowed out\\n    mapping(address => uint256) public totalBorrowed;\\n\\n    // Timestamp where insterest starts counting\\n    // Accumulated interest will only affect stETH withdrawal and liquidation\\n    // { totalBorrowed } is still just sum of principal\\n    struct BorrowInfo {\\n        uint256 principal; // Amount of eUSD/peUSD borrowed\\n        uint256 interestAmount; // Amount of eUSD/peUSD borrowed being charged interest\\n        uint256 accInterest; // Accumulated interest\\n        uint256 interestTimestamp; // Timestamp since { accInterest } was last updated\\n    }\\n    // Mint vault => user address => eUSD/peUSD 'taken out/borrowed' by user\\n    mapping(address => mapping(address => BorrowInfo)) public borrowed;\\n    uint256 public borrowRatePerSec; // 10% / 365 days, scaled by 1e18\\n\\n    uint256 public maxBorrowRatio; // 80e18, scaled by 1e20\\n    uint256 public globalBorrowRatioThreshold; // 75e18, scaled by 1e20\\n    uint256 public globalBorrowRatioLiuquidation; // 50e18, scaled by 1e20\\n\\n    // When global borrow ratio < 50%\\n    uint128 public liquidationDiscount; // 105e18, scaled by 1e20\\n    uint128 public closeFactor; // 20e18, scaled by 1e20\\n    // When global borrow ratio >= 50%\\n    uint128 public liquidationDiscountNormal; // 110e18, scaled by 1e20\\n    uint128 public closeFactorNormal; // 50e18, scaled by 1e20\\n\\n    uint256 public dlpRatioUpper; // 325\\n    uint256 public dlpRatioLower; // 275\\n    uint256 public dlpRatioIdeal; // 300\\n    uint256 public collateralRatioUpper; // 210e18\\n    uint256 public collateralRatioLower; // 190e18\\n    uint256 public collateralRatioIdeal; // 200e18\\n\\n    bool public stakePaused;\\n    bool public withdrawPaused;\\n\\n    // 0 means no limit\\n    // Cannot stake more dlp beyond this limit (USD value scaled by 1e18)\\n    uint256 stakeLimit;\\n    // Cannot supply more LSD beyond this limit (USD value scaled by 1e18)\\n    uint256 supplyLimit;\\n\\n    // Used for calculations in adjustEUSDAmount() only\\n    struct Calc {\\n        // Amount of eUSD to mint to achieve { dlpRatioIdeal }\\n        uint256 mintAmountGivenDlp;\\n        // Amount of eUSD to mint to achieve { collateralRatioIdeal }\\n        uint256 mintAmountGivenCollateral;\\n        // Amount of eUSD to burn to achieve { dlpRatioIdeal }\\n        uint256 burnAmountGivenDlp;\\n        // Amount of eUSD to burn to achieve { collateralRatioIdeal }\\n        uint256 burnAmountGivenCollateral;\\n        // Amount of stETH to deposit to achieve { collateralRatioIdeal }\\n        uint256 amountToDeposit;\\n        // Reference: Lybra EUSDMiningIncentives.sol { stakeOf(address user) }, line 173\\n        // Vault weight of stETH mint pool, scaled by 1e20\\n        uint256 vaultWeight;\\n        // Value of staked LP tokens, scaled by 1e18\\n        uint256 currentLpValue;\\n        uint256 dlpRatioCurrent;\\n        uint256 collateralRatioCurrent;\\n    }\\n\\n    event LPOracleChanged(address newOracle);\\n    event RewardManagerChanged(address newManager);\\n    event DlpRatioChanged(uint256 newLower, uint256 newUpper, uint256 newIdeal);\\n    event CollateralRatioChanged(uint256 newLower, uint256 newUpper, uint256 newIdeal);\\n    event BorrowRateChanged(uint256 newRate);\\n    event BorrowRatioChanged(uint256 newMax, uint256 newGlobalThreshold, uint256 newGlobalLiquidation);\\n    event LiquidationParamsChanged(uint128 newDiscount, uint128 newCloseFactor);\\n    event LiquidationParamsNormalChanged(uint128 newDiscount, uint128 newCloseFactor);\\n    event LPStakePaused(bool newState);\\n    event LPWithdrawPaused(bool newState);\\n    event StakeLimitChanged(uint256 newLimit);\\n    event SupplyLimitChanged(uint256 newLimit);\\n    event MintPoolAdded(address newMintPool);\\n\\n    event LpStaked(address indexed account, uint256 amount);\\n    event LpWithdrew(address indexed account, uint256 amount);\\n    event stETHSupplied(address indexed account, uint256 amount);\\n    event stETHWithdrew(address indexed account, uint256 amount, uint256 punishment);\\n    event eUSDBorrowed(address indexed account, uint256 amount);\\n    event eUSDRepaid(address indexed account, uint256 amount);\\n    event Liquidated(address indexed account, address indexed liquidator, uint256 seizeAmount);\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n\\n        setDlpRatioRange(275, 325, 300);\\n        setCollateralRatioRange(190e18, 210e18, 200e18);\\n        setBorrowRate(1e17);\\n        setBorrowRatio(85e18, 75e18, 50e18);\\n        setLiquidationParams(105e18, 20e18);\\n        setLiquidationParamsNormal(110e18, 50e18);\\n        setStakeLimit(60000e18);\\n        setSupplyLimit(4000000e18);\\n    }\\n\\n    function getMintPool() public view returns(IMintPool) {\\n        return mintPools.length > 0 ? mintPools[0] : IMintPool(address(0));\\n    }\\n\\n    function setLP(address _ethlbrLpToken) external onlyOwner {\\n        ethlbrLpToken = IERC20(_ethlbrLpToken);\\n    }\\n\\n    function setLybraContracts(\\n        address _ethlbrStakePool,\\n        address _configurator\\n    ) external onlyOwner {\\n        ethlbrStakePool = IStakePool(_ethlbrStakePool);\\n        lybraConfigurator = IConfigurator(_configurator);\\n    }\\n\\n    function setLpOracle(address _lpOracle) external onlyOwner {\\n        lpPriceFeed = AggregatorV3Interface(_lpOracle);\\n        emit LPOracleChanged(_lpOracle);\\n    }\\n\\n    function setRewardManager(address _rewardManager) external onlyOwner {\\n        rewardManager = IRewardManager(_rewardManager);\\n        emit RewardManagerChanged(_rewardManager);\\n    }\\n\\n    function setDlpRatioRange(uint256 _lower, uint256 _upper, uint256 _ideal) public onlyOwner {\\n        dlpRatioLower = _lower;\\n        dlpRatioUpper = _upper;\\n        dlpRatioIdeal = _ideal;\\n        emit DlpRatioChanged(_lower, _upper, _ideal);\\n    }\\n\\n    function setCollateralRatioRange(uint256 _lower, uint256 _upper, uint256 _ideal) public onlyOwner {\\n        collateralRatioLower = _lower;\\n        collateralRatioUpper = _upper;\\n        collateralRatioIdeal = _ideal;\\n        emit CollateralRatioChanged(_lower, _upper, _ideal);\\n    }\\n\\n    function setBorrowRate(uint256 _borrowRatePerYear) public onlyOwner {\\n        borrowRatePerSec = _borrowRatePerYear / 365 days;\\n        emit BorrowRateChanged(_borrowRatePerYear);\\n    }\\n\\n    function setBorrowRatio(uint256 _individual, uint256 _global, uint256 _liquidation) public onlyOwner {\\n        maxBorrowRatio = _individual;\\n        globalBorrowRatioThreshold = _global;\\n        globalBorrowRatioLiuquidation = _liquidation;\\n        emit BorrowRatioChanged(_individual, _global, _liquidation);\\n    }\\n\\n    function setLiquidationParams(uint128 _discount, uint128 _closeFactor) public onlyOwner {\\n        liquidationDiscount = _discount;\\n        closeFactor = _closeFactor;\\n        emit LiquidationParamsChanged(_discount, _closeFactor);\\n    }\\n\\n    function setLiquidationParamsNormal(uint128 _discount, uint128 _closeFactor) public onlyOwner {\\n        liquidationDiscountNormal = _discount;\\n        closeFactorNormal = _closeFactor;\\n        emit LiquidationParamsNormalChanged(_discount, _closeFactor);\\n    }\\n\\n    function setStakePaused(bool _state) public onlyOwner {\\n        stakePaused = _state;\\n        emit LPStakePaused(_state);\\n    }\\n\\n    function setWithdrawPaused(bool _state) public onlyOwner {\\n        withdrawPaused = _state;\\n        emit LPWithdrawPaused(_state);\\n    }\\n\\n    function setStakeLimit(uint256 _valueLimit) public onlyOwner {\\n        stakeLimit = _valueLimit;\\n        emit StakeLimitChanged(_valueLimit);\\n    }\\n\\n    function setSupplyLimit(uint256 _valueLimit) public onlyOwner {\\n        supplyLimit = _valueLimit;\\n        emit SupplyLimitChanged(_valueLimit);\\n    }\\n\\n    function addMintPool(address _mintPool) external onlyOwner {\\n        mintPools.push(IMintPool(_mintPool));\\n        emit MintPoolAdded(_mintPool);\\n    }\\n    \\n    // function zap() external payable {\\n    //     if (stakePaused) revert StakePaused();\\n\\n    //     uint256 ethToSwap = msg.value / 2;\\n    //     address[] memory swapPath = new address[](2);\\n    //     swapPath[0] = WETH;\\n    //     swapPath[1] = LBR;\\n    //     // Swap half of the ETH to LBR\\n    //     uint256[] memory amounts = ROUTER.swapExactETHForTokens{ value: ethToSwap }(\\n    //         0, \\n    //         swapPath, \\n    //         address(this), \\n    //         block.timestamp + 1\\n    //     );\\n    //     uint256 lbrAmount = amounts[1];\\n\\n    //     // Add liquidity to get LP token\\n    //     uint256 ethToAdd = msg.value - ethToSwap;\\n    //     (uint256 lbrAdded, uint256 ethAdded, uint256 lpAmount) = ROUTER.addLiquidityETH{ value: ethToAdd }(\\n    //         LBR, \\n    //         lbrAmount, \\n    //         0, \\n    //         0, \\n    //         address(this), \\n    //         block.timestamp + 1\\n    //     );\\n\\n    //     // Refund excess amounts if values of ETH and LBR swapped from ETH are not the same\\n    //     if (ethToAdd > ethAdded) {\\n    //         (bool sent,) = (msg.sender).call{ value: ethToAdd - ethAdded }(\\\"\\\");\\n    //         require(sent, \\\"ETH refund failed\\\");\\n    //     }\\n\\n    //     if (lbrAmount > lbrAdded) IERC20(LBR).safeTransfer(msg.sender, lbrAmount - lbrAdded);\\n\\n    //     if (getLpValue(totalStaked + lpAmount) > stakeLimit && stakeLimit != 0) revert ExceedLimit();\\n\\n    //     rewardManager.dlpUpdateReward(msg.sender);\\n\\n    //     // Stake LP\\n    //     uint256 allowance = ethlbrLpToken.allowance(address(this), address(ethlbrStakePool));\\n    //     if (allowance < lpAmount) ethlbrLpToken.approve(address(ethlbrStakePool), type(uint256).max);\\n\\n    //     ethlbrStakePool.stake(lpAmount);\\n    //     totalStaked += lpAmount;\\n    //     staked[msg.sender] += lpAmount;\\n\\n    //     emit LpStaked(msg.sender, lpAmount);\\n\\n    //     adjustEUSDAmount();\\n    // }\\n\\n    // Stake LBR-ETH LP token\\n    function stakeLP(uint256 _amount) external {\\n        if (stakePaused) revert StakePaused();\\n        if (getLpValue(totalStaked + _amount) > stakeLimit && stakeLimit != 0) revert ExceedLimit();\\n\\n        rewardManager.dlpUpdateReward(msg.sender);\\n\\n        ethlbrLpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 allowance = ethlbrLpToken.allowance(address(this), address(ethlbrStakePool));\\n        if (allowance < _amount) ethlbrLpToken.approve(address(ethlbrStakePool), type(uint256).max);\\n\\n        ethlbrStakePool.stake(_amount);\\n        totalStaked += _amount;\\n        staked[msg.sender] += _amount;\\n\\n        emit LpStaked(msg.sender, _amount);\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    // Withdraw LBR-ETH LP token\\n    function withdrawLP(uint256 _amount) external {\\n        if (withdrawPaused) revert WithdrawPaused();\\n\\n        rewardManager.dlpUpdateReward(msg.sender);\\n\\n        uint256 withdrawable = staked[msg.sender];\\n        if (_amount > withdrawable) revert ExceedAmountAllowed(_amount, withdrawable);\\n\\n        totalStaked -= _amount;\\n        staked[msg.sender] -= _amount;\\n\\n        ethlbrStakePool.withdraw(_amount);\\n        ethlbrLpToken.safeTransfer(msg.sender, _amount);\\n\\n        emit LpWithdrew(msg.sender, _amount);\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    function supplyETH() external payable {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        if ((totalSupplied[mintPoolAddress] + msg.value) * mintPool.getAssetPrice() / 1e18 > supplyLimit && supplyLimit != 0) revert ExceedLimit();\\n\\n        rewardManager.lsdUpdateReward(msg.sender);\\n\\n        uint256 sharesAmount = ILido(mintPool.getAsset()).submit{value: msg.value}(address(0));\\n        require(sharesAmount != 0, \\\"ZERO_DEPOSIT\\\");\\n        supplied[mintPoolAddress][msg.sender] += msg.value;\\n        totalSupplied[mintPoolAddress] += msg.value;\\n\\n        emit stETHSupplied(msg.sender, msg.value);\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    function supplyStETH(uint256 _amount) external {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        if ((totalSupplied[mintPoolAddress] + _amount) * mintPool.getAssetPrice() / 1e18 > supplyLimit && supplyLimit != 0) revert ExceedLimit();\\n\\n        rewardManager.lsdUpdateReward(msg.sender);\\n\\n        IERC20(mintPool.getAsset()).safeTransferFrom(msg.sender, address(this), _amount);\\n        supplied[mintPoolAddress][msg.sender] += _amount;\\n        totalSupplied[mintPoolAddress] += _amount;\\n\\n        emit stETHSupplied(msg.sender, _amount);\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    function withdrawStETH(uint256 _amount) external {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        uint256 borrowedEUSD = borrowed[mintPoolAddress][msg.sender].principal;\\n        uint256 withdrawable = borrowedEUSD > 0 ?\\n            supplied[mintPoolAddress][msg.sender] - borrowedEUSD * collateralRatioIdeal / maxBorrowRatio\\n                * 1e18 / mintPool.getAssetPrice() : supplied[mintPoolAddress][msg.sender];\\n\\n        if (_amount > withdrawable) revert ExceedAmountAllowed(_amount, withdrawable);\\n        uint256 _totalDeposited = totalDeposited[mintPoolAddress];\\n        uint256 _totalMinted = totalMinted[mintPoolAddress];\\n        // Disallow withdrawal if collateral ratio already below 200%\\n        if (_getCollateralRatio(_totalDeposited, _totalMinted) < collateralRatioIdeal) revert InsufficientCollateral();\\n\\n        rewardManager.lsdUpdateReward(msg.sender);\\n\\n        uint256 idleStETH = totalSupplied[mintPoolAddress] - _totalDeposited;\\n\\n        supplied[mintPoolAddress][msg.sender] -= _amount;\\n        totalSupplied[mintPoolAddress] -= _amount;\\n\\n        // Withdraw additional stETH from Lybra vault if contract does not have enough idle stETH\\n        if (idleStETH < _amount) {\\n            uint256 withdrawFromLybra = _amount - idleStETH;\\n            // Amount of stETH that can be withdrawn without burning eUSD\\n            uint256 withdrawableFromLybra = _getDepositAmountDelta(_totalDeposited, _totalMinted);\\n\\n            // Burn eUSD to withdraw stETH required\\n            if (withdrawFromLybra > withdrawableFromLybra) {\\n                uint256 amountToBurn = _getMintAmountDeltaC(_totalDeposited - withdrawFromLybra, _totalMinted);\\n                _burnEUSD(amountToBurn);\\n            }\\n\\n            // Get withdrawal amount after punishment (if any) from Lybra, accepted by user\\n            uint256 actualAmount = mintPool.checkWithdrawal(address(this), withdrawFromLybra);\\n            _withdrawFromLybra(withdrawFromLybra);\\n\\n            IERC20(mintPool.getAsset()).safeTransfer(msg.sender, idleStETH + actualAmount);\\n\\n            emit stETHWithdrew(msg.sender, _amount, _amount - actualAmount);\\n        } else {\\n            // If contract has enough idle stETH, just transfer out\\n            IERC20(mintPool.getAsset()).safeTransfer(msg.sender, _amount);\\n\\n            emit stETHWithdrew(msg.sender, _amount, 0);\\n        }\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    // Take out/borrow eUSD from Match Pool\\n    function borrowEUSD(uint256 _amount) external {\\n        address mintPoolAddress = address(getMintPool());\\n\\n        uint256 maxBorrow = _getMaxBorrow(supplied[mintPoolAddress][msg.sender]);\\n        uint256 available = totalMinted[mintPoolAddress] - totalBorrowed[mintPoolAddress];\\n        uint256 newBorrowAmount = borrowed[mintPoolAddress][msg.sender].principal + _amount;\\n        if (newBorrowAmount > maxBorrow) revert ExceedAmountAllowed(newBorrowAmount, maxBorrow);\\n        if (_amount > available) revert ExceedAmountAllowed(_amount, available);\\n\\n        // No need to update user reward info as there are no changes in supply amount\\n        rewardManager.lsdUpdateReward(address(0));\\n\\n        borrowed[mintPoolAddress][msg.sender].principal = newBorrowAmount;\\n        totalBorrowed[mintPoolAddress] += _amount;\\n\\n        // Greater than global borrow ratio threshold\\n        uint256 globalBorrowRatio = totalBorrowed[mintPoolAddress] * 1e20 / _getMaxBorrow(totalSupplied[mintPoolAddress]);\\n        // Borrow amount has to be charged interest if global borrow ratio threshold is reached\\n        if (globalBorrowRatio >= globalBorrowRatioThreshold) {\\n            BorrowInfo storage info = borrowed[mintPoolAddress][msg.sender];\\n\\n            // Already borrowed before with interest\\n            if (info.interestAmount != 0) info.accInterest += _getAccInterest(msg.sender);\\n            info.interestAmount += _amount;\\n            info.interestTimestamp = block.timestamp;\\n        }\\n\\n        IERC20(lybraConfigurator.getEUSDAddress()).safeTransfer(msg.sender, _amount);\\n\\n        emit eUSDBorrowed(msg.sender, _amount);\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    function repayEUSD(address _account, uint256 _amount) public {\\n        address mintPoolAddress = address(getMintPool());\\n\\n        uint256 oldBorrowAmount = borrowed[mintPoolAddress][_account].principal;\\n        uint256 newAccInterest = borrowed[mintPoolAddress][_account].accInterest + _getAccInterest(_account);\\n        IERC20 eUSD = IERC20(lybraConfigurator.getEUSDAddress());\\n\\n        // Just repaying interest\\n        if (oldBorrowAmount == 0) {\\n            eUSD.safeTransferFrom(msg.sender, rewardManager.treasury(), _amount);\\n\\n            if (_amount < newAccInterest) {\\n                // Not yet repaid all\\n                borrowed[mintPoolAddress][_account].accInterest = newAccInterest - _amount;\\n                borrowed[mintPoolAddress][_account].interestTimestamp = block.timestamp;\\n            } else {\\n                // Delete info if repaid all\\n                delete borrowed[mintPoolAddress][_account];  \\n            }\\n\\n            emit eUSDRepaid(_account, _amount);\\n\\n            return;\\n        }\\n\\n        // No need to update user reward info as there are no changes in supply amount\\n        rewardManager.lsdUpdateReward(address(0));\\n\\n        uint256 newBorrowAmount;\\n        // Amount for repaying interest after repaying all borrowed eUSD\\n        uint256 spareAmount;\\n        if (_amount > oldBorrowAmount) spareAmount = _amount - oldBorrowAmount;\\n        else newBorrowAmount = oldBorrowAmount - _amount;\\n\\n        eUSD.safeTransferFrom(msg.sender, address(this), _amount);\\n        borrowed[mintPoolAddress][_account].principal = newBorrowAmount;\\n        totalBorrowed[mintPoolAddress] -= (oldBorrowAmount - newBorrowAmount);\\n\\n        // Prioritize repaying eUSD portion that is charged interest first\\n        borrowed[mintPoolAddress][_account].interestAmount = _amount > borrowed[mintPoolAddress][_account].interestAmount ? \\n            0 : borrowed[mintPoolAddress][_account].interestAmount - _amount;\\n\\n        if (spareAmount > 0) {\\n            eUSD.safeTransfer(rewardManager.treasury(), spareAmount);\\n\\n            if (spareAmount >= newAccInterest) {\\n                delete borrowed[mintPoolAddress][_account];\\n            } else {\\n                borrowed[mintPoolAddress][_account].accInterest = newAccInterest - spareAmount;\\n                borrowed[mintPoolAddress][_account].interestTimestamp = block.timestamp;\\n            }\\n        } else {\\n            borrowed[mintPoolAddress][_account].accInterest = newAccInterest;\\n            borrowed[mintPoolAddress][_account].interestTimestamp = block.timestamp;\\n        }\\n\\n        emit eUSDRepaid(_account, _amount);\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    function liquidate(address _account, uint256 _repayAmount) external {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        uint256 ethPrice = mintPool.getAssetPrice();\\n        // Amount user has to borrow more than in order to be liquidated\\n        uint256 liquidationThreshold = supplied[mintPoolAddress][_account] * ethPrice * 100 / collateralRatioIdeal;\\n        uint256 userBorrowed = borrowed[mintPoolAddress][msg.sender].principal;\\n        if (userBorrowed <= liquidationThreshold) revert HealthyAccount();\\n\\n        uint256 globalBorrowRatio = totalBorrowed[mintPoolAddress] * 1e20 / _getMaxBorrow(totalSupplied[mintPoolAddress]);\\n        uint256 _closeFactor = globalBorrowRatio < globalBorrowRatioLiuquidation ? \\n            closeFactor : closeFactorNormal;\\n        uint256 _liquidationDiscount = globalBorrowRatio < globalBorrowRatioLiuquidation ? \\n            liquidationDiscount : liquidationDiscountNormal;\\n\\n        uint256 maxRepay = userBorrowed * _closeFactor / 1e20;\\n        if (_repayAmount > maxRepay) revert ExceedAmountAllowed(_repayAmount, maxRepay);\\n\\n        // Both liquidator's & liquidatee's supplied amount will be changed\\n        rewardManager.lsdUpdateReward(_account);\\n        rewardManager.lsdUpdateReward(msg.sender);\\n\\n        repayEUSD(_account, _repayAmount);\\n        uint256 seizeAmount = _repayAmount * _liquidationDiscount * 1e18 / 1e20 / ethPrice;\\n        supplied[mintPoolAddress][_account] -= seizeAmount;\\n        supplied[mintPoolAddress][msg.sender] += seizeAmount;\\n\\n        emit Liquidated(_account, msg.sender, seizeAmount);\\n\\n        adjustEUSDAmount();\\n    }\\n\\n    /**\\n     * @notice Implementation of dynamic eUSD minting mechanism and collateral ratio control\\n     */\\n    function adjustEUSDAmount() public {\\n        address mintPoolAddress = address(getMintPool());\\n\\n        Calc memory calc;\\n        // Amount of ETH/stETH supplied by users to this contract\\n        uint256 _totalSupplied = totalSupplied[mintPoolAddress];\\n        // Original amount of total deposits\\n        uint256 _totalDeposited = totalDeposited[mintPoolAddress];\\n        // Original amount of total eUSD minted\\n        uint256 _totalMinted = totalMinted[mintPoolAddress];\\n        // Value of staked LP tokens, scaled by 1e18\\n        calc.currentLpValue = getLpValue(totalStaked);\\n        calc.vaultWeight = lybraConfigurator.getVaultWeight(address(getMintPool()));\\n\\n        // First mint\\n        if (_totalDeposited == 0 && _totalMinted == 0) {\\n            if (_totalSupplied < 1 ether) return;\\n\\n            _mintMin(calc, _totalMinted, _totalDeposited, _totalSupplied);\\n            return;\\n        }\\n\\n        calc.dlpRatioCurrent = _getDlpRatio(calc.currentLpValue, _totalMinted, calc.vaultWeight);\\n        // Burn eUSD all at once instead of multiple separated txs\\n        uint256 amountToBurnTotal;\\n\\n        // When dlp ratio falls short of ideal, eUSD will be burnt no matter what the collateral ratio is\\n        if (calc.dlpRatioCurrent <= dlpRatioLower) {\\n            calc.burnAmountGivenDlp = _getMintAmountDeltaD(calc.currentLpValue, _totalMinted, calc.vaultWeight);\\n            amountToBurnTotal += calc.burnAmountGivenDlp;\\n            _totalMinted -= calc.burnAmountGivenDlp;\\n\\n            // Update dlp ratio, from less than { dlpRatioLower }, to { dlpRatioIdeal }\\n            calc.dlpRatioCurrent = dlpRatioIdeal;\\n        }\\n\\n        // Amount stETH currently idle in Match Pool\\n        uint256 totalIdle = _totalSupplied - _totalDeposited;\\n        calc.collateralRatioCurrent = _getCollateralRatio(_totalDeposited, _totalMinted);\\n\\n        // When collateral ratio falls short of ideal\\n        // Option 1: Deposit to increasae collateral ratio, doesn't affect dlp ratio\\n        // Option 2: Burn eUSD to increase collateral ratio\\n        if (calc.collateralRatioCurrent < collateralRatioIdeal) {\\n            // Must be Option 2 due to Lybra deposit min. requirement\\n            if (totalIdle < 1 ether) {\\n                calc.burnAmountGivenCollateral = _getMintAmountDeltaC(_totalDeposited, _totalMinted);\\n                amountToBurnTotal += calc.burnAmountGivenCollateral;\\n                _burnEUSD(amountToBurnTotal);\\n                // Result: dlp ratio > 2.75%, collateral ratio = 200%\\n                return;\\n            } \\n\\n            // Option 1\\n            calc.amountToDeposit = _getDepositAmountDelta(_totalDeposited, _totalMinted);\\n\\n            // 1 ether <= totalIdle < amountToDeposit\\n            // Deposit all idle stETH and burn some eUSD to achieve { collateralRatioIdeal }\\n            if (calc.amountToDeposit > totalIdle) {\\n                _depositToLybra(totalIdle, 0);\\n                _totalDeposited += totalIdle;\\n\\n                calc.burnAmountGivenCollateral = _getMintAmountDeltaC(_totalDeposited, _totalMinted);\\n                amountToBurnTotal += calc.burnAmountGivenCollateral;\\n                _burnEUSD(amountToBurnTotal);\\n                // Result: dlp ratio > 2.75%, collateral ratio = 200%\\n                return;\\n            }\\n\\n            // If dlp ratio required burning (line 260)\\n            if (amountToBurnTotal > 0) _burnEUSD(amountToBurnTotal);\\n\\n            // 1 ether <= totalIdle == amountToDeposit\\n            if (calc.amountToDeposit == totalIdle) {\\n                _depositToLybra(calc.amountToDeposit, 0);\\n                // Result: dlp ratio > 2.75%, collateral ratio = 200%\\n                return;\\n            }\\n\\n            // amountToDeposit < 1 ether <= totalIdle, MUST over-collateralize\\n            // 1 ether < amountToDeposit < totalIdle, MIGHT over-collateralize\\n\\n            // Cannot mint more even if there is over-collateralization, disallowed by dlp ratio\\n            if (calc.dlpRatioCurrent < dlpRatioUpper) {\\n                _depositToLybra(_max(calc.amountToDeposit, 1 ether), 0);\\n                // Result: 2.75% < dlp ratio < 3.25%, collateral ratio >= 200%\\n                return;\\n            }\\n\\n            // If (dlpRatioCurrent >= dlpRatioUpper) -> mint more to maximize reward\\n            _mintMin(calc, _totalMinted, _totalDeposited, _totalDeposited + totalIdle);\\n            return;\\n        }\\n\\n        // If dlp ratio required burning (line 260)\\n        // (dlp ratio == { dlpRatioIdeal } && collateral ratio >= { collateralRatioIdeal })\\n        if (amountToBurnTotal > 0) {\\n            _burnEUSD(amountToBurnTotal);\\n            if (calc.collateralRatioCurrent > collateralRatioIdeal) _withdrawNoPunish(_totalDeposited, _totalMinted);\\n            // Result: dlp ratio = 3%, collateral ratio = 200%\\n            return;\\n        }\\n\\n        if (calc.collateralRatioCurrent == collateralRatioIdeal) {\\n            // Mint condition: (dlpRatioCurrent >= dlpRatioUpper && totalIdle >= 1 ether)\\n            // Result: dlp ratio > 2.75%, collateral ratio = 200%\\n            if (calc.dlpRatioCurrent < dlpRatioUpper || totalIdle < 1 ether) return;\\n            // Deposit more and mint more\\n            _mintMin(calc, _totalMinted, _totalDeposited, _totalDeposited + totalIdle);\\n            return;\\n        }\\n\\n        /** if (calc.collateralRatioCurrent > { collateralRatioIdeal }) **/\\n\\n        // Minting disallowed by dlp ratio\\n        if (calc.dlpRatioCurrent < dlpRatioUpper) {\\n            _withdrawNoPunish(_totalDeposited, _totalMinted);\\n            // Result: dlp ratio > 2.75%, collateral ratio = 200%\\n            return;\\n        }\\n\\n        calc.mintAmountGivenDlp = _getMintAmountDeltaD(calc.currentLpValue, _totalMinted, calc.vaultWeight);\\n        uint256 maxMintAmountWithoutDeposit = _getMintAmountDeltaC(_totalDeposited, _totalMinted);\\n\\n        // Can mint more by depositing more\\n        if (calc.mintAmountGivenDlp > maxMintAmountWithoutDeposit) {\\n            // Insufficient idle stETH, so mint only amount that doesn't require deposit\\n            // Result: dlp ratio > 3%, collateral ratio = 200%\\n            if (totalIdle < 1 ether) _mintEUSD(maxMintAmountWithoutDeposit);\\n            // Deposit more and mint more\\n            else _mintMin(calc, _totalMinted, _totalDeposited, _totalDeposited + totalIdle);\\n            return;\\n        }\\n\\n        // Result: dlp ratio = 3%, collateral ratio >= 200%\\n        _mintEUSD(calc.mintAmountGivenDlp);\\n        if (maxMintAmountWithoutDeposit > calc.mintAmountGivenDlp) \\n            _withdrawNoPunish(_totalDeposited, _totalMinted + calc.mintAmountGivenDlp);\\n\\n    }\\n\\n    /**\\n     * @notice Send eUSD rebase reward to Reward Manager\\n     */\\n    function claimRebase() external returns (uint256) {\\n        if (msg.sender != address(rewardManager)) revert Unauthorized();\\n\\n        address mintPoolAddress = address(getMintPool());\\n\\n        IERC20 eUSD = IERC20(lybraConfigurator.getEUSDAddress());\\n        uint256 amountActual = eUSD.balanceOf(address(this));\\n        uint256 amountRecord = totalMinted[mintPoolAddress] - totalBorrowed[mintPoolAddress];\\n        uint256 amount;\\n\\n        if (amountActual > amountRecord) {\\n            amount = amountActual - amountRecord;\\n            eUSD.safeTransfer(msg.sender, amount);\\n        }\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Get max. amount of eUSD that can be borrowed given amount of stETH supplied\\n     */\\n    function _getMaxBorrow(uint256 _suppliedAmount) private view returns (uint256) {\\n        uint256 ethPrice = getMintPool().getAssetPrice();\\n        return _suppliedAmount * ethPrice * maxBorrowRatio / collateralRatioIdeal / 1e18;\\n    }\\n\\n    /**\\n     * @notice Get amount of eUSD borrow interest accrued since last update\\n     */\\n    function _getAccInterest(address _account) private view returns (uint256) {\\n        address mintPoolAddress = address(getMintPool());\\n\\n        BorrowInfo memory info = borrowed[mintPoolAddress][_account];\\n        uint256 timeDelta = block.timestamp - info.interestTimestamp;\\n        return info.interestAmount * borrowRatePerSec * timeDelta / 1e18;\\n    }\\n\\n    /**\\n     * @notice Get collateral ratio accordin to given amount\\n     * @param _depositedAmount Amount of stETH deposited to Lybra vault\\n     * @param _mintedAmount Amount of eUSD minted\\n     * @return Collateral ratio based on given params\\n     */\\n    function _getCollateralRatio(uint256 _depositedAmount, uint256 _mintedAmount) private view returns (uint256) {\\n        if (_mintedAmount == 0) return collateralRatioIdeal;\\n        else return _depositedAmount * getMintPool().getAssetPrice() * 100 / _mintedAmount;\\n    }\\n\\n    function _getDlpRatio(uint256 _lpValue, uint256 _mintedAmount, uint256 _vaultWeight) private view returns (uint256) {\\n        if (_mintedAmount == 0) return dlpRatioIdeal;\\n        return _lpValue * 10000 * 1e20 / (_mintedAmount * _vaultWeight);\\n    }\\n\\n    /**\\n     * @param _depositedAmount Amount of stETH deposited to Lybra vault\\n     * @param _mintedAmount Amount of eUSD minted\\n     * @return Amount of stETH to deposit to/withdraw from Lybra vault in order to achieve { collateralRatioIdeal }\\n     *  1st condition -> deposit amount, 2nd condition -> withdraw amount\\n     */\\n    function _getDepositAmountDelta(uint256 _depositedAmount, uint256 _mintedAmount) private view returns (uint256) {\\n        uint256 newDepositedAmount = collateralRatioIdeal * _mintedAmount / getMintPool().getAssetPrice() / 100; \\n        return newDepositedAmount > _depositedAmount ?\\n            newDepositedAmount - _depositedAmount + 1 : _depositedAmount - newDepositedAmount;\\n    }\\n\\n    /**\\n     * @param _depositedAmount Amount of stETH deposited to Lybra vault\\n     * @param _mintedAmount Amount of eUSD minted\\n     * @return Amount of eUSD to mint from/repay to Lybra vault in order to achieve { collateralRatioIdeal }\\n     *  1st condition -> mint amount, 2nd condition -> burn amount\\n     */\\n    function _getMintAmountDeltaC(uint256 _depositedAmount, uint256 _mintedAmount) private view returns (uint256) {\\n        uint256 newMintedAmount = _depositedAmount * getMintPool().getAssetPrice() * 100 / collateralRatioIdeal;\\n        return newMintedAmount > _mintedAmount ?\\n            newMintedAmount - _mintedAmount : _mintedAmount - newMintedAmount;\\n    }\\n\\n    /**\\n     * @param _lpValue Value of total LP tokens staked\\n     * @param _mintedAmount Amount of eUSD minted\\n     * @param _vaultWeight Vault weight from Lybra configurator\\n     * @return Amount of eUSD to mint from/repay to Lybra vault in order to achieve { dlpRatioIdeal }\\n     *  1st condition -> mint amount, 2nd condition -> burn amount\\n     */\\n    function _getMintAmountDeltaD(uint256 _lpValue, uint256 _mintedAmount, uint256 _vaultWeight) private view returns (uint256) {\\n        uint256 oldMintedValue = _mintedAmount * _vaultWeight / 1e20;\\n        uint256 newMintedValue = _lpValue * 10000 / dlpRatioIdeal;\\n        return newMintedValue > oldMintedValue ? \\n            (newMintedValue - oldMintedValue) * 1e20 / _vaultWeight : (oldMintedValue - newMintedValue) * 1e20 / _vaultWeight;\\n    }\\n \\n    /**\\n     * @param _lpTokenAmount Amount of LP tokens\\n     * @return The value of staked LP tokens in the ETH-LBR liquidity pool\\n     */\\n    function getLpValue(uint256 _lpTokenAmount) public view returns (uint256) {\\n        (, int lpPrice, , , ) = lpPriceFeed.latestRoundData();\\n        return _lpTokenAmount * uint256(lpPrice) / 1e8;\\n    }\\n\\n    /**\\n     * @notice Lybra restricts deposits with a min. amount of 1 stETH\\n     */\\n    function _depositToLybra(uint256 _amount, uint256 _eUSDMintAmount) private {\\n        if (_amount < 1 ether) revert MinLybraDeposit();\\n\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        IERC20 stETH = IERC20(mintPool.getAsset());\\n        uint256 allowance = stETH.allowance(address(this), mintPoolAddress);\\n        if (allowance < _amount) stETH.approve(mintPoolAddress, type(uint256).max);\\n\\n        mintPool.depositAssetToMint(_amount, _eUSDMintAmount);\\n        totalDeposited[mintPoolAddress] += _amount;\\n        if (_eUSDMintAmount > 0) totalMinted[mintPoolAddress] += _eUSDMintAmount;\\n    }\\n\\n    /** \\n     * @notice Match Finance will only withdraw spare stETH from Lybra when there is no punishment.\\n     *  Punished withdrawals will only be initiated by users whole are willing to take the loss,\\n     *  as totalSupplied and totalDeposited are updated in the same tx for such situation,\\n     *  the problem of value mismatch (insufiicient balance for withdrawal) is avoided\\n     */\\n    function _withdrawFromLybra(uint256 _amount) private {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        uint256 collateralRatioAfter = _getCollateralRatio(totalDeposited[mintPoolAddress] - _amount, totalMinted[mintPoolAddress]);\\n        // Withdraw only if collateral ratio remains above { collateralRatioIdeal }\\n        if (collateralRatioAfter < collateralRatioIdeal) revert InsufficientCollateral();\\n\\n        mintPool.withdraw(address(this), _amount);\\n        totalDeposited[mintPoolAddress] -= _amount;\\n    }\\n\\n    function _mintEUSD(uint256 _amount) private {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        mintPool.mint(address(this), _amount);\\n        totalMinted[mintPoolAddress] += _amount;\\n    }\\n\\n    function _burnEUSD(uint256 _amount) private {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        mintPool.burn(address(this), _amount);\\n        totalMinted[mintPoolAddress] -= _amount;\\n    }\\n\\n    function _max(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x > y ? x : y;\\n    }\\n\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\n        return x < y ? x : y;\\n    }\\n\\n    /**\\n     * @notice Decides how much eUSD to mint, when dlp ratio >= { dlpRatioIdeal } && collateral ratio > { collateralRatioIdeal }\\n     * @dev _depositedAmount == _fullDeposit when idle stETH less than min. deposit requirement\\n     * @param _fullDeposit Max amount that can be deposited\\n     */\\n    function _mintMin(\\n        Calc memory calc, \\n        uint256 _mintedAmount, \\n        uint256 _depositedAmount, \\n        uint256 _fullDeposit\\n    ) private {\\n        // If (dlpRatioCurrent >= dlpRatioUpper) -> mint more to maximize reward\\n        calc.mintAmountGivenDlp = _getMintAmountDeltaD(calc.currentLpValue, _mintedAmount, calc.vaultWeight);\\n        // Amount to mint to achieve { collateralRatioIdeal } after depositing all idle stETH\\n        calc.mintAmountGivenCollateral = _getMintAmountDeltaC(_fullDeposit, _mintedAmount);\\n            \\n        // Mint: min(mintAmountGivenDlp, mintAmountGivenCollateral)\\n        if (calc.mintAmountGivenDlp > calc.mintAmountGivenCollateral) {\\n            _depositToLybra(_fullDeposit - _depositedAmount, calc.mintAmountGivenCollateral);\\n            // Result: dlp ratio > 3%, collateral ratio = 200%\\n            return;\\n        }\\n\\n        // Amount to deposit for 200% colalteral ratio given that { mintAmountGivenDlp } eUSD will be minted\\n        calc.amountToDeposit = _getDepositAmountDelta(_depositedAmount, _mintedAmount + calc.mintAmountGivenDlp);\\n        // Accept over-collateralization, i.e. deposit at least 1 ether\\n        _depositToLybra(_max(calc.amountToDeposit, 1 ether), calc.mintAmountGivenDlp);\\n        // Result: dlp ratio = 3%, collateral ratio >= 200%\\n        return;\\n    }\\n\\n    /**\\n     * @notice Withdraw over-collateralized stETH from Lybra so users can withdraw without punishment\\n     * @dev Executed only when dlp ratio < { dlpRatioUpper } && collateral ratio > { collateralRatioIdeal }\\n     */\\n    function _withdrawNoPunish(uint256 _depositedAmount, uint256 _mintedAmount) private {\\n        IMintPool mintPool = getMintPool();\\n        address mintPoolAddress = address(mintPool);\\n\\n        uint256 amountToWithdraw = _getDepositAmountDelta(_depositedAmount, _mintedAmount);\\n        // Only withdraw if there are is no 0.1% punishment\\n        if (mintPool.checkWithdrawal(address(this), amountToWithdraw) == amountToWithdraw) {\\n            mintPool.withdraw(address(this), amountToWithdraw);\\n            totalDeposited[mintPoolAddress] -= amountToWithdraw;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"ExceedAmountAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HealthyAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinLybraDeposit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawPaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"BorrowRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGlobalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGlobalLiquidation\",\"type\":\"uint256\"}],\"name\":\"BorrowRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUpper\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIdeal\",\"type\":\"uint256\"}],\"name\":\"CollateralRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLower\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUpper\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIdeal\",\"type\":\"uint256\"}],\"name\":\"DlpRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"LPOracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"LPStakePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"LPWithdrawPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeAmount\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDiscount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newCloseFactor\",\"type\":\"uint128\"}],\"name\":\"LiquidationParamsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newDiscount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newCloseFactor\",\"type\":\"uint128\"}],\"name\":\"LiquidationParamsNormalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LpStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LpWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMintPool\",\"type\":\"address\"}],\"name\":\"MintPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"RewardManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"StakeLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"SupplyLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eUSDBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"eUSDRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stETHSupplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"}],\"name\":\"stETHWithdrew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintPool\",\"type\":\"address\"}],\"name\":\"addMintPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adjustEUSDAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrowEUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactor\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFactorNormal\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatioIdeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatioLower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatioUpper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRatioIdeal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRatioLower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dlpRatioUpper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethlbrLpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethlbrStakePool\",\"outputs\":[{\"internalType\":\"contract IStakePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintPool\",\"outputs\":[{\"internalType\":\"contract IMintPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalBorrowRatioLiuquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalBorrowRatioThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationDiscount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationDiscountNormal\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lybraConfigurator\",\"outputs\":[{\"internalType\":\"contract IConfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBorrowRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintPools\",\"outputs\":[{\"internalType\":\"contract IMintPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayEUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contract IRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowRatePerYear\",\"type\":\"uint256\"}],\"name\":\"setBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_individual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_global\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidation\",\"type\":\"uint256\"}],\"name\":\"setBorrowRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideal\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatioRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ideal\",\"type\":\"uint256\"}],\"name\":\"setDlpRatioRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethlbrLpToken\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_discount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_closeFactor\",\"type\":\"uint128\"}],\"name\":\"setLiquidationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_discount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_closeFactor\",\"type\":\"uint128\"}],\"name\":\"setLiquidationParamsNormal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpOracle\",\"type\":\"address\"}],\"name\":\"setLpOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethlbrStakePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configurator\",\"type\":\"address\"}],\"name\":\"setLybraContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardManager\",\"type\":\"address\"}],\"name\":\"setRewardManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueLimit\",\"type\":\"uint256\"}],\"name\":\"setStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setStakePaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueLimit\",\"type\":\"uint256\"}],\"name\":\"setSupplyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWithdrawPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplyStETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MatchPool", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}