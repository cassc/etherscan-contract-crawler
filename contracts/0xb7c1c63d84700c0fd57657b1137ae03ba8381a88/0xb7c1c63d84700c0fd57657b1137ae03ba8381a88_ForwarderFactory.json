{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/forwarder/Factory/CloneFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// from https://github.com/optionality/clone-factory\\npragma solidity 0.8.18;\\n\\n// This contract is used to deploy minimal proxies (EIP1167) using the CREATE2 opcode\\n// Resources: https://eips.ethereum.org/EIPS/eip-1167\\n// https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract\\n// https://github.com/optionality/clone-factory\\ncontract CloneFactory {\\n    function createClone(address target, bytes32 salt)\\n    internal\\n    returns (address payable result)\\n    {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            // load the next free memory slot as a place to store the clone contract data\\n            let clone := mload(0x40)\\n\\n            // The bytecode block below is responsible for contract initialization\\n            // during deployment, it is worth noting the proxied contract constructor will not be called during\\n            // the cloning procedure and that is why an initialization function needs to be called after the\\n            // clone is created\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n\\n            // This stores the address location of the implementation contract\\n            // so that the proxy knows where to delegate call logic to\\n            mstore(add(clone, 0x14), targetBytes)\\n\\n            // The bytecode block is the actual code that is deployed for each clone created.\\n            // It forwards all calls to the already deployed implementation via a delegatecall\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            // deploy the contract using the CREATE2 opcode\\n            // this deploys the minimal proxy defined above, which will proxy all\\n            // calls to use the logic defined in the implementation contract `target`\\n            result := create2(0, clone, 0x37, salt)\\n        }\\n    }\\n\\n    function isClone(address target, address query)\\n    internal\\n    view\\n    returns (bool result)\\n    {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            // load the next free memory slot as a place to store the comparison clone\\n            let clone := mload(0x40)\\n\\n            // The next three lines store the expected bytecode for a miniml proxy\\n            // that targets `target` as its implementation contract\\n            mstore(\\n                clone,\\n                0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000\\n            )\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(\\n                add(clone, 0x1e),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n\\n            // the next two lines store the bytecode of the contract that we are checking in memory\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n\\n            // Check if the expected bytecode equals the actual bytecode and return the result\\n            result := and(\\n                eq(mload(clone), mload(other)),\\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n            )\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/forwarder/Factory/ForwarderFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.18;\\nimport \\\"./CloneFactory.sol\\\";\\nimport \\\"../Forwarder.sol\\\";\\n\\ncontract ForwarderFactory is CloneFactory {\\n    address public implementationAddress;\\n\\n    event ForwarderCreated(\\n        address newForwarderAddress,\\n        address parentAddress,\\n        bool shouldAutoFlushNative,\\n        bool shouldAutoFlushERC721,\\n        bool shouldAutoFlushERC1155\\n    );\\n\\n    constructor(address _implementationAddress) {\\n        implementationAddress = _implementationAddress;\\n    }\\n\\n\\n    function createForwarder(\\n        address parent,\\n        bytes32 salt,\\n        bool shouldAutoFlushNative,\\n        bool shouldAutoFlushERC721,\\n        bool shouldAutoFlushERC1155\\n    ) external {\\n        // Include parent and salt, for the salt to ensure uniqueness since CREATE2 depends on \\\"deployer\\\", \\\"custom salt\\\", and \\\"bytecode\\\"\\n        bytes32 finalSalt = keccak256(abi.encodePacked(parent, salt));\\n\\n        address payable clone = createClone(implementationAddress, finalSalt);\\n        Forwarder(clone).init(\\n            parent,\\n            shouldAutoFlushNative,\\n            shouldAutoFlushERC721,\\n            shouldAutoFlushERC1155\\n        );\\n        emit ForwarderCreated(\\n            clone,\\n            parent,\\n            shouldAutoFlushNative,\\n            shouldAutoFlushERC721,\\n            shouldAutoFlushERC1155\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/forwarder/Forwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport '../ERC20/IERC20.sol';\\nimport './TransferHelper.sol';\\nimport './IForwarder.sol';\\n\\n/**\\n * Contract that will forward any incoming Ether to the creator of the contract\\n *\\n */\\ncontract Forwarder is IERC721Receiver, IERC1155Receiver, IForwarder, ReentrancyGuard {\\n    // Address to which any funds sent to this contract will be forwarded\\n    address public parentAddress;\\n\\n    bool public autoFlushNative = true;\\n    bool public autoFlush721 = true;\\n    bool public autoFlush1155 = true;\\n\\n    event ForwarderDeposited(address from, uint256 value, bytes data);\\n\\n    /**\\n     * Initialize the contract, and sets the destination address to that of the _parentAddress for flushing tokens\\n     */\\n    function init(\\n        address _parentAddress,\\n        bool _autoFlushNative,\\n        bool _autoFlush721,\\n        bool _autoFlush1155\\n    ) external onlyUninitialized {\\n        parentAddress = _parentAddress;\\n        uint256 value = address(this).balance;\\n\\n        // set whether we want to automatically flush native/erc721/erc1155 tokens or not\\n        autoFlushNative = _autoFlushNative;\\n        autoFlush721 = _autoFlush721;\\n        autoFlush1155 = _autoFlush1155;\\n\\n        if (value == 0) {\\n            return;\\n        }\\n\\n        (bool success, ) = parentAddress.call{ value: value }('');\\n        require(success, 'Flush failed');\\n\\n        // NOTE: since we are forwarding on initialization,\\n        // we don't have the context of the original sender.\\n        // We still emit an event about the forwarding but set\\n        // the sender to the forwarder itself\\n        emit ForwarderDeposited(address(this), value, msg.data);\\n    }\\n\\n    /**\\n     * Modifier that will execute internal code block only if the sender is the parent address\\n     */\\n    modifier onlyParent {\\n        require(msg.sender == parentAddress, 'Only Parent');\\n        _;\\n    }\\n\\n    /**\\n     * Modifier that will execute internal code block only if the contract has not been initialized yet\\n     */\\n    modifier onlyUninitialized {\\n        require(parentAddress == address(0x0), 'Already initialized');\\n        _;\\n    }\\n\\n    /**\\n     * Default function; Gets called when data is sent but does not match any other function\\n     */\\n    fallback() external payable {\\n        if (autoFlushNative) {\\n            flush();\\n        }\\n    }\\n\\n    /**\\n     * Default function; Gets called when Ether is deposited with no data, and only forwards it to the parent address when auto flush is enabled\\n     */\\n    receive() external payable {\\n        if (autoFlushNative) {\\n            flush();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IForwarder\\n     */\\n    function setAutoFlushNative(bool autoFlush) external virtual override onlyParent {\\n        autoFlushNative = autoFlush;\\n    }\\n\\n    /**\\n     * @inheritdoc IForwarder\\n     */\\n    function setAutoFlush721(bool autoFlush) external virtual override onlyParent {\\n        autoFlush721 = autoFlush;\\n    }\\n\\n    /**\\n     * @inheritdoc IForwarder\\n   */\\n    function setAutoFlush1155(bool autoFlush) external virtual override onlyParent {\\n        autoFlush1155 = autoFlush;\\n    }\\n\\n    /**\\n     * ERC721 standard callback function for when a ERC721 is transferred. The forwarder will send the nft\\n     * to the base wallet once the nft contract invokes this method after transferring the nft.\\n     *\\n     * @param _operator The address which called `safeTransferFrom` function\\n    * @param _from The address of the sender\\n    * @param _tokenId The token id of the nft\\n    * @param data Additional data with no specified format, sent in call to `_to`\\n    */\\n    function onERC721Received(\\n        address _operator,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes memory data\\n    ) external virtual override returns (bytes4) {\\n        if (autoFlush721) {\\n            IERC721 instance = IERC721(msg.sender);\\n            require(\\n                instance.supportsInterface(type(IERC721).interfaceId),\\n                'The caller does not support the ERC721 interface'\\n            );\\n            // this won't work for ERC721 re-entrancy\\n            instance.safeTransferFrom(address(this), parentAddress, _tokenId, data);\\n        }\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n   */\\n    function onERC1155Received(\\n        address _operator,\\n        address _from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external virtual override returns (bytes4) {\\n        IERC1155 instance = IERC1155(msg.sender);\\n        require(\\n            instance.supportsInterface(type(IERC1155).interfaceId),\\n            'The caller does not support the IERC1155 interface'\\n        );\\n\\n        if (autoFlush1155) {\\n            instance.safeTransferFrom(address(this), parentAddress, id, value, data);\\n        }\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Receiver\\n   */\\n    function onERC1155BatchReceived(\\n        address _operator,\\n        address _from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external virtual override returns (bytes4) {\\n        IERC1155 instance = IERC1155(msg.sender);\\n        require(\\n            instance.supportsInterface(type(IERC1155).interfaceId),\\n            'The caller does not support the IERC1155 interface'\\n        );\\n\\n        if (autoFlush1155) {\\n            instance.safeBatchTransferFrom(\\n                address(this),\\n                parentAddress,\\n                ids,\\n                values,\\n                data\\n            );\\n        }\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IForwarder\\n   */\\n    function flushTokens(address tokenContractAddress)\\n    external\\n    virtual\\n    override\\n    nonReentrant\\n    {\\n        IERC20 instance = IERC20(tokenContractAddress);\\n        address forwarderAddress = address(this);\\n        uint256 forwarderBalance = instance.balanceOf(forwarderAddress);\\n        if (forwarderBalance == 0) {\\n            return;\\n        }\\n\\n        TransferHelper.safeTransfer(\\n            tokenContractAddress,\\n            parentAddress,\\n            forwarderBalance\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IForwarder\\n   */\\n    function flushERC721Token(address tokenContractAddress, uint256 tokenId)\\n    external\\n    virtual\\n    override\\n    nonReentrant\\n    {\\n        IERC721 instance = IERC721(tokenContractAddress);\\n        require(\\n            instance.supportsInterface(type(IERC721).interfaceId),\\n            'The tokenContractAddress does not support the ERC721 interface'\\n        );\\n\\n        address ownerAddress = instance.ownerOf(tokenId);\\n        instance.transferFrom(ownerAddress, parentAddress, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IForwarder\\n   */\\n    function flushERC1155Tokens(address tokenContractAddress, uint256 tokenId)\\n    external\\n    virtual\\n    override\\n    nonReentrant\\n    {\\n        IERC1155 instance = IERC1155(tokenContractAddress);\\n        require(\\n            instance.supportsInterface(type(IERC1155).interfaceId),\\n            'The caller does not support the IERC1155 interface'\\n        );\\n\\n        address forwarderAddress = address(this);\\n        uint256 forwarderBalance = instance.balanceOf(forwarderAddress, tokenId);\\n\\n        instance.safeTransferFrom(\\n            forwarderAddress,\\n            parentAddress,\\n            tokenId,\\n            forwarderBalance,\\n            ''\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IForwarder\\n   */\\n    function batchFlushERC1155Tokens(\\n        address tokenContractAddress,\\n        uint256[] calldata tokenIds\\n    ) external virtual override nonReentrant {\\n        IERC1155 instance = IERC1155(tokenContractAddress);\\n        require(\\n            instance.supportsInterface(type(IERC1155).interfaceId),\\n            'The caller does not support the IERC1155 interface'\\n        );\\n\\n        address forwarderAddress = address(this);\\n        uint256[] memory amounts = new uint256[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            amounts[i] = instance.balanceOf(forwarderAddress, tokenIds[i]);\\n        }\\n\\n        instance.safeBatchTransferFrom(\\n            forwarderAddress,\\n            parentAddress,\\n            tokenIds,\\n            amounts,\\n            ''\\n        );\\n    }\\n\\n    /**\\n     * Flush the entire balance of the contract to the parent address.\\n     */\\n    function flush() public {\\n        uint256 value = address(this).balance;\\n\\n        if (value == 0) {\\n            return;\\n        }\\n\\n        (bool success, ) = parentAddress.call{ value: value }('');\\n        require(success, 'Flush failed');\\n        emit ForwarderDeposited(msg.sender, value, msg.data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n    */\\n    function supportsInterface(bytes4 interfaceId)\\n    public\\n    virtual\\n    override (IERC165)\\n    view\\n    returns (bool)\\n    {\\n        return interfaceId == type(IForwarder).interfaceId ||\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\n            interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/forwarder/IForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.18;\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface IForwarder is IERC165 {\\n    /**\\n     * Sets the autoflushNative parameter.\\n     *\\n     * @param autoFlush whether to autoflush native tokens\\n     */\\n    function setAutoFlushNative(bool autoFlush) external;\\n\\n    /**\\n     * Sets the autoflush721 parameter.\\n     *\\n     * @param autoFlush whether to autoflush erc721 tokens\\n   */\\n    function setAutoFlush721(bool autoFlush) external;\\n\\n    /**\\n     * Sets the autoflush1155 parameter.\\n     *\\n     * @param autoFlush whether to autoflush erc1155 tokens\\n   */\\n    function setAutoFlush1155(bool autoFlush) external;\\n\\n    /**\\n     * Execute a token transfer of the full balance from the forwarder token to the parent address\\n     *\\n     * @param tokenContractAddress the address of the erc20 token contract\\n   */\\n    function flushTokens(address tokenContractAddress) external;\\n\\n    /**\\n     * Execute a nft transfer from the forwarder to the parent address\\n     *\\n     * @param tokenContractAddress the address of the ERC721 NFT contract\\n   * @param tokenId The token id of the nft\\n   */\\n    function flushERC721Token(address tokenContractAddress, uint256 tokenId)\\n    external;\\n\\n    /**\\n     * Execute a nft transfer from the forwarder to the parent address.\\n     *\\n     * @param tokenContractAddress the address of the ERC1155 NFT contract\\n   * @param tokenId The token id of the nft\\n   */\\n    function flushERC1155Tokens(address tokenContractAddress, uint256 tokenId)\\n    external;\\n\\n    /**\\n     * Execute a batch nft transfer from the forwarder to the parent address.\\n     *\\n     * @param tokenContractAddress the address of the ERC1155 NFT contract\\n   * @param tokenIds The token ids of the nfts\\n   */\\n    function batchFlushERC1155Tokens(\\n        address tokenContractAddress,\\n        uint256[] calldata tokenIds\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/forwarder/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// source: https://github.com/Uniswap/solidity-lib/blob/master/contracts/libraries/TransferHelper.sol\\npragma solidity 0.8.18;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory returndata) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        Address.verifyCallResult(\\n            success,\\n            returndata,\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementationAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newForwarderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldAutoFlushNative\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldAutoFlushERC721\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"shouldAutoFlushERC1155\",\"type\":\"bool\"}],\"name\":\"ForwarderCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"shouldAutoFlushNative\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldAutoFlushERC721\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldAutoFlushERC1155\",\"type\":\"bool\"}],\"name\":\"createForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ForwarderFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000405b48f7a7f606508f5f6e73e2b53e9b357b637a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}