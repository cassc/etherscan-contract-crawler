{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmomasks/contracts/CosmoMasksPower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./CosmoMasksPowerERC20.sol\\\";\\n\\ninterface ICosmoMasksShort {\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function totalSupply() external view returns (uint256);\\n    function isMintedBeforeReveal(uint256 index) external view returns (bool);\\n}\\n\\n\\n/**\\n * CosmoMasksPower Contract (The native token of CosmoMasks)\\n * https://TheCosmoMasks.com/\\n * @dev Extends standard ERC20 contract\\n */\\ncontract CosmoMasksPower is Ownable, CosmoMasksPowerERC20 {\\n    using SafeMath for uint256;\\n\\n    // Constants\\n    uint256 public constant SECONDS_IN_A_DAY = 86400;\\n    uint256 public constant INITIAL_ALLOTMENT = 1830e18;\\n    uint256 public constant PRE_REVEAL_MULTIPLIER = 2;\\n\\n    uint256 public constant emissionStart = 1615734000; // \\\"2021-03-14T15:00:00.000Z\\\"\\n    uint256 public constant emissionEnd = 1931094000; // \\\"2031-03-12T15:00:00.000Z\\\" // emissionStartTimestamp + (SECONDS_IN_A_DAY * 365 * 10)\\n    uint256 public constant emissionPerDay = 10e18;\\n    mapping(uint256 => uint256) private _lastClaim;\\n\\n\\n    constructor() public CosmoMasksPowerERC20(\\\"CosmoMasks Power\\\", \\\"CMP\\\") {\\n        _setURL(\\\"https://TheCosmoMasks.com/\\\");\\n    }\\n\\n    /**\\n     * @dev When accumulated CMPs have last been claimed for a CosmoMask index\\n     */\\n    function lastClaim(uint256 tokenIndex) public view returns (uint256) {\\n        require(ICosmoMasksShort(cosmoMasksAddress).ownerOf(tokenIndex) != address(0), \\\"CosmoMasksPower: owner cannot be 0 address\\\");\\n        require(tokenIndex < ICosmoMasksShort(cosmoMasksAddress).totalSupply(), \\\"CosmoMasksPower: CosmoMasks at index has not been minted yet\\\");\\n\\n        uint256 lastClaimed = uint256(_lastClaim[tokenIndex]) != 0\\n            ? uint256(_lastClaim[tokenIndex])\\n            : emissionStart;\\n        return lastClaimed;\\n    }\\n\\n    /**\\n     * @dev Accumulated CMP tokens for a CosmoMask token index.\\n     */\\n    function accumulated(uint256 tokenIndex) public view returns (uint256) {\\n        require(block.timestamp > emissionStart, \\\"CosmoMasksPower: emission has not started yet\\\");\\n        require(ICosmoMasksShort(cosmoMasksAddress).ownerOf(tokenIndex) != address(0), \\\"CosmoMasksPower: owner cannot be 0 address\\\");\\n        require(tokenIndex < ICosmoMasksShort(cosmoMasksAddress).totalSupply(), \\\"CosmoMasksPower: CosmoMasks at index has not been minted yet\\\");\\n\\n        uint256 lastClaimed = lastClaim(tokenIndex);\\n\\n        // Sanity check if last claim was on or after emission end\\n        if (lastClaimed >= emissionEnd)\\n            return 0;\\n\\n        // Getting the min value of both\\n        uint256 accumulationPeriod = block.timestamp < emissionEnd ? block.timestamp : emissionEnd;\\n        uint256 totalAccumulated = accumulationPeriod.sub(lastClaimed).mul(emissionPerDay).div(SECONDS_IN_A_DAY);\\n\\n        // If claim hasn't been done before for the index, add initial allotment (plus prereveal multiplier if applicable)\\n        if (lastClaimed == emissionStart) {\\n            uint256 initialAllotment = ICosmoMasksShort(cosmoMasksAddress).isMintedBeforeReveal(tokenIndex) == true\\n                ? INITIAL_ALLOTMENT.mul(PRE_REVEAL_MULTIPLIER)\\n                : INITIAL_ALLOTMENT;\\n            totalAccumulated = totalAccumulated.add(initialAllotment);\\n        }\\n\\n        return totalAccumulated;\\n    }\\n\\n    /**\\n     * @dev Permissioning not added because it is only callable once. It is set right after deployment and verified.\\n     */\\n    function setCosmoMasksAddress(address masksAddress) public onlyOwner {\\n        require(cosmoMasksAddress == address(0), \\\"CosmoMasks: CosmoMasks has already setted\\\");\\n        require(masksAddress != address(0), \\\"CosmoMasks: CosmoMasks is the zero address\\\");\\n        cosmoMasksAddress = masksAddress;\\n    }\\n\\n    /**\\n     * @dev Claim mints CMPs and supports multiple CosmoMask token indices at once.\\n     */\\n    function claim(uint256[] memory tokenIndices) public returns (uint256) {\\n        require(block.timestamp > emissionStart, \\\"CosmoMasksPower: Emission has not started yet\\\");\\n\\n        uint256 totalClaimQty = 0;\\n        for (uint256 i = 0; i < tokenIndices.length; i++) {\\n            // Sanity check for non-minted index\\n            require(tokenIndices[i] < ICosmoMasksShort(cosmoMasksAddress).totalSupply(), \\\"CosmoMasksPower: CosmoMasks at index has not been minted yet\\\");\\n            // Duplicate token index check\\n            for (uint256 j = i + 1; j < tokenIndices.length; j++)\\n                require(tokenIndices[i] != tokenIndices[j], \\\"CosmoMasksPower: duplicate token index\\\" );\\n\\n            uint256 tokenIndex = tokenIndices[i];\\n            require(ICosmoMasksShort(cosmoMasksAddress).ownerOf(tokenIndex) == msg.sender, \\\"CosmoMasksPower: sender is not the owner\\\");\\n\\n            uint256 claimQty = accumulated(tokenIndex);\\n            if (claimQty != 0) {\\n                totalClaimQty = totalClaimQty.add(claimQty);\\n                _lastClaim[tokenIndex] = block.timestamp;\\n            }\\n        }\\n\\n        require(totalClaimQty != 0, \\\"CosmoMasksPower: no accumulated tokens\\\");\\n        _mint(msg.sender, totalClaimQty);\\n        return totalClaimQty;\\n    }\\n\\n    function setURL(string memory newUrl) public onlyOwner {\\n        _setURL(newUrl);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmomasks/contracts/CosmoMasksPowerERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./utils/Context.sol\\\";\\n\\ninterface IERC20Burnable {\\n    function burn(uint256 amount) external returns (bool);\\n    function burnFrom(address account, uint256 amount) external returns (bool);\\n    // ERC20\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n */\\nabstract contract CosmoMasksPowerERC20 is Context, IERC20Burnable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    string private _url;\\n    address public cosmoMasksAddress;\\n\\n\\n    constructor(string memory name_, string memory symbol_) internal {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    function url() public view returns (string memory) {\\n        return _url;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        // Approval check is skipped if the caller of transferFrom is the CosmoMasks contract. For better UX.\\n        if (msg.sender != cosmoMasksAddress)\\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"CosmoMasksPower: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"CosmoMasksPower: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function burn(uint256 amount) public override returns (bool) {\\n        _burn(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public override returns (bool) {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"CosmoMasksPower:  burn amount exceeds allowance\\\");\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"CosmoMasksPower: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"CosmoMasksPower: transfer to the zero address\\\");\\n        _balances[sender] = _balances[sender].sub(amount, \\\"CosmoMasksPower: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"CosmoMasksPower: mint to the zero address\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"CosmoMasksPower: burn from the zero address\\\");\\n        _balances[account] = _balances[account].sub(amount, \\\"CosmoMasksPower: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"CosmoMasksPower: approve from the zero address\\\");\\n        require(spender != address(0),\\\"CosmoMasksPower: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _setURL(string memory newUrl) internal {\\n        _url = newUrl;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmomasks/contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n */\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmomasks/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/ivannikov/work/snake-jungle/cosmomasks-contracts-deployer/src/cosmomasks/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_ALLOTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_REVEAL_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_A_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"accumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIndices\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cosmoMasksAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"lastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masksAddress\",\"type\":\"address\"}],\"name\":\"setCosmoMasksAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"setURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CosmoMasksPower", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}