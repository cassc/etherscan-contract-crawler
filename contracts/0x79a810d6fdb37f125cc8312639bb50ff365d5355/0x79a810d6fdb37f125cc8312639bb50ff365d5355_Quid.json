{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Quid.sol\": {\r\n      \"content\": \"/**\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0kxxXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKddoc0MMMMMMMMMMMWKOkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNNWMMMMMMMMNOxdxXMMMMMMMMMMMXxlo0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMWX0O0WMWWWWMWKkxxx0WMNKK00NMWNKxokNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMWNOokWNOxoxXXOxdxkOXW0xxdd0NX0kxO0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNkookKxlclkOOkdxkkOKK0xox0KOkddxkKWMWXKXWMMMN0OXWMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMW0xxxooOkoxkkdllldxoooddolxxdxdxk0KNX0xokNMMWOlckNMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMWNNN0kkxolooodOkddccddo::oc;:clll,;O0dclxO0xlx0XK0OolkNMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMWNx:loc;,oOkdollkxooookxcclllkKkoollxK0c,do;okxdkkxxoldKWMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMWNO;.;ccld00kxxkK0kkookx:;ldxOXOxxdodOkxdodool;cxxkOxdOXNNWMMMMWXNWMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMWO,..;lxddlc:;'.''. ..     .....','''.,oO0KOool:lkOkxO0kdkNMWKOxkXMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMNOl'. .;cc;.                     .:c,..   .lkOOdooxkocdoodxk00kxdkKWMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMXl.    ...         .;;;;:;',..    .ldlc;..   'oOxdO00xldcckxdxoldx0WMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMWKc      ,,.  ..... .lOo:,;;';,,.   .lkl'.      'oxOX0OXOoddollloxdxXWMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMWKo.      .oc. ....''.....       ..    ..           .;dkO000OxocclxkocokXXKXWMMMMMMMMM\\n * MMMMMMMMMMMMMWk'        ,c.      ..                                 .;loOK00xldkO0kllxKxldKMMMMMMMMM\\n * MMMMMMMMMMMMMK;                                                 ........:okkxdxkkdoloxolkKWMMMMMMMMM\\n * MMMMMMMMMMMMMNx'                                           .. .,;'oOo:,. .;lxkxxxc:c;;:oKMMMMMMMMMMM\\n * MMMMMMMMMMMMW0xdc. ..          ...... ..,''''',;;;,'..         .  ;l,.'''. .;dxkkxc;:::kNWWMMMMMMMMM\\n * MMMMMMMMMMMM0,.,c. .'.    .'coxO00kdddkKXXXXXXNNNNNNKOd;.              ..    .lxkxolxdcodd0WMMMMMMMM\\n * MMMMMMMMMMMNd.      . .':oxOKXNNNWWWWWWMMWWWMMMMMMMMMMMXl.  ''.       ''      .;ldooo;,lodKWMMMMMMMM\\n * MMMMMMMMMMMNo.       .,okKXNNWWWWWWWWWWMMMMMMMMMMMMMMMMMNd..,:;.    .ll. ...     ..;c'.c0MMMMMMMMMMM\\n * MMMMMMMMMMMK;        'oOKNNNNWWWWWWWWMMMMMMMMMMMMMMMMMMMMNk;. .  ..;lc...,.      .. ..'xNMMMMMMMMMMM\\n * MMMMMMMMMMWd.       .ckKXNNNNNNWWWWWWMMMMWMMMMMMMMMMMMMMMWNOo'    ...  .'..   .,..'  .dWMMMMMMMMMMMM\\n * MMMMMMMMMMWd.. .    .oOKNNNNNWWWWWWWWMMMMMMMMMMMMMMMMMMMMWNNXKkc',;:c::c;.   .ll..   .dWMMMMMMMMMMMM\\n * MMMMMMMMMWXd'.      'd0XNNNNNWWWWWWWMMMMMMMMMMWWNNXXNWMMMMWNNNNX0xl::cdkc.   .:,     'kNWWMMMMMMMMMM\\n * MMMMMMMMNk;'..      'oxxxk0KNWWWWMWMMMWWWX0kkdolllclodxOXNWWWWWN0o:,.,ll'     ..     'c:,c0MMMMMMMMM\\n * MMMMMMMM0;   .      .......':okKWWWWWWWXkc;::coxO00KK0Okk0NWWWWWNd. .';::'...        .;..,xWMMMMMMMM\\n * MMMMMMMMX:         .;lddoc;'...:ONWMMWNKkxk0XNWWWWMMMWWWNNWWMWWWNO,    ..'cx;         ';:,lXMMMMMMMM\\n * MMMMMMMMWO,.       .oO00Okkkxo:.'xNMMMWXK0OxxxdodxkOKNWMWWWWWWWWNXo.      .'.         ...'dNMMMMMMMM\\n * MMMMMMMMWKc.       .;;.'....;;;..lNMMMNkol'.',. ....,:dKWMMMWWWWWNO,                    .:0WMMMMMMMM\\n * MMMMMMMMMW0,       .,';dd;,:oxl.'kWMMMWKxc::dkc'';;cxkOKNMMMWWWWWNKl.                   'kWMMMMMMMMM\\n * MMMMMMMMMMW0c.     ,okKXXNNWWXl'dNWMMMMWKxx0XXXXNWWWMMMMMMMMWWWWWNXk'        ...        ,0MMMMMMMMMM\\n * MMMMMMMMMMMMWXOo,.'oOKWMMMMWXd,lXMMMMMMMNK0XWWWWMMMMMMMMMMMMMMWWWNXOc''.    ...          lNMMMMMMMMM\\n * MMMMMMMMMMMMMMMWKocd0XNWWMMW0cc0WMMMMMMMMWWWWMMMMMMMMMMMMMMMMWWWWNX0dcox,                :XMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWxlOXNWMMW0lc0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMWWWNNNNXkdOO: .. ..         'kWMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMWOlxKNWWNO:'dNMMMMMMWWMMMMMMMMMMMMMMMMMMMWWWNNNNNNX0KNXxddc'..   .    ,OWMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMXdd0NWNk:.'dXWMMMMWWWMMWWWWWMMMMMMMMMMMWWWNNNNNNNXXXWWWMMNx.   ... .:oKMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMNxokKX0o'..,oOXNX0kxx0NWWWWWWWMMMMMMMMWWWWNNNNNNNNXNWWWMW0,       ,x0KNMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMWklxOOOdc:'..'cOKKXXXXNNWWWWNNWWWWWMWWWNNNXNNNWWNXX00XNWK:     .::l0WWMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMM0odOkkOOxooclONWWWWWWWWWMWWWWWNNNWWWWNNXNNNNWWWNXX0KXXN0;    .;kXNNWMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMNxlxxxkkkO0O0NMWWWWWWWWMMWWWWNNWWWWWWNNNNNNWWWWNX0kkXWNx.     ,OWMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMM0ld0Oo,,c:;:ldkkxkxdddxkOOxxOXNNWWWWNNNNWWWWWNNXOoc;:;.     .xNMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMWxcx0Oc...  ..';;:;;::;;;:okKNNNWWWNNNWWWWWWNNXXXKd,....';cdKWMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMXo:xK0olc,;loddkOO0XXKKKXNWWNNNWWWNNNWWWWWNXXXNWNKl'':lxOXWMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMKc:xOdodxk0000KXXXNNNNNNWWWNNNWWWWNWWWWWWNXNWWWWN0xk0KXNWMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMM0c;loooodxkOOO00KXXXXNNNWWWWWWWNNNWWWWWNNNWMWWWNXNWMMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMXd;;cloxkOKKXXXXNNNNWWWWMMMWWWNNNWWNNNNWWMMWWWWNKNWMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMWOc,;lx0NNWWMMMMMMMMMMMWWNNNWNNNNNXNNWMMMMWWWWWXKNMMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMNOc,cOXNWWWMMMMMMMWWWNXXXNNXXXKXNWMMMMMWWMMMWNXKNMMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMNx::dOKXNNWNNNXKK00KKK00OkO0XNWMMMMMMMMMMWWWNXXNMMMMMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkoooollollc:;:coxxkkxkOKXNWMMMMMMMMMMWWWWWNKKKKXNMMMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0:...',,,''ckKXXNNNNNWWWMMMMMMMMMWWWWWWNK0klo0WMMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0;':oO0K00XWMMMMWWWWWWWMMMMMMMMMMWWWMWWNX0dloOWMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx;:oOXNNWWWMMMWWWWWMMMMMMMMMMMMMMMMMMWWWKxxodXMMMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKocoOXNWWMMMMMWMMMMMMMMMMMMMMMMMMMMMMMWXOOxokXWWMMMMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXxloOXNWWMMMMMMMWMMMMMMMMMMMMMMMMMMMMMXOkOkkNWNNWWWMMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXOl;cxOXNNWMMMWWWWWMMMMMMMMMMMMMMMMMWWNKdokKNWWWWNNWWMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkd;,ldk0XNWWWWWWWWWMMMMMWWMMMMMMMMWNXK0xdXWMMMMWWWWWMMMMMMMMMM\\n * MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKkkc':oxOXNNWWWWWWMWMMMWWWMWWMMMMMWNKX0kOKNMMMMMMMMMMMMMMMMMMMM\\n *\\n * LondonStockExchangeDAO ($QUID)\\n * Website: https://londonstockexchangedao.com\\n * Telegram: https://t.me/LSEDAO_PORTAL\\n * Twitter: https://twitter.com/afewquid\\n */\\n\\n// SPDX-License-Identifier: NONE\\n\\npragma solidity 0.8.19;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n}\\n\\ncontract Quid is Context, IERC20, Ownable {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private bots;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    bool public transferDelayEnabled = false;\\n    address payable private _taxWallet;\\n\\n    uint256 private _initialBuyTax = 0;\\n    uint256 private _initialSellTax = 6900; // 69%\\n    uint256 private _finalBuyTax = 0;\\n    uint256 private _finalSellTax = 100; // 1%\\n    uint256 public _reduceBuyTaxAt = 0;\\n    uint256 public _reduceSellTaxAt = 369;\\n    uint256 private _preventSwapBefore = 30;\\n    uint256 private _buyCount = 0;\\n\\n    uint8 private constant _decimals = 18;\\n    uint256 private constant _tTotal = 69000000000 ether;\\n    string private constant _name = unicode\\\"LondonStockExchangeDAO\\\";\\n    string private constant _symbol = unicode\\\"QUID\\\";\\n\\n    uint256 public MAX_TX_WALLET_AMOUNT_PCT = 1;\\n    uint256 public _maxTxAmount = (_tTotal * MAX_TX_WALLET_AMOUNT_PCT) / 100; // 1% - check!\\n    uint256 public _maxWalletSize = _maxTxAmount; // check!\\n    uint256 public _taxSwapThreshold = _maxTxAmount * 3; //check!\\n    uint256 public _maxTaxSwap = _taxSwapThreshold; //check!\\n\\n    uint256 public immutable DAO_WALLET_PERCENT = 69; // 6.9% to DAO wallet\\n    address public immutable DAO_WALLET = 0x6613C1bE9C95977F2859Dd3A16593BbD615555de;\\n    uint256 public immutable BOND_LIQUIDITY_VAULT_PERCENT = 500; // 50% to BOND wallet\\n    address public immutable BOND_LIQUIDITY_VAULT = 0x921c7f26dD195ea843CDc446A8adD235764545C3;\\n\\n    IUniswapV2Router02 private uniswapV2Router;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor() {\\n        uint256 _daoWalletAmount = (_tTotal * DAO_WALLET_PERCENT) / 1000;\\n        uint256 _bondWalletAmount = (_tTotal * BOND_LIQUIDITY_VAULT_PERCENT) / 1000;\\n        uint256 _tTotalWithoutWallets = _tTotal - _daoWalletAmount - _bondWalletAmount;\\n        _taxWallet = payable(_msgSender());\\n\\n        _balances[_msgSender()] = _tTotalWithoutWallets;\\n        _balances[DAO_WALLET] = _daoWalletAmount;\\n        _balances[BOND_LIQUIDITY_VAULT] = _bondWalletAmount;\\n\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n        _isExcludedFromFee[DAO_WALLET] = true;\\n        _isExcludedFromFee[BOND_LIQUIDITY_VAULT] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotalWithoutWallets);\\n        emit Transfer(address(0), DAO_WALLET, _daoWalletAmount);\\n        emit Transfer(address(0), BOND_LIQUIDITY_VAULT, _bondWalletAmount);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        uint256 taxAmount = 0;\\n        if (from != owner() && to != owner()) {\\n            require(!bots[from] && !bots[to]);\\n\\n            if (transferDelayEnabled) {\\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\\n                    require(\\n                        _holderLastTransferTimestamp[tx.origin] < block.number, \\\"Only one transfer per block allowed.\\\"\\n                    );\\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\\n                }\\n            }\\n\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n                _buyCount++;\\n            }\\n\\n            taxAmount = (amount * ((_buyCount > _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax)) / 100;\\n            if (to == uniswapV2Pair && from != address(this)) {\\n                taxAmount = amount * ((_buyCount > _reduceSellTaxAt) ? _finalSellTax : _initialSellTax) / 10000;\\n            }\\n        }\\n\\n        if (taxAmount > 0) {\\n            _balances[address(this)] = _balances[address(this)] + (taxAmount);\\n            emit Transfer(from, address(this), taxAmount);\\n        }\\n        _balances[from] = _balances[from] - (amount);\\n        _balances[to] = _balances[to] + (amount - taxAmount);\\n        emit Transfer(from, to, amount - taxAmount);\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        if (tokenAmount == 0) return;\\n        if (!tradingOpen) return;\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount, 0, path, address(this), block.timestamp\\n        );\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        _maxTxAmount = _tTotal;\\n        _maxWalletSize = _tTotal;\\n        transferDelayEnabled = false;\\n        _reduceSellTaxAt = 20;\\n        _reduceBuyTaxAt = 20;\\n        emit MaxTxAmountUpdated(_tTotal);\\n    }\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    function isBot(address a) public view returns (bool) {\\n        return bots[a];\\n    }\\n\\n    function uWotM8() external onlyOwner {\\n        require(!tradingOpen, \\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp\\n        );\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint256).max);\\n        swapEnabled = true;\\n        tradingOpen = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function manualSwap() external {\\n        require(_msgSender() == _taxWallet);\\n        uint256 tokenBalance = balanceOf(address(this));\\n        if (tokenBalance > 0) {\\n            swapTokensForEth(tokenBalance);\\n        }\\n        uint256 ethBalance = address(this).balance;\\n        if (ethBalance > 0) {\\n            sendETHToFee(ethBalance);\\n        }\\n    }\\n\\n    function manualWithdraw() external {\\n        require(_msgSender() == _taxWallet);\\n        uint256 tokenBalance = balanceOf(address(this));\\n        this.transfer(_taxWallet, tokenBalance);\\n    }\\n\\n    function addBots(address[] memory bots_) public onlyOwner {\\n        for (uint256 i = 0; i < bots_.length; i++) {\\n            bots[bots_[i]] = true;\\n        }\\n    }\\n\\n    function delBots(address[] memory notbot) public onlyOwner {\\n        for (uint256 i = 0; i < notbot.length; i++) {\\n            bots[notbot[i]] = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOND_LIQUIDITY_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOND_LIQUIDITY_VAULT_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_WALLET\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_WALLET_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TX_WALLET_AMOUNT_PCT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceBuyTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reduceSellTaxAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbot\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uWotM8\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Quid", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}