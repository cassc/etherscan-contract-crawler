{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/base/BebopSigning.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libs/Order.sol\\\";\\nimport \\\"../libs/Signature.sol\\\";\\nimport \\\"../libs/common/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\nabstract contract BebopSigning {\\n\\n    event OrderSignerRegistered(address maker, address signer, bool allowed);\\n\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"BebopSettlement\\\");\\n    bytes32 private constant DOMAIN_VERSION = keccak256(\\\"1\\\");\\n\\n    bytes4 private constant EIP1271_MAGICVALUE = bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"));\\n\\n    uint256 private constant ETH_SIGN_HASH_PREFIX = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\\n\\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH = keccak256(abi.encodePacked(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    ));\\n\\n    bytes32 public constant AGGREGATED_ORDER_TYPE_HASH = keccak256(abi.encodePacked(\\n        \\\"Aggregate(uint256 expiry,address taker_address,address[] maker_addresses,uint256[] maker_nonces,address[][] taker_tokens,address[][] maker_tokens,uint256[][] taker_amounts,uint256[][] maker_amounts,address receiver,bytes commands)\\\"\\n    ));\\n\\n    bytes32 public constant PARTIAL_AGGREGATED_ORDER_TYPE_HASH = keccak256(abi.encodePacked(\\n        \\\"Partial(uint256 expiry,address taker_address,address maker_address,uint256 maker_nonce,address[] taker_tokens,address[] maker_tokens,uint256[] taker_amounts,uint256[] maker_amounts,address receiver,bytes commands)\\\"\\n    ));\\n\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    mapping(address => mapping(uint256 => uint256)) private maker_validator;\\n    mapping(address => mapping(address => bool)) private orderSignerRegistry;\\n\\n    constructor(){\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(EIP712_DOMAIN_TYPEHASH, DOMAIN_NAME, DOMAIN_VERSION, block.chainid, address(this))\\n        );\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return block.chainid == _CACHED_CHAIN_ID\\n            ? _CACHED_DOMAIN_SEPARATOR\\n            : keccak256(\\n                abi.encode(EIP712_DOMAIN_TYPEHASH, DOMAIN_NAME, DOMAIN_VERSION, block.chainid, address(this))\\n            );\\n    }\\n\\n    function hashAggregateOrder(Order.Aggregate memory order) public view returns (bytes32) {\\n        return\\n        keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        AGGREGATED_ORDER_TYPE_HASH,\\n                        order.expiry,\\n                        order.taker_address,\\n                        keccak256(abi.encodePacked(order.maker_addresses)),\\n                        keccak256(abi.encodePacked(order.maker_nonces)),\\n                        keccak256(encodeTightlyPackedNested(order.taker_tokens)),\\n                        keccak256(encodeTightlyPackedNested(order.maker_tokens)),\\n                        keccak256(encodeTightlyPackedNestedInt(order.taker_amounts)),\\n                        keccak256(encodeTightlyPackedNestedInt(order.maker_amounts)),\\n                        order.receiver,\\n                        keccak256(order.commands)\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function hashPartialOrder(Order.Partial memory order) public view returns (bytes32) {\\n        return\\n        keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR(),\\n                keccak256(\\n                    abi.encode(\\n                        PARTIAL_AGGREGATED_ORDER_TYPE_HASH,\\n                        order.expiry,\\n                        order.taker_address,\\n                        order.maker_address,\\n                        order.maker_nonce,\\n                        keccak256(abi.encodePacked(order.taker_tokens)),\\n                        keccak256(abi.encodePacked(order.maker_tokens)),\\n                        keccak256(abi.encodePacked(order.taker_amounts)),\\n                        keccak256(abi.encodePacked(order.maker_amounts)),\\n                        order.receiver,\\n                        keccak256(order.commands)\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function registerAllowedOrderSigner(address signer, bool allowed) external {\\n        orderSignerRegistry[msg.sender][signer] = allowed;\\n        emit OrderSignerRegistered(msg.sender, signer, allowed);\\n    }\\n\\n    function validateSignature(\\n        address validationAddress,\\n        bytes32 hash,\\n        Signature.TypedSignature memory signature,\\n        bool isMaker\\n    ) public view {\\n        if (signature.signatureType == Signature.Type.EIP712) {\\n            // Signed using EIP712\\n            (bytes32 r, bytes32 s, uint8 v) = Signature.getRsv(signature.signatureBytes);\\n            address signer = ecrecover(hash, v, r, s);\\n            require(signer != address(0), \\\"Invalid signer\\\");\\n            if (signer != validationAddress && (!isMaker || !orderSignerRegistry[validationAddress][signer])) {\\n                revert(\\\"Invalid EIP712 order signature\\\");\\n            }\\n        } else if (signature.signatureType == Signature.Type.EIP1271) {\\n            require(\\n                IERC1271(validationAddress).isValidSignature(hash, signature.signatureBytes) == EIP1271_MAGICVALUE,\\n                \\\"Invalid EIP1271 order signature\\\"\\n            );\\n        } else if (signature.signatureType == Signature.Type.ETHSIGN) {\\n            bytes32 ethSignHash;\\n            assembly {\\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\\n                mstore(28, hash) // length of 32 bytes\\n                ethSignHash := keccak256(0, 60)\\n            }\\n            (bytes32 r, bytes32 s, uint8 v) = Signature.getRsv(signature.signatureBytes);\\n            address signer = ecrecover(ethSignHash, v, r, s);\\n            require(signer != address(0), \\\"Invalid signer\\\");\\n            if (signer != validationAddress && (!isMaker || !orderSignerRegistry[validationAddress][signer])) {\\n                revert(\\\"Invalid ETHSIGH order signature\\\");\\n            }\\n        } else {\\n            revert(\\\"Invalid Signature Type\\\");\\n        }\\n    }\\n\\n    function encodeTightlyPackedNestedInt(uint256[][] memory _nested_array) private pure returns (bytes memory encoded) {\\n        uint nested_array_length = _nested_array.length;\\n        for (uint i = 0; i < nested_array_length; i++) {\\n            encoded = abi.encodePacked(\\n                encoded,\\n                keccak256(abi.encodePacked(_nested_array[i]))\\n            );\\n        }\\n        return encoded;\\n    }\\n\\n    function encodeTightlyPackedNested(address[][] memory _nested_array) private pure returns (bytes memory encoded) {\\n        uint nested_array_length = _nested_array.length;\\n        for (uint i = 0; i < nested_array_length; i++) {\\n            encoded = abi.encodePacked(\\n                encoded,\\n                keccak256(abi.encodePacked(_nested_array[i]))\\n            );\\n        }\\n        return encoded;\\n    }\\n\\n    function invalidateOrder(address maker, uint256 nonce) private {\\n        require(nonce != 0, \\\"Nonce must be non-zero\\\");\\n        uint256 invalidatorSlot = nonce >> 8;\\n        uint256 invalidatorBit = 1 << (nonce & 0xff);\\n        mapping(uint256 => uint256) storage invalidatorStorage = maker_validator[maker];\\n        uint256 invalidator = invalidatorStorage[invalidatorSlot];\\n        require(invalidator & invalidatorBit != invalidatorBit, \\\"Invalid maker order (nonce)\\\");\\n        invalidatorStorage[invalidatorSlot] = invalidator | invalidatorBit;\\n    }\\n\\n    function assertAndInvalidateMakerOrders(\\n        Order.Aggregate memory order,\\n        Signature.MakerSignatures[] memory makerSigs\\n    ) private {\\n        // number of columns = number of sigs otherwise unwarranted columns can be injected by sender.\\n        require(order.taker_tokens.length == makerSigs.length, \\\"Taker tokens length mismatch\\\");\\n        require(order.maker_tokens.length == makerSigs.length, \\\"Maker tokens length mismatch\\\");\\n        require(order.taker_amounts.length == makerSigs.length, \\\"Taker amounts length mismatch\\\");\\n        require(order.maker_amounts.length == makerSigs.length, \\\"Maker amounts length mismatch\\\");\\n        require(order.maker_nonces.length == makerSigs.length, \\\"Maker nonces length mismatch\\\");\\n        require(order.maker_addresses.length == makerSigs.length, \\\"Maker addresses length mismatch\\\");\\n        uint numMakerSigs = makerSigs.length;\\n        uint tokenTransfers;\\n        for (uint256 i; i < numMakerSigs; ++i) {\\n            // validate the partially signed orders.\\n            address maker_address = order.maker_addresses[i];\\n            require(order.maker_tokens[i].length == order.maker_amounts[i].length, \\\"Maker tokens and amounts length mismatch\\\");\\n            require(order.taker_tokens[i].length == order.taker_amounts[i].length, \\\"Taker tokens and amounts length mismatch\\\");\\n            Order.Partial memory partial_order = Order.Partial(\\n                order.expiry,\\n                order.taker_address,\\n                maker_address,\\n                order.maker_nonces[i],\\n                order.taker_tokens[i],\\n                order.maker_tokens[i],\\n                order.taker_amounts[i],\\n                order.maker_amounts[i],\\n                order.receiver,\\n                BytesLib.slice(\\n                    order.commands, tokenTransfers, order.maker_tokens[i].length + order.taker_tokens[i].length\\n                )\\n            );\\n            validateSignature(maker_address, hashPartialOrder(partial_order), makerSigs[i].signature, true);\\n            invalidateOrder(maker_address, order.maker_nonces[i]);\\n            tokenTransfers += order.maker_tokens[i].length + order.taker_tokens[i].length;\\n        }\\n        require(tokenTransfers == order.commands.length, \\\"Token transfers length mismatch\\\");\\n    }\\n\\n    function assertAndInvalidateAggregateOrder(\\n        Order.Aggregate memory order,\\n        Signature.TypedSignature memory takerSig,\\n        Signature.MakerSignatures[] memory makerSigs\\n    ) internal returns (bytes32) {\\n        bytes32 h = hashAggregateOrder(order);\\n        if (msg.sender != order.taker_address){\\n            validateSignature(order.taker_address, h, takerSig, false);\\n        }\\n\\n        // construct and validate maker partial orders\\n        assertAndInvalidateMakerOrders(order, makerSigs);\\n\\n        require(order.expiry > block.timestamp, \\\"Signature expired\\\");\\n        return h;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/base/BebopTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IDaiLikePermit.sol\\\";\\nimport \\\"../interface/IPermit2.sol\\\";\\nimport \\\"../libs/Order.sol\\\";\\nimport \\\"../libs/Signature.sol\\\";\\nimport \\\"../libs/Transfer.sol\\\";\\nimport \\\"../libs/Commands.sol\\\";\\nimport \\\"../libs/common/SafeCast160.sol\\\";\\nimport \\\"./BebopSigning.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract BebopTransfer {\\n\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable WRAPPED_NATIVE_TOKEN;\\n    address public immutable DAI_TOKEN;\\n\\n    IPermit2 public immutable PERMIT2;\\n\\n    uint private immutable _chainId;\\n\\n    function getChainId() private view returns (uint256) {\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    constructor(address _wrapped_native_token_address, address _permit, address _dai_address) {\\n        WRAPPED_NATIVE_TOKEN = _wrapped_native_token_address;\\n        DAI_TOKEN = _dai_address;\\n        PERMIT2 = IPermit2(_permit);\\n        _chainId = getChainId();\\n    }\\n\\n    function makerTransferFunds(\\n        address from,\\n        address to,\\n        address[] memory maker_tokens,\\n        uint256[] memory maker_amounts,\\n        bool usingPermit2,\\n        bytes memory makerCommands\\n    ) internal returns (uint256) {\\n        uint256 nativeToTaker;\\n        uint256 tokensNum = maker_tokens.length;\\n        IPermit2.AllowanceTransferDetails[] memory batchTransferDetails = new IPermit2.AllowanceTransferDetails[](tokensNum);\\n        for (uint j; j < tokensNum; ++j) {\\n            uint256 amount = maker_amounts[j];\\n            address receiver = to;\\n            if (makerCommands[j] != Commands.SIMPLE_TRANSFER){\\n                if (makerCommands[j] == Commands.TRANSFER_TO_CONTRACT) {\\n                    receiver = address(this);\\n                } else if (makerCommands[j] == Commands.NATIVE_TRANSFER) {\\n                    require(maker_tokens[j] == WRAPPED_NATIVE_TOKEN, \\\"Invalid maker's native transfer\\\");\\n                    nativeToTaker += amount;\\n                    receiver = address(this);\\n                } else {\\n                    revert(\\\"Unknown maker command\\\");\\n                }\\n            }\\n            if (usingPermit2) {\\n                batchTransferDetails[j] = IPermit2.AllowanceTransferDetails({\\n                    from: from,\\n                    to: receiver,\\n                    amount: SafeCast160.toUint160(amount),\\n                    token: maker_tokens[j]\\n                });\\n            } else {\\n                IERC20(maker_tokens[j]).safeTransferFrom(from, receiver, amount);\\n            }\\n        }\\n        if (usingPermit2){\\n            PERMIT2.transferFrom(batchTransferDetails);\\n        }\\n\\n        return nativeToTaker;\\n    }\\n\\n    function permitToken(\\n        address takerAddress,\\n        address tokenAddress,\\n        uint deadline,\\n        bytes memory permitSignature\\n    ) internal {\\n        (bytes32 r, bytes32 s, uint8 v) = Signature.getRsv(permitSignature);\\n\\n        if (tokenAddress == DAI_TOKEN){\\n            if (_chainId == 137){\\n                IDaiLikePermit(tokenAddress).permit(\\n                    takerAddress, address(this), IDaiLikePermit(tokenAddress).getNonce(takerAddress), deadline, true, v, r, s\\n                );\\n            } else {\\n                IDaiLikePermit(tokenAddress).permit(\\n                    takerAddress, address(this), IERC20Permit(tokenAddress).nonces(takerAddress), deadline, true, v, r, s\\n                );\\n            }\\n        } else {\\n            IERC20Permit(tokenAddress).permit(takerAddress, address(this), type(uint).max, deadline, v, r, s);\\n        }\\n\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/contracts/BebopSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"./interface/IBebopSettlement.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./interface/IPermit2.sol\\\";\\nimport \\\"./base/BebopSigning.sol\\\";\\nimport \\\"./base/BebopTransfer.sol\\\";\\nimport \\\"./libs/Order.sol\\\";\\nimport \\\"./libs/Signature.sol\\\";\\nimport \\\"./libs/Transfer.sol\\\";\\nimport \\\"./libs/Commands.sol\\\";\\nimport \\\"./libs/common/BytesLib.sol\\\";\\nimport \\\"./libs/common/SafeCast160.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract BebopSettlement is IBebopSettlement, BebopSigning, BebopTransfer, ReentrancyGuard {\\n\\n    using SafeERC20 for IERC20;\\n\\n    constructor(address _wrapped_native_token_address, address _permit, address _dai_address)\\n        BebopTransfer(_wrapped_native_token_address, _permit, _dai_address){\\n    }\\n\\n    receive() external payable {}\\n\\n    function SettleAggregateOrder(\\n        Order.Aggregate memory order,\\n        Signature.TypedSignature memory takerSig,\\n        Signature.MakerSignatures[] memory makerSigs\\n    ) external nonReentrant payable override returns (bool) {\\n        bytes32 h = assertAndInvalidateAggregateOrder(order, takerSig, makerSigs);\\n\\n        uint numMakerSigs = makerSigs.length;\\n        Transfer.NativeTokens memory nativeTokens = Transfer.NativeTokens({toTaker: 0, toMakers: 0});\\n        Transfer.Pending[] memory pendingNativeTokensToMakers = new Transfer.Pending[](numMakerSigs);\\n        uint commandsInd;\\n        for (uint i; i < numMakerSigs; ++i) {\\n            // Batch transfer from maker to taker and accumulate maker's number of native tokens\\n            nativeTokens.toTaker += makerTransferFunds(\\n                order.maker_addresses[i], order.receiver, order.maker_tokens[i], order.maker_amounts[i],\\n                makerSigs[i].usingPermit2, BytesLib.slice(order.commands, commandsInd, order.maker_tokens[i].length)\\n            );\\n            commandsInd += order.maker_tokens[i].length;\\n\\n            for (uint k; k < order.taker_tokens[i].length; ++k) {\\n                bytes1 curCommand = order.commands[commandsInd + k];\\n                if (curCommand == Commands.SIMPLE_TRANSFER) {\\n                    // Transfer taker's token with standard approval\\n                    IERC20(order.taker_tokens[i][k]).safeTransferFrom(\\n                        order.taker_address, order.maker_addresses[i], order.taker_amounts[i][k]\\n                    );\\n                } else if (curCommand == Commands.NATIVE_TRANSFER) {\\n                    require(order.taker_tokens[i][k] == WRAPPED_NATIVE_TOKEN, \\\"Taker's token is not native token\\\");\\n                    // Accumulating taker's number of native tokens\\n                    nativeTokens.toMakers += order.taker_amounts[i][k];\\n                    pendingNativeTokensToMakers[i] = Transfer.Pending(\\n                        order.taker_tokens[i][k], order.maker_addresses[i], order.taker_amounts[i][k]\\n                    );\\n                } else if (curCommand == Commands.TRANSFER_FROM_CONTRACT) {\\n                    // If using contract as an intermediate recipient for tokens transferring\\n                    IERC20(order.taker_tokens[i][k]).safeTransfer(order.maker_addresses[i], order.taker_amounts[i][k]);\\n                } else {\\n                    revert(\\\"Unknown command\\\");\\n                }\\n            }\\n            commandsInd += order.taker_tokens[i].length;\\n        }\\n\\n        // Wrap taker's native token and transfer to Makers\\n        if (nativeTokens.toMakers != 0) {\\n            require(msg.value == nativeTokens.toMakers, \\\"Taker doesn't have enough native tokens\\\");\\n            IWETH(WRAPPED_NATIVE_TOKEN).deposit{value: nativeTokens.toMakers}();\\n\\n            for (uint i; i < numMakerSigs; ++i) {\\n                if (pendingNativeTokensToMakers[i].amount != 0) {\\n                    IERC20(pendingNativeTokensToMakers[i].token).safeTransfer(\\n                        pendingNativeTokensToMakers[i].maker_address, pendingNativeTokensToMakers[i].amount\\n                    );\\n                }\\n            }\\n        }\\n\\n        // Unwrap and transfer native token to receiver\\n        if (nativeTokens.toTaker != 0) {\\n            IWETH(WRAPPED_NATIVE_TOKEN).withdraw(nativeTokens.toTaker);\\n            (bool sent,) = order.receiver.call{value: nativeTokens.toTaker}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether to taker\\\");\\n        }\\n\\n        emit AggregateOrderExecuted(h);\\n        return true;\\n    }\\n\\n\\n    function SettleAggregateOrderWithTakerPermits(\\n        Order.Aggregate memory order,\\n        Signature.TypedSignature memory takerSig,\\n        Signature.MakerSignatures[] memory makerSigs,\\n        Signature.TakerPermitsInfo memory takerPermitsInfo\\n    ) external nonReentrant payable override returns (bool) {\\n        bytes32 h = assertAndInvalidateAggregateOrder(order, takerSig, makerSigs);\\n\\n        uint totalTakersTransfers;\\n        for (uint i; i < order.taker_tokens.length; ++i) {\\n            totalTakersTransfers += order.taker_tokens[i].length;\\n        }\\n\\n        IPermit2.AllowanceTransferDetails[] memory batchTransferDetails = new IPermit2.AllowanceTransferDetails[](totalTakersTransfers);\\n        IPermit2.PermitDetails[] memory batchToApprove = new IPermit2.PermitDetails[](takerPermitsInfo.noncesPermit2.length);\\n\\n        Transfer.Pending[] memory pendingTransfersToMakers = new Transfer.Pending[](totalTakersTransfers);\\n        Transfer.NativeTokens memory nativeTokens = Transfer.NativeTokens({toTaker: 0, toMakers: 0});\\n        Transfer.Indices memory indices = Transfer.Indices(0, 0, 0, 0, 0);\\n        for (uint i; i < makerSigs.length; ++i) {\\n            // Batch transfer from maker to taker and accumulate maker's number of native tokens\\n            nativeTokens.toTaker += makerTransferFunds(\\n                order.maker_addresses[i], order.receiver, order.maker_tokens[i], order.maker_amounts[i],\\n                makerSigs[i].usingPermit2, BytesLib.slice(order.commands, indices.commandsInd, order.maker_tokens[i].length)\\n            );\\n            indices.commandsInd += order.maker_tokens[i].length;\\n\\n            for (uint k; k < order.taker_tokens[i].length; ++k) {\\n                bytes1 curCommand = order.commands[indices.commandsInd + k];\\n                if (curCommand == Commands.SIMPLE_TRANSFER) {\\n                    batchTransferDetails[indices.batchLen++] = IPermit2.AllowanceTransferDetails({\\n                        from: order.taker_address,\\n                        to: order.maker_addresses[i],\\n                        amount: SafeCast160.toUint160(order.taker_amounts[i][k]),\\n                        token: order.taker_tokens[i][k]\\n                    });\\n                } else if (curCommand == Commands.TRANSFER_WITH_PERMIT) {\\n                    // Transfer taker's token with Permit signature\\n                    IERC20(order.taker_tokens[i][k]).safeTransferFrom(\\n                        order.taker_address, order.maker_addresses[i], order.taker_amounts[i][k]\\n                    );\\n                    assembly {mstore(batchTransferDetails, sub(mload(batchTransferDetails), 1))}\\n                } else if (curCommand == Commands.PERMIT_THEN_TRANSFER) {\\n                    permitToken(\\n                        order.taker_address, order.taker_tokens[i][k],\\n                        takerPermitsInfo.deadline, takerPermitsInfo.permitSignatures[indices.permitSignaturesInd++]\\n                    );\\n\\n                    IERC20(order.taker_tokens[i][k]).safeTransferFrom(\\n                        order.taker_address, order.maker_addresses[i], order.taker_amounts[i][k]\\n                    );\\n                    assembly {mstore(batchTransferDetails, sub(mload(batchTransferDetails), 1))}\\n                } else if (curCommand == Commands.PERMIT2_THEN_TRANSFER) {\\n                    batchToApprove[indices.batchToApproveInd++] = IPermit2.PermitDetails({\\n                        token: order.taker_tokens[i][k],\\n                        amount: type(uint160).max,\\n                        expiration: takerPermitsInfo.deadline,\\n                        nonce: takerPermitsInfo.noncesPermit2[indices.batchToApproveInd]\\n                    });\\n                    batchTransferDetails[indices.batchLen++] = IPermit2.AllowanceTransferDetails({\\n                        from: order.taker_address,\\n                        to: order.maker_addresses[i],\\n                        amount: SafeCast160.toUint160(order.taker_amounts[i][k]),\\n                        token: order.taker_tokens[i][k]\\n                    });\\n                } else if (curCommand == Commands.NATIVE_TRANSFER) {\\n                    require(order.taker_tokens[i][k] == WRAPPED_NATIVE_TOKEN, \\\"Taker's token is not native token\\\");\\n                    // Accumulating taker's number of native tokens\\n                    nativeTokens.toMakers += order.taker_amounts[i][k];\\n                    pendingTransfersToMakers[indices.pendingTransfersLen++] = Transfer.Pending(\\n                        order.taker_tokens[i][k], order.maker_addresses[i], order.taker_amounts[i][k]\\n                    );\\n                    // Shortening Permit2 batch arrays\\n                    assembly {mstore(batchTransferDetails, sub(mload(batchTransferDetails), 1))}\\n                } else if (curCommand == Commands.TRANSFER_FROM_CONTRACT) {\\n                    // If using contract as an intermediate recipient for tokens transferring\\n                    pendingTransfersToMakers[indices.pendingTransfersLen++] = Transfer.Pending(\\n                        order.taker_tokens[i][k], order.maker_addresses[i], order.taker_amounts[i][k]\\n                    );\\n                    assembly {mstore(batchTransferDetails, sub(mload(batchTransferDetails), 1))}\\n                } else {\\n                    revert(\\\"Unknown command\\\");\\n                }\\n            }\\n            indices.commandsInd += order.taker_tokens[i].length;\\n        }\\n\\n        require(indices.permitSignaturesInd == takerPermitsInfo.permitSignatures.length, \\\"Unexpected number of Permit signatures\\\");\\n        require(indices.batchToApproveInd == batchToApprove.length, \\\"Unexpected number of tokens to approve\\\");\\n        if (batchToApprove.length != 0) {\\n            // Update approvals for new taker's tokens\\n            PERMIT2.permit({\\n                owner: order.taker_address,\\n                permitBatch: IPermit2.PermitBatch({\\n                    details: batchToApprove,\\n                    spender: address(this),\\n                    sigDeadline: takerPermitsInfo.deadline\\n                }),\\n                signature: takerPermitsInfo.signatureBytesPermit2\\n            });\\n        }\\n\\n        require(indices.batchLen == batchTransferDetails.length, \\\"Unexpected number of tokens\\\");\\n        if (indices.batchLen != 0) {\\n            // Transfer taker's tokens with Permit2 batch\\n            PERMIT2.transferFrom(batchTransferDetails);\\n        }\\n\\n        // Wrap taker's native token\\n        if (nativeTokens.toMakers != 0) {\\n            require(msg.value == nativeTokens.toMakers, \\\"Taker doesn't have enough native tokens\\\");\\n            IWETH(WRAPPED_NATIVE_TOKEN).deposit{value: nativeTokens.toMakers}();\\n        }\\n\\n        // Send all pending transfers to makers\\n        for (uint i; i < indices.pendingTransfersLen; ++i) {\\n            IERC20(pendingTransfersToMakers[i].token).safeTransfer(\\n                pendingTransfersToMakers[i].maker_address, pendingTransfersToMakers[i].amount\\n            );\\n        }\\n\\n        // Unwrap and transfer native token to receiver\\n        if (nativeTokens.toTaker != 0) {\\n            IWETH(WRAPPED_NATIVE_TOKEN).withdraw(nativeTokens.toTaker);\\n            (bool sent,) = order.receiver.call{value: nativeTokens.toTaker}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether to taker\\\");\\n        }\\n\\n        emit AggregateOrderExecuted(h);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/interface/IBebopSettlement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libs/Order.sol\\\";\\nimport \\\"../libs/Signature.sol\\\";\\n\\ninterface IBebopSettlement {\\n    event AggregateOrderExecuted(bytes32 order_hash);\\n\\n    function SettleAggregateOrder(\\n        Order.Aggregate memory order,\\n        Signature.TypedSignature memory takerSig,\\n        Signature.MakerSignatures[] memory makerSigs\\n    ) external payable returns (bool);\\n\\n    function SettleAggregateOrderWithTakerPermits(\\n        Order.Aggregate memory order,\\n        Signature.TypedSignature memory takerSig,\\n        Signature.MakerSignatures[] memory makerSigs,\\n        Signature.TakerPermitsInfo memory takerPermitInfo\\n    ) external payable returns (bool);\\n\\n}\"\r\n    },\r\n    \"src/contracts/interface/IDaiLikePermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    /// @param holder The address of the token owner.\\n    /// @param spender The address of the token spender.\\n    /// @param nonce The owner's nonce, increases at each call to permit.\\n    /// @param expiry The timestamp at which the permit is no longer valid.\\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\\n    /// @param v Must produce valid secp256k1 signature from the owner along with r and s.\\n    /// @param r Must produce valid secp256k1 signature from the owner along with v and s.\\n    /// @param s Must produce valid secp256k1 signature from the owner along with r and v.\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    // DAI's Polygon getNonce, instead of `nonces(address)` function\\n    function getNonce(address user) external view returns (uint256 nonce);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interface/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n\\n// Part of IAllowanceTransfer(https://github.com/Uniswap/permit2/blob/main/src/interfaces/IAllowanceTransfer.sol)\\ninterface IPermit2 {\\n\\n    // ------------------\\n    // IAllowanceTransfer\\n    // ------------------\\n\\n    /// @notice Details for a token transfer.\\n    struct AllowanceTransferDetails {\\n        // the owner of the token\\n        address from;\\n        // the recipient of the token\\n        address to;\\n        // the amount of the token\\n        uint160 amount;\\n        // the token to be transferred\\n        address token;\\n    }\\n\\n    /// @notice The permit data for a token\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    /// @notice The permit message signed for multiple token allowances\\n    struct PermitBatch {\\n        // the permit data for multiple token allowances\\n        PermitDetails[] details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n\\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n    function allowance(address user, address token, address spender)\\n    external\\n    view\\n    returns (uint160 amount, uint48 expiration, uint48 nonce);\\n\\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\\n    /// @param owner The owner of the tokens being approved\\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\\n    /// @param signature The owner's signature over the permit data\\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\\n\\n    /// @notice Transfer approved tokens in a batch\\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\\n    /// @dev Requires the from addresses to have approved at least the desired amount\\n    /// of tokens to msg.sender.\\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\\n\\n}\"\r\n    },\r\n    \"src/contracts/interface/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\"\r\n    },\r\n    \"src/contracts/libs/Commands.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary Commands {\\n\\n    bytes1 internal constant SIMPLE_TRANSFER = 0x00;\\n    bytes1 internal constant NATIVE_TRANSFER = 0x01;\\n    bytes1 internal constant TRANSFER_TO_CONTRACT = 0x02;\\n    bytes1 internal constant TRANSFER_FROM_CONTRACT = 0x03; // only for taker commands\\n    bytes1 internal constant TRANSFER_WITH_PERMIT = 0x04; // only for taker commands\\n    bytes1 internal constant PERMIT_THEN_TRANSFER = 0x05; // only for taker commands\\n    bytes1 internal constant PERMIT2_THEN_TRANSFER = 0x06; // only for taker commands\\n\\n}\\n\"\r\n    },\r\n    \"src/contracts/libs/common/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        // Check length is 0. `iszero` return 1 for `true` and 0 for `false`.\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // Calculate length mod 32 to handle slices that are not a multiple of 32 in size.\\n                let lengthmod := and(_length, 31)\\n\\n                // tempBytes will have the following format in memory: <length><data>\\n                // When copying data we will offset the start forward to avoid allocating additional memory\\n                // Therefore part of the length area will be written, but this will be overwritten later anyways.\\n                // In case no offset is require, the start is set to the data region (0x20 from the tempBytes)\\n                // mc will be used to keep track where to copy the data to.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // Same logic as for mc is applied and additionally the start offset specified for the method is added\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    // increase `mc` and `cc` to read the next word from memory\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // Copy the data from source (cc location) to the slice data (mc location)\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                // Store the length of the slice. This will overwrite any partial data that\\n                // was copied when having slices that are not a multiple of 32.\\n                mstore(tempBytes, _length)\\n\\n                // update free-memory pointer\\n                // allocating the array padded to 32 bytes like the compiler does now\\n                // To set the used memory as a multiple of 32, add 31 to the actual memory usage (mc)\\n                // and remove the modulo 32 (the `and` with `not(31)`)\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            // if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                // zero out the 32 bytes slice we are about to return\\n                // we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                // update free-memory pointer\\n                // tempBytes uses 32 bytes in memory (even when empty) for the length.\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libs/common/SafeCast160.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary SafeCast160 {\\n    /// @notice Thrown when a valude greater than type(uint160).max is cast to uint160\\n    error UnsafeCast();\\n\\n    /// @notice Safely casts uint256 to uint160\\n    /// @param value The uint256 to be cast\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) revert UnsafeCast();\\n        return uint160(value);\\n    }\\n}\"\r\n    },\r\n    \"src/contracts/libs/Order.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Order {\\n\\n    struct Aggregate {\\n        uint256 expiry;\\n        address taker_address;\\n        address[] maker_addresses;\\n        uint256[] maker_nonces;\\n        address[][] taker_tokens;\\n        address[][] maker_tokens;\\n        uint256[][] taker_amounts;\\n        uint256[][] maker_amounts;\\n        address receiver;\\n        bytes commands;\\n    }\\n\\n    struct Partial {\\n        uint256 expiry;\\n        address taker_address;\\n        address maker_address;\\n        uint256 maker_nonce;\\n        address[] taker_tokens;\\n        address[] maker_tokens;\\n        uint256[] taker_amounts;\\n        uint256[] maker_amounts;\\n        address receiver;\\n        bytes commands;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/contracts/libs/Signature.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Signature {\\n\\n    enum Type {\\n        EIP712,  //0\\n        EIP1271, //1\\n        ETHSIGN  //2\\n    }\\n\\n    struct TypedSignature {\\n        Type signatureType;\\n        bytes signatureBytes;\\n    }\\n\\n    struct MakerSignatures {\\n        TypedSignature signature;\\n        bool usingPermit2;\\n    }\\n\\n    struct TakerPermitsInfo {\\n        bytes[] permitSignatures;\\n        bytes signatureBytesPermit2;\\n        uint48[] noncesPermit2;\\n        uint48 deadline;\\n    }\\n\\n    function getRsv(bytes memory sig) internal pure returns (bytes32, bytes32, uint8){\\n        require(sig.length == 65, \\\"Invalid signature length\\\");\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := and(mload(add(sig, 65)), 255)\\n        }\\n        if (v < 27) v += 27;\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"Invalid sig value S\\\");\\n        require(v == 27 || v == 28, \\\"Invalid sig value V\\\");\\n        return (r, s, v);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libs/Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Transfer {\\n    struct Pending {\\n        address token;\\n        address maker_address;\\n        uint256 amount;\\n    }\\n\\n    struct NativeTokens {\\n        uint256 toTaker;  // accumulated amount of tokens that will be sent to the taker (receiver)\\n        uint256 toMakers; // accumulated amount of tokens that will be sent to the makers\\n    }\\n\\n    struct Indices {\\n        uint commandsInd; // current `order.commands` index\\n        uint batchToApproveInd; // current `batchToApprove` index\\n        uint permitSignaturesInd; // current `takerPermitsInfo.permitSignatures` index\\n\\n        uint pendingTransfersLen; // current length of `pendingTransfers`\\n        uint batchLen; // current length of `batchTransferDetails`\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped_native_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_permit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UnsafeCast\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"order_hash\",\"type\":\"bytes32\"}],\"name\":\"AggregateOrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"OrderSignerRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AGGREGATED_ORDER_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARTIAL_AGGREGATED_ORDER_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT2\",\"outputs\":[{\"internalType\":\"contract IPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"maker_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maker_nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"taker_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"maker_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"taker_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"maker_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct Order.Aggregate\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"takerSig\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"usingPermit2\",\"type\":\"bool\"}],\"internalType\":\"struct Signature.MakerSignatures[]\",\"name\":\"makerSigs\",\"type\":\"tuple[]\"}],\"name\":\"SettleAggregateOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"maker_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maker_nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"taker_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"maker_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"taker_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"maker_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct Order.Aggregate\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"takerSig\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"usingPermit2\",\"type\":\"bool\"}],\"internalType\":\"struct Signature.MakerSignatures[]\",\"name\":\"makerSigs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"permitSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytesPermit2\",\"type\":\"bytes\"},{\"internalType\":\"uint48[]\",\"name\":\"noncesPermit2\",\"type\":\"uint48[]\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"internalType\":\"struct Signature.TakerPermitsInfo\",\"name\":\"takerPermitsInfo\",\"type\":\"tuple\"}],\"name\":\"SettleAggregateOrderWithTakerPermits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"maker_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maker_nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"taker_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"maker_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"taker_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"maker_amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct Order.Aggregate\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashAggregateOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taker_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maker_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"taker_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"maker_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"taker_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maker_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"commands\",\"type\":\"bytes\"}],\"internalType\":\"struct Order.Partial\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashPartialOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"registerAllowedOrderSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum Signature.Type\",\"name\":\"signatureType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signatureBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Signature.TypedSignature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"}],\"name\":\"validateSignature\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BebopSettlement", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba30000000000000000000000006b175474e89094c44da98b954eedeac495271d0f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}