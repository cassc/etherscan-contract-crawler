{"SourceCode": "pragma solidity ^0.4.11;\r\n\r\ncontract BMCPlatform {\r\n    mapping(bytes32 => address) public proxies;\r\n    function name(bytes32 _symbol) returns(string);\r\n    function setProxy(address _address, bytes32 _symbol) returns(uint errorCode);\r\n    function isOwner(address _owner, bytes32 _symbol) returns(bool);\r\n    function totalSupply(bytes32 _symbol) returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) returns(uint);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) returns(uint);\r\n    function baseUnit(bytes32 _symbol) returns(uint8);\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) returns(uint errorCode);\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) returns(uint errorCode);\r\n    function reissueAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\r\n    function revokeAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\r\n    function isReissuable(bytes32 _symbol) returns(bool);\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) returns(uint errorCode);\r\n}\r\n\r\ncontract BMCAsset {\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\r\n    function __approve(address _spender, uint _value, address _sender) returns(bool);\r\n    function __process(bytes _data, address _sender) payable {\r\n        throw;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n    string public symbol;\r\n\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title BMC Asset Proxy.\r\n *\r\n * Proxy implements ERC20 interface and acts as a gateway to a single platform asset.\r\n * Proxy adds symbol and caller(sender) when forwarding requests to platform.\r\n * Every request that is made by caller first sent to the specific asset implementation\r\n * contract, which then calls back to be forwarded onto platform.\r\n *\r\n * Calls flow: Caller ->\r\n *             Proxy.func(...) ->\r\n *             Asset.__func(..., Caller.address) ->\r\n *             Proxy.__func(..., Caller.address) ->\r\n *             Platform.proxyFunc(..., symbol, Caller.address)\r\n *\r\n * Asset implementation contract is mutable, but each user have an option to stick with\r\n * old implementation, through explicit decision made in timely manner, if he doesn't agree\r\n * with new rules.\r\n * Each user have a possibility to upgrade to latest asset contract implementation, without the\r\n * possibility to rollback.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract BMCAssetProxy is ERC20 {\r\n\r\n    // Supports BMCPlatform ability to return error codes from methods\r\n    uint constant OK = 1;\r\n\r\n    // Assigned platform, immutable.\r\n    BMCPlatform public bmcPlatform;\r\n\r\n    // Assigned symbol, immutable.\r\n    bytes32 public smbl;\r\n\r\n    // Assigned name, immutable.\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    /**\r\n     * Sets platform address, assigns symbol and name.\r\n     *\r\n     * Can be set only once.\r\n     *\r\n     * @param _bmcPlatform platform contract address.\r\n     * @param _symbol assigned symbol.\r\n     * @param _name assigned name.\r\n     *\r\n     * @return success.\r\n     */\r\n    function init(BMCPlatform _bmcPlatform, string _symbol, string _name) returns(bool) {\r\n        if (address(bmcPlatform) != 0x0) {\r\n            return false;\r\n        }\r\n        bmcPlatform = _bmcPlatform;\r\n        symbol = _symbol;\r\n        smbl = stringToBytes32(_symbol);\r\n        name = _name;\r\n        return true;\r\n    }\r\n\r\n    function stringToBytes32(string memory source) returns (bytes32 result) {\r\n        assembly {\r\n           result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Only platform is allowed to call.\r\n     */\r\n    modifier onlyBMCPlatform() {\r\n        if (msg.sender == address(bmcPlatform)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Only current asset owner is allowed to call.\r\n     */\r\n    modifier onlyAssetOwner() {\r\n        if (bmcPlatform.isOwner(msg.sender, smbl)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns asset implementation contract for current caller.\r\n     *\r\n     * @return asset implementation contract.\r\n     */\r\n    function _getAsset() internal returns(BMCAsset) {\r\n        return BMCAsset(getVersionFor(msg.sender));\r\n    }\r\n\r\n    /**\r\n     * Returns asset total supply.\r\n     *\r\n     * @return asset total supply.\r\n     */\r\n    function totalSupply() constant returns(uint) {\r\n        return bmcPlatform.totalSupply(smbl);\r\n    }\r\n\r\n    /**\r\n     * Returns asset balance for a particular holder.\r\n     *\r\n     * @param _owner holder address.\r\n     *\r\n     * @return holder balance.\r\n     */\r\n    function balanceOf(address _owner) constant returns(uint) {\r\n        return bmcPlatform.balanceOf(_owner, smbl);\r\n    }\r\n\r\n    /**\r\n     * Returns asset allowance from one holder to another.\r\n     *\r\n     * @param _from holder that allowed spending.\r\n     * @param _spender holder that is allowed to spend.\r\n     *\r\n     * @return holder to spender allowance.\r\n     */\r\n    function allowance(address _from, address _spender) constant returns(uint) {\r\n        return bmcPlatform.allowance(_from, _spender, smbl);\r\n    }\r\n\r\n    /**\r\n     * Returns asset decimals.\r\n     *\r\n     * @return asset decimals.\r\n     */\r\n    function decimals() constant returns(uint8) {\r\n        return bmcPlatform.baseUnit(smbl);\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance from the caller to specified receiver.\r\n     *\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transfer(address _to, uint _value) returns(bool) {\r\n        if (_to != 0x0) {\r\n          return _transferWithReference(_to, _value, \"\");\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance from the caller to specified receiver adding specified comment.\r\n     *\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a platform's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\r\n        if (_to != 0x0) {\r\n            return _transferWithReference(_to, _value, _reference);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\r\n     * the caller address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _transferWithReference(address _to, uint _value, string _reference) internal returns(bool) {\r\n        return _getAsset().__transferWithReference(_to, _value, _reference, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Performs transfer call on the platform by the name of specified sender.\r\n     *\r\n     * Can only be called by asset implementation contract assigned to sender.\r\n     *\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a platform's Transfer event.\r\n     * @param _sender initial caller.\r\n     *\r\n     * @return success.\r\n     */\r\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) onlyAccess(_sender) returns(bool) {\r\n        return bmcPlatform.proxyTransferWithReference(_to, _value, smbl, _reference, _sender) == OK;\r\n    }\r\n\r\n    /**\r\n     * Prforms allowance transfer of asset balance between holders.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\r\n        if (_to != 0x0) {\r\n            return _getAsset().__transferFromWithReference(_from, _to, _value, \"\", msg.sender);\r\n         }\r\n         else {\r\n             return false;\r\n         }\r\n    }\r\n\r\n    /**\r\n     * Performs allowance transfer call on the platform by the name of specified sender.\r\n     *\r\n     * Can only be called by asset implementation contract assigned to sender.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a platform's Transfer event.\r\n     * @param _sender initial caller.\r\n     *\r\n     * @return success.\r\n     */\r\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyAccess(_sender) returns(bool) {\r\n        return bmcPlatform.proxyTransferFromWithReference(_from, _to, _value, smbl, _reference, _sender) == OK;\r\n    }\r\n\r\n    /**\r\n     * Sets asset spending allowance for a specified spender.\r\n     *\r\n     * @param _spender holder address to set allowance to.\r\n     * @param _value amount to allow.\r\n     *\r\n     * @return success.\r\n     */\r\n    function approve(address _spender, uint _value) returns(bool) {\r\n        if (_spender != 0x0) {\r\n             return _getAsset().__approve(_spender, _value, msg.sender);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs allowance setting call on the platform by the name of specified sender.\r\n     *\r\n     * Can only be called by asset implementation contract assigned to sender.\r\n     *\r\n     * @param _spender holder address to set allowance to.\r\n     * @param _value amount to allow.\r\n     * @param _sender initial caller.\r\n     *\r\n     * @return success.\r\n     */\r\n    function __approve(address _spender, uint _value, address _sender) onlyAccess(_sender) returns(bool) {\r\n        return bmcPlatform.proxyApprove(_spender, _value, smbl, _sender) == OK;\r\n    }\r\n\r\n    /**\r\n     * Emits ERC20 Transfer event on this contract.\r\n     *\r\n     * Can only be, and, called by assigned platform when asset transfer happens.\r\n     */\r\n    function emitTransfer(address _from, address _to, uint _value) onlyBMCPlatform() {\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Emits ERC20 Approval event on this contract.\r\n     *\r\n     * Can only be, and, called by assigned platform when asset allowance set happens.\r\n     */\r\n    function emitApprove(address _from, address _spender, uint _value) onlyBMCPlatform() {\r\n        Approval(_from, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * Resolves asset implementation contract for the caller and forwards there transaction data,\r\n     * along with the value. This allows for proxy interface growth.\r\n     */\r\n    function () payable {\r\n        _getAsset().__process.value(msg.value)(msg.data, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Indicates an upgrade freeze-time start, and the next asset implementation contract.\r\n     */\r\n    event UpgradeProposal(address newVersion);\r\n\r\n    // Current asset implementation contract address.\r\n    address latestVersion;\r\n\r\n    // Proposed next asset implementation contract address.\r\n    address pendingVersion;\r\n\r\n    // Upgrade freeze-time start.\r\n    uint pendingVersionTimestamp;\r\n\r\n    // Timespan for users to review the new implementation and make decision.\r\n    uint constant UPGRADE_FREEZE_TIME = 3 days;\r\n\r\n    // Asset implementation contract address that user decided to stick with.\r\n    // 0x0 means that user uses latest version.\r\n    mapping(address => address) userOptOutVersion;\r\n\r\n    /**\r\n     * Only asset implementation contract assigned to sender is allowed to call.\r\n     */\r\n    modifier onlyAccess(address _sender) {\r\n        if (getVersionFor(_sender) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns asset implementation contract address assigned to sender.\r\n     *\r\n     * @param _sender sender address.\r\n     *\r\n     * @return asset implementation contract address.\r\n     */\r\n    function getVersionFor(address _sender) constant returns(address) {\r\n        return userOptOutVersion[_sender] == 0 ? latestVersion : userOptOutVersion[_sender];\r\n    }\r\n\r\n    /**\r\n     * Returns current asset implementation contract address.\r\n     *\r\n     * @return asset implementation contract address.\r\n     */\r\n    function getLatestVersion() constant returns(address) {\r\n        return latestVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns proposed next asset implementation contract address.\r\n     *\r\n     * @return asset implementation contract address.\r\n     */\r\n    function getPendingVersion() constant returns(address) {\r\n        return pendingVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns upgrade freeze-time start.\r\n     *\r\n     * @return freeze-time start.\r\n     */\r\n    function getPendingVersionTimestamp() constant returns(uint) {\r\n        return pendingVersionTimestamp;\r\n    }\r\n\r\n    /**\r\n     * Propose next asset implementation contract address.\r\n     *\r\n     * Can only be called by current asset owner.\r\n     *\r\n     * Note: freeze-time should not be applied for the initial setup.\r\n     *\r\n     * @param _newVersion asset implementation contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function proposeUpgrade(address _newVersion) onlyAssetOwner() returns(bool) {\r\n        // Should not already be in the upgrading process.\r\n        if (pendingVersion != 0x0) {\r\n            return false;\r\n        }\r\n        // New version address should be other than 0x0.\r\n        if (_newVersion == 0x0) {\r\n            return false;\r\n        }\r\n        // Don't apply freeze-time for the initial setup.\r\n        if (latestVersion == 0x0) {\r\n            latestVersion = _newVersion;\r\n            return true;\r\n        }\r\n        pendingVersion = _newVersion;\r\n        pendingVersionTimestamp = now;\r\n        UpgradeProposal(_newVersion);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Cancel the pending upgrade process.\r\n     *\r\n     * Can only be called by current asset owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function purgeUpgrade() onlyAssetOwner() returns(bool) {\r\n        if (pendingVersion == 0x0) {\r\n            return false;\r\n        }\r\n        delete pendingVersion;\r\n        delete pendingVersionTimestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finalize an upgrade process setting new asset implementation contract address.\r\n     *\r\n     * Can only be called after an upgrade freeze-time.\r\n     *\r\n     * @return success.\r\n     */\r\n    function commitUpgrade() returns(bool) {\r\n        if (pendingVersion == 0x0) {\r\n            return false;\r\n        }\r\n        if (pendingVersionTimestamp + UPGRADE_FREEZE_TIME > now) {\r\n            return false;\r\n        }\r\n        latestVersion = pendingVersion;\r\n        delete pendingVersion;\r\n        delete pendingVersionTimestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disagree with proposed upgrade, and stick with current asset implementation\r\n     * until further explicit agreement to upgrade.\r\n     *\r\n     * @return success.\r\n     */\r\n    function optOut() returns(bool) {\r\n        if (userOptOutVersion[msg.sender] != 0x0) {\r\n            return false;\r\n        }\r\n        userOptOutVersion[msg.sender] = latestVersion;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Implicitly agree to upgrade to current and future asset implementation upgrades,\r\n     * until further explicit disagreement.\r\n     *\r\n     * @return success.\r\n     */\r\n    function optIn() returns(bool) {\r\n        delete userOptOutVersion[msg.sender];\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bmcPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purgeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bmcPlatform\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"smbl\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getVersionFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"UpgradeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "BMCAssetProxy", "CompilerVersion": "v0.4.15+commit.bbb8e64f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://96e8503227963f665ff5657bef2f0c19059b97428546c5fa910cf9fc0b6fcab5"}