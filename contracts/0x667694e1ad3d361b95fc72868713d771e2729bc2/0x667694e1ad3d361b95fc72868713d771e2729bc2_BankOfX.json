{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity 0.8.13;\r\n\r\n/*                                     \r\n                                                                                                                 ,&@@@(                  \r\n                                                                                                           %@@@@%                           \r\n     .@@@@@@@@@@@@@@@@@(          @@.           @@@         @@@   #@@@         %@     *@@@@@@         %@@@@@                                  \r\n     @@@@           @@@@          @@@@          @@@@@@/    @@@@   #@@@     @@@@&          %@@@@ .@@@@@@                                       \r\n     @@@@ .@@@@@@@@@@@@@            @@@@        @@@( @@@@@ @@@@   #@@@@@@@@*                @@@@@@& /                                         \r\n     @@@@           @@@@    @@@@@@@@@@@@@@      @@@/    &@@@@@@   %@@@    @@@@@@.       *@@@@@@   @@@@@@*                                     \r\n     @@@@@@@@@@@@@@@@@@                .@@@@    @@@*        @@@   %@@@          @@   *@@@@@@          @@@@@@.\r\n\r\n\r\nbankofx.xyz\r\n*/\r\n                                \r\n\r\n/**\r\n * Standard SafeMath, stripped down to just add/sub/mul/div\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * ERC20 standard interface.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract deployer\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!Owner\"); _;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be deployer. Leaves old deployer authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setRewardToken(address newRewardToken) external;\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit(uint256 amount) external;\r\n    function claimDividend(address shareholder) external;\r\n    function getDividendsClaimedOf (address shareholder) external returns (uint256);\r\n    function process(uint256 gas) external;\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address public _token;\r\n    address public _owner;\r\n\r\n    address public RewardToken;\r\n\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalClaimed;\r\n    }\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalClaimed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 private dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod;\r\n    uint256 public minDistribution;\r\n\r\n    uint256 currentIndex;\r\n    bool initialized;\r\n\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner); _;\r\n    }\r\n\r\n    constructor (address owner) {\r\n        _token = msg.sender;\r\n        _owner = owner;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function setRewardToken(address newRewardToken) external override onlyToken {\r\n        RewardToken = newRewardToken;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external override onlyToken {\r\n        minPeriod = newMinPeriod;\r\n        minDistribution = newMinDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit(uint256 amount) external override onlyToken {\r\n        \r\n        if (amount > 0) {        \r\n            totalDividends = totalDividends.add(amount);\r\n            dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 iterations = 0;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n\r\n            if(currentIndex >= shareholderCount){ currentIndex = 0; }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n        \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getClaimableDividendOf(shareholder);\r\n        if(amount > 0){\r\n            totalClaimed = totalClaimed.add(amount);\r\n            shares[shareholder].totalClaimed = shares[shareholder].totalClaimed.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            IERC20(RewardToken).transfer(shareholder, amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external override onlyToken {\r\n        distributeDividend(shareholder);\r\n    }\r\n\r\n    function getClaimableDividendOf(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function manualSend(uint256 amount, address holder) external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(holder).transfer(amount > 0 ? amount : contractETHBalance);\r\n    }\r\n\r\n\r\n    function getDividendsClaimedOf (address shareholder) external view returns (uint256) {\r\n        require (shares[shareholder].amount > 0, \"You're not a BANKX shareholder!\");\r\n        return shares[shareholder].totalClaimed;\r\n    }\r\n}\r\n\r\ncontract BankOfX is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address public RewardToken;\r\n\r\n    string private constant _name = \"BANK OF X\";\r\n    string private constant _symbol = \"BANKX\";\r\n    uint8 private constant _decimals = 9;\r\n    \r\n    uint256 private _totalSupply = 10000000 * (10 ** _decimals);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => uint256) private cooldown;\r\n\r\n    address private WETH;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public antiBot = true;\r\n\r\n    mapping (address => bool) private bots; \r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n\r\n    uint256 public launchedAt;\r\n\r\n    uint256 public devFeeBuy = 10;\r\n    uint256 public rewardFeeBuy = 40;\r\n    uint256 public lpFeeBuy = 20;\r\n    uint256 public marketingFeeBuy = 30;\r\n\r\n\r\n    uint256 public rewardFeeSell = 40;\r\n    uint256 public lpFeeSell = 20;\r\n    uint256 public marketingFeeSell = 30;\r\n    uint256 public devFeeSell = 10;\r\n    \r\n    uint public feeDenominator = 1000;\r\n\r\n    uint256 public totalFeeBuy = devFeeBuy.add(lpFeeBuy).add(rewardFeeBuy).add(marketingFeeBuy);\r\n    uint256 public totalFeeSell = devFeeSell.add(lpFeeSell).add(rewardFeeSell).add(marketingFeeSell); \r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    DividendDistributor public distributor;\r\n    uint256 public distributorGas = 0;\r\n\r\n    address payable public marketingWallet = payable(0xcB08Bc1287aCc495DFC981dD2F24e255B8E0b5bE);\r\n    address payable public devWallet = payable(0xDebe14e19a1D351654e7916a3Cf7ced0ffFFFAb8);\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingActive = false;  \r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    uint256 public maxTx = _totalSupply.div(200);\r\n    uint256 public maxWallet = _totalSupply.div(50);\r\n    uint256 public swapThreshold = _totalSupply.div(250);\r\n\r\n    constructor (\r\n        address _owner        \r\n    ) Auth(_owner) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            \r\n        WETH = router.WETH();\r\n        \r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        distributor = new DividendDistributor(_owner);\r\n        \r\n        isFeeExempt[_owner] = true;\r\n        isFeeExempt[marketingWallet] = true;             \r\n        isFeeExempt[devWallet] = true;\r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;    \r\n\r\n\r\n        isTxLimitExempt[_owner] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[DEAD] = true;    \r\n\r\n\r\n        _balances[_owner] = _totalSupply;\r\n    \r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function _updateRewardToken(address newRewardToken) internal {\r\n        distributor.setRewardToken(newRewardToken);\r\n    }\r\n\r\n    function updateRewardToken(address newRewardToken) external onlyOwner {\r\n        RewardToken = newRewardToken;\r\n        _updateRewardToken(newRewardToken);\r\n    }\r\n\r\n    function changeDistributor(DividendDistributor newDistributor) external onlyOwner {\r\n        distributor = newDistributor;\r\n    }\r\n\r\n    function changeFees(uint256 newDevFeeBuy, uint256 newDevFeeSell, uint256 newRewardFeeBuy, uint256 newRewardFeeSell, uint256 newLpFeeBuy, uint256 newLpFeeSell,\r\n        uint256 newMarketingFeeBuy, uint256 newMarketingFeeSell) external onlyOwner {\r\n\r\n        rewardFeeBuy = newRewardFeeBuy;\r\n        lpFeeBuy = newLpFeeBuy;\r\n        marketingFeeBuy = newMarketingFeeBuy;\r\n        devFeeBuy = newDevFeeBuy;\r\n\r\n        rewardFeeSell = newRewardFeeSell;\r\n        lpFeeSell = newLpFeeSell;\r\n        marketingFeeSell = newMarketingFeeSell;\r\n        devFeeSell = newDevFeeSell;\r\n\r\n        totalFeeBuy = devFeeBuy.add(lpFeeBuy).add(rewardFeeBuy).add(marketingFeeBuy);\r\n        totalFeeSell = devFeeSell.add(lpFeeSell).add(rewardFeeSell).add(marketingFeeSell);\r\n\r\n        require(totalFeeBuy <= 10, \"don't be greedy dev\");\r\n        require(totalFeeSell <= 10, \"don't be greedy dev\");\r\n    } \r\n\r\n    function changeMaxTx(uint256 newMaxTx) external onlyOwner {\r\n        maxTx = newMaxTx;\r\n    }\r\n\r\n    function changeMaxWallet(uint256 newMaxWallet) external onlyOwner {\r\n        maxWallet  = newMaxWallet;\r\n    }\r\n\r\n    function removeLimits(bool) external onlyOwner {            \r\n        limitsInEffect = false;\r\n    }\r\n    \r\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function changeIsTxLimitExempt(address holder, bool exempt) external onlyOwner {      \r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setMarketingWallet(address payable newMarketingWallet) external onlyOwner {\r\n        marketingWallet = payable(newMarketingWallet);\r\n    }\r\n\r\n    function setDevWallet(address payable newDevWallet) external onlyOwner {\r\n        devWallet = payable(newDevWallet);\r\n    }\r\n\r\n    function setOwnerWallet(address payable newOwnerWallet) external onlyOwner {\r\n        owner = newOwnerWallet;\r\n    }     \r\n\r\n    function changeSwapBackSettings(bool enableSwapBack, uint256 newSwapBackLimit) external onlyOwner {\r\n        swapAndLiquifyEnabled  = enableSwapBack;\r\n        swapThreshold = newSwapBackLimit;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external onlyOwner {\r\n        distributor.setDistributionCriteria(newMinPeriod, newMinDistribution);        \r\n    }\r\n\r\n    function setBots(address[] memory bots_) external onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function delBot(address notbot) external onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function _setIsDividendExempt(address holder, bool exempt) internal {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        _setIsDividendExempt(holder, exempt);\r\n    }\r\n\r\n    function changeDistributorGas(uint256 _distributorGas) external onlyOwner {\r\n        distributorGas = _distributorGas;\r\n    }           \r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (sender!= owner && recipient!= owner) require(tradingActive, \"Trading not yet active.\"); //transfers disabled before tradingActive\r\n        require(!bots[sender] && !bots[recipient]);\r\n\r\n        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        require(amount <= maxTx || isTxLimitExempt[sender], \"tx\");\r\n\r\n        if(!isTxLimitExempt[recipient] && antiBot)\r\n        {\r\n            require(_balances[recipient].add(amount) <= maxWallet, \"wallet\");\r\n        }\r\n\r\n        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        \r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        // Dividend tracker\r\n        if(!isDividendExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n\r\n        if(!isDividendExempt[recipient]) {\r\n            try distributor.setShare(recipient, _balances[recipient]) {} catch {} \r\n        }\r\n\r\n        if (distributorGas > 0) {\r\n            try distributor.process(distributorGas) {} catch {}\r\n        }\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }    \r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }  \r\n    \r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 feeApplicable = pair == recipient ? totalFeeSell : totalFeeBuy;\r\n        uint256 feeAmount = amount.mul(feeApplicable).div(feeDenominator);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n        \r\n        uint256 numTokensToSwap = _balances[address(this)];\r\n        uint256 amountForLp = numTokensToSwap.mul(lpFeeSell).div(totalFeeSell).div(2);\r\n        uint256 amountForRewardToken = numTokensToSwap.mul(rewardFeeSell).div(totalFeeSell);\r\n        uint256 amountToSwapForEth = numTokensToSwap.sub(amountForLp).sub(amountForRewardToken);\r\n\r\n        swapTokensForEth(amountToSwapForEth);\r\n\r\n        if (address(RewardToken) == address(this)) {\r\n            IERC20(RewardToken).transfer(address(distributor), amountForRewardToken);\r\n            distributor.deposit(amountForRewardToken);\r\n        }\r\n\r\n        if (address(RewardToken) != address(this)) {\r\n            swapTokensForRewardToken(amountForRewardToken);\r\n        }\r\n\r\n    }\r\n\r\n    function swapTokensForRewardToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        path[2] = RewardToken;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 dividends = IERC20(RewardToken).balanceOf(address(this));\r\n\r\n        bool success = IERC20(RewardToken).transfer(address(distributor), dividends);\r\n\r\n        if (success) {\r\n            distributor.deposit(dividends);            \r\n        }     \r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance;\r\n        uint256 marketingBalance = amountETH.mul(marketingFeeSell).div(totalFeeSell);\r\n        uint256 devBalance = amountETH.mul(devFeeSell).div(totalFeeSell);\r\n\r\n        uint256 amountEthLiquidity = amountETH.mul(lpFeeSell).div(totalFeeSell).div(2);\r\n\r\n        if(amountETH > 0){          \r\n            payable(devWallet).transfer(devBalance); \r\n            payable(marketingWallet).transfer(marketingBalance);\r\n        }        \r\n\r\n        if(amountEthLiquidity > 0){\r\n            router.addLiquidityETH{value: amountEthLiquidity}(\r\n                address(this),\r\n                amountEthLiquidity,\r\n                0,\r\n                0,\r\n                0x000000000000000000000000000000000000dEaD,\r\n                block.timestamp\r\n            );\r\n        }      \r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        swapBack();\r\n    }\r\n\r\n    function manualSendEth() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        uint256 marketingBalanceETH = contractETHBalance.mul(marketingFeeSell).div(totalFeeSell);\r\n        uint256 devBalanceETH = contractETHBalance.mul(devFeeSell).div(totalFeeSell);\r\n        if(contractETHBalance > 0){          \r\n            payable(devWallet).transfer(devBalanceETH); \r\n            payable(marketingWallet).transfer(marketingBalanceETH);\r\n        }\r\n    }\r\n\r\n    //once enabled, cannot be reversed\r\n    function openTrading() external onlyOwner {\r\n        launchedAt = block.number;\r\n        tradingActive = true;\r\n    }      \r\n\r\n    //dividend functions\r\n    function claimDividend() external {\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n    \r\n    function claimDividend(address holder) external onlyOwner {\r\n        distributor.claimDividend(holder);\r\n    }\r\n    \r\n    function getClaimableDividendOf(address shareholder) public view returns (uint256) {\r\n        return distributor.getClaimableDividendOf(shareholder);\r\n    }\r\n\r\n    function getTotalDividends() external view returns (uint256) {\r\n        return distributor.totalDividends();\r\n    }    \r\n\r\n    function getTotalClaimed() external view returns (uint256) {\r\n        return distributor.totalClaimed();\r\n    }\r\n\r\n    function getDividendsClaimedOf (address shareholder) external view returns (uint256) {\r\n        return distributor.getDividendsClaimedOf(shareholder);\r\n    }\r\n\r\n    function manualProcessGas(uint256 manualGas) external onlyOwner {\r\n        distributor.process(manualGas);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"changeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGas\",\"type\":\"uint256\"}],\"name\":\"changeDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDevFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDevFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFeeSell\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTx\",\"type\":\"uint256\"}],\"name\":\"changeMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"changeMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getClaimableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getDividendsClaimedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"manualGas\",\"type\":\"uint256\"}],\"name\":\"manualProcessGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSendEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"setOwnerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BankOfX", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c103bbeefdbdabca0583f32da95c927ca51a239d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://21b6f87c8d82e148b0adcb217802c96510775f99ff6978304922d21c87176966"}