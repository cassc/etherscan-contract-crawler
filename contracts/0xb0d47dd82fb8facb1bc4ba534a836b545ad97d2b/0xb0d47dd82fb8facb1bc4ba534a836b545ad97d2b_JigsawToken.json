{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\texternal\r\n\treturns (bool);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\ninterface IFactory {\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns (address pair);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns (\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary IterableMapping {\r\n\tstruct Map {\r\n\t\taddress[] keys;\r\n\t\tmapping(address => uint) values;\r\n\t\tmapping(address => uint) indexOf;\r\n\t\tmapping(address => bool) inserted;\r\n\t}\r\n\r\n\tfunction get(Map storage map, address key) public view returns (uint) {\r\n\t\treturn map.values[key];\r\n\t}\r\n\r\n\tfunction getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n\t\tif(!map.inserted[key]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn int(map.indexOf[key]);\r\n\t}\r\n\r\n\tfunction getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n\t\treturn map.keys[index];\r\n\t}\r\n\r\n\tfunction size(Map storage map) public view returns (uint) {\r\n\t\treturn map.keys.length;\r\n\t}\r\n\r\n\tfunction set(Map storage map, address key, uint val) public {\r\n\t\tif (map.inserted[key]) {\r\n\t\t\tmap.values[key] = val;\r\n\t\t} else {\r\n\t\t\tmap.inserted[key] = true;\r\n\t\t\tmap.values[key] = val;\r\n\t\t\tmap.indexOf[key] = map.keys.length;\r\n\t\t\tmap.keys.push(key);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction remove(Map storage map, address key) public {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete map.inserted[key];\r\n\t\tdelete map.values[key];\r\n\r\n\t\tuint index = map.indexOf[key];\r\n\t\tuint lastIndex = map.keys.length - 1;\r\n\t\taddress lastKey = map.keys[lastIndex];\r\n\r\n\t\tmap.indexOf[lastKey] = index;\r\n\t\tdelete map.indexOf[key];\r\n\r\n\t\tmap.keys[index] = lastKey;\r\n\t\tmap.keys.pop();\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ncontract JigsawToken is ERC20, Ownable {\r\n\tusing IterableMapping for IterableMapping.Map;\r\n\r\n\tIRouter public uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n\r\n\tstring private constant _name = \"JigsawToken\";\r\n\tstring private constant _symbol = \"JIGSAW\";\r\n\tuint8 private constant _decimals = 18;\r\n\r\n\tbool public isTradingEnabled;\r\n\tuint256 private _tradingPausedTimestamp;\r\n\r\n\t// initialSupply\r\n\tuint256 constant initialSupply = 1000000000 * (10**18);\r\n\r\n\t// max wallet is 2.0% of initialSupply\r\n\tuint256 public maxWalletAmount = initialSupply * 200 / 10000;\r\n\r\n\tbool private _swapping;\r\n\tuint256 public minimumTokensBeforeSwap = 25000000 * (10**18);\r\n\r\n    address public liquidityWallet;\r\n\taddress public operationsWallet;\r\n\taddress public jigsawWallet;\r\n\r\n\tstruct CustomTaxPeriod {\r\n\t\tbytes23 periodName;\r\n\t\tuint8 blocksInPeriod;\r\n\t\tuint256 timeInPeriod;\r\n\t\tuint8 liquidityFeeOnBuy;\r\n\t\tuint8 liquidityFeeOnSell;\r\n\t\tuint8 operationsFeeOnBuy;\r\n\t\tuint8 operationsFeeOnSell;\r\n\t\tuint8 jigsawFeeOnBuy;\r\n\t\tuint8 jigsawFeeOnSell;\r\n\t}\r\n\r\n\tCustomTaxPeriod private _base = CustomTaxPeriod('base',0,0,1,1,2,2,3,3);\r\n\r\n    uint256 private _launchStartTimestamp;\r\n    uint256 private _launchBlockNumber;\r\n\tuint256 private constant _blockedTimeLimit = 172800;\r\n\tmapping (address => bool) private _isAllowedToTradeWhenDisabled;\r\n\tmapping (address => bool) private _feeOnSelectedWalletTransfers;\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n\tmapping (address => bool) private _isBlocked;\r\n\tmapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n\tuint8 private _liquidityFee;\r\n\tuint8 private _operationsFee;\r\n\tuint8 private _jigsawFee;\r\n\tuint8 private _totalFee;\r\n\r\n\tevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n\tevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent WalletChange(string indexed walletIdentifier, address indexed newWallet, address indexed oldWallet);\r\n\tevent FeeChange(string indexed identifier, uint8 liquidityFee, uint8 operationsFee, uint8 jigsawFee);\r\n\tevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\n\tevent BlockedAccountChange(address indexed holder, bool indexed status);\r\n    event AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\n\tevent MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n\tevent FeeOnSelectedWalletTransfersChange(address indexed account, bool newValue);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n    event ClaimETHOverflow(uint256 amount);\r\n\tevent FeesApplied(uint8 liquidityFee, uint8 operationsFee, uint8 jigsawFee, uint8 totalFee);\r\n\r\n\tconstructor() ERC20(_name, _symbol) {\r\n        liquidityWallet = owner();\r\n        operationsWallet = owner();\r\n\t    jigsawWallet = owner();\r\n\r\n\t\tIRouter _uniswapV2Router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\t\taddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\r\n        _isAllowedToTradeWhenDisabled[owner()] = true;\r\n        _isAllowedToTradeWhenDisabled[address(this)] = true;\r\n\r\n\t\t_isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n\t\t_mint(owner(), initialSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t// Setters\r\n\tfunction activateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = true;\r\n        if (_launchStartTimestamp == 0) {\r\n            _launchStartTimestamp = block.timestamp;\r\n            _launchBlockNumber = block.number;\r\n        }\r\n\t}\r\n\tfunction deactivateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = false;\r\n\t}\r\n\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Jigsaw: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit AutomatedMarketMakerPairChange(pair, value);\r\n    }\r\n    function allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n\t\t_isAllowedToTradeWhenDisabled[account] = allowed;\r\n\t\temit AllowedWhenTradingDisabledChange(account, allowed);\r\n\t}\r\n\tfunction excludeFromFees(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromFee[account] != excluded, \"Jigsaw: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromFee[account] = excluded;\r\n\t\temit ExcludeFromFeesChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxWalletLimit[account] != excluded, \"Jigsaw: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxWalletLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxWalletChange(account, excluded);\r\n\t}\r\n\tfunction blockAccount(address account) external onlyOwner {\r\n\t\trequire(!_isBlocked[account], \"Jigsaw: Account is already blocked\");\r\n\t\trequire((block.timestamp - _launchStartTimestamp) < _blockedTimeLimit, \"Jigsaw: Time to block accounts has expired\");\r\n\t\t_isBlocked[account] = true;\r\n\t\temit BlockedAccountChange(account, true);\r\n\t}\r\n\tfunction unblockAccount(address account) external onlyOwner {\r\n\t\trequire(_isBlocked[account], \"Jigsaw: Account is not blcoked\");\r\n\t\t_isBlocked[account] = false;\r\n\t\temit BlockedAccountChange(account, false);\r\n\t}\r\n\tfunction setWallets(address newLiquidityWallet, address newOperationsWallet, address newJigsawWallet) external onlyOwner {\r\n\t\tif(liquidityWallet != newLiquidityWallet) {\r\n\t\t\trequire(newLiquidityWallet != address(0), \"Jigsaw: The liquidityWallet cannot be 0\");\r\n\t\t\temit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\n\t\t\tliquidityWallet = newLiquidityWallet;\r\n\t\t}\r\n\t\tif(operationsWallet != newOperationsWallet) {\r\n\t\t\trequire(newOperationsWallet != address(0), \"Jigsaw: The operationsWallet cannot be 0\");\r\n\t\t\temit WalletChange('operationsWallet', newOperationsWallet, operationsWallet);\r\n\t\t\toperationsWallet = newOperationsWallet;\r\n\t\t}\r\n\t\tif(jigsawWallet != newJigsawWallet) {\r\n\t\t\trequire(newJigsawWallet != address(0), \"Jigsaw: The jigsawWallet cannot be 0\");\r\n\t\t\temit WalletChange('jigsawWallet', newJigsawWallet, jigsawWallet);\r\n\t\t\tjigsawWallet = newJigsawWallet;\r\n\t\t}\r\n\t}\r\n\tfunction setFeeOnSelectedWalletTransfers(address account, bool value) external onlyOwner {\r\n\t\trequire(_feeOnSelectedWalletTransfers[account] != value, \"Jigsaw: The selected wallet is already set to the value \");\r\n\t\t_feeOnSelectedWalletTransfers[account] = value;\r\n\t\temit FeeOnSelectedWalletTransfersChange(account, value);\r\n\t}\r\n\t// Base Fees\r\n\tfunction setBaseFeesOnBuy(uint8 _liquidityFeeOnBuy, uint8 _operationsFeeOnBuy, uint8 _jigsawFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _operationsFeeOnBuy, _jigsawFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _operationsFeeOnBuy, _jigsawFeeOnBuy);\r\n\t}\r\n\tfunction setBaseFeesOnSell(uint8 _liquidityFeeOnSell,uint8 _operationsFeeOnSell, uint8 _jigsawFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _operationsFeeOnSell, _jigsawFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _operationsFeeOnSell, _jigsawFeeOnSell);\r\n\t}\r\n\tfunction setUniswapRouter(address newAddress) external onlyOwner {\r\n\t\trequire(newAddress != address(uniswapV2Router), \"Jigsaw: The router already has that address\");\r\n\t\temit UniswapV2RouterChange(newAddress, address(uniswapV2Router));\r\n\t\tuniswapV2Router = IRouter(newAddress);\r\n\t}\r\n\tfunction setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxWalletAmount, \"Jigsaw: Cannot update maxWalletAmount to same value\");\r\n\t\temit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n\t\tmaxWalletAmount = newValue;\r\n\t}\r\n\tfunction setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != minimumTokensBeforeSwap, \"Jigsaw: Cannot update minimumTokensBeforeSwap to same value\");\r\n\t\temit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n\t\tminimumTokensBeforeSwap = newValue;\r\n\t}\r\n\tfunction claimETHOverflow() external onlyOwner {\r\n\t    uint256 amount = address(this).balance;\r\n        (bool success,) = address(owner()).call{value : amount}(\"\");\r\n        if (success){\r\n            emit ClaimETHOverflow(amount);\r\n        }\r\n\t}\r\n\r\n\t// Getters\r\n\tfunction getBaseBuyFees() external view returns (uint8, uint8, uint8){\r\n\t\treturn (_base.liquidityFeeOnBuy, _base.operationsFeeOnBuy, _base.jigsawFeeOnBuy);\r\n\t}\r\n\tfunction getBaseSellFees() external view returns (uint8, uint8, uint8){\r\n\t\treturn (_base.liquidityFeeOnSell, _base.operationsFeeOnSell, _base.jigsawFeeOnSell);\r\n\t}\r\n\tfunction getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\tfunction getTokenHolderAtIndex(uint256 accountIndex) external view returns(address) {\r\n\t\tif(accountIndex >= tokenHoldersMap.keys.length) {\r\n\t\t\taccountIndex = 0;\r\n\t\t}\r\n\t\taddress account = tokenHoldersMap.keys[accountIndex];\r\n        return account;\r\n    }\r\n\r\n\t// Main\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t\t) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        bool isBuyFromLp = automatedMarketMakerPairs[from];\r\n        bool isSelltoLp = automatedMarketMakerPairs[to];\r\n\r\n        if(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\n            require(isTradingEnabled, \"Jigsaw: Trading is currently disabled.\");\r\n            require(!_isBlocked[to], \"Jigsaw: Account is blocked\");\r\n            require(!_isBlocked[from], \"Jigsaw: Account is blocked\");\r\n            if (!_isExcludedFromMaxWalletLimit[to]) {\r\n                require((balanceOf(to) + amount) <= maxWalletAmount, \"Jigsaw: Expected wallet amount exceeds the maxWalletAmount.\");\r\n            }\r\n        }\r\n\r\n        _adjustTaxes(isBuyFromLp, isSelltoLp, to, from);\r\n        bool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n        if (\r\n            isTradingEnabled &&\r\n            canSwap &&\r\n            !_swapping &&\r\n            _totalFee > 0 &&\r\n            automatedMarketMakerPairs[to]\r\n        ) {\r\n            _swapping = true;\r\n            _swapAndLiquify();\r\n            _swapping = false;\r\n        }\r\n\r\n        bool takeFee = !_swapping && isTradingEnabled;\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        if (takeFee && _totalFee > 0) {\r\n            uint256 fee = amount * _totalFee / 100;\r\n            amount = amount - fee;\r\n            super._transfer(from, address(this), fee);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n\t\t_setBalance(from, balanceOf(from));\r\n        _setBalance(to, balanceOf(to));\r\n\t}\r\n\tfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp, address to, address from) private {\r\n\t\t_liquidityFee = 0;\r\n\t\t_operationsFee = 0;\r\n        _jigsawFee = 0;\r\n\r\n\t\tif (isBuyFromLp) {\r\n            if (block.number - _launchBlockNumber <= 5) {\r\n                _liquidityFee = 100;\r\n            }\r\n\t\t    else {\r\n                _liquidityFee = _base.liquidityFeeOnBuy;\r\n                _operationsFee = _base.operationsFeeOnBuy;\r\n                _jigsawFee = _base.jigsawFeeOnBuy;\r\n            }\r\n        }\r\n\t    if (isSelltoLp) {\r\n\t    \t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_operationsFee = _base.operationsFeeOnSell;\r\n            _jigsawFee = _base.jigsawFeeOnSell;\r\n\t\t}\r\n\t\tif (!isSelltoLp && !isBuyFromLp && (_feeOnSelectedWalletTransfers[from] || _feeOnSelectedWalletTransfers[to])) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_operationsFee = _base.operationsFeeOnSell;\r\n            _jigsawFee = _base.jigsawFeeOnSell;\r\n\t\t}\r\n\t\t_totalFee = _liquidityFee + _operationsFee + _jigsawFee;\r\n\t\temit FeesApplied(_liquidityFee, _operationsFee, _jigsawFee, _totalFee);\r\n\t}\r\n\tfunction _setBalance(address account, uint256 newBalance) private {\r\n        if(newBalance > 0) {\r\n            tokenHoldersMap.set(account, newBalance);\r\n        }\r\n        else {\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n    }\r\n\tfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint8 _liquidityFeeOnSell,\r\n\t\tuint8 _operationsFeeOnSell,\r\n        uint8 _jigsawFeeOnSell\r\n\t) private {\r\n\t\tif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\n\t\t\tmap.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n\t\t}\r\n\t\tif (map.operationsFeeOnSell != _operationsFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_operationsFeeOnSell, map.operationsFeeOnSell, 'operationsFeeOnSell', map.periodName);\r\n\t\t\tmap.operationsFeeOnSell = _operationsFeeOnSell;\r\n\t\t}\r\n        if (map.jigsawFeeOnSell != _jigsawFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_jigsawFeeOnSell, map.jigsawFeeOnSell, 'jigsawFeeOnSell', map.periodName);\r\n\t\t\tmap.jigsawFeeOnSell = _jigsawFeeOnSell;\r\n\t\t}\r\n\t}\r\n\tfunction _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint8 _liquidityFeeOnBuy,\r\n\t\tuint8 _operationsFeeOnBuy,\r\n        uint8 _jigsawFeeOnBuy\r\n\t\t) private {\r\n\t\tif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\n\t\t\tmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.operationsFeeOnBuy != _operationsFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_operationsFeeOnBuy, map.operationsFeeOnBuy, 'operationsFeeOnBuy', map.periodName);\r\n\t\t\tmap.operationsFeeOnBuy = _operationsFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.jigsawFeeOnBuy != _jigsawFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_jigsawFeeOnBuy, map.jigsawFeeOnBuy, 'jigsawFeeOnBuy', map.periodName);\r\n\t\t\tmap.jigsawFeeOnBuy = _jigsawFeeOnBuy;\r\n\t\t}\r\n\t}\r\n\tfunction _swapAndLiquify() private {\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tuint256 initialETHBalance = address(this).balance;\r\n\t\tuint8 totalFeePrior = _totalFee;\r\n\r\n\t\tuint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\r\n\t\tuint256 amountToSwap = contractBalance - (amountToLiquify);\r\n\r\n\t\t_swapTokensForETH(amountToSwap);\r\n\r\n\t\tuint256 ETHBalanceAfterSwap = address(this).balance - initialETHBalance;\r\n\t\tuint256 totalETHFee = _totalFee - (_liquidityFee / 2);\r\n\r\n\t\tuint256 amountETHLiquidity = ETHBalanceAfterSwap * _liquidityFee / totalETHFee / 2;\r\n\t\tuint256 amountETHOperations = ETHBalanceAfterSwap * _operationsFee / totalETHFee;\r\n\t\tuint256 amountETHJigsaw = ETHBalanceAfterSwap - (amountETHLiquidity + amountETHOperations);\r\n\r\n        payable(operationsWallet).transfer(amountETHOperations);\r\n        payable(jigsawWallet).transfer(amountETHJigsaw);\r\n\r\n        if (amountToLiquify > 0) {\r\n\t\t\t_addLiquidity(amountToLiquify, amountETHLiquidity);\r\n\t\t\temit SwapAndLiquify(amountToSwap, amountETHLiquidity, amountToLiquify);\r\n\t\t}\r\n\r\n\t\t_totalFee = totalFeePrior;\r\n\t}\r\n\tfunction _swapTokensForETH(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\tliquidityWallet,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimETHOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operationsFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"jigsawFee\",\"type\":\"uint8\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"FeeOnSelectedWalletTransfersChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"operationsFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"jigsawFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"totalFee\",\"type\":\"uint8\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"walletIdentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountIndex\",\"type\":\"uint256\"}],\"name\":\"getTokenHolderAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jigsawWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_operationsFeeOnBuy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_jigsawFeeOnBuy\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_operationsFeeOnSell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_jigsawFeeOnSell\",\"type\":\"uint8\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnSelectedWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOperationsWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newJigsawWallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JigsawToken", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:d1a7de14b92f3dc141b67d979af737f665692615", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11aa1d82accf924d995f301e3416d3906d4ea02265a5b4ecdc7279685f523694"}