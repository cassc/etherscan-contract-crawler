{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"StakingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// StakingManager \\npragma solidity 0.8.21;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"TransferHelper.sol\\\";\\nimport \\\"IDepositModel.sol\\\";\\nimport \\\"ISandbox1.sol\\\";\\n\\n\\ncontract StakingManager is  Ownable {\\n\\n    struct DepositModel {\\n        uint256 validAfter;\\n        uint256 notValidAfter;\\n        address modelAddress;\\n    }\\n\\n\\n    address public immutable stakedToken;\\n    address public immutable rewardMintAddress;\\n\\n    DepositModel[] public depositModels;\\n\\n\\n    mapping(address => Deposit[]) public deposits;\\n    event DepositModelChanged(address Model, uint256 ValidAfter, uint256 NotValidAfer);\\n    event DepositNew(address indexed User , uint256 indexed DepositIndex, uint256 DepositValue);\\n\\n    constructor(address _erc20, address _rewardMintAddress) {\\n        require(_erc20 != address(0), \\\"Cant be zero address\\\");\\n        stakedToken = _erc20;\\n        rewardMintAddress = _rewardMintAddress;\\n        \\n    }\\n\\n    function deposit(Deposit memory _newDeposit) external {\\n        require(_newDeposit.depositModelIndex < depositModels.length, \\\"Model with this index not exist yet\\\");\\n        require(depositModels[_newDeposit.depositModelIndex].validAfter <= block.timestamp, \\\"Model not valid yet\\\");\\n        require(depositModels[_newDeposit.depositModelIndex].notValidAfter >= block.timestamp, \\\"Model not valid already\\\");\\n        // Pre Check\\n        bool isOK;\\n        (isOK, _newDeposit) = IDepositModel(depositModels[_newDeposit.depositModelIndex].modelAddress).checkOpen(\\n            msg.sender, \\n            _newDeposit\\n        );\\n\\n        // Save stake(depost) info\\n        if (isOK){\\n            Deposit storage d = deposits[msg.sender].push(); \\n            _insertNewDepositInfo(d, _newDeposit);\\n            emit DepositNew(msg.sender,deposits[msg.sender].length - 1, d.body); \\n            // Receive funds\\n            TransferHelper.safeTransferFrom(stakedToken, msg.sender, address(this), _newDeposit.body);\\n        }      \\n    }\\n\\n    function addFundsToDeposit(uint256 _depositIndex, uint256 _addAmount) external {\\n        Deposit storage d = deposits[msg.sender][_depositIndex];\\n        _accrueInterests(d);\\n        d.body += _addAmount;\\n        // Receive funds\\n        TransferHelper.safeTransferFrom(stakedToken, msg.sender, address(this), _addAmount);\\n    }\\n\\n    function claimInterests(uint256 _depositIndex) external returns (uint256 claimedAmount) {\\n        Deposit storage d = deposits[msg.sender][_depositIndex];\\n        _accrueInterests(d);\\n        // amountParams[0] - is always interest that accrued but not payed yet\\n        claimedAmount = d.amountParams[0];\\n        d.amountParams[0] = 0;\\n        if (claimedAmount > 0) {\\n            TransferHelper.safeTransfer(stakedToken, msg.sender, claimedAmount);    \\n        }\\n    }\\n\\n    function withdraw(uint256 _depositIndex) external returns (uint256 withdrawAmount){\\n        Deposit storage d = deposits[msg.sender][_depositIndex];\\n        // accrue interests(with MINT!!!!) and pay all interest to body\\n        _accrueInterests(d);\\n        _payInterestToBody(d); \\n        withdrawAmount = d.body;\\n        //d.body = 0;\\n        _removeDepositRecord(_depositIndex);\\n        TransferHelper.safeTransfer(stakedToken, msg.sender, withdrawAmount);\\n    }\\n\\n    function withdrawEmergency(uint256 _depositIndex) external returns (uint256 withdrawAmount){\\n        Deposit storage d = deposits[msg.sender][_depositIndex];\\n        _payInterestToBody(d); \\n        withdrawAmount = d.body;\\n        //d.body = 0;\\n        _removeDepositRecord(_depositIndex);\\n        TransferHelper.safeTransfer(stakedToken, msg.sender, withdrawAmount);\\n    }\\n    ///////////////////////////////////////////////////////////\\n    ///////    Admin Functions        /////////////////////////\\n    ///////////////////////////////////////////////////////////\\n    function modelRegister(DepositModel calldata _newModel) external onlyOwner {\\n        require(_newModel.modelAddress != address(0), \\\"Cant be zero address\\\");\\n        require(depositModels.length < type(uint8).max, \\\"Too much models\\\");\\n        depositModels.push(_newModel);\\n        emit DepositModelChanged(_newModel.modelAddress, _newModel.validAfter, _newModel.notValidAfter);\\n    }\\n\\n    function editModelEndDate(uint256 _modelIndex, uint256 _notValidAfter) external onlyOwner {\\n        depositModels[_modelIndex].notValidAfter = _notValidAfter;\\n        emit DepositModelChanged(\\n            depositModels[_modelIndex].modelAddress, \\n            depositModels[_modelIndex].validAfter, \\n            _notValidAfter\\n        );  \\n    }\\n    ///////////////////////////////////////////////////////////\\n    function getUserDeposits(address _user) external view returns(Deposit[] memory) {\\n        return deposits[_user];\\n    }\\n\\n    function getUserDeposits2(address _user) external view returns(Deposit[] memory) {\\n        Deposit[] memory uds = new Deposit[](deposits[_user].length);\\n        for (uint256 i = 0; i < uds.length; ++ i) {\\n            uds[i] = deposits[_user][i];     \\n        }\\n        return uds;\\n    }\\n\\n    function getUserDepositsCount(address _user) external view returns(uint256) {\\n        return deposits[_user].length;\\n    }\\n\\n    function getUserDepositByIndex(address _user, uint256 _index) \\n        public \\n        view \\n        returns(Deposit memory) \\n    {\\n        return deposits[_user][_index];\\n    }\\n\\n    function getUserDepositByIndex2(address _user, uint256 _index) \\n        public \\n        view \\n        returns(DepositInfo memory, uint256[] memory, address[] memory) \\n    {\\n        Deposit memory d =  deposits[_user][_index];\\n        DepositInfo memory di;\\n        di.startDate = d.startDate;\\n        di.body = d.body;\\n        di.depositModelIndex = d.depositModelIndex;\\n\\n        uint256[] memory amts = new uint256[](d.amountParams.length);\\n        address[] memory adrs = new address[](d.addressParams.length);\\n        for(uint256 i = 0; i < amts.length; ++ i){\\n            amts[i] = d.amountParams[i];\\n        }\\n        for(uint256 i = 0; i < adrs.length; ++ i){\\n            adrs[i] = d.addressParams[i];\\n        }\\n        return(di, amts, adrs);\\n    }\\n\\n\\n    function calcInterests(Deposit memory _deposit, uint256 _monthCount) \\n        external \\n        view\\n        returns(Deposit memory _newValues, uint256 increment)\\n    {\\n        (_newValues, increment) = IDepositModel(depositModels[_deposit.depositModelIndex].modelAddress)\\n            .calcInterests(_deposit, _monthCount);\\n    }\\n\\n    function _accrueInterests(Deposit storage _deposit) \\n        internal \\n        returns(Deposit memory _newValues, uint256 increment)\\n    {\\n        (_newValues, increment) = IDepositModel(depositModels[_deposit.depositModelIndex].modelAddress)\\n            .accrueInterests(_deposit);\\n        _updateDepositInfo(_deposit, _newValues); \\n        ISandbox1(rewardMintAddress).mintReward(address(this), increment);   \\n    }\\n\\n    function _payInterestToBody(Deposit storage _deposit) internal returns(Deposit memory _newValues){\\n        _newValues = IDepositModel(depositModels[_deposit.depositModelIndex].modelAddress)\\n            .payInterestsToBody(_deposit);\\n        _updateDepositInfo(_deposit, _newValues);\\n\\n    }\\n\\n    function _insertNewDepositInfo(Deposit storage _deposit, Deposit memory _newValues) \\n        internal \\n        returns(Deposit memory)\\n    {\\n        _deposit.body = _newValues.body;\\n        _deposit.startDate = _newValues.startDate;\\n        _deposit.depositModelIndex = _newValues.depositModelIndex;\\n        for (uint256 i = 0; i < _newValues.amountParams.length; ++ i){\\n            _deposit.amountParams.push(_newValues.amountParams[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _newValues.addressParams.length; ++ i){\\n            _deposit.addressParams.push(_newValues.addressParams[i]);\\n        } \\n        \\n    }\\n\\n    function _updateDepositInfo(Deposit storage _deposit, Deposit memory _newValues) \\n        internal \\n        returns(Deposit memory)\\n    {\\n        _deposit.body = _newValues.body;\\n        //_deposit.startDate = _newValues.startDate;\\n        //_deposit.depositModelIndex = _newValues.depositModelIndex\\n        for (uint256 i = 0; i < _newValues.amountParams.length; ++ i){\\n            _deposit.amountParams[i] =_newValues.amountParams[i];\\n        }\\n\\n        for (uint256 i = 0; i < _newValues.addressParams.length; ++ i){\\n            _deposit.addressParams[i] = _newValues.addressParams[i];\\n        } \\n        \\n    }\\n\\n    function _removeDepositRecord(uint256 _depositIndex) \\n        internal \\n    {\\n        Deposit[] storage userDeposits = deposits[msg.sender];\\n        if (_depositIndex != userDeposits.length -1) {\\n            userDeposits[_depositIndex] = userDeposits[userDeposits.length -1];\\n        }\\n        userDeposits.pop();\\n    }\\n\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IDepositModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n\\nstruct Deposit {\\n    uint256 startDate;\\n    uint256 body;\\n    uint256[] amountParams;\\n    address[] addressParams;\\n    uint8 depositModelIndex;\\n}\\n\\nstruct DepositInfo {\\n    uint256 startDate;\\n    uint256 body;\\n    uint8 depositModelIndex;\\n}\\n\\ninterface IDepositModel  {\\n\\n    event InterestsAccrued(\\n        uint256 indexed MonthNumber, \\n        uint256 Rate, \\n        uint256 BodyForCalc,  \\n        uint256 Interests\\n    );\\n    function checkOpen(address _user, Deposit memory _deposit) \\n        external \\n        view returns(bool ok, Deposit memory depositData);\\n\\n    function accrueInterests(Deposit memory _deposit) \\n        external \\n        returns(Deposit memory, uint256 increment);\\n        \\n    function payInterestsToBody(Deposit memory _deposit) \\n        external \\n        returns(Deposit memory);\\n\\n    function getRateForPeriodAndAmount(uint256 _amount, uint256 _currMonth) \\n        external \\n        view \\n        returns(uint256);\\n\\n    function calcInterests(Deposit memory _deposit, uint256 _monthCount) \\n        external \\n        view\\n        returns(Deposit memory, uint256 increment);\\n}\"\r\n    },\r\n    \"ISandbox1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n\\ninterface ISandbox1  {\\n    function EXCHANGE_BASE_ASSET() external view returns (address);\\n    function TREASURY_TOPUP_PERCENT() external view returns (uint256);\\n    function mintReward(address _for, uint256 _amount) external;\\n    function ubdTokenAddress() external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"StakingManager.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardMintAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Model\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ValidAfter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NotValidAfer\",\"type\":\"uint256\"}],\"name\":\"DepositModelChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"DepositIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DepositValue\",\"type\":\"uint256\"}],\"name\":\"DepositNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_addAmount\",\"type\":\"uint256\"}],\"name\":\"addFundsToDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct Deposit\",\"name\":\"_deposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_monthCount\",\"type\":\"uint256\"}],\"name\":\"calcInterests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct Deposit\",\"name\":\"_newValues\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositIndex\",\"type\":\"uint256\"}],\"name\":\"claimInterests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct Deposit\",\"name\":\"_newDeposit\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositModels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notValidAfter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"modelAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_modelIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_notValidAfter\",\"type\":\"uint256\"}],\"name\":\"editModelEndDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositByIndex2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct DepositInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDeposits2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"body\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"depositModelIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notValidAfter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"modelAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingManager.DepositModel\",\"name\":\"_newModel\",\"type\":\"tuple\"}],\"name\":\"modelRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawEmergency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingManager", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000008a0356df4f4052acce757faaccec35b621bbdd20000000000000000000000005ee5c97a594cb4a922b9c0d259bee7fe0622afaa", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}