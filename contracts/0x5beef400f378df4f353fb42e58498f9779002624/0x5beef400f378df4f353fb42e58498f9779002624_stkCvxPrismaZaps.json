{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"StrategyZaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"ERC20.sol\\\";\\nimport \\\"StrategyBase.sol\\\";\\nimport \\\"IGenericVault.sol\\\";\\nimport \\\"IUniV2Router.sol\\\";\\nimport \\\"ICurveTriCrypto.sol\\\";\\nimport \\\"ICVXLocker.sol\\\";\\n\\ncontract stkCvxPrismaZaps is Ownable, stkCvxPrismaStrategyBase {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable vault;\\n\\n    address private constant CONVEX_LOCKER =\\n        0x72a19342e8F1838460eBFCCEf09F6585e32db86E;\\n    address private constant TRICRYPTO =\\n        0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\\n    address public constant WETH_TOKEN =\\n        0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant USDT_TOKEN =\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public constant UNISWAP_ROUTER =\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    ICurveTriCrypto triCryptoSwap = ICurveTriCrypto(TRICRYPTO);\\n    ICVXLocker locker = ICVXLocker(CONVEX_LOCKER);\\n\\n    constructor(address _vault) {\\n        vault = _vault;\\n    }\\n\\n    /// @notice Set approvals for the contracts used when swapping & staking\\n    function setApprovals() external {\\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, 0);\\n        IERC20(CVX_TOKEN).safeApprove(CURVE_CVX_ETH_POOL, type(uint256).max);\\n\\n        IERC20(PRISMA_TOKEN).safeApprove(CURVE_CVXPRISMA_PRISMA_POOL, 0);\\n        IERC20(PRISMA_TOKEN).safeApprove(\\n            CURVE_CVXPRISMA_PRISMA_POOL,\\n            type(uint256).max\\n        );\\n\\n        IERC20(PRISMA_TOKEN).safeApprove(CURVE_PRISMA_ETH_POOL, 0);\\n        IERC20(PRISMA_TOKEN).safeApprove(\\n            CURVE_PRISMA_ETH_POOL,\\n            type(uint256).max\\n        );\\n\\n        IERC20(PRISMA_TOKEN).safeApprove(PRISMA_DEPOSIT, 0);\\n        IERC20(PRISMA_TOKEN).safeApprove(PRISMA_DEPOSIT, type(uint256).max);\\n\\n        IERC20(CVXPRISMA_TOKEN).safeApprove(CURVE_CVXPRISMA_PRISMA_POOL, 0);\\n        IERC20(CVXPRISMA_TOKEN).safeApprove(\\n            CURVE_CVXPRISMA_PRISMA_POOL,\\n            type(uint256).max\\n        );\\n\\n        IERC20(CVXPRISMA_TOKEN).safeApprove(vault, 0);\\n        IERC20(CVXPRISMA_TOKEN).safeApprove(vault, type(uint256).max);\\n\\n        IERC20(CVX_TOKEN).safeApprove(CONVEX_LOCKER, 0);\\n        IERC20(CVX_TOKEN).safeApprove(CONVEX_LOCKER, type(uint256).max);\\n    }\\n\\n    /// @notice Deposit from FXS\\n    /// @param amount - the amount of FXS to deposit\\n    /// @param minAmountOut - min amount of cvxFXS tokens expected\\n    /// @param to - address to stake on behalf of\\n    /// @param lock - whether to lock or swap to cvxFXS\\n    function depositFromPrisma(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to,\\n        bool lock\\n    ) external notToZeroAddress(to) {\\n        IERC20(PRISMA_TOKEN).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        _deposit(amount, minAmountOut, to, lock);\\n    }\\n\\n    function _deposit(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to,\\n        bool lock\\n    ) internal {\\n        if (lock) {\\n            cvxPrismaDeposit.deposit(amount, true);\\n        } else {\\n            _swapCvxPrismaPrisma(amount, minAmountOut, false);\\n        }\\n        IGenericVault(vault).depositAll(to);\\n    }\\n\\n    /// @notice Deposit into the pounder from ETH\\n    /// @param minAmountOut - min amount of lp tokens expected\\n    /// @param to - address to stake on behalf of\\n    /// @param lock - whether to lock or swap to cvxPrisma\\n    function depositFromEth(\\n        uint256 minAmountOut,\\n        address to,\\n        bool lock\\n    ) external payable notToZeroAddress(to) {\\n        require(msg.value > 0, \\\"cheap\\\");\\n        _depositFromEth(msg.value, minAmountOut, to, lock);\\n    }\\n\\n    /// @notice Internal function to deposit ETH to the pounder\\n    /// @param amount - amount of ETH\\n    /// @param minAmountOut - min amount of lp tokens expected\\n    /// @param to - address to stake on behalf of\\n    /// @param lock - whether to lock or swap to cvxPrisma\\n    function _depositFromEth(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to,\\n        bool lock\\n    ) internal {\\n        uint256 prismaBalance = _swapEthPrisma(amount, 0, true);\\n        _deposit(prismaBalance, minAmountOut, to, lock);\\n    }\\n\\n    /// @notice Deposit into the pounder from any token via Uni interface\\n    /// @notice Use at your own risk\\n    /// @dev Zap contract needs approval for spending of inputToken\\n    /// @param amount - min amount of input token\\n    /// @param minAmountOut - min amount of cvxPrisma expected\\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\\n    /// @param inputToken - address of the token to swap from, needs to have an ETH pair on router used\\n    /// @param to - address to stake on behalf of\\n    /// @param lock - whether to lock or swap to cvxPrisma\\n    function depositViaUniV2EthPair(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address router,\\n        address inputToken,\\n        address to,\\n        bool lock\\n    ) external notToZeroAddress(to) {\\n        require(router != address(0));\\n\\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), amount);\\n        address[] memory _path = new address[](2);\\n        _path[0] = inputToken;\\n        _path[1] = WETH_TOKEN;\\n\\n        IERC20(inputToken).safeApprove(router, 0);\\n        IERC20(inputToken).safeApprove(router, amount);\\n\\n        IUniV2Router(router).swapExactTokensForETH(\\n            amount,\\n            1,\\n            _path,\\n            address(this),\\n            block.timestamp + 1\\n        );\\n        _depositFromEth(address(this).balance, minAmountOut, to, lock);\\n    }\\n\\n    /// @notice Retrieves a user's vault shares and withdraw all\\n    /// @param amount - amount of shares to retrieve\\n    /// @return amount of underlying withdrawn\\n    function _claimAndWithdraw(\\n        uint256 amount,\\n        uint256 minAmountOut\\n    ) internal returns (uint256) {\\n        IERC20(vault).safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 _cvxPrismaAmount = IGenericVault(vault).withdrawAll(\\n            address(this)\\n        );\\n        return _swapCvxPrismaPrisma(_cvxPrismaAmount, minAmountOut, true);\\n    }\\n\\n    /// @notice Claim as FXS\\n    /// @param amount - amount to withdraw\\n    /// @param minAmountOut - minimum amount of underlying tokens expected\\n    /// @param to - address to send withdrawn underlying to\\n    /// @return amount of underlying withdrawn\\n    function claimFromVaultAsPrisma(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to\\n    ) public notToZeroAddress(to) returns (uint256) {\\n        uint256 _prismaAmount = _claimAndWithdraw(amount, minAmountOut);\\n        IERC20(PRISMA_TOKEN).safeTransfer(to, _prismaAmount);\\n        return _prismaAmount;\\n    }\\n\\n    /// @notice Claim as native ETH\\n    /// @param amount - amount to withdraw\\n    /// @param minAmountOut - minimum amount of ETH expected\\n    /// @param to - address to send ETH to\\n    /// @return amount of ETH withdrawn\\n    function claimFromVaultAsEth(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to\\n    ) public notToZeroAddress(to) returns (uint256) {\\n        uint256 _ethAmount = _claimAsEth(amount, minAmountOut);\\n        (bool success, ) = to.call{value: _ethAmount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n        return _ethAmount;\\n    }\\n\\n    /// @notice Withdraw as native ETH (internal)\\n    /// @param amount - amount to withdraw\\n    /// @param minAmountOut - minimum amount of ETH expected\\n    /// @return amount of ETH withdrawn\\n    function _claimAsEth(\\n        uint256 amount,\\n        uint256 minAmountOut\\n    ) public returns (uint256) {\\n        uint256 _prismaAmount = _claimAndWithdraw(amount, 0);\\n        return _swapEthPrisma(_prismaAmount, minAmountOut, false);\\n    }\\n\\n    /// @notice Claim to any token via a univ2 router\\n    /// @notice Use at your own risk\\n    /// @param amount - amount of uFXS to unstake\\n    /// @param minAmountOut - min amount of output token expected\\n    /// @param router - address of the router to use. e.g. 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F for Sushi\\n    /// @param outputToken - address of the token to swap to\\n    /// @param to - address of the final recipient of the swapped tokens\\n    function claimFromVaultViaUniV2EthPair(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address router,\\n        address outputToken,\\n        address to\\n    ) public notToZeroAddress(to) {\\n        require(router != address(0));\\n        _claimAsEth(amount, 0);\\n        address[] memory _path = new address[](2);\\n        _path[0] = WETH_TOKEN;\\n        _path[1] = outputToken;\\n        IUniV2Router(router).swapExactETHForTokens{\\n            value: address(this).balance\\n        }(minAmountOut, _path, to, block.timestamp + 1);\\n    }\\n\\n    /// @notice Claim as USDT via Tricrypto\\n    /// @param amount - the amount of uFXS to unstake\\n    /// @param minAmountOut - the min expected amount of USDT to receive\\n    /// @param to - the adress that will receive the USDT\\n    /// @return amount of USDT obtained\\n    function claimFromVaultAsUsdt(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to\\n    ) public notToZeroAddress(to) returns (uint256) {\\n        uint256 _ethAmount = _claimAsEth(amount, 0);\\n        _swapEthToUsdt(_ethAmount, minAmountOut);\\n        uint256 _usdtAmount = IERC20(USDT_TOKEN).balanceOf(address(this));\\n        IERC20(USDT_TOKEN).safeTransfer(to, _usdtAmount);\\n        return _usdtAmount;\\n    }\\n\\n    /// @notice swap ETH to USDT via Curve's tricrypto\\n    /// @param amount - the amount of ETH to swap\\n    /// @param minAmountOut - the minimum amount expected\\n    function _swapEthToUsdt(uint256 amount, uint256 minAmountOut) internal {\\n        triCryptoSwap.exchange{value: amount}(\\n            2, // ETH\\n            0, // USDT\\n            amount,\\n            minAmountOut,\\n            true\\n        );\\n    }\\n\\n    /// @notice Claim as CVX via CurveCVX\\n    /// @param amount - the amount of uFXS to unstake\\n    /// @param minAmountOut - the min expected amount of USDT to receive\\n    /// @param to - the adress that will receive the CVX\\n    /// @param lock - whether to lock the CVX or not\\n    /// @return amount of CVX obtained\\n    function claimFromVaultAsCvx(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address to,\\n        bool lock\\n    ) public notToZeroAddress(to) returns (uint256) {\\n        uint256 _ethAmount = _claimAsEth(amount, 0);\\n        uint256 _cvxAmount = _swapEthCvx(_ethAmount, minAmountOut, true);\\n        if (lock) {\\n            locker.lock(to, _cvxAmount, 0);\\n        } else {\\n            IERC20(CVX_TOKEN).safeTransfer(to, _cvxAmount);\\n        }\\n        return _cvxAmount;\\n    }\\n\\n    modifier notToZeroAddress(address _to) {\\n        require(_to != address(0), \\\"Invalid address!\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"IERC20Metadata.sol\\\";\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"StrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"ICurveV2Pool.sol\\\";\\nimport \\\"ICurvePool.sol\\\";\\nimport \\\"ICurveFactoryPool.sol\\\";\\nimport \\\"IBasicRewards.sol\\\";\\nimport \\\"IWETH.sol\\\";\\n\\ninterface ICvxPrismaDeposit {\\n    function deposit(uint256, bool) external;\\n}\\n\\ncontract stkCvxPrismaStrategyBase {\\n    address public constant PRISMA_DEPOSIT =\\n        0x61404F7c2d8b1F3373eb3c6e8C4b8d8332c2D5B8;\\n\\n    address public constant CURVE_CVX_ETH_POOL =\\n        0xB576491F1E6e5E62f1d8F26062Ee822B40B0E0d4;\\n    address public constant CURVE_PRISMA_ETH_POOL =\\n        0x322135Dd9cBAE8Afa84727d9aE1434b5B3EBA44B;\\n\\n    address public constant CURVE_CVXPRISMA_PRISMA_POOL =\\n        0x3b21C2868B6028CfB38Ff86127eF22E68d16d53B;\\n    address public constant CURVE_PRISMA_MKUSD_POOL =\\n        0x9D8108DDD8aD1Ee89d527C0C9e928Cb9D2BBa2d3;\\n\\n    address public constant CVXPRISMA_TOKEN =\\n        0x34635280737b5BFe6c7DC2FC3065D60d66e78185;\\n    address public constant PRISMA_TOKEN =\\n        0xdA47862a83dac0c112BA89c6abC2159b95afd71C;\\n    address public constant CVX_TOKEN =\\n        0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n    address public constant MKUSD_TOKEN =\\n        0x4591DBfF62656E7859Afe5e45f6f47D3669fBB28;\\n\\n    uint256 public constant PRISMAETH_ETH_INDEX = 0;\\n    uint256 public constant PRISMAETH_PRISMA_INDEX = 1;\\n    uint256 public constant CVXETH_ETH_INDEX = 0;\\n    uint256 public constant CVXETH_CVX_INDEX = 1;\\n    uint256 public constant PRISMAMKUSD_MKUSD_INDEX = 0;\\n    uint256 public constant PRISMAMKUSD_PRISMA_INDEX = 1;\\n    int128 public constant PRISMACVXPRISMA_CVXPRISMA_INDEX = 1;\\n    int128 public constant PRISMACVXPRISMA_PRISMA_INDEX = 0;\\n\\n    ICvxPrismaDeposit cvxPrismaDeposit = ICvxPrismaDeposit(PRISMA_DEPOSIT);\\n    ICurveV2Pool cvxEthSwap = ICurveV2Pool(CURVE_CVX_ETH_POOL);\\n    ICurveV2Pool prismaEthSwap = ICurveV2Pool(CURVE_PRISMA_ETH_POOL);\\n    ICurvePool cvxPrismaPrismaSwap = ICurvePool(CURVE_CVXPRISMA_PRISMA_POOL);\\n    ICurveV2Pool mkUsdPrismaSwap = ICurveV2Pool(CURVE_PRISMA_MKUSD_POOL);\\n\\n    /// @notice Swap native ETH <-> CVX on Curve\\n    /// @param amount - amount to swap\\n    /// @param minAmountOut - minimum expected amount of output tokens\\n    /// @param ethToCvx - whether to swap from eth to cvx or the inverse\\n    /// @return amount of CVX obtained after the swap\\n    function _swapEthCvx(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        bool ethToCvx\\n    ) internal returns (uint256) {\\n        return\\n            cvxEthSwap.exchange_underlying{value: ethToCvx ? amount : 0}(\\n                ethToCvx ? CVXETH_ETH_INDEX : CVXETH_CVX_INDEX,\\n                ethToCvx ? CVXETH_CVX_INDEX : CVXETH_ETH_INDEX,\\n                amount,\\n                minAmountOut\\n            );\\n    }\\n\\n    /// @notice Swap ETH<->Prisma on Curve\\n    /// @param amount - amount to swap\\n    /// @param minAmountOut - minimum expected amount of output tokens\\n    /// @param ethToPrisma - whether to swap from eth to prisma or the inverse\\n    /// @return amount of token obtained after the swap\\n    function _swapEthPrisma(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        bool ethToPrisma\\n    ) internal returns (uint256) {\\n        return\\n            prismaEthSwap.exchange_underlying{value: ethToPrisma ? amount : 0}(\\n                ethToPrisma ? PRISMAETH_ETH_INDEX : PRISMAETH_PRISMA_INDEX,\\n                ethToPrisma ? PRISMAETH_PRISMA_INDEX : PRISMAETH_ETH_INDEX,\\n                amount,\\n                minAmountOut\\n            );\\n    }\\n\\n    /// @notice Swap mkUSD<->Prisma on Curve\\n    /// @param amount - amount to swap\\n    /// @param minAmountOut - minimum expected amount of output tokens\\n    /// @param mkUsdToPrisma - whether to swap from mkUsd to prisma or the inverse\\n    /// @return amount of token obtained after the swap\\n    function _swapMkUsdPrisma(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        bool mkUsdToPrisma\\n    ) internal returns (uint256) {\\n        return\\n            mkUsdPrismaSwap.exchange_underlying(\\n                mkUsdToPrisma\\n                    ? PRISMAMKUSD_MKUSD_INDEX\\n                    : PRISMAMKUSD_PRISMA_INDEX,\\n                mkUsdToPrisma\\n                    ? PRISMAMKUSD_PRISMA_INDEX\\n                    : PRISMAMKUSD_MKUSD_INDEX,\\n                amount,\\n                minAmountOut\\n            );\\n    }\\n\\n    /// @notice Swap cvxPrisma<->Prisma on Curve\\n    /// @param amount - amount to swap\\n    /// @param minAmountOut - minimum expected amount of output tokens\\n    /// @param cvxPrismaToPrisma - whether to swap from cvxPrisma to prisma or the inverse\\n    /// @return amount of token obtained after the swap\\n    function _swapCvxPrismaPrisma(\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        bool cvxPrismaToPrisma\\n    ) internal returns (uint256) {\\n        return\\n            cvxPrismaPrismaSwap.exchange(\\n                cvxPrismaToPrisma\\n                    ? PRISMACVXPRISMA_CVXPRISMA_INDEX\\n                    : PRISMACVXPRISMA_PRISMA_INDEX,\\n                cvxPrismaToPrisma\\n                    ? PRISMACVXPRISMA_PRISMA_INDEX\\n                    : PRISMACVXPRISMA_CVXPRISMA_INDEX,\\n                amount,\\n                minAmountOut\\n            );\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"ICurveV2Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICurveV2Pool {\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function lp_price() external view returns (uint256);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth,\\n        address receiver\\n    ) external payable returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICurvePool {\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICurveFactoryPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICurveFactoryPool {\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_balances() external view returns (uint256[2] memory);\\n\\n    function add_liquidity(\\n        uint256[2] memory _amounts,\\n        uint256 _min_mint_amount,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"IBasicRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\ninterface IBasicRewards {\\n    function stakeFor(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function earned(address) external view returns (uint256);\\n\\n    function withdrawAll(bool) external returns (bool);\\n\\n    function withdraw(uint256, bool) external returns (bool);\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim)\\n        external\\n        returns (bool);\\n\\n    function getReward() external returns (bool);\\n\\n    function stake(uint256) external returns (bool);\\n\\n    function extraRewards(uint256) external view returns (address);\\n\\n    function exit() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"IGenericVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IGenericVault {\\n    function withdraw(address _to, uint256 _shares)\\n        external\\n        returns (uint256 withdrawn);\\n\\n    function withdrawAll(address _to) external returns (uint256 withdrawn);\\n\\n    function depositAll(address _to) external returns (uint256 _shares);\\n\\n    function deposit(address _to, uint256 _amount)\\n        external\\n        returns (uint256 _shares);\\n\\n    function harvest() external;\\n\\n    function balanceOfUnderlying(address user)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    function totalUnderlying() external view returns (uint256 total);\\n\\n    function totalSupply() external view returns (uint256 total);\\n\\n    function underlying() external view returns (address);\\n\\n    function strategy() external view returns (address);\\n\\n    function platform() external view returns (address);\\n\\n    function setPlatform(address _platform) external;\\n\\n    function setPlatformFee(uint256 _fee) external;\\n\\n    function setCallIncentive(uint256 _incentive) external;\\n\\n    function setWithdrawalPenalty(uint256 _penalty) external;\\n\\n    function setApprovals() external;\\n\\n    function callIncentive() external view returns (uint256);\\n\\n    function withdrawalPenalty() external view returns (uint256);\\n\\n    function platformFee() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"IUniV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IUniV2Router {\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"ICurveTriCrypto.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICurveTriCrypto {\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth\\n    ) external payable;\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function price_oracle(uint256 k) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"ICVXLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICVXLocker {\\n    function lock(\\n        address _account,\\n        uint256 _amount,\\n        uint256 _spendRatio\\n    ) external;\\n\\n    function balances(address _user)\\n        external\\n        view\\n        returns (\\n            uint112 locked,\\n            uint112 boosted,\\n            uint32 nextUnlockIndex\\n        );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"StrategyZaps.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURVE_CVXPRISMA_PRISMA_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_CVX_ETH_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_PRISMA_ETH_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_PRISMA_MKUSD_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXETH_CVX_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXETH_ETH_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVXPRISMA_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CVX_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MKUSD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMACVXPRISMA_CVXPRISMA_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMACVXPRISMA_PRISMA_INDEX\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMAETH_ETH_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMAETH_PRISMA_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMAMKUSD_MKUSD_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMAMKUSD_PRISMA_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMA_DEPOSIT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRISMA_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"_claimAsEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"claimFromVaultAsCvx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultAsEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultAsPrisma\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultAsUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimFromVaultViaUniV2EthPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"depositFromEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"depositFromPrisma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"depositViaUniV2EthPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "stkCvxPrismaZaps", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009bfd08d7b3cc40129132a17b4d5b9ea3351464bd", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}