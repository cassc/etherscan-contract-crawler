{"SourceCode": "pragma solidity >= 0.5.0 < 0.6.0;\r\n\r\ncontract UsbekDrawLottery {\r\n    uint public winnersAmount;\r\n    uint public registeredUsers;\r\n    uint public currLotteryId;\r\n    uint public launchTime;\r\n    string public lotteryName;\r\n    uint[] public winnersId;\r\n    address private owner = msg.sender;\r\n    uint private nonce;\r\n    uint private up;\r\n    uint private down;\r\n\r\n    event LogConstructorInitiated(string nextStep);\r\n    event LogDrawLaunched(uint winAmount, uint regUser, uint lotteryId, uint256 date);\r\n\r\n    constructor() public {\r\n        emit LogConstructorInitiated(\"Constructor was initiated. Call 'launchDraw()' to start the lottery draw.\");\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function launchDraw(uint _winAmount, uint _regUser, uint _lotteryId, string memory _name) public payable {\r\n        require(owner == msg.sender, \"Not valid address (only creator)\");\r\n        require(_winAmount >= 1, \"Need at least 1 winner\");\r\n        require(_regUser >= 1, \"Need at least 1 registered user\");\r\n        require(_regUser >= _winAmount, \"Need at least same registered user amount than winner amount\");\r\n        require(_lotteryId >= 0, \"A lottery id is mandatory\");\r\n        require(bytes(_name).length >= 1, \"A lottery id is mandatory\");\r\n\r\n        delete winnersId;\r\n\r\n        emit LogDrawLaunched(_winAmount, _regUser, _lotteryId, now);\r\n        winnersAmount = _winAmount;\r\n        registeredUsers = _regUser;\r\n        currLotteryId = _lotteryId;\r\n        launchTime = now;\r\n        lotteryName = _name;\r\n        setRandomNum(_winAmount, _regUser);\r\n    }\r\n\r\n    function setRandomNum(uint _winAmount, uint _users) private {\r\n        uint rand = uint(keccak256(abi.encodePacked(now, nonce, msg.sender))) % _users;\r\n        uint randNum = rand;\r\n\r\n        nonce++;\r\n        up = rand;\r\n        down = rand;\r\n        setWinnersId(randNum, _winAmount, _users);\r\n    }\r\n\r\n    function setWinnersId(uint _randNum, uint _winAmount, uint _users) private {\r\n        winnersId.push(_randNum);\r\n\r\n        while(winnersId.length < _winAmount) {\r\n            if ((_winAmount % 2 == 0) && (winnersId.length == _winAmount - 1)) {\r\n                setNext(_users);\r\n                uint rand = uint(keccak256(abi.encodePacked(now, nonce, msg.sender))) % 1;\r\n                if (rand == 1) {\r\n                    winnersId.push(down);\r\n                } else {\r\n                    winnersId.push(up);\r\n                }\r\n            } else {\r\n                setNext(_users);\r\n                winnersId.push(down);\r\n                winnersId.push(up);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setNext(uint _users) private {\r\n        if ((up + 1) > _users) {\r\n            up = 1;\r\n        } else {\r\n            up += 1;\r\n        }\r\n\r\n        if ((down - 1) < 1) {\r\n            down = _users;\r\n        } else {\r\n            down -= 1;\r\n        }\r\n    }\r\n\r\n    function getWinnersId() public view returns(uint[] memory) {\r\n        return winnersId;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"lotteryName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currLotteryId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registeredUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnersId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winAmount\",\"type\":\"uint256\"},{\"name\":\"_regUser\",\"type\":\"uint256\"},{\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"launchDraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnersAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinnersId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nextStep\",\"type\":\"string\"}],\"name\":\"LogConstructorInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"regUser\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"LogDrawLaunched\",\"type\":\"event\"}]", "ContractName": "UsbekDrawLottery", "CompilerVersion": "v0.5.1+commit.c8a2cb62", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://91464fc47a107364a2ff00a4812c7cbe7ce5fe555d25610ce890086b87c66cd8"}