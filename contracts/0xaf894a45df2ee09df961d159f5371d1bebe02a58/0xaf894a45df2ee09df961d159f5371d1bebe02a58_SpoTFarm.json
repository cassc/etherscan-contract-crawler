{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface iSpot{\r\n    function claim() external;\r\n}\r\n\r\ncontract SpoTFarm is Ownable, ReentrancyGuard {\r\n\r\n    IERC20 private spoT;\r\n    IERC20 private milQ;\r\n    IERC20 private gspoT;\r\n    iSpot public ISPOT;\r\n    IUniswapV2Router02 private uniswapRouter;\r\n\r\n    constructor(address _spotAddress, address _milQAddress, address _gspoTAddress, address _oddysParlour, address _uniswapRouterAddress) {    \r\n        spoT = IERC20(_spotAddress);\r\n        ISPOT = iSpot(_spotAddress);\r\n        milQ = IERC20(_milQAddress);\r\n        gspoT = IERC20(_gspoTAddress);\r\n        oddysParlour = _oddysParlour;\r\n        uniswapRouter = IUniswapV2Router02(_uniswapRouterAddress);\r\n    }   \r\n   \r\n    bool private staQingPaused = true;\r\n\r\n    address public oddysParlour;\r\n\r\n    address private swapSpot = 0x53020F42f6Da51B50cf6E23e45266ef223122376;\r\n   \r\n    uint256 public daisys = 0; \r\n\r\n    uint256 public bessies = 0;\r\n\r\n    uint256 public spoTers = 0;\r\n\r\n    uint256 public milQers = 0;\r\n\r\n    uint256 public vitaliksMilkShipped = 0;\r\n\r\n    uint256 public vitaliksMilkQompounded = 0;\r\n\r\n    uint256 private daisysToOddysParlour = 15;\r\n\r\n    uint256 private bessiesToOddysParlour = 15;\r\n\r\n    uint256 public daisysMilkProduced = 0;\r\n\r\n    uint256 public bessiesMilkProduced = 0;\r\n\r\n    uint256 public daisysRentalTime;\r\n\r\n    uint256 public bessiesRentalTime;\r\n\r\n    uint256 public roundUpDaisysTime;\r\n\r\n    uint256 public roundUpBessiesTime;\r\n\r\n    uint256 public totalVitaliksMilkShipments = 0;\r\n\r\n    uint256 public MilqShipments = 0;\r\n\r\n    uint256 private minSpoT = 10000000000000000000;\r\n\r\n    uint256 private minMilQ = 1000000000000000000;\r\n\r\n    uint256 public totalMilQClaimed = 0;\r\n\r\n    uint256 private highClaimThreshold = 5000000000000000000;\r\n\r\n    event highClaim(address User, uint256 Amount);\r\n\r\n    function sethighClaimThreshold(uint256 weiAmount) public onlyOwner {\r\n        highClaimThreshold = weiAmount;\r\n    }\r\n\r\n    uint256 private lowBalanceThreshold = 10000000000000000000;\r\n\r\n    event lowBalance(uint256 time, uint256 balance);\r\n\r\n    function setLowBalanceThreshold(uint256 weiAmount) public onlyOwner {\r\n        lowBalanceThreshold = weiAmount;\r\n    }\r\n\r\n    event rewardChange(uint256 index ,uint256 newBessies, uint256 newDaisys);\r\n\r\n    event Qompound(address user, uint256 _ethAmount, uint256 boughtAmount);\r\n\r\n    event newStaQe(address user, uint256 spot, uint256 milq);\r\n\r\n    struct SpoTerParlour {\r\n        uint256 daisys;\r\n        uint256 rentedDaisysSince;\r\n        uint256 rentedDaisysTill;\r\n        uint256 vitaliksMilkShipped;\r\n        uint256 lastShippedVitaliksMilk;\r\n        uint256 vitaliksMilkClaimable;\r\n        uint256 QompoundedMilk;\r\n        uint256 daisysOwnedSince;\r\n        uint256 daisysOwnedTill;\r\n        bool hasDaisys;\r\n        bool ownsDaisys;\r\n        bool owedMilk;\r\n        uint256 shipmentsRecieved;\r\n    }\r\n\r\n    struct LpClaim {\r\n        uint256 lastClaimed;\r\n        uint256 totalClaimed;\r\n    }\r\n\r\n    struct MilQerParlour {\r\n        uint256 bessies;\r\n        uint256 rentedBessiesSince;\r\n        uint256 rentedBessiesTill;\r\n        uint256 milQClaimed;\r\n        uint256 vitaliksMilkShipped;\r\n        uint256 lastShippedVitaliksMilk;\r\n        uint256 vitaliksMilkClaimable;\r\n        uint256 bessiesOwnedSince;\r\n        uint256 bessiesOwnedTill;\r\n        bool hasBessies;\r\n        bool ownsBessies;\r\n        bool owedMilk;\r\n        uint256 shipmentsRecieved;\r\n    }\r\n\r\n    struct MilQShipment {\r\n        uint256 blockTimestamp;\r\n        uint256 MilQShipped;\r\n        uint256 totalspoTStaked;\r\n        uint256 rewardPerspoT;\r\n    }\r\n\r\n    struct VitaliksMilkShipment {\r\n        uint256 timestamp;\r\n        uint256 daisysOutput;\r\n        uint256 bessiesOutput;\r\n    }\r\n\r\n    mapping(address => LpClaim) public LpClaims;\r\n    mapping(address => SpoTerParlour) public SpoTerParlours;\r\n    mapping(address => MilQerParlour) public MilQerParlours;\r\n    mapping(uint256 => MilQShipment) public MilQShipments;\r\n    mapping(uint256 => VitaliksMilkShipment) public VitaliksMilkShipments;\r\n\r\n    function rushOddyFee(uint256 _daisysToOddysParlour, uint256 _bessiesToOddysParlour) public onlyOwner{\r\n        require(_daisysToOddysParlour + _bessiesToOddysParlour <= 60);        \r\n        daisysToOddysParlour = _daisysToOddysParlour;\r\n        bessiesToOddysParlour = _bessiesToOddysParlour;\r\n    }\r\n\r\n    function zeroFees() public onlyOwner {\r\n        daisysToOddysParlour = 0;\r\n        bessiesToOddysParlour = 0;\r\n    }\r\n\r\n    function setOddysParlour(address _oddysParlour) public onlyOwner {\r\n        oddysParlour = _oddysParlour;\r\n    }\r\n\r\n    function setGspoTAddress(IERC20 _gspoT) public onlyOwner {\r\n        gspoT = _gspoT;\r\n    }   \r\n\r\n    function prepShipment(uint256 _daisysOutput, uint256 _bessiesOutput) public onlyOwner {\r\n        totalVitaliksMilkShipments ++;\r\n        uint256 index = totalVitaliksMilkShipments;\r\n        VitaliksMilkShipments[index] = VitaliksMilkShipment(block.timestamp, _daisysOutput, _bessiesOutput);\r\n        emit rewardChange(index, _daisysOutput, _bessiesOutput);\r\n    }\r\n\r\n    function getprepShipment(uint256 index) public view returns (uint256, uint256, uint256) {\r\n        require(index < totalVitaliksMilkShipments);\r\n        VitaliksMilkShipment memory shipment = VitaliksMilkShipments[index];\r\n        return (shipment.timestamp, shipment.daisysOutput, shipment.bessiesOutput);\r\n    }\r\n\r\n    function pauseStaQing(bool _state) public onlyOwner {\r\n        staQingPaused = _state;\r\n    }\r\n\r\n    function removeVitaliksMilk(uint256 amount) external onlyOwner {\r\n        require(address(this).balance >= amount);\r\n        payable(oddysParlour).transfer(amount);\r\n    }\r\n\r\n    function withdrawERC20(address _ERC20, uint256 _Amt) external onlyOwner {\r\n        IERC20(_ERC20).transfer(msg.sender, _Amt);\r\n    }\r\n\r\n    function changeDaisysRentalTime(uint256 _daisysRentalTime) external onlyOwner {\r\n        daisysRentalTime = _daisysRentalTime;\r\n    }\r\n\r\n    function changeBessiesRentalTime(uint256 _bessiesRentalTime) external onlyOwner {\r\n        bessiesRentalTime = _bessiesRentalTime;\r\n    }\r\n\r\n    function changeRoundUpDaisysTime(uint256 _roundUpDaisysTime) external onlyOwner {\r\n        roundUpDaisysTime = _roundUpDaisysTime;\r\n    }\r\n\r\n    function changeRoundUpBessiesTime(uint256 _roundUpBessiesTime) external onlyOwner {\r\n        roundUpBessiesTime = _roundUpBessiesTime;\r\n    }\r\n\r\n    function changeMinSpoT(uint256 _minSpoT) external onlyOwner {\r\n        minSpoT = _minSpoT;\r\n    }\r\n\r\n    function changeMinMilQ(uint256 _minMilQ) external onlyOwner {\r\n        minMilQ = _minMilQ;\r\n    }\r\n\r\n    function staQe(uint256 _amountSpoT, uint256 _amountMilQ, uint256 _token) external {\r\n        require(!staQingPaused);\r\n        require(_token == 0 || _token == 1);\r\n\r\n        if (SpoTerParlours[msg.sender].hasDaisys == true || MilQerParlours[msg.sender].hasBessies == true ) {\r\n            howMuchMilkV3();\r\n        }\r\n\r\n        if (_token == 0) {\r\n            require(_amountSpoT >= minSpoT);\r\n            \r\n            if (SpoTerParlours[msg.sender].hasDaisys == true) {\r\n                uint256 milQToClaim = checkEstMilQRewards(msg.sender);\r\n                \r\n                if (milQToClaim > 0) {\r\n                    shipSpoTersMilQ();\r\n                }\r\n                \r\n                getMoreDaisys(_amountSpoT);\r\n            }        \r\n\r\n            if (SpoTerParlours[msg.sender].hasDaisys == false){\r\n                firstStaQeSpoT(_amountSpoT);\r\n            }      \r\n        }\r\n\r\n        if (_token == 1) { \r\n            require(_amountMilQ >= minMilQ);\r\n            if (MilQerParlours[msg.sender].hasBessies == true){\r\n                getMoreBessies(_amountMilQ);\r\n            } \r\n\r\n            if (MilQerParlours[msg.sender].hasBessies == false){\r\n                firstStaQeMilQ(_amountMilQ);\r\n            }\r\n        }\r\n        emit newStaQe(msg.sender,_amountSpoT, _amountMilQ);\r\n    }\r\n\r\n    function getMoreDaisys(uint256 amountSpoT) internal {\r\n        \r\n        spoT.approve(address(this), amountSpoT);\r\n        spoT.transferFrom(msg.sender, address(this), amountSpoT);\r\n        \r\n        if (SpoTerParlours[msg.sender].ownsDaisys == true) {\r\n            gspoT.transfer(msg.sender, amountSpoT);\r\n        } \r\n\r\n        SpoTerParlours[msg.sender].daisys += amountSpoT;\r\n        daisys += amountSpoT; \r\n    }\r\n\r\n    function getMoreBessies(uint256 amountMilQ) internal {\r\n        milQ.approve(address(this), amountMilQ);\r\n        milQ.transferFrom(msg.sender, address(this), amountMilQ);\r\n        MilQerParlours[msg.sender].bessies += amountMilQ;\r\n        bessies += amountMilQ;    \r\n    }\r\n   \r\n    function firstStaQeSpoT(uint256 amountSpoT) internal {\r\n        spoT.approve(address(this), amountSpoT);\r\n        spoT.transferFrom(msg.sender, address(this), amountSpoT);\r\n        SpoTerParlours[msg.sender].daisys += amountSpoT;\r\n        SpoTerParlours[msg.sender].rentedDaisysSince = block.timestamp;\r\n        SpoTerParlours[msg.sender].rentedDaisysTill = block.timestamp + daisysRentalTime; \r\n        SpoTerParlours[msg.sender].daisysOwnedSince = 0;\r\n        SpoTerParlours[msg.sender].daisysOwnedTill = 32503680000;\r\n        SpoTerParlours[msg.sender].hasDaisys = true;\r\n        SpoTerParlours[msg.sender].ownsDaisys = false;\r\n        SpoTerParlours[msg.sender].vitaliksMilkShipped = 0;\r\n        SpoTerParlours[msg.sender].QompoundedMilk = 0;\r\n        SpoTerParlours[msg.sender].lastShippedVitaliksMilk = block.timestamp;\r\n        SpoTerParlours[msg.sender].shipmentsRecieved = totalVitaliksMilkShipments;\r\n        SpoTerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n        SpoTerParlours[msg.sender].owedMilk = true;\r\n        LpClaims[msg.sender].lastClaimed = totalMilQClaimed;\r\n        LpClaims[msg.sender].totalClaimed = 0;\r\n        daisys += amountSpoT;\r\n        spoTers ++;\r\n    }\r\n\r\n    function firstStaQeMilQ(uint256 amountMilQ) internal {\r\n        milQ.approve(address(this), amountMilQ);\r\n        milQ.transferFrom(msg.sender, address(this), amountMilQ);\r\n        MilQerParlours[msg.sender].bessies += amountMilQ;\r\n        MilQerParlours[msg.sender].rentedBessiesSince = block.timestamp;\r\n        MilQerParlours[msg.sender].rentedBessiesTill = block.timestamp + bessiesRentalTime;\r\n        MilQerParlours[msg.sender].hasBessies = true;\r\n        MilQerParlours[msg.sender].bessiesOwnedSince = 0;\r\n        MilQerParlours[msg.sender].bessiesOwnedTill = 32503680000;\r\n        MilQerParlours[msg.sender].ownsBessies = false;\r\n        MilQerParlours[msg.sender].vitaliksMilkShipped = 0;\r\n        MilQerParlours[msg.sender].lastShippedVitaliksMilk = block.timestamp;\r\n        MilQerParlours[msg.sender].shipmentsRecieved = totalVitaliksMilkShipments;\r\n        MilQerParlours[msg.sender].milQClaimed = 0;\r\n        MilQerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n        MilQerParlours[msg.sender].owedMilk = true;\r\n        bessies += amountMilQ;\r\n        milQers ++;\r\n    }\r\n\r\n    function ownCows(uint256 _cow) external {\r\n        require(!staQingPaused);\r\n        require( _cow == 0 || _cow == 1);\r\n\r\n        if (_cow == 0) {\r\n            require(SpoTerParlours[msg.sender].ownsDaisys == false);\r\n            require(SpoTerParlours[msg.sender].hasDaisys == true);\r\n            require(SpoTerParlours[msg.sender].rentedDaisysTill < block.timestamp);\r\n            require(gspoT.transfer(msg.sender, SpoTerParlours[msg.sender].daisys));\r\n            SpoTerParlours[msg.sender].ownsDaisys = true;\r\n            SpoTerParlours[msg.sender].daisysOwnedSince = SpoTerParlours[msg.sender].rentedDaisysTill;\r\n            SpoTerParlours[msg.sender].owedMilk = true;\r\n        }    \r\n\r\n        if (_cow == 1) {\r\n            require(MilQerParlours[msg.sender].ownsBessies == false);\r\n            require(MilQerParlours[msg.sender].hasBessies == true);\r\n            require(MilQerParlours[msg.sender].rentedBessiesTill < block.timestamp);\r\n            MilQerParlours[msg.sender].ownsBessies = true;\r\n            MilQerParlours[msg.sender].bessiesOwnedSince = MilQerParlours[msg.sender].rentedBessiesTill;\r\n            MilQerParlours[msg.sender].owedMilk = true;\r\n        }\r\n    }\r\n\r\n    function roundUpCows(uint256 _cow) external {\r\n        require(!staQingPaused);\r\n        require(_cow == 0 && SpoTerParlours[msg.sender].ownsDaisys == true || _cow == 1 && MilQerParlours[msg.sender].ownsBessies == true);\r\n\r\n            if (_cow == 0) {\r\n                uint256 newTimestamp = block.timestamp + roundUpDaisysTime; //make this time variable    \r\n                SpoTerParlours[msg.sender].daisysOwnedTill = newTimestamp;\r\n            }\r\n\r\n            if (_cow == 1) {\r\n                uint256 newTimestamp = block.timestamp + roundUpBessiesTime; \r\n                MilQerParlours[msg.sender].bessiesOwnedTill = newTimestamp;\r\n            }\r\n    }\r\n\r\n    function unstaQe(uint256 _amtSpoT, uint256 _amtMilQ, uint256 _token) external { \r\n        require(!staQingPaused); \r\n        require(_token == 0 || _token == 1); \r\n        uint256 totalMilk = viewHowMuchMilk(msg.sender); \r\n \r\n        if (totalMilk > 0) {   \r\n            shipMilk(); \r\n        } \r\n \r\n        if (_token == 0) { \r\n            require(_amtSpoT > 0); \r\n            require(SpoTerParlours[msg.sender].daisys >= _amtSpoT);\r\n            require(SpoTerParlours[msg.sender].hasDaisys == true); \r\n            unstaQeSpoT(_amtSpoT); \r\n        } \r\n \r\n        if (_token == 1) { \r\n            require(_amtMilQ > 0); \r\n            require(MilQerParlours[msg.sender].bessies >= _amtMilQ);\r\n            require(MilQerParlours[msg.sender].hasBessies == true); \r\n            unstaQeMilQ(_amtMilQ); \r\n        }     \r\n    }\r\n\r\n    function unstaQeSpoT(uint256 amtSpoT) internal {        \r\n        if (SpoTerParlours[msg.sender].ownsDaisys == true) {\r\n            gspoT.approve(address(this), amtSpoT);\r\n            gspoT.transferFrom(msg.sender, address(this), amtSpoT);\r\n        }\r\n\r\n        uint256 amtToClaim = checkEstMilQRewards(msg.sender);\r\n        \r\n        if (amtToClaim > 0) {\r\n            shipSpoTersMilQ();\r\n        }\r\n\r\n        uint256 transferSpoT;\r\n        uint256 dToOddysParlour;\r\n\r\n            if (SpoTerParlours[msg.sender].daisysOwnedTill < block.timestamp && SpoTerParlours[msg.sender].ownsDaisys == true){\r\n                spoT.transfer(msg.sender, amtSpoT);\r\n                SpoTerParlours[msg.sender].daisys -= amtSpoT; \r\n            }\r\n\r\n            if (SpoTerParlours[msg.sender].rentedDaisysTill < block.timestamp && SpoTerParlours[msg.sender].ownsDaisys == false){\r\n                spoT.transfer(msg.sender, amtSpoT);\r\n                SpoTerParlours[msg.sender].daisys -= amtSpoT; \r\n            }\r\n\r\n            if (SpoTerParlours[msg.sender].daisysOwnedTill > block.timestamp && SpoTerParlours[msg.sender].ownsDaisys == true){\r\n                dToOddysParlour = (amtSpoT * daisysToOddysParlour / 100);\r\n                transferSpoT = (amtSpoT - dToOddysParlour);\r\n                spoT.transfer(msg.sender, transferSpoT);\r\n                spoT.transfer(oddysParlour, dToOddysParlour);\r\n                SpoTerParlours[msg.sender].daisys -= amtSpoT;          \r\n            }\r\n\r\n            if (SpoTerParlours[msg.sender].rentedDaisysTill > block.timestamp && SpoTerParlours[msg.sender].ownsDaisys == false){\r\n                dToOddysParlour = (amtSpoT * daisysToOddysParlour / 100);\r\n                transferSpoT = (amtSpoT - dToOddysParlour);\r\n                spoT.transfer(msg.sender, transferSpoT);\r\n                spoT.transfer(oddysParlour, dToOddysParlour);\r\n                SpoTerParlours[msg.sender].daisys -= amtSpoT;  \r\n            }   \r\n\r\n            if (SpoTerParlours[msg.sender].daisys < minSpoT) {\r\n                SpoTerParlours[msg.sender].daisys = 0;\r\n                SpoTerParlours[msg.sender].rentedDaisysSince = 0;\r\n                SpoTerParlours[msg.sender].rentedDaisysTill = 0;\r\n                SpoTerParlours[msg.sender].vitaliksMilkShipped = 0;\r\n                SpoTerParlours[msg.sender].lastShippedVitaliksMilk = 0;\r\n                SpoTerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n                SpoTerParlours[msg.sender].QompoundedMilk = 0;\r\n                SpoTerParlours[msg.sender].daisysOwnedSince = 0;\r\n                SpoTerParlours[msg.sender].daisysOwnedTill = 0;\r\n                SpoTerParlours[msg.sender].hasDaisys = false;\r\n                SpoTerParlours[msg.sender].ownsDaisys = false;\r\n                SpoTerParlours[msg.sender].owedMilk = false;\r\n                SpoTerParlours[msg.sender].shipmentsRecieved = 0;\r\n                spoTers --;\r\n            }       \r\n    }\r\n\r\n    function unstaQeMilQ(uint256 amtMilQ) internal {\r\n        uint256 transferMilQ;\r\n        uint256 bToOddysParlour;\r\n\r\n            if (MilQerParlours[msg.sender].bessiesOwnedTill <= block.timestamp && MilQerParlours[msg.sender].ownsBessies == true){\r\n                transferMilQ = amtMilQ;\r\n                milQ.transfer(msg.sender, transferMilQ);\r\n                MilQerParlours[msg.sender].bessies -= amtMilQ;\r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].rentedBessiesTill <= block.timestamp && MilQerParlours[msg.sender].ownsBessies == false){\r\n                transferMilQ = amtMilQ;\r\n                milQ.transfer(msg.sender, transferMilQ);\r\n                MilQerParlours[msg.sender].bessies -= amtMilQ;\r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].bessiesOwnedTill > block.timestamp && MilQerParlours[msg.sender].ownsBessies == true){\r\n                bToOddysParlour = (amtMilQ * bessiesToOddysParlour / 100);\r\n                transferMilQ = (amtMilQ - bToOddysParlour);\r\n                milQ.transfer(msg.sender, transferMilQ);\r\n                milQ.transfer(oddysParlour, bToOddysParlour);\r\n                MilQerParlours[msg.sender].bessies -= amtMilQ;\r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].rentedBessiesTill > block.timestamp && MilQerParlours[msg.sender].ownsBessies == false){\r\n                bToOddysParlour = (amtMilQ * bessiesToOddysParlour / 100);\r\n                transferMilQ = (amtMilQ - bToOddysParlour);\r\n                milQ.transfer(msg.sender, transferMilQ);\r\n                milQ.transfer(oddysParlour, bToOddysParlour);\r\n                MilQerParlours[msg.sender].bessies -= amtMilQ;\r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].bessies < minMilQ) {\r\n                MilQerParlours[msg.sender].bessies = 0;\r\n                MilQerParlours[msg.sender].rentedBessiesSince = 0;\r\n                MilQerParlours[msg.sender].rentedBessiesTill = 0;\r\n                MilQerParlours[msg.sender].milQClaimed = 0;\r\n                MilQerParlours[msg.sender].vitaliksMilkShipped = 0;\r\n                MilQerParlours[msg.sender].lastShippedVitaliksMilk = 0;\r\n                MilQerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n                MilQerParlours[msg.sender].bessiesOwnedSince = 0;\r\n                MilQerParlours[msg.sender].bessiesOwnedTill = 0;\r\n                MilQerParlours[msg.sender].hasBessies = false;\r\n                MilQerParlours[msg.sender].ownsBessies = false;\r\n                MilQerParlours[msg.sender].owedMilk = false;\r\n                MilQerParlours[msg.sender].shipmentsRecieved = 0;\r\n                milQers --;\r\n            }\r\n    }\r\n\r\n    function howMuchMilkV3() internal {\r\n        uint256 milkFromDaisys = 0;\r\n        uint256 milkFromBessies = 0;\r\n        if (SpoTerParlours[msg.sender].ownsDaisys == true && SpoTerParlours[msg.sender].daisysOwnedTill > block.timestamp) {\r\n            if (SpoTerParlours[msg.sender].shipmentsRecieved != totalVitaliksMilkShipments) {\r\n                for (uint256 i = SpoTerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                    SpoTerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                    SpoTerParlours[msg.sender].shipmentsRecieved ++;\r\n                }\r\n            }\r\n            \r\n            if (SpoTerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (block.timestamp - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                SpoTerParlours[msg.sender].lastShippedVitaliksMilk = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (SpoTerParlours[msg.sender].ownsDaisys == false && SpoTerParlours[msg.sender].hasDaisys == true && SpoTerParlours[msg.sender].rentedDaisysTill > block.timestamp) {\r\n            if (SpoTerParlours[msg.sender].shipmentsRecieved != totalVitaliksMilkShipments) {\r\n                for (uint256 i = SpoTerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                    SpoTerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                    SpoTerParlours[msg.sender].shipmentsRecieved ++;\r\n                }\r\n            }\r\n            \r\n            if (SpoTerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (block.timestamp - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                SpoTerParlours[msg.sender].lastShippedVitaliksMilk = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (SpoTerParlours[msg.sender].ownsDaisys == true && SpoTerParlours[msg.sender].daisysOwnedTill <= block.timestamp && SpoTerParlours[msg.sender].owedMilk == true) {\r\n            if(SpoTerParlours[msg.sender].shipmentsRecieved < totalVitaliksMilkShipments) { \r\n                for (uint256 i = SpoTerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n\r\n                    if (SpoTerParlours[msg.sender].daisysOwnedTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                        SpoTerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                        SpoTerParlours[msg.sender].shipmentsRecieved ++;\r\n                    }\r\n            \r\n                    if (SpoTerParlours[msg.sender].daisysOwnedTill <= VitaliksMilkShipments[i+1].timestamp) {\r\n                        uint256 time = SpoTerParlours[msg.sender].daisysOwnedTill - SpoTerParlours[msg.sender].lastShippedVitaliksMilk;\r\n                        milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * time;\r\n                        SpoTerParlours[msg.sender].lastShippedVitaliksMilk = SpoTerParlours[msg.sender].daisysOwnedTill;\r\n                        SpoTerParlours[msg.sender].owedMilk = false;\r\n                        break;   \r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (SpoTerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (SpoTerParlours[msg.sender].daisysOwnedTill - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                SpoTerParlours[msg.sender].lastShippedVitaliksMilk = SpoTerParlours[msg.sender].daisysOwnedTill;\r\n                SpoTerParlours[msg.sender].owedMilk = false;\r\n            } \r\n        }\r\n\r\n        if (SpoTerParlours[msg.sender].ownsDaisys == false && SpoTerParlours[msg.sender].hasDaisys == true && SpoTerParlours[msg.sender].rentedDaisysTill <= block.timestamp && SpoTerParlours[msg.sender].owedMilk == true) {\r\n            if(SpoTerParlours[msg.sender].shipmentsRecieved < totalVitaliksMilkShipments){\r\n                for (uint256 i = SpoTerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n                    if (SpoTerParlours[msg.sender].rentedDaisysTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                        SpoTerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                        SpoTerParlours[msg.sender].shipmentsRecieved ++;\r\n                    }\r\n         \r\n                    if (SpoTerParlours[msg.sender].rentedDaisysTill <= VitaliksMilkShipments[i+1].timestamp && SpoTerParlours[msg.sender].owedMilk == true){\r\n                        uint256 time = SpoTerParlours[msg.sender].rentedDaisysTill - SpoTerParlours[msg.sender].lastShippedVitaliksMilk;\r\n                        milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * time;\r\n                        SpoTerParlours[msg.sender].lastShippedVitaliksMilk = SpoTerParlours[msg.sender].rentedDaisysTill;\r\n                        SpoTerParlours[msg.sender].owedMilk = false;\r\n                        break;   \r\n                    }   \r\n                }  \r\n            }\r\n\r\n            if (SpoTerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[msg.sender].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (SpoTerParlours[msg.sender].rentedDaisysTill - SpoTerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                SpoTerParlours[msg.sender].lastShippedVitaliksMilk = SpoTerParlours[msg.sender].rentedDaisysTill;\r\n                SpoTerParlours[msg.sender].owedMilk = false;\r\n            }       \r\n        }\r\n\r\n        if (MilQerParlours[msg.sender].ownsBessies == true && MilQerParlours[msg.sender].bessiesOwnedTill > block.timestamp) {\r\n            if (MilQerParlours[msg.sender].shipmentsRecieved != totalVitaliksMilkShipments) {\r\n                for (uint256 i = MilQerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                    MilQerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                    MilQerParlours[msg.sender].shipmentsRecieved ++;\r\n                }\r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments) {\r\n                milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (block.timestamp - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                MilQerParlours[msg.sender].lastShippedVitaliksMilk = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (MilQerParlours[msg.sender].ownsBessies == false && MilQerParlours[msg.sender].hasBessies == true && MilQerParlours[msg.sender].rentedBessiesTill > block.timestamp && MilQerParlours[msg.sender].owedMilk == true) {\r\n            if (MilQerParlours[msg.sender].shipmentsRecieved != totalVitaliksMilkShipments) {\r\n                for (uint256 i = MilQerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                    MilQerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                    MilQerParlours[msg.sender].shipmentsRecieved ++;\r\n                }\r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments){\r\n                milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (block.timestamp - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                MilQerParlours[msg.sender].lastShippedVitaliksMilk = block.timestamp;\r\n            }\r\n        }\r\n        \r\n        if (MilQerParlours[msg.sender].ownsBessies == true && MilQerParlours[msg.sender].bessiesOwnedTill <= block.timestamp && MilQerParlours[msg.sender].owedMilk == true) { \r\n            if (MilQerParlours[msg.sender].shipmentsRecieved < totalVitaliksMilkShipments) {\r\n                for (uint256 i = MilQerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n                    if (MilQerParlours[msg.sender].bessiesOwnedTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                        MilQerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                        MilQerParlours[msg.sender].shipmentsRecieved ++;\r\n                    }\r\n            \r\n                    if (MilQerParlours[msg.sender].bessiesOwnedTill <= VitaliksMilkShipments[i+1].timestamp){\r\n                        uint256 time = MilQerParlours[msg.sender].bessiesOwnedTill - MilQerParlours[msg.sender].lastShippedVitaliksMilk;\r\n                        milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * time;\r\n                        MilQerParlours[msg.sender].lastShippedVitaliksMilk = MilQerParlours[msg.sender].bessiesOwnedTill;\r\n                        MilQerParlours[msg.sender].owedMilk = false;\r\n                        break;   \r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments){\r\n                milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (MilQerParlours[msg.sender].bessiesOwnedTill - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                MilQerParlours[msg.sender].lastShippedVitaliksMilk = MilQerParlours[msg.sender].bessiesOwnedTill;\r\n                MilQerParlours[msg.sender].owedMilk = false;\r\n            }    \r\n        }\r\n  \r\n        if (MilQerParlours[msg.sender].ownsBessies == false && MilQerParlours[msg.sender].hasBessies == true && MilQerParlours[msg.sender].rentedBessiesTill <= block.timestamp  && MilQerParlours[msg.sender].owedMilk == true) {\r\n            if(MilQerParlours[msg.sender].shipmentsRecieved != totalVitaliksMilkShipments){\r\n                for (uint256 i = MilQerParlours[msg.sender].shipmentsRecieved; i < totalVitaliksMilkShipments; i++) {\r\n                    if (MilQerParlours[msg.sender].rentedBessiesTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                        MilQerParlours[msg.sender].lastShippedVitaliksMilk = VitaliksMilkShipments[i+1].timestamp;\r\n                        MilQerParlours[msg.sender].shipmentsRecieved ++;\r\n                    }\r\n        \r\n                    if (MilQerParlours[msg.sender].rentedBessiesTill <= VitaliksMilkShipments[i+1].timestamp){\r\n                        uint256 time = MilQerParlours[msg.sender].rentedBessiesTill - MilQerParlours[msg.sender].lastShippedVitaliksMilk;\r\n                        milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * time;\r\n                        MilQerParlours[msg.sender].lastShippedVitaliksMilk = MilQerParlours[msg.sender].rentedBessiesTill;\r\n                        MilQerParlours[msg.sender].owedMilk = false;\r\n                        break;   \r\n                    }   \r\n                }  \r\n            }\r\n\r\n            if (MilQerParlours[msg.sender].shipmentsRecieved == totalVitaliksMilkShipments){\r\n                milkFromBessies += (MilQerParlours[msg.sender].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (MilQerParlours[msg.sender].rentedBessiesTill - MilQerParlours[msg.sender].lastShippedVitaliksMilk);\r\n                MilQerParlours[msg.sender].lastShippedVitaliksMilk = MilQerParlours[msg.sender].rentedBessiesTill;\r\n                MilQerParlours[msg.sender].owedMilk = false;\r\n            }       \r\n        }\r\n\r\n        SpoTerParlours[msg.sender].vitaliksMilkClaimable += milkFromDaisys;\r\n        MilQerParlours[msg.sender].vitaliksMilkClaimable += milkFromBessies;\r\n        daisysMilkProduced += milkFromDaisys;\r\n        bessiesMilkProduced += milkFromBessies;      \r\n    }\r\n\r\n    function viewHowMuchMilk(address user) public view returns (uint256 Total) {\r\n        uint256 daisysShipped = SpoTerParlours[user].shipmentsRecieved;\r\n        uint256 daisysTimeShipped = SpoTerParlours[user].lastShippedVitaliksMilk;\r\n        uint256 bessiesShipped = MilQerParlours[user].shipmentsRecieved;\r\n        uint256 bessiesTimeShipped = MilQerParlours[user].lastShippedVitaliksMilk;\r\n        uint256 milkFromDaisys = 0;\r\n        uint256 milkFromBessies = 0;\r\n\r\n        if (SpoTerParlours[user].ownsDaisys == true && SpoTerParlours[user].daisysOwnedTill > block.timestamp) {\r\n            if (daisysShipped != totalVitaliksMilkShipments) {\r\n                for (uint256 i = daisysShipped; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - daisysTimeShipped);\r\n                    daisysTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                    daisysShipped ++;\r\n                }\r\n            }\r\n            \r\n            if (daisysShipped == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (block.timestamp - daisysTimeShipped);\r\n            }\r\n        }\r\n\r\n        if (SpoTerParlours[user].ownsDaisys == false && SpoTerParlours[user].hasDaisys == true && SpoTerParlours[user].rentedDaisysTill > block.timestamp) {\r\n            if (daisysShipped != totalVitaliksMilkShipments) {\r\n                for (uint256 i = daisysShipped; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - daisysTimeShipped);\r\n                    daisysTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                    daisysShipped ++;\r\n                }\r\n            }\r\n            \r\n            if (daisysShipped == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (block.timestamp - daisysTimeShipped);\r\n            }\r\n        }\r\n\r\n        if (SpoTerParlours[user].ownsDaisys == true && SpoTerParlours[user].daisysOwnedTill <= block.timestamp && SpoTerParlours[user].owedMilk == true) {\r\n            if(daisysShipped < totalVitaliksMilkShipments) { \r\n                for (uint256 i = daisysShipped; i < totalVitaliksMilkShipments; i++) {\r\n\r\n                    if (SpoTerParlours[user].daisysOwnedTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - daisysTimeShipped);\r\n                        daisysTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                        daisysShipped ++;\r\n                    }\r\n            \r\n                    if (SpoTerParlours[user].daisysOwnedTill <= VitaliksMilkShipments[i+1].timestamp) {\r\n                        uint256 time = SpoTerParlours[user].daisysOwnedTill - daisysTimeShipped;\r\n                        milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * time;\r\n                        break;   \r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (daisysShipped == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (SpoTerParlours[user].daisysOwnedTill - daisysTimeShipped);\r\n            } \r\n        }\r\n\r\n        if (SpoTerParlours[user].ownsDaisys == false && SpoTerParlours[user].hasDaisys == true && SpoTerParlours[user].rentedDaisysTill <= block.timestamp && SpoTerParlours[user].owedMilk == true) {\r\n            if(daisysShipped < totalVitaliksMilkShipments){\r\n                for (uint256 i = daisysShipped; i < totalVitaliksMilkShipments; i++) {\r\n                    if (SpoTerParlours[user].rentedDaisysTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * (VitaliksMilkShipments[i+1].timestamp - daisysTimeShipped);\r\n                        daisysTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                        daisysShipped ++;\r\n                    }\r\n         \r\n                    if (SpoTerParlours[user].rentedDaisysTill <= VitaliksMilkShipments[i+1].timestamp && SpoTerParlours[user].owedMilk == true){\r\n                        uint256 time = SpoTerParlours[user].rentedDaisysTill - daisysTimeShipped;\r\n                        milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[i].daisysOutput * time;\r\n                        break;   \r\n                    }   \r\n                }  \r\n            }\r\n\r\n            if (daisysShipped == totalVitaliksMilkShipments){\r\n                milkFromDaisys += (SpoTerParlours[user].daisys / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].daisysOutput * (SpoTerParlours[user].rentedDaisysTill - daisysTimeShipped);\r\n            }       \r\n        }\r\n\r\n        if (MilQerParlours[user].ownsBessies == true && MilQerParlours[user].bessiesOwnedTill > block.timestamp) {\r\n            if (bessiesShipped != totalVitaliksMilkShipments) {\r\n                for (uint256 i = bessiesShipped; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - bessiesTimeShipped);\r\n                    bessiesTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                    bessiesShipped ++;\r\n                }\r\n            }\r\n\r\n            if (bessiesShipped == totalVitaliksMilkShipments) {\r\n                milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (block.timestamp - bessiesTimeShipped);\r\n            }\r\n        }\r\n\r\n        if (MilQerParlours[user].ownsBessies == false && MilQerParlours[user].hasBessies == true && MilQerParlours[user].rentedBessiesTill > block.timestamp && MilQerParlours[user].owedMilk == true) {\r\n            if (bessiesShipped != totalVitaliksMilkShipments) {\r\n                for (uint256 i = bessiesShipped; i < totalVitaliksMilkShipments; i++) {\r\n                    milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - bessiesTimeShipped);\r\n                    bessiesTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                    bessiesShipped ++;\r\n                }\r\n            }\r\n\r\n            if (bessiesShipped == totalVitaliksMilkShipments){\r\n                milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (block.timestamp - bessiesTimeShipped);\r\n            }\r\n\r\n        }\r\n\r\n        if (MilQerParlours[user].ownsBessies == true && MilQerParlours[user].bessiesOwnedTill <= block.timestamp) { \r\n            if (bessiesShipped != totalVitaliksMilkShipments) {\r\n                for (uint256 i = bessiesShipped; i < totalVitaliksMilkShipments; i++) {\r\n                    if (MilQerParlours[user].bessiesOwnedTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - bessiesTimeShipped);\r\n                        bessiesTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                        bessiesShipped ++;\r\n                    }\r\n            \r\n                    if (MilQerParlours[user].bessiesOwnedTill <= VitaliksMilkShipments[i+1].timestamp && MilQerParlours[user].owedMilk == true){\r\n                        uint256 time = MilQerParlours[user].bessiesOwnedTill - bessiesTimeShipped;\r\n                        milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * time;\r\n                        break;   \r\n                    }   \r\n                }\r\n            }\r\n\r\n            if (bessiesShipped == totalVitaliksMilkShipments){\r\n                milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (MilQerParlours[user].bessiesOwnedTill - bessiesTimeShipped);\r\n            }    \r\n        }\r\n\r\n        if (MilQerParlours[user].ownsBessies == false && MilQerParlours[user].hasBessies == true && MilQerParlours[user].rentedBessiesTill <= block.timestamp) {\r\n            if(bessiesShipped != totalVitaliksMilkShipments){\r\n                for (uint256 i = bessiesShipped; i < totalVitaliksMilkShipments; i++) {\r\n                    if (MilQerParlours[user].rentedBessiesTill > VitaliksMilkShipments[i+1].timestamp) {\r\n                        milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * (VitaliksMilkShipments[i+1].timestamp - bessiesTimeShipped);\r\n                        bessiesTimeShipped = VitaliksMilkShipments[i+1].timestamp;\r\n                        bessiesShipped ++;\r\n                    }\r\n        \r\n                    if (MilQerParlours[user].rentedBessiesTill <= VitaliksMilkShipments[i+1].timestamp && MilQerParlours[user].owedMilk == true){\r\n                        uint256 time = MilQerParlours[user].rentedBessiesTill - bessiesTimeShipped;\r\n                        milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[i].bessiesOutput * time;\r\n                        break;   \r\n                    }   \r\n                }  \r\n            }\r\n\r\n            if (bessiesShipped == totalVitaliksMilkShipments){\r\n                milkFromBessies += (MilQerParlours[user].bessies / 1000000000000000000) * VitaliksMilkShipments[totalVitaliksMilkShipments].bessiesOutput * (MilQerParlours[user].rentedBessiesTill - bessiesTimeShipped);\r\n            }       \r\n        }\r\n\r\n        Total = milkFromDaisys + milkFromBessies; \r\n        return (Total);       \r\n    }\r\n\r\n    function QompoundSpoT(uint256 slippage) external {  \r\n        if (SpoTerParlours[msg.sender].hasDaisys == true){\r\n            shipSpoTersMilQ();\r\n        }\r\n\r\n        howMuchMilkV3();  \r\n  \r\n        uint256 spotAmt = SpoTerParlours[msg.sender].vitaliksMilkClaimable; \r\n        uint256 milqAmt = MilQerParlours[msg.sender].vitaliksMilkClaimable; \r\n        uint256 _ethAmount = spotAmt + milqAmt; \r\n  \r\n        address[] memory path = new address[](2);  \r\n        path[0] = uniswapRouter.WETH();  \r\n        path[1] = swapSpot;  \r\n  \r\n        uint256[] memory amountsOut = uniswapRouter.getAmountsOut(_ethAmount, path);  \r\n        uint256 minSpoTAmount = amountsOut[1];   \r\n  \r\n      \r\n        uint256 beforeBalance = IERC20(spoT).balanceOf(address(this));  \r\n        uint256 amountSlip = (minSpoTAmount * slippage) / 100;  \r\n        uint256 amountAfterSlip = minSpoTAmount - amountSlip;  \r\n  \r\n      \r\n        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _ethAmount}(  \r\n            amountAfterSlip,  \r\n            path,  \r\n            address(this),  \r\n            block.timestamp  \r\n        );  \r\n  \r\n        uint256 afterBalance = IERC20(spoT).balanceOf(address(this));  \r\n  \r\n        uint256 boughtAmount = afterBalance - beforeBalance;\r\n\r\n        if (SpoTerParlours[msg.sender].ownsDaisys == true) {\r\n            gspoT.transfer(msg.sender, boughtAmount);\r\n        }\r\n\r\n        if (SpoTerParlours[msg.sender].hasDaisys == true) { \r\n            SpoTerParlours[msg.sender].daisys += boughtAmount;  \r\n            SpoTerParlours[msg.sender].QompoundedMilk += _ethAmount;  \r\n            SpoTerParlours[msg.sender].vitaliksMilkClaimable = 0; \r\n            MilQerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n        }\r\n\r\n        if (SpoTerParlours[msg.sender].hasDaisys == false) {\r\n            SpoTerParlours[msg.sender].daisys += boughtAmount;\r\n            SpoTerParlours[msg.sender].rentedDaisysSince = block.timestamp;\r\n            SpoTerParlours[msg.sender].rentedDaisysTill = block.timestamp + daisysRentalTime; \r\n            SpoTerParlours[msg.sender].daisysOwnedSince = 0;\r\n            SpoTerParlours[msg.sender].daisysOwnedTill = 32503680000;\r\n            SpoTerParlours[msg.sender].hasDaisys = true;\r\n            SpoTerParlours[msg.sender].ownsDaisys = false;\r\n            SpoTerParlours[msg.sender].vitaliksMilkShipped = 0;\r\n            SpoTerParlours[msg.sender].QompoundedMilk = 0;\r\n            SpoTerParlours[msg.sender].lastShippedVitaliksMilk = block.timestamp;\r\n            SpoTerParlours[msg.sender].shipmentsRecieved = totalVitaliksMilkShipments;\r\n            SpoTerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n            SpoTerParlours[msg.sender].owedMilk = true;\r\n            LpClaims[msg.sender].lastClaimed = totalMilQClaimed;\r\n            LpClaims[msg.sender].totalClaimed = 0;\r\n            MilQerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n            daisys += boughtAmount;\r\n            spoTers ++;\r\n        }\r\n\r\n        daisys += boughtAmount;\r\n        vitaliksMilkQompounded += _ethAmount;\r\n        emit Qompound(msg.sender, _ethAmount, boughtAmount);\r\n    }\r\n        \r\n    function shipMilk() public {   \r\n          \r\n        howMuchMilkV3();\r\n\r\n        uint256 spot = SpoTerParlours[msg.sender].vitaliksMilkClaimable;\r\n        uint256 lp = MilQerParlours[msg.sender].vitaliksMilkClaimable;\r\n        uint256 amount = spot + lp;\r\n\r\n        require(address(this).balance >= amount);\r\n\r\n        payable(msg.sender).transfer(amount);\r\n\r\n        SpoTerParlours[msg.sender].vitaliksMilkShipped += spot;\r\n        MilQerParlours[msg.sender].vitaliksMilkShipped += lp;\r\n        SpoTerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n        MilQerParlours[msg.sender].vitaliksMilkClaimable = 0;\r\n        vitaliksMilkShipped += amount;\r\n\r\n        if (amount > highClaimThreshold){\r\n            emit highClaim(msg.sender,amount);\r\n        }\r\n\r\n        if(address(this).balance < lowBalanceThreshold){\r\n            emit lowBalance(block.timestamp,address(this).balance);\r\n        }    \r\n    }\r\n\r\n    function shipFarmMilQ() external onlyOwner {\r\n\r\n        uint256 beforeBalance = IERC20(milQ).balanceOf(address(this)); \r\n\r\n        ISPOT.claim();\r\n\r\n        uint256 afterBalance = IERC20(milQ).balanceOf(address(this));\r\n\r\n        uint256 claimed = afterBalance - beforeBalance;\r\n\r\n         uint256 PerSpoT = (claimed * 10**18) / daisys;\r\n\r\n        uint256 index = MilqShipments;\r\n\r\n        MilQShipments[index] = MilQShipment(block.timestamp, claimed, daisys,PerSpoT);\r\n\r\n        MilqShipments++;\r\n\r\n        totalMilQClaimed += claimed;\r\n    }\r\n\r\n    function shipSpoTersMilQ() public {  \r\n        uint256 CurrrentDis = totalMilQClaimed - LpClaims[msg.sender].lastClaimed;  \r\n        uint256 tokensStaked = SpoTerParlours[msg.sender].daisys;  \r\n         uint256 divDaisys = daisys / 10**18; \r\n        uint256 percentOwned = ((tokensStaked * 100) / divDaisys); \r\n        uint256 userDistro = CurrrentDis * (percentOwned / 100); \r\n        uint256 userDistroAmount = userDistro / 10**18; \r\n        milQ.transfer(msg.sender, userDistroAmount); \r\n  \r\n        MilQerParlours[msg.sender].milQClaimed += userDistroAmount;\r\n        LpClaims[msg.sender].lastClaimed = totalMilQClaimed;  \r\n        LpClaims[msg.sender].totalClaimed += userDistroAmount;  \r\n    }  \r\n  \r\n    function checkEstMilQRewards(address user) public view returns (uint256){  \r\n        uint256 CurrrentDis = totalMilQClaimed - LpClaims[user].lastClaimed;  \r\n        uint256 tokensStaked = SpoTerParlours[user].daisys;  \r\n        uint256 divDaisys = daisys / 10**18; \r\n        uint256 percentOwned = ((tokensStaked * 100) / divDaisys); \r\n        uint256 userDistro = CurrrentDis * (percentOwned / 100); \r\n        uint256 userDistroAmount = userDistro / 10**18; \r\n \r\n        return userDistroAmount;  \r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_milQAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gspoTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oddysParlour\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtAmount\",\"type\":\"uint256\"}],\"name\":\"Qompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"User\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"highClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"lowBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"milq\",\"type\":\"uint256\"}],\"name\":\"newStaQe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBessies\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDaisys\",\"type\":\"uint256\"}],\"name\":\"rewardChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ISPOT\",\"outputs\":[{\"internalType\":\"contract iSpot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LpClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MilQShipments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MilQShipped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalspoTStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerspoT\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MilQerParlours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bessies\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentedBessiesSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentedBessiesTill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milQClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vitaliksMilkShipped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastShippedVitaliksMilk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vitaliksMilkClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bessiesOwnedSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bessiesOwnedTill\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasBessies\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ownsBessies\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"owedMilk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shipmentsRecieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MilqShipments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"QompoundSpoT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SpoTerParlours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daisys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentedDaisysSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentedDaisysTill\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vitaliksMilkShipped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastShippedVitaliksMilk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vitaliksMilkClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"QompoundedMilk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daisysOwnedSince\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daisysOwnedTill\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasDaisys\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ownsDaisys\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"owedMilk\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shipmentsRecieved\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VitaliksMilkShipments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daisysOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bessiesOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bessies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bessiesMilkProduced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bessiesRentalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bessiesRentalTime\",\"type\":\"uint256\"}],\"name\":\"changeBessiesRentalTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daisysRentalTime\",\"type\":\"uint256\"}],\"name\":\"changeDaisysRentalTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minMilQ\",\"type\":\"uint256\"}],\"name\":\"changeMinMilQ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSpoT\",\"type\":\"uint256\"}],\"name\":\"changeMinSpoT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundUpBessiesTime\",\"type\":\"uint256\"}],\"name\":\"changeRoundUpBessiesTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_roundUpDaisysTime\",\"type\":\"uint256\"}],\"name\":\"changeRoundUpDaisysTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkEstMilQRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daisys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daisysMilkProduced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daisysRentalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getprepShipment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"milQers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oddysParlour\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cow\",\"type\":\"uint256\"}],\"name\":\"ownCows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pauseStaQing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daisysOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bessiesOutput\",\"type\":\"uint256\"}],\"name\":\"prepShipment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVitaliksMilk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundUpBessiesTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cow\",\"type\":\"uint256\"}],\"name\":\"roundUpCows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundUpDaisysTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daisysToOddysParlour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bessiesToOddysParlour\",\"type\":\"uint256\"}],\"name\":\"rushOddyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_gspoT\",\"type\":\"address\"}],\"name\":\"setGspoTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"setLowBalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oddysParlour\",\"type\":\"address\"}],\"name\":\"setOddysParlour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"sethighClaimThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipFarmMilQ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipMilk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shipSpoTersMilQ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spoTers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountSpoT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountMilQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"staQe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMilQClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVitaliksMilkShipments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amtSpoT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amtMilQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"unstaQe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewHowMuchMilk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vitaliksMilkQompounded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vitaliksMilkShipped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Amt\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SpoTFarm", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000053020f42f6da51b50cf6e23e45266ef223122376000000000000000000000000c0e1cb42ec3e2dc239f080a2c98659f58cbce9ed000000000000000000000000cd3d16d9508848444be282a2e8cec76ea48e741b00000000000000000000000063592884232b279deb263a53e156998ec93e90420000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b212618b237af74c8347bce313dc8a7fd3ba60e94309083f81ddcd6d16e25d18"}