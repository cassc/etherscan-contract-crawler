{"SourceCode": "// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B7~&@@@@@@@@@@@@@@@@G!:&@@@@@@@@@@@@@@@&5~.&@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&P~    P@@@@@@@@@@@@&Y^    G@@@@@@@@@@@@#J:    G@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#J:       G@@@@@@@@@B7.       G@@@@@@@@&G!.       G@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@G!.          G@@@@@&P~           B@@@@@&Y:           G@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@&Y^              ~&&#J:              ^#&B7.              G@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@#7.                                                         &@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@G                                                         ^5&@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@J              ^5&@&:              ~P&@&:             .7B@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@J          .!G@@@@@@J          .?B@@@@@@J          :Y#@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@J       :J#@@@@@@@@@J       ^5&@@@@@@@@@?      .~P&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@J    ~P&@@@@@@@@@@@@J   .7B@@@@@@@@@@@@@?   :?#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@B^?B@@@@@@@@@@@@@@@@B~J#@@@@@@@@@@@@@@@@#!5&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@                                                                                                @@\r\n// @@   This token was launched using software provided by Metadrop. To learn more or to launch      @@\r\n// @@   your own token, visit: https://metadrop.com. See legal info at the end of this file.         @@\r\n// @@                                                                                                @@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@                                                                                                @@\r\n// @@   To view this token project's official links:                                                 @@\r\n// @@                                                                                                @@\r\n// @@   Step 1) On Etherscan, under the 'Contract' tab, click 'Read Contract'.                       @@\r\n// @@   Step 2) Select one of the following read functions to view the official link:                @@\r\n// @@       * _1___telegram                                                                          @@\r\n// @@       * _2___twitter                                                                           @@\r\n// @@       * _3___website                                                                           @@\r\n// @@                                                                                                @@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\n// SPDX-License-Identifier: BUSL-1.1\r\n// Metadrop Contracts (v2.1.0)\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `to`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `from` to `to` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.9.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the decimals places of the token.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint amountTokenDesired,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n  function removeLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountA, uint amountB);\r\n\r\n  function removeLiquidityETH(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountToken, uint amountETH);\r\n\r\n  function removeLiquidityWithPermit(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint liquidity,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint amountA, uint amountB);\r\n\r\n  function removeLiquidityETHWithPermit(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint amountToken, uint amountETH);\r\n\r\n  function swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n\r\n  function swapTokensForExactTokens(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n\r\n  function swapExactETHForTokens(\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external payable returns (uint[] memory amounts);\r\n\r\n  function swapTokensForExactETH(\r\n    uint amountOut,\r\n    uint amountInMax,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n\r\n  function swapExactTokensForETH(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n\r\n  function swapETHForExactTokens(\r\n    uint amountOut,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external payable returns (uint[] memory amounts);\r\n\r\n  function quote(\r\n    uint amountA,\r\n    uint reserveA,\r\n    uint reserveB\r\n  ) external pure returns (uint amountB);\r\n\r\n  function getAmountOut(\r\n    uint amountIn,\r\n    uint reserveIn,\r\n    uint reserveOut\r\n  ) external pure returns (uint amountOut);\r\n\r\n  function getAmountIn(\r\n    uint amountOut,\r\n    uint reserveIn,\r\n    uint reserveOut\r\n  ) external pure returns (uint amountIn);\r\n\r\n  function getAmountsOut(\r\n    uint amountIn,\r\n    address[] calldata path\r\n  ) external view returns (uint[] memory amounts);\r\n\r\n  function getAmountsIn(\r\n    uint amountOut,\r\n    address[] calldata path\r\n  ) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountETH);\r\n\r\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n    address token,\r\n    uint liquidity,\r\n    uint amountTokenMin,\r\n    uint amountETHMin,\r\n    address to,\r\n    uint deadline,\r\n    bool approveMax,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external returns (uint amountETH);\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.1\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes calldata) {\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.9.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n  // To implement this library for multiple types with as little code\r\n  // repetition as possible, we write it in terms of a generic Set type with\r\n  // bytes32 values.\r\n  // The Set implementation uses private functions, and user-facing\r\n  // implementations (such as AddressSet) are just wrappers around the\r\n  // underlying Set.\r\n  // This means that we can only create new EnumerableSets for types that fit\r\n  // in bytes32.\r\n\r\n  struct Set {\r\n    // Storage of set values\r\n    bytes32[] _values;\r\n    // Position of the value in the `values` array, plus 1 because index 0\r\n    // means a value is not in the set.\r\n    mapping(bytes32 => uint256) _indexes;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   *\r\n   * Returns true if the value was added to the set, that is if it was not\r\n   * already present.\r\n   */\r\n  function _add(Set storage set, bytes32 value) private returns (bool) {\r\n    if (!_contains(set, value)) {\r\n      set._values.push(value);\r\n      // The value is stored at length-1, but we add 1 to all indexes\r\n      // and use 0 as a sentinel value\r\n      set._indexes[value] = set._values.length;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   *\r\n   * Returns true if the value was removed from the set, that is if it was\r\n   * present.\r\n   */\r\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n    // We read and store the value's index to prevent multiple reads from the same storage slot\r\n    uint256 valueIndex = set._indexes[value];\r\n\r\n    if (valueIndex != 0) {\r\n      // Equivalent to contains(set, value)\r\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n      // This modifies the order of the array, as noted in {at}.\r\n\r\n      uint256 toDeleteIndex = valueIndex - 1;\r\n      uint256 lastIndex = set._values.length - 1;\r\n\r\n      if (lastIndex != toDeleteIndex) {\r\n        bytes32 lastValue = set._values[lastIndex];\r\n\r\n        // Move the last value to the index where the value to delete is\r\n        set._values[toDeleteIndex] = lastValue;\r\n        // Update the index for the moved value\r\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n      }\r\n\r\n      // Delete the slot where the moved value was stored\r\n      set._values.pop();\r\n\r\n      // Delete the index for the deleted slot\r\n      delete set._indexes[value];\r\n\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function _contains(\r\n    Set storage set,\r\n    bytes32 value\r\n  ) private view returns (bool) {\r\n    return set._indexes[value] != 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of values on the set. O(1).\r\n   */\r\n  function _length(Set storage set) private view returns (uint256) {\r\n    return set._values.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the value stored at position `index` in the set. O(1).\r\n   *\r\n   * Note that there are no guarantees on the ordering of values inside the\r\n   * array, and it may change when more values are added or removed.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `index` must be strictly less than {length}.\r\n   */\r\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n    return set._values[index];\r\n  }\r\n\r\n  /**\r\n   * @dev Return the entire set in an array\r\n   *\r\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n   */\r\n  function _values(Set storage set) private view returns (bytes32[] memory) {\r\n    return set._values;\r\n  }\r\n\r\n  // Bytes32Set\r\n\r\n  struct Bytes32Set {\r\n    Set _inner;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   *\r\n   * Returns true if the value was added to the set, that is if it was not\r\n   * already present.\r\n   */\r\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n    return _add(set._inner, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   *\r\n   * Returns true if the value was removed from the set, that is if it was\r\n   * present.\r\n   */\r\n  function remove(\r\n    Bytes32Set storage set,\r\n    bytes32 value\r\n  ) internal returns (bool) {\r\n    return _remove(set._inner, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function contains(\r\n    Bytes32Set storage set,\r\n    bytes32 value\r\n  ) internal view returns (bool) {\r\n    return _contains(set._inner, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of values in the set. O(1).\r\n   */\r\n  function length(Bytes32Set storage set) internal view returns (uint256) {\r\n    return _length(set._inner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the value stored at position `index` in the set. O(1).\r\n   *\r\n   * Note that there are no guarantees on the ordering of values inside the\r\n   * array, and it may change when more values are added or removed.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `index` must be strictly less than {length}.\r\n   */\r\n  function at(\r\n    Bytes32Set storage set,\r\n    uint256 index\r\n  ) internal view returns (bytes32) {\r\n    return _at(set._inner, index);\r\n  }\r\n\r\n  /**\r\n   * @dev Return the entire set in an array\r\n   *\r\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n   */\r\n  function values(\r\n    Bytes32Set storage set\r\n  ) internal view returns (bytes32[] memory) {\r\n    bytes32[] memory store = _values(set._inner);\r\n    bytes32[] memory result;\r\n\r\n    /// @solidity memory-safe-assembly\r\n    assembly {\r\n      result := store\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // AddressSet\r\n\r\n  struct AddressSet {\r\n    Set _inner;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   *\r\n   * Returns true if the value was added to the set, that is if it was not\r\n   * already present.\r\n   */\r\n  function add(AddressSet storage set, address value) internal returns (bool) {\r\n    return _add(set._inner, bytes32(uint256(uint160(value))));\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   *\r\n   * Returns true if the value was removed from the set, that is if it was\r\n   * present.\r\n   */\r\n  function remove(\r\n    AddressSet storage set,\r\n    address value\r\n  ) internal returns (bool) {\r\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function contains(\r\n    AddressSet storage set,\r\n    address value\r\n  ) internal view returns (bool) {\r\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of values in the set. O(1).\r\n   */\r\n  function length(AddressSet storage set) internal view returns (uint256) {\r\n    return _length(set._inner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the value stored at position `index` in the set. O(1).\r\n   *\r\n   * Note that there are no guarantees on the ordering of values inside the\r\n   * array, and it may change when more values are added or removed.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `index` must be strictly less than {length}.\r\n   */\r\n  function at(\r\n    AddressSet storage set,\r\n    uint256 index\r\n  ) internal view returns (address) {\r\n    return address(uint160(uint256(_at(set._inner, index))));\r\n  }\r\n\r\n  /**\r\n   * @dev Return the entire set in an array\r\n   *\r\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n   */\r\n  function values(\r\n    AddressSet storage set\r\n  ) internal view returns (address[] memory) {\r\n    bytes32[] memory store = _values(set._inner);\r\n    address[] memory result;\r\n\r\n    /// @solidity memory-safe-assembly\r\n    assembly {\r\n      result := store\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  // UintSet\r\n\r\n  struct UintSet {\r\n    Set _inner;\r\n  }\r\n\r\n  /**\r\n   * @dev Add a value to a set. O(1).\r\n   *\r\n   * Returns true if the value was added to the set, that is if it was not\r\n   * already present.\r\n   */\r\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n    return _add(set._inner, bytes32(value));\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a value from a set. O(1).\r\n   *\r\n   * Returns true if the value was removed from the set, that is if it was\r\n   * present.\r\n   */\r\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n    return _remove(set._inner, bytes32(value));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the value is in the set. O(1).\r\n   */\r\n  function contains(\r\n    UintSet storage set,\r\n    uint256 value\r\n  ) internal view returns (bool) {\r\n    return _contains(set._inner, bytes32(value));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of values in the set. O(1).\r\n   */\r\n  function length(UintSet storage set) internal view returns (uint256) {\r\n    return _length(set._inner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the value stored at position `index` in the set. O(1).\r\n   *\r\n   * Note that there are no guarantees on the ordering of values inside the\r\n   * array, and it may change when more values are added or removed.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `index` must be strictly less than {length}.\r\n   */\r\n  function at(\r\n    UintSet storage set,\r\n    uint256 index\r\n  ) internal view returns (uint256) {\r\n    return uint256(_at(set._inner, index));\r\n  }\r\n\r\n  /**\r\n   * @dev Return the entire set in an array\r\n   *\r\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n   */\r\n  function values(\r\n    UintSet storage set\r\n  ) internal view returns (uint256[] memory) {\r\n    bytes32[] memory store = _values(set._inner);\r\n    uint256[] memory result;\r\n\r\n    /// @solidity memory-safe-assembly\r\n    assembly {\r\n      result := store\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n  event PairCreated(\r\n    address indexed token0,\r\n    address indexed token1,\r\n    address pair,\r\n    uint\r\n  );\r\n\r\n  function feeTo() external view returns (address);\r\n\r\n  function feeToSetter() external view returns (address);\r\n\r\n  function getPair(\r\n    address tokenA,\r\n    address tokenB\r\n  ) external view returns (address pair);\r\n\r\n  function allPairs(uint) external view returns (address pair);\r\n\r\n  function allPairsLength() external view returns (uint);\r\n\r\n  function createPair(\r\n    address tokenA,\r\n    address tokenB\r\n  ) external returns (address pair);\r\n\r\n  function setFeeTo(address) external;\r\n\r\n  function setFeeToSetter(address) external;\r\n}\r\n\r\n// File contracts/ERC20Factory/ERC20/IERC20ConfigByMetadrop.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title IERC20ByMetadrop.sol. Interface for metadrop ERC20 standard\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IERC20ConfigByMetadrop {\r\n  struct ERC20Config {\r\n    bytes baseParameters;\r\n    bytes supplyParameters;\r\n    bytes taxParameters;\r\n    bytes poolParameters;\r\n  }\r\n\r\n  struct ERC20BaseParameters {\r\n    string name;\r\n    string symbol;\r\n    string website;\r\n    string twitter;\r\n    string telegram;\r\n    string otherSocials;\r\n    bool addLiquidityOnCreate;\r\n    bool usesDRIPool;\r\n  }\r\n\r\n  struct ERC20SupplyParameters {\r\n    uint256 maxSupply;\r\n    uint256 lpSupply;\r\n    uint256 projectSupply;\r\n    uint256 maxTokensPerWallet;\r\n    uint256 maxTokensPerTxn;\r\n    uint256 lpLockupInDays;\r\n    uint256 botProtectionDurationInSeconds;\r\n    address projectSupplyRecipient;\r\n    address projectLPOwner;\r\n    bool burnLPTokens; // added in v3\r\n  }\r\n\r\n  struct ERC20TaxParameters {\r\n    uint256 projectBuyTaxBasisPoints;\r\n    uint256 projectSellTaxBasisPoints;\r\n    //uint256 maxProjectBuyTaxBasisPoints; removed in v3\r\n    //uint256 maxProjectSellTaxBasisPoints; removed in v3\r\n    uint256 taxSwapThresholdBasisPoints;\r\n    uint256 metadropBuyTaxBasisPoints;\r\n    uint256 metadropSellTaxBasisPoints;\r\n    //uint256 maxMetadropBuyTaxBasisPoints; removed in v3\r\n    //uint256 maxMetadropSellTaxBasisPoints; removed in v3\r\n    uint256 metadropTaxPeriodInDays;\r\n    address projectTaxRecipient;\r\n    address metadropTaxRecipient;\r\n  }\r\n\r\n  struct ERC20PoolParameters {\r\n    uint256 poolSupply;\r\n    uint256 poolStartDate;\r\n    uint256 poolEndDate;\r\n    uint256 poolVestingInDays;\r\n    uint256 poolMaxETH;\r\n    uint256 poolPerAddressMaxETH;\r\n    uint256 poolMinETH;\r\n    uint256 poolPerTransactionMinETH;\r\n  }\r\n}\r\n\r\n// File contracts/Global/IConfigStructures.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title IConfigStructures.sol. Interface for common config structures used accross the platform\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IConfigStructures {\r\n  enum DropStatus {\r\n    approved,\r\n    deployed,\r\n    cancelled\r\n  }\r\n\r\n  enum TemplateStatus {\r\n    live,\r\n    terminated\r\n  }\r\n\r\n  // The current status of the mint:\r\n  //   - notEnabled: This type of mint is not part of this drop\r\n  //   - notYetOpen: This type of mint is part of the drop, but it hasn't started yet\r\n  //   - open: it's ready for ya, get in there.\r\n  //   - finished: been and gone.\r\n  //   - unknown: theoretically impossible.\r\n  enum MintStatus {\r\n    notEnabled,\r\n    notYetOpen,\r\n    open,\r\n    finished,\r\n    unknown\r\n  }\r\n\r\n  struct SubListConfig {\r\n    uint256 start;\r\n    uint256 end;\r\n    uint256 phaseMaxSupply;\r\n  }\r\n\r\n  struct PrimarySaleModuleInstance {\r\n    address instanceAddress;\r\n    string instanceDescription;\r\n  }\r\n\r\n  struct NFTModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n    bytes vestingData;\r\n  }\r\n\r\n  struct PrimarySaleModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n  }\r\n\r\n  struct ProjectBeneficiary {\r\n    address payable payeeAddress;\r\n    uint256 payeeShares;\r\n  }\r\n\r\n  struct VestingConfig {\r\n    uint256 start;\r\n    uint256 projectUpFrontShare;\r\n    uint256 projectVestedShare;\r\n    uint256 vestingPeriodInDays;\r\n    uint256 vestingCliff;\r\n    ProjectBeneficiary[] projectPayees;\r\n  }\r\n\r\n  struct RoyaltySplitterModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n  }\r\n\r\n  struct InLifeModuleConfig {\r\n    uint256 templateId;\r\n    bytes configData;\r\n  }\r\n\r\n  struct InLifeModules {\r\n    InLifeModuleConfig[] modules;\r\n  }\r\n\r\n  struct NFTConfig {\r\n    uint256 supply;\r\n    string name;\r\n    string symbol;\r\n    bytes32 positionProof;\r\n    bool includePriorPhasesInMintTracking;\r\n    bool singleMetadataCollection;\r\n    uint256 reservedAllocation;\r\n    uint256 assistanceRequestWindowInSeconds;\r\n  }\r\n\r\n  struct Template {\r\n    TemplateStatus status;\r\n    uint16 templateNumber;\r\n    uint32 loadedDate;\r\n    address payable templateAddress;\r\n    string templateDescription;\r\n  }\r\n\r\n  struct RoyaltyDetails {\r\n    address newRoyaltyPaymentSplitterInstance;\r\n    uint96 royaltyFromSalesInBasisPoints;\r\n  }\r\n\r\n  struct SignedDropMessageDetails {\r\n    uint256 messageTimeStamp;\r\n    bytes32 messageHash;\r\n    bytes messageSignature;\r\n  }\r\n}\r\n\r\n// File contracts/ERC20Factory/ERC20/IERC20ByMetadrop.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @dev Metadrop core ERC-20 contract, interface\r\n */\r\ninterface IERC20ByMetadrop is\r\n  IConfigStructures,\r\n  IERC20,\r\n  IERC20ConfigByMetadrop,\r\n  IERC20Metadata\r\n{\r\n  struct SocialLinks {\r\n    string linkType;\r\n    string link;\r\n  }\r\n\r\n  event AutoSwapThresholdUpdated(uint256 oldThreshold, uint256 newThreshold);\r\n\r\n  event ExternalCallError(uint256 identifier);\r\n\r\n  event InitialLiquidityAdded(uint256 tokenA, uint256 tokenB, uint256 lpToken);\r\n\r\n  event LimitsUpdated(\r\n    uint256 oldMaxTokensPerTransaction,\r\n    uint256 newMaxTokensPerTransaction,\r\n    uint256 oldMaxTokensPerWallet,\r\n    uint256 newMaxTokensPerWallet\r\n  );\r\n\r\n  event LinksUpdated();\r\n\r\n  event LiquidityLocked(uint256 lpTokens, uint256 lpLockupInDays);\r\n\r\n  event LiquidityBurned(uint256 lpTokens);\r\n\r\n  event LiquidityPoolCreated(address addedPool);\r\n\r\n  event LiquidityPoolAdded(address addedPool);\r\n\r\n  event LiquidityPoolRemoved(address removedPool);\r\n\r\n  event MetadropTaxBasisPointsChanged(\r\n    uint256 oldBuyBasisPoints,\r\n    uint256 newBuyBasisPoints,\r\n    uint256 oldSellBasisPoints,\r\n    uint256 newSellBasisPoints\r\n  );\r\n\r\n  event ProjectTaxBasisPointsChanged(\r\n    uint256 oldBuyBasisPoints,\r\n    uint256 newBuyBasisPoints,\r\n    uint256 oldSellBasisPoints,\r\n    uint256 newSellBasisPoints\r\n  );\r\n\r\n  event RevenueAutoSwap();\r\n\r\n  event ProjectTaxRecipientUpdated(address treasury);\r\n\r\n  event UnlimitedAddressAdded(address addedUnlimted);\r\n\r\n  event UnlimitedAddressRemoved(address removedUnlimted);\r\n\r\n  event ValidCallerAdded(bytes32 addedValidCaller);\r\n\r\n  event ValidCallerRemoved(bytes32 removedValidCaller);\r\n\r\n  /**\r\n   * @dev function {_1___telegram}\r\n   *\r\n   * Returns the stored telegram address\r\n   *\r\n   * @return string The telegram address\r\n   */\r\n  function _1___telegram() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev function {_2___twitter}\r\n   *\r\n   * Returns the stored twitter address\r\n   *\r\n   * @return string The twitter address\r\n   */\r\n  function _2___twitter() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev function {_3___website}\r\n   *\r\n   * Returns the stored website address\r\n   *\r\n   * @return string The website address\r\n   */\r\n  function _3___website() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev function {_4___other}\r\n   *\r\n   * Returns the stored other link address\r\n   *\r\n   * @return string The other link address\r\n   */\r\n  function _4___other() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev function {addInitialLiquidity}\r\n   *\r\n   * Add initial liquidity to the uniswap pair\r\n   *\r\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\r\n   * @param lpLockupInDaysOverride_ The number of days to lock liquidity NOTE you can pass 0 to use the stored value.\r\n   * This value is an override, and will override a stored value which is LOWER that it. If the value you are passing is\r\n   * LOWER than the stored value the stored value will not be reduced.\r\n   *\r\n   * Example usage 1: When creating the coin the lpLockupInDays is set to 0. This means that on this call the\r\n   * user can set the lockup to any value they like, as all integer values greater than zero will be used to override\r\n   * that set in storage.\r\n   *\r\n   * Example usage 2: When using a DRI Pool the lockup period is set on this contract and the pool need not know anything\r\n   * about this setting. The pool can pass back a 0 on this call and know that the existing value stored on this contract\r\n   * will be used.\r\n   * @param burnLPTokensOverride_ If the LP tokens should be burned (otherwise they are locked). This is an override field\r\n   * that can ONLY be used to override a held value of FALSE with a new value of TRUE.\r\n   *\r\n   * Example usage 1: When creating the coin the user didn't add liquidity, or specify that the LP tokens were to be burned.\r\n   * So burnLPTokens is held as FALSE. When they add liquidity they want to lock tokens, so they pass this in as FALSE again,\r\n   * and it remains FALSE.\r\n   *\r\n   * Example usage 2: As above, but when later adding liquidity the user wants to burn the LP. So the stored value is FALSE\r\n   * and the user passes TRUE into this method. The TRUE overrides the held value of FALSE and the tokens are burned.\r\n   *\r\n   * Example uusage 3: The user is using a DRI pool and they have specified on the coin creation that the LP tokens are to\r\n   * be burned. This contract therefore holds TRUE for burnLPTokens. The DRI pool does not need to know what the user has\r\n   * selected. It can safely pass back FALSE to this method call and the stored value of TRUE will remain, resulting in the\r\n   * LP tokens being burned.\r\n   */\r\n  function addInitialLiquidity(\r\n    uint256 vaultFee_,\r\n    uint256 lpLockupInDaysOverride_,\r\n    bool burnLPTokensOverride_\r\n  ) external payable;\r\n\r\n  /**\r\n   * @dev function {updateLinks} onlyOwner\r\n   *\r\n   * Allows the owner to update links\r\n   *\r\n   * @param linkHasChanged_ a bool array, set to true where the corresponding link has been updated\r\n   * @param links_ a string array, holds updated links\r\n   */\r\n  function updateLinks(\r\n    bool[4] memory linkHasChanged_,\r\n    string[4] memory links_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {isLiquidityPool}\r\n   *\r\n   * Return if an address is a liquidity pool\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't a liquidity pool\r\n   */\r\n  function isLiquidityPool(address queryAddress_) external view returns (bool);\r\n\r\n  /**\r\n   * @dev function {liquidityPools}\r\n   *\r\n   * Returns a list of all liquidity pools\r\n   *\r\n   * @return liquidityPools_ a list of all liquidity pools\r\n   */\r\n  function liquidityPools()\r\n    external\r\n    view\r\n    returns (address[] memory liquidityPools_);\r\n\r\n  /**\r\n   * @dev function {addLiquidityPool} onlyOwner\r\n   *\r\n   * Allows the manager to add a liquidity pool to the pool enumerable set\r\n   *\r\n   * @param newLiquidityPool_ The address of the new liquidity pool\r\n   */\r\n  function addLiquidityPool(address newLiquidityPool_) external;\r\n\r\n  /**\r\n   * @dev function {removeLiquidityPool} onlyOwner\r\n   *\r\n   * Allows the manager to remove a liquidity pool\r\n   *\r\n   * @param removedLiquidityPool_ The address of the old removed liquidity pool\r\n   */\r\n  function removeLiquidityPool(address removedLiquidityPool_) external;\r\n\r\n  /**\r\n   * @dev function {isUnlimited}\r\n   *\r\n   * Return if an address is unlimited (is not subject to per txn and per wallet limits)\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't unlimited\r\n   */\r\n  function isUnlimited(address queryAddress_) external view returns (bool);\r\n\r\n  /**\r\n   * @dev function {unlimitedAddresses}\r\n   *\r\n   * Returns a list of all unlimited addresses\r\n   *\r\n   * @return unlimitedAddresses_ a list of all unlimited addresses\r\n   */\r\n  function unlimitedAddresses()\r\n    external\r\n    view\r\n    returns (address[] memory unlimitedAddresses_);\r\n\r\n  /**\r\n   * @dev function {addUnlimited} onlyOwner\r\n   *\r\n   * Allows the manager to add an unlimited address\r\n   *\r\n   * @param newUnlimited_ The address of the new unlimited address\r\n   */\r\n  function addUnlimited(address newUnlimited_) external;\r\n\r\n  /**\r\n   * @dev function {removeUnlimited} onlyOwner\r\n   *\r\n   * Allows the manager to remove an unlimited address\r\n   *\r\n   * @param removedUnlimited_ The address of the old removed unlimited address\r\n   */\r\n  function removeUnlimited(address removedUnlimited_) external;\r\n\r\n  /**\r\n   * @dev function {isValidCaller}\r\n   *\r\n   * Return if an address is a valid caller\r\n   *\r\n   * @param queryHash_ The code hash being queried\r\n   * @return bool The address is / isn't a valid caller\r\n   */\r\n  function isValidCaller(bytes32 queryHash_) external view returns (bool);\r\n\r\n  /**\r\n   * @dev function {validCallers}\r\n   *\r\n   * Returns a list of all valid caller code hashes\r\n   *\r\n   * @return validCallerHashes_ a list of all valid caller code hashes\r\n   */\r\n  function validCallers()\r\n    external\r\n    view\r\n    returns (bytes32[] memory validCallerHashes_);\r\n\r\n  /**\r\n   * @dev function {addValidCaller} onlyOwner\r\n   *\r\n   * Allows the owner to add the hash of a valid caller\r\n   *\r\n   * @param newValidCallerHash_ The hash of the new valid caller\r\n   */\r\n  function addValidCaller(bytes32 newValidCallerHash_) external;\r\n\r\n  /**\r\n   * @dev function {removeValidCaller} onlyOwner\r\n   *\r\n   * Allows the owner to remove a valid caller\r\n   *\r\n   * @param removedValidCallerHash_ The hash of the old removed valid caller\r\n   */\r\n  function removeValidCaller(bytes32 removedValidCallerHash_) external;\r\n\r\n  /**\r\n   * @dev function {setProjectTaxRecipient} onlyOwner\r\n   *\r\n   * Allows the manager to set the project tax recipient address\r\n   *\r\n   * @param projectTaxRecipient_ New recipient address\r\n   */\r\n  function setProjectTaxRecipient(address projectTaxRecipient_) external;\r\n\r\n  /**\r\n   * @dev function {setSwapThresholdBasisPoints} onlyOwner\r\n   *\r\n   * Allows the manager to set the autoswap threshold\r\n   *\r\n   * @param swapThresholdBasisPoints_ New swap threshold in basis points\r\n   */\r\n  function setSwapThresholdBasisPoints(\r\n    uint16 swapThresholdBasisPoints_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {setProjectTaxRates} onlyOwner\r\n   *\r\n   * Change the tax rates, subject to only ever decreasing\r\n   *\r\n   * @param newProjectBuyTaxBasisPoints_ The new buy tax rate\r\n   * @param newProjectSellTaxBasisPoints_ The new sell tax rate\r\n   */\r\n  function setProjectTaxRates(\r\n    uint16 newProjectBuyTaxBasisPoints_,\r\n    uint16 newProjectSellTaxBasisPoints_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {setLimits} onlyOwner\r\n   *\r\n   * Change the limits on transactions and holdings\r\n   *\r\n   * @param newMaxTokensPerTransaction_ The new per txn limit\r\n   * @param newMaxTokensPerWallet_ The new tokens per wallet limit\r\n   */\r\n  function setLimits(\r\n    uint256 newMaxTokensPerTransaction_,\r\n    uint256 newMaxTokensPerWallet_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {limitsEnforced}\r\n   *\r\n   * Return if limits are enforced on this contract\r\n   *\r\n   * @return bool : they are / aren't\r\n   */\r\n  function limitsEnforced() external view returns (bool);\r\n\r\n  /**\r\n   * @dev getMetadropBuyTaxBasisPoints\r\n   *\r\n   * Return the metadrop buy tax basis points given the timed expiry\r\n   */\r\n  function getMetadropBuyTaxBasisPoints() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev getMetadropSellTaxBasisPoints\r\n   *\r\n   * Return the metadrop sell tax basis points given the timed expiry\r\n   */\r\n  function getMetadropSellTaxBasisPoints() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev totalBuyTaxBasisPoints\r\n   *\r\n   * Provide easy to view tax total:\r\n   */\r\n  function totalBuyTaxBasisPoints() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev totalSellTaxBasisPoints\r\n   *\r\n   * Provide easy to view tax total:\r\n   */\r\n  function totalSellTaxBasisPoints() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev distributeTaxTokens\r\n   *\r\n   * Allows the distribution of tax tokens to the designated recipient(s)\r\n   *\r\n   * As part of standard processing the tax token balance being above the threshold\r\n   * will trigger an autoswap to ETH and distribution of this ETH to the designated\r\n   * recipients. This is automatic and there is no need for user involvement.\r\n   *\r\n   * As part of this swap there are a number of calculations performed, particularly\r\n   * if the tax balance is above MAX_SWAP_THRESHOLD_MULTIPLE.\r\n   *\r\n   * Testing indicates that these calculations are safe. But given the data / code\r\n   * interactions it remains possible that some edge case set of scenarios may cause\r\n   * an issue with these calculations.\r\n   *\r\n   * This method is therefore provided as a 'fallback' option to safely distribute\r\n   * accumulated taxes from the contract, with a direct transfer of the ERC20 tokens\r\n   * themselves.\r\n   */\r\n  function distributeTaxTokens() external;\r\n\r\n  /**\r\n   * @dev function {withdrawETH} onlyOwner\r\n   *\r\n   * A withdraw function to allow ETH to be withdrawn by the manager\r\n   *\r\n   * This contract should never hold ETH. The only envisaged scenario where\r\n   * it might hold ETH is a failed autoswap where the uniswap swap has completed,\r\n   * the recipient of ETH reverts, the contract then wraps to WETH and the\r\n   * wrap to WETH fails.\r\n   *\r\n   * This feels unlikely. But, for safety, we include this method.\r\n   *\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawETH(uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev function {withdrawERC20} onlyOwner\r\n   *\r\n   * A withdraw function to allow ERC20s (except address(this)) to be withdrawn.\r\n   *\r\n   * This contract should never hold ERC20s other than tax tokens. The only envisaged\r\n   * scenario where it might hold an ERC20 is a failed autoswap where the uniswap swap\r\n   * has completed, the recipient of ETH reverts, the contract then wraps to WETH, the\r\n   * wrap to WETH succeeds, BUT then the transfer of WETH fails.\r\n   *\r\n   * This feels even less likely than the scenario where ETH is held on the contract.\r\n   * But, for safety, we include this method.\r\n   *\r\n   * @param token_ The ERC20 contract\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawERC20(address token_, uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev Destroys a `value` amount of tokens from the caller.\r\n   *\r\n   * See {ERC20-_burn}.\r\n   */\r\n  function burn(uint256 value) external;\r\n\r\n  /**\r\n   * @dev Destroys a `value` amount of tokens from `account`, deducting from\r\n   * the caller's allowance.\r\n   *\r\n   * See {ERC20-_burn} and {ERC20-allowance}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have allowance for ``accounts``'s tokens of at least\r\n   * `value`.\r\n   */\r\n  function burnFrom(address account, uint256 value) external;\r\n}\r\n\r\n// File contracts/Global/IErrors.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title IErrors.sol. Interface for error definitions used across the platform\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IErrors {\r\n  enum BondingCurveErrorType {\r\n    OK, //                                                  No error\r\n    INVALID_NUMITEMS, //                                    The numItem value is 0\r\n    SPOT_PRICE_OVERFLOW //                                  The updated spot price doesn't fit into 128 bits\r\n  }\r\n\r\n  error AdapterParamsMustBeEmpty(); //                      The adapter parameters on this LZ call must be empty.\r\n\r\n  error AdditionToPoolIsBelowPerTransactionMinimum(); //    The contribution amount is less than the minimum.\r\n\r\n  error AdditionToPoolWouldExceedPoolCap(); //              This addition to the pool would exceed the pool cap.\r\n\r\n  error AdditionToPoolWouldExceedPerAddressCap(); //        This addition to the pool would exceed the per address cap.\r\n\r\n  error AddressAlreadySet(); //                             The address being set can only be set once, and is already non-0.\r\n\r\n  error AllowanceDecreasedBelowZero(); //                   You cannot decrease the allowance below zero.\r\n\r\n  error AlreadyInitialised(); //                            The contract is already initialised: it cannot be initialised twice!\r\n\r\n  error ApprovalCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\r\n\r\n  error ApproveFromTheZeroAddress(); //                     Approval cannot be called from the zero address (indeed, how have you??).\r\n\r\n  error ApproveToTheZeroAddress(); //                       Approval cannot be given to the zero address.\r\n\r\n  error ApprovalQueryForNonexistentToken(); //              The token does not exist.\r\n\r\n  error AuctionStatusIsNotEnded(); //                       Throw if the action required the auction to be closed, and it isn't.\r\n\r\n  error AuctionStatusIsNotOpen(); //                        Throw if the action requires the auction to be open, and it isn't.\r\n\r\n  error AuxCallFailed(\r\n    address[] modules,\r\n    uint256 value,\r\n    bytes data,\r\n    uint256 txGas\r\n  ); //                                                     An auxilliary call from the drop factory failed.\r\n\r\n  error BalanceMismatch(); //                               An error when comparing balance amounts.\r\n\r\n  error BalanceQueryForZeroAddress(); //                    Cannot query the balance for the zero address.\r\n\r\n  error BidMustBeBelowTheFloorWhenReducingQuantity(); //    Only bids that are below the floor can reduce the quantity of the bid.\r\n\r\n  error BidMustBeBelowTheFloorForRefundDuringAuction(); //  Only bids that are below the floor can be refunded during the auction.\r\n\r\n  error BondingCurveError(BondingCurveErrorType error); //  An error of the type specified has occured in bonding curve processing.\r\n\r\n  error BurnExceedsBalance(); //                            The amount you have selected to burn exceeds the addresses balance.\r\n\r\n  error BurnFromTheZeroAddress(); //                        Tokens cannot be burned from the zero address. (Also, how have you called this!?!)\r\n\r\n  error CallerIsNotDepositBoxOwner(); //                    The caller is not the owner of the deposit box.\r\n\r\n  error CallerIsNotFactory(); //                            The caller of this function must match the factory address in storage.\r\n\r\n  error CallerIsNotFactoryOrProjectOwner(); //              The caller of this function must match the factory address OR project owner address.\r\n\r\n  error CallerIsNotFactoryProjectOwnerOrPool(); //          The caller of this function must match the factory address, project owner or pool address.\r\n\r\n  error CallerIsNotTheOwner(); //                           The caller is not the owner of this contract.\r\n\r\n  error CallerIsNotTheManager(); //                         The caller is not the manager of this contract.\r\n\r\n  error CallerMustBeLzApp(); //                             The caller must be an LZ application.\r\n\r\n  error CallerIsNotPlatformAdmin(address caller); //        The caller of this function must be part of the platformAdmin group.\r\n\r\n  error CallerIsNotSuperAdmin(address caller); //           The caller of this function must match the superAdmin address in storage.\r\n\r\n  error CannotAddLiquidityOnCreateAndUseDRIPool(); //       Cannot use both liquidity added on create and a DRIPool in the same token.\r\n\r\n  error CannotSetNewOwnerToTheZeroAddress(); //             You can't set the owner of this contract to the zero address (address(0)).\r\n\r\n  error CannotSetToZeroAddress(); //                        The corresponding address cannot be set to the zero address (address(0)).\r\n\r\n  error CannotSetNewManagerToTheZeroAddress(); //           Cannot transfer the manager to the zero address (address(0)).\r\n\r\n  error CannotWithdrawThisToken(); //                       Cannot withdraw the specified token.\r\n\r\n  error CanOnlyReduce(); //                                 The given operation can only reduce the value specified.\r\n\r\n  error CollectionAlreadyRevealed(); //                     The collection is already revealed; you cannot call reveal again.\r\n\r\n  error ContractIsDecommissioned(); //                      This contract is decommissioned!\r\n\r\n  error ContractIsPaused(); //                              The call requires the contract to be unpaused, and it is paused.\r\n\r\n  error ContractIsNotPaused(); //                           The call required the contract to be paused, and it is NOT paused.\r\n\r\n  error DecreasedAllowanceBelowZero(); //                   The request would decrease the allowance below zero, and that is not allowed.\r\n\r\n  error DestinationIsNotTrustedSource(); //                 The destination that is being called through LZ has not been set as trusted.\r\n\r\n  error DeployerOnly(); //                                  This method can only be called by the deployer address.\r\n\r\n  error DepositBoxIsNotOpen(); //                           This action cannot complete as the deposit box is not open.\r\n\r\n  error DriPoolAddressCannotBeAddressZero(); //             The Dri Pool address cannot be the zero address.\r\n\r\n  error GasLimitIsTooLow(); //                              The gas limit for the LayerZero call is too low.\r\n\r\n  error IncorrectConfirmationValue(); //                    You need to enter the right confirmation value to call this funtion (usually 69420).\r\n\r\n  error IncorrectPayment(); //                              The function call did not include passing the correct payment.\r\n\r\n  error InitialLiquidityAlreadyAdded(); //                  Initial liquidity has already been added. You can't do it again.\r\n\r\n  error InitialLiquidityNotYetAdded(); //                   Initial liquidity needs to have been added for this to succedd.\r\n\r\n  error InsufficientAllowance(); //                         There is not a high enough allowance for this operation.\r\n\r\n  error InvalidAdapterParams(); //                          The current adapter params for LayerZero on this contract won't work :(.\r\n\r\n  error InvalidAddress(); //                                An address being processed in the function is not valid.\r\n\r\n  error InvalidEndpointCaller(); //                         The calling address is not a valid LZ endpoint. The LZ endpoint was set at contract creation\r\n  //                                                        and cannot be altered after. Check the address LZ endpoint address on the contract.\r\n\r\n  error InvalidMinGas(); //                                 The minimum gas setting for LZ in invalid.\r\n\r\n  error InvalidOracleSignature(); //                        The signature provided with the contract call is not valid, either in format or signer.\r\n\r\n  error InvalidPayload(); //                                The LZ payload is invalid\r\n\r\n  error InvalidReceiver(); //                               The address used as a target for funds is not valid.\r\n\r\n  error InvalidSourceSendingContract(); //                  The LZ message is being related from a source contract on another chain that is NOT trusted.\r\n\r\n  error InvalidTotalShares(); //                            Total shares must equal 100 percent in basis points.\r\n\r\n  error LimitsCanOnlyBeRaised(); //                          Limits are UP ONLY.\r\n\r\n  error ListLengthMismatch(); //                            Two or more lists were compared and they did not match length.\r\n\r\n  error LiquidityPoolMustBeAContractAddress(); //           Cannot add a non-contract as a liquidity pool.\r\n\r\n  error LiquidityPoolCannotBeAddressZero(); //              Cannot add a liquidity pool from the zero address.\r\n\r\n  error LPLockUpMustFitUint88(); //                         LP lockup is held in a uint88, so must fit.\r\n\r\n  error NoTrustedPathRecord(); //                           LZ needs a trusted path record for this to work. What's that, you ask?\r\n\r\n  error MachineAddressCannotBeAddressZero(); //             Cannot set the machine address to the zero address.\r\n\r\n  error ManagerUnauthorizedAccount(); //                    The caller is not the pending manager.\r\n\r\n  error MaxBidQuantityIs255(); //                           Validation: as we use a uint8 array to track bid positions the max bid quantity is 255.\r\n\r\n  error MaxPublicMintAllowanceExceeded(\r\n    uint256 requested,\r\n    uint256 alreadyMinted,\r\n    uint256 maxAllowance\r\n  ); //                                                     The calling address has requested a quantity that would exceed the max allowance.\r\n\r\n  error MaxSupplyTooHigh(); //                              Max supply must fit in a uint128.\r\n\r\n  error MaxTokensPerWalletExceeded(); //                    The transfer would exceed the max tokens per wallet limit.\r\n\r\n  error MaxTokensPerTxnExceeded(); //                       The transfer would exceed the max tokens per transaction limit.\r\n\r\n  error MetadataIsLocked(); //                              The metadata on this contract is locked; it cannot be altered!\r\n\r\n  error MetadropFactoryOnlyOncePerReveal(); //              This function can only be called (a) by the factory and, (b) just one time!\r\n\r\n  error MetadropModulesOnly(); //                           Can only be called from a metadrop contract.\r\n\r\n  error MetadropOracleCannotBeAddressZero(); //             The metadrop Oracle cannot be the zero address (address(0)).\r\n\r\n  error MinGasLimitNotSet(); //                             The minimum gas limit for LayerZero has not been set.\r\n\r\n  error MintERC2309QuantityExceedsLimit(); //               The `quantity` minted with ERC2309 exceeds the safety limit.\r\n\r\n  error MintingIsClosedForever(); //                        Minting is, as the error suggests, so over (and locked forever).\r\n\r\n  error MintToZeroAddress(); //                             Cannot mint to the zero address.\r\n\r\n  error MintZeroQuantity(); //                              The quantity of tokens minted must be more than zero.\r\n\r\n  error NewBuyTaxBasisPointsExceedsMaximum(); //            Project owner trying to set the tax rate too high.\r\n\r\n  error NewSellTaxBasisPointsExceedsMaximum(); //           Project owner trying to set the tax rate too high.\r\n\r\n  error NoETHForLiquidityPair(); //                         No ETH has been provided for the liquidity pair.\r\n\r\n  error TaxPeriodStillInForce(); //                         The minimum tax period has not yet expired.\r\n\r\n  error NoPaymentDue(); //                                  No payment is due for this address.\r\n\r\n  error NoRefundForCaller(); //                             Error thrown when the calling address has no refund owed.\r\n\r\n  error NoStoredMessage(); //                               There is no stored message matching the passed parameters.\r\n\r\n  error NothingToClaim(); //                                The calling address has nothing to claim.\r\n\r\n  error NoTokenForLiquidityPair(); //                       There is no token to add to the LP.\r\n\r\n  error OperationDidNotSucceed(); //                        The operation failed (vague much?).\r\n\r\n  error OracleSignatureHasExpired(); //                     A signature has been provided but it is too old.\r\n\r\n  error OwnableUnauthorizedAccount(); //                    The caller is not the pending owner.\r\n\r\n  error OwnershipNotInitializedForExtraData(); //           The `extraData` cannot be set on an uninitialized ownership slot.\r\n\r\n  error OwnerQueryForNonexistentToken(); //                 The token does not exist.\r\n\r\n  error ParametersDoNotMatchSignedMessage(); //             The parameters passed with the signed message do not match the message itself.\r\n\r\n  error ParamTooLargeStartDate(); //                        The passed parameter exceeds the var type max.\r\n\r\n  error ParamTooLargeEndDate(); //                          The passed parameter exceeds the var type max.\r\n\r\n  error ParamTooLargeMinETH(); //                           The passed parameter exceeds the var type max.\r\n\r\n  error ParamTooLargePerAddressMax(); //                    The passed parameter exceeds the var type max.\r\n\r\n  error ParamTooLargeVestingDays(); //                      The passed parameter exceeds the var type max.\r\n\r\n  error ParamTooLargePoolSupply(); //                       The passed parameter exceeds the var type max.\r\n\r\n  error ParamTooLargePoolPerTxnMinETH(); //                 The passed parameter exceeds the var type max.\r\n\r\n  error PassedConfigDoesNotMatchApproved(); //              The config provided on the call does not match the approved config.\r\n\r\n  error PauseCutOffHasPassed(); //                          The time period in which we can pause has passed; this contract can no longer be paused.\r\n\r\n  error PaymentMustCoverPerMintFee(); //                    The payment passed must at least cover the per mint fee for the quantity requested.\r\n\r\n  error PermitDidNotSucceed(); //                           The safeERC20 permit failed.\r\n\r\n  error PlatformAdminCannotBeAddressZero(); //              We cannot use the zero address (address(0)) as a platformAdmin.\r\n\r\n  error PlatformTreasuryCannotBeAddressZero(); //           The treasury address cannot be set to the zero address.\r\n\r\n  error PoolIsAboveMinimum(); //                            You required the pool to be below the minimum, and it is not\r\n\r\n  error PoolIsBelowMinimum(); //                            You required the pool to be above the minimum, and it is not\r\n\r\n  error PoolPhaseIsClosed(); //                             The block.timestamp is either before the pool is open or after it is closed.\r\n\r\n  error PoolPhaseIsNotAfter(); //                           The block.timestamp is either before or during the pool open phase.\r\n\r\n  error PoolVestingNotYetComplete(); //                     Tokens in the pool are not yet vested.\r\n\r\n  error ProjectOwnerCannotBeAddressZero(); //               The project owner has to be a non zero address.\r\n\r\n  error ProofInvalid(); //                                  The provided proof is not valid with the provided arguments.\r\n\r\n  error QuantityExceedsRemainingCollectionSupply(); //      The requested quantity would breach the collection supply.\r\n\r\n  error QuantityExceedsRemainingPhaseSupply(); //           The requested quantity would breach the phase supply.\r\n\r\n  error QuantityExceedsMaxPossibleCollectionSupply(); //    The requested quantity would breach the maximum trackable supply\r\n\r\n  error ReferralIdAlreadyUsed(); //                         This referral ID has already been used; they are one use only.\r\n\r\n  error RequestingMoreThanAvailableBalance(); //             The request exceeds the available balance.\r\n\r\n  error RequestingMoreThanRemainingAllocation(\r\n    uint256 previouslyMinted,\r\n    uint256 requested,\r\n    uint256 remainingAllocation\r\n  ); //                                                     Number of tokens requested for this mint exceeds the remaining allocation (taking the\r\n  //                                                        original allocation from the list and deducting minted tokens).\r\n\r\n  error RoyaltyFeeWillExceedSalePrice(); //                 The ERC2981 royalty specified will exceed the sale price.\r\n\r\n  error ShareTotalCannotBeZero(); //                        The total of all the shares cannot be nothing.\r\n\r\n  error SliceOutOfBounds(); //                              The bytes slice operation was out of bounds.\r\n\r\n  error SliceOverflow(); //                                 The bytes slice operation overlowed.\r\n\r\n  error SuperAdminCannotBeAddressZero(); //                 The superAdmin cannot be the sero address (address(0)).\r\n\r\n  error SupplyTotalMismatch(); //                           The sum of the team supply and lp supply does not match.\r\n\r\n  error SupportWindowIsNotOpen(); //                        The project owner has not requested support within the support request expiry window.\r\n\r\n  error TaxFreeAddressCannotBeAddressZero(); //             A tax free address cannot be address(0)\r\n\r\n  error TemplateCannotBeAddressZero(); //                   The address for a template cannot be address zero (address(0)).\r\n\r\n  error TemplateNotFound(); //                              There is no template that matches the passed template Id.\r\n\r\n  error ThisMintIsClosed(); //                              It's over (well, this mint is, anyway).\r\n\r\n  error TotalSharesMustMatchDenominator(); //               The total of all shares must equal the denominator value.\r\n\r\n  error TransferAmountExceedsBalance(); //                  The transfer amount exceeds the accounts available balance.\r\n\r\n  error TransferCallerNotOwnerNorApproved(); //             The caller must own the token or be an approved operator.\r\n\r\n  error TransferFailed(); //                                The transfer has failed.\r\n\r\n  error TransferFromIncorrectOwner(); //                    The token must be owned by `from`.\r\n\r\n  error TransferToNonERC721ReceiverImplementer(); //        Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n\r\n  error TransferFromZeroAddress(); //                       Cannot transfer from the zero address. Indeed, this surely is impossible, and likely a waste to check??\r\n\r\n  error TransferToZeroAddress(); //                         Cannot transfer to the zero address.\r\n\r\n  error UnrecognisedVRFMode(); //                           Currently supported VRF modes are 0: chainlink and 1: arrng\r\n\r\n  error URIQueryForNonexistentToken(); //                   The token does not exist.\r\n\r\n  error ValueExceedsMaximum(); //                           The value sent exceeds the maximum allowed (super useful explanation huh?).\r\n\r\n  error VRFCoordinatorCannotBeAddressZero(); //             The VRF coordinator cannot be the zero address (address(0)).\r\n}\r\n\r\n// File contracts/ERC20Factory/ERC20Factory/IERC20FactoryByMetadrop.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @dev Metadrop ERC-20 factory, interface\r\n */\r\ninterface IERC20FactoryByMetadrop is\r\n  IConfigStructures,\r\n  IErrors,\r\n  IERC20ConfigByMetadrop\r\n{\r\n  event DriPoolAddressUpdated(address oldAddress, address newAddress);\r\n\r\n  event ERC20Created(\r\n    string metaId,\r\n    address indexed deployer,\r\n    address contractInstance,\r\n    address driPoolInstance,\r\n    string symbol,\r\n    string name\r\n  );\r\n\r\n  event MachineAddressUpdated(address oldAddress, address newAddress);\r\n\r\n  event OracleAddressUpdated(address oldAddress, address newAddress);\r\n\r\n  event MessageValidityInSecondsUpdated(\r\n    uint256 oldMessageValidityInSeconds,\r\n    uint256 newMessageValidityInSeconds\r\n  );\r\n\r\n  event PlatformTreasuryUpdated(address oldAddress, address newAddress);\r\n\r\n  /**\r\n   * @dev function {initialiseMachineAddress}\r\n   *\r\n   * Initialise the machine template address. This needs to be separate from\r\n   * the constructor as the machine needs the factory address on its constructor.\r\n   *\r\n   * This must ALWAYS be called as part of deployment.\r\n   *\r\n   * @param machineTemplate_ the machine address\r\n   */\r\n  function initialiseMachineAddress(address machineTemplate_) external;\r\n\r\n  /**\r\n   * @dev function {decommissionFactory} onlySuperAdmin\r\n   *\r\n   * Make this factory unusable for creating new ERC20s, forever\r\n   *\r\n   */\r\n  function decommissionFactory() external;\r\n\r\n  /**\r\n   * @dev function {setMetadropOracleAddress} onlyPlatformAdmin\r\n   *\r\n   * Set the metadrop trusted oracle address\r\n   *\r\n   * @param metadropOracleAddress_ Trusted metadrop oracle address\r\n   */\r\n  function setMetadropOracleAddress(address metadropOracleAddress_) external;\r\n\r\n  /**\r\n   * @dev function {setMessageValidityInSeconds} onlyPlatformAdmin\r\n   *\r\n   * Set the validity period of signed messages\r\n   *\r\n   * @param messageValidityInSeconds_ Validity period in seconds for messages signed by the trusted oracle\r\n   */\r\n  function setMessageValidityInSeconds(\r\n    uint256 messageValidityInSeconds_\r\n  ) external;\r\n\r\n  /**\r\n   * @dev function {setPlatformTreasury} onlySuperAdmin\r\n   *\r\n   * Set the address that platform fees will be paid to / can be withdrawn to.\r\n   * Note that this is restricted to the highest authority level, the super\r\n   * admin. Platform admins can trigger a withdrawal to the treasury, but only\r\n   * the default admin can set or alter the treasury address. It is recommended\r\n   * that the default admin is highly secured and restrited e.g. a multi-sig.\r\n   *\r\n   * @param platformTreasury_ New treasury address\r\n   */\r\n  function setPlatformTreasury(address platformTreasury_) external;\r\n\r\n  /**\r\n   * @dev function {setMachineAddress} onlyPlatformAdmin\r\n   *\r\n   * Set a new machine template address\r\n   *\r\n   * @param newMachineAddress_ the new machine address\r\n   */\r\n  function setMachineAddress(address newMachineAddress_) external;\r\n\r\n  /**\r\n   * @dev function {setDriPoolAddress} onlyPlatformAdmin\r\n   *\r\n   * Set a new launch pool template address\r\n   *\r\n   * @param newDriPoolAddress_ the new launch pool address\r\n   */\r\n  function setDriPoolAddress(address newDriPoolAddress_) external;\r\n\r\n  /**\r\n   * @dev function {withdrawETH} onlyPlatformAdmin\r\n   *\r\n   * A withdraw function to allow ETH to be withdrawn to the treasury\r\n   *\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawETH(uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev function {withdrawERC20} onlyPlatformAdmin\r\n   *\r\n   * A withdraw function to allow ERC20s to be withdrawn to the treasury\r\n   *\r\n   * @param token_ The contract address of the token being withdrawn\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\r\n\r\n  /**\r\n   * @dev function {createERC20}\r\n   *\r\n   * Create an ERC-20\r\n   *\r\n   * @param metaId_ The drop Id being approved\r\n   * @param salt_ Salt for create2\r\n   * @param erc20Config_ ERC20 configuration\r\n   * @param signedMessage_ The signed message object\r\n   * @param vaultFee_ The fee for the token vault\r\n   * @param deploymentFee_ The fee for deployment, if any\r\n   * @return deployedAddress_ The deployed ERC20 contract address\r\n   */\r\n  function createERC20(\r\n    string calldata metaId_,\r\n    bytes32 salt_,\r\n    ERC20Config calldata erc20Config_,\r\n    SignedDropMessageDetails calldata signedMessage_,\r\n    uint256 vaultFee_,\r\n    uint256 deploymentFee_\r\n  ) external payable returns (address deployedAddress_);\r\n\r\n  /**\r\n   * @dev function {createConfigHash}\r\n   *\r\n   * Create the config hash\r\n   *\r\n   * @param metaId_ The drop Id being approved\r\n   * @param salt_ Salt for create2\r\n   * @param erc20Config_ ERC20 configuration\r\n   * @param messageTimeStamp_ When the message for this config hash was signed\r\n   * @param vaultFee_ The fee for the token vault\r\n   * @param deploymentFee_ The fee for deployment, if any\r\n   * @param deployer_ Address performing the deployment\r\n   * @return configHash_ The bytes32 config hash\r\n   */\r\n  function createConfigHash(\r\n    string calldata metaId_,\r\n    bytes32 salt_,\r\n    ERC20Config calldata erc20Config_,\r\n    uint256 messageTimeStamp_,\r\n    uint256 vaultFee_,\r\n    uint256 deploymentFee_,\r\n    address deployer_\r\n  ) external pure returns (bytes32 configHash_);\r\n}\r\n\r\n// File contracts/Global/Revert.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n\r\n/**\r\n *\r\n * @title Revert.sol. For efficient reverts\r\n *\r\n * @author metadrop https://metadrop.com/\r\n *\r\n */\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Revert {\r\n  /**\r\n   * @dev For more efficient reverts.\r\n   */\r\n  function _revert(bytes4 errorSelector) internal pure {\r\n    assembly {\r\n      mstore(0x00, errorSelector)\r\n      revert(0x00, 0x04)\r\n    }\r\n  }\r\n}\r\n\r\n// File contracts/Global/OZ/Ownable.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is IErrors, Revert, Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    _transferOwnership(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    _checkOwner();\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view virtual returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if the sender is not the owner.\r\n   */\r\n  function _checkOwner() internal view virtual {\r\n    if (owner() != _msgSender()) {\r\n      _revert(CallerIsNotTheOwner.selector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby disabling any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    if (newOwner == address(0)) {\r\n      _revert(CannotSetNewOwnerToTheZeroAddress.selector);\r\n    }\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n\r\n// File contracts/Global/OZ/Ownable2Step.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n  address private _pendingOwner;\r\n\r\n  event OwnershipTransferStarted(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the address of the pending owner.\r\n   */\r\n  function pendingOwner() public view virtual returns (address) {\r\n    return _pendingOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(\r\n    address newOwner\r\n  ) public virtual override onlyOwner {\r\n    _pendingOwner = newOwner;\r\n    emit OwnershipTransferStarted(owner(), newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n   * Internal function without access restriction.\r\n   */\r\n  function _transferOwnership(address newOwner) internal virtual override {\r\n    delete _pendingOwner;\r\n    super._transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev The new owner accepts the ownership transfer.\r\n   */\r\n  function acceptOwnership() public virtual {\r\n    address sender = _msgSender();\r\n    if (pendingOwner() != sender) {\r\n      _revert(OwnableUnauthorizedAccount.selector);\r\n    }\r\n    _transferOwnership(sender);\r\n  }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol@v4.9.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n  /**\r\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n   * given ``owner``'s signed approval.\r\n   *\r\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n   * ordering also apply here.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `deadline` must be a timestamp in the future.\r\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n   * over the EIP712-formatted function arguments.\r\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n   *\r\n   * For more information on the signature format, see the\r\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n   * section].\r\n   */\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns the current nonce for `owner`. This value must be\r\n   * included whenever a signature is generated for {permit}.\r\n   *\r\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n   * prevents a signature from being used multiple times.\r\n   */\r\n  function nonces(address owner) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n   */\r\n  // solhint-disable-next-line func-name-mixedcase\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.9.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   *\r\n   * Furthermore, `isContract` will also return true if the target contract within\r\n   * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n   * which only has an effect at the end of a transaction.\r\n   * ====\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n   *\r\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n   * constructor.\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // This method relies on extcodesize/address.code.length, which returns 0\r\n    // for contracts in construction, since the code is only stored at the end\r\n    // of the constructor execution.\r\n\r\n    return account.code.length > 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n    (bool success, ) = recipient.call{value: amount}(\"\");\r\n    require(\r\n      success,\r\n      \"Address: unable to send value, recipient may have reverted\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Performs a Solidity function call using a low level `call`. A\r\n   * plain `call` is an unsafe replacement for a function call: use this\r\n   * function instead.\r\n   *\r\n   * If `target` reverts with a revert reason, it is bubbled up by this\r\n   * function (like regular Solidity function calls).\r\n   *\r\n   * Returns the raw returned data. To convert to the expected return value,\r\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `target` must be a contract.\r\n   * - calling `target` with `data` must not revert.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n   * `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    return functionCallWithValue(target, data, 0, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but also transferring `value` wei to `target`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the calling contract must have an ETH balance of at least `value`.\r\n   * - the called Solidity function must be `payable`.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionCallWithValue(\r\n        target,\r\n        data,\r\n        value,\r\n        \"Address: low-level call with value failed\"\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n   *\r\n   * _Available since v3.1._\r\n   */\r\n  function functionCallWithValue(\r\n    address target,\r\n    bytes memory data,\r\n    uint256 value,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    require(\r\n      address(this).balance >= value,\r\n      \"Address: insufficient balance for call\"\r\n    );\r\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n    return\r\n      verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data\r\n  ) internal view returns (bytes memory) {\r\n    return\r\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a static call.\r\n   *\r\n   * _Available since v3.3._\r\n   */\r\n  function functionStaticCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    (bool success, bytes memory returndata) = target.staticcall(data);\r\n    return\r\n      verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data\r\n  ) internal returns (bytes memory) {\r\n    return\r\n      functionDelegateCall(\r\n        target,\r\n        data,\r\n        \"Address: low-level delegate call failed\"\r\n      );\r\n  }\r\n\r\n  /**\r\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n   * but performing a delegate call.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function functionDelegateCall(\r\n    address target,\r\n    bytes memory data,\r\n    string memory errorMessage\r\n  ) internal returns (bytes memory) {\r\n    (bool success, bytes memory returndata) = target.delegatecall(data);\r\n    return\r\n      verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n   *\r\n   * _Available since v4.8._\r\n   */\r\n  function verifyCallResultFromTarget(\r\n    address target,\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal view returns (bytes memory) {\r\n    if (success) {\r\n      if (returndata.length == 0) {\r\n        // only check isContract if the call was successful and the return data is empty\r\n        // otherwise we already know that it was a contract\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n      }\r\n      return returndata;\r\n    } else {\r\n      _revert(returndata, errorMessage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n   * revert reason or using the provided one.\r\n   *\r\n   * _Available since v4.3._\r\n   */\r\n  function verifyCallResult(\r\n    bool success,\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) internal pure returns (bytes memory) {\r\n    if (success) {\r\n      return returndata;\r\n    } else {\r\n      _revert(returndata, errorMessage);\r\n    }\r\n  }\r\n\r\n  function _revert(\r\n    bytes memory returndata,\r\n    string memory errorMessage\r\n  ) private pure {\r\n    // Look for revert reason and bubble it up if present\r\n    if (returndata.length > 0) {\r\n      // The easiest way to bubble the revert reason is using memory via assembly\r\n      /// @solidity memory-safe-assembly\r\n      assembly {\r\n        let returndata_size := mload(returndata)\r\n        revert(add(32, returndata), returndata_size)\r\n      }\r\n    } else {\r\n      revert(errorMessage);\r\n    }\r\n  }\r\n}\r\n\r\n// File contracts/Global/OZ/SafeERC20.sol\r\n\r\n// Metadrop Contracts (v2.1.0)\r\n// Metadrop based on OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  using Address for address;\r\n\r\n  /**\r\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) internal {\r\n    _callOptionalReturn(\r\n      token,\r\n      abi.encodeCall(token.transferFrom, (from, to, value))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeIncreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    uint256 oldAllowance = token.allowance(address(this), spender);\r\n    forceApprove(token, spender, oldAllowance + value);\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful.\r\n   */\r\n  function safeDecreaseAllowance(\r\n    IERC20 token,\r\n    address spender,\r\n    uint256 value\r\n  ) internal {\r\n    unchecked {\r\n      uint256 oldAllowance = token.allowance(address(this), spender);\r\n      if (oldAllowance < value) {\r\n        revert IErrors.DecreasedAllowanceBelowZero();\r\n      }\r\n      forceApprove(token, spender, oldAllowance - value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n   * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n   * 0 before setting it to a non-zero value.\r\n   */\r\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n    if (!_callOptionalReturnBool(token, approvalCall)) {\r\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n      _callOptionalReturn(token, approvalCall);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n   * Revert on invalid signature.\r\n   */\r\n  function safePermit(\r\n    IERC20Permit token,\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) internal {\r\n    uint256 nonceBefore = token.nonces(owner);\r\n    token.permit(owner, spender, value, deadline, v, r, s);\r\n    uint256 nonceAfter = token.nonces(owner);\r\n    if (nonceAfter != (nonceBefore + 1)) {\r\n      revert IErrors.PermitDidNotSucceed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   */\r\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n    // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n    bytes memory returndata = address(token).functionCall(data, \"call fail\");\r\n    if ((returndata.length != 0) && !abi.decode(returndata, (bool))) {\r\n      revert IErrors.OperationDidNotSucceed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n   * @param token The token targeted by the call.\r\n   * @param data The call data (encoded using abi.encode or one of its variants).\r\n   *\r\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n   */\r\n  function _callOptionalReturnBool(\r\n    IERC20 token,\r\n    bytes memory data\r\n  ) private returns (bool) {\r\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n    // and not revert is the subcall reverts.\r\n\r\n    (bool success, bytes memory returndata) = address(token).call(data);\r\n    return\r\n      success &&\r\n      (returndata.length == 0 || abi.decode(returndata, (bool))) &&\r\n      address(token).code.length > 0;\r\n  }\r\n}\r\n\r\n// File contracts/ThirdParty/Unicrypt/IUniswapV2Locker.sol\r\n\r\n// Interface definition for UniswapV2Locker.sol\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IERCBurn {\r\n  function burn(uint256 _amount) external;\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external returns (uint256);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IMigrator {\r\n  function migrate(\r\n    address lpToken,\r\n    uint256 amount,\r\n    uint256 unlockDate,\r\n    address owner\r\n  ) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Locker {\r\n  struct UserInfo {\r\n    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\r\n    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\r\n  }\r\n\r\n  struct TokenLock {\r\n    uint256 lockDate; // the date the token was locked\r\n    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\r\n    uint256 initialAmount; // the initial lock amount\r\n    uint256 unlockDate; // the date the token can be withdrawn\r\n    uint256 lockID; // lockID nonce per uni pair\r\n    address owner;\r\n  }\r\n\r\n  struct FeeStruct {\r\n    uint256 ethFee; // Small eth fee to prevent spam on the platform\r\n    IERCBurn secondaryFeeToken; // UNCX or UNCL\r\n    uint256 secondaryTokenFee; // optional, UNCX or UNCL\r\n    uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\r\n    uint256 liquidityFee; // fee on univ2 liquidity tokens\r\n    uint256 referralPercent; // fee for referrals\r\n    IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\r\n    uint256 referralHold; // balance the referrer must hold to qualify as a referrer\r\n    uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\r\n  }\r\n\r\n  function setDev(address payable _devaddr) external;\r\n\r\n  /**\r\n   * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\r\n   */\r\n  function setMigrator(IMigrator _migrator) external;\r\n\r\n  function setSecondaryFeeToken(address _secondaryFeeToken) external;\r\n\r\n  /**\r\n   * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\r\n   */\r\n  function setReferralTokenAndHold(\r\n    IERCBurn _referralToken,\r\n    uint256 _hold\r\n  ) external;\r\n\r\n  function setFees(\r\n    uint256 _referralPercent,\r\n    uint256 _referralDiscount,\r\n    uint256 _ethFee,\r\n    uint256 _secondaryTokenFee,\r\n    uint256 _secondaryTokenDiscount,\r\n    uint256 _liquidityFee\r\n  ) external;\r\n\r\n  /**\r\n   * @notice whitelisted accounts dont pay flatrate fees on locking\r\n   */\r\n  function whitelistFeeAccount(address _user, bool _add) external;\r\n\r\n  /**\r\n   * @notice Creates a new lock\r\n   * @param _lpToken the univ2 token address\r\n   * @param _amount amount of LP tokens to lock\r\n   * @param _unlock_date the unix timestamp (in seconds) until unlock\r\n   * @param _referral the referrer address if any or address(0) for none\r\n   * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on univ2 tokens\r\n   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\r\n   */\r\n  function lockLPToken(\r\n    address _lpToken,\r\n    uint256 _amount,\r\n    uint256 _unlock_date,\r\n    address payable _referral,\r\n    bool _fee_in_eth,\r\n    address payable _withdrawer\r\n  ) external payable;\r\n\r\n  /**\r\n   * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\r\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\r\n   */\r\n  function relock(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _unlock_date\r\n  ) external;\r\n\r\n  /**\r\n   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\r\n   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\r\n   */\r\n  function withdraw(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  /**\r\n   * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\r\n   */\r\n  function incrementLock(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  /**\r\n   * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\r\n   * and withdraw a smaller portion\r\n   */\r\n  function splitLock(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external payable;\r\n\r\n  /**\r\n   * @notice transfer a lock to a new owner, e.g. presale project -> project owner\r\n   */\r\n  function transferLockOwnership(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    address payable _newOwner\r\n  ) external;\r\n\r\n  /**\r\n   * @notice migrates liquidity to uniswap v3\r\n   */\r\n  function migrate(\r\n    address _lpToken,\r\n    uint256 _index,\r\n    uint256 _lockID,\r\n    uint256 _amount\r\n  ) external;\r\n\r\n  function getNumLocksForToken(\r\n    address _lpToken\r\n  ) external view returns (uint256);\r\n\r\n  function getNumLockedTokens() external view returns (uint256);\r\n\r\n  function getLockedTokenAtIndex(\r\n    uint256 _index\r\n  ) external view returns (address);\r\n\r\n  // user functions\r\n  function getUserNumLockedTokens(\r\n    address _user\r\n  ) external view returns (uint256);\r\n\r\n  function getUserLockedTokenAtIndex(\r\n    address _user,\r\n    uint256 _index\r\n  ) external view returns (address);\r\n\r\n  function getUserNumLocksForToken(\r\n    address _user,\r\n    address _lpToken\r\n  ) external view returns (uint256);\r\n\r\n  function getUserLockForTokenAtIndex(\r\n    address _user,\r\n    address _lpToken,\r\n    uint256 _index\r\n  )\r\n    external\r\n    view\r\n    returns (uint256, uint256, uint256, uint256, uint256, address);\r\n\r\n  // whitelist\r\n  function getWhitelistedUsersLength() external view returns (uint256);\r\n\r\n  function getWhitelistedUserAtIndex(\r\n    uint256 _index\r\n  ) external view returns (address);\r\n\r\n  function getUserWhitelistStatus(address _user) external view returns (bool);\r\n}\r\n\r\n// File contracts/ThirdParty/WETH/IWETH.sol\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface IWETH is IERC20 {\r\n  function deposit() external payable;\r\n\r\n  function withdraw(uint256 wad) external;\r\n}\r\n\r\n// File contracts/ERC20Factory/ERC20/ERC20ByMetadrop.sol\r\n\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @dev Metadrop core ERC-20 contract\r\n *\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n */\r\ncontract ERC20ByMetadrop is Context, IERC20ByMetadrop, Ownable2Step {\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n  using EnumerableSet for EnumerableSet.Bytes32Set;\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public constant x_VERSION = 100020001000000000;\r\n  uint256 internal constant BP_DENOM = 10000;\r\n  uint256 internal constant ROUND_DEC = 100000000000;\r\n  uint256 internal constant CALL_GAS_LIMIT = 50000;\r\n  uint256 internal constant MAX_SWAP_THRESHOLD_MULTIPLE = 20;\r\n  bytes32 internal constant GNOSIS_SAFE_PROXY =\r\n    0xb89c1b3bdf2cf8827818646bce9a8f6e372885f8c55e5c07acbd307cb133b000;\r\n\r\n  uint256 public immutable lpSupply;\r\n  uint256 public immutable projectSupply;\r\n  uint256 public immutable botProtectionDurationInSeconds;\r\n  address public immutable metadropTaxRecipient;\r\n  address public immutable uniswapV2Pair;\r\n  address public immutable driPool;\r\n  address public immutable lpOwner;\r\n  address public immutable projectSupplyRecipient;\r\n  address public immutable metadropFactory;\r\n  uint256 public immutable metadropTaxPeriodInDays;\r\n  bool internal immutable _tokenHasTax;\r\n  IUniswapV2Locker internal immutable _tokenVault;\r\n  IUniswapV2Router02 internal immutable _uniswapRouter;\r\n\r\n  /** @dev {Storage Slot 1} Vars read as part of transfers packed to a single\r\n   * slot for warm reads.\r\n   *   Slot 1:\r\n   *      128\r\n   *       32\r\n   *   16 * 5\r\n   *    8 * 2\r\n   *   ------\r\n   *      256\r\n   *   ------ */\r\n  uint128 private _totalSupply;\r\n  uint32 public fundedDate;\r\n  uint16 public projectBuyTaxBasisPoints;\r\n  uint16 public projectSellTaxBasisPoints;\r\n  uint16 public metadropBuyTaxBasisPoints;\r\n  uint16 public metadropSellTaxBasisPoints;\r\n  uint16 public swapThresholdBasisPoints;\r\n  /** @dev {_autoSwapInProgress} We start with {_autoSwapInProgress} ON, as we don't want to\r\n   * call autoswap when processing initial liquidity from this address. We turn this OFF when\r\n   * liquidity has been loaded, and use this bool to control processing during auto-swaps\r\n   * from that point onwards. */\r\n  bool private _autoSwapInProgress = true;\r\n\r\n  /** @dev {Storage Slot 2} Vars read as part of transfers packed to a single\r\n   * slot for warm reads.\r\n   *   Slot 1:\r\n   *      128\r\n   *      128\r\n   *   ------\r\n   *      256\r\n   *   ------ */\r\n  uint128 public maxTokensPerTransaction;\r\n  uint128 public maxTokensPerWallet;\r\n\r\n  /** @dev {Storage Slot 3} Not read / written in transfers (unless autoswap taking place):\r\n   *      160\r\n   *       88\r\n   *        8\r\n   *   ------\r\n   *      256\r\n   *   ------ */\r\n  address public projectTaxRecipient;\r\n  uint88 public lpLockupInDays;\r\n  bool public burnLPTokens;\r\n\r\n  /** @dev {Storage Slot 4} Potentially written in transfers:\r\n   *   Slot 3:\r\n   *      128\r\n   *      128\r\n   *   ------\r\n   *      256\r\n   *   ------ */\r\n  uint128 public projectTaxPendingSwap;\r\n  uint128 public metadropTaxPendingSwap;\r\n\r\n  /** @dev {Storage Slot 5 to n} Not read as part of transfers etc. */\r\n  string private _name;\r\n  string private _symbol;\r\n\r\n  /** @dev {Social Links} internal storage */\r\n  string internal _websiteLink;\r\n  string internal _twitterLink;\r\n  string internal _telegramLink;\r\n  string internal _otherLink;\r\n\r\n  /** @dev {_balances} Addresses balances */\r\n  mapping(address => uint256) private _balances;\r\n\r\n  /** @dev {_allowances} Addresses allocance details */\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n  /** @dev {_validCallerCodeHashes} Code hashes of callers we consider valid */\r\n  EnumerableSet.Bytes32Set private _validCallerCodeHashes;\r\n\r\n  /** @dev {_liquidityPools} Enumerable set for liquidity pool addresses */\r\n  EnumerableSet.AddressSet private _liquidityPools;\r\n\r\n  /** @dev {_unlimited} Enumerable set for addresses where limits do not apply */\r\n  EnumerableSet.AddressSet private _unlimited;\r\n\r\n  /**\r\n   * @dev {constructor}\r\n   *\r\n   * @param integrationAddresses_ The project owner, uniswap router, unicrypt vault, metadrop factory and pool template.\r\n   * @param baseParams_ configuration of this ERC20.\r\n   * @param supplyParams_ Supply configuration of this ERC20.\r\n   * @param taxParams_  Tax configuration of this ERC20\r\n   * @param taxParams_  Launch pool configuration of this ERC20\r\n   */\r\n  constructor(\r\n    address[5] memory integrationAddresses_,\r\n    bytes memory baseParams_,\r\n    bytes memory supplyParams_,\r\n    bytes memory taxParams_,\r\n    bytes memory poolParams_\r\n  ) {\r\n    _decodeBaseParams(integrationAddresses_[0], baseParams_);\r\n    _uniswapRouter = IUniswapV2Router02(integrationAddresses_[1]);\r\n    _tokenVault = IUniswapV2Locker(integrationAddresses_[2]);\r\n    metadropFactory = (integrationAddresses_[3]);\r\n\r\n    ERC20SupplyParameters memory supplyParams = abi.decode(\r\n      supplyParams_,\r\n      (ERC20SupplyParameters)\r\n    );\r\n\r\n    ERC20TaxParameters memory taxParams = abi.decode(\r\n      taxParams_,\r\n      (ERC20TaxParameters)\r\n    );\r\n\r\n    driPool = integrationAddresses_[4];\r\n\r\n    ERC20PoolParameters memory poolParams;\r\n\r\n    if (integrationAddresses_[4] != address(0)) {\r\n      poolParams = abi.decode(poolParams_, (ERC20PoolParameters));\r\n    }\r\n\r\n    _processSupplyParams(supplyParams, poolParams);\r\n    projectSupplyRecipient = supplyParams.projectSupplyRecipient;\r\n    lpSupply = supplyParams.lpSupply * (10 ** decimals());\r\n    projectSupply = supplyParams.projectSupply * (10 ** decimals());\r\n    maxTokensPerWallet = uint128(\r\n      supplyParams.maxTokensPerWallet * (10 ** decimals())\r\n    );\r\n    maxTokensPerTransaction = uint128(\r\n      supplyParams.maxTokensPerTxn * (10 ** decimals())\r\n    );\r\n    lpLockupInDays = uint88(supplyParams.lpLockupInDays);\r\n    botProtectionDurationInSeconds = supplyParams\r\n      .botProtectionDurationInSeconds;\r\n    lpOwner = supplyParams.projectLPOwner;\r\n    burnLPTokens = supplyParams.burnLPTokens;\r\n\r\n    _tokenHasTax = _processTaxParams(taxParams);\r\n    metadropTaxPeriodInDays = taxParams.metadropTaxPeriodInDays;\r\n    swapThresholdBasisPoints = uint16(taxParams.taxSwapThresholdBasisPoints);\r\n    projectTaxRecipient = taxParams.projectTaxRecipient;\r\n    metadropTaxRecipient = taxParams.metadropTaxRecipient;\r\n\r\n    _mintBalances(\r\n      lpSupply,\r\n      projectSupply,\r\n      poolParams.poolSupply * (10 ** decimals())\r\n    );\r\n\r\n    uniswapV2Pair = _createPair();\r\n  }\r\n\r\n  /**\r\n   * @dev {onlyOwnerFactoryOrPool}\r\n   *\r\n   * Throws if called by any account other than the owner, factory or pool.\r\n   */\r\n  modifier onlyOwnerFactoryOrPool() {\r\n    if (\r\n      metadropFactory != _msgSender() &&\r\n      owner() != _msgSender() &&\r\n      driPool != _msgSender()\r\n    ) {\r\n      _revert(CallerIsNotFactoryProjectOwnerOrPool.selector);\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev function {_1___telegram}\r\n   *\r\n   * Returns the stored telegram address\r\n   *\r\n   * @return string The telegram address\r\n   */\r\n  function _1___telegram() external view returns (string memory) {\r\n    return _telegramLink;\r\n  }\r\n\r\n  /**\r\n   * @dev function {_2___twitter}\r\n   *\r\n   * Returns the stored twitter address\r\n   *\r\n   * @return string The twitter address\r\n   */\r\n  function _2___twitter() external view returns (string memory) {\r\n    return _twitterLink;\r\n  }\r\n\r\n  /**\r\n   * @dev function {_3___website}\r\n   *\r\n   * Returns the stored website address\r\n   *\r\n   * @return string The website address\r\n   */\r\n  function _3___website() external view returns (string memory) {\r\n    return _websiteLink;\r\n  }\r\n\r\n  /**\r\n   * @dev function {_4___other}\r\n   *\r\n   * Returns the stored other link address\r\n   *\r\n   * @return string The other link address\r\n   */\r\n  function _4___other() external view returns (string memory) {\r\n    return _otherLink;\r\n  }\r\n\r\n  /**\r\n   * @dev function {_decodeBaseParams}\r\n   *\r\n   * Decode NFT Parameters\r\n   *\r\n   * @param projectOwner_ The owner of this contract\r\n   * @param encodedBaseParams_ The base params encoded into a bytes array\r\n   */\r\n  function _decodeBaseParams(\r\n    address projectOwner_,\r\n    bytes memory encodedBaseParams_\r\n  ) internal {\r\n    _transferOwnership(projectOwner_);\r\n\r\n    (\r\n      _name,\r\n      _symbol,\r\n      _websiteLink,\r\n      _twitterLink,\r\n      _telegramLink,\r\n      _otherLink\r\n    ) = abi.decode(\r\n      encodedBaseParams_,\r\n      (string, string, string, string, string, string)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev function {_processSupplyParams}\r\n   *\r\n   * Process provided supply params\r\n   *\r\n   * @param erc20SupplyParameters_ The supply params\r\n   * @param erc20PoolParameters_ The pool params\r\n   */\r\n  function _processSupplyParams(\r\n    ERC20SupplyParameters memory erc20SupplyParameters_,\r\n    ERC20PoolParameters memory erc20PoolParameters_\r\n  ) internal {\r\n    if (\r\n      erc20SupplyParameters_.maxSupply !=\r\n      (erc20SupplyParameters_.lpSupply +\r\n        erc20SupplyParameters_.projectSupply +\r\n        erc20PoolParameters_.poolSupply)\r\n    ) {\r\n      _revert(SupplyTotalMismatch.selector);\r\n    }\r\n\r\n    if (erc20SupplyParameters_.maxSupply > type(uint128).max) {\r\n      _revert(MaxSupplyTooHigh.selector);\r\n    }\r\n\r\n    if (erc20SupplyParameters_.lpLockupInDays > type(uint88).max) {\r\n      _revert(LPLockUpMustFitUint88.selector);\r\n    }\r\n\r\n    _unlimited.add(erc20SupplyParameters_.projectSupplyRecipient);\r\n    _unlimited.add(address(this));\r\n    _unlimited.add(address(0));\r\n  }\r\n\r\n  /**\r\n   * @dev function {_processTaxParams}\r\n   *\r\n   * Process provided tax params\r\n   *\r\n   * @param erc20TaxParameters_ The tax params\r\n   */\r\n  function _processTaxParams(\r\n    ERC20TaxParameters memory erc20TaxParameters_\r\n  ) internal returns (bool tokenHasTax_) {\r\n    /**\r\n     * @dev We use the immutable var {_tokenHasTax} to avoid unneccesary storage writes and reads. If this\r\n     * token does NOT have tax applied then there is no need to store or read these parameters, and we can\r\n     * avoid this simply by checking the immutable var. Pass back the value for this var from this method.\r\n     */\r\n    if (\r\n      erc20TaxParameters_.projectBuyTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.projectSellTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.metadropBuyTaxBasisPoints == 0 &&\r\n      erc20TaxParameters_.metadropSellTaxBasisPoints == 0\r\n    ) {\r\n      return false;\r\n    } else {\r\n      projectBuyTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.projectBuyTaxBasisPoints\r\n      );\r\n      projectSellTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.projectSellTaxBasisPoints\r\n      );\r\n      metadropBuyTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.metadropBuyTaxBasisPoints\r\n      );\r\n      metadropSellTaxBasisPoints = uint16(\r\n        erc20TaxParameters_.metadropSellTaxBasisPoints\r\n      );\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_mintBalances}\r\n   *\r\n   * Mint initial balances\r\n   *\r\n   * @param lpMint_ The number of tokens for liquidity\r\n   * @param projectMint_ The number of tokens for the project treasury\r\n   * @param poolMint_ The number of tokens for the launch pool\r\n   */\r\n  function _mintBalances(\r\n    uint256 lpMint_,\r\n    uint256 projectMint_,\r\n    uint256 poolMint_\r\n  ) internal {\r\n    if (lpMint_ > 0) {\r\n      _mint(address(this), lpMint_);\r\n    }\r\n\r\n    if (projectMint_ > 0) {\r\n      _mint(projectSupplyRecipient, projectMint_);\r\n    }\r\n\r\n    if (poolMint_ > 0) {\r\n      _mint(driPool, poolMint_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_createPair}\r\n   *\r\n   * Create the uniswap pair\r\n   *\r\n   * @return uniswapV2Pair_ The pair address\r\n   */\r\n  function _createPair() internal returns (address uniswapV2Pair_) {\r\n    if (_totalSupply > 0) {\r\n      uniswapV2Pair_ = IUniswapV2Factory(_uniswapRouter.factory()).createPair(\r\n        address(this),\r\n        _uniswapRouter.WETH()\r\n      );\r\n\r\n      _liquidityPools.add(uniswapV2Pair_);\r\n      emit LiquidityPoolCreated(uniswapV2Pair_);\r\n    }\r\n    _unlimited.add(address(_uniswapRouter));\r\n    _unlimited.add(uniswapV2Pair_);\r\n    return (uniswapV2Pair_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {addInitialLiquidity}\r\n   *\r\n   * Add initial liquidity to the uniswap pair\r\n   *\r\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\r\n   * @param lpLockupInDaysOverride_ The number of days to lock liquidity NOTE you can pass 0 to use the stored value.\r\n   * This value is an override, and will override a stored value which is LOWER that it. If the value you are passing is\r\n   * LOWER than the stored value the stored value will not be reduced.\r\n   *\r\n   * Example usage 1: When creating the coin the lpLockupInDays is set to 0. This means that on this call the\r\n   * user can set the lockup to any value they like, as all integer values greater than zero will be used to override\r\n   * that set in storage.\r\n   *\r\n   * Example usage 2: When using a DRI Pool the lockup period is set on this contract and the pool need not know anything\r\n   * about this setting. The pool can pass back a 0 on this call and know that the existing value stored on this contract\r\n   * will be used.\r\n   * @param burnLPTokensOverride_ If the LP tokens should be burned (otherwise they are locked). This is an override field\r\n   * that can ONLY be used to override a held value of FALSE with a new value of TRUE.\r\n   *\r\n   * Example usage 1: When creating the coin the user didn't add liquidity, or specify that the LP tokens were to be burned.\r\n   * So burnLPTokens is held as FALSE. When they add liquidity they want to lock tokens, so they pass this in as FALSE again,\r\n   * and it remains FALSE.\r\n   *\r\n   * Example usage 2: As above, but when later adding liquidity the user wants to burn the LP. So the stored value is FALSE\r\n   * and the user passes TRUE into this method. The TRUE overrides the held value of FALSE and the tokens are burned.\r\n   *\r\n   * Example uusage 3: The user is using a DRI pool and they have specified on the coin creation that the LP tokens are to\r\n   * be burned. This contract therefore holds TRUE for burnLPTokens. The DRI pool does not need to know what the user has\r\n   * selected. It can safely pass back FALSE to this method call and the stored value of TRUE will remain, resulting in the\r\n   * LP tokens being burned.\r\n   */\r\n  function addInitialLiquidity(\r\n    uint256 vaultFee_,\r\n    uint256 lpLockupInDaysOverride_,\r\n    bool burnLPTokensOverride_\r\n  ) external payable onlyOwnerFactoryOrPool {\r\n    uint256 ethForLiquidity;\r\n\r\n    if ((burnLPTokens == false) && (burnLPTokensOverride_ == true)) {\r\n      burnLPTokens = true;\r\n    }\r\n\r\n    if (burnLPTokens) {\r\n      if (msg.value == 0) {\r\n        _revert(NoETHForLiquidityPair.selector);\r\n      }\r\n      ethForLiquidity = msg.value;\r\n    } else {\r\n      if (vaultFee_ >= msg.value) {\r\n        // The amount of ETH MUST exceed the vault fee, otherwise what liquidity are we adding?\r\n        _revert(NoETHForLiquidityPair.selector);\r\n      }\r\n      ethForLiquidity = msg.value - vaultFee_;\r\n    }\r\n\r\n    if (lpLockupInDaysOverride_ > lpLockupInDays) {\r\n      lpLockupInDays = uint88(lpLockupInDaysOverride_);\r\n    }\r\n\r\n    _addInitialLiquidity(ethForLiquidity, vaultFee_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_addInitialLiquidity}\r\n   *\r\n   * Add initial liquidity to the uniswap pair (internal function that does processing)\r\n   *\r\n   * @param ethAmount_ The amount of ETH passed into the call\r\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\r\n   */\r\n  function _addInitialLiquidity(\r\n    uint256 ethAmount_,\r\n    uint256 vaultFee_\r\n  ) internal {\r\n    // Funded date is the date of first funding. We can only add initial liquidity once. If this date is set,\r\n    // we cannot proceed\r\n    if (fundedDate != 0) {\r\n      _revert(InitialLiquidityAlreadyAdded.selector);\r\n    }\r\n\r\n    fundedDate = uint32(block.timestamp);\r\n\r\n    // Can only do this if this contract holds tokens:\r\n    if (balanceOf(address(this)) == 0) {\r\n      _revert(NoTokenForLiquidityPair.selector);\r\n    }\r\n\r\n    // Approve the uniswap router for an inifinite amount (max uint256)\r\n    // This means that we don't need to worry about later incrememtal\r\n    // approvals on tax swaps, as the uniswap router allowance will never\r\n    // be decreased (see code in decreaseAllowance for reference)\r\n    _approve(address(this), address(_uniswapRouter), type(uint256).max);\r\n\r\n    // Add the liquidity:\r\n    (uint256 amountA, uint256 amountB, uint256 lpTokens) = _uniswapRouter\r\n      .addLiquidityETH{value: ethAmount_}(\r\n      address(this),\r\n      balanceOf(address(this)),\r\n      0,\r\n      0,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n\r\n    emit InitialLiquidityAdded(amountA, amountB, lpTokens);\r\n\r\n    // We now set this to false so that future transactions can be eligibile for autoswaps\r\n    _autoSwapInProgress = false;\r\n\r\n    // Are we locking, or burning?\r\n    if (burnLPTokens) {\r\n      _burnLiquidity(lpTokens);\r\n    } else {\r\n      // Lock the liquidity:\r\n      _addLiquidityToVault(vaultFee_, lpTokens);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_addLiquidityToVault}\r\n   *\r\n   * Lock initial liquidity on vault contract\r\n   *\r\n   * @param vaultFee_ The vault fee in wei. This must match the required fee from the external vault contract.\r\n   * @param lpTokens_ The amount of LP tokens to be locked\r\n   */\r\n  function _addLiquidityToVault(uint256 vaultFee_, uint256 lpTokens_) internal {\r\n    IERC20(uniswapV2Pair).approve(address(_tokenVault), lpTokens_);\r\n\r\n    _tokenVault.lockLPToken{value: vaultFee_}(\r\n      uniswapV2Pair,\r\n      IERC20(uniswapV2Pair).balanceOf(address(this)),\r\n      block.timestamp + (lpLockupInDays * 1 days),\r\n      payable(address(0)),\r\n      true,\r\n      payable(lpOwner)\r\n    );\r\n\r\n    emit LiquidityLocked(lpTokens_, lpLockupInDays);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_burnLiquidity}\r\n   *\r\n   * Burn LP tokens\r\n   *\r\n   * @param lpTokens_ The amount of LP tokens to be locked\r\n   */\r\n  function _burnLiquidity(uint256 lpTokens_) internal {\r\n    IERC20(uniswapV2Pair).transfer(address(0), lpTokens_);\r\n\r\n    emit LiquidityBurned(lpTokens_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {updateLinks} onlyOwner\r\n   *\r\n   * Allows the owner to update links\r\n   *\r\n   * @param linkHasChanged_ a bool array, set to true where the corresponding link has been updated\r\n   * @param links_ a string array, holds updated links\r\n   */\r\n  function updateLinks(\r\n    bool[4] memory linkHasChanged_,\r\n    string[4] memory links_\r\n  ) external onlyOwner {\r\n    if (linkHasChanged_[0]) {\r\n      _telegramLink = links_[0];\r\n    }\r\n\r\n    if (linkHasChanged_[1]) {\r\n      _twitterLink = links_[1];\r\n    }\r\n\r\n    if (linkHasChanged_[2]) {\r\n      _websiteLink = links_[2];\r\n    }\r\n\r\n    if (linkHasChanged_[3]) {\r\n      _otherLink = links_[3];\r\n    }\r\n\r\n    emit LinksUpdated();\r\n  }\r\n\r\n  /**\r\n   * @dev function {isLiquidityPool}\r\n   *\r\n   * Return if an address is a liquidity pool\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't a liquidity pool\r\n   */\r\n  function isLiquidityPool(address queryAddress_) public view returns (bool) {\r\n    /** @dev We check the uniswapV2Pair address first as this is an immutable variable and therefore does not need\r\n     * to be fetched from storage, saving gas if this address IS the uniswapV2Pool. We also add this address\r\n     * to the enumerated set for ease of reference (for example it is returned in the getter), and it does\r\n     * not add gas to any other calls, that still complete in 0(1) time.\r\n     */\r\n    return (queryAddress_ == uniswapV2Pair ||\r\n      _liquidityPools.contains(queryAddress_));\r\n  }\r\n\r\n  /**\r\n   * @dev function {liquidityPools}\r\n   *\r\n   * Returns a list of all liquidity pools\r\n   *\r\n   * @return liquidityPools_ a list of all liquidity pools\r\n   */\r\n  function liquidityPools()\r\n    external\r\n    view\r\n    returns (address[] memory liquidityPools_)\r\n  {\r\n    return (_liquidityPools.values());\r\n  }\r\n\r\n  /**\r\n   * @dev function {addLiquidityPool} onlyOwner\r\n   *\r\n   * Allows the manager to add a liquidity pool to the pool enumerable set\r\n   *\r\n   * @param newLiquidityPool_ The address of the new liquidity pool\r\n   */\r\n  function addLiquidityPool(address newLiquidityPool_) public onlyOwner {\r\n    // Don't allow calls that didn't pass an address:\r\n    if (newLiquidityPool_ == address(0)) {\r\n      _revert(LiquidityPoolCannotBeAddressZero.selector);\r\n    }\r\n    // Only allow smart contract addresses to be added, as only these can be pools:\r\n    if (newLiquidityPool_.code.length == 0) {\r\n      _revert(LiquidityPoolMustBeAContractAddress.selector);\r\n    }\r\n    // Add this to the enumerated list:\r\n    _liquidityPools.add(newLiquidityPool_);\r\n    emit LiquidityPoolAdded(newLiquidityPool_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {removeLiquidityPool} onlyOwner\r\n   *\r\n   * Allows the manager to remove a liquidity pool\r\n   *\r\n   * @param removedLiquidityPool_ The address of the old removed liquidity pool\r\n   */\r\n  function removeLiquidityPool(\r\n    address removedLiquidityPool_\r\n  ) external onlyOwner {\r\n    // Remove this from the enumerated list:\r\n    _liquidityPools.remove(removedLiquidityPool_);\r\n    emit LiquidityPoolRemoved(removedLiquidityPool_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {isUnlimited}\r\n   *\r\n   * Return if an address is unlimited (is not subject to per txn and per wallet limits)\r\n   *\r\n   * @param queryAddress_ The address being queried\r\n   * @return bool The address is / isn't unlimited\r\n   */\r\n  function isUnlimited(address queryAddress_) public view returns (bool) {\r\n    return (_unlimited.contains(queryAddress_));\r\n  }\r\n\r\n  /**\r\n   * @dev function {unlimitedAddresses}\r\n   *\r\n   * Returns a list of all unlimited addresses\r\n   *\r\n   * @return unlimitedAddresses_ a list of all unlimited addresses\r\n   */\r\n  function unlimitedAddresses()\r\n    external\r\n    view\r\n    returns (address[] memory unlimitedAddresses_)\r\n  {\r\n    return (_unlimited.values());\r\n  }\r\n\r\n  /**\r\n   * @dev function {addUnlimited} onlyOwner\r\n   *\r\n   * Allows the manager to add an unlimited address\r\n   *\r\n   * @param newUnlimited_ The address of the new unlimited address\r\n   */\r\n  function addUnlimited(address newUnlimited_) external onlyOwner {\r\n    // Add this to the enumerated list:\r\n    _unlimited.add(newUnlimited_);\r\n    emit UnlimitedAddressAdded(newUnlimited_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {removeUnlimited} onlyOwner\r\n   *\r\n   * Allows the manager to remove an unlimited address\r\n   *\r\n   * @param removedUnlimited_ The address of the old removed unlimited address\r\n   */\r\n  function removeUnlimited(address removedUnlimited_) external onlyOwner {\r\n    // Remove this from the enumerated list:\r\n    _unlimited.remove(removedUnlimited_);\r\n    emit UnlimitedAddressRemoved(removedUnlimited_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {isValidCaller}\r\n   *\r\n   * Return if an address is a valid caller\r\n   *\r\n   * @param queryHash_ The code hash being queried\r\n   * @return bool The address is / isn't a valid caller\r\n   */\r\n  function isValidCaller(bytes32 queryHash_) public view returns (bool) {\r\n    return (_validCallerCodeHashes.contains(queryHash_));\r\n  }\r\n\r\n  /**\r\n   * @dev function {validCallers}\r\n   *\r\n   * Returns a list of all valid caller code hashes\r\n   *\r\n   * @return validCallerHashes_ a list of all valid caller code hashes\r\n   */\r\n  function validCallers()\r\n    external\r\n    view\r\n    returns (bytes32[] memory validCallerHashes_)\r\n  {\r\n    return (_validCallerCodeHashes.values());\r\n  }\r\n\r\n  /**\r\n   * @dev function {addValidCaller} onlyOwner\r\n   *\r\n   * Allows the owner to add the hash of a valid caller\r\n   *\r\n   * @param newValidCallerHash_ The hash of the new valid caller\r\n   */\r\n  function addValidCaller(bytes32 newValidCallerHash_) external onlyOwner {\r\n    _validCallerCodeHashes.add(newValidCallerHash_);\r\n    emit ValidCallerAdded(newValidCallerHash_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {removeValidCaller} onlyOwner\r\n   *\r\n   * Allows the owner to remove a valid caller\r\n   *\r\n   * @param removedValidCallerHash_ The hash of the old removed valid caller\r\n   */\r\n  function removeValidCaller(\r\n    bytes32 removedValidCallerHash_\r\n  ) external onlyOwner {\r\n    // Remove this from the enumerated list:\r\n    _validCallerCodeHashes.remove(removedValidCallerHash_);\r\n    emit ValidCallerRemoved(removedValidCallerHash_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {setProjectTaxRecipient} onlyOwner\r\n   *\r\n   * Allows the manager to set the project tax recipient address\r\n   *\r\n   * @param projectTaxRecipient_ New recipient address\r\n   */\r\n  function setProjectTaxRecipient(\r\n    address projectTaxRecipient_\r\n  ) external onlyOwner {\r\n    projectTaxRecipient = projectTaxRecipient_;\r\n    emit ProjectTaxRecipientUpdated(projectTaxRecipient_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {setSwapThresholdBasisPoints} onlyOwner\r\n   *\r\n   * Allows the manager to set the autoswap threshold\r\n   *\r\n   * @param swapThresholdBasisPoints_ New swap threshold in basis points\r\n   */\r\n  function setSwapThresholdBasisPoints(\r\n    uint16 swapThresholdBasisPoints_\r\n  ) external onlyOwner {\r\n    uint256 oldswapThresholdBasisPoints = swapThresholdBasisPoints;\r\n    swapThresholdBasisPoints = swapThresholdBasisPoints_;\r\n    emit AutoSwapThresholdUpdated(\r\n      oldswapThresholdBasisPoints,\r\n      swapThresholdBasisPoints_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev function {setProjectTaxRates} onlyOwner\r\n   *\r\n   * Change the tax rates, subject to only ever decreasing\r\n   *\r\n   * @param newProjectBuyTaxBasisPoints_ The new buy tax rate\r\n   * @param newProjectSellTaxBasisPoints_ The new sell tax rate\r\n   */\r\n  function setProjectTaxRates(\r\n    uint16 newProjectBuyTaxBasisPoints_,\r\n    uint16 newProjectSellTaxBasisPoints_\r\n  ) external onlyOwner {\r\n    uint16 oldBuyTaxBasisPoints = projectBuyTaxBasisPoints;\r\n    uint16 oldSellTaxBasisPoints = projectSellTaxBasisPoints;\r\n\r\n    // Cannot increase, down only\r\n    if (newProjectBuyTaxBasisPoints_ > oldBuyTaxBasisPoints) {\r\n      _revert(CanOnlyReduce.selector);\r\n    }\r\n    // Cannot increase, down only\r\n    if (newProjectSellTaxBasisPoints_ > oldSellTaxBasisPoints) {\r\n      _revert(CanOnlyReduce.selector);\r\n    }\r\n\r\n    projectBuyTaxBasisPoints = newProjectBuyTaxBasisPoints_;\r\n    projectSellTaxBasisPoints = newProjectSellTaxBasisPoints_;\r\n\r\n    // If either rate has been reduced to zero we set the metadrop tax rate\r\n    // (if non zero) to zero as well:\r\n    if (\r\n      newProjectBuyTaxBasisPoints_ == 0 || newProjectSellTaxBasisPoints_ == 0\r\n    ) {\r\n      uint16 oldMetadropBuyTaxBasisPoints = metadropBuyTaxBasisPoints;\r\n      uint16 oldMetadropSellTaxBasisPoints = metadropSellTaxBasisPoints;\r\n      uint16 newMetadropBuyTaxBasisPoints = oldMetadropBuyTaxBasisPoints;\r\n      uint16 newMetadropSellTaxBasisPoints = oldMetadropSellTaxBasisPoints;\r\n\r\n      if (newProjectBuyTaxBasisPoints_ == 0) {\r\n        newMetadropBuyTaxBasisPoints = 0;\r\n        metadropBuyTaxBasisPoints = 0;\r\n      }\r\n      if (newProjectSellTaxBasisPoints_ == 0) {\r\n        newMetadropSellTaxBasisPoints = 0;\r\n        metadropSellTaxBasisPoints = 0;\r\n      }\r\n\r\n      emit MetadropTaxBasisPointsChanged(\r\n        oldMetadropBuyTaxBasisPoints,\r\n        newMetadropBuyTaxBasisPoints,\r\n        oldMetadropSellTaxBasisPoints,\r\n        newMetadropSellTaxBasisPoints\r\n      );\r\n    }\r\n\r\n    emit ProjectTaxBasisPointsChanged(\r\n      oldBuyTaxBasisPoints,\r\n      newProjectBuyTaxBasisPoints_,\r\n      oldSellTaxBasisPoints,\r\n      newProjectSellTaxBasisPoints_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev function {setLimits} onlyOwner\r\n   *\r\n   * Change the limits on transactions and holdings\r\n   *\r\n   * @param newMaxTokensPerTransaction_ The new per txn limit\r\n   * @param newMaxTokensPerWallet_ The new tokens per wallet limit\r\n   */\r\n  function setLimits(\r\n    uint256 newMaxTokensPerTransaction_,\r\n    uint256 newMaxTokensPerWallet_\r\n  ) external onlyOwner {\r\n    uint256 oldMaxTokensPerTransaction = maxTokensPerTransaction;\r\n    uint256 oldMaxTokensPerWallet = maxTokensPerWallet;\r\n    // Limit can only be increased:\r\n    if (\r\n      (oldMaxTokensPerTransaction == 0 && newMaxTokensPerTransaction_ != 0) ||\r\n      (oldMaxTokensPerWallet == 0 && newMaxTokensPerWallet_ != 0)\r\n    ) {\r\n      _revert(LimitsCanOnlyBeRaised.selector);\r\n    }\r\n    if (\r\n      ((newMaxTokensPerTransaction_ != 0) &&\r\n        newMaxTokensPerTransaction_ < oldMaxTokensPerTransaction) ||\r\n      ((newMaxTokensPerWallet_ != 0) &&\r\n        newMaxTokensPerWallet_ < oldMaxTokensPerWallet)\r\n    ) {\r\n      _revert(LimitsCanOnlyBeRaised.selector);\r\n    }\r\n\r\n    maxTokensPerTransaction = uint128(newMaxTokensPerTransaction_);\r\n    maxTokensPerWallet = uint128(newMaxTokensPerWallet_);\r\n\r\n    emit LimitsUpdated(\r\n      oldMaxTokensPerTransaction,\r\n      newMaxTokensPerTransaction_,\r\n      oldMaxTokensPerWallet,\r\n      newMaxTokensPerWallet_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev function {limitsEnforced}\r\n   *\r\n   * Return if limits are enforced on this contract\r\n   *\r\n   * @return bool : they are / aren't\r\n   */\r\n  function limitsEnforced() public view returns (bool) {\r\n    // Limits are not enforced if\r\n    // this is renounced AND after then protection end date\r\n    // OR prior to LP funding:\r\n    // The second clause of 'fundedDate == 0' isn't strictly needed, since with a funded\r\n    // date of 0 we would always expect the block.timestamp to be less than 0 plus\r\n    // the botProtectionDurationInSeconds. But, to cover the miniscule chance of a user\r\n    // selecting a truly enormous bot protection period, such that when added to 0 it\r\n    // is more than the current block.timestamp, we have included this second clause. There\r\n    // is no permanent gas overhead (the logic will be returning from the first clause after\r\n    // the bot protection period has expired). During the bot protection period there is a minor\r\n    // gas overhead from evaluating the fundedDate == 0 (which will be false), but this is minimal.\r\n    if (\r\n      (owner() == address(0) &&\r\n        block.timestamp > fundedDate + botProtectionDurationInSeconds) ||\r\n      fundedDate == 0\r\n    ) {\r\n      return false;\r\n    } else {\r\n      // LP has been funded AND we are within the protection period:\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the name of the token.\r\n   */\r\n  function name() public view virtual override returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the symbol of the token, usually a shorter version of the\r\n   * name.\r\n   */\r\n  function symbol() public view virtual override returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of decimals used to get its user representation.\r\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n   *\r\n   * Tokens usually opt for a value of 18, imitating the relationship between\r\n   * Ether and Wei. This is the default value returned by this function, unless\r\n   * it's overridden.\r\n   *\r\n   * NOTE: This information is only used for _display_ purposes: it in\r\n   * no way affects any of the arithmetic of the contract, including\r\n   * {IERC20-balanceOf} and {IERC20-transfer}.\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-totalSupply}.\r\n   */\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev getMetadropBuyTaxBasisPoints\r\n   *\r\n   * Return the metadrop buy tax basis points given the timed expiry\r\n   */\r\n  function getMetadropBuyTaxBasisPoints() public view returns (uint256) {\r\n    // If we are outside the metadrop tax period this is ZERO\r\n    if (block.timestamp > (fundedDate + (metadropTaxPeriodInDays * 1 days))) {\r\n      return 0;\r\n    } else {\r\n      return metadropBuyTaxBasisPoints;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev getMetadropSellTaxBasisPoints\r\n   *\r\n   * Return the metadrop sell tax basis points given the timed expiry\r\n   */\r\n  function getMetadropSellTaxBasisPoints() public view returns (uint256) {\r\n    // If we are outside the metadrop tax period this is ZERO\r\n    if (block.timestamp > (fundedDate + (metadropTaxPeriodInDays * 1 days))) {\r\n      return 0;\r\n    } else {\r\n      return metadropSellTaxBasisPoints;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev totalBuyTaxBasisPoints\r\n   *\r\n   * Provide easy to view tax total:\r\n   */\r\n  function totalBuyTaxBasisPoints() public view returns (uint256) {\r\n    return projectBuyTaxBasisPoints + getMetadropBuyTaxBasisPoints();\r\n  }\r\n\r\n  /**\r\n   * @dev totalSellTaxBasisPoints\r\n   *\r\n   * Provide easy to view tax total:\r\n   */\r\n  function totalSellTaxBasisPoints() public view returns (uint256) {\r\n    return projectSellTaxBasisPoints + getMetadropSellTaxBasisPoints();\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-balanceOf}.\r\n   */\r\n  function balanceOf(\r\n    address account\r\n  ) public view virtual override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(\r\n    address to,\r\n    uint256 amount\r\n  ) public virtual override(IERC20) returns (bool) {\r\n    address owner = _msgSender();\r\n    _transfer(\r\n      owner,\r\n      to,\r\n      amount,\r\n      (isLiquidityPool(owner) || isLiquidityPool(to))\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-allowance}.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) public view virtual override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-approve}.\r\n   *\r\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(\r\n    address spender,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {IERC20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {ERC20}.\r\n   *\r\n   * NOTE: Does not update the allowance if the current allowance\r\n   * is the maximum `uint256`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` and `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for ``from``'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    address spender = _msgSender();\r\n    _spendAllowance(from, spender, amount);\r\n    _transfer(from, to, amount, (isLiquidityPool(from) || isLiquidityPool(to)));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  ) public virtual returns (bool) {\r\n    address owner = _msgSender();\r\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  ) public virtual returns (bool) {\r\n    address owner = _msgSender();\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance < subtractedValue) {\r\n      _revert(AllowanceDecreasedBelowZero.selector);\r\n    }\r\n    unchecked {\r\n      _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves `amount` of tokens from `from` to `to`.\r\n   *\r\n   * This internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `from` cannot be the zero address.\r\n   * - `to` cannot be the zero address.\r\n   * - `from` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    bool applyTax\r\n  ) internal virtual {\r\n    _beforeTokenTransfer(from, to, amount);\r\n\r\n    // Perform pre-tax validation (e.g. amount doesn't exceed balance, max txn amount)\r\n    uint256 fromBalance = _pretaxValidationAndLimits(from, to, amount);\r\n\r\n    // Perform autoswap if eligible\r\n    _autoSwap(from, to);\r\n\r\n    // Process taxes\r\n    uint256 amountMinusTax = _taxProcessing(applyTax, to, from, amount);\r\n\r\n    // Perform post-tax validation (e.g. total balance after post-tax amount applied)\r\n    _posttaxValidationAndLimits(from, to, amountMinusTax);\r\n\r\n    _balances[from] = fromBalance - amount;\r\n    _balances[to] += amountMinusTax;\r\n\r\n    emit Transfer(from, to, amountMinusTax);\r\n\r\n    _afterTokenTransfer(from, to, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_pretaxValidationAndLimits}\r\n   *\r\n   * Perform validation on pre-tax amounts\r\n   *\r\n   * @param from_ From address for the transaction\r\n   * @param to_ To address for the transaction\r\n   * @param amount_ Amount of the transaction\r\n   */\r\n  function _pretaxValidationAndLimits(\r\n    address from_,\r\n    address to_,\r\n    uint256 amount_\r\n  ) internal view returns (uint256 fromBalance_) {\r\n    // This can't be a transfer to the liquidity pool before the funding date\r\n    // UNLESS the from address is this contract. This ensures that the initial\r\n    // LP funding transaction is from this contract using the supply of tokens\r\n    // designated for the LP pool, and therefore the initial price in the pool\r\n    // is being set as expected.\r\n    //\r\n    // This protects from, for example, tokens from a team minted supply being\r\n    // paired with ETH and added to the pool, setting the initial price, BEFORE\r\n    // the initial liquidity is added through this contract.\r\n    if (to_ == uniswapV2Pair && from_ != address(this) && fundedDate == 0) {\r\n      _revert(InitialLiquidityNotYetAdded.selector);\r\n    }\r\n\r\n    if (from_ == address(0)) {\r\n      _revert(TransferFromZeroAddress.selector);\r\n    }\r\n\r\n    if (to_ == address(0)) {\r\n      _revert(TransferToZeroAddress.selector);\r\n    }\r\n\r\n    fromBalance_ = _balances[from_];\r\n\r\n    if (fromBalance_ < amount_) {\r\n      _revert(TransferAmountExceedsBalance.selector);\r\n    }\r\n\r\n    if (\r\n      limitsEnforced() &&\r\n      (maxTokensPerTransaction != 0) &&\r\n      ((isLiquidityPool(from_) && !isUnlimited(to_)) ||\r\n        (isLiquidityPool(to_) && !isUnlimited(from_)))\r\n    ) {\r\n      // Liquidity pools aren't always going to round cleanly. This can (and does)\r\n      // mean that a limit of 5,000 tokens (for example) will trigger on a transfer\r\n      // of 5,000 tokens, as the transfer is actually for 5,000.00000000000000213.\r\n      // While 4,999 will work fine, it isn't hugely user friendly. So we buffer\r\n      // the limit with rounding decimals, which in all cases are considerably less\r\n      // than one whole token:\r\n      uint256 roundedLimited;\r\n\r\n      unchecked {\r\n        roundedLimited = maxTokensPerTransaction + ROUND_DEC;\r\n      }\r\n\r\n      if (amount_ > roundedLimited) {\r\n        _revert(MaxTokensPerTxnExceeded.selector);\r\n      }\r\n    }\r\n\r\n    return (fromBalance_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_posttaxValidationAndLimits}\r\n   *\r\n   * Perform validation on post-tax amounts\r\n   *\r\n   * @param to_ To address for the transaction\r\n   * @param amount_ Amount of the transaction\r\n   */\r\n  function _posttaxValidationAndLimits(\r\n    address from_,\r\n    address to_,\r\n    uint256 amount_\r\n  ) internal view {\r\n    if (\r\n      limitsEnforced() &&\r\n      (maxTokensPerWallet != 0) &&\r\n      !isUnlimited(to_) &&\r\n      // If this is a buy (from a liquidity pool), we apply if the to_\r\n      // address isn't noted as unlimited:\r\n      (isLiquidityPool(from_) && !isUnlimited(to_))\r\n    ) {\r\n      // Liquidity pools aren't always going to round cleanly. This can (and does)\r\n      // mean that a limit of 5,000 tokens (for example) will trigger on a max holding\r\n      // of 5,000 tokens, as the transfer to achieve that is actually for\r\n      // 5,000.00000000000000213. While 4,999 will work fine, it isn't hugely user friendly.\r\n      // So we buffer the limit with rounding decimals, which in all cases are considerably\r\n      // less than one whole token:\r\n      uint256 roundedLimited;\r\n\r\n      unchecked {\r\n        roundedLimited = maxTokensPerWallet + ROUND_DEC;\r\n      }\r\n\r\n      if ((amount_ + balanceOf(to_) > roundedLimited)) {\r\n        _revert(MaxTokensPerWalletExceeded.selector);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_taxProcessing}\r\n   *\r\n   * Perform tax processing\r\n   *\r\n   * @param applyTax_ Do we apply tax to this transaction?\r\n   * @param to_ The reciever of the token\r\n   * @param from_ The sender of the token\r\n   * @param sentAmount_ The amount being send\r\n   * @return amountLessTax_ The amount that will be recieved, i.e. the send amount minus tax\r\n   */\r\n  function _taxProcessing(\r\n    bool applyTax_,\r\n    address to_,\r\n    address from_,\r\n    uint256 sentAmount_\r\n  ) internal returns (uint256 amountLessTax_) {\r\n    amountLessTax_ = sentAmount_;\r\n    unchecked {\r\n      if (_tokenHasTax && applyTax_ && !_autoSwapInProgress) {\r\n        uint256 tax;\r\n\r\n        // on sell\r\n        if (isLiquidityPool(to_) && totalSellTaxBasisPoints() > 0) {\r\n          if (projectSellTaxBasisPoints > 0) {\r\n            uint256 projectTax = ((sentAmount_ * projectSellTaxBasisPoints) /\r\n              BP_DENOM);\r\n            projectTaxPendingSwap += uint128(projectTax);\r\n            tax += projectTax;\r\n          }\r\n          uint256 metadropSellTax = getMetadropSellTaxBasisPoints();\r\n          if (metadropSellTax > 0) {\r\n            uint256 metadropTax = ((sentAmount_ * metadropSellTax) / BP_DENOM);\r\n            metadropTaxPendingSwap += uint128(metadropTax);\r\n            tax += metadropTax;\r\n          }\r\n        }\r\n        // on buy\r\n        else if (isLiquidityPool(from_) && totalBuyTaxBasisPoints() > 0) {\r\n          if (projectBuyTaxBasisPoints > 0) {\r\n            uint256 projectTax = ((sentAmount_ * projectBuyTaxBasisPoints) /\r\n              BP_DENOM);\r\n            projectTaxPendingSwap += uint128(projectTax);\r\n            tax += projectTax;\r\n          }\r\n          uint256 metadropBuyTax = getMetadropBuyTaxBasisPoints();\r\n          if (metadropBuyTax > 0) {\r\n            uint256 metadropTax = ((sentAmount_ * metadropBuyTax) / BP_DENOM);\r\n            metadropTaxPendingSwap += uint128(metadropTax);\r\n            tax += metadropTax;\r\n          }\r\n        }\r\n\r\n        if (tax > 0) {\r\n          _balances[address(this)] += tax;\r\n          emit Transfer(from_, address(this), tax);\r\n          amountLessTax_ -= tax;\r\n        }\r\n      }\r\n    }\r\n    return (amountLessTax_);\r\n  }\r\n\r\n  /**\r\n   * @dev function {_autoSwap}\r\n   *\r\n   * Automate the swap of accumulated tax fees to native token\r\n   *\r\n   * @param from_ The sender of the token\r\n   * @param to_ The recipient of the token\r\n   */\r\n  function _autoSwap(address from_, address to_) internal {\r\n    if (_tokenHasTax) {\r\n      uint256 contractBalance = balanceOf(address(this));\r\n      uint256 swapBalance = contractBalance;\r\n\r\n      uint256 swapThresholdInTokens = (_totalSupply *\r\n        swapThresholdBasisPoints) / BP_DENOM;\r\n\r\n      if (_eligibleForSwap(from_, to_, swapBalance, swapThresholdInTokens)) {\r\n        // Store that a swap back is in progress:\r\n        _autoSwapInProgress = true;\r\n        // Check if we need to reduce the amount of tokens for this swap:\r\n        if (swapBalance > swapThresholdInTokens * MAX_SWAP_THRESHOLD_MULTIPLE) {\r\n          swapBalance = swapThresholdInTokens * MAX_SWAP_THRESHOLD_MULTIPLE;\r\n        }\r\n        // Perform the auto swap to native token:\r\n        _swapTaxForNative(swapBalance, contractBalance);\r\n        // Flag that the autoswap is complete:\r\n        _autoSwapInProgress = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {_eligibleForSwap}\r\n   *\r\n   * Is the current transfer eligible for autoswap\r\n   *\r\n   * @param from_ The sender of the token\r\n   * @param to_ The recipient of the token\r\n   * @param taxBalance_ The current accumulated tax balance\r\n   * @param swapThresholdInTokens_ The swap threshold as a token amount\r\n   */\r\n  function _eligibleForSwap(\r\n    address from_,\r\n    address to_,\r\n    uint256 taxBalance_,\r\n    uint256 swapThresholdInTokens_\r\n  ) internal view returns (bool) {\r\n    return (taxBalance_ >= swapThresholdInTokens_ &&\r\n      !_autoSwapInProgress &&\r\n      !isLiquidityPool(from_) &&\r\n      from_ != address(_uniswapRouter) &&\r\n      to_ != address(_uniswapRouter));\r\n  }\r\n\r\n  /**\r\n   * @dev function {_swapTaxForNative}\r\n   *\r\n   * Swap tokens taken as tax for native token\r\n   *\r\n   * @param swapBalance_ The current accumulated tax balance to swap\r\n   * @param contractBalance_ The current accumulated total tax balance\r\n   */\r\n  function _swapTaxForNative(\r\n    uint256 swapBalance_,\r\n    uint256 contractBalance_\r\n  ) internal {\r\n    uint256 preSwapBalance = address(this).balance;\r\n\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = _uniswapRouter.WETH();\r\n\r\n    // Wrap external calls in try / catch to handle errors\r\n    try\r\n      _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        swapBalance_,\r\n        0,\r\n        path,\r\n        address(this),\r\n        block.timestamp + 600\r\n      )\r\n    {\r\n      uint256 postSwapBalance = address(this).balance;\r\n\r\n      uint256 balanceToDistribute = postSwapBalance - preSwapBalance;\r\n\r\n      uint256 totalPendingSwap = projectTaxPendingSwap + metadropTaxPendingSwap;\r\n\r\n      uint256 projectBalanceToDistribute = (balanceToDistribute *\r\n        projectTaxPendingSwap) / totalPendingSwap;\r\n\r\n      uint256 metadropBalanceToDistribute = (balanceToDistribute *\r\n        metadropTaxPendingSwap) / totalPendingSwap;\r\n\r\n      // We will not have swapped all tax tokens IF the amount was greater than the max auto swap.\r\n      // We therefore cannot just set the pending swap counters to 0. Instead, in this scenario,\r\n      // we must reduce them in proportion to the swap amount vs the remaining balance + swap\r\n      // amount.\r\n      //\r\n      // For example:\r\n      //  * swap Balance is 250\r\n      //  * contract balance is 385.\r\n      //  * projectTaxPendingSwap is 300\r\n      //  * metadropTaxPendingSwap is 85.\r\n      //\r\n      // The new total for the projectTaxPendingSwap is:\r\n      //   = 300 - ((300 * 250) / 385)\r\n      //   = 300 - 194\r\n      //   = 106\r\n      // The new total for the metadropTaxPendingSwap is:\r\n      //   = 85 - ((85 * 250) / 385)\r\n      //   = 85 - 55\r\n      //   = 30\r\n      //\r\n      if (swapBalance_ < contractBalance_) {\r\n        projectTaxPendingSwap -= uint128(\r\n          (projectTaxPendingSwap * swapBalance_) / contractBalance_\r\n        );\r\n        metadropTaxPendingSwap -= uint128(\r\n          (metadropTaxPendingSwap * swapBalance_) / contractBalance_\r\n        );\r\n      } else {\r\n        (projectTaxPendingSwap, metadropTaxPendingSwap) = (0, 0);\r\n      }\r\n      // Distribute to treasuries:\r\n      bool success;\r\n      address weth;\r\n      uint256 gas;\r\n\r\n      if (projectBalanceToDistribute > 0) {\r\n        // If no gas limit was provided or provided gas limit greater than gas left, just use the remaining gas.\r\n        gas = (CALL_GAS_LIMIT == 0 || CALL_GAS_LIMIT > gasleft())\r\n          ? gasleft()\r\n          : CALL_GAS_LIMIT;\r\n\r\n        // We limit the gas passed so that a called address cannot cause a block out of gas error:\r\n        (success, ) = projectTaxRecipient.call{\r\n          value: projectBalanceToDistribute,\r\n          gas: gas\r\n        }(\"\");\r\n\r\n        // If the ETH transfer fails, wrap the ETH and send it as WETH. We do this so that a called\r\n        // address cannot cause this transfer to fail, either intentionally or by mistake:\r\n        if (!success) {\r\n          if (weth == address(0)) {\r\n            weth = _uniswapRouter.WETH();\r\n          }\r\n\r\n          try IWETH(weth).deposit{value: projectBalanceToDistribute}() {\r\n            try\r\n              IERC20(address(weth)).transfer(\r\n                projectTaxRecipient,\r\n                projectBalanceToDistribute\r\n              )\r\n            {} catch {\r\n              // Dont allow a failed external call (in this case to WETH) to stop a transfer.\r\n              // Emit that this has occured and continue.\r\n              emit ExternalCallError(1);\r\n            }\r\n          } catch {\r\n            // Dont allow a failed external call (in this case to WETH) to stop a transfer.\r\n            // Emit that this has occured and continue.\r\n            emit ExternalCallError(2);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (metadropBalanceToDistribute > 0) {\r\n        // If no gas limit was provided or provided gas limit greater than gas left, just use the remaining gas.\r\n        gas = (CALL_GAS_LIMIT == 0 || CALL_GAS_LIMIT > gasleft())\r\n          ? gasleft()\r\n          : CALL_GAS_LIMIT;\r\n\r\n        (success, ) = metadropTaxRecipient.call{\r\n          value: metadropBalanceToDistribute,\r\n          gas: gas\r\n        }(\"\");\r\n\r\n        // If the ETH transfer fails, wrap the ETH and send it as WETH. We do this so that a called\r\n        // address cannot cause this transfer to fail, either intentionally or by mistake:\r\n        if (!success) {\r\n          if (weth == address(0)) {\r\n            weth = _uniswapRouter.WETH();\r\n          }\r\n          try IWETH(weth).deposit{value: metadropBalanceToDistribute}() {\r\n            try\r\n              IERC20(address(weth)).transfer(\r\n                metadropTaxRecipient,\r\n                metadropBalanceToDistribute\r\n              )\r\n            {} catch {\r\n              // Dont allow a failed external call (in this case to WETH) to stop a transfer.\r\n              // Emit that this has occured and continue.\r\n              emit ExternalCallError(3);\r\n            }\r\n          } catch {\r\n            // Dont allow a failed external call (in this case to WETH) to stop a transfer.\r\n            // Emit that this has occured and continue.\r\n            emit ExternalCallError(4);\r\n          }\r\n        }\r\n      }\r\n    } catch {\r\n      // Dont allow a failed external call (in this case to uniswap) to stop a transfer.\r\n      // Emit that this has occured and continue.\r\n      emit ExternalCallError(5);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev distributeTaxTokens\r\n   *\r\n   * Allows the distribution of tax tokens to the designated recipient(s)\r\n   *\r\n   * As part of standard processing the tax token balance being above the threshold\r\n   * will trigger an autoswap to ETH and distribution of this ETH to the designated\r\n   * recipients. This is automatic and there is no need for user involvement.\r\n   *\r\n   * As part of this swap there are a number of calculations performed, particularly\r\n   * if the tax balance is above MAX_SWAP_THRESHOLD_MULTIPLE.\r\n   *\r\n   * Testing indicates that these calculations are safe. But given the data / code\r\n   * interactions it remains possible that some edge case set of scenarios may cause\r\n   * an issue with these calculations.\r\n   *\r\n   * This method is therefore provided as a 'fallback' option to safely distribute\r\n   * accumulated taxes from the contract, with a direct transfer of the ERC20 tokens\r\n   * themselves.\r\n   */\r\n  function distributeTaxTokens() external {\r\n    if (projectTaxPendingSwap > 0) {\r\n      uint256 projectDistribution = projectTaxPendingSwap;\r\n      projectTaxPendingSwap = 0;\r\n      _transfer(address(this), projectTaxRecipient, projectDistribution, false);\r\n    }\r\n\r\n    if (metadropTaxPendingSwap > 0) {\r\n      uint256 metadropDistribution = metadropTaxPendingSwap;\r\n      metadropTaxPendingSwap = 0;\r\n      _transfer(\r\n        address(this),\r\n        metadropTaxRecipient,\r\n        metadropDistribution,\r\n        false\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {withdrawETH} onlyOwner\r\n   *\r\n   * A withdraw function to allow ETH to be withdrawn by the manager\r\n   *\r\n   * This contract should never hold ETH. The only envisaged scenario where\r\n   * it might hold ETH is a failed autoswap where the uniswap swap has completed,\r\n   * the recipient of ETH reverts, the contract then wraps to WETH and the\r\n   * wrap to WETH fails.\r\n   *\r\n   * This feels unlikely. But, for safety, we include this method.\r\n   *\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawETH(uint256 amount_) external onlyOwner {\r\n    (bool success, ) = _msgSender().call{value: amount_}(\"\");\r\n    if (!success) {\r\n      _revert(TransferFailed.selector);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev function {withdrawERC20} onlyOwner\r\n   *\r\n   * A withdraw function to allow ERC20s (except address(this)) to be withdrawn.\r\n   *\r\n   * This contract should never hold ERC20s other than tax tokens. The only envisaged\r\n   * scenario where it might hold an ERC20 is a failed autoswap where the uniswap swap\r\n   * has completed, the recipient of ETH reverts, the contract then wraps to WETH, the\r\n   * wrap to WETH succeeds, BUT then the transfer of WETH fails.\r\n   *\r\n   * This feels even less likely than the scenario where ETH is held on the contract.\r\n   * But, for safety, we include this method.\r\n   *\r\n   * @param token_ The ERC20 contract\r\n   * @param amount_ The amount to withdraw\r\n   */\r\n  function withdrawERC20(address token_, uint256 amount_) external onlyOwner {\r\n    if (token_ == address(this)) {\r\n      _revert(CannotWithdrawThisToken.selector);\r\n    }\r\n    IERC20(token_).safeTransfer(_msgSender(), amount_);\r\n  }\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function _mint(address account, uint256 amount) internal virtual {\r\n    if (account == address(0)) {\r\n      _revert(MintToZeroAddress.selector);\r\n    }\r\n\r\n    _beforeTokenTransfer(address(0), account, amount);\r\n\r\n    _totalSupply += uint128(amount);\r\n    unchecked {\r\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n      _balances[account] += amount;\r\n    }\r\n    emit Transfer(address(0), account, amount);\r\n\r\n    _afterTokenTransfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n  function _burn(address account, uint256 amount) internal virtual {\r\n    if (account == address(0)) {\r\n      _revert(BurnFromTheZeroAddress.selector);\r\n    }\r\n\r\n    _beforeTokenTransfer(account, address(0), amount);\r\n\r\n    uint256 accountBalance = _balances[account];\r\n    if (accountBalance < amount) {\r\n      _revert(BurnExceedsBalance.selector);\r\n    }\r\n\r\n    unchecked {\r\n      _balances[account] = accountBalance - amount;\r\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n      _totalSupply -= uint128(amount);\r\n    }\r\n\r\n    emit Transfer(account, address(0), amount);\r\n\r\n    _afterTokenTransfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n   *\r\n   * This internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    if (owner == address(0)) {\r\n      _revert(ApproveFromTheZeroAddress.selector);\r\n    }\r\n\r\n    if (spender == address(0)) {\r\n      _revert(ApproveToTheZeroAddress.selector);\r\n    }\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n   *\r\n   * Does not update the allowance amount in case of infinite allowance.\r\n   * Revert if not enough allowance is available.\r\n   *\r\n   * Might emit an {Approval} event.\r\n   */\r\n  function _spendAllowance(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal virtual {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n    if (currentAllowance != type(uint256).max) {\r\n      if (currentAllowance < amount) {\r\n        _revert(InsufficientAllowance.selector);\r\n      }\r\n\r\n      unchecked {\r\n        _approve(owner, spender, currentAllowance - amount);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys a `value` amount of tokens from the caller.\r\n   *\r\n   * See {ERC20-_burn}.\r\n   */\r\n  function burn(uint256 value) public virtual {\r\n    _burn(_msgSender(), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Destroys a `value` amount of tokens from `account`, deducting from\r\n   * the caller's allowance.\r\n   *\r\n   * See {ERC20-_burn} and {ERC20-allowance}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - the caller must have allowance for ``accounts``'s tokens of at least\r\n   * `value`.\r\n   */\r\n  function burnFrom(address account, uint256 value) public virtual {\r\n    _spendAllowance(account, _msgSender(), value);\r\n    _burn(account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Hook that is called before any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * will be transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  /**\r\n   * @dev Hook that is called after any transfer of tokens. This includes\r\n   * minting and burning.\r\n   *\r\n   * Calling conditions:\r\n   *\r\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n   * has been transferred to `to`.\r\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n   * - `from` and `to` are never both zero.\r\n   *\r\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n   */\r\n  function _afterTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal virtual {}\r\n\r\n  receive() external payable {}\r\n}\r\n\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n// @@                                                                                                @@\r\n// @@   Metadrop has no affiliation with and does not endorse this token or its creators in any      @@\r\n// @@   way, unless otherwise stated. For all terms and conditions associated with tokens launched   @@\r\n// @@   using Metadrop software, refer to the terms published at https://metadrop.com/legal.         @@\r\n// @@                                                                                                @@\r\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", "ABI": "[{\"inputs\":[{\"internalType\":\"address[5]\",\"name\":\"integrationAddresses_\",\"type\":\"address[5]\"},{\"internalType\":\"bytes\",\"name\":\"baseParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"supplyParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"taxParams_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"poolParams_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdapterParamsMustBeEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdditionToPoolIsBelowPerTransactionMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdditionToPoolWouldExceedPerAddressCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AdditionToPoolWouldExceedPoolCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowanceDecreasedBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStatusIsNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionStatusIsNotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"modules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"txGas\",\"type\":\"uint256\"}],\"name\":\"AuxCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidMustBeBelowTheFloorForRefundDuringAuction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidMustBeBelowTheFloorWhenReducingQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum IErrors.BondingCurveErrorType\",\"name\":\"error\",\"type\":\"uint8\"}],\"name\":\"BondingCurveError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnFromTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotDepositBoxOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactoryOrProjectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotFactoryProjectOwnerOrPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotPlatformAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotSuperAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotTheManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerMustBeLzApp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanOnlyReduce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotAddLiquidityOnCreateAndUseDRIPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetNewManagerToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetNewOwnerToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotWithdrawThisToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionAlreadyRevealed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsDecommissioned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeployerOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositBoxIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DestinationIsNotTrustedSource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DriPoolAddressCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GasLimitIsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectConfirmationValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialLiquidityAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialLiquidityNotYetAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAdapterParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracleSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSourceSendingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LPLockUpMustFitUint88\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LimitsCanOnlyBeRaised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPoolCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidityPoolMustBeAContractAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MachineAddressCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxBidQuantityIs255\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alreadyMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowance\",\"type\":\"uint256\"}],\"name\":\"MaxPublicMintAllowanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokensPerTxnExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokensPerWalletExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadataIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropFactoryOnlyOncePerReveal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropModulesOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadropOracleCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinGasLimitNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintingIsClosedForever\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewBuyTaxBasisPointsExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewSellTaxBasisPointsExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoETHForLiquidityPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPaymentDue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRefundForCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStoredMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokenForLiquidityPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTrustedPathRecord\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleSignatureHasExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeEndDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeMinETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargePerAddressMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargePoolPerTxnMinETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargePoolSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeStartDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParamTooLargeVestingDays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ParametersDoNotMatchSignedMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PassedConfigDoesNotMatchApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseCutOffHasPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentMustCoverPerMintFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDidNotSucceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformAdminCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformTreasuryCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsAboveMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolPhaseIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolPhaseIsNotAfter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolVestingNotYetComplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProjectOwnerCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsMaxPossibleCollectionSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsRemainingCollectionSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityExceedsRemainingPhaseSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferralIdAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestingMoreThanAvailableBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"previouslyMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAllocation\",\"type\":\"uint256\"}],\"name\":\"RequestingMoreThanRemainingAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoyaltyFeeWillExceedSalePrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShareTotalCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SuperAdminCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupplyTotalMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SupportWindowIsNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxFreeAddressCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaxPeriodStillInForce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TemplateNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThisMintIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSharesMustMatchDenominator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnrecognisedVRFMode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VRFCoordinatorCannotBeAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueExceedsMaximum\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"AutoSwapThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identifier\",\"type\":\"uint256\"}],\"name\":\"ExternalCallError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpToken\",\"type\":\"uint256\"}],\"name\":\"InitialLiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTokensPerTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTokensPerWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerWallet\",\"type\":\"uint256\"}],\"name\":\"LimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LinksUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidityBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpLockupInDays\",\"type\":\"uint256\"}],\"name\":\"LiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedPool\",\"type\":\"address\"}],\"name\":\"LiquidityPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellBasisPoints\",\"type\":\"uint256\"}],\"name\":\"MetadropTaxBasisPointsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellBasisPoints\",\"type\":\"uint256\"}],\"name\":\"ProjectTaxBasisPointsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"ProjectTaxRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RevenueAutoSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addedUnlimted\",\"type\":\"address\"}],\"name\":\"UnlimitedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"removedUnlimted\",\"type\":\"address\"}],\"name\":\"UnlimitedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"addedValidCaller\",\"type\":\"bytes32\"}],\"name\":\"ValidCallerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"removedValidCaller\",\"type\":\"bytes32\"}],\"name\":\"ValidCallerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_1___telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_2___twitter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_3___website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_4___other\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockupInDaysOverride_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"burnLPTokensOverride_\",\"type\":\"bool\"}],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool_\",\"type\":\"address\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUnlimited_\",\"type\":\"address\"}],\"name\":\"addUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newValidCallerHash_\",\"type\":\"bytes32\"}],\"name\":\"addValidCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botProtectionDurationInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnLPTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeTaxTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"driPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundedDate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadropBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMetadropSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"isLiquidityPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"isUnlimited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"queryHash_\",\"type\":\"bytes32\"}],\"name\":\"isValidCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnforced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidityPools_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLockupInDays\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerTransaction\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensPerWallet\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTaxPendingSwap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTaxPeriodInDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadropTaxRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectSupplyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectTaxPendingSwap\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectTaxRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedLiquidityPool_\",\"type\":\"address\"}],\"name\":\"removeLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedUnlimited_\",\"type\":\"address\"}],\"name\":\"removeUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"removedValidCallerHash_\",\"type\":\"bytes32\"}],\"name\":\"removeValidCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerTransaction_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxTokensPerWallet_\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newProjectBuyTaxBasisPoints_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newProjectSellTaxBasisPoints_\",\"type\":\"uint16\"}],\"name\":\"setProjectTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectTaxRecipient_\",\"type\":\"address\"}],\"name\":\"setProjectTaxRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"swapThresholdBasisPoints_\",\"type\":\"uint16\"}],\"name\":\"setSwapThresholdBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdBasisPoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellTaxBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlimitedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"unlimitedAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[4]\",\"name\":\"linkHasChanged_\",\"type\":\"bool[4]\"},{\"internalType\":\"string[4]\",\"name\":\"links_\",\"type\":\"string[4]\"}],\"name\":\"updateLinks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validCallers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"validCallerHashes_\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ERC20ByMetadrop", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArgumentse00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184d65746164726f70204552432054656d706c6174652056310000000000000000000000000000000000000000000000000000000000000000000000000000000a4d45544144524f5056310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000107777772e6d65746164726f702e636f6d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d406d65746164726f706dersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7cb4b03d3f5d5fd2a1681fb8f0a78f727941f8c76c37a8bf8d45af380873cd59"}