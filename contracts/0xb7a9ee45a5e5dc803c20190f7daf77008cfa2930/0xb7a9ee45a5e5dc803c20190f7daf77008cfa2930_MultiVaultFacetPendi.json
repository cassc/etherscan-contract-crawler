{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/multivault/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/IEverscale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IEverscale {\\n    struct EverscaleAddress {\\n        int8 wid;\\n        uint256 addr;\\n    }\\n\\n    struct EverscaleEvent {\\n        uint64 eventTransactionLt;\\n        uint32 eventTimestamp;\\n        bytes eventData;\\n        int8 configurationWid;\\n        uint256 configurationAddress;\\n        int8 eventContractWid;\\n        uint256 eventContractAddress;\\n        address proxy;\\n        uint32 round;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/IMultiVaultToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IMultiVaultToken {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external;\\n\\n    function burn(address account, uint256 amount) external;\\n    function mint(address account, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../IEverscale.sol\\\";\\nimport \\\"./IMultiVaultFacetPendingWithdrawals.sol\\\";\\n\\n\\ninterface IMultiVaultFacetDeposit {\\n    struct DepositParams {\\n        IEverscale.EverscaleAddress recipient;\\n        address token;\\n        uint amount;\\n        uint expected_evers;\\n        bytes payload;\\n    }\\n\\n    struct DepositNativeTokenParams {\\n        IEverscale.EverscaleAddress recipient;\\n        uint amount;\\n        uint expected_evers;\\n        bytes payload;\\n    }\\n\\n    function depositByNativeToken(\\n        DepositNativeTokenParams memory d\\n    ) external payable;\\n\\n    function depositByNativeToken(\\n        DepositNativeTokenParams memory d,\\n        uint256 expectedMinBounty,\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId[] memory pendingWithdrawalIds\\n    ) external payable;\\n\\n    function deposit(\\n        DepositParams memory d\\n    ) external payable;\\n\\n    function deposit(\\n        DepositParams memory d,\\n        uint256 expectedMinBounty,\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId[] memory pendingWithdrawalIds\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetDepositEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./IMultiVaultFacetTokens.sol\\\";\\n\\ninterface IMultiVaultFacetDepositEvents {\\n    event NativeTransfer(\\n        int8 native_wid,\\n        uint256 native_addr,\\n        uint128 amount,\\n        int8 recipient_wid,\\n        uint256 recipient_addr,\\n        uint value,\\n        uint expected_evers,\\n        bytes payload\\n    );\\n\\n    event AlienTransfer(\\n        uint256 base_chainId,\\n        uint160 base_token,\\n        string name,\\n        string symbol,\\n        uint8 decimals,\\n        uint128 amount,\\n        int8 recipient_wid,\\n        uint256 recipient_addr,\\n        uint value,\\n        uint expected_evers,\\n        bytes payload\\n    );\\n\\n    event Deposit(\\n        IMultiVaultFacetTokens.TokenType _type,\\n        address sender,\\n        address token,\\n        int8 recipient_wid,\\n        uint256 recipient_addr,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\ninterface IMultiVaultFacetLiquidity {\\n    struct Liquidity {\\n        uint activation;\\n        uint supply;\\n        uint cash;\\n        uint interest;\\n    }\\n\\n    function mint(\\n        address token,\\n        uint amount,\\n        address receiver\\n    ) external;\\n\\n    function redeem(\\n        address token,\\n        uint amount,\\n        address receiver\\n    ) external;\\n\\n    function exchangeRateCurrent(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getCash(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getSupply(\\n        address token\\n    ) external view returns(uint);\\n\\n    function getLPToken(\\n        address token\\n    ) external view returns (address);\\n\\n    function setTokenInterest(\\n        address token,\\n        uint interest\\n    ) external;\\n\\n    function setDefaultInterest(\\n        uint interest\\n    ) external;\\n\\n    function liquidity(\\n        address token\\n    ) external view returns (Liquidity memory);\\n\\n    function convertLPToUnderlying(\\n        address token,\\n        uint amount\\n    ) external view returns (uint);\\n\\n    function convertUnderlyingToLP(\\n        address token,\\n        uint amount\\n    ) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../IEverscale.sol\\\";\\nimport \\\"./IMultiVaultFacetWithdraw.sol\\\";\\n\\n\\ninterface IMultiVaultFacetPendingWithdrawals {\\n    enum ApproveStatus { NotRequired, Required, Approved, Rejected }\\n\\n    struct WithdrawalLimits {\\n        uint undeclared;\\n        uint daily;\\n        bool enabled;\\n    }\\n\\n    struct PendingWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        uint256 bounty;\\n        uint256 timestamp;\\n        ApproveStatus approveStatus;\\n\\n        uint256 chainId;\\n        IMultiVaultFacetWithdraw.Callback callback;\\n    }\\n\\n    struct PendingWithdrawalId {\\n        address recipient;\\n        uint256 id;\\n    }\\n\\n    struct WithdrawalPeriodParams {\\n        uint256 total;\\n        uint256 considered;\\n    }\\n\\n    function pendingWithdrawalsPerUser(address user) external view returns (uint);\\n    function pendingWithdrawalsTotal(address token) external view returns (uint);\\n\\n    function pendingWithdrawals(\\n        address user,\\n        uint256 id\\n    ) external view returns (PendingWithdrawalParams memory);\\n\\n    function setPendingWithdrawalBounty(\\n        uint256 id,\\n        uint256 bounty\\n    ) external;\\n\\n    function cancelPendingWithdrawal(\\n        uint256 id,\\n        uint256 amount,\\n        IEverscale.EverscaleAddress memory recipient,\\n        uint expected_evers,\\n        bytes memory payload,\\n        uint bounty\\n    ) external payable;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId memory pendingWithdrawalId,\\n        ApproveStatus approveStatus\\n    ) external;\\n\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId[] memory pendingWithdrawalId,\\n        ApproveStatus[] memory approveStatus\\n    ) external;\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId[] memory pendingWithdrawalIds\\n    ) external;\\n\\n    function withdrawalLimits(\\n        address token\\n    ) external view returns(WithdrawalLimits memory);\\n\\n    function withdrawalPeriods(\\n        address token,\\n        uint256 withdrawalPeriodId\\n    ) external view returns (WithdrawalPeriodParams memory);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetPendingWithdrawalsEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./IMultiVaultFacetPendingWithdrawals.sol\\\";\\n\\n\\ninterface IMultiVaultFacetPendingWithdrawalsEvents {\\n    event PendingWithdrawalCancel(\\n        address recipient,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event PendingWithdrawalUpdateBounty(\\n        address recipient,\\n        uint256 id,\\n        uint256 bounty\\n    );\\n\\n    event PendingWithdrawalCreated(\\n        address recipient,\\n        uint256 id,\\n        address token,\\n        uint256 amount,\\n        bytes32 payloadId\\n    );\\n\\n    event PendingWithdrawalWithdraw(\\n        address recipient,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event PendingWithdrawalFill(\\n        address recipient,\\n        uint256 id\\n    );\\n\\n    event PendingWithdrawalForce(\\n        address recipient,\\n        uint256 id\\n    );\\n\\n    event PendingWithdrawalUpdateApproveStatus(\\n        address recipient,\\n        uint256 id,\\n        IMultiVaultFacetPendingWithdrawals.ApproveStatus approveStatus\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetTokens {\\n    enum TokenType { Native, Alien }\\n\\n    struct TokenPrefix {\\n        uint activation;\\n        string name;\\n        string symbol;\\n    }\\n\\n    struct TokenMeta {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    struct Token {\\n        uint activation;\\n        bool blacklisted;\\n        uint depositFee;\\n        uint withdrawFee;\\n        bool isNative;\\n        address custom;\\n        uint256 depositLimit;\\n    }\\n\\n    function prefixes(address _token) external view returns (TokenPrefix memory);\\n    function tokens(address _token) external view returns (Token memory);\\n    function natives(address _token) external view returns (IEverscale.EverscaleAddress memory);\\n\\n    function setPrefix(\\n        address token,\\n        string memory name_prefix,\\n        string memory symbol_prefix\\n    ) external;\\n\\n    function setDepositLimit(\\n        address token,\\n        uint amount\\n    ) external;\\n\\n    function setTokenBlacklist(\\n        address token,\\n        bool blacklisted\\n    ) external;\\n\\n    function getNativeToken(\\n        IEverscale.EverscaleAddress memory native\\n    ) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IMultiVaultFacetWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../IEverscale.sol\\\";\\n\\n\\ninterface IMultiVaultFacetWithdraw {\\n    struct Callback {\\n        address recipient;\\n        bytes payload;\\n        bool strict;\\n    }\\n\\n    struct NativeWithdrawalParams {\\n        IEverscale.EverscaleAddress native;\\n        IMultiVaultFacetTokens.TokenMeta meta;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    struct AlienWithdrawalParams {\\n        address token;\\n        uint256 amount;\\n        address recipient;\\n        uint256 chainId;\\n        Callback callback;\\n    }\\n\\n    function withdrawalIds(bytes32) external view returns (bool);\\n\\n    function saveWithdrawNative(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures\\n    ) external;\\n\\n    function saveWithdrawAlien(\\n        bytes memory payload,\\n        bytes[] memory signatures,\\n        uint bounty\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/interfaces/multivault/IOctusCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"./IMultiVaultFacetWithdraw.sol\\\";\\n\\n\\ninterface IOctusCallbackNative {\\n    function onNativeWithdrawal(\\n        IMultiVaultFacetWithdraw.NativeWithdrawalParams memory payload,\\n        uint256 withdrawAmount\\n    ) external;\\n\\n\\n    function onNativeWithdrawalPendingCreated(\\n        IMultiVaultFacetWithdraw.NativeWithdrawalParams memory _payload,\\n        uint pendingWithdrawalId\\n    ) external;\\n}\\n\\ninterface IOctusCallbackAlien {\\n    function onAlienWithdrawal(\\n        IMultiVaultFacetWithdraw.AlienWithdrawalParams memory payload,\\n        uint256 withdrawAmount\\n    ) external;\\n\\n    function onAlienWithdrawalPendingCreated(\\n        IMultiVaultFacetWithdraw.AlienWithdrawalParams memory _payload,\\n        uint pendingWithdrawalId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/libraries/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"./../interfaces/IERC20.sol\\\";\\nimport \\\"./../libraries/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n    unchecked {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        uint256 newAllowance = oldAllowance - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/facets/MultiVaultFacetPendingWithdrawals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetPendingWithdrawalsEvents.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetWithdraw.sol\\\";\\nimport \\\"../../interfaces/IMultiVaultToken.sol\\\";\\nimport \\\"../../interfaces/IEverscale.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\nimport \\\"../helpers/MultiVaultHelperEmergency.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperActors.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperPendingWithdrawal.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperReentrancyGuard.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperTokenBalance.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperEverscale.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperCallback.sol\\\";\\nimport \\\"../helpers/MultiVaultHelperGas.sol\\\";\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\nimport \\\"../../libraries/SafeERC20.sol\\\";\\n\\n\\ncontract MultiVaultFacetPendingWithdrawals is\\n    MultiVaultHelperEmergency,\\n    MultiVaultHelperGas,\\n    MultiVaultHelperActors,\\n    MultiVaultHelperEverscale,\\n    MultiVaultHelperTokenBalance,\\n    MultiVaultHelperPendingWithdrawal,\\n    MultiVaultHelperReentrancyGuard,\\n    IMultiVaultFacetPendingWithdrawals,\\n    MultiVaultHelperCallback\\n{\\n    using SafeERC20 for IERC20;\\n\\n    function pendingWithdrawals(\\n        address user,\\n        uint256 id\\n    ) external view override returns (PendingWithdrawalParams memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.pendingWithdrawals_[user][id];\\n    }\\n\\n    function withdrawalLimits(\\n        address token\\n    ) external view override returns(WithdrawalLimits memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.withdrawalLimits_[token];\\n    }\\n\\n    function withdrawalPeriods(\\n        address token,\\n        uint256 withdrawalPeriodId\\n    ) external view override returns (WithdrawalPeriodParams memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.withdrawalPeriods_[token][withdrawalPeriodId];\\n    }\\n\\n    /// @notice Changes pending withdrawal bounty for specific pending withdrawal\\n    /// @param id Pending withdrawal ID.\\n    /// @param bounty The new value for pending withdrawal bounty.\\n    function setPendingWithdrawalBounty(\\n        uint256 id,\\n        uint256 bounty\\n    )\\n        public\\n        override\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        PendingWithdrawalParams memory pendingWithdrawal = _pendingWithdrawal(msg.sender, id);\\n\\n        require(!s.tokens_[pendingWithdrawal.token].isNative);\\n        require(bounty <= pendingWithdrawal.amount);\\n\\n        s.pendingWithdrawals_[msg.sender][id].bounty = bounty;\\n\\n        emit PendingWithdrawalUpdateBounty(\\n            msg.sender,\\n            id,\\n            bounty\\n        );\\n    }\\n\\n    function forceWithdraw(\\n        PendingWithdrawalId[] memory pendingWithdrawalIds\\n    )\\n        external\\n        override\\n        nonReentrant\\n        onlyEmergencyDisabled\\n    {\\n        for (uint i = 0; i < pendingWithdrawalIds.length; i++) {\\n            PendingWithdrawalId memory pendingWithdrawalId = pendingWithdrawalIds[i];\\n            PendingWithdrawalParams memory pendingWithdrawal = _pendingWithdrawal(pendingWithdrawalId);\\n\\n            require(pendingWithdrawal.amount > 0);\\n\\n            _pendingWithdrawalAmountReduce(\\n                pendingWithdrawalId,\\n                pendingWithdrawal.amount\\n            );\\n\\n            IERC20(pendingWithdrawal.token).safeTransfer(\\n                pendingWithdrawalId.recipient,\\n                pendingWithdrawal.amount\\n            );\\n\\n            emit PendingWithdrawalForce(\\n                pendingWithdrawalId.recipient,\\n                pendingWithdrawalId.id\\n            );\\n\\n            _callbackAlienWithdrawal(\\n                IMultiVaultFacetWithdraw.AlienWithdrawalParams({\\n                    token: pendingWithdrawal.token,\\n                    amount: pendingWithdrawal.amount,\\n                    recipient: pendingWithdrawalId.recipient,\\n                    chainId: pendingWithdrawal.chainId,\\n                    callback: pendingWithdrawal.callback\\n                }),\\n                pendingWithdrawal.amount\\n            );\\n        }\\n    }\\n\\n    /// @notice Cancel pending withdrawal partially or completely.\\n    /// This may only be called by pending withdrawal recipient.\\n    /// @param id Pending withdrawal ID\\n    /// @param amount Amount to cancel, should be less or equal than pending withdrawal amount\\n    /// @param recipient Tokens recipient, in Everscale network\\n    /// @param bounty New value for bounty\\n    function cancelPendingWithdrawal(\\n        uint256 id,\\n        uint256 amount,\\n        IEverscale.EverscaleAddress memory recipient,\\n        uint expected_evers,\\n        bytes memory payload,\\n        uint bounty\\n    )\\n        external\\n        payable\\n        override\\n        onlyEmergencyDisabled\\n        nonReentrant\\n        drainGas\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n        PendingWithdrawalParams memory pendingWithdrawal = _pendingWithdrawal(msg.sender, id);\\n\\n        require(!s.tokens_[pendingWithdrawal.token].isNative);\\n        require(amount > 0 && amount <= pendingWithdrawal.amount);\\n\\n        _pendingWithdrawalAmountReduce(\\n            PendingWithdrawalId(msg.sender, id),\\n            amount\\n        );\\n\\n        IMultiVaultFacetDeposit.DepositParams memory deposit = IMultiVaultFacetDeposit.DepositParams({\\n            recipient: recipient,\\n            token: pendingWithdrawal.token,\\n            amount: amount,\\n            expected_evers: expected_evers,\\n            payload: payload\\n        });\\n\\n        _transferToEverscaleAlien(deposit, 0, msg.value);\\n\\n        emit PendingWithdrawalCancel(msg.sender, id, amount);\\n\\n        setPendingWithdrawalBounty(id, bounty);\\n    }\\n\\n    /**\\n        @notice Set approve status for pending withdrawal.\\n            Pending withdrawal must be in `Required` (1) approve status, so approve status can be set only once.\\n            If Vault has enough tokens on its balance - withdrawal will be filled immediately.\\n            This may only be called by `governance` or `withdrawGuardian`.\\n        @param pendingWithdrawalId Pending withdrawal ID.\\n        @param approveStatus Approve status. Must be `Approved` (2) or `Rejected` (3).\\n    */\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId memory pendingWithdrawalId,\\n        ApproveStatus approveStatus\\n    )\\n        public\\n        override\\n        onlyGovernanceOrWithdrawGuardian\\n        pendingWithdrawalOpened(pendingWithdrawalId)\\n    {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n        PendingWithdrawalParams memory pendingWithdrawal = _pendingWithdrawal(pendingWithdrawalId);\\n\\n        require(pendingWithdrawal.approveStatus == ApproveStatus.Required);\\n\\n        require(\\n            approveStatus == ApproveStatus.Approved ||\\n            approveStatus == ApproveStatus.Rejected\\n        );\\n\\n        _pendingWithdrawalApproveStatusUpdate(pendingWithdrawalId, approveStatus);\\n\\n        bool isNative = s.tokens_[pendingWithdrawal.token].isNative;\\n\\n        // Fill approved withdrawal\\n        if (\\n            approveStatus == ApproveStatus.Approved &&\\n            (pendingWithdrawal.amount <= _vaultTokenBalance(pendingWithdrawal.token) || isNative)\\n        ) {\\n            _pendingWithdrawalAmountReduce(\\n                pendingWithdrawalId,\\n                pendingWithdrawal.amount\\n            );\\n\\n            if (!isNative) {\\n                IERC20(pendingWithdrawal.token).safeTransfer(\\n                    pendingWithdrawalId.recipient,\\n                    pendingWithdrawal.amount\\n                );\\n            } else {\\n                IMultiVaultToken(pendingWithdrawal.token).mint(\\n                    pendingWithdrawalId.recipient,\\n                    pendingWithdrawal.amount\\n                );\\n            }\\n\\n            emit PendingWithdrawalWithdraw(\\n                pendingWithdrawalId.recipient,\\n                pendingWithdrawalId.id,\\n                pendingWithdrawal.amount\\n            );\\n        }\\n\\n        // Update withdrawal period considered amount\\n        uint withdrawalPeriodId = _withdrawalPeriodDeriveId(pendingWithdrawal.timestamp);\\n\\n        s.withdrawalPeriods_[pendingWithdrawal.token][withdrawalPeriodId].considered += pendingWithdrawal.amount;\\n    }\\n\\n    /**\\n        @notice Multicall for `setPendingWithdrawalApprove`.\\n        @param pendingWithdrawalId List of pending withdrawals IDs.\\n        @param approveStatus List of approve statuses.\\n    */\\n    function setPendingWithdrawalApprove(\\n        PendingWithdrawalId[] memory pendingWithdrawalId,\\n        ApproveStatus[] memory approveStatus\\n    ) external override {\\n        require(pendingWithdrawalId.length == approveStatus.length);\\n\\n        for (uint i = 0; i < pendingWithdrawalId.length; i++) {\\n            setPendingWithdrawalApprove(pendingWithdrawalId[i], approveStatus[i]);\\n        }\\n    }\\n\\n    function pendingWithdrawalsTotal(address _token) external view override returns (uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.pendingWithdrawalsTotal[_token];\\n    }\\n\\n    function pendingWithdrawalsPerUser(address user) external view override returns(uint) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.pendingWithdrawalsPerUser[user];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperActors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperActors {\\n    modifier onlyPendingGovernance() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.pendingGovernance);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrManagement() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance || msg.sender == s.management);\\n\\n        _;\\n    }\\n\\n    modifier onlyGovernanceOrWithdrawGuardian() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(msg.sender == s.governance || msg.sender == s.withdrawGuardian);\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetWithdraw.sol\\\";\\nimport \\\"../../interfaces/multivault/IOctusCallback.sol\\\";\\n\\nabstract contract MultiVaultHelperCallback {\\n    modifier checkCallbackRecipient(address recipient) {\\n        require(recipient != address(this));\\n\\n        if (recipient != address(0)) {\\n            _;\\n        }\\n    }\\n\\n    function _callbackNativeWithdrawal(\\n        IMultiVaultFacetWithdraw.NativeWithdrawalParams memory withdrawal,\\n        uint256 _withdrawAmount\\n    ) internal checkCallbackRecipient(withdrawal.callback.recipient) {\\n        bytes memory data = abi.encodeWithSelector(\\n            IOctusCallbackNative.onNativeWithdrawal.selector,\\n            withdrawal,\\n            _withdrawAmount\\n        );\\n\\n        _execute(\\n            withdrawal.callback.recipient,\\n            data,\\n            withdrawal.callback.strict\\n        );\\n    }\\n\\n    function _callbackAlienWithdrawal(\\n        IMultiVaultFacetWithdraw.AlienWithdrawalParams memory _withdrawal,\\n        uint256 _withdrawAmount\\n    ) internal checkCallbackRecipient(_withdrawal.callback.recipient) {\\n        bytes memory data = abi.encodeWithSelector(\\n            IOctusCallbackAlien.onAlienWithdrawal.selector,\\n            _withdrawal,\\n            _withdrawAmount\\n        );\\n\\n        _execute(\\n            _withdrawal.callback.recipient,\\n            data,\\n            _withdrawal.callback.strict\\n        );\\n    }\\n\\n    function _callbackNativeWithdrawalPendingCreated(\\n        IMultiVaultFacetWithdraw.NativeWithdrawalParams memory _withdrawal,\\n        uint _pendingWithdrawalId\\n    ) checkCallbackRecipient(_withdrawal.callback.recipient) internal {\\n        bytes memory data = abi.encodeWithSelector(\\n            IOctusCallbackNative.onNativeWithdrawalPendingCreated.selector,\\n            _withdrawal,\\n            _pendingWithdrawalId\\n        );\\n\\n        _execute(\\n            _withdrawal.callback.recipient,\\n            data,\\n            _withdrawal.callback.strict\\n        );\\n    }\\n\\n    function _callbackAlienWithdrawalPendingCreated(\\n        IMultiVaultFacetWithdraw.AlienWithdrawalParams memory _withdrawal,\\n        uint _pendingWithdrawalId\\n    ) checkCallbackRecipient(_withdrawal.callback.recipient) internal {\\n        bytes memory data = abi.encodeWithSelector(\\n            IOctusCallbackAlien.onAlienWithdrawalPendingCreated.selector,\\n            _withdrawal,\\n            _pendingWithdrawalId\\n        );\\n\\n        _execute(\\n            _withdrawal.callback.recipient,\\n            data,\\n            _withdrawal.callback.strict\\n        );\\n    }\\n\\n    function _execute(\\n        address recipient,\\n        bytes memory data,\\n        bool strict\\n    ) internal {\\n        (bool success, ) = recipient.call(data);\\n\\n        if (strict) require(success);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperEmergency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperEmergency {\\n    modifier onlyEmergencyDisabled() {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        require(!s.emergencyShutdown);\\n\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperEverscale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/IEverscale.sol\\\";\\nimport \\\"../../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetDepositEvents.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetDeposit.sol\\\";\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperEverscale is IMultiVaultFacetDepositEvents {\\n    modifier checkDepositAmount(uint amount) {\\n        require(amount < type(uint128).max, \\\"Deposit amount too is large\\\");\\n\\n        _;\\n    }\\n\\n    function _transferToEverscaleNative(\\n        IMultiVaultFacetDeposit.DepositParams memory deposit,\\n        uint fee,\\n        uint value\\n    ) internal checkDepositAmount(deposit.amount) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        IEverscale.EverscaleAddress memory native = s.natives_[deposit.token];\\n\\n        emit NativeTransfer(\\n            native.wid,\\n            native.addr,\\n\\n            uint128(deposit.amount),\\n            deposit.recipient.wid,\\n            deposit.recipient.addr,\\n            value,\\n            deposit.expected_evers,\\n            deposit.payload\\n        );\\n\\n        _emitDeposit(deposit, fee, true);\\n    }\\n\\n    function _transferToEverscaleAlien(\\n        IMultiVaultFacetDeposit.DepositParams memory deposit,\\n        uint fee,\\n        uint value\\n    ) internal checkDepositAmount(deposit.amount) {\\n        emit AlienTransfer(\\n            block.chainid,\\n            uint160(deposit.token),\\n            IERC20Metadata(deposit.token).name(),\\n            IERC20Metadata(deposit.token).symbol(),\\n            IERC20Metadata(deposit.token).decimals(),\\n\\n            uint128(deposit.amount),\\n            deposit.recipient.wid,\\n            deposit.recipient.addr,\\n            value,\\n            deposit.expected_evers,\\n            deposit.payload\\n        );\\n\\n        _emitDeposit(deposit, fee, false);\\n    }\\n\\n    function _emitDeposit(\\n        IMultiVaultFacetDeposit.DepositParams memory deposit,\\n        uint fee,\\n        bool isNative\\n    ) internal {\\n        emit Deposit(\\n            isNative ? IMultiVaultFacetTokens.TokenType.Native : IMultiVaultFacetTokens.TokenType.Alien,\\n            msg.sender,\\n            deposit.token,\\n            deposit.recipient.wid,\\n            deposit.recipient.addr,\\n            deposit.amount + fee,\\n            fee\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperGas.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\ncontract MultiVaultHelperGas {\\n    modifier drainGas() {\\n        _;\\n\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        address payable gasDonor = payable(s.gasDonor);\\n\\n        if (gasDonor != address(0)) {\\n            (bool sent,) = gasDonor.call{value: address(this).balance}(\\\"\\\");\\n\\n            require(sent);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperPendingWithdrawal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetPendingWithdrawalsEvents.sol\\\";\\n\\nimport \\\"../storage/MultiVaultStorage.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperPendingWithdrawal is IMultiVaultFacetPendingWithdrawalsEvents {\\n    modifier pendingWithdrawalOpened(\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId memory pendingWithdrawalId\\n    ) {\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams memory pendingWithdrawal = _pendingWithdrawal(pendingWithdrawalId);\\n\\n        require(pendingWithdrawal.amount > 0);\\n\\n        _;\\n    }\\n\\n    function _pendingWithdrawal(\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId memory pendingWithdrawalId\\n    ) internal view returns (IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.pendingWithdrawals_[pendingWithdrawalId.recipient][pendingWithdrawalId.id];\\n    }\\n\\n    function _pendingWithdrawal(\\n        address recipient,\\n        uint256 id\\n    ) internal view returns (IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams memory) {\\n        return _pendingWithdrawal(IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId(recipient, id));\\n    }\\n\\n    function _pendingWithdrawalApproveStatusUpdate(\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId memory pendingWithdrawalId,\\n        IMultiVaultFacetPendingWithdrawals.ApproveStatus approveStatus\\n    ) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        s.pendingWithdrawals_[pendingWithdrawalId.recipient][pendingWithdrawalId.id].approveStatus = approveStatus;\\n\\n        emit PendingWithdrawalUpdateApproveStatus(\\n            pendingWithdrawalId.recipient,\\n            pendingWithdrawalId.id,\\n            approveStatus\\n        );\\n    }\\n\\n    function _pendingWithdrawalAmountReduce(\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId memory pendingWithdrawalId,\\n        uint amount\\n    ) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams memory pendingWithdrawal = _pendingWithdrawal(pendingWithdrawalId);\\n\\n        require(pendingWithdrawal.approveStatus == IMultiVaultFacetPendingWithdrawals.ApproveStatus.NotRequired\\n            || pendingWithdrawal.approveStatus == IMultiVaultFacetPendingWithdrawals.ApproveStatus.Approved);\\n\\n        s.pendingWithdrawals_[pendingWithdrawalId.recipient][pendingWithdrawalId.id].amount -= amount;\\n        s.pendingWithdrawalsTotal[pendingWithdrawal.token] -= amount;\\n    }\\n\\n    function _withdrawalPeriod(\\n        address token,\\n        uint256 timestamp\\n    ) internal view returns (IMultiVaultFacetPendingWithdrawals.WithdrawalPeriodParams memory) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        return s.withdrawalPeriods_[token][_withdrawalPeriodDeriveId(timestamp)];\\n    }\\n\\n    function _withdrawalPeriodDeriveId(\\n        uint256 timestamp\\n    ) internal pure returns (uint256) {\\n        return timestamp / MultiVaultStorage.WITHDRAW_PERIOD_DURATION_IN_SECONDS;\\n    }\\n\\n    function _withdrawalPeriodIncreaseTotalByTimestamp(\\n        address token,\\n        uint256 timestamp,\\n        uint256 amount\\n    ) internal {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        uint withdrawalPeriodId = _withdrawalPeriodDeriveId(timestamp);\\n\\n        s.withdrawalPeriods_[token][withdrawalPeriodId].total += amount;\\n    }\\n\\n    function _withdrawalPeriodCheckLimitsPassed(\\n        address token,\\n        uint amount,\\n        IMultiVaultFacetPendingWithdrawals.WithdrawalPeriodParams memory withdrawalPeriod\\n    ) internal view returns (bool) {\\n        MultiVaultStorage.Storage storage s = MultiVaultStorage._storage();\\n\\n        IMultiVaultFacetPendingWithdrawals.WithdrawalLimits memory withdrawalLimit = s.withdrawalLimits_[token];\\n\\n        if (!withdrawalLimit.enabled) return true;\\n\\n        return (amount < withdrawalLimit.undeclared) &&\\n        (amount + withdrawalPeriod.total - withdrawalPeriod.considered < withdrawalLimit.daily);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"./../storage/MultiVaultStorageReentrancyGuard.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperReentrancyGuard {\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        MultiVaultStorageReentrancyGuard.ReentrancyGuardStorage storage s = MultiVaultStorageReentrancyGuard._storage();\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(s._status != MultiVaultStorageReentrancyGuard._ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        s._status = MultiVaultStorageReentrancyGuard._ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        MultiVaultStorageReentrancyGuard.ReentrancyGuardStorage storage s = MultiVaultStorageReentrancyGuard._storage();\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        s._status = MultiVaultStorageReentrancyGuard._NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/helpers/MultiVaultHelperTokenBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\n\\nabstract contract MultiVaultHelperTokenBalance {\\n    function _vaultTokenBalance(\\n        address token\\n    ) internal view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/storage/MultiVaultStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\nimport \\\"../../interfaces/IEverscale.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetTokens.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetPendingWithdrawals.sol\\\";\\nimport \\\"../../interfaces/multivault/IMultiVaultFacetLiquidity.sol\\\";\\n\\n\\nlibrary MultiVaultStorage {\\n    uint constant MAX_BPS = 10_000;\\n    uint constant FEE_LIMIT = MAX_BPS / 2;\\n\\n    uint8 constant DECIMALS_LIMIT = 18;\\n    uint256 constant SYMBOL_LENGTH_LIMIT = 32;\\n    uint256 constant NAME_LENGTH_LIMIT = 32;\\n\\n    string constant DEFAULT_NAME_PREFIX = '';\\n    string constant DEFAULT_SYMBOL_PREFIX = '';\\n\\n    string constant DEFAULT_NAME_LP_PREFIX = 'Octus LP ';\\n    string constant DEFAULT_SYMBOL_LP_PREFIX = 'octLP';\\n\\n    uint256 constant WITHDRAW_PERIOD_DURATION_IN_SECONDS = 60 * 60 * 24; // 24 hours\\n\\n    // Previous version of the Vault contract was built with Upgradable Proxy Pattern, without using Diamond storage\\n    bytes32 constant MULTIVAULT_LEGACY_STORAGE_POSITION = 0x0000000000000000000000000000000000000000000000000000000000000002;\\n\\n    uint constant LP_EXCHANGE_RATE_BPS = 10_000_000_000;\\n\\n    struct Storage {\\n        mapping (address => IMultiVaultFacetTokens.Token) tokens_;\\n        mapping (address => IEverscale.EverscaleAddress) natives_;\\n\\n        uint defaultNativeDepositFee;\\n        uint defaultNativeWithdrawFee;\\n        uint defaultAlienDepositFee;\\n        uint defaultAlienWithdrawFee;\\n\\n        bool emergencyShutdown;\\n\\n        address bridge;\\n        mapping(bytes32 => bool) withdrawalIds;\\n        IEverscale.EverscaleAddress rewards_;\\n        IEverscale.EverscaleAddress configurationNative_;\\n        IEverscale.EverscaleAddress configurationAlien_;\\n\\n        address governance;\\n        address pendingGovernance;\\n        address guardian;\\n        address management;\\n\\n        mapping (address => IMultiVaultFacetTokens.TokenPrefix) prefixes_;\\n        mapping (address => uint) fees;\\n\\n        // STORAGE UPDATE 1\\n        // Pending withdrawals\\n        // - Counter pending withdrawals per user\\n        mapping(address => uint) pendingWithdrawalsPerUser;\\n        // - Pending withdrawal details\\n        mapping(address => mapping(uint256 => IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams)) pendingWithdrawals_;\\n\\n        // - Total amount of pending withdrawals per token\\n        mapping(address => uint) pendingWithdrawalsTotal;\\n\\n        // STORAGE UPDATE 2\\n        // Withdrawal limits per token\\n        mapping(address => IMultiVaultFacetPendingWithdrawals.WithdrawalLimits) withdrawalLimits_;\\n\\n        // - Withdrawal periods. Each period is `WITHDRAW_PERIOD_DURATION_IN_SECONDS` seconds long.\\n        // If some period has reached the `withdrawalLimitPerPeriod` - all the future\\n        // withdrawals in this period require manual approve, see note on `setPendingWithdrawalsApprove`\\n        mapping(address => mapping(uint256 => IMultiVaultFacetPendingWithdrawals.WithdrawalPeriodParams)) withdrawalPeriods_;\\n\\n        address withdrawGuardian;\\n\\n        // STORAGE UPDATE 3\\n        mapping (address => IMultiVaultFacetLiquidity.Liquidity) liquidity;\\n        uint defaultInterest;\\n\\n        // STORAGE UPDATE 4\\n        // - Receives native value, attached to the deposit\\n        address gasDonor;\\n        address weth;\\n    }\\n\\n    function _storage() internal pure returns (Storage storage s) {\\n        assembly {\\n            s.slot := MULTIVAULT_LEGACY_STORAGE_POSITION\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/multivault/multivault/storage/MultiVaultStorageReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.0;\\n\\n\\n//import \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nlibrary MultiVaultStorageReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    bytes32 constant REENTRANCY_GUARD_LEGACY_STORAGE_POSITION = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function _storage() internal pure returns (ReentrancyGuardStorage storage s) {\\n        assembly {\\n            s.slot := REENTRANCY_GUARD_LEGACY_STORAGE_POSITION\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"base_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"base_token\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"recipient_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipient_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expected_evers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"AlienTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IMultiVaultFacetTokens.TokenType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"recipient_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipient_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"native_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"native_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int8\",\"name\":\"recipient_wid\",\"type\":\"int8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipient_addr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expected_evers\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"NativeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingWithdrawalCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"payloadId\",\"type\":\"bytes32\"}],\"name\":\"PendingWithdrawalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PendingWithdrawalFill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PendingWithdrawalForce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IMultiVaultFacetPendingWithdrawals.ApproveStatus\",\"name\":\"approveStatus\",\"type\":\"uint8\"}],\"name\":\"PendingWithdrawalUpdateApproveStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"PendingWithdrawalUpdateBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendingWithdrawalWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int8\",\"name\":\"wid\",\"type\":\"int8\"},{\"internalType\":\"uint256\",\"name\":\"addr\",\"type\":\"uint256\"}],\"internalType\":\"struct IEverscale.EverscaleAddress\",\"name\":\"recipient\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"expected_evers\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"cancelPendingWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId[]\",\"name\":\"pendingWithdrawalIds\",\"type\":\"tuple[]\"}],\"name\":\"forceWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum IMultiVaultFacetPendingWithdrawals.ApproveStatus\",\"name\":\"approveStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"strict\",\"type\":\"bool\"}],\"internalType\":\"struct IMultiVaultFacetWithdraw.Callback\",\"name\":\"callback\",\"type\":\"tuple\"}],\"internalType\":\"struct IMultiVaultFacetPendingWithdrawals.PendingWithdrawalParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingWithdrawalsPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingWithdrawalsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId[]\",\"name\":\"pendingWithdrawalId\",\"type\":\"tuple[]\"},{\"internalType\":\"enum IMultiVaultFacetPendingWithdrawals.ApproveStatus[]\",\"name\":\"approveStatus\",\"type\":\"uint8[]\"}],\"name\":\"setPendingWithdrawalApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultiVaultFacetPendingWithdrawals.PendingWithdrawalId\",\"name\":\"pendingWithdrawalId\",\"type\":\"tuple\"},{\"internalType\":\"enum IMultiVaultFacetPendingWithdrawals.ApproveStatus\",\"name\":\"approveStatus\",\"type\":\"uint8\"}],\"name\":\"setPendingWithdrawalApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"setPendingWithdrawalBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawalLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"undeclared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daily\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct IMultiVaultFacetPendingWithdrawals.WithdrawalLimits\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalPeriodId\",\"type\":\"uint256\"}],\"name\":\"withdrawalPeriods\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"considered\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultiVaultFacetPendingWithdrawals.WithdrawalPeriodParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MultiVaultFacetPendingWithdrawals", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}