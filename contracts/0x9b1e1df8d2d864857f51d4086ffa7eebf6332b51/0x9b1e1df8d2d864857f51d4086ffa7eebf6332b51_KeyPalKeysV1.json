{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.2 <0.9.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor() {\r\n        _notEntered = true;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_notEntered, \"ReentrancyGuard: Reentrant call\");\r\n        _notEntered = false;\r\n        _;\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\ncontract KeyPalKeysV1 is Ownable, ReentrancyGuard {\r\n    address public protocolFeeDestination;\r\n    uint256 public protocolFeePercent;\r\n    uint256 public subjectFeePercent;\r\n\r\n    mapping(address => uint256) public subjectPriceFactor;\r\n    mapping(address => mapping(address => uint256)) public keysBalance;\r\n    mapping(address => uint256) public keysSupply;\r\n\r\n    event Trade(address trader, address subject, bool isBuy, uint256 keyAmount, uint256 ethAmount, uint256 protocolEthAmount, uint256 subjectEthAmount, uint256 supply);\r\n\r\n    function setFeeDestination(address _feeDestination) public onlyOwner {\r\n        protocolFeeDestination = _feeDestination;\r\n    }\r\n\r\n    function setProtocolFeePercent(uint256 _feePercent) public onlyOwner {\r\n        require(_feePercent <= 0.01 ether, \"Max fee is 1%\");\r\n        protocolFeePercent = _feePercent;\r\n    }\r\n\r\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\r\n        require(_feePercent <= 0.09 ether, \"Max fee is 9%\");\r\n        subjectFeePercent = _feePercent;\r\n    }\r\n\r\n    function setSubjectPriceFactor(uint256 _priceFactor) public {\r\n        require(_msgSender() == msg.sender, \"Only the subject can set their price factor\");\r\n        subjectPriceFactor[msg.sender] = _priceFactor;\r\n    }\r\n\r\n    function getCustomPrice(address keysSubject, uint256 amount) public view returns (uint256) {\r\n        uint256 supply = keysSupply[keysSubject];\r\n        uint256 priceFactor = subjectPriceFactor[keysSubject] > 0 ? subjectPriceFactor[keysSubject] : 16000;\r\n        return getPrice(supply, amount, priceFactor);\r\n    }\r\n\r\n    function getPrice(uint256 supply, uint256 amount, uint256 priceFactor) public pure returns (uint256) {\r\n        uint256 sum1 = supply == 0 ? 0 : (supply - 1) * supply * (2 * (supply - 1) + 1) / 6;\r\n        uint256 sum2 = (supply + amount) * (supply + amount) * (2 * (supply + amount) + 1) / 6;\r\n        return (sum2 - sum1) * 1 ether / priceFactor;\r\n    }\r\n\r\n    // Function to buy keys\r\n    function buyKeys(address keysSubject, uint256 amount) public payable nonReentrant {\r\n        uint256 supply = keysSupply[keysSubject];\r\n        require(supply > 0 || keysSubject == msg.sender, \"Only the keys' subject can buy the first key\");\r\n        \r\n        uint256 price = getCustomPrice(keysSubject, amount);\r\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\r\n\r\n        require(msg.value >= price + protocolFee + subjectFee, \"Insufficient payment\");\r\n        \r\n        // Ensure enough funds in the contract before making transfers\r\n        require(address(this).balance + msg.value >= price + protocolFee + subjectFee, \"Not enough funds in the contract\");\r\n\r\n        keysBalance[keysSubject][msg.sender] += amount;\r\n        keysSupply[keysSubject] += amount;\r\n\r\n        emit Trade(msg.sender, keysSubject, true, amount, price, protocolFee, subjectFee, supply + amount);\r\n        \r\n        // Transfers\r\n        (bool success1, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success2, ) = keysSubject.call{value: subjectFee}(\"\");\r\n        \r\n        // Check each transfer\r\n        require(success1, \"Unable to send protocol fee\");\r\n        require(success2, \"Unable to send subject fee\");\r\n    }\r\n\r\n    // Function to sell keys\r\n    function sellKeys(address keysSubject, uint256 amount) public payable nonReentrant {\r\n        uint256 supply = keysSupply[keysSubject];\r\n        require(supply > amount, \"Cannot sell the last key\");\r\n\r\n        uint256 price = getCustomPrice(keysSubject, amount);\r\n        uint256 protocolFee = price * protocolFeePercent / 1 ether;\r\n        uint256 subjectFee = price * subjectFeePercent / 1 ether;\r\n\r\n        require(keysBalance[keysSubject][msg.sender] >= amount, \"Insufficient keys\");\r\n\r\n        // Ensure enough funds in the contract before making transfers\r\n        require(address(this).balance >= price, \"Not enough funds in the contract\");\r\n\r\n        keysBalance[keysSubject][msg.sender] -= amount;\r\n        keysSupply[keysSubject] -= amount;\r\n\r\n        emit Trade(msg.sender, keysSubject, false, amount, price, protocolFee, subjectFee, supply - amount);\r\n\r\n        // Transfers\r\n        (bool success1, ) = msg.sender.call{value: price - protocolFee - subjectFee}(\"\");\r\n        (bool success2, ) = protocolFeeDestination.call{value: protocolFee}(\"\");\r\n        (bool success3, ) = keysSubject.call{value: subjectFee}(\"\");\r\n\r\n        // Check each transfer\r\n        require(success1, \"Unable to send funds to msg.sender\");\r\n        require(success2, \"Unable to send funds to protocolFeeDestination\");\r\n        require(success3, \"Unable to send funds to keysSubject\");\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"keyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keysSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyKeys\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keysSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getCustomPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceFactor\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keysBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keysSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keysSubject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellKeys\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceFactor\",\"type\":\"uint256\"}],\"name\":\"setSubjectPriceFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subjectPriceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeyPalKeysV1", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://de513e146c7e5bec44611a2732ac2ba5610df032aebfb8ae256cf89c11af241d"}