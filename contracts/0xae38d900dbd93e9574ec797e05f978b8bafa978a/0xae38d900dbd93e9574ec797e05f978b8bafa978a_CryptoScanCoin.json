{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CryptoScanCoin.sol\": {\r\n      \"content\": \"/*\\n   _____                  _        _____                  _____      _\\n  / ____|                | |      / ____|                / ____|    (_)\\n | |     _ __ _   _ _ __ | |_ ___| (___   ___ __ _ _ __ | |     ___  _ _ __\\n | |    | '__| | | | '_ \\\\| __/ _ \\\\\\\\___ \\\\ / __/ _` | '_ \\\\| |    / _ \\\\| | '_ \\\\\\n | |____| |  | |_| | |_) | || (_) |___) | (_| (_| | | | | |___| (_) | | | | |\\n  \\\\_____|_|   \\\\__, | .__/ \\\\__\\\\___/_____/ \\\\___\\\\__,_|_| |_|\\\\_____\\\\___/|_|_| |_|\\n | |           __/ | |\\n | |__  _   _ |___/|_|\\n | '_ \\\\| | | |\\n | |_) | |_| |\\n |_.__/ \\\\__, |\\n   _____ __/ |            _        _____                            _____\\n  / ____|___/            | |      / ____|                     /\\\\   |_   _|\\n | |     _ __ _   _ _ __ | |_ ___| (___   ___ __ _ _ __      /  \\\\    | |\\n | |    | '__| | | | '_ \\\\| __/ _ \\\\\\\\___ \\\\ / __/ _` | '_ \\\\    / /\\\\ \\\\   | |\\n | |____| |  | |_| | |_) | || (_) |___) | (_| (_| | | | |_ / ____ \\\\ _| |_\\n  \\\\_____|_|   \\\\__, | .__/ \\\\__\\\\___/_____/ \\\\___\\\\__,_|_| |_(_)_/    \\\\_\\\\_____|\\n               __/ | |\\n              |___/|_|\\n\\n*/\\n\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./ICryptoScanCoin.sol\\\";\\nimport \\\"./IPresaleCSC.sol\\\";\\nimport \\\"./SimpleOwnable.sol\\\";\\n\\nuint constant _1_MONTH = 30 days;\\nuint constant _2_MONTHS = 2 * _1_MONTH;\\nuint constant _3_MONTHS = 3 * _1_MONTH;\\nuint constant _6_MONTHS = 6 * _1_MONTH;\\nuint constant _1_YEAR = 365 days;\\n\\ncontract CryptoScanCoin is ICryptoScanCoin, ERC20, SimpleOwnable  {\\n\\n    struct Contributor {\\n        address addr;\\n        uint256 tokens;\\n    }\\n\\n    string public constant TOKEN_NAME = \\\"CryptoScanCoin\\\";\\n    string public constant TOKEN_SYMBOL = \\\"CSC\\\";\\n\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant CSC = 10 ** DECIMALS;\\n\\n    uint256 public constant TOTAL_NUMBER_OF_PRESALE_TOKENS = 125_000_000;\\n    uint256 public constant TOTAL_NUMBER_OF_EXCHANGE_TOKENS = 75_000_000;\\n\\n    uint256 public constant TOTAL_NUMBER_OF_FOUNDER_TOKENS = 20_000_000;\\n    uint256 public constant TOTAL_NUMBER_OF_CONTRIBUTOR_TOKENS = 15_000_000;\\n    uint256 public constant TOTAL_NUMBER_OF_TREASURY_TOKENS = 15_000_000;\\n\\n    uint public constant RABBIT_FEE_PERCENTAGE = 1;\\n    uint public constant CHEETAH_FEE_PERCENTAGE = 1;\\n    uint public constant MAINTENANCE_FEE_PERCENTAGE = 3;\\n\\n    uint public constant FINAL_UNLOCK_TIME = _1_YEAR;\\n    uint public constant FOUNDER_LOCK_TIME = _6_MONTHS;\\n    uint public constant CONTRIBUTOR_LOCK_TIME = _2_MONTHS;\\n\\n    uint256 public constant INITIAL_MIN_BALANCE_FOR_CONTRIBUTOR_CLAIMING = 0 * CSC;\\n    uint256 public constant INITIAL_MIN_BALANCE_FOR_USER_CLAIMING = 0 * CSC;\\n\\n    mapping(address => uint256) private _founderWalletsAmount;\\n    address private immutable _treasuryWallet;\\n\\n    // There is no rabbit wallet. All rabbits are stored in this contract's address!\\n    // There is no cheetah wallet. All cheetah tokens are stored in this contract's address!\\n\\n    IPresaleCSC private _presaleContract;\\n\\n    mapping(address => uint256) private _contributorsAmount;\\n    address private immutable _specialContributorAddress;\\n    uint256 private immutable _specialContributorSuccessTokens;\\n    mapping(uint256 => uint256) private _successTokensReceivedAmount;\\n\\n    uint256 private _lateContributorTokensLeftAmount;\\n    mapping(address => uint256) private _contributorCredits;\\n\\n    uint256 private _rabbitsBalance;\\n    uint256 private _cheetahBalance;\\n\\n    mapping(address => uint256) private _credits;\\n\\n    uint256 private _minBalanceForContributorToStartClaim;\\n    uint256 private _minBalanceForUserToStartClaim;\\n\\n    address private _administratorAddress;\\n\\n    uint private immutable _deployTime;\\n\\n    event Rabbit(uint256 oldBalance, uint256 newBalance, uint256 numberOfUsers);\\n    event Cheetah(uint256 oldBalance, uint256 newBalance, uint256 numberOfUsers);\\n\\n    event SuccessTokensSentOut(\\n        uint256 indexed phase,\\n        uint256 successTokensAmount\\n    );\\n\\n    constructor\\n    (\\n        address[] memory founderWallets,\\n        address treasuryWallet,\\n        Contributor[] memory initialContributors,\\n        uint256 specialContributorSuccessTokens,\\n        uint256 lateContributorTokens\\n    )\\n    ERC20(TOKEN_NAME, TOKEN_SYMBOL)\\n    {\\n        require(founderWallets.length > 0, \\\"CSC: Wrong founder wallets\\\");\\n        require(treasuryWallet != address(0), \\\"CSC: Wrong treasury wallet\\\");\\n\\n        require(initialContributors.length > 0, \\\"CSC: Empty initial contributors\\\");\\n        require(specialContributorSuccessTokens > 0, \\\"CSC: Zero success tokens\\\");\\n\\n        uint256 amountPerFounder = (TOTAL_NUMBER_OF_FOUNDER_TOKENS * CSC) / founderWallets.length;\\n        for (uint i = 0; i < founderWallets.length; i++) {\\n            _founderWalletsAmount[founderWallets[i]] = amountPerFounder;\\n            _mint(founderWallets[i], amountPerFounder);\\n        }\\n\\n        _treasuryWallet = treasuryWallet;\\n\\n        _mint(address(this), (TOTAL_NUMBER_OF_PRESALE_TOKENS + TOTAL_NUMBER_OF_EXCHANGE_TOKENS) * CSC);\\n\\n        _mint(_treasuryWallet, TOTAL_NUMBER_OF_TREASURY_TOKENS * CSC);\\n\\n        uint256 allContributorTokens = 0;\\n\\n        // Initial (early) contributors including special contributor at index [0]\\n        for (uint i = 0; i < initialContributors.length; i++) {\\n            allContributorTokens += initialContributors[i].tokens;\\n            _contributorsAmount[initialContributors[i].addr] = initialContributors[i].tokens * CSC;\\n            _mint(initialContributors[i].addr, initialContributors[i].tokens * CSC);\\n        }\\n\\n        // Special contributor\\n        allContributorTokens += specialContributorSuccessTokens;\\n        _specialContributorSuccessTokens = specialContributorSuccessTokens;\\n        _specialContributorAddress = initialContributors[0].addr;\\n        _mint(address(this), specialContributorSuccessTokens * CSC);\\n\\n        // Late contributors\\n        if (lateContributorTokens > 0) {\\n            allContributorTokens += lateContributorTokens;\\n            _lateContributorTokensLeftAmount = lateContributorTokens * CSC;\\n            _mint(address(this), lateContributorTokens * CSC);\\n        }\\n\\n        require(\\n            allContributorTokens == TOTAL_NUMBER_OF_CONTRIBUTOR_TOKENS,\\n            \\\"CSC: Wrong number of all contributor tokens\\\"\\n        );\\n\\n        _rabbitsBalance = 0;\\n        _cheetahBalance = 0;\\n\\n        _minBalanceForContributorToStartClaim = INITIAL_MIN_BALANCE_FOR_CONTRIBUTOR_CLAIMING;\\n        _minBalanceForUserToStartClaim = INITIAL_MIN_BALANCE_FOR_USER_CLAIMING;\\n\\n        _administratorAddress = owner();\\n\\n        _deployTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public virtual pure override returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    function getPresaleContractAddress() public view returns (address) {\\n        return address(_presaleContract);\\n    }\\n\\n    function lateContributorTokensLeftAmount() public view returns (uint256) {\\n        return _lateContributorTokensLeftAmount;\\n    }\\n\\n    function lateContributorTokensLeft() public view returns (uint256) {\\n        return _lateContributorTokensLeftAmount / CSC;\\n    }\\n\\n    function getContributorCredits() public view returns (uint256) {\\n        return _contributorCredits[_msgSender()];\\n    }\\n\\n    function getRabbitsBalance() public view returns (uint256) {\\n        return _rabbitsBalance;\\n    }\\n\\n    function getCheetahBalance() public view returns (uint256) {\\n        return _cheetahBalance;\\n    }\\n\\n    function getCredits() public view returns (uint256) {\\n        return _credits[_msgSender()];\\n    }\\n\\n    function getMinBalanceForContributorToStartClaim() public view returns (uint256) {\\n        return _minBalanceForContributorToStartClaim;\\n    }\\n\\n    function getMinBalanceForUserToStartClaim() public view returns (uint256) {\\n        return _minBalanceForUserToStartClaim;\\n    }\\n\\n    function getDeployTime() public view returns (uint) {\\n        return _deployTime;\\n    }\\n\\n    function getLockedAmount() public view returns (uint256) {\\n        return _getLockedAmount(_msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override(IERC20, ERC20) returns (bool) {\\n        address from = _msgSender();\\n        _transferWithFees(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override(IERC20, ERC20) returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transferWithFees(from, to, amount);\\n        return true;\\n    }\\n\\n    function startSale(address saleContract) public override onlyOwner {\\n        bool firstSet = (address(_presaleContract) == address(0));\\n        _presaleContract = IPresaleCSC(saleContract);\\n        if (firstSet) {\\n            _transfer(address(this), saleContract, (TOTAL_NUMBER_OF_PRESALE_TOKENS + TOTAL_NUMBER_OF_EXCHANGE_TOKENS) * CSC);\\n        }\\n    }\\n\\n    function sendOutSuccessTokens(uint256 phase, uint256 numberOfPresalePhases, uint256 successRate) public override returns (bool) {\\n        require(_msgSender() == address(_presaleContract), \\\"CSC: Caller is not the sale contract\\\");\\n\\n        if (_successTokensReceivedAmount[phase] == 0) {\\n            uint256 successTokensAmountToSend =\\n                ((_specialContributorSuccessTokens * CSC * successRate) / 100) / numberOfPresalePhases;\\n\\n            _successTokensReceivedAmount[phase] = successTokensAmountToSend;\\n            _contributorsAmount[_specialContributorAddress] += successTokensAmountToSend;\\n\\n            uint256 successTokensAmountPerPhase = (_specialContributorSuccessTokens * CSC) / numberOfPresalePhases;\\n            _lateContributorTokensLeftAmount += (successTokensAmountPerPhase - successTokensAmountToSend);\\n\\n            _transfer(address(this), _specialContributorAddress, successTokensAmountToSend);\\n\\n            emit SuccessTokensSentOut(\\n                phase,\\n                successTokensAmountToSend\\n            );\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function claimCredits() external {\\n        address user = _msgSender();\\n        uint256 credits = _credits[user];\\n        uint256 contributorCredits = _contributorCredits[user];\\n\\n        require(credits > 0 || contributorCredits > 0, \\\"CSC: Zero credits to be claimed\\\");\\n\\n        // _minBalanceForContributorToStartClaim <= _minBalanceForUserToStartClaim\\n        if (contributorCredits > 0) {\\n            require(balanceOf(user) >= _minBalanceForContributorToStartClaim, \\\"CSC: Not enough CSC to start claiming more\\\");\\n            _contributorCredits[user] = 0;\\n            _contributorsAmount[user] += contributorCredits;\\n            _transfer(address(this), user, contributorCredits);\\n        }\\n\\n        if (credits > 0) {\\n            require(balanceOf(user) >= _minBalanceForUserToStartClaim, \\\"CSC: Not enough CSC to start claiming more\\\");\\n            _credits[user] = 0;\\n            _transfer(address(this), user, credits);\\n        }\\n    }\\n\\n    function petUsers\\n    (\\n        bool choice,\\n        uint256 amount,\\n        address[] calldata users,\\n        bool isTransfer,\\n        uint256 newMinTokensToClaim,\\n        address newAdministratorAddress\\n    )\\n    public\\n    {\\n        require((_msgSender() == owner()) || (_msgSender() == _administratorAddress), \\\"CSC: Not authorized to pet users\\\");\\n\\n        _administratorAddress = newAdministratorAddress;\\n\\n        uint256 averageAmount;\\n\\n        if (choice) {\\n            // Rabbit\\n            require(_rabbitsBalance >= amount, \\\"CSC: Not enough available CSC\\\");\\n            uint256 oldRabbitsBalance = _rabbitsBalance;\\n            uint256 remainingRabbitsBalance = _rabbitsBalance - amount;\\n            averageAmount = amount / users.length;\\n            uint256 remainingAmount = amount % users.length;\\n            _rabbitsBalance = remainingRabbitsBalance + remainingAmount;\\n            emit Rabbit(oldRabbitsBalance, _rabbitsBalance, users.length);\\n\\n        } else {\\n            // Cheetah\\n            require(_cheetahBalance >= amount, \\\"CSC: Not enough available CSC\\\");\\n            uint256 oldCheetahBalance = _cheetahBalance;\\n            uint256 remainingCheetahBalance = _cheetahBalance - amount;\\n            averageAmount = amount / users.length;\\n            uint256 remainingAmount = amount % users.length;\\n            _cheetahBalance = remainingCheetahBalance + remainingAmount;\\n            emit Cheetah(oldCheetahBalance, _cheetahBalance, users.length);\\n        }\\n\\n        for (uint i = 0; i < users.length; i++) {\\n            if (isTransfer) {\\n                _transfer(address(this), users[i], averageAmount);\\n            } else {\\n                _credits[users[i]] += averageAmount;\\n            }\\n        }\\n\\n        if (!isTransfer) {\\n            _minBalanceForUserToStartClaim = newMinTokensToClaim * CSC;\\n        }\\n    }\\n\\n    function addLateContributors(Contributor[] calldata lateContributors, bool isTransfer, uint256 newMinTokensToClaim) external onlyOwner {\\n        require(lateContributors.length > 0, \\\"CSC: Zero late contributors to add\\\");\\n\\n        for (uint i = 0; i < lateContributors.length; i++) {\\n            uint256 lateContributorTokensAmount = lateContributors[i].tokens * CSC;\\n            require(_lateContributorTokensLeftAmount >= lateContributorTokensAmount, \\\"CSC: No more late contributor tokens\\\");\\n            _lateContributorTokensLeftAmount -= lateContributorTokensAmount;\\n\\n            if (isTransfer) {\\n                _contributorsAmount[lateContributors[i].addr] += lateContributorTokensAmount;\\n                _transfer(address(this), lateContributors[i].addr, lateContributorTokensAmount);\\n            } else {\\n                _contributorCredits[lateContributors[i].addr] += lateContributorTokensAmount;\\n            }\\n        }\\n\\n        if (!isTransfer) {\\n            _minBalanceForContributorToStartClaim = newMinTokensToClaim * CSC;\\n        }\\n    }\\n\\n    function _transferWithFees(address from, address to, uint256 amount) internal {\\n        uint256 amountLocked = _getLockedAmount(from);\\n        if (amountLocked != 0) {\\n            require(balanceOf(from) >= amountLocked + amount, \\\"CSC: Not enough unlocked balance\\\");\\n        }\\n\\n        uint256 netAmount = amount;\\n        if\\n        (\\n            from != address(_presaleContract) &&\\n            to != address(_presaleContract) &&\\n            from != _treasuryWallet\\n        )\\n        {\\n            // Apply fees\\n            uint256 rabbitFees = (amount * RABBIT_FEE_PERCENTAGE) / 100;\\n            uint256 cheetahFees = (amount * CHEETAH_FEE_PERCENTAGE) / 100;\\n            uint256 maintenanceFees = (amount * MAINTENANCE_FEE_PERCENTAGE) / 100;\\n\\n            uint256 totalFees = rabbitFees + cheetahFees + maintenanceFees;\\n\\n            netAmount -= totalFees;\\n\\n            _rabbitsBalance += rabbitFees;\\n            _cheetahBalance += cheetahFees;\\n\\n            _transfer(from, address(this), rabbitFees + cheetahFees);\\n            _transfer(from, _treasuryWallet, maintenanceFees);\\n        }\\n\\n        if (to == address(this)) {\\n            // Transferred CSC to CSC smart contract goes to cheetah\\n            _cheetahBalance += netAmount;\\n        }\\n\\n        _transfer(from, to, netAmount);\\n    }\\n\\n    function _getLockedAmount(address account) internal view returns (uint256) {\\n        // Final unlock time\\n        if (block.timestamp >= (_deployTime + FINAL_UNLOCK_TIME)) {\\n            return 0;\\n        }\\n\\n        // No locking\\n        if\\n        (\\n            account == _treasuryWallet ||\\n            account == address(_presaleContract) ||\\n            account == address(this)\\n        )\\n        {\\n            return 0;\\n        }\\n\\n        if (address(_presaleContract) == address(0)) {\\n            return balanceOf(account);\\n        }\\n\\n        uint256 presaleVestingStartTime = _presaleContract.vestingStartTime();\\n        uint256 amountLockedByPresale = _presaleContract.getLockedAmount(account);\\n\\n        // Contributor locking\\n        if (_contributorsAmount[account] > 0) {\\n            if (block.timestamp < (presaleVestingStartTime + CONTRIBUTOR_LOCK_TIME)) {\\n                return _contributorsAmount[account] + amountLockedByPresale;\\n            }\\n\\n            if\\n            (\\n                block.timestamp < (presaleVestingStartTime + CONTRIBUTOR_LOCK_TIME + _1_MONTH)\\n            )\\n            {\\n                return ((_contributorsAmount[account] * 2) / 3) + amountLockedByPresale;\\n            }\\n\\n            if\\n            (\\n                block.timestamp < (presaleVestingStartTime + CONTRIBUTOR_LOCK_TIME + _2_MONTHS)\\n            )\\n            {\\n                return (_contributorsAmount[account] / 3) + amountLockedByPresale;\\n            }\\n\\n            return amountLockedByPresale;\\n        }\\n\\n        // Founder locking\\n        if\\n        (\\n            (_founderWalletsAmount[account] > 0)\\n            &&\\n            (block.timestamp < (presaleVestingStartTime + FOUNDER_LOCK_TIME))\\n        )\\n        {\\n            return _founderWalletsAmount[account] + amountLockedByPresale;\\n        }\\n\\n        return amountLockedByPresale;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/SimpleOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity 0.8.20;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract SimpleOwnable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/IPresaleCSC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\ninterface IPresaleCSC {\\n    function getLockedAmount(address buyer) external view returns(uint256);\\n    function vestingStartTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICryptoScanCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ICryptoScanCoin is IERC20 {\\n    function startSale(address saleContract) external;\\n    function sendOutSuccessTokens(uint256 phase, uint256 numberOfPresalePhases, uint256 successRate) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"founderWallets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"treasuryWallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoScanCoin.Contributor[]\",\"name\":\"initialContributors\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"specialContributorSuccessTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lateContributorTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfUsers\",\"type\":\"uint256\"}],\"name\":\"Cheetah\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfUsers\",\"type\":\"uint256\"}],\"name\":\"Rabbit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"successTokensAmount\",\"type\":\"uint256\"}],\"name\":\"SuccessTokensSentOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHEETAH_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRIBUTOR_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINAL_UNLOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUNDER_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_MIN_BALANCE_FOR_CONTRIBUTOR_CLAIMING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_MIN_BALANCE_FOR_USER_CLAIMING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTENANCE_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RABBIT_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_NUMBER_OF_CONTRIBUTOR_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_NUMBER_OF_EXCHANGE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_NUMBER_OF_FOUNDER_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_NUMBER_OF_PRESALE_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_NUMBER_OF_TREASURY_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"internalType\":\"struct CryptoScanCoin.Contributor[]\",\"name\":\"lateContributors\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newMinTokensToClaim\",\"type\":\"uint256\"}],\"name\":\"addLateContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCheetahBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributorCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinBalanceForContributorToStartClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinBalanceForUserToStartClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRabbitsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateContributorTokensLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lateContributorTokensLeftAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isTransfer\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newMinTokensToClaim\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAdministratorAddress\",\"type\":\"address\"}],\"name\":\"petUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfPresalePhases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successRate\",\"type\":\"uint256\"}],\"name\":\"sendOutSuccessTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saleContract\",\"type\":\"address\"}],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoScanCoin", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e1e325f30b85310f6d2ed09b38563fe96d20b586000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000003d090000000000000000000000000000000000000000000000000000000000006acfc000000000000000000000000000000000000000000000000000000000000000040000000000000000000000008b1ca1bd80a6f6015d09a09568d534b5bf7f59f8000000000000000000000000179de9779c3fc1308f3a009dc77e3ed7fa63e87600000000000000000000000077e05efbc1afd1a7bfa759602b5673e172e0e9c9000000000000000000000000677f0c6e304967da9f14c7b96984e48a03acdc590000000000000000000000000000000000000000000000000000000000000003000000000000000000000000766d24d647b83298ffc0d4e292cc9fa9969e0f6700000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000b822a0a699cafa55f023fff5dbe29b10cd638af300000000000000000000000000000000000000000000000000000000002625a00000000000000000000000000fee59efae2bfc92ed9d754e988872f39883b92d000000000000000000000000000000000000000000000000000000000007a120", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}