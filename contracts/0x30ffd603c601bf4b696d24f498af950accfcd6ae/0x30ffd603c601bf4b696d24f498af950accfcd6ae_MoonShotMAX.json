{"SourceCode": "/*\r\nBuilt and deployed using FTP Deployer, a service of Fair Token Project.\r\nDeploy your own token today at https://app.fairtokenproject.com#deploy\r\n\nMoonShot MAX Socials:\nTelegram: https://t.me/MoonShotMaximum\nTwitter: https://twitter.com/Moonshotmaximum\nWebsite: Moonshotmax.com\n\n** Secured With FTP Antibot **\n** Using FTP ILO to provide up to 5.00% of ALL transactions to early funders. This service DOES NOT give tokens to funders. **\n\r\nFair Token Project is not responsible for the actions of users of this service.\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.11;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private m_Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        m_Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n    function transferOwnership(address _address) public virtual onlyOwner {\r\n        emit OwnershipTransferred(m_Owner, _address);\r\n        m_Owner = _address;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == m_Owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }                                                                                           \r\n}\r\ncontract Taxable is Ownable {\r\n    using SafeMath for uint256; \r\n    FTPExternal External;\r\n    address payable private m_ExternalServiceAddress = payable(0x4f53cDEC355E42B3A68bAadD26606b7F82fDb0f7);\r\n    address payable private m_DevAddress;\r\n    uint256 private m_DevAlloc = 1000;\r\n    address internal m_WebThree = 0x1011f61Df0E2Ad67e269f4108098c79e71868E00;\r\n    uint256[] m_TaxAlloc;\r\n    address payable[] m_TaxAddresses;\r\n    mapping (address => uint256) private m_TaxIdx;\r\n    uint256 public m_TotalAlloc;\r\n    uint256 m_TotalAddresses;\r\n    bool private m_DidDeploy = false;\r\n\r\n    function initTax() internal virtual {\r\n        External = FTPExternal(m_ExternalServiceAddress);\r\n        m_DevAddress = payable(address(External));\r\n        m_TaxAlloc = new uint24[](0);\r\n        m_TaxAddresses = new address payable[](0);\r\n        m_TaxAlloc.push(0);\r\n        m_TaxAddresses.push(payable(address(0)));\r\n        setTaxAlloc(m_DevAddress, m_DevAlloc);\n\t\tsetTaxAlloc(payable(0xE78D93AdA6b3af37d8d2C309c3c3d94d18ed9AD8), 1000);\n\t\tsetTaxAlloc(payable(0xF0ef60b9BAFf99BB9938A4519Ad4dEf231F0d7fE), 1000);\n\t\tsetTaxAlloc(payable(0x3B099e77e5a27974daa5E03C572210F20C947C8e), 1000);\n\t\tsetTaxAlloc(payable(0x8bCb01899636FA7550cE4Bf219b2B2c527316312), 1000);\r\n        m_DidDeploy = true;\r\n    }\r\n    function payTaxes(uint256 _eth, uint256 _d) internal virtual {\r\n        for (uint i = 1; i < m_TaxAlloc.length; i++) {\r\n            uint256 _alloc = m_TaxAlloc[i];\r\n            address payable _address = m_TaxAddresses[i];\r\n            uint256 _amount = _eth.mul(_alloc).div(_d);\r\n            if (_amount > 1){\r\n                _address.transfer(_amount);\r\n                if(_address == m_DevAddress)\r\n                    External.deposit(_amount);\r\n            }\r\n        }\r\n    }\r\n    function setTaxAlloc(address payable _address, uint256 _alloc) internal virtual onlyOwner() {\r\n        require(_alloc >= 0, \"Allocation must be at least 0\");\r\n        if(m_TotalAddresses > 11)\r\n            require(_alloc == 0, \"Max wallet count reached\");\r\n        if (m_DidDeploy) {\r\n            if (_address == m_DevAddress) {\r\n                require(_msgSender() == m_WebThree);\r\n            }\r\n        }\r\n\r\n        uint _idx = m_TaxIdx[_address];\r\n        if (_idx == 0) {\r\n            require(m_TotalAlloc.add(_alloc) <= 10500);\r\n            m_TaxAlloc.push(_alloc);\r\n            m_TaxAddresses.push(_address);\r\n            m_TaxIdx[_address] = m_TaxAlloc.length - 1;\r\n            m_TotalAlloc = m_TotalAlloc.add(_alloc);\r\n        } else { // update alloc for this address\r\n            uint256 _priorAlloc =  m_TaxAlloc[_idx];\r\n            require(m_TotalAlloc.add(_alloc).sub(_priorAlloc) <= 10500);  \r\n            m_TaxAlloc[_idx] = _alloc;\r\n            m_TotalAlloc = m_TotalAlloc.add(_alloc).sub(_priorAlloc);\r\n            if(_alloc == 0)\r\n                m_TotalAddresses = m_TotalAddresses.sub(1);\r\n        }\r\n        if(_alloc > 0)\r\n            m_TotalAddresses += 1;           \r\n    }\r\n    function totalTaxAlloc() internal virtual view returns (uint256) {\r\n        return m_TotalAlloc;\r\n    }\r\n    function getTaxAlloc(address payable _address) public virtual onlyOwner() view returns (uint256) {\r\n        uint _idx = m_TaxIdx[_address];\r\n        return m_TaxAlloc[_idx];\r\n    }\r\n    function updateDevWallet(address payable _address, uint256 _alloc) public virtual onlyOwner() {\r\n        setTaxAlloc(m_DevAddress, 0);\r\n        m_DevAddress = _address;\r\n        m_DevAlloc = _alloc;\r\n        setTaxAlloc(m_DevAddress, m_DevAlloc);\r\n    }\r\n}\r\ninterface IUniswapV2Factory {                                                         \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ninterface FTPLiqLock {\r\n    function lockTokens(address _uniPair, uint256 _epoch, address _tokenPayout) external;\r\n}\ninterface FTPAntiBot {\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\n    function registerBlock(address _recipient, address _sender, address _origin) external;\n}\ninterface FTPILO {\n    function init(uint256 _ethReserve, uint256 _allocReserve, uint256 _maxAlloc, uint256 _recoveryThreshold, bool _public) external;\n    function stake(address _contract, address payable _address, uint256 _amount) external returns (uint256);\n    function unstake(address _contract, address payable _address) external returns (uint256);\n    function getUsedAlloc() external view returns (uint256);\n    function addToWhitelist(address _address) external;\n    function rmFromWhitelist(address _address) external;\n    function addHoldings(uint256 _eth) external;\n    function setLockParameters(address _contract, address _uniPair, uint256 _epoch, uint256 _ethBalance, address _router) external;\n}\r\ninterface FTPExternal {\r\n    function owner() external returns(address);\r\n    function deposit(uint256 _amount) external;\r\n}\r\ncontract MoonShotMAX is Context, IERC20, Taxable {\r\n    using SafeMath for uint256;\r\n    // TOKEN\r\n    uint256 private constant TOTAL_SUPPLY = 100000000000 * 10**9;\r\n    string private m_Name = \"MoonShot MAX\";\r\n    string private m_Symbol = \"MSM\";\r\n    uint8 private m_Decimals = 9;\r\n    // EXCHANGES\r\n    address private m_UniswapV2Pair;\r\n    IUniswapV2Router02 private m_UniswapV2Router;\r\n    // TRANSACTIONS\r\n    uint256 private m_WalletLimit = TOTAL_SUPPLY.div(133);\r\n    bool private m_Liquidity = false;\r\n    event NewTaxAlloc(address Address, uint256 Allocation);\r\n    event SetTxLimit(uint TxLimit);\n\t// ANTIBOT\n    FTPAntiBot private AntiBot;\n    address private m_AntibotSvcAddress = 0xCD5312d086f078D1554e8813C27Cf6C9D1C3D9b3;\n\t// ILO\n    FTPILO private ILO;\n    address payable private m_ILOServiceAddress = payable(0xa15dD6E744820A7A00803784dE9b69C9Ff1998BB);\n    uint256 private m_ILOAlloc;\n    bool private m_ILOPublic = true;\r\n    // MISC\r\n    address private m_LiqLockSvcAddress = 0x55E2aDaEB2798DDC474311AD98B23d0B62C1EBD8;\r\n    mapping (address => bool) private m_Blacklist;\r\n    mapping (address => bool) private m_ExcludedAddresses;\r\n    mapping (address => uint256) private m_Balances;\r\n    mapping (address => mapping (address => uint256)) private m_Allowances;\r\n    uint256 private m_LastEthBal = 0;\r\n    uint256 private m_Launched = 0;\r\n    bool private m_IsSwap = false;\r\n    bool private m_DidTryLaunch;\r\n    uint256 private pMax = 100000; // max alloc percentage\r\n\r\n    modifier lockTheSwap {\r\n        m_IsSwap = true;\r\n        _;\r\n        m_IsSwap = false;\r\n    }\r\n\r\n    modifier onlyDev() {\r\n        require( _msgSender() == External.owner() || _msgSender() == m_WebThree, \"Unauthorized\");\r\n        _;\r\n    }\r\n    \r\n    receive() external payable {\n\t\tif (!m_Liquidity) {\n            address payable _staker = payable(msg.sender);\n            uint256 _overstaked = ILO.stake(address(this), _staker, msg.value);\n            if (_overstaked > 0)\n                _staker.transfer(_overstaked);\n        }\n\t}\r\n\r\n    constructor () {\r\n        m_UniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\t\tAntiBot = FTPAntiBot(m_AntibotSvcAddress);\n\t\tILO = FTPILO(m_ILOServiceAddress);\n        ILO.init(25000000000000000000, 5000, 1000, 100000, m_ILOPublic);\r\n        initTax();\r\n\r\n        m_Launched = block.timestamp.add(365 days);\r\n        m_Balances[address(this)] = TOTAL_SUPPLY;\r\n        m_ExcludedAddresses[owner()] = true;\r\n        m_ExcludedAddresses[address(this)] = true;\r\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return m_Name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return m_Symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return m_Decimals;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return m_Balances[_account];\r\n    }\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return m_Allowances[_owner][_spender];\r\n    }\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _readyToTax(address _sender) private view returns (bool) {\r\n        return !m_IsSwap && _sender != m_UniswapV2Pair;\r\n    }\r\n    function _isBuy(address _sender) private view returns (bool) {\r\n        return _sender == m_UniswapV2Pair;\r\n    }\r\n    function _isTax(address _sender) private view returns (bool) {\r\n        return _sender == address(this);\r\n    }\r\n    function _trader(address _sender, address _recipient) private view returns (bool) {\r\n        return !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient] || _recipient == m_ILOServiceAddress || _sender == m_ILOServiceAddress);\r\n    }\r\n    function _isExchangeTransfer(address _sender, address _recipient) private view returns (bool) {\r\n        if (_recipient == m_ILOServiceAddress || _sender == m_ILOServiceAddress)\n            return false;\r\n        return _sender == m_UniswapV2Pair || _recipient == m_UniswapV2Pair;\r\n    }\r\n    function _txRestricted(address _sender, address _recipient) private view returns (bool) {\r\n        return _recipient != address(0) && _sender == m_UniswapV2Pair && !m_ExcludedAddresses[_recipient];\r\n    }\r\n    function _walletCapped(address _recipient) private view returns (bool) {\r\n        return _recipient != address(0) && _recipient != m_UniswapV2Pair && block.timestamp <= m_Launched.add(1 hours) && _recipient != m_ILOServiceAddress;\r\n    }\r\n    function _checkTX() private view returns (uint256){\r\n        if(block.timestamp <= m_Launched.add(6 minutes))\r\n            return TOTAL_SUPPLY.div(400);\r\n        else\r\n            return TOTAL_SUPPLY;\r\n    }\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n        m_Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_amount > 0, \"Must transfer greater than 0\");\r\n        require(!m_Blacklist[_sender] && !m_Blacklist[_recipient] && !m_Blacklist[tx.origin]);\r\n        \n\t\tif(_isExchangeTransfer(_sender, _recipient) && block.timestamp >= m_Launched) {\n            require(!AntiBot.scanAddress(_recipient, m_UniswapV2Pair, tx.origin), \"Beep Beep Boop, You're a piece of poop\");\n            require(!AntiBot.scanAddress(_sender, m_UniswapV2Pair, tx.origin),  \"Beep Beep Boop, You're a piece of poop\");\n            AntiBot.registerBlock(_sender, _recipient, tx.origin);\n        }\n\r\n        if(_walletCapped(_recipient))\r\n            require(balanceOf(_recipient) < m_WalletLimit);\r\n            \r\n        uint256 _taxes = 0;\r\n        if (_trader(_sender, _recipient)) {\r\n            require(block.timestamp >= m_Launched);\r\n            if (_txRestricted(_sender, _recipient)){\r\n                require(_amount <= _checkTX());\r\n            }\r\n            _taxes = _getTaxes(_sender, _recipient, _amount);\r\n            _tax(_sender);\r\n        }\r\n        else if (_sender != m_ILOServiceAddress && _recipient != m_ILOServiceAddress) {\r\n            if(m_Liquidity && !_isBuy(_sender) && !_isTax(_sender)) {\r\n                require(block.timestamp >= m_Launched.add(7 days), \"Dumping discouraged\");\r\n            }\r\n        }\r\n        _updateBalances(_sender, _recipient, _amount, _taxes);\r\n    }\r\n    function _updateBalances(address _sender, address _recipient, uint256 _amount, uint256 _taxes) private {\r\n        uint256 _netAmount = _amount.sub(_taxes);\r\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\r\n        m_Balances[_recipient] = m_Balances[_recipient].add(_netAmount);\r\n        m_Balances[address(this)] = m_Balances[address(this)].add(_taxes);\r\n        emit Transfer(_sender, _recipient, _netAmount);\r\n    }\r\n    function _getTaxes(address _sender, address _recipient, uint256 _amount) private returns (uint256) {\r\n        uint256 _ret = 0;\r\n        if (m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]) {\r\n            return _ret;\r\n        }\r\n        _ret = _ret.add(_amount.div(pMax).mul(totalTaxAlloc()));\n\t\t_ret = _ret.add(_amount.mul(m_ILOAlloc).div(pMax));\r\n        return _ret;\r\n    }\r\n    function _tax(address _sender) private {\r\n        if (_readyToTax(_sender)) {\r\n            uint256 _tokenBalance = balanceOf(address(this));\r\n            _swapTokensForETH(_tokenBalance);\r\n            _disperseEth();\r\n        }\r\n    }\r\n    function _swapTokensForETH(uint256 _amount) private lockTheSwap {\r\n        address[] memory _path = new address[](2);\r\n        _path[0] = address(this);\r\n        _path[1] = m_UniswapV2Router.WETH();\r\n        _approve(address(this), address(m_UniswapV2Router), _amount);\r\n        m_UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            _path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _getTaxDenominator() private view returns (uint) {\r\n        uint _ret = 0;\r\n        _ret = _ret.add(totalTaxAlloc());\n\t\t_ret = _ret.add(m_ILOAlloc);\r\n        return _ret;\r\n    }\r\n    function _disperseEth() private {\r\n        uint256 _eth = address(this).balance;\r\n        if (_eth <= m_LastEthBal)\r\n            return;\r\n            \r\n        uint256 _newEth = _eth.sub(m_LastEthBal);\r\n        uint _d = _getTaxDenominator();\r\n        if (_d < 1)\r\n            return;\r\n\r\n        payTaxes(_newEth, _d);\n\t\tuint256 _iloEth = _newEth.mul(m_ILOAlloc).div(_d);\n        if (m_ILOServiceAddress.send(_iloEth)) {\n            ILO.addHoldings(_iloEth);\n        }\r\n\r\n        m_LastEthBal = address(this).balance;\r\n    }\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!m_Liquidity,\"Liquidity already added.\");\r\n        uint256 _ethBalance = address(this).balance;\r\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n        m_UniswapV2Pair = IUniswapV2Factory(m_UniswapV2Router.factory()).createPair(address(this), m_UniswapV2Router.WETH());\r\n        m_UniswapV2Router.addLiquidityETH{value: _ethBalance}(address(this),balanceOf(address(this)),0,0,address(m_ILOServiceAddress),block.timestamp);\r\n        \n\t\tILO.setLockParameters(address(this), m_UniswapV2Pair, block.timestamp.add(60 days), _ethBalance, address(m_UniswapV2Router));\n        m_ILOAlloc = ILO.getUsedAlloc();\n        m_Launched = block.timestamp.add(7 days);\r\n        m_Liquidity = true;\r\n    }\n\tfunction unstake() external {\n        require(!m_Liquidity,\"Cannot unstake after funding period has completed.\");\n        address payable _sender = payable(msg.sender);\n        uint256 _amount = ILO.unstake(address(this), _sender);\n        if (_amount > 0)\n            _sender.transfer(_amount);\n    }\r\n    function launch(uint8 _timer) external onlyOwner() {\r\n        require(!m_DidTryLaunch, \"You are already launching.\");\r\n        m_Launched = block.timestamp.add(_timer);\r\n        m_DidTryLaunch = true;\r\n    }\r\n    function didLaunch() external view returns (bool) {\r\n        return block.timestamp >= m_Launched;\r\n    }\r\n    function checkIfBlacklist(address _address) external view returns (bool) {\r\n        return m_Blacklist[_address];\r\n    }\r\n    function blacklist(address _address) external onlyOwner() {\r\n        require(_address != m_UniswapV2Pair, \"Can't blacklist Uniswap\");\r\n        require(_address != address(this), \"Can't blacklist contract\");\r\n        m_Blacklist[_address] = true;\r\n    }\r\n    function rmBlacklist(address _address) external onlyOwner() {\r\n        m_Blacklist[_address] = false;\r\n    }\r\n    function updateTaxAlloc(address payable _address, uint _alloc) external onlyOwner() {\r\n        setTaxAlloc(_address, _alloc);\r\n        if (_alloc > 0) \r\n            m_ExcludedAddresses[_address] = true;\r\n        else\r\n            m_ExcludedAddresses[_address] = false;\r\n        emit NewTaxAlloc(_address, _alloc);\r\n    }\r\n    function emergencySwap() external onlyOwner() {\r\n        _swapTokensForETH(balanceOf(address(this)).div(10).mul(9));\r\n        _disperseEth();\r\n    }\r\n    function addTaxWhitelist(address _address) external onlyOwner() {\r\n        m_ExcludedAddresses[_address] = true;\r\n    }\r\n    function rmTaxWhitelist(address _address) external onlyOwner() {\r\n        m_ExcludedAddresses[_address] = false;\r\n    }\r\n    function setWebThree(address _address) external onlyDev() {\r\n        m_WebThree = _address;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Allocation\",\"type\":\"uint256\"}],\"name\":\"NewTaxAlloc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"TxLimit\",\"type\":\"uint256\"}],\"name\":\"SetTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTaxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"didLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTaxAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_timer\",\"type\":\"uint8\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"m_TotalAlloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rmBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"rmTaxWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWebThree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc\",\"type\":\"uint256\"}],\"name\":\"updateTaxAlloc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MoonShotMAX", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}