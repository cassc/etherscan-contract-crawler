{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/rwa-toolkit/src/conduits/RwaSwapInputConduit2.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 2021 Lev Livnev <lev@liv.nev.org.uk>\\n// SPDX-FileCopyrightText: \u00a9 2022 Dai Foundation <www.daifoundation.org>\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity 0.6.12;\\n\\nimport {GemAbstract} from \\\"dss-interfaces/ERC/GemAbstract.sol\\\";\\nimport {DaiAbstract} from \\\"dss-interfaces/dss/DaiAbstract.sol\\\";\\nimport {PsmAbstract} from \\\"dss-interfaces/dss/PsmAbstract.sol\\\";\\nimport {GemJoinAbstract} from \\\"dss-interfaces/dss/GemJoinAbstract.sol\\\";\\n\\n/**\\n * @author Lev Livnev <lev@liv.nev.org.uk>\\n * @author Nazar Duchak <nazar@clio.finance>\\n * @title An Input Conduit for real-world assets (RWA).\\n * @dev This contract differs from the original [RwaInputConduit](https://github.com/makerdao/MIP21-RWA-Example/blob/fce06885ff89d10bf630710d4f6089c5bba94b4d/src/RwaConduit.sol#L20-L39):\\n *  - Requires DAI, GEM and PSM addresses in the constructor.\\n *      - DAI and GEM are immutable, PSM can be replaced as long as it uses the same DAI and GEM.\\n *  - The caller of `push()` is not required to hold MakerDAO governance tokens.\\n *  - The `push()` method is permissionless.\\n *  - The `push()` method swaps entire GEM balance to DAI using PSM.\\n *  - The `push(uint256)` method swaps specified amount of GEM to DAI using PSM.\\n *  - The `quit()` method allows moving outstanding GEM balance to `quitTo`. It can be called only by `mate`d addresses.\\n *  - The `quit(uint256)` method allows moving the specified amount of GEM balance to `quitTo`. It can be called only by `mate`d addresses.\\n *  - The `file(bytes32, address)` method allows updating `quitTo`, `to`, `psm` addresses. It can be called only by the admin.\\n */\\ncontract RwaSwapInputConduit2 {\\n    /// @notice PSM GEM token contract address.\\n    GemAbstract public immutable gem;\\n    /// @notice DAI token contract address.\\n    DaiAbstract public immutable dai;\\n    /// @dev DAI/GEM resolution difference.\\n    uint256 private immutable to18ConversionFactor;\\n\\n    /// @notice Addresses with admin access on this contract. `wards[usr]`\\n    mapping(address => uint256) public wards;\\n    /// @notice Addresses with quit access on this contract. `may[usr]`\\n    mapping(address => uint256) public may;\\n\\n    /// @notice PSM contract address.\\n    PsmAbstract public psm;\\n    /// @notice Recipient address for DAI.\\n    address public to;\\n    /// @notice Destination address for GEM after calling `quit`.\\n    address public quitTo;\\n\\n    /**\\n     * @notice `usr` was granted admin access.\\n     * @param usr The user address.\\n     */\\n    event Rely(address indexed usr);\\n    /**\\n     * @notice `usr` admin access was revoked.\\n     * @param usr The user address.\\n     */\\n    event Deny(address indexed usr);\\n    /**\\n     * @notice `usr` was granted push access.\\n     * @param usr The user address.\\n     */\\n    event Mate(address indexed usr);\\n    /**\\n     * @notice `usr` push access was revoked.\\n     * @param usr The user address.\\n     */\\n    event Hate(address indexed usr);\\n    /**\\n     * @notice `wad` amount of Dai was pushed to `to`.\\n     * @param to Recipient address for DAI.\\n     * @param wad The amount of DAI.\\n     */\\n    event Push(address indexed to, uint256 wad);\\n    /**\\n     * @notice A contract parameter was updated.\\n     * @param what The changed parameter name. Currently the supported values are: \\\"quitTo\\\", \\\"to\\\", \\\"psm\\\".\\n     * @param data The new value of the parameter.\\n     */\\n    event File(bytes32 indexed what, address data);\\n    /**\\n     * @notice The conduit outstanding GEM balance was flushed out to `quitTo`.\\n     * @param quitTo The quitTo address.\\n     * @param wad The amount of GEM flushed out.\\n     */\\n    event Quit(address indexed quitTo, uint256 wad);\\n    /**\\n     * @notice `amt` outstanding `token` balance was flushed out to `usr`.\\n     * @param token The token address.\\n     * @param usr The destination address.\\n     * @param amt The amount of `token` flushed out.\\n     */\\n    event Yank(address indexed token, address indexed usr, uint256 amt);\\n\\n    modifier auth() {\\n        require(wards[msg.sender] == 1, \\\"RwaSwapInputConduit2/not-authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyMate() {\\n        require(may[msg.sender] == 1, \\\"RwaSwapInputConduit2/not-mate\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Defines addresses and gives `msg.sender` admin access.\\n     * @param _psm PSM contract address.\\n     * @param _dai DAI contract address.\\n     * @param _gem GEM contract address.\\n     * @param _to RwaUrn contract address.\\n     */\\n    constructor(\\n        address _dai,\\n        address _gem,\\n        address _psm,\\n        address _to\\n    ) public {\\n        require(_to != address(0), \\\"RwaSwapInputConduit2/invalid-to-address\\\");\\n        require(PsmAbstract(_psm).dai() == _dai, \\\"RwaSwapInputConduit2/wrong-dai-for-psm\\\");\\n        require(GemJoinAbstract(PsmAbstract(_psm).gemJoin()).gem() == _gem, \\\"RwaSwapInputConduit2/wrong-gem-for-psm\\\");\\n\\n        // We assume that DAI will alway have 18 decimals\\n        to18ConversionFactor = 10**_sub(18, GemAbstract(_gem).decimals());\\n\\n        psm = PsmAbstract(_psm);\\n        dai = DaiAbstract(_dai);\\n        gem = GemAbstract(_gem);\\n\\n        to = _to;\\n\\n        // Give unlimited approval to PSM gemjoin\\n        GemAbstract(_gem).approve(address(psm.gemJoin()), type(uint256).max);\\n\\n        wards[msg.sender] = 1;\\n        emit Rely(msg.sender);\\n    }\\n\\n    /*//////////////////////////////////\\n               Authorization\\n    //////////////////////////////////*/\\n\\n    /**\\n     * @notice Grants `usr` admin access to this contract.\\n     * @param usr The user address.\\n     */\\n    function rely(address usr) external auth {\\n        wards[usr] = 1;\\n        emit Rely(usr);\\n    }\\n\\n    /**\\n     * @notice Revokes `usr` admin access from this contract.\\n     * @param usr The user address.\\n     */\\n    function deny(address usr) external auth {\\n        wards[usr] = 0;\\n        emit Deny(usr);\\n    }\\n\\n    /**\\n     * @notice Grants `usr` push access to this contract.\\n     * @param usr The user address.\\n     */\\n    function mate(address usr) external auth {\\n        may[usr] = 1;\\n        emit Mate(usr);\\n    }\\n\\n    /**\\n     * @notice Revokes `usr` push access from this contract.\\n     * @param usr The user address.\\n     */\\n    function hate(address usr) external auth {\\n        may[usr] = 0;\\n        emit Hate(usr);\\n    }\\n\\n    /*//////////////////////////////////\\n               Administration\\n    //////////////////////////////////*/\\n\\n    /**\\n     * @notice Updates a contract parameter.\\n     * @dev `to` and `quitTo` can be set to `address(0)` to disable `push` and `quit` respectively.\\n     * @param what The changed parameter name. `\\\"to\\\", \\\"quitTo\\\", \\\"psm\\\"`\\n     * @param data The new value of the parameter.\\n     */\\n    function file(bytes32 what, address data) external auth {\\n        if (what == \\\"quitTo\\\") {\\n            quitTo = data;\\n        } else if (what == \\\"to\\\") {\\n            to = data;\\n        } else if (what == \\\"psm\\\") {\\n            require(PsmAbstract(data).dai() == address(dai), \\\"RwaSwapInputConduit2/wrong-dai-for-psm\\\");\\n            require(\\n                GemJoinAbstract(PsmAbstract(data).gemJoin()).gem() == address(gem),\\n                \\\"RwaSwapInputConduit2/wrong-gem-for-psm\\\"\\n            );\\n\\n            // Revoke approval for the old PSM gemjoin\\n            gem.approve(address(psm.gemJoin()), 0);\\n            // Give unlimited approval to the new PSM gemjoin\\n            gem.approve(address(PsmAbstract(data).gemJoin()), type(uint256).max);\\n\\n            psm = PsmAbstract(data);\\n        } else {\\n            revert(\\\"RwaSwapInputConduit2/unrecognised-param\\\");\\n        }\\n\\n        emit File(what, data);\\n    }\\n\\n    /*//////////////////////////////////\\n               Operations\\n    //////////////////////////////////*/\\n\\n    /**\\n     * @notice Swaps the GEM balance of this contract into DAI through the PSM and push it into the recipient address.\\n     */\\n    function push() external {\\n        _doPush(gem.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Swaps the specified amount of GEM into DAI through the PSM and push it into the recipient address.\\n     * @param amt Gem amount.\\n     */\\n    function push(uint256 amt) external {\\n        _doPush(amt);\\n    }\\n\\n    /**\\n     * @notice Flushes out any GEM balance to `quitTo` address.\\n     * @dev `msg.sender` must have received push access through `mate()`.\\n     */\\n    function quit() external onlyMate {\\n        _doQuit(gem.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Flushes out the specified amount of GEM balance to `quitTo` address.\\n     * @dev `msg.sender` must have received push access through `mate()`.\\n     * @param amt Gem amount.\\n     */\\n    function quit(uint256 amt) external onlyMate {\\n        _doQuit(amt);\\n    }\\n\\n    /**\\n     * @notice Flushes out `amt` of `token` sitting in this contract to `usr` address.\\n     * @dev Can only be called by the admin.\\n     * @param token Token address.\\n     * @param usr Destination address.\\n     * @param amt Token amount.\\n     */\\n    function yank(\\n        address token,\\n        address usr,\\n        uint256 amt\\n    ) external auth {\\n        GemAbstract(token).transfer(usr, amt);\\n        emit Yank(token, usr, amt);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of DAI received for swapping `amt` of GEM.\\n     * @param amt GEM amount.\\n     * @return wad Expected DAI amount.\\n     */\\n    function expectedDaiWad(uint256 amt) public view returns (uint256 wad) {\\n        uint256 amt18 = _mul(amt, to18ConversionFactor);\\n        uint256 fee = _mul(amt18, psm.tin()) / WAD;\\n        return _sub(amt18, fee);\\n    }\\n\\n    /**\\n     * @notice Calculates the required amount of GEM to get `wad` amount of DAI.\\n     * @param wad DAI amount.\\n     * @return amt Required GEM amount.\\n     */\\n    function requiredGemAmt(uint256 wad) external view returns (uint256 amt) {\\n        return _mul(wad, WAD) / _mul(_sub(WAD, psm.tin()), to18ConversionFactor);\\n    }\\n\\n    /**\\n     * @notice Swaps the specified amount of GEM into DAI through the PSM and push it into the recipient address.\\n     * @dev If `to` is set to `address(0)`, if effectively means this methos is currently disabled.\\n     * @param amt GEM amount.\\n     */\\n    function _doPush(uint256 amt) internal {\\n        require(to != address(0), \\\"RwaSwapInputConduit2/invalid-to-address\\\");\\n\\n        psm.sellGem(to, amt);\\n        emit Push(to, expectedDaiWad(amt));\\n    }\\n\\n    /**\\n     * @notice Flushes out the specified amount of GEM to the `quitTo` address.\\n     * @dev If `quitTo` is set to `address(0)`, if effectively means this method is currently disabled.\\n     * @param amt GEM amount.\\n     */\\n    function _doQuit(uint256 amt) internal {\\n        require(quitTo != address(0), \\\"RwaSwapInputConduit2/invalid-quit-to-address\\\");\\n\\n        gem.transfer(quitTo, amt);\\n        emit Quit(quitTo, amt);\\n    }\\n\\n    /*//////////////////////////////////\\n                    Math\\n    //////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 10**18;\\n\\n    function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"Math/sub-overflow\\\");\\n    }\\n\\n    function _mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"Math/mul-overflow\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/dss-interfaces/src/ERC/GemAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.12;\\n\\n// A base ERC-20 abstract class\\n// https://eips.ethereum.org/EIPS/eip-20\\ninterface GemAbstract {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n    function allowance(address, address) external view returns (uint256);\\n    function approve(address, uint256) external returns (bool);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/dss-interfaces/src/dss/DaiAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.12;\\n\\n// https://github.com/makerdao/dss/blob/master/src/dai.sol\\ninterface DaiAbstract {\\n    function wards(address) external view returns (uint256);\\n    function rely(address) external;\\n    function deny(address) external;\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function version() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n    function allowance(address, address) external view returns (uint256);\\n    function nonces(address) external view returns (uint256);\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns (bool);\\n    function mint(address, uint256) external;\\n    function burn(address, uint256) external;\\n    function approve(address, uint256) external returns (bool);\\n    function push(address, uint256) external;\\n    function pull(address, uint256) external;\\n    function move(address, address, uint256) external;\\n    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\\n}\\n\"\r\n    },\r\n    \"lib/dss-interfaces/src/dss/PsmAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.12;\\n\\n// https://github.com/makerdao/dss-psm/blob/master/src/psm.sol\\ninterface PsmAbstract {\\n    function wards(address) external view returns (uint256);\\n    function rely(address) external;\\n    function deny(address) external;\\n    function vat() external view returns (address);\\n    function gemJoin() external view returns (address);\\n    function dai() external view returns (address);\\n    function daiJoin() external view returns (address);\\n    function ilk() external view returns (bytes32);\\n    function vow() external view returns (address);\\n    function tin() external view returns (uint256);\\n    function tout() external view returns (uint256);\\n    function file(bytes32 what, uint256 data) external;\\n    function hope(address) external;\\n    function nope(address) external;\\n    function sellGem(address usr, uint256 gemAmt) external;\\n    function buyGem(address usr, uint256 gemAmt) external;\\n}\\n\"\r\n    },\r\n    \"lib/dss-interfaces/src/dss/GemJoinAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.12;\\n\\n// https://github.com/makerdao/dss/blob/master/src/join.sol\\ninterface GemJoinAbstract {\\n    function wards(address) external view returns (uint256);\\n    function rely(address) external;\\n    function deny(address) external;\\n    function vat() external view returns (address);\\n    function ilk() external view returns (bytes32);\\n    function gem() external view returns (address);\\n    function dec() external view returns (uint256);\\n    function live() external view returns (uint256);\\n    function cage() external;\\n    function join(address, uint256) external;\\n    function exit(address, uint256) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"clipper-mom/=lib/dss-exec-lib/lib/clipper-mom/src/\",\r\n      \"ds-auth/=lib/ds-token/lib/ds-auth/src/\",\r\n      \"ds-math/=lib/ds-math/src/\",\r\n      \"ds-note/=lib/ds-value/lib/ds-thing/lib/ds-note/src/\",\r\n      \"ds-pause/=lib/dss-gem-joins/lib/dss-deploy/lib/ds-pause/src/\",\r\n      \"ds-proxy/=lib/dss-exec-lib/lib/ds-proxy/src/\",\r\n      \"ds-stop/=lib/dss-exec-lib/lib/osm-mom/lib/osm/lib/ds-stop/src/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"ds-thing/=lib/ds-value/lib/ds-thing/src/\",\r\n      \"ds-token/=lib/ds-token/src/\",\r\n      \"ds-value/=lib/ds-value/src/\",\r\n      \"dss-auto-line/=lib/dss-exec-lib/lib/dss-auto-line/src/\",\r\n      \"dss-chain-log/=lib/rwa-toolkit/lib/dss-chain-log/src/\",\r\n      \"dss-deploy/=lib/dss-gem-joins/lib/dss-deploy/src/\",\r\n      \"dss-direct-deposit/=lib/dss-exec-lib/lib/dss-direct-deposit/src/\",\r\n      \"dss-exec-lib/=lib/dss-exec-lib/src/\",\r\n      \"dss-gem-joins/=lib/dss-gem-joins/src/\",\r\n      \"dss-interfaces/=lib/dss-interfaces/src/\",\r\n      \"dss-lerp/=lib/dss-exec-lib/lib/dss-lerp/src/\",\r\n      \"dss-psm/=lib/rwa-toolkit/lib/dss-psm/src/\",\r\n      \"dss/=lib/dss/src/\",\r\n      \"esm/=lib/dss-gem-joins/lib/dss-deploy/lib/esm/src/\",\r\n      \"flipper-mom/=lib/dss-exec-lib/lib/flipper-mom/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"forward-proxy/=lib/forward-proxy/src/\",\r\n      \"ilk-registry/=lib/rwa-toolkit/lib/ilk-registry/src/\",\r\n      \"median/=lib/dss-exec-lib/lib/median/src/\",\r\n      \"mkr-authority/=lib/dss-exec-lib/lib/mkr-authority/src/\",\r\n      \"osm-mom/=lib/dss-exec-lib/lib/osm-mom/src/\",\r\n      \"osm/=lib/dss-exec-lib/lib/osm-mom/lib/osm/src/\",\r\n      \"rwa-toolkit/=lib/rwa-toolkit/src/\",\r\n      \"univ2-lp-oracle/=lib/dss-exec-lib/lib/univ2-lp-oracle/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_psm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Hate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Mate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Push\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quitTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Quit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Yank\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract DaiAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"expectedDaiWad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"contract GemAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"hate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"mate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"may\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psm\",\"outputs\":[{\"internalType\":\"contract PsmAbstract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quitTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"requiredGemAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"to\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"yank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RwaSwapInputConduit2", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000008e870d67f660d95d5be530380d0ec0bd388289e1000000000000000000000000961ae24a1ceba861d1fdf723794f6024dc5485cf0000000000000000000000008bf8b5c58bb57ee9c97d0fea773eee042b10a787", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}