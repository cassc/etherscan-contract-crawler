{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/data/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/ManagerFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { PaymentStorage } from \\\"../storage/PaymentStorage.sol\\\";\\nimport { AccessControlStorage } from \\\"../storage/AccessControlStorage.sol\\\";\\nimport \\\"../libraries/Structs.sol\\\";\\n\\ncontract ManagerFacet {\\n\\n    error AddressIsZero();\\n    error InvalidAmount();\\n    error InvalidBaseFee();\\n    error InvalidFeeDiscount();\\n    error InvalidServiceID();\\n    error UnauthService();\\n    error ServiceTerminated();\\n    error InsufficientBalance();\\n\\n    event BaseFeeChanged(uint feeRatio);\\n    event FeeDiscountChanged(address user, uint discountRatio);\\n    event TokenRegisterChanged(address addr, bool enable);\\n    event TemplateAddressChanged(address addr);\\n    event WithdrawProtocolIncome(address indexed caller, address token, address to, uint amount);\\n    event TerminateService(bytes32 indexed id, address indexed caller, address buyer, address seller, address token, uint amount, uint remaining, uint fee);\\n\\n    function isRegisteredToken(address _token) external view returns (bool) {\\n        return PaymentStorage.layout().registeredToken[_token];\\n    }\\n\\n    function getTemplateAddress() external view returns (address) {\\n        return PaymentStorage.layout().template;\\n    }\\n\\n    function getBaseFee() external view returns (uint) {\\n        return PaymentStorage.layout().baseFee;\\n    }\\n\\n    function getProtocolIncome(address _token) external view returns (uint) {\\n        return PaymentStorage.layout().protocolIncome[_token];\\n    }\\n\\n    function registerToken(address _token) external {\\n        if (_token == address(0)) revert AddressIsZero();\\n        AccessControlStorage.enforceIsOwner();\\n        \\n        PaymentStorage.layout().registeredToken[_token] = true;\\n        emit TokenRegisterChanged(_token, true);\\n    }\\n\\n    function unregisterToken(address _token) external {\\n        if (_token == address(0)) revert AddressIsZero();\\n        AccessControlStorage.enforceIsOwner();\\n        \\n        PaymentStorage.layout().registeredToken[_token] = false;\\n        emit TokenRegisterChanged(_token, false);\\n    }\\n\\n    function setTemplateAddress(address _addr) external {\\n        if (_addr == address(0)) revert AddressIsZero();\\n        AccessControlStorage.enforceIsOwner();\\n\\n        PaymentStorage.layout().template = _addr;\\n        emit TemplateAddressChanged(_addr);\\n    }\\n\\n    function setBaseFee(uint _feeRatio) external {\\n        if (_feeRatio > 100000) revert InvalidBaseFee();\\n        AccessControlStorage.enforceIsRole(AccessControlStorage.MANAGER_ROLE);\\n\\n        PaymentStorage.layout().baseFee = _feeRatio;\\n        emit BaseFeeChanged(_feeRatio);\\n    }\\n\\n    function setUserFeeDiscount(address _user, uint _discount) external {\\n        if (_user == address(0)) revert AddressIsZero();\\n        if (_discount > 100) revert InvalidFeeDiscount();\\n        AccessControlStorage.enforceIsRole(AccessControlStorage.MANAGER_ROLE);\\n\\n        PaymentStorage.layout().userAccounts[_user].feeDiscount = _discount;\\n        emit FeeDiscountChanged(_user, _discount);\\n    }\\n\\n    function withdrawProtocolIncome(address _token, address _to, uint _amount) external {\\n        if (_token == address(0)) revert AddressIsZero();\\n        if (_to == address(0)) revert AddressIsZero();\\n        if (_amount == 0) revert InvalidAmount();\\n        AccessControlStorage.enforceIsOwner();\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        if (_amount > layout.protocolIncome[_token]) revert InsufficientBalance();\\n\\n        unchecked {\\n            layout.protocolIncome[_token] -= _amount;\\n        }\\n        IERC20(_token).transfer(_to, _amount);\\n\\n        emit WithdrawProtocolIncome(msg.sender, _token, _to, _amount);\\n    }\\n\\n    function terminateByBusiness(bytes32 _id, uint _amount) external {\\n        _terminate(_id, _amount, false);\\n    }\\n\\n    function terminateByManager(bytes32 _id, uint _amount) external {\\n        _terminate(_id, _amount, true);\\n    }\\n\\n    function _terminate(\\n        bytes32 _id,\\n        uint _amount,\\n        bool _force\\n    ) internal {\\n        if (_id == bytes32(0)) revert InvalidServiceID();\\n\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        Service storage service = layout.subscription[_id];\\n\\n        if (service.terminated) revert ServiceTerminated();\\n\\n        if (_force) {\\n            AccessControlStorage.enforceIsRole(AccessControlStorage.MANAGER_ROLE);\\n        } else {\\n            if (service.seller != msg.sender) revert UnauthService();\\n        }\\n\\n        // avoid mutating original value\\n        uint deposit = service.security;\\n        if (deposit < _amount) revert InsufficientBalance();\\n\\n        uint fee;\\n        uint remaining;\\n        address token = service.token;\\n        // Overflow not possible: the sum of all balances is capped by usdt totalSupply, and the sum is preserved by\\n        unchecked {\\n            if (_amount == 0) {\\n                layout.userAccounts[service.buyer].balances[token] += deposit;\\n                service.security = 0;\\n            } else {\\n                remaining = deposit - _amount;\\n                fee = PaymentStorage.calculateServiceFee(service.seller, _amount);\\n                layout.userAccounts[service.buyer].balances[token] += remaining;\\n                layout.userAccounts[service.seller].balances[token] += (_amount - fee);\\n                layout.protocolIncome[token] += fee;\\n                service.security = 0;\\n            }\\n        }\\n        service.terminated = true;\\n        \\n        emit TerminateService(_id, msg.sender, service.buyer, service.seller, token, _amount, remaining, fee);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// user account\\nstruct Account {\\n    uint feeDiscount;\\n    mapping(address => uint) balances;\\n}\\n\\nstruct Service {\\n    bool terminated;\\n    address token;\\n    address buyer;\\n    address seller;\\n    uint security;\\n    uint lastConsume;\\n}\"\r\n    },\r\n    \"contracts/storage/AccessControlStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error NotRoleAuthorizedError(bytes32, address user);\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 internal constant MANAGER_ROLE = keccak256('contracts.role.0xManager');\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('contracts.storage.AccessControl');\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    function setContractOwner(address account) internal {\\n        layout().roles[DEFAULT_ADMIN_ROLE].members.add(account);\\n        emit RoleGranted(DEFAULT_ADMIN_ROLE, account, msg.sender);\\n    }\\n\\n    function enforceIsOwner() internal view {\\n        if (!layout().roles[DEFAULT_ADMIN_ROLE].members.contains(msg.sender)) \\n            revert NotRoleAuthorizedError(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function enforceIsRole(bytes32 role) internal view {\\n        if (!layout().roles[role].members.contains(msg.sender)) \\n            revert NotRoleAuthorizedError(role, msg.sender);\\n    }\\n\\n    function enforceIsRole(bytes32 role, address user) internal view {\\n        if (!layout().roles[role].members.contains(user)) \\n            revert NotRoleAuthorizedError(role, user);\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/storage/PaymentStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"../libraries/Structs.sol\\\";\\n\\nlibrary PaymentStorage {\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('contracts.storage.Payment');\\n\\n    struct Layout {\\n        address template;\\n        uint baseFee;\\n        mapping(address => bool) registeredToken;\\n        mapping(address => uint) protocolIncome;\\n        mapping(address => Account) userAccounts;\\n        mapping(bytes32 => Service) subscription;\\n\\n        uint[60] _gaps;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function calculateServiceFee(address _user, uint _amount) internal view returns (uint) {\\n        Layout storage data = layout();\\n        uint baseFee = data.baseFee;\\n        if (baseFee == 0) return 0;\\n        unchecked {\\n            uint discount = data.userAccounts[_user].feeDiscount;\\n\\n            if (discount == 0) {\\n                return _amount * baseFee / 100_000;\\n            }\\n\\n            return _amount * baseFee * discount / 10_000_000;\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBaseFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeeDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidServiceID\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotRoleAuthorizedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ServiceTerminated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthService\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"}],\"name\":\"BaseFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountRatio\",\"type\":\"uint256\"}],\"name\":\"FeeDiscountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TemplateAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TerminateService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"TokenRegisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawProtocolIncome\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getBaseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getProtocolIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTemplateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isRegisteredToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRatio\",\"type\":\"uint256\"}],\"name\":\"setBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTemplateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_discount\",\"type\":\"uint256\"}],\"name\":\"setUserFeeDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"terminateByBusiness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"terminateByManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"unregisterToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawProtocolIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManagerFacet", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}