{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/morpho-blue-oracles/lib/morpho-blue/src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title IOracle\\r\\n/// @author Morpho Labs\\r\\n/// @custom:contact security@morpho.org\\r\\n/// @notice Interface that oracles used by Morpho must implement.\\r\\n/// @dev It is the user's responsibility to select markets with safe oracles.\\r\\ninterface IOracle {\\r\\n    /// @notice Returns the price of 1 asset of collateral token quoted in 1 asset of loan token, scaled by 1e36.\\r\\n    /// @dev It corresponds to the price of 10**(collateral token decimals) assets of collateral token quoted in\\r\\n    /// 10**(loan token decimals) assets of loan token with `36 + loan token decimals - collateral token decimals`\\r\\n    /// decimals of precision.\\r\\n    function price() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/src/ChainlinkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {IChainlinkOracle} from \\\"./interfaces/IChainlinkOracle.sol\\\";\\r\\nimport {IOracle} from \\\"../lib/morpho-blue/src/interfaces/IOracle.sol\\\";\\r\\n\\r\\nimport {AggregatorV3Interface, ChainlinkDataFeedLib} from \\\"./libraries/ChainlinkDataFeedLib.sol\\\";\\r\\nimport {IERC4626, VaultLib} from \\\"./libraries/VaultLib.sol\\\";\\r\\nimport {ErrorsLib} from \\\"./libraries/ErrorsLib.sol\\\";\\r\\nimport {Math} from \\\"../lib/openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\n/// @title ChainlinkOracle\\r\\n/// @author Morpho Labs\\r\\n/// @custom:contact security@morpho.org\\r\\n/// @notice Morpho Blue oracle using Chainlink-compliant feeds.\\r\\ncontract ChainlinkOracle is IChainlinkOracle {\\r\\n    using Math for uint256;\\r\\n    using VaultLib for IERC4626;\\r\\n    using ChainlinkDataFeedLib for AggregatorV3Interface;\\r\\n\\r\\n    /* IMMUTABLES */\\r\\n\\r\\n    /// @inheritdoc IChainlinkOracle\\r\\n    IERC4626 public immutable VAULT;\\r\\n\\r\\n    /// @inheritdoc IChainlinkOracle\\r\\n    uint256 public immutable VAULT_CONVERSION_SAMPLE;\\r\\n\\r\\n    /// @inheritdoc IChainlinkOracle\\r\\n    AggregatorV3Interface public immutable BASE_FEED_1;\\r\\n\\r\\n    /// @inheritdoc IChainlinkOracle\\r\\n    AggregatorV3Interface public immutable BASE_FEED_2;\\r\\n\\r\\n    /// @inheritdoc IChainlinkOracle\\r\\n    AggregatorV3Interface public immutable QUOTE_FEED_1;\\r\\n\\r\\n    /// @inheritdoc IChainlinkOracle\\r\\n    AggregatorV3Interface public immutable QUOTE_FEED_2;\\r\\n\\r\\n    /// @inheritdoc IChainlinkOracle\\r\\n    uint256 public immutable SCALE_FACTOR;\\r\\n\\r\\n    /* CONSTRUCTOR */\\r\\n\\r\\n    /// @dev Here is the list of assumptions that guarantees the oracle behaves as expected:\\r\\n    /// - Feeds are either Chainlink-compliant or the address zero.\\r\\n    /// - Feeds have the same behavioral assumptions as Chainlink's.\\r\\n    /// - Feeds are set in the correct order.\\r\\n    /// - Decimals passed as argument are correct.\\r\\n    /// - The vault's sample shares quoted as assets and the base feed prices don't overflow when multiplied.\\r\\n    /// - The quote feed prices don't overflow when multiplied.\\r\\n    /// - The vault, if set, is ERC4626-compliant.\\r\\n    /// @param vault Vault. Pass address zero to omit this parameter.\\r\\n    /// @param baseFeed1 First base feed. Pass address zero if the price = 1.\\r\\n    /// @param baseFeed2 Second base feed. Pass address zero if the price = 1.\\r\\n    /// @param quoteFeed1 First quote feed. Pass address zero if the price = 1.\\r\\n    /// @param quoteFeed2 Second quote feed. Pass address zero if the price = 1.\\r\\n    /// @param vaultConversionSample The sample amount of vault shares used to convert to the underlying asset.\\r\\n    /// Pass 1 if the oracle does not use a vault. Should be chosen such that converting `vaultConversionSample` to\\r\\n    /// assets has enough precision.\\r\\n    /// @param baseTokenDecimals Base token decimals.\\r\\n    /// @param quoteTokenDecimals Quote token decimals.\\r\\n    constructor(\\r\\n        IERC4626 vault,\\r\\n        AggregatorV3Interface baseFeed1,\\r\\n        AggregatorV3Interface baseFeed2,\\r\\n        AggregatorV3Interface quoteFeed1,\\r\\n        AggregatorV3Interface quoteFeed2,\\r\\n        uint256 vaultConversionSample,\\r\\n        uint256 baseTokenDecimals,\\r\\n        uint256 quoteTokenDecimals\\r\\n    ) {\\r\\n        // The ERC4626 vault parameter is used to price `VAULT_CONVERSION_SAMPLE` of its shares, so it requires dividing\\r\\n        // by that number, hence the division by `VAULT_CONVERSION_SAMPLE` in the `SCALE_FACTOR` definition.\\r\\n        // Verify that vault = address(0) => vaultConversionSample = 1.\\r\\n        require(\\r\\n            address(vault) != address(0) || vaultConversionSample == 1, ErrorsLib.VAULT_CONVERSION_SAMPLE_IS_NOT_ONE\\r\\n        );\\r\\n        require(vaultConversionSample != 0, ErrorsLib.VAULT_CONVERSION_SAMPLE_IS_ZERO);\\r\\n\\r\\n        VAULT = vault;\\r\\n        VAULT_CONVERSION_SAMPLE = vaultConversionSample;\\r\\n        BASE_FEED_1 = baseFeed1;\\r\\n        BASE_FEED_2 = baseFeed2;\\r\\n        QUOTE_FEED_1 = quoteFeed1;\\r\\n        QUOTE_FEED_2 = quoteFeed2;\\r\\n\\r\\n        // In the following comment, we explain the general case (where we assume that no feed is the address zero)\\r\\n        // how to scale the output price as Morpho Blue expects, given the input feed prices.\\r\\n        // Similar explanations would hold in the case where some of the feeds are the address zero.\\r\\n\\r\\n        // Let B1, B2, Q1, Q2, C be 5 assets, each respectively having dB1, dB2, dQ1, dQ2, dC decimals.\\r\\n        // Let pB1 and pB2 be the base prices, and pQ1 and pQ2 the quote prices, so that:\\r\\n        // - pB1 is the quantity of 1e(dB2) assets B2 that can be exchanged for 1e(dB1) assets B1.\\r\\n        // - pB2 is the quantity of 1e(dC) assets C that can be exchanged for 1e(dB2) assets B2.\\r\\n        // - pQ1 is the quantity of 1e(dQ2) assets Q2 that can be exchanged for 1e(dQ1) assets Q1.\\r\\n        // - pQ2 is the quantity of 1e(dC) assets C that can be exchanged for 1e(dQ2) assets B2.\\r\\n\\r\\n        // Morpho Blue expects `price()` to be the quantity of 1 asset Q1 that can be exchanged for 1 asset B1,\\r\\n        // scaled by 1e36:\\r\\n        // 1e36 * (pB1 * 1e(dB2 - dB1)) * (pB2 * 1e(dC - dB2)) / ((pQ1 * 1e(dQ2 - dQ1)) * (pQ2 * 1e(dC - dQ2)))\\r\\n        // = 1e36 * (pB1 * 1e(-dB1) * pB2) / (pQ1 * 1e(-dQ1) * pQ2)\\r\\n\\r\\n        // Let fpB1, fpB2, fpQ1, fpQ2 be the feed precision of the respective prices pB1, pB2, pQ1, pQ2.\\r\\n        // Chainlink feeds return pB1 * 1e(fpB1), pB2 * 1e(fpB2), pQ1 * 1e(fpQ1) and pQ2 * 1e(fpQ2).\\r\\n\\r\\n        // Based on the implementation of `price()` below, the value of `SCALE_FACTOR` should thus satisfy:\\r\\n        // (pB1 * 1e(fpB1)) * (pB2 * 1e(fpB2)) * SCALE_FACTOR / ((pQ1 * 1e(fpQ1)) * (pQ2 * 1e(fpQ2)))\\r\\n        // = 1e36 * (pB1 * 1e(-dB1) * pB2) / (pQ1 * 1e(-dQ1) * pQ2)\\r\\n\\r\\n        // So SCALE_FACTOR = 1e36 * 1e(-dB1) * 1e(dQ1) * 1e(-fpB1) * 1e(-fpB2) * 1e(fpQ1) * 1e(fpQ2)\\r\\n        //                 = 1e(36 + dQ1 + fpQ1 + fpQ2 - dB1 - fpB1 - fpB2)\\r\\n        SCALE_FACTOR = 10\\r\\n            ** (\\r\\n                36 + quoteTokenDecimals + quoteFeed1.getDecimals() + quoteFeed2.getDecimals() - baseTokenDecimals\\r\\n                    - baseFeed1.getDecimals() - baseFeed2.getDecimals()\\r\\n            ) / vaultConversionSample;\\r\\n    }\\r\\n\\r\\n    /* PRICE */\\r\\n\\r\\n    /// @inheritdoc IOracle\\r\\n    function price() external view returns (uint256) {\\r\\n        return SCALE_FACTOR.mulDiv(\\r\\n            VAULT.getAssets(VAULT_CONVERSION_SAMPLE) * BASE_FEED_1.getPrice() * BASE_FEED_2.getPrice(),\\r\\n            QUOTE_FEED_1.getPrice() * QUOTE_FEED_2.getPrice()\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/src/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @dev From\\r\\n/// https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\r\\ninterface AggregatorV3Interface {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    function getRoundData(uint80 _roundId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n\\r\\n    function latestRoundData()\\r\\n        external\\r\\n        view\\r\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/src/interfaces/IChainlinkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport {IERC4626} from \\\"./IERC4626.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"./AggregatorV3Interface.sol\\\";\\r\\nimport {IOracle} from \\\"../../lib/morpho-blue/src/interfaces/IOracle.sol\\\";\\r\\n\\r\\n/// @title IChainlinkOracle\\r\\n/// @author Morpho Labs\\r\\n/// @custom:contact security@morpho.org\\r\\n/// @notice Interface of ChainlinkOracle.\\r\\ninterface IChainlinkOracle is IOracle {\\r\\n    /// @notice Returns the address of the ERC4626 vault.\\r\\n    function VAULT() external view returns (IERC4626);\\r\\n\\r\\n    /// @notice Returns the vault conversion sample.\\r\\n    function VAULT_CONVERSION_SAMPLE() external view returns (uint256);\\r\\n\\r\\n    /// @notice Returns the address of the first Chainlink base feed.\\r\\n    function BASE_FEED_1() external view returns (AggregatorV3Interface);\\r\\n\\r\\n    /// @notice Returns the address of the second Chainlink base feed.\\r\\n    function BASE_FEED_2() external view returns (AggregatorV3Interface);\\r\\n\\r\\n    /// @notice Returns the address of the first Chainlink quote feed.\\r\\n    function QUOTE_FEED_1() external view returns (AggregatorV3Interface);\\r\\n\\r\\n    /// @notice Returns the address of the second Chainlink quote feed.\\r\\n    function QUOTE_FEED_2() external view returns (AggregatorV3Interface);\\r\\n\\r\\n    /// @notice Returns the price scale factor, calculated at contract creation.\\r\\n    function SCALE_FACTOR() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/src/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IERC4626 {\\r\\n    function convertToAssets(uint256) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/src/libraries/ChainlinkDataFeedLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {AggregatorV3Interface} from \\\"../interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nimport {ErrorsLib} from \\\"./ErrorsLib.sol\\\";\\r\\n\\r\\n/// @title ChainlinkDataFeedLib\\r\\n/// @author Morpho Labs\\r\\n/// @custom:contact security@morpho.org\\r\\n/// @notice Library exposing functions to interact with a Chainlink-compliant feed.\\r\\nlibrary ChainlinkDataFeedLib {\\r\\n    /// @dev Performs safety checks and returns the latest price of a `feed`.\\r\\n    /// @dev When `feed` is the address zero, returns 1.\\r\\n    /// @dev Notes on safety checks:\\r\\n    /// - L2s are not supported.\\r\\n    /// - Staleness is not checked because it's assumed that the Chainlink feed keeps its promises on this.\\r\\n    /// - The price is not checked to be in the min/max bounds because it's assumed that the Chainlink feed keeps its\\r\\n    /// promises on this.\\r\\n    function getPrice(AggregatorV3Interface feed) internal view returns (uint256) {\\r\\n        if (address(feed) == address(0)) return 1;\\r\\n\\r\\n        (, int256 answer,,,) = feed.latestRoundData();\\r\\n        require(answer >= 0, ErrorsLib.NEGATIVE_ANSWER);\\r\\n\\r\\n        return uint256(answer);\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the number of decimals of a `feed`.\\r\\n    /// @dev When `feed` is the address zero, returns 0.\\r\\n    function getDecimals(AggregatorV3Interface feed) internal view returns (uint256) {\\r\\n        if (address(feed) == address(0)) return 0;\\r\\n\\r\\n        return feed.decimals();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/src/libraries/ErrorsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title ErrorsLib\\r\\n/// @author Morpho Labs\\r\\n/// @custom:contact security@morpho.org\\r\\n/// @notice Library exposing error messages.\\r\\nlibrary ErrorsLib {\\r\\n    /// @notice Thrown when the answer returned by a Chainlink feed is negative.\\r\\n    string constant NEGATIVE_ANSWER = \\\"negative answer\\\";\\r\\n\\r\\n    /// @notice Thrown when the vault conversion sample is 0.\\r\\n    string constant VAULT_CONVERSION_SAMPLE_IS_ZERO = \\\"vault conversion sample is zero\\\";\\r\\n\\r\\n    /// @notice Thrown when the vault conversion sample is not 1 while vault = address(0).\\r\\n    string constant VAULT_CONVERSION_SAMPLE_IS_NOT_ONE = \\\"vault conversion sample is not one\\\";\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/morpho-blue-oracles/src/libraries/VaultLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC4626} from \\\"../interfaces/IERC4626.sol\\\";\\r\\n\\r\\n/// @title VaultLib\\r\\n/// @author Morpho Labs\\r\\n/// @custom:contact security@morpho.org\\r\\n/// @notice Library exposing functions to price shares of an ERC4626 vault.\\r\\nlibrary VaultLib {\\r\\n    /// @dev Converts `shares` into the corresponding assets on the `vault`.\\r\\n    /// @dev When `vault` is the address zero, returns 1.\\r\\n    function getAssets(IERC4626 vault, uint256 shares) internal view returns (uint256) {\\r\\n        if (address(vault) == address(0)) return 1;\\r\\n\\r\\n        return vault.convertToAssets(shares);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@morpho-blue-oracles/=lib/morpho-blue-oracles/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@uniswap/v3-core/=lib/v3-core/\",\r\n      \"@uniswap/v3-periphery/=lib/v3-periphery/\",\r\n      \"ds-auth/=lib/dss-psm/lib/dss/lib/ds-token/lib/ds-auth/src/\",\r\n      \"ds-math/=lib/dss-psm/lib/dss/lib/ds-token/lib/ds-math/src/\",\r\n      \"ds-note/=lib/dss-psm/lib/dss/lib/ds-value/lib/ds-thing/lib/ds-note/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"ds-thing/=lib/dss-psm/lib/dss/lib/ds-value/lib/ds-thing/src/\",\r\n      \"ds-token/=lib/dss-psm/lib/dss/lib/ds-token/src/\",\r\n      \"ds-value/=lib/dss-psm/lib/dss/lib/ds-value/src/\",\r\n      \"dss-interfaces/=lib/dss-psm/lib/dss-interfaces/src/\",\r\n      \"dss-psm/=lib/dss-psm/src/\",\r\n      \"dss/=lib/dss-psm/lib/dss/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"morpho-blue-oracles/=lib/morpho-blue-oracles/src/\",\r\n      \"morpho-blue/=lib/morpho-blue/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"v3-core/=lib/v3-core/\",\r\n      \"v3-periphery/=lib/v3-periphery/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"baseFeed1\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"baseFeed2\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"quoteFeed1\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"quoteFeed2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultConversionSample\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenDecimals\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASE_FEED_1\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_FEED_2\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE_FEED_1\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE_FEED_2\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_CONVERSION_SAMPLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ChainlinkOracle", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004f67e4d9bd67efa28236013288737d39aef48e790000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000006", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}