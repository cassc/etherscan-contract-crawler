{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"brcbridge.sol\": {\r\n      \"content\": \"// website  : https://brcbridge.app\\n// dapp     : https://app.brcbridge.app\\n// telegram : https://t.me/BRCBridge_App\\n// x        : https://twitter.com/BRCBridge_App\\n// docs     : https://docs.brcbridge.app\\n\\n\\n// SPDX-License-Identifier: MIT\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\npragma solidity ^0.8.21;\\n\\ninterface DividendPayingTokenInterface {\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\n    ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\n    function withdrawDividend() external;\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(\\n        address _owner\\n    ) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(\\n        address _owner\\n    ) external view returns (uint256);\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(\\n        address _owner\\n    ) external view returns (uint256);\\n\\n    /// @dev This event MUST emit when ether is distributed to token holders.\\n    /// @param from The address which sends ether to this contract.\\n    /// @param weiAmount The amount of distributed ether in wei.\\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws ether from this contract.\\n    /// @param weiAmount The amount of withdrawn ether in wei.\\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\\n}\\n\\npragma solidity ^0.8.6;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Converts to absolute value, and fails on overflow.\\n     */\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\n        int256 b = int256(a);\\n        require(b >= 0);\\n        return b;\\n    }\\n}\\n\\ninterface IPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function token0() external view returns (address);\\n}\\n\\ninterface IFactory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n}\\n\\ninterface IUniswapRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ncontract DividendPayingToken is ERC20 {\\n    using SafeMath for uint256;\\n    using SafeMathUint for uint256;\\n    using SafeMathInt for int256;\\n\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n    // For more discussion about choosing the value of `magnitude`,\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n    uint256 internal constant magnitude = 2 ** 128;\\n\\n    uint256 internal magnifiedDividendPerShare;\\n\\n    // About dividendCorrection:\\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n    //   `dividendOf(_user)` should not be changed,\\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n    mapping(address => int256) internal magnifiedDividendCorrections;\\n    mapping(address => uint256) internal withdrawnDividends;\\n\\n    uint256 public totalDividendsDistributed;\\n\\n    event DividendsDistributed(address user, uint256 amount);\\n    event DividendWithdrawn(address user, uint256 amount);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {}\\n\\n    /// @dev Distributes dividends whenever ether is paid to this contract.\\n    receive() external payable {\\n        distributeDividends();\\n    }\\n\\n    /// @notice Distributes ether to token holders as dividends.\\n    /// @dev It reverts if the total supply of tokens is 0.\\n    /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\n    /// About undistributed ether:\\n    ///   In each distribution, there is a small amount of ether not distributed,\\n    ///     the magnified amount of which is\\n    ///     `(msg.value * magnitude) % totalSupply()`.\\n    ///   With a well-chosen `magnitude`, the amount of undistributed ether\\n    ///     (de-magnified) in a distribution can be less than 1 wei.\\n    ///   We can actually keep track of the undistributed ether in a distribution\\n    ///     and try to distribute it in the next distribution,\\n    ///     but keeping track of such data on-chain costs much more than\\n    ///     the saved ether, so we don't do that.\\n    function distributeDividends() public payable virtual {\\n        require(totalSupply() > 0);\\n\\n        if (msg.value > 0) {\\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n                (msg.value).mul(magnitude) / totalSupply()\\n            );\\n            emit DividendsDistributed(msg.sender, msg.value);\\n\\n            totalDividendsDistributed = totalDividendsDistributed.add(\\n                msg.value\\n            );\\n        }\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function withdrawDividend() public virtual {\\n        _withdrawDividendOfUser(payable(msg.sender));\\n    }\\n\\n    /// @notice Withdraws the ether distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n    function _withdrawDividendOfUser(\\n        address payable user\\n    ) internal returns (uint256) {\\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n        if (_withdrawableDividend > 0) {\\n            withdrawnDividends[user] = withdrawnDividends[user].add(\\n                _withdrawableDividend\\n            );\\n            emit DividendWithdrawn(user, _withdrawableDividend);\\n            (bool success, ) = user.call{\\n                value: _withdrawableDividend,\\n                gas: 3000\\n            }(\\\"\\\");\\n\\n            if (!success) {\\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\\n                    _withdrawableDividend\\n                );\\n                return 0;\\n            }\\n\\n            return _withdrawableDividend;\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(address _owner) public view returns (uint256) {\\n        return withdrawableDividendOf(_owner);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function withdrawableDividendOf(\\n        address _owner\\n    ) public view returns (uint256) {\\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(address _owner) public view returns (uint256) {\\n        return withdrawnDividends[_owner];\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(\\n        address _owner\\n    ) public view returns (uint256) {\\n        return\\n            magnifiedDividendPerShare\\n                .mul(balanceOf(_owner))\\n                .toInt256Safe()\\n                .add(magnifiedDividendCorrections[_owner])\\n                .toUint256Safe() / magnitude;\\n    }\\n\\n    /// @dev Internal function that transfer tokens from one address to another.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param from The address to transfer from.\\n    /// @param to The address to transfer to.\\n    /// @param value The amount to be transferred.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override {\\n        require(false);\\n\\n        int256 _magCorrection = magnifiedDividendPerShare\\n            .mul(value)\\n            .toInt256Safe();\\n        magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from]\\n            .add(_magCorrection);\\n        magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\\n            _magCorrection\\n        );\\n    }\\n\\n    /// @dev Internal function that mints tokens to an account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account that will receive the created tokens.\\n    /// @param value The amount that will be created.\\n    function _mint(address account, uint256 value) internal override {\\n        super._mint(account, value);\\n\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n            account\\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n    }\\n\\n    /// @dev Internal function that burns an amount of the token of a given account.\\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n    /// @param account The account whose tokens will be burnt.\\n    /// @param value The amount that will be burnt.\\n    function _burn(address account, uint256 value) internal override {\\n        super._burn(account, value);\\n\\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n            account\\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n    }\\n\\n    function _setBalance(address account, uint256 newBalance) internal {\\n        uint256 currentBalance = balanceOf(account);\\n\\n        if (newBalance > currentBalance) {\\n            uint256 mintAmount = newBalance.sub(currentBalance);\\n            _mint(account, mintAmount);\\n        } else if (newBalance < currentBalance) {\\n            uint256 burnAmount = currentBalance.sub(newBalance);\\n            _burn(account, burnAmount);\\n        }\\n    }\\n}\\n\\ncontract Dividends is DividendPayingToken, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    IERC20 token;\\n\\n    mapping(address => bool) public excludedFromDividends;\\n\\n    uint256 public closeTime;\\n\\n    event ExcludeFromDividends(address indexed account);\\n\\n    event Claim(\\n        address indexed account,\\n        uint256 amount,\\n        bool indexed automatic\\n    );\\n\\n    constructor() DividendPayingToken(\\\"PTP_Dividends\\\", \\\"PTP_Dividends\\\") {\\n        token = IERC20(msg.sender);\\n    }\\n\\n    bool noWarning;\\n\\n    function _transfer(address, address, uint256) internal override {\\n        require(false, \\\"No transfers allowed\\\");\\n        noWarning = noWarning;\\n    }\\n\\n    function withdrawDividend() public override {\\n        require(\\n            false,\\n            \\\"withdrawDividend disabled. Use the 'claim' function on the main token contract.\\\"\\n        );\\n        noWarning = noWarning;\\n    }\\n\\n    function claim(address account) external onlyOwner {\\n        require(closeTime == 0, \\\"closed\\\");\\n        _withdrawDividendOfUser(payable(account));\\n    }\\n\\n    function excludeFromDividends(address account) external onlyOwner {\\n        excludedFromDividends[account] = true;\\n\\n        _setBalance(account, 0);\\n\\n        emit ExcludeFromDividends(account);\\n    }\\n\\n    function getAccount(\\n        address _account\\n    )\\n        public\\n        view\\n        returns (\\n            address account,\\n            uint256 withdrawableDividends,\\n            uint256 totalDividends\\n        )\\n    {\\n        account = _account;\\n        withdrawableDividends = withdrawableDividendOf(account);\\n        totalDividends = accumulativeDividendOf(account);\\n    }\\n\\n    function updateBalance(address payable account) external {\\n        if (excludedFromDividends[account]) {\\n            return;\\n        }\\n\\n        _setBalance(account, token.balanceOf(account));\\n    }\\n\\n    //If the dividend contract needs to be updated, we can close\\n    //this one, and let people claim for a month\\n    //After that is over, we can take the remaining funds and\\n    //use for the project\\n    function close() external onlyOwner {\\n        require(closeTime == 0, \\\"Contract was already closed.\\\");\\n        closeTime = block.timestamp;\\n    }\\n\\n    //Only allows funds to be taken if contract has been closed for a month\\n    function collect() external onlyOwner {\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n}\\n\\ncontract BRBG is Ownable, ERC20 {\\n    uint256 public maxWallet;\\n    address public uniswapV2Pair;\\n    IUniswapRouter immutable router =\\n        IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    Dividends public dividends;\\n\\n    uint256 SUPPLY = 1_000_000_000 * 10 ** 18;\\n\\n    uint256 totalFee = 5;\\n\\n    bool private inSwap = false;\\n    address public marketingWallet;\\n\\n    uint256 public openTradingBlock;\\n\\n    mapping(address => uint256) public receiveBlock;\\n\\n    uint256 public swapAt = SUPPLY / 1000; //0.1%\\n\\n    constructor() ERC20(\\\"BRC20 Bridge\\\", \\\"BRBG\\\") {\\n        _mint(msg.sender, SUPPLY);\\n\\n        maxWallet = SUPPLY;\\n\\n        marketingWallet = msg.sender;\\n\\n        dividends = new Dividends();\\n\\n        uniswapV2Pair = IFactory(router.factory()).createPair(\\n            address(this),\\n            router.WETH()\\n        );\\n\\n        dividends.excludeFromDividends(address(router));\\n        dividends.excludeFromDividends(uniswapV2Pair);\\n\\n        dividends.excludeFromDividends(address(0));\\n        dividends.excludeFromDividends(address(dividends));\\n        dividends.excludeFromDividends(address(this));\\n        dividends.excludeFromDividends(owner());\\n    }\\n\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Checks if the given address is a contract.\\n     * @param account The address to check.\\n     * @return True if the address is a contract, false otherwise.\\n     */\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Updates the dividends contract address.\\n     * Can only be called by the contract owner.\\n     * @param _dividends The address of the new dividends contract.\\n     */\\n    function updateDividends(address _dividends) external onlyOwner {\\n        // Cast the _dividends address to PTPDividends contract\\n        dividends = Dividends(payable(_dividends));\\n\\n        // Exclude certain addresses from receiving dividends\\n        dividends.excludeFromDividends(address(0)); // Exclude address(0) (burn address)\\n        dividends.excludeFromDividends(address(dividends)); // Exclude the dividends contract address\\n        dividends.excludeFromDividends(address(this)); // Exclude the current contract address\\n        dividends.excludeFromDividends(owner()); // Exclude the contract owner address\\n        dividends.excludeFromDividends(uniswapV2Pair); // Exclude the Uniswap V2 pair address\\n        dividends.excludeFromDividends(address(router)); // Exclude the router contract address\\n    }\\n\\n    /**\\n     * @dev Updates the maximum holding percentage.\\n     * @param percent The new maximum holding percentage.\\n     * Requirements:\\n     * - `percent` must be between 1 and 100 (inclusive).\\n     */\\n    function updateMaxHoldingPercent(uint256 percent) public onlyOwner {\\n        require(percent >= 1 && percent <= 100, \\\"invalid percent\\\");\\n        maxWallet = (SUPPLY * percent) / 100;\\n    }\\n\\n    /**\\n     * @dev Updates the value of `swapAt` with the given `value`.\\n     *\\n     * Requirements:\\n     * - Only the owner of the contract can call this function.\\n     * - The `value` must be less than or equal to `SUPPLY / 50`.\\n     *\\n     * @param value The new value of `swapAt`.\\n     */\\n    function updateSwapAt(uint256 value) external onlyOwner {\\n        require(\\n            value <= SUPPLY / 50,\\n            \\\"Value must be less than or equal to SUPPLY / 50\\\"\\n        );\\n        swapAt = value;\\n    }\\n\\n    /**\\n     * @dev Retrieves the withdrawable and total dividends for the specified account.\\n     * @param account The address of the account to retrieve dividends for.\\n     * @return withdrawableDividends The amount of dividends that can be withdrawn.\\n     * @return totalDividends The total amount of dividends earned by the account.\\n     */\\n    function stats(\\n        address account\\n    )\\n        external\\n        view\\n        returns (uint256 withdrawableDividends, uint256 totalDividends)\\n    {\\n        // Call the `getAccount` function from the `dividends` contract and assign the return values to the variables.\\n        (, withdrawableDividends, totalDividends) = dividends.getAccount(\\n            account\\n        );\\n    }\\n\\n    // This function allows the caller to claim their dividends.\\n    function claim() external {\\n        // Call the claim function of the dividends contract and pass the caller's address.\\n        dividends.claim(msg.sender);\\n    }\\n\\n    function startTrading() external onlyOwner {\\n        require(openTradingBlock == 0, \\\"already started\\\");\\n        openTradingBlock = block.number;\\n        updateMaxHoldingPercent(1);\\n    }\\n\\n    /**\\n     * @dev Internal transfer function.\\n     * @param from The address to transfer tokens from.\\n     * @param to The address to transfer tokens to.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        // Check if uniswapV2Pair is not set\\n        if (uniswapV2Pair == address(0)) {\\n            require(\\n                from == address(this) ||\\n                    from == address(0) ||\\n                    from == owner() ||\\n                    to == owner(),\\n                \\\"Not started\\\"\\n            );\\n            super._transfer(from, to, amount);\\n            return;\\n        }\\n\\n        if (from != owner()) {\\n            require(openTradingBlock > 0, \\\"trading not started\\\");\\n        }\\n\\n        // Check if transferring from uniswapV2Pair and the recipient is not a contract address or the owner\\n        if (\\n            from == uniswapV2Pair &&\\n            to != address(this) &&\\n            to != owner() &&\\n            to != address(router)\\n        ) {\\n            require(super.balanceOf(to) + amount <= maxWallet, \\\"max wallet\\\");\\n        }\\n\\n        // Calculate the amount to swap\\n        uint256 swapAmount = balanceOf(address(this));\\n\\n        if (swapAmount > swapAt) {\\n            swapAmount = swapAt;\\n        }\\n\\n        // Check if it's time to swap and not in the middle of a swap and not transferring from uniswapV2Pair\\n        if (\\n            swapAt > 0 &&\\n            swapAmount == swapAt &&\\n            !inSwap &&\\n            from != uniswapV2Pair\\n        ) {\\n            // Start the swap\\n            inSwap = true;\\n\\n            // Swap tokens for ETH\\n            swapTokensForEth(swapAmount);\\n\\n            // Get the ETH balance of the contract\\n            uint256 balance = address(this).balance;\\n\\n            // Withdraw the ETH balance\\n            if (balance > 0) {\\n                withdraw(balance);\\n            }\\n\\n            // End the swap\\n            inSwap = false;\\n        }\\n\\n        // Calculate the fee\\n        uint256 fee;\\n\\n        // Check if it's within a certain block range and transferring from uniswapV2Pair\\n        if (block.number <= openTradingBlock + 4 && from == uniswapV2Pair) {\\n            require(!isContract(to));\\n            fee = 30;\\n        } else if (totalFee > 0) {\\n            fee = totalFee;\\n        }\\n\\n        // Apply the fee if applicable\\n        if (\\n            fee > 0 &&\\n            from != address(this) &&\\n            from != owner() &&\\n            from != address(router)\\n        ) {\\n            uint256 feeTokens = (amount * fee) / 100;\\n            amount -= feeTokens;\\n\\n            super._transfer(from, address(this), feeTokens);\\n        }\\n\\n        // Transfer the tokens\\n        super._transfer(from, to, amount);\\n\\n        // Update the dividend balances\\n        dividends.updateBalance(payable(from));\\n        dividends.updateBalance(payable(to));\\n    }\\n\\n    /**\\n     * @dev Swaps tokens for ETH using the Uniswap router.\\n     * @param tokenAmount The amount of tokens to swap.\\n     */\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // Define the path for the swap\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        // Swap tokens for ETH\\n        // Using `swapExactTokensForETHSupportingFeeOnTransferTokens` for tokens that have a fee on transfer\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Sends funds to the specified user.\\n     * @param user The address of the user to send funds to.\\n     * @param value The amount of funds to send.\\n     */\\n    function sendFunds(address user, uint256 value) private {\\n        // Check if the value is greater than 0\\n        if (value > 0) {\\n            // Send the funds to the user\\n            (bool success, ) = user.call{value: value}(\\\"\\\");\\n            success; // Ignoring the success result for now\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraws the specified amount.\\n     * @param amount The amount to withdraw.\\n     */\\n    function withdraw(uint256 amount) private {\\n        // Calculate the amount to send to the marketing wallet (20%)\\n        uint256 toMarketing = amount / 5;\\n\\n        // Calculate the amount to send to the dividends wallet (80%)\\n        uint256 toDividends = amount - toMarketing;\\n\\n        // Send funds to the marketing wallet\\n        sendFunds(marketingWallet, toMarketing);\\n\\n        // Send funds to the dividends wallet\\n        sendFunds(address(dividends), toDividends);\\n    }\\n\\n    /**\\n     * @dev If the dividend contract needs to be updated, we can close\\n     * this one, and let people claim for a month\\n     * After that is over, we can take the remaining funds and\\n     * use for the project\\n     */\\n    function closeDistribution() external onlyOwner {\\n        // Call the close function of the dividends contract\\n        dividends.close();\\n    }\\n\\n    // This function allows the owner of the contract to collect funds\\n    // It can only be called if the contract has been closed for a month\\n    function collect() external onlyOwner {\\n        // Call the collect function of the dividends contract\\n        dividends.collect();\\n    }\\n\\n    /**\\n     * @dev Sets the marketing wallet address.\\n     * @param _marketingWallet The new marketing wallet address.\\n     */\\n    function setMarketingWallet(address payable _marketingWallet) external {\\n        // Only the current marketing wallet address can call this function\\n        require(msg.sender == marketingWallet, \\\"Not authorized\\\");\\n        // Update the marketing wallet address\\n        marketingWallet = _marketingWallet;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividends\",\"outputs\":[{\"internalType\":\"contract Dividends\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dividends\",\"type\":\"address\"}],\"name\":\"updateDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateMaxHoldingPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSwapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BRBG", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}