{"SourceCode": "pragma solidity ^0.4.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n library SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/*\r\nfile:   ReentryProtection.sol\r\nver:    0.3.0\r\nupdated:6-April-2016\r\nauthor: Darryl Morris\r\nemail:  o0ragman0o AT gmail.com\r\n\r\nMutex based reentry protection protect.\r\n\r\nThis software is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU lesser General Public License for more details.\r\n<http://www.gnu.org/licenses/>.\r\n*/\r\n\r\ncontract ReentryProtected\r\n{\r\n  // The reentry protection state mutex.\r\n  bool __reMutex;\r\n\r\n  // This modifier can be used on functions with external calls to\r\n  // prevent reentry attacks.\r\n  // Constraints:\r\n  //   Protected functions must have only one point of exit.\r\n  //   Protected functions cannot use the `return` keyword\r\n  //   Protected functions return values must be through return parameters.\r\n  modifier preventReentry() {\r\n    require(!__reMutex);\r\n    __reMutex = true;\r\n    _;\r\n    delete __reMutex;\r\n    return;\r\n  }\r\n\r\n  // This modifier can be applied to public access state mutation functions\r\n  // to protect against reentry if a `preventReentry` function has already\r\n  // set the mutex. This prevents the contract from being reenter under a\r\n  // different memory context which can break state variable integrity.\r\n  modifier noReentry() {\r\n    require(!__reMutex);\r\n    _;\r\n  }\r\n}\r\n\r\n/*\r\nfile:   ERC20.sol\r\nver:    0.4.4-o0ragman0o\r\nupdated:26-July-2017\r\nauthor: Darryl Morris\r\nemail:  o0ragman0o AT gmail.com\r\n\r\nAn ERC20 compliant token with reentry protection and safe math.\r\n\r\nThis software is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \r\nSee MIT Licence for further details.\r\n<https://opensource.org/licenses/MIT>.\r\n\r\nRelease Notes\r\n-------------\r\n0.4.4-o0ragman0o\r\n* removed state from interface\r\n* added abstract functions of public state to interface.\r\n* included state into contract implimentation\r\n*/\r\n\r\n\r\n// ERC20 Standard Token Interface with safe maths and reentry protection\r\ncontract ERC20Interface\r\n{\r\n  /* Structs */\r\n\r\n  /* State Valiables */\r\n\r\n  /* Events */\r\n  // Triggered when tokens are transferred.\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 _value);\r\n\r\n  // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _spender,\r\n    uint256 _value);\r\n\r\n  /* Modifiers */\r\n\r\n  /* Function Abstracts */\r\n\r\n  /// @return The total supply of tokens\r\n  function totalSupply() public constant returns (uint256);\r\n\r\n  /// @param _addr The address of a token holder\r\n  /// @return The amount of tokens held by `_addr`\r\n  function balanceOf(address _addr) public constant returns (uint256);\r\n\r\n  /// @param _owner The address of a token holder\r\n  /// @param _spender the address of a third-party\r\n  /// @return The amount of tokens the `_spender` is allowed to transfer\r\n  function allowance(address _owner, address _spender) public constant\r\n  returns (uint256);\r\n\r\n  /// @notice Send `_amount` of tokens from `msg.sender` to `_to`\r\n  /// @param _to The address of the recipient\r\n  /// @param _amount The amount of tokens to transfer\r\n  function transfer(address _to, uint256 _amount) public returns (bool);\r\n\r\n  /// @notice Send `_amount` of tokens from `_from` to `_to` on the condition\r\n  /// it is approved by `_from`\r\n  /// @param _from The address of the sender\r\n  /// @param _to The address of the recipient\r\n  /// @param _amount The amount of tokens to transfer\r\n  function transferFrom(address _from, address _to, uint256 _amount)\r\n  public returns (bool);\r\n\r\n  /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n  /// its behalf\r\n  /// @param _spender The address of the approved spender\r\n  /// @param _amount The amount of tokens to transfer\r\n  function approve(address _spender, uint256 _amount) public returns (bool);\r\n}\r\n\r\ncontract ERC20Token is ReentryProtected, ERC20Interface\r\n{\r\n\r\n  using SafeMath for uint256;\r\n\r\n  /* State */\r\n  // The Total supply of tokens\r\n  uint256 totSupply;\r\n\r\n  \r\n  // Token ownership mapping\r\n  mapping (address => uint256) balance;\r\n\r\n  // Allowances mapping\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /* Funtions Public */\r\n\r\n  function ERC20Token()\r\n  {\r\n    // Supply limited to 2^128 rather than 2^256 to prevent potential \r\n    // multiplication overflow\r\n    \r\n    totSupply = 0;\r\n    balance[msg.sender] = totSupply;\r\n  }\r\n\r\n  // Using an explicit getter allows for function overloading    \r\n  function totalSupply()\r\n  public\r\n  constant\r\n  returns (uint256)\r\n  {\r\n    return totSupply;\r\n  }\r\n\r\n\r\n  // Using an explicit getter allows for function overloading    \r\n  function balanceOf(address _addr)\r\n  public\r\n  constant\r\n  returns (uint256)\r\n  {\r\n    return balance[_addr];\r\n  }\r\n\r\n  // Using an explicit getter allows for function overloading    \r\n  function allowance(address _owner, address _spender)\r\n  public\r\n  constant\r\n  returns (uint256 remaining_)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n\r\n  // Send _value amount of tokens to address _to\r\n  // Reentry protection prevents attacks upon the state\r\n  function transfer(address _to, uint256 _value)\r\n  public\r\n  noReentry\r\n  returns (bool)\r\n  {\r\n    return xfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  // Send _value amount of tokens from address _from to address _to\r\n  // Reentry protection prevents attacks upon the state\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n  public\r\n  noReentry\r\n  returns (bool)\r\n  {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    allowed[_from][msg.sender] -= _value;\r\n    return xfer(_from, _to, _value);\r\n  }\r\n\r\n  // Process a transfer internally.\r\n  function xfer(address _from, address _to, uint256 _value)\r\n  internal\r\n  returns (bool)\r\n  {\r\n    require(_value > 0 && _value <= balance[_from]);\r\n    balance[_from] -= _value;\r\n    balance[_to] += _value;\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  // Approves a third-party spender\r\n  // Reentry protection prevents attacks upon the state\r\n  function approve(address _spender, uint256 _value)\r\n  public\r\n  noReentry\r\n  returns (bool)\r\n  {\r\n    require(balance[msg.sender] != 0);\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n}\r\n\r\n  /**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n contract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n   modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n   function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\n contract MintableToken is ERC20Token, Ownable {\r\n  using SafeMath for uint256;\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n   function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totSupply = totSupply.add(_amount);\r\n    balance[_to] = balance[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n    /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n   function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\n contract TriaToken_v2 is MintableToken {\r\n\r\n  string public constant name = \"TriaToken\";\r\n  string public constant symbol = \"TRIA\";\r\n  uint256 public constant decimals = 10;\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining_\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "TriaToken_v2", "CompilerVersion": "v0.4.11+commit.68ef5810", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://996bd1acd0bc34e83889da2e93030d9eb61da6d6d4006f5fb543d34de70d0e96"}