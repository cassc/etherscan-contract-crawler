{"SourceCode": "pragma solidity >=0.5.1 < 0.6.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address _who) external view returns (uint256);\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n  function allowance(address _owner, address _spender) external view returns (uint256);\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ERC223 {\r\n    function transfer(address _to, uint _value, bytes calldata _data) external;\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\ncontract ERC223ReceivingContract { \r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public;\r\n}\r\n\r\ncontract Ownable {\r\n    \r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousPrimary, address indexed newPrimary);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner of contract\");\r\n        _;\r\n    }\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    \r\n    //------------------------- Main Ownership Transfer Functions -------------------------\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract BaseERC223 is ERC20, ERC223{\r\n    using SafeMath for uint256;\r\n    \r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function name() public view returns (string memory) { return _name; }\r\n\r\n    function symbol()public view returns (string memory) { return _symbol; }\r\n\r\n    function decimals()public view returns (uint8) { return _decimals; }\r\n\r\n    function totalSupply()public view returns (uint256) { return _totalSupply; }\r\n    \r\n    // ------------------------- ERC20 Functions -------------------------\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    // Transfer ERC20 with ERC223 security compability\r\n    function transfer(address _to, uint256 _value) public returns (bool) {             \r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        uint codeLength;\r\n        bytes memory empty;\r\n        assembly {\r\n            codeLength := extcodesize(_to)\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        // Check to see if receiver is contract\r\n        if(codeLength>0) { \r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, empty);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n   \r\n   // ------------------------- ERC223 Functions -------------------------\r\n   \r\n   function transfer(address _to, uint _value, bytes memory _data) public {\r\n    require(_value > 0 );\r\n        if(isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n    \r\n    // ------------------------- Extra Functions -------------------------\r\n    \r\n     function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n           allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n           allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n   \r\n    // ------------------------- Internal Functions -------------------------\r\n    \r\n    function _convertToWei (uint256 _val) internal view returns (uint256){\r\n        return (_val * 10**uint256(decimals()));\r\n    }\r\n}\r\n\r\ncontract LIFEX is BaseERC223, Ownable{\r\n    \r\n    bool internal hasDistributed = false;\r\n    bool internal hasSecondaryOwnership = false;\r\n    address[] internal distAddr;\r\n    uint256[] internal distBal;\r\n    \r\n    // ---------------------------------------------------------------\r\n    // ------------------------- Constructor -------------------------\r\n    constructor() public {\r\n        _name = \"LIFEX\";\r\n        _symbol = \"LFX\";\r\n        _decimals = 18;\r\n        _totalSupply = _convertToWei(2222222222);\r\n        \r\n        balances[msg.sender] = _totalSupply;\r\n        \r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n    \r\n    // ------------------------- Distribute Functions -------------------------\r\n    // -- functions that are meant for distribution purposes, can set until token are distributed (only once)\r\n    \r\n    // ** set addresses that needs the token to be distrubuted later, token value input in whole number\r\n    function addDistributionAddresses(address _distAddress, uint256 _distToken) public onlyOwner {\r\n        require(!hasDistributed);\r\n        _addDistributeChecks(_distAddress, _distToken);\r\n        distAddr.push(_distAddress);\r\n        distBal.push(_convertToWei(_distToken));\r\n    }\r\n    \r\n    // ** after executing this contract, distribute functions will be disabled and unused, and all distribution data will be deleted\r\n    // ** note that make sure all data has been inputted before executing this function\r\n    function distributeToAddresses() public onlyOwner{\r\n        require(!hasDistributed);\r\n        require(distAddr.length != 0);\r\n        for(uint256 i = 0; i < distAddr.length; i++){\r\n            transfer(distAddr[i], distBal[i]);\r\n        }\r\n        hasDistributed = true;\r\n        _deleteDistData();\r\n    }\r\n    \r\n    // ** call status of distribution have been made or not\r\n    function hasDistribute() public view onlyOwner returns (bool){\r\n        return hasDistributed;\r\n    }\r\n    \r\n    // ** list all data for addresses and amount of token to be distributed\r\n    function listDistributionData() public view onlyOwner returns (address[] memory, uint256[] memory){\r\n        return (distAddr, distBal);\r\n    }\r\n    \r\n    // ------------------------- Internal Functions -------------------------\r\n    // -- internal functions are hidden from public and used for checks and smaller functions to save gas\r\n    \r\n    // ** checks on adding address to distribution data\r\n    function _addDistributeChecks(address _a, uint256 _v) internal pure {\r\n        require(_a != address(0));\r\n        require(_v > 0);\r\n    }\r\n    \r\n    // ** distribution data deletion\r\n    function _deleteDistData() internal {\r\n        delete distAddr;\r\n        delete distBal;\r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_distAddress\",\"type\":\"address\"},{\"name\":\"_distToken\",\"type\":\"uint256\"}],\"name\":\"addDistributionAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeToAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasDistribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listDistributionData\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousPrimary\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPrimary\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "LIFEX", "CompilerVersion": "v0.5.1+commit.c8a2cb62", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://dedd012a4c06ff9633645857de1ce9e7e1ef742991ec47912408b401e6597461"}