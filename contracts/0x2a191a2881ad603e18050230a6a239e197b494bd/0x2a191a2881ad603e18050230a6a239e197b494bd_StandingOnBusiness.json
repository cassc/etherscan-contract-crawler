{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenContract.sol\": {\r\n      \"content\": \"/**\\r\\n-==+++#%%@@%%%%%%%%%%%%%%%%%%%%%%%%%%%###%%%##********#####%%##***#*++++:::----===-=:-==-:--::::::::\\r\\n-=-:=%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%####%%#*******####%%###**#%%#++**=:---:-=-::::=:.:=:::::::\\r\\n:--+%%@%%%%%%%%%%%%%%%%%%%@@@@@@@%%%%%%%%%%%%%####%%##*****###%%####%@@%%%****=::::===-::--=-:::::::\\r\\n-=*#%%%%%%%%%%%%%%%%%@@@@@@@@@%%%%%@@%%%%%%%%%%%%%%%%%%%##***#######***#%%#**#***=-:=+++==-::::::---\\r\\n-*%%%%%%%%%%%%%%%%%@@@@@%@%%%%%%%%%%%%@%%%%%%%%%%%%%%%%######************###*#%%%#****=:::::::--==--\\r\\n#@%%%%%%%%%%%%%%%%%@@@%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%%%%####%#**********#####%@@%%*#=------==----\\r\\n@%%%%%%%%%%%%%%%%%%@@@@@@@@@@%%%%%###%%%%%%%%%%%%%%%%%%%%%%%%%%###%%###*********++*#%%*%=----==-----\\r\\n%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@%%%###%%%%%%%%%%%%%%%%%%%%%%%%%####%%##*****++++***#*%+---=------\\r\\n###%%%%%%%%%%%%%%@@@@@@@@@@@@%%###%@@@@%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%####%%#***********#+-==------\\r\\n-=#%%###%%%%%%%%%@%%@@@@@@%%%#*===#@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%##%%#********+#=-===--==\\r\\n------==*##%%%%%%%%%%%%%%%%%#*=--=#@@@@@@@%%%%%%%%%%%%%%%%%%%%%@@@@@@%%%%%%%%%###%%%##*****#+-======\\r\\n-------===++***##%%#%%%%%%%#*=-::=%@@@@@@@%%%%%%%%%%%%%%%%@@@@@@@@%%@%%@%%%%%%%%%%%%%%%%##**#*------\\r\\n---===+***++++***+=+#%%%%##*+-:::*%%%%%@@@%%%%%%%%%%%%%%@@@@@@%%%%%%%%%%%@%%%%%%%%%%%%%%%###%#=----=\\r\\n-===+**+========+*+===+%%#**+++::#%%%%%%@%%%%%%%%%%%%%%@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%####*=----=\\r\\n-==+**===-----===+*+===###*+-:.:#%%%%%%%%%%%%%%%%%%%%%%@@@%%%%%%%%%%%%%%%##%%%%%%%%%#%%#*+=--------=\\r\\n-==**==---------==+*==*#%%%#*=:.=+---==+*#%%%%%%%%%%%%%@@%%%%%@@@@@%%%@@@@@@@###%%%*+==------------=\\r\\n==+*+==---------==+*==#%@%%####**=-------===+#%%%%%%%%%%@%@@@@@@%%%#**%%@@@@@%%*=----------=========\\r\\n==+*+============+*+=+%##*+-::+##==================+*#%%@@@@@%%%%%#*=-+%%%%%+=======================\\r\\n==+**+==========+#*==#%%#*+-:..+*======================+%%%%%%%%%##*=--#%#+=========================\\r\\n====+*+=======+##+==+%%@%%##*-.*==========================+*%%@%%##**+-+============================\\r\\n=====+*+====*#*+====#%%#+=--+**#================================+###+=--*===========================\\r\\n=====++*+=+**+======##**+=-:.:**=================================%%#*+=-=*==========================\\r\\n=====+**+=**=====++***++==-:..++=================================*%%%%#***==========================\\r\\n*******+==**===*##===%##+=-:.:+*+==+********+===========+*****+==+###*===++++++++++===-=============\\r\\n+++++++++++*%*=----------=#-:-+*%*=-----------=%+===+%#=--------+#%**++@-------------+#%+===========\\r\\n*++++****+*#-------------=#-:-#=---------------#+==%+--------------*#++@----------------**===+++++++\\r\\n*#*+**++++%=----*##########-:+*----=#########*+%+=#=----=#####*-----+#=@-----*#####+----+#==++++++++\\r\\n*#*++***++#+----------=+#%+::+*------=+++++*#@%+-+#-----@=====+%----=#+@-----+####*=---+@+==++++++++\\r\\n#******++++*%+==----------+#-=*#+=-------------=%*#----=%======%----=#+@-----------------**+++++++++\\r\\n###***#*++*###%%%%%%%%=----%++*##%%%%%%%%%%+----+%#=----##++++#*----=#+@----=#%#####%----=#+++++++++\\r\\n#******#**#+-----====------%+**---=========-----****------====------%*=@-----=======-----+#+++******\\r\\n*******%%#%+-------------=%****----------------*%+=*%=------------+%+++@----------------+%++********\\r\\n#*****#@%%##%%###+---*#%%#####%%##***++++***#%#++++++*##***++**###*++**%##############%#++**********\\r\\n##***#%%%%%%%###*#####*##%%%%%%%###*****++++++********++++++++++++***###**+=-:=*++*#*####***********\\r\\n##*##%%%@@@@%%@%%%##%%%%%@@@@@@@@@%%%%%###************************##*#%%##*+=::#%%%%@%%@@@%%##******\\r\\n###%@%%@@@@@@@@@@@@%%@@%%@@@@@@@@@@@@@@@%%#************##*#*#**#@@@@@@%%%%##*#@@%%%%@@@@@%@@@@%#####\\r\\n###%%@@@@@@@@@@@@@@@%@@@@@@@@@@@@%###%%@@@%%####################@@@@@@@@@%%@@@@@@@@@@@@@@@@%%@@@@@%#\\r\\n###@%%@@@@@@@@@@@@@@@@@@@%@@@@@@*+=====%@@%%%##################%@%@@@@@@@@@@%@@@@@@@@@@@@@@@@%%@@@@@\\r\\n##%@@@@@@@@@@@@@@@%@@@@@@@@@@@@@%%%%%%%%@@@%%%%##%%%%%%%%%%%%%%%%@@%%%%%%@@@@@@@@@@@%@@@@@@@@@@@@@@@\\r\\n#%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@\\r\\n%@%@@@@@@@@@@@@%@@@@@@@@@@%%%@@%%%%@%%%@@%%%%#%%@%%%%%%%%%%%%%%%@%%@@@@@@@@@@@@@@@@@@@@@@@@@%%@@@@@@\\r\\n@%@@@@@@@@@@@@%@@@@@@@@@%@%%%%%@%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@\\r\\n%@@@@@@@@@@@@%@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@\\r\\n@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@%%%%%%%%%%%%#%#########%%%#######%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@%%%%%%%%%%%%#######****####%+======%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@%@@@@@@@@@@@@@@@@@@@@%@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%-:::-=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%@%####%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%##%%###*****##%%%####%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@@@@@%%@%%%%@@@@@@@@@@@@@@@@@@@@%%%%%%@@@%%%%%%%%%@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n%%@@@@@@%%%%%%%%@@@@@@@@@@@@@@@@@@%%%@@@@@@@@%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@%%%%%%%%%%%%@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n@@@@@@@@@@@%%@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@%%%%%%%%%@%@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%###\\r\\n@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#######%###################*********\\r\\n%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%#########################****#########\\r\\n%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%############################*****########*#\\r\\n\\r\\n\\r\\nTelegram: https://t.me/SobCoinEth\\r\\nTwitter: https://twitter.com/SobCoinEth\\r\\n**/\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\nbytes32 constant INIT_CODE_HASH = hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\";\\r\\naddress constant FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    function pairFor(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(\\r\\n            uint160(\\r\\n                uint256(\\r\\n                    keccak256(\\r\\n                        abi.encodePacked(\\r\\n                            hex\\\"ff\\\",\\r\\n                            FACTORY,\\r\\n                            keccak256(abi.encodePacked(token0, token1)),\\r\\n                            INIT_CODE_HASH\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function sortTokens(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) internal pure returns (address token0, address token1) {\\r\\n        (token0, token1) = tokenA < tokenB\\r\\n            ? (tokenA, tokenB)\\r\\n            : (tokenB, tokenA);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract StandingOnBusiness is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => bool) private _isExcludedFromFee;\\r\\n    mapping(address => bool) private bots;\\r\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\r\\n    bool public transferDelayEnabled = true;\\r\\n    address payable private _taxWallet;\\r\\n\\r\\n    uint256 private _initialBuyTax;\\r\\n    uint256 private _initialSellTax;\\r\\n    uint256 private _finalBuyTax;\\r\\n    uint256 private _finalSellTax;\\r\\n    uint256 private _reduceBuyTaxAt = 25;\\r\\n    uint256 private _reduceSellTaxAt = 25;\\r\\n    uint256 private _preventSwapBefore = 25;\\r\\n    uint256 private _buyCount;\\r\\n\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 private constant _tTotal = 1_000_000 * 10 ** _decimals;\\r\\n    string private constant _name = unicode\\\"SOB\\\";\\r\\n    string private constant _symbol = unicode\\\"SOB\\\";\\r\\n    uint256 public _maxTxAmount = 20_000 * 10 ** _decimals;\\r\\n    uint256 public _maxWalletSize = 20_000 * 10 ** _decimals;\\r\\n    uint256 public _taxSwapThreshold = 2_000 * 10 ** _decimals;\\r\\n    uint256 public _maxTaxSwap = 5_000 * 10 ** _decimals;\\r\\n\\r\\n    IUniswapV2Router02 private constant UNISWAP_V2_ROUTER =\\r\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n    address private immutable UNISWAP_V2_PAIR;\\r\\n    bool private tradingOpen;\\r\\n    bool private inSwap = false;\\r\\n    bool private swapEnabled = false;\\r\\n\\r\\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor() Ownable(msg.sender) {\\r\\n        _taxWallet = payable(msg.sender);\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[_taxWallet] = true;\\r\\n\\r\\n        UNISWAP_V2_PAIR = UniswapV2Library.pairFor(\\r\\n            address(this),\\r\\n            UNISWAP_V2_ROUTER.WETH()\\r\\n        );\\r\\n\\r\\n        _balances[_msgSender()] = _tTotal;\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public pure override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        uint256 taxAmount = 0;\\r\\n        if (from != owner() && to != owner()) {\\r\\n            taxAmount = amount\\r\\n                .mul(\\r\\n                    (_buyCount > _reduceBuyTaxAt)\\r\\n                        ? _finalBuyTax\\r\\n                        : _initialBuyTax\\r\\n                )\\r\\n                .div(100);\\r\\n\\r\\n            if (transferDelayEnabled) {\\r\\n                if (to != address(UNISWAP_V2_ROUTER) && to != UNISWAP_V2_PAIR) {\\r\\n                    require(\\r\\n                        _holderLastTransferTimestamp[tx.origin] < block.number,\\r\\n                        \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\"\\r\\n                    );\\r\\n                    _holderLastTransferTimestamp[tx.origin] = block.number;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                from == UNISWAP_V2_PAIR &&\\r\\n                to != address(UNISWAP_V2_ROUTER) &&\\r\\n                !_isExcludedFromFee[to]\\r\\n            ) {\\r\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\r\\n                require(\\r\\n                    balanceOf(to) + amount <= _maxWalletSize,\\r\\n                    \\\"Exceeds the maxWalletSize.\\\"\\r\\n                );\\r\\n                if (_buyCount <= 100) {\\r\\n                    _buyCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (to == UNISWAP_V2_PAIR && from != address(this)) {\\r\\n                taxAmount = amount\\r\\n                    .mul(\\r\\n                        (_buyCount > _reduceSellTaxAt)\\r\\n                            ? _finalSellTax\\r\\n                            : _initialSellTax\\r\\n                    )\\r\\n                    .div(100);\\r\\n            }\\r\\n\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (\\r\\n                !inSwap &&\\r\\n                to == UNISWAP_V2_PAIR &&\\r\\n                swapEnabled &&\\r\\n                contractTokenBalance > _taxSwapThreshold &&\\r\\n                _buyCount > _preventSwapBefore\\r\\n            ) {\\r\\n                swapTokensForEth(\\r\\n                    min(amount, min(contractTokenBalance, _maxTaxSwap))\\r\\n                );\\r\\n                uint256 contractETHBalance = address(this).balance;\\r\\n                if (contractETHBalance > 50000000000000000) {\\r\\n                    sendETHToFee(address(this).balance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (taxAmount > 0) {\\r\\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\\r\\n            emit Transfer(from, address(this), taxAmount);\\r\\n        }\\r\\n        _balances[from] = _balances[from].sub(amount);\\r\\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\\r\\n        emit Transfer(from, to, amount.sub(taxAmount));\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return (a > b) ? b : a;\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\r\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            _taxWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLimits() external onlyOwner {\\r\\n        _maxTxAmount = _tTotal;\\r\\n        _maxWalletSize = _tTotal;\\r\\n        transferDelayEnabled = false;\\r\\n        emit MaxTxAmountUpdated(_tTotal);\\r\\n    }\\r\\n\\r\\n    function sendETHToFee(uint256 amount) private {\\r\\n        _taxWallet.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function openTrading() external payable onlyOwner {\\r\\n        require(!tradingOpen, \\\"trading is already open\\\");\\r\\n        _approve(address(this), address(UNISWAP_V2_ROUTER), type(uint256).max);\\r\\n        UNISWAP_V2_ROUTER.addLiquidityETH{value: address(this).balance}(\\r\\n            address(this),\\r\\n            balanceOf(address(this)),\\r\\n            0,\\r\\n            0,\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        _initialBuyTax = 30;\\r\\n        _initialSellTax = 30;\\r\\n        _finalBuyTax = 0;\\r\\n        _finalSellTax = 0;\\r\\n        swapEnabled = true;\\r\\n        tradingOpen = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function manualSwap() external {\\r\\n        require(_msgSender() == _taxWallet);\\r\\n        uint256 tokenBalance = balanceOf(address(this));\\r\\n        if (tokenBalance > 0) {\\r\\n            swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        if (ethBalance > 0) {\\r\\n            sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }\\r\\n    function excludeFromFee(address addy) external onlyOwner {\\r\\n        _isExcludedFromFee[addy] = true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StandingOnBusiness", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}