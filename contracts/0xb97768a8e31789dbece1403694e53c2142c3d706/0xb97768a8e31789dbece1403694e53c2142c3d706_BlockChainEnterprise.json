{"SourceCode": "contract BlockChainEnterprise {\r\n    uint private BlockBalance = 0; //block balance (0 to BlockSize eth)\r\n    uint private NumberOfBlockMined = 0;\r\n    uint private BlockReward = 0;\r\n    uint private BlockSize =  10 ether; //a block is size 10 ETH, and with 1.2 multiplier it is paid 12 ETH\r\n    uint private MaxDeposit = 5 ether;\r\n    uint private multiplier = 1200; // Multiplier\r\n    uint private fees = 0;      //Fees are just verly low : 1% !\r\n    uint private feeFrac = 5;  //Fraction for fees in \"thousandth\" --> only 0.5% !!\r\n    uint private RewardFrac = 30;  //Fraction for Reward in \"thousandth\"\r\n    uint private Payout_id = 0;\r\n    address private admin;\r\n\r\n    function BlockChainEnterprise() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyowner {if (msg.sender == admin) _  }\r\n\r\n    struct Miner {\r\n        address addr;\r\n        uint payout;\r\n        bool paid;\r\n    }\r\n\r\n    Miner[] private miners;\r\n\r\n    //--Fallback function\r\n    function() {\r\n        init();\r\n    }\r\n\r\n    //--initiated function\r\n    function init() private {\r\n        uint256 new_deposit=msg.value;\r\n        //------ Verifications on this new deposit ------\r\n        if (new_deposit < 100 finney) { //only >0.1 eth participation accepted\r\n            msg.sender.send(new_deposit);\r\n            return;\r\n        }\r\n\r\n        if( new_deposit > MaxDeposit ){\r\n            msg.sender.send( msg.value - MaxDeposit );\r\n            new_deposit= MaxDeposit;\r\n        }\r\n        //-- enter the block ! --\r\n        Participate(new_deposit);\r\n    }\r\n\r\n    function Participate(uint deposit) private {\r\n        if( BlockSize  < (deposit + BlockBalance) ){ //if this new deposit is part of 2 blocks\r\n            uint256 fragment = BlockSize - BlockBalance;\r\n            miners.push(Miner(msg.sender, fragment*multiplier/1000 , false)); //fill the block\r\n            miners.push(Miner(msg.sender, (deposit - fragment)*multiplier/1000  , false)); //contruct the next one\r\n        } else {\r\n            miners.push(Miner(msg.sender, deposit*multiplier/1000 , false)); // add this new miner in the block !\r\n        }\r\n\r\n        //--- UPDATING CONTRACT STATS ----\r\n        BlockReward += (deposit * RewardFrac) / 1000; // take some to reward the winner that make the whole block mined !\r\n        fees += (deposit * feeFrac) / 1000;          // collect small fee\r\n        BlockBalance += (deposit * (1000 - ( feeFrac + RewardFrac ))) / 1000; //update balance\r\n\r\n        //Mine the block first if possible !\r\n        if( BlockBalance >= (BlockSize/1000*multiplier) ){// it can be mined now !\r\n            PayMiners();\r\n            PayWinnerMiner(msg.sender,deposit);\r\n        }\r\n    }\r\n\r\n    function PayMiners() private {\r\n        NumberOfBlockMined +=1;\r\n        //Classic payout of all participants of the block\r\n        while ( miners[Payout_id].payout!=0 && BlockBalance >= ( miners[Payout_id].payout )  ) {\r\n            miners[Payout_id].addr.send(miners[Payout_id].payout); //pay the man !\r\n\r\n            BlockBalance -= miners[Payout_id].payout; //update the balance\r\n            miners[Payout_id].paid=true;\r\n\r\n            Payout_id += 1;\r\n        }\r\n    }\r\n\r\n    function  PayWinnerMiner(address winner, uint256 deposit) private{ //pay the winner accordingly to his deposit !\r\n        //Globally, EVERYONE CAN WIN by being smart and quick.\r\n        if(deposit >= 1 ether){ //only 1 ether, and you get it all !\r\n            winner.send(BlockReward);\r\n            BlockReward =0;\r\n        } else { // deposit is between 0.1 and 0.99 ether\r\n            uint256 pcent = deposit / 10 finney;\r\n            winner.send(BlockReward*pcent/100);\r\n            BlockReward -= BlockReward*pcent/100;\r\n        }\r\n    }\r\n\r\n    //---Contract management functions\r\n    function ChangeOwnership(address _owner) onlyowner {\r\n        admin = _owner;\r\n    }\r\n\r\n    function CollectAllFees() onlyowner {\r\n        if (fees == 0) throw;\r\n        admin.send(fees);\r\n        fees = 0;\r\n    }\r\n\r\n    function GetAndReduceFeesByFraction(uint p) onlyowner {\r\n        if (fees == 0) feeFrac=feeFrac*80/100; //Reduce fees.\r\n        admin.send(fees / 1000 * p);//send a percent of fees\r\n        fees -= fees / 1000 * p;\r\n    }\r\n\r\n    //---Contract informations\r\n    function WatchBalance() constant returns(uint TotalBalance, string info) {\r\n        TotalBalance = BlockBalance /  1 finney;\r\n        info ='Balance in finney';\r\n    }\r\n\r\n    function WatchBlockSizeInEther() constant returns(uint BlockSizeInEther, string info) {\r\n        BlockSizeInEther = BlockSize / 1 ether;\r\n        info ='Balance in ether';\r\n    }\r\n\r\n    function WatchNextBlockReward() constant returns(uint Reward, string info) {\r\n        Reward = BlockReward / 1 finney;\r\n        info ='Current reward collected. The reward when a block is mined is always BlockSize*RewardPercentage/100';\r\n    }\r\n\r\n    function NumberOfMiners() constant returns(uint NumberOfMiners, string info) {\r\n        NumberOfMiners = miners.length;\r\n        info ='Number of participations since the beginning of this wonderful blockchain';\r\n    }\r\n    function WatchCurrentMultiplier() constant returns(uint Mult, string info) {\r\n        Mult = multiplier;\r\n        info ='Current multiplier';\r\n    }\r\n\r\n    function NumberOfBlockAlreadyMined() constant returns(uint NumberOfBlockMinedAlready, string info) {\r\n        NumberOfBlockMinedAlready = NumberOfBlockMined;\r\n        info ='A block mined is a payout of size BlockSize, multiply this number and you get the sum of all payouts.';\r\n    }\r\n\r\n    function AmountToForgeTheNextBlock() constant returns(uint ToDeposit, string info) {\r\n        ToDeposit = ( ( (BlockSize/1000*multiplier) - BlockBalance)*(1000 - ( feeFrac + RewardFrac ))/1000) / 1 finney;\r\n        info ='This amount in finney in finney required to complete the current block, and to MINE it (trigger the payout).';\r\n    }\r\n\r\n    function PlayerInfo(uint id) constant returns(address Address, uint Payout, bool UserPaid) {\r\n        if (id <= miners.length) {\r\n            Address = miners[id].addr;\r\n            Payout = (miners[id].payout) / 1 finney;\r\n            UserPaid=miners[id].paid;\r\n        }\r\n    }\r\n\r\n    function WatchCollectedFeesInSzabo() constant returns(uint CollectedFees) {\r\n        CollectedFees = fees / 1 szabo;\r\n    }\r\n\r\n    function NumberOfCurrentBlockMiners() constant returns(uint QueueSize, string info) {\r\n        QueueSize = miners.length - Payout_id;\r\n        info ='Number of participations in the current block.';\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ChangeOwnership\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchBlockSizeInEther\",\"outputs\":[{\"name\":\"BlockSizeInEther\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AmountToForgeTheNextBlock\",\"outputs\":[{\"name\":\"ToDeposit\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlayerInfo\",\"outputs\":[{\"name\":\"Address\",\"type\":\"address\"},{\"name\":\"Payout\",\"type\":\"uint256\"},{\"name\":\"UserPaid\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CollectAllFees\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchCurrentMultiplier\",\"outputs\":[{\"name\":\"Mult\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberOfMiners\",\"outputs\":[{\"name\":\"NumberOfMiners\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberOfCurrentBlockMiners\",\"outputs\":[{\"name\":\"QueueSize\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"GetAndReduceFeesByFraction\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchCollectedFeesInSzabo\",\"outputs\":[{\"name\":\"CollectedFees\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchBalance\",\"outputs\":[{\"name\":\"TotalBalance\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberOfBlockAlreadyMined\",\"outputs\":[{\"name\":\"NumberOfBlockMinedAlready\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WatchNextBlockReward\",\"outputs\":[{\"name\":\"Reward\",\"type\":\"uint256\"},{\"name\":\"info\",\"type\":\"string\"}],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]", "ContractName": "BlockChainEnterprise", "CompilerVersion": "v0.3.1-2016-04-12-3ad5e82", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}