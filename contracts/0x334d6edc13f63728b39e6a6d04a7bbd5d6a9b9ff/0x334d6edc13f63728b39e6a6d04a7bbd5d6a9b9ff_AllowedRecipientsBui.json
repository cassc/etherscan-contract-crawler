{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AllowedRecipientsBuilder.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2022 Lido <info@lido.fi>\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"IAllowedRecipientsRegistry.sol\\\";\\nimport \\\"IAllowedTokensRegistry.sol\\\";\\nimport \\\"IEasyTrack.sol\\\";\\n\\ninterface ITopUpAllowedRecipients {\\n    function token() external view returns (address);\\n\\n    function finance() external view returns (address);\\n\\n    function easyTrack() external view returns (IEasyTrack);\\n\\n    function trustedCaller() external view returns (address);\\n\\n    function allowedRecipientsRegistry() external view returns (address);\\n\\n    function allowedTokensRegistry() external view returns (address);\\n}\\n\\ninterface IAddAllowedRecipient {\\n    function trustedCaller() external view returns (address);\\n\\n    function allowedRecipientsRegistry() external view returns (address);\\n}\\n\\ninterface IRemoveAllowedRecipient {\\n    function trustedCaller() external view returns (address);\\n\\n    function allowedRecipientsRegistry() external view returns (address);\\n}\\n\\ninterface IAllowedRecipientsFactory {\\n    function deployAllowedRecipientsRegistry(\\n        address _admin,\\n        address[] calldata _addRecipientToAllowedListRoleHolders,\\n        address[] calldata _removeRecipientFromAllowedListRoleHolders,\\n        address[] calldata _setLimitParametersRoleHolders,\\n        address[] calldata _updateSpentAmountRoleHolders,\\n        address bokkyPooBahsDateTimeContract\\n    ) external returns (IAllowedRecipientsRegistry);\\n\\n    function deployAllowedTokensRegistry(\\n        address _defaultAdmin,\\n        address[] calldata _addTokensToAllowedListRoleHolders,\\n        address[] calldata _removeTokensFromAllowedListRoleHolders\\n    ) external returns (IAllowedTokensRegistry registry);\\n\\n    function deployTopUpAllowedRecipients(\\n        address _trustedCaller,\\n        address _allowedRecipientsRegistry,\\n        address _allowedTokensRegistry,\\n        address _finance,\\n        address _easyTrack\\n    ) external returns (ITopUpAllowedRecipients topUpAllowedRecipients);\\n\\n    function deployAddAllowedRecipient(address _trustedCaller, address _allowedRecipientsRegistry)\\n        external\\n        returns (IAddAllowedRecipient);\\n\\n    function deployRemoveAllowedRecipient(address _trustedCaller, address _allowedRecipientsRegistry)\\n        external\\n        returns (IRemoveAllowedRecipient);\\n}\\n\\ncontract AllowedRecipientsBuilder {\\n    IEasyTrack public immutable easyTrack;\\n    address public immutable finance;\\n    address public immutable evmScriptExecutor;\\n    address public immutable admin;\\n    address public immutable bokkyPooBahsDateTimeContract;\\n    IAllowedRecipientsFactory public immutable factory;\\n\\n    bytes32 public constant ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE = keccak256(\\\"ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE\\\");\\n    bytes32 public constant REMOVE_RECIPIENT_FROM_ALLOWED_LIST_ROLE =\\n        keccak256(\\\"REMOVE_RECIPIENT_FROM_ALLOWED_LIST_ROLE\\\");\\n    bytes32 public constant ADD_TOKEN_TO_ALLOWED_LIST_ROLE = keccak256(\\\"ADD_TOKEN_TO_ALLOWED_LIST_ROLE\\\");\\n    bytes32 public constant REMOVE_TOKEN_FROM_ALLOWED_LIST_ROLE = keccak256(\\\"REMOVE_TOKEN_FROM_ALLOWED_LIST_ROLE\\\");\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant SET_PARAMETERS_ROLE = keccak256(\\\"SET_PARAMETERS_ROLE\\\");\\n    bytes32 public constant UPDATE_SPENT_AMOUNT_ROLE = keccak256(\\\"UPDATE_SPENT_AMOUNT_ROLE\\\");\\n\\n    constructor(\\n        IAllowedRecipientsFactory _factory,\\n        address _admin,\\n        IEasyTrack _easytrack,\\n        address _finance,\\n        address _bokkyPooBahsDateTimeContract\\n    ) {\\n        factory = _factory;\\n        evmScriptExecutor = _easytrack.evmScriptExecutor();\\n        admin = _admin;\\n        easyTrack = _easytrack;\\n        finance = _finance;\\n        bokkyPooBahsDateTimeContract = _bokkyPooBahsDateTimeContract;\\n    }\\n\\n    function deployAllowedRecipientsRegistry(\\n        uint256 _limit,\\n        uint256 _periodDurationMonths,\\n        address[] memory _recipients,\\n        string[] memory _titles,\\n        uint256 _spentAmount,\\n        bool _grantRightsToEVMScriptExecutor\\n    ) public returns (IAllowedRecipientsRegistry registry) {\\n        require(_recipients.length == _titles.length, \\\"Recipients data length mismatch\\\");\\n        require(_spentAmount <= _limit, \\\"_spentAmount must be lower or equal to limit\\\");\\n\\n        address[] memory addRecipientToAllowedListRoleHolders = new address[](\\n            _grantRightsToEVMScriptExecutor ? 3 : 2\\n        );\\n        addRecipientToAllowedListRoleHolders[0] = admin;\\n        addRecipientToAllowedListRoleHolders[1] = address(this);\\n        if (_grantRightsToEVMScriptExecutor) {\\n            addRecipientToAllowedListRoleHolders[2] = evmScriptExecutor;\\n        }\\n        address[] memory removeRecipientFromAllowedListRoleHolders = new address[](\\n            _grantRightsToEVMScriptExecutor ? 2 : 1\\n        );\\n        removeRecipientFromAllowedListRoleHolders[0] = admin;\\n        if (_grantRightsToEVMScriptExecutor) {\\n            removeRecipientFromAllowedListRoleHolders[1] = evmScriptExecutor;\\n        }\\n        address[] memory setLimitParametersRoleHolders = new address[](2);\\n        setLimitParametersRoleHolders[0] = admin;\\n        setLimitParametersRoleHolders[1] = address(this);\\n        address[] memory updateSpentAmountRoleHolders = new address[](3);\\n        updateSpentAmountRoleHolders[0] = admin;\\n        updateSpentAmountRoleHolders[1] = evmScriptExecutor;\\n        updateSpentAmountRoleHolders[2] = address(this);\\n\\n        registry = factory.deployAllowedRecipientsRegistry(\\n            admin,\\n            addRecipientToAllowedListRoleHolders,\\n            removeRecipientFromAllowedListRoleHolders,\\n            setLimitParametersRoleHolders,\\n            updateSpentAmountRoleHolders,\\n            bokkyPooBahsDateTimeContract\\n        );\\n\\n        assert(registry.bokkyPooBahsDateTimeContract() == bokkyPooBahsDateTimeContract);\\n\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            registry.addRecipient(_recipients[i], _titles[i]);\\n        }\\n        registry.renounceRole(ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE, address(this));\\n\\n        assert(registry.getAllowedRecipients().length == _recipients.length);\\n\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            assert(registry.isRecipientAllowed(_recipients[i]));\\n        }\\n\\n        registry.setLimitParameters(_limit, _periodDurationMonths);\\n        registry.renounceRole(SET_PARAMETERS_ROLE, address(this));\\n\\n        (uint256 registryLimit, uint256 registryPeriodDuration) = registry.getLimitParameters();\\n        assert(registryLimit == _limit);\\n        assert(registryPeriodDuration == _periodDurationMonths);\\n\\n        registry.updateSpentAmount(_spentAmount);\\n        registry.renounceRole(UPDATE_SPENT_AMOUNT_ROLE, address(this));\\n\\n        assert(registry.spendableBalance() == _limit - _spentAmount);\\n\\n        assert(registry.hasRole(ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE, admin));\\n        assert(registry.hasRole(REMOVE_RECIPIENT_FROM_ALLOWED_LIST_ROLE, admin));\\n        assert(registry.hasRole(SET_PARAMETERS_ROLE, admin));\\n        assert(registry.hasRole(UPDATE_SPENT_AMOUNT_ROLE, admin));\\n        assert(registry.hasRole(DEFAULT_ADMIN_ROLE, admin));\\n\\n        if (_grantRightsToEVMScriptExecutor) {\\n            assert(registry.hasRole(ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE, evmScriptExecutor));\\n            assert(registry.hasRole(REMOVE_RECIPIENT_FROM_ALLOWED_LIST_ROLE, evmScriptExecutor));\\n        } else {\\n            assert(!registry.hasRole(ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE, evmScriptExecutor));\\n            assert(!registry.hasRole(REMOVE_RECIPIENT_FROM_ALLOWED_LIST_ROLE, evmScriptExecutor));\\n        }\\n        assert(registry.hasRole(UPDATE_SPENT_AMOUNT_ROLE, evmScriptExecutor));\\n        assert(!registry.hasRole(SET_PARAMETERS_ROLE, evmScriptExecutor));\\n        assert(!registry.hasRole(DEFAULT_ADMIN_ROLE, evmScriptExecutor));\\n\\n        assert(!registry.hasRole(ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE, address(this)));\\n        assert(!registry.hasRole(REMOVE_RECIPIENT_FROM_ALLOWED_LIST_ROLE, address(this)));\\n        assert(!registry.hasRole(SET_PARAMETERS_ROLE, address(this)));\\n        assert(!registry.hasRole(UPDATE_SPENT_AMOUNT_ROLE, address(this)));\\n        assert(!registry.hasRole(DEFAULT_ADMIN_ROLE, address(this)));\\n    }\\n\\n    function deployAllowedTokensRegistry(address[] calldata _tokens) public returns (IAllowedTokensRegistry registry) {\\n        address[] memory addTokenRoleHolders = new address[](2);\\n        address[] memory removeTokenRoleHolders = new address[](1);\\n\\n        addTokenRoleHolders[0] = admin;\\n        addTokenRoleHolders[1] = address(this);\\n\\n        removeTokenRoleHolders[0] = admin;\\n\\n        registry = factory.deployAllowedTokensRegistry(admin, addTokenRoleHolders, removeTokenRoleHolders);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            registry.addToken(_tokens[i]);\\n        }\\n\\n        registry.renounceRole(ADD_TOKEN_TO_ALLOWED_LIST_ROLE, address(this));\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            assert(registry.isTokenAllowed(_tokens[i]));\\n        }\\n\\n        assert(registry.hasRole(ADD_TOKEN_TO_ALLOWED_LIST_ROLE, admin));\\n        assert(registry.hasRole(REMOVE_TOKEN_FROM_ALLOWED_LIST_ROLE, admin));\\n        assert(registry.hasRole(DEFAULT_ADMIN_ROLE, admin));\\n\\n        assert(!registry.hasRole(ADD_TOKEN_TO_ALLOWED_LIST_ROLE, address(this)));\\n    }\\n\\n    function deployTopUpAllowedRecipients(\\n        address _trustedCaller,\\n        address _allowedRecipientsRegistry,\\n        address _allowedTokensRegistry\\n    ) public returns (ITopUpAllowedRecipients topUpAllowedRecipients) {\\n        topUpAllowedRecipients = factory.deployTopUpAllowedRecipients(\\n            _trustedCaller, _allowedRecipientsRegistry, _allowedTokensRegistry, finance, address(easyTrack)\\n        );\\n\\n        assert(topUpAllowedRecipients.finance() == finance);\\n        assert(topUpAllowedRecipients.easyTrack() == easyTrack);\\n        assert(topUpAllowedRecipients.trustedCaller() == _trustedCaller);\\n        assert(address(topUpAllowedRecipients.allowedRecipientsRegistry()) == _allowedRecipientsRegistry);\\n        assert(address(topUpAllowedRecipients.allowedTokensRegistry()) == _allowedTokensRegistry);\\n    }\\n\\n    function deployAddAllowedRecipient(address _trustedCaller, address _allowedRecipientsRegistry)\\n        public\\n        returns (IAddAllowedRecipient addAllowedRecipient)\\n    {\\n        addAllowedRecipient = factory.deployAddAllowedRecipient(_trustedCaller, _allowedRecipientsRegistry);\\n\\n        assert(addAllowedRecipient.trustedCaller() == _trustedCaller);\\n        assert(address(addAllowedRecipient.allowedRecipientsRegistry()) == _allowedRecipientsRegistry);\\n    }\\n\\n    function deployRemoveAllowedRecipient(address _trustedCaller, address _allowedRecipientsRegistry)\\n        public\\n        returns (IRemoveAllowedRecipient removeAllowedRecipient)\\n    {\\n        removeAllowedRecipient = factory.deployRemoveAllowedRecipient(_trustedCaller, _allowedRecipientsRegistry);\\n\\n        assert(removeAllowedRecipient.trustedCaller() == _trustedCaller);\\n        assert(address(removeAllowedRecipient.allowedRecipientsRegistry()) == _allowedRecipientsRegistry);\\n    }\\n\\n    function deployFullSetup(\\n        address _trustedCaller,\\n        uint256 _limit,\\n        uint256 _periodDurationMonths,\\n        address[] calldata _tokens,\\n        address[] calldata _recipients,\\n        string[] calldata _titles,\\n        uint256 _spentAmount\\n    ) public {\\n        IAllowedRecipientsRegistry allowedRecipientsRegistry =\\n            deployAllowedRecipientsRegistry(_limit, _periodDurationMonths, _recipients, _titles, _spentAmount, true);\\n        IAllowedTokensRegistry allowedTokensRegistry = deployAllowedTokensRegistry(_tokens);\\n\\n        deployTopUpAllowedRecipients(_trustedCaller, address(allowedRecipientsRegistry), address(allowedTokensRegistry));\\n\\n        deployAddAllowedRecipient(_trustedCaller, address(allowedRecipientsRegistry));\\n\\n        deployRemoveAllowedRecipient(_trustedCaller, address(allowedRecipientsRegistry));\\n    }\\n\\n    function deploySingleRecipientTopUpOnlySetup(\\n        address _recipient,\\n        string calldata _title,\\n        address[] calldata _tokens,\\n        uint256 _limit,\\n        uint256 _periodDurationMonths,\\n        uint256 _spentAmount\\n    ) public {\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = _recipient;\\n\\n        string[] memory titles = new string[](1);\\n        titles[0] = _title;\\n\\n        IAllowedRecipientsRegistry allowedRecipientsRegistry =\\n            deployAllowedRecipientsRegistry(_limit, _periodDurationMonths, recipients, titles, _spentAmount, false);\\n        IAllowedTokensRegistry allowedTokensRegistry = deployAllowedTokensRegistry(_tokens);\\n\\n        deployTopUpAllowedRecipients(_recipient, address(allowedRecipientsRegistry), address(allowedTokensRegistry));\\n    }\\n}\\n\"\r\n    },\r\n    \"IAllowedRecipientsRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2022 Lido <info@lido.fi>\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IAllowedRecipientsRegistry {\\n    function addRecipient(address _recipient, string memory _title) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function isRecipientAllowed(address _recipient) external view returns (bool);\\n\\n    function setLimitParameters(uint256 _limit, uint256 _periodDurationMonths) external;\\n\\n    function getLimitParameters() external view returns (uint256, uint256);\\n\\n    function updateSpentAmount(uint256 _payoutAmount) external;\\n\\n    function spendableBalance() external view returns (uint256);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getAllowedRecipients() external view returns (address[] memory);\\n\\n    function bokkyPooBahsDateTimeContract() external view returns (address);\\n\\n    function isUnderSpendableBalance(uint256 _amount, uint256 _motionDuration) external view returns (bool);\\n}\"\r\n    },\r\n    \"IAllowedTokensRegistry.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2022 Lido <info@lido.fi>\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IAllowedTokensRegistry {\\n    function addToken(address _token) external;\\n    \\n    function removeToken(address _token) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function isTokenAllowed(address _token) external view returns (bool);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getAllowedTokens() external view returns (address[] memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function normalizeAmount(uint256 _amount, address _token) external view returns (uint256);\\n}\"\r\n    },\r\n    \"IEasyTrack.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2022 Lido <info@lido.fi>\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\ninterface IEasyTrack {\\n    function motionDuration() external view returns (uint256);\\n    function evmScriptExecutor() external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"AllowedRecipientsBuilder.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IAllowedRecipientsFactory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"contract IEasyTrack\",\"name\":\"_easytrack\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bokkyPooBahsDateTimeContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_RECIPIENT_TO_ALLOWED_LIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADD_TOKEN_TO_ALLOWED_LIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_RECIPIENT_FROM_ALLOWED_LIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_TOKEN_FROM_ALLOWED_LIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_PARAMETERS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_SPENT_AMOUNT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bokkyPooBahsDateTimeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedCaller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowedRecipientsRegistry\",\"type\":\"address\"}],\"name\":\"deployAddAllowedRecipient\",\"outputs\":[{\"internalType\":\"contract IAddAllowedRecipient\",\"name\":\"addAllowedRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodDurationMonths\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_titles\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_grantRightsToEVMScriptExecutor\",\"type\":\"bool\"}],\"name\":\"deployAllowedRecipientsRegistry\",\"outputs\":[{\"internalType\":\"contract IAllowedRecipientsRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"deployAllowedTokensRegistry\",\"outputs\":[{\"internalType\":\"contract IAllowedTokensRegistry\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedCaller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodDurationMonths\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_titles\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_spentAmount\",\"type\":\"uint256\"}],\"name\":\"deployFullSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedCaller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowedRecipientsRegistry\",\"type\":\"address\"}],\"name\":\"deployRemoveAllowedRecipient\",\"outputs\":[{\"internalType\":\"contract IRemoveAllowedRecipient\",\"name\":\"removeAllowedRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodDurationMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spentAmount\",\"type\":\"uint256\"}],\"name\":\"deploySingleRecipientTopUpOnlySetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedCaller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowedRecipientsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allowedTokensRegistry\",\"type\":\"address\"}],\"name\":\"deployTopUpAllowedRecipients\",\"outputs\":[{\"internalType\":\"contract ITopUpAllowedRecipients\",\"name\":\"topUpAllowedRecipients\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easyTrack\",\"outputs\":[{\"internalType\":\"contract IEasyTrack\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evmScriptExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IAllowedRecipientsFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AllowedRecipientsBuilder", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ee60c6ebc91237d334230b12263e26ee3b480ec40000000000000000000000003e40d73eb977dc6a537af587d48316fee66e9c8c000000000000000000000000f0211b7660680b49de1a7e9f25c65660f0a13fea000000000000000000000000b9e5cbb9ca5b0d659238807e84d0176930753d8600000000000000000000000075100bd564415731b5936a4a94d0dc29dde5db3c", "EVMVersion": "istanbul", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}