{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farm/MasterChefV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\r\\n\\r\\npragma solidity 0.8.19;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../libraries/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/// @notice The (older) MasterChef contract gives out a constant number of BBC tokens per block.\\r\\n/// It is the only address with minting rights for BBC.\\r\\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\\r\\n/// that is deposited into the MasterChef V1 (MCV1) contract.\\r\\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.\\r\\ncontract MasterChefV2 is Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @notice Info of each MCV2 user.\\r\\n    /// `amount` LP token amount the user has provided.\\r\\n    /// `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\\r\\n    ///\\r\\n    /// We do some fancy math here. Basically, any point in time, the amount of BBCs\\r\\n    /// entitled to a user but is pending to be distributed is:\\r\\n    ///\\r\\n    ///   pending reward = (user share * pool.accBBCPerShare) - user.rewardDebt\\r\\n    ///\\r\\n    ///   Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n    ///   1. The pool's `accBBCPerShare` (and `lastRewardBlock`) gets updated.\\r\\n    ///   2. User receives the pending reward sent to his/her address.\\r\\n    ///   3. User's `amount` gets updated. Pool's `totalBoostedShare` gets updated.\\r\\n    ///   4. User's `rewardDebt` gets updated.\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n        uint256 boostMultiplier;\\r\\n    }\\r\\n\\r\\n    /// @notice Info of each MCV2 pool.\\r\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\r\\n    ///     Also known as the amount of \\\"multipliers\\\". Combined with `totalXAllocPoint`, it defines the % of\\r\\n    ///     BBC rewards each pool gets.\\r\\n    /// `accBBCPerShare` Accumulated BBCs per share, times 1e12.\\r\\n    /// `lastRewardBlock` Last block number that pool update action is executed.\\r\\n    /// `isRegular` The flag to set pool is regular or special. See below:\\r\\n    ///     In MasterChef V2 farms are \\\"regular pools\\\". \\\"special pools\\\", which use a different sets of\\r\\n    ///     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\\r\\n    ///     the BBC rewards to all the 9inchSwap products.\\r\\n    /// `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\\r\\n    struct PoolInfo {\\r\\n        uint256 accBBCPerShare;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 allocPoint;\\r\\n        uint256 totalBoostedShare;\\r\\n        bool isRegular;\\r\\n    }\\r\\n\\r\\n    /// @notice Address of BBC contract.\\r\\n    IERC20 public immutable BBC;\\r\\n\\r\\n    /// @notice The only address can withdraw all the burn BBC.\\r\\n    address public burnAdmin;\\r\\n    /// @notice The contract handles the share boosts.\\r\\n    address public boostContract;\\r\\n\\r\\n    /// @notice Info of each MCV2 pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n    /// @notice Address of the LP token for each MCV2 pool.\\r\\n    IERC20[] public lpToken;\\r\\n\\r\\n    /// @notice Info of each pool user.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\\r\\n    mapping(address => bool) public whiteList;\\r\\n\\r\\n    /// @notice\\r\\n\\r\\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\\r\\n    uint256 public totalRegularAllocPoint;\\r\\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\\r\\n    uint256 public totalSpecialAllocPoint;\\r\\n    ///  @notice 40 BBCs per block in MCV1\\r\\n    uint256 public constant MASTERCHEF_BBC_PER_BLOCK = 10 * 1e18;\\r\\n    uint256 public constant ACC_BBC_PRECISION = 1e18;\\r\\n\\r\\n    /// @notice Basic boost factor, none boosted user's boost factor\\r\\n    uint256 public constant BOOST_PRECISION = 10 * 1e10;\\r\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\r\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\r\\n    /// @notice total BBC rate = toBurn + toRegular + toSpecial\\r\\n    uint256 public constant BBC_RATE_TOTAL_PRECISION = 1e12;\\r\\n    /// @notice The last block number of BBC burn action being executed.\\r\\n    /// @notice BBC distribute % for burn\\r\\n    uint256 public bbcRateToBurn = 0; // 643750000000;\\r\\n    /// @notice BBC distribute % for regular farm pool\\r\\n    uint256 public bbcRateToRegularFarm = 9000000000000; // 62847222222\\r\\n    /// @notice BBC distribute % for special pools\\r\\n    uint256 public bbcRateToSpecialFarm = 1000000000000; // 293402777778\\r\\n\\r\\n    uint256 public lastBurnedBlock;\\r\\n\\r\\n    event Init();\\r\\n    event AddPool(\\r\\n        uint256 indexed pid,\\r\\n        uint256 allocPoint,\\r\\n        IERC20 indexed lpToken,\\r\\n        bool isRegular\\r\\n    );\\r\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\r\\n    event UpdatePool(\\r\\n        uint256 indexed pid,\\r\\n        uint256 lastRewardBlock,\\r\\n        uint256 lpSupply,\\r\\n        uint256 accBBCPerShare\\r\\n    );\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(\\r\\n        address indexed user,\\r\\n        uint256 indexed pid,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event UpdateBBCRate(\\r\\n        uint256 burnRate,\\r\\n        uint256 regularFarmRate,\\r\\n        uint256 specialFarmRate\\r\\n    );\\r\\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\\r\\n    event UpdateWhiteList(address indexed user, bool isValid);\\r\\n    event UpdateBoostContract(address indexed boostContract);\\r\\n    event UpdateBoostMultiplier(\\r\\n        address indexed user,\\r\\n        uint256 pid,\\r\\n        uint256 oldMultiplier,\\r\\n        uint256 newMultiplier\\r\\n    );\\r\\n\\r\\n    /// @param _BBC The BBC token contract address.\\r\\n    /// @param _burnAdmin The address of burn admin.\\r\\n    constructor(IERC20 _BBC, address _burnAdmin) {\\r\\n        require(\\r\\n            address(_BBC) != address(0),\\r\\n            \\\"MasterChefV2: _BBC address cannot be 0\\\"\\r\\n        );\\r\\n        require(\\r\\n            _burnAdmin != address(0),\\r\\n            \\\"MasterChefV2: _burnAdmin address cannot be 0\\\"\\r\\n        );\\r\\n        BBC = _BBC;\\r\\n        burnAdmin = _burnAdmin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if caller is not the boost contract.\\r\\n     */\\r\\n    modifier onlyBoostContract() {\\r\\n        require(\\r\\n            boostContract == msg.sender,\\r\\n            \\\"Ownable: caller is not the boost contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting permission of BBC.\\r\\n    /// It will transfer all the `dummyToken` in the tx sender address.\\r\\n    /// The allocation point for the dummy pool on MCV1 should be equal to the total amount of allocPoint.\\r\\n    function init() external onlyOwner {\\r\\n        lastBurnedBlock = block.number;\\r\\n        emit Init();\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the number of MCV2 pools.\\r\\n    function poolLength() public view returns (uint256 pools) {\\r\\n        pools = poolInfo.length;\\r\\n    }\\r\\n\\r\\n    /// @notice Add a new pool. Can only be called by the owner.\\r\\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    /// @param _allocPoint Number of allocation points for the new pool.\\r\\n    /// @param _lpToken Address of the LP BEP-20 token.\\r\\n    /// @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    /// only for BBC distributions within 9inchSwap products.\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        bool _isRegular,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner {\\r\\n        require(address(_lpToken) != address(0), \\\"MCV2: _lpToken is zero\\\");\\r\\n        require(_lpToken.balanceOf(address(this)) >= 0, \\\"None BEP20 tokens\\\");\\r\\n        // stake BBC token will cause staked token and reward token mixed up,\\r\\n        // may cause staked tokens withdraw as reward token,never do it.\\r\\n        require(_lpToken != BBC, \\\"BBC token can't be added to farm pools\\\");\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        if (_isRegular) {\\r\\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\\r\\n        } else {\\r\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\\r\\n        }\\r\\n        lpToken.push(_lpToken);\\r\\n\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                allocPoint: _allocPoint,\\r\\n                lastRewardBlock: block.number,\\r\\n                accBBCPerShare: 0,\\r\\n                isRegular: _isRegular,\\r\\n                totalBoostedShare: 0\\r\\n            })\\r\\n        );\\r\\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\\r\\n    }\\r\\n\\r\\n    /// @notice Update the given pool's BBC allocation point. Can only be called by the owner.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _allocPoint New number of allocation points for the pool.\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner {\\r\\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\\r\\n        updatePool(_pid);\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        if (poolInfo[_pid].isRegular) {\\r\\n            totalRegularAllocPoint = totalRegularAllocPoint\\r\\n                .sub(poolInfo[_pid].allocPoint)\\r\\n                .add(_allocPoint);\\r\\n        } else {\\r\\n            totalSpecialAllocPoint = totalSpecialAllocPoint\\r\\n                .sub(poolInfo[_pid].allocPoint)\\r\\n                .add(_allocPoint);\\r\\n        }\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n        emit SetPool(_pid, _allocPoint);\\r\\n    }\\r\\n\\r\\n    /// @notice View function for checking pending BBC rewards.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _user Address of the user.\\r\\n    function pendingBBC(\\r\\n        uint256 _pid,\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        PoolInfo memory pool = poolInfo[_pid];\\r\\n        UserInfo memory user = userInfo[_pid][_user];\\r\\n        uint256 accBBCPerShare = pool.accBBCPerShare;\\r\\n        uint256 lpSupply = pool.totalBoostedShare;\\r\\n\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n\\r\\n            uint256 bbcReward = multiplier\\r\\n                .mul(bbcPerBlock(pool.isRegular))\\r\\n                .mul(pool.allocPoint)\\r\\n                .div(\\r\\n                    (\\r\\n                        pool.isRegular\\r\\n                            ? totalRegularAllocPoint\\r\\n                            : totalSpecialAllocPoint\\r\\n                    )\\r\\n                );\\r\\n            accBBCPerShare = accBBCPerShare.add(\\r\\n                bbcReward.mul(ACC_BBC_PRECISION).div(lpSupply)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 boostedAmount = user\\r\\n            .amount\\r\\n            .mul(getBoostMultiplier(_user, _pid))\\r\\n            .div(BOOST_PRECISION);\\r\\n        return\\r\\n            boostedAmount.mul(accBBCPerShare).div(ACC_BBC_PRECISION).sub(\\r\\n                user.rewardDebt\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Update bbc reward for all the active pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            PoolInfo memory pool = poolInfo[pid];\\r\\n            if (pool.allocPoint != 0) {\\r\\n                updatePool(pid);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates and returns the `amount` of BBC per block.\\r\\n    /// @param _isRegular If the pool belongs to regular or special.\\r\\n    function bbcPerBlock(bool _isRegular) public view returns (uint256 amount) {\\r\\n        if (_isRegular) {\\r\\n            amount = MASTERCHEF_BBC_PER_BLOCK.mul(bbcRateToRegularFarm).div(\\r\\n                BBC_RATE_TOTAL_PRECISION\\r\\n            );\\r\\n        } else {\\r\\n            amount = MASTERCHEF_BBC_PER_BLOCK.mul(bbcRateToSpecialFarm).div(\\r\\n                BBC_RATE_TOTAL_PRECISION\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates and returns the `amount` of BBC per block to burn.\\r\\n    function bbcPerBlockToBurn() public view returns (uint256 amount) {\\r\\n        amount = MASTERCHEF_BBC_PER_BLOCK.mul(bbcRateToBurn).div(\\r\\n            BBC_RATE_TOTAL_PRECISION\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Update reward variables for the given pool.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @return pool Returns the pool that was updated.\\r\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\r\\n        pool = poolInfo[_pid];\\r\\n        if (block.number > pool.lastRewardBlock) {\\r\\n            uint256 lpSupply = pool.totalBoostedShare;\\r\\n            uint256 totalAllocPoint = (\\r\\n                pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint\\r\\n            );\\r\\n\\r\\n            if (lpSupply > 0 && totalAllocPoint > 0) {\\r\\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n                uint256 bbcReward = multiplier\\r\\n                    .mul(bbcPerBlock(pool.isRegular))\\r\\n                    .mul(pool.allocPoint)\\r\\n                    .div(totalAllocPoint);\\r\\n\\r\\n                (bool success, bytes memory data) = address(BBC).call(\\r\\n                    abi.encodeWithSelector(\\r\\n                        bytes4(keccak256(bytes(\\\"mint(uint256)\\\"))),\\r\\n                        bbcReward\\r\\n                    )\\r\\n                );\\r\\n                require(\\r\\n                    success && (data.length == 0 || abi.decode(data, (bool))),\\r\\n                    \\\"NineInch: Mint failed\\\"\\r\\n                );\\r\\n                //BBC.mint(bbcReward);\\r\\n                pool.accBBCPerShare = pool.accBBCPerShare.add(\\r\\n                    (bbcReward.mul(ACC_BBC_PRECISION).div(lpSupply))\\r\\n                );\\r\\n            }\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            poolInfo[_pid] = pool;\\r\\n            emit UpdatePool(\\r\\n                _pid,\\r\\n                pool.lastRewardBlock,\\r\\n                lpSupply,\\r\\n                pool.accBBCPerShare\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit LP tokens to pool.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _amount Amount of LP tokens to deposit.\\r\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n        PoolInfo memory pool = updatePool(_pid);\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        require(\\r\\n            pool.isRegular || whiteList[msg.sender],\\r\\n            \\\"MasterChefV2: The address is not available to deposit in this pool\\\"\\r\\n        );\\r\\n\\r\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            settlePendingBBC(msg.sender, _pid, multiplier);\\r\\n        }\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            uint256 before = lpToken[_pid].balanceOf(address(this));\\r\\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\r\\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\\r\\n            user.amount = user.amount.add(_amount);\\r\\n\\r\\n            // Update total boosted share.\\r\\n            pool.totalBoostedShare = pool.totalBoostedShare.add(\\r\\n                _amount.mul(multiplier).div(BOOST_PRECISION)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user\\r\\n            .amount\\r\\n            .mul(multiplier)\\r\\n            .div(BOOST_PRECISION)\\r\\n            .mul(pool.accBBCPerShare)\\r\\n            .div(ACC_BBC_PRECISION);\\r\\n        poolInfo[_pid] = pool;\\r\\n\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw LP tokens from pool.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    /// @param _amount Amount of LP tokens to withdraw.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\r\\n        PoolInfo memory pool = updatePool(_pid);\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient\\\");\\r\\n\\r\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\r\\n\\r\\n        settlePendingBBC(msg.sender, _pid, multiplier);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n            user.amount = user.amount.sub(_amount);\\r\\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = user\\r\\n            .amount\\r\\n            .mul(multiplier)\\r\\n            .div(BOOST_PRECISION)\\r\\n            .mul(pool.accBBCPerShare)\\r\\n            .div(ACC_BBC_PRECISION);\\r\\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\\r\\n            _amount.mul(multiplier).div(BOOST_PRECISION)\\r\\n        );\\r\\n\\r\\n        emit Withdraw(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\r\\n    /// @param _pid The id of the pool. See `poolInfo`.\\r\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n        uint256 amount = user.amount;\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        uint256 boostedAmount = amount\\r\\n            .mul(getBoostMultiplier(msg.sender, _pid))\\r\\n            .div(BOOST_PRECISION);\\r\\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount\\r\\n            ? pool.totalBoostedShare.sub(boostedAmount)\\r\\n            : 0;\\r\\n\\r\\n        // Note: transfer can fail or succeed if `amount` is zero.\\r\\n        lpToken[_pid].safeTransfer(msg.sender, amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Send BBC pending for burn to `burnAdmin`.\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    function burnBBC(bool _withUpdate) public onlyOwner {\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\\r\\n        uint256 pendingBBCToBurn = multiplier.mul(bbcPerBlockToBurn());\\r\\n\\r\\n        // SafeTransfer BBC\\r\\n        _safeTransfer(burnAdmin, pendingBBCToBurn);\\r\\n        lastBurnedBlock = block.number;\\r\\n    }\\r\\n\\r\\n    /// @notice Update the % of BBC distributions for burn, regular pools and special pools.\\r\\n    /// @param _burnRate The % of BBC to burn each block.\\r\\n    /// @param _regularFarmRate The % of BBC to regular pools each block.\\r\\n    /// @param _specialFarmRate The % of BBC to special pools each block.\\r\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\r\\n    function updateBBCRate(\\r\\n        uint256 _burnRate,\\r\\n        uint256 _regularFarmRate,\\r\\n        uint256 _specialFarmRate,\\r\\n        bool _withUpdate\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\\r\\n            \\\"MasterChefV2: BBC rate must be greater than 0\\\"\\r\\n        );\\r\\n        require(\\r\\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) ==\\r\\n                BBC_RATE_TOTAL_PRECISION,\\r\\n            \\\"MasterChefV2: Total rate must be 1e12\\\"\\r\\n        );\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        // burn bbc base on old burn bbc rate\\r\\n        burnBBC(false);\\r\\n\\r\\n        bbcRateToBurn = _burnRate;\\r\\n        bbcRateToRegularFarm = _regularFarmRate;\\r\\n        bbcRateToSpecialFarm = _specialFarmRate;\\r\\n\\r\\n        emit UpdateBBCRate(_burnRate, _regularFarmRate, _specialFarmRate);\\r\\n    }\\r\\n\\r\\n    /// @notice Update burn admin address.\\r\\n    /// @param _newAdmin The new burn admin address.\\r\\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\\r\\n        require(\\r\\n            _newAdmin != address(0),\\r\\n            \\\"MasterChefV2: Burn admin address must be valid\\\"\\r\\n        );\\r\\n        require(\\r\\n            _newAdmin != burnAdmin,\\r\\n            \\\"MasterChefV2: Burn admin address is the same with current address\\\"\\r\\n        );\\r\\n        address _oldAdmin = burnAdmin;\\r\\n        burnAdmin = _newAdmin;\\r\\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\\r\\n    }\\r\\n\\r\\n    /// @notice Update whitelisted addresses for special pools.\\r\\n    /// @param _user The address to be updated.\\r\\n    /// @param _isValid The flag for valid or invalid.\\r\\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\\r\\n        require(\\r\\n            _user != address(0),\\r\\n            \\\"MasterChefV2: The white list address must be valid\\\"\\r\\n        );\\r\\n\\r\\n        whiteList[_user] = _isValid;\\r\\n        emit UpdateWhiteList(_user, _isValid);\\r\\n    }\\r\\n\\r\\n    /// @notice Update boost contract address and max boost factor.\\r\\n    /// @param _newBoostContract The new address for handling all the share boosts.\\r\\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\\r\\n        require(\\r\\n            _newBoostContract != address(0) &&\\r\\n                _newBoostContract != boostContract,\\r\\n            \\\"MasterChefV2: New boost contract address must be valid\\\"\\r\\n        );\\r\\n\\r\\n        boostContract = _newBoostContract;\\r\\n        emit UpdateBoostContract(_newBoostContract);\\r\\n    }\\r\\n\\r\\n    /// @notice Update user boost factor.\\r\\n    /// @param _user The user address for boost factor updates.\\r\\n    /// @param _pid The pool id for the boost factor updates.\\r\\n    /// @param _newMultiplier New boost multiplier.\\r\\n    function updateBoostMultiplier(\\r\\n        address _user,\\r\\n        uint256 _pid,\\r\\n        uint256 _newMultiplier\\r\\n    ) external onlyBoostContract nonReentrant {\\r\\n        require(\\r\\n            _user != address(0),\\r\\n            \\\"MasterChefV2: The user address must be valid\\\"\\r\\n        );\\r\\n        require(\\r\\n            poolInfo[_pid].isRegular,\\r\\n            \\\"MasterChefV2: Only regular farm could be boosted\\\"\\r\\n        );\\r\\n        require(\\r\\n            _newMultiplier >= BOOST_PRECISION &&\\r\\n                _newMultiplier <= MAX_BOOST_PRECISION,\\r\\n            \\\"MasterChefV2: Invalid new boost multiplier\\\"\\r\\n        );\\r\\n\\r\\n        PoolInfo memory pool = updatePool(_pid);\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n\\r\\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\\r\\n        settlePendingBBC(_user, _pid, prevMultiplier);\\r\\n\\r\\n        user.rewardDebt = user\\r\\n            .amount\\r\\n            .mul(_newMultiplier)\\r\\n            .div(BOOST_PRECISION)\\r\\n            .mul(pool.accBBCPerShare)\\r\\n            .div(ACC_BBC_PRECISION);\\r\\n        pool.totalBoostedShare = pool\\r\\n            .totalBoostedShare\\r\\n            .sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION))\\r\\n            .add(user.amount.mul(_newMultiplier).div(BOOST_PRECISION));\\r\\n        poolInfo[_pid] = pool;\\r\\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\\r\\n\\r\\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\\r\\n    }\\r\\n\\r\\n    /// @notice Get user boost multiplier for specific pool id.\\r\\n    /// @param _user The user address.\\r\\n    /// @param _pid The pool id.\\r\\n    function getBoostMultiplier(\\r\\n        address _user,\\r\\n        uint256 _pid\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\\r\\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\\r\\n    }\\r\\n\\r\\n    /// @notice Settles, distribute the pending BBC rewards for given user.\\r\\n    /// @param _user The user address for settling rewards.\\r\\n    /// @param _pid The pool id.\\r\\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\\r\\n    function settlePendingBBC(\\r\\n        address _user,\\r\\n        uint256 _pid,\\r\\n        uint256 _boostMultiplier\\r\\n    ) internal {\\r\\n        UserInfo memory user = userInfo[_pid][_user];\\r\\n\\r\\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(\\r\\n            BOOST_PRECISION\\r\\n        );\\r\\n        uint256 accBBC = boostedAmount.mul(poolInfo[_pid].accBBCPerShare).div(\\r\\n            ACC_BBC_PRECISION\\r\\n        );\\r\\n        uint256 pending = accBBC.sub(user.rewardDebt);\\r\\n        // SafeTransfer BBC\\r\\n        _safeTransfer(_user, pending);\\r\\n    }\\r\\n\\r\\n    /// @notice Safe Transfer BBC.\\r\\n    /// @param _to The BBC receiver address.\\r\\n    /// @param _amount transfer BBC amounts.\\r\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\r\\n        if (_amount > 0) {\\r\\n            // Check whether MCV2 has enough BBC. If not, harvest from MCV1.\\r\\n            /*\\r\\n            if (BBC.balanceOf(address(this)) < _amount) {\\r\\n                harvestFromMasterChef();\\r\\n            }\\r\\n            */\\r\\n            uint256 balance = BBC.balanceOf(address(this));\\r\\n            if (balance < _amount) {\\r\\n                _amount = balance;\\r\\n            }\\r\\n            BBC.safeTransfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferOwnershipOfBBC(address _to) public onlyOwner {\\r\\n        Ownable(address(BBC)).transferOwnership(_to);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_BBC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"regularFarmRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"specialFarmRate\",\"type\":\"uint256\"}],\"name\":\"UpdateBBCRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"boostContract\",\"type\":\"address\"}],\"name\":\"UpdateBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateBoostMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"UpdateBurnAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accBBCPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_BBC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BBC_RATE_TOTAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTERCHEF_BBC_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isRegular\",\"type\":\"bool\"}],\"name\":\"bbcPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbcPerBlockToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbcRateToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbcRateToRegularFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbcRateToSpecialFarm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"burnBBC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getBoostMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBBC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accBBCPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRegularAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpecialAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfBBC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_regularFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_specialFarmRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updateBBCRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBoostContract\",\"type\":\"address\"}],\"name\":\"updateBoostContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"updateBurnAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accBBCPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostedShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChefV2.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"updateWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefV2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000015628ce9150db1bce2fbb717a09e846f8a324360000000000000000000000006d5fc6ac6e753f68d4f64cc7b605d925cf642d5e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}