{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\CappedToken.sol\r\n\r\n/**\r\n * @title Capped token\r\n * @dev Mintable token with a token cap.\r\n */\r\ncontract CappedToken is MintableToken {\r\n\r\n  uint256 public cap;\r\n\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(totalSupply_.add(_amount) <= cap);\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\DetailedERC20.sol\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts\\CoyToken.sol\r\n\r\n/**\r\n * @title COYToken\r\n * @dev CoinAnalyst's ERC20 Token.\r\n * Besides the standard ERC20 functionality, the token allows minting, batch minting, \r\n * burning, and assigning. Furthermore, it is a pausable capped token.\r\n * When paused, transfers are impossible.\r\n *\r\n * This contract is heavily based on the Open Zeppelin classes:\r\n * - CappedToken\r\n * - BurnableToken\r\n * - Pausable\r\n * - SafeMath\r\n */\r\ncontract CoyToken is CappedToken, BurnableToken, DetailedERC20, Pausable {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n    \r\n    string private constant COY_NAME = \"CoinAnalyst\";\r\n    string private constant COY_SYMBOL = \"COY\";\r\n    uint8 private constant COY_DECIMALS = 18;\r\n    \r\n    /** \r\n     * Define cap internally to later use for capped token.\r\n     * Using same number of decimal figures as ETH (i.e. 18).\r\n     * Maximum number of tokens in circulation: 3.75 billion.\r\n     */\r\n    uint256 private constant TOKEN_UNIT = 10 ** uint256(COY_DECIMALS);\r\n    uint256 private constant COY_CAP = (3.75 * 10 ** 9) * TOKEN_UNIT;\r\n    \r\n    // Token roles\r\n    address public minter;\r\n    address public assigner;\r\n    address public burner;\r\n\r\n    /**\r\n     * @dev Constructor that initializes the COYToken contract.\r\n     * @param _minter The minter account.\r\n     * @param _assigner The assigner account.\r\n     * @param _burner The burner account.\r\n     */\r\n    constructor(address _minter, address _assigner, address _burner) \r\n        CappedToken(COY_CAP) \r\n        DetailedERC20(COY_NAME, COY_SYMBOL, COY_DECIMALS)\r\n        public\r\n    {\r\n        require(_minter != address(0), \"Minter must be a valid non-null address\");\r\n        require(_assigner != address(0), \"Assigner must be a valid non-null address\");\r\n        require(_burner != address(0), \"Burner must be a valid non-null address\");\r\n\r\n        minter = _minter;\r\n        assigner = _assigner;\r\n        burner = _burner;\r\n    }\r\n\r\n    event MinterTransferred(address indexed _minter, address indexed _newMinter);\r\n    event AssignerTransferred(address indexed _assigner, address indexed _newAssigner);\r\n    event BurnerTransferred(address indexed _burner, address indexed _newBurner);\r\n    event BatchMint(uint256 _totalMintedTokens, uint256 _batchMintId);\r\n    event Assign(address indexed _to, uint256 _amount);\r\n    event BatchAssign(uint256 _totalAssignedTokens, uint256 _batchAssignId);\r\n    event BatchTransfer(uint256 _totalTransferredTokens, uint256 _batchTransferId);\r\n    \r\n    /** \r\n     * @dev Throws if called by any account other than the minter.\r\n     *      Override from MintableToken\r\n     */\r\n    modifier hasMintPermission() {\r\n        require(msg.sender == minter, \"Only the minter can do this.\");\r\n        _;\r\n    }\r\n    \r\n    /** \r\n     * @dev Throws if called by any account other than the assigner.\r\n     */\r\n    modifier hasAssignPermission() {\r\n        require(msg.sender == assigner, \"Only the assigner can do this.\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     *  @dev Throws if called by any account other than the burner.\r\n     */\r\n    modifier hasBurnPermission() {\r\n        require(msg.sender == burner, \"Only the burner can do this.\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     *  @dev Throws if minting period is still ongoing.\r\n     */\r\n    modifier whenMintingFinished() {\r\n        require(mintingFinished, \"Minting has to be finished.\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     *  @dev Allows the current owner to change the minter.\r\n     *  @param _newMinter The address of the new minter.\r\n     *  @return True if the operation was successful.\r\n     */\r\n    function setMinter(address _newMinter) external \r\n        canMint\r\n        onlyOwner \r\n        returns(bool) \r\n    {\r\n        require(_newMinter != address(0), \"New minter must be a valid non-null address\");\r\n        require(_newMinter != minter, \"New minter has to differ from previous minter\");\r\n\r\n        emit MinterTransferred(minter, _newMinter);\r\n        minter = _newMinter;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *  @dev Allows the current owner to change the assigner.\r\n     *  @param _newAssigner The address of the new assigner.\r\n     *  @return True if the operation was successful.\r\n     */\r\n    function setAssigner(address _newAssigner) external \r\n        onlyOwner \r\n        canMint\r\n        returns(bool) \r\n    {\r\n        require(_newAssigner != address(0), \"New assigner must be a valid non-null address\");\r\n        require(_newAssigner != assigner, \"New assigner has to differ from previous assigner\");\r\n\r\n        emit AssignerTransferred(assigner, _newAssigner);\r\n        assigner = _newAssigner;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     *  @dev Allows the current owner to change the burner.\r\n     *  @param _newBurner The address of the new burner.\r\n     *  @return True if the operation was successful.\r\n     */\r\n    function setBurner(address _newBurner) external \r\n        onlyOwner \r\n        returns(bool) \r\n    {\r\n        require(_newBurner != address(0), \"New burner must be a valid non-null address\");\r\n        require(_newBurner != burner, \"New burner has to differ from previous burner\");\r\n\r\n        emit BurnerTransferred(burner, _newBurner);\r\n        burner = _newBurner;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to batch mint tokens.\r\n     * @param _to An array of addresses that will receive the minted tokens.\r\n     * @param _amounts An array with the amounts of tokens each address will get minted.\r\n     * @param _batchMintId Identifier for the batch in order to synchronize with internal (off-chain) processes.\r\n     * @return A boolean that indicates whether the operation was successful.\r\n     */\r\n    function batchMint(address[] _to, uint256[] _amounts, uint256 _batchMintId) external\r\n        canMint\r\n        hasMintPermission\r\n        returns (bool) \r\n    {\r\n        require(_to.length == _amounts.length, \"Input arrays must have the same length\");\r\n        \r\n        uint256 totalMintedTokens = 0;\r\n        for (uint i = 0; i < _to.length; i++) {\r\n            mint(_to[i], _amounts[i]);\r\n            totalMintedTokens = totalMintedTokens.add(_amounts[i]);\r\n        }\r\n        \r\n        emit BatchMint(totalMintedTokens, _batchMintId);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to assign any number of tokens to a given address.\r\n     *      Compared to the `mint` function, the `assign` function allows not just to increase but also to decrease\r\n     *      the number of tokens of an address by assigning a lower value than the address current balance.\r\n     *      This function can only be executed during initial token sale.\r\n     * @param _to The address that will receive the assigned tokens.\r\n     * @param _amount The amount of tokens to assign.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function assign(address _to, uint256 _amount) public \r\n        canMint\r\n        hasAssignPermission \r\n        returns(bool) \r\n    {\r\n        // The desired value to assign (`_amount`) can be either higher or lower than the current number of tokens\r\n        // of the address (`balances[_to]`). To calculate the new `totalSupply_` value, the difference between `_amount`\r\n        // and `balances[_to]` (`delta`) is calculated first, and then added or substracted to `totalSupply_` accordingly.\r\n        uint256 delta = 0;\r\n        if (balances[_to] < _amount) {\r\n            // balances[_to] will be increased, so totalSupply_ should be increased\r\n            delta = _amount.sub(balances[_to]);\r\n            totalSupply_ = totalSupply_.add(delta);\r\n            require(totalSupply_ <= cap, \"Total supply cannot be higher than cap\");\r\n            emit Transfer(address(0), _to, delta); // conformity to mint and burn functions for easier balance retrieval via event logs\r\n        } else {\r\n            // balances[_to] will be decreased, so totalSupply_ should be decreased\r\n            delta = balances[_to].sub(_amount);\r\n            totalSupply_ = totalSupply_.sub(delta);\r\n            emit Transfer(_to, address(0), delta); // conformity to mint and burn functions for easier balance retrieval via event logs\r\n        }\r\n        \r\n        require(delta > 0, \"Delta should not be zero\");\r\n\r\n        balances[_to] = _amount;\r\n        emit Assign(_to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Function to assign a list of numbers of tokens to a given list of addresses.\r\n     * @param _to The addresses that will receive the assigned tokens.\r\n     * @param _amounts The amounts of tokens to assign.\r\n     * @param _batchAssignId Identifier for the batch in order to synchronize with internal (off-chain) processes.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function batchAssign(address[] _to, uint256[] _amounts, uint256 _batchAssignId) external\r\n        canMint\r\n        hasAssignPermission\r\n        returns (bool) \r\n    {\r\n        require(_to.length == _amounts.length, \"Input arrays must have the same length\");\r\n        \r\n        uint256 totalAssignedTokens = 0;\r\n        for (uint i = 0; i < _to.length; i++) {\r\n            assign(_to[i], _amounts[i]);\r\n            totalAssignedTokens = totalAssignedTokens.add(_amounts[i]);\r\n        }\r\n        \r\n        emit BatchAssign(totalAssignedTokens, _batchAssignId);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public\r\n        hasBurnPermission\r\n    {\r\n        super.burn(_value);\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address when minting is finished.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public\r\n        whenMintingFinished\r\n        whenNotPaused\r\n        returns (bool) \r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another when minting is finished.\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public\r\n        whenMintingFinished\r\n        whenNotPaused\r\n        returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer tokens from one address to several others when minting is finished.\r\n     * @param _to addresses The addresses which you want to transfer to\r\n     * @param _amounts uint256 the amounts of tokens to be transferred\r\n     * @param _batchTransferId Identifier for the batch in order to synchronize with internal (off-chain) processes.\r\n     */\r\n    function transferInBatches(address[] _to, uint256[] _amounts, uint256 _batchTransferId) public\r\n        whenMintingFinished\r\n        whenNotPaused\r\n        returns (bool) \r\n    {\r\n        require(_to.length == _amounts.length, \"Input arrays must have the same length\");\r\n        \r\n        uint256 totalTransferredTokens = 0;\r\n        for (uint i = 0; i < _to.length; i++) {\r\n            transfer(_to[i], _amounts[i]);\r\n            totalTransferredTokens = totalTransferredTokens.add(_amounts[i]);\r\n        }\r\n        \r\n        emit BatchTransfer(totalTransferredTokens, _batchTransferId);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_batchMintId\",\"type\":\"uint256\"}],\"name\":\"batchMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_batchAssignId\",\"type\":\"uint256\"}],\"name\":\"batchAssign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBurner\",\"type\":\"address\"}],\"name\":\"setBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_batchTransferId\",\"type\":\"uint256\"}],\"name\":\"transferInBatches\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"assign\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAssigner\",\"type\":\"address\"}],\"name\":\"setAssigner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_assigner\",\"type\":\"address\"},{\"name\":\"_burner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_minter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"MinterTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_assigner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newAssigner\",\"type\":\"address\"}],\"name\":\"AssignerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newBurner\",\"type\":\"address\"}],\"name\":\"BurnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalMintedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_batchMintId\",\"type\":\"uint256\"}],\"name\":\"BatchMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Assign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalAssignedTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_batchAssignId\",\"type\":\"uint256\"}],\"name\":\"BatchAssign\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalTransferredTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_batchTransferId\",\"type\":\"uint256\"}],\"name\":\"BatchTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "CoyToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000070b31d52b208322d01314901b14941190da2c1b000000000000000000000000070b31d52b208322d01314901b14941190da2c1b000000000000000000000000070b31d52b208322d01314901b14941190da2c1b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://424cf3f1fa0fb24783510c9496b38f878c278e7443f883f75512abf3003b2622"}