{"SourceCode": "pragma solidity 0.5.16;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n\r\n/// @author BlockBen\r\n/// @title BNOXToken Adminrole\r\n/// @notice BNOXToken Adminrole implementation\r\ncontract BNOXAdminRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    /// @notice superadmin on paper wallet for worst case key compromise\r\n    address _superadmin;\r\n\r\n    /// @notice list (mapping) of BNOX admins\r\n    Roles.Role _BNOXAdmins;\r\n\r\n    /// @notice list (mapping) of Treasury admins can only mint or burn\r\n    Roles.Role _TreasuryAdmins;\r\n\r\n    /// @notice list (mapping) of KYC admins can only whitelist and blacklist addresses\r\n    Roles.Role _KYCAdmins;\r\n\r\n    /// @notice Event for Admin addedd\r\n    event BNOXAdminAdded(address indexed account);\r\n    /// @notice Event for Admin removed\r\n    event BNOXAdminRemoved(address indexed account);\r\n    /// @notice Event for adding treasury admin\r\n    event BNOXTreasuryAdminAdded(address indexed account);\r\n    /// @notice Event for rmoving treasury admin\r\n    event BNOXTreasuryAdminRemoved(address indexed account);\r\n    /// @notice Event for adding KYC admin\r\n    event BNOXKYCAdminAdded(address indexed account);\r\n    /// @notice Event for rmoving KYC admin\r\n    event BNOXKYCAdminRemoved(address indexed account);\r\n\r\n    // constructor setting the superadmin and adding deployer as admin\r\n    constructor (address superadmin) internal {\r\n        _superadmin = superadmin;\r\n        _BNOXAdmins.add(_msgSender());\r\n        emit BNOXAdminAdded(_msgSender());\r\n    }\r\n\r\n    /// @notice Modifyer checking if the caller is a BNOX admin\r\n    modifier onlyBNOXAdmin() {\r\n        require((isBNOXAdmin(_msgSender()) || (_msgSender() == _superadmin)), \"BNOXAdmin: caller does not have the BNOXAdmin role\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifyer checking if the caller is a Treasury admin\r\n    modifier onlyTreasuryAdmin() {\r\n        require(isTreasuryAdmin(_msgSender()), \"Treasury admin: caller does not have the TreasuryAdmin role\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifyer checking if the caller is a KYC admin\r\n    modifier onlyKYCAdmin() {\r\n        require(isKYCAdmin(_msgSender()), \"KYC admin: caller does not have the KYCAdmin role\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Checking if the address is a KYC admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be checked\r\n    /// @return true if the account is a KYC admin\r\n    function isKYCAdmin(address account) public view returns (bool) {\r\n        return _KYCAdmins.has(account);\r\n    }\r\n\r\n    /// @notice Checking if the address is a Treasury admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be checked\r\n    /// @return true if the account is a treasury admin\r\n    function isTreasuryAdmin(address account) public view returns (bool) {\r\n        return _TreasuryAdmins.has(account);\r\n    }\r\n\r\n    /// @notice Checking if the address is a BNOX admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be checked\r\n    /// @return true if the account is an admin\r\n    function isBNOXAdmin(address account) public view returns (bool) {\r\n        return _BNOXAdmins.has(account);\r\n    }\r\n\r\n    /// @notice Adding an account as a BNOX admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be added\r\n    function addBNOXAdmin(address account) external onlyBNOXAdmin {\r\n        _BNOXAdmins.add(account);\r\n        emit BNOXAdminAdded(account);\r\n    }\r\n\r\n    /// @notice Removing an account as a BNOX admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be added\r\n    function removeBNOXAdmin(address account) external onlyBNOXAdmin {\r\n        _BNOXAdmins.remove(account);\r\n        emit BNOXAdminRemoved(account);\r\n    }\r\n\r\n    /// @notice Adding an account as a Treasury admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be added\r\n    function addTreasuryAdmin(address account) external onlyBNOXAdmin {\r\n        _TreasuryAdmins.add(account);\r\n        emit BNOXTreasuryAdminAdded(account);\r\n    }\r\n\r\n    /// @notice Removing an account as a Treasury admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be removed\r\n    function removeTreasuryAdmin(address account) external onlyBNOXAdmin {\r\n        _TreasuryAdmins.remove(account);\r\n        emit BNOXTreasuryAdminRemoved(account);\r\n    }\r\n\r\n    /// @notice Adding an account as a KYC admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be added\r\n    function addKYCAdmin(address account) external onlyBNOXAdmin {\r\n        _KYCAdmins.add(account);\r\n        emit BNOXKYCAdminAdded(account);\r\n    }\r\n\r\n    /// @notice Removing an account as a KYC admin\r\n    /// @dev ...\r\n    /// @param account The address of the account to be removed\r\n    function removeKYCAdmin(address account) external onlyBNOXAdmin {\r\n        _KYCAdmins.remove(account);\r\n        emit BNOXKYCAdminRemoved(account);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/// @author Blockben\r\n/// @title BNOXToken KYC specific extentions of the token functionalities\r\n/// @notice BNOXToken extentions for handling source and destination KYC\r\ncontract BNOXAdminExt is BNOXAdminRole {\r\n\r\n    /// @notice administrating locks for the source contracts\r\n    mapping(address => bool) _sourceAccountWL;\r\n\r\n    /// @notice administrating locks for the destination contracts\r\n    mapping(address => bool) _destinationAccountWL;\r\n\r\n    /// @notice url for external verification\r\n    string public url;\r\n\r\n    /// @notice addres for collecting and burning tokens\r\n    address public treasuryAddress;\r\n\r\n    /// @notice addres for fee\r\n    address public feeAddress;\r\n\r\n    /// @notice addres for bsopool\r\n    address public bsopoolAddress;\r\n\r\n    /// @notice general transaction fee\r\n    uint16 public generalFee;\r\n\r\n    /// @notice bso transaction fee\r\n    uint16 public bsoFee;\r\n\r\n    /// @notice basic functionality can be paused\r\n    bool public paused;\r\n\r\n    /// @notice Event for locking or unlocking a source account\r\n    event BNOXSourceAccountWL(address indexed account, bool lockValue);\r\n    /// @notice Event for locking or unlocking a destination account\r\n    event BNOXDestinationAccountWL(address indexed account, bool lockValue);\r\n    /// @notice Event for locking or unlocking a destination account\r\n    event BNOXUrlSet(string ulr);\r\n    /// @notice Event for changing the terasury address\r\n    event BNOXTreasuryAddressChange(address newAddress);\r\n    /// @notice Event for changing the fee address\r\n    event BNOXFeeAddressChange(address newAddress);\r\n    /// @notice Event for changing the bsopool address\r\n    event BNOXBSOPOOLAddressChange(address newAddress);\r\n    /// @notice Event for changing the general fee\r\n    event BNOXGeneralFeeChange(uint256 newFee);\r\n    /// @notice Event for changing the bso fee\r\n    event BNOXBSOFeeChange(uint256 newFee);\r\n    /// @notice Token is paused by the account\r\n    event BNOXPaused(address account);\r\n    /// @notice Token is un-paused by the account\r\n    event BNOXUnpaused(address account);\r\n\r\n    // constructor setting the contract unpaused and delegating the superadmin\r\n    constructor (address superadmin) BNOXAdminRole(superadmin) internal {\r\n        paused = false;\r\n    }\r\n\r\n    /// @notice Modifier only if not paused\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"The token is paused!\");\r\n        _;\r\n    }\r\n\r\n    /// @notice getting if an address is locked as a source address\r\n    /// @dev ...\r\n    /// @param sourceAddress The address of the account to be checked\r\n    function getSourceAccountWL(address sourceAddress) public view returns (bool) {\r\n        return _sourceAccountWL[sourceAddress];\r\n    }\r\n\r\n    /// @notice getting if an address is locked as a destinationAddress\r\n    /// @dev ...\r\n    /// @param destinationAddress The address of the account to be checked\r\n    function getDestinationAccountWL(address destinationAddress) public view returns (bool) {\r\n        return _destinationAccountWL[destinationAddress];\r\n    }\r\n\r\n    /// @notice setting if an address is locked as a source address\r\n    /// @dev ...\r\n    /// @param sourceAddress The address of the account to be checked\r\n    function setSourceAccountWL(address sourceAddress, bool lockValue) external onlyKYCAdmin {\r\n        _sourceAccountWL[sourceAddress] = lockValue;\r\n        emit BNOXSourceAccountWL(sourceAddress, lockValue);\r\n    }\r\n\r\n    /// @notice setting if an address is locked as a destination address\r\n    /// @dev ...\r\n    /// @param destinationAddress The address of the account to be checked\r\n    function setDestinationAccountWL(address destinationAddress, bool lockValue) external onlyKYCAdmin {\r\n        _destinationAccountWL[destinationAddress] = lockValue;\r\n        emit BNOXDestinationAccountWL(destinationAddress, lockValue);\r\n    }\r\n\r\n    /// @notice setting the url referring to the documentation\r\n    /// @dev ...\r\n    /// @param newUrl The new url\r\n    function setUrl(string calldata newUrl) external onlyBNOXAdmin {\r\n        url = newUrl;\r\n        emit BNOXUrlSet(newUrl);\r\n    }\r\n\r\n    /// @notice setting a new address for treasuryAddress\r\n    /// @dev ...\r\n    /// @param newAddress The new address to set\r\n    function setTreasuryAddress(address newAddress) external onlyBNOXAdmin {\r\n        treasuryAddress = newAddress;\r\n        emit BNOXTreasuryAddressChange(newAddress);\r\n    }\r\n\r\n    /// @notice setting a new address for feeAddress\r\n    /// @dev ...\r\n    /// @param newAddress The new address to set\r\n    function setFeeAddress(address newAddress) external onlyBNOXAdmin {\r\n        feeAddress = newAddress;\r\n        emit BNOXFeeAddressChange(newAddress);\r\n    }\r\n\r\n    /// @notice setting a new address for feeAddress\r\n    /// @dev ...\r\n    /// @param newAddress The new address to set\r\n    function setBsopoolAddress(address newAddress) external onlyBNOXAdmin {\r\n        bsopoolAddress = newAddress;\r\n        emit BNOXBSOPOOLAddressChange(newAddress);\r\n    }\r\n\r\n    /// @notice setting a new general fee\r\n    /// @dev ...\r\n    /// @param newFee The new fee to set\r\n    function setGeneralFee(uint16 newFee) external onlyBNOXAdmin {\r\n        generalFee = newFee;\r\n        emit BNOXGeneralFeeChange(newFee);\r\n    }\r\n\r\n    /// @notice setting a new bsoFee fee\r\n    /// @dev ...\r\n    /// @param newFee The new fee to set\r\n    function setBsoFee(uint16 newFee) external onlyBNOXAdmin {\r\n        bsoFee = newFee;\r\n        emit BNOXBSOFeeChange(newFee);\r\n    }\r\n\r\n    /// @notice pause the contract\r\n    /// @dev ...\r\n    function pause() external onlyBNOXAdmin {\r\n        require(paused == false, \"The contract is already paused\");\r\n        paused = true;\r\n        emit BNOXPaused(_msgSender());\r\n    }\r\n\r\n    /// @notice un-pause the contract\r\n    /// @dev ...\r\n    function unpause() external onlyBNOXAdmin {\r\n        paused = false;\r\n        emit BNOXUnpaused(_msgSender());\r\n    }\r\n\r\n}\r\n\r\n/// @author Blockben\r\n/// @title BNOXToken standard extentions for the token functionalities\r\n/// @notice BNOXToken extentions for mint, burn and kill\r\ncontract BNOXStandardExt is BNOXAdminExt, ERC20 {\r\n\r\n    // constructor delegating superadmin role to the BNOXAdminRole\r\n    constructor (address superadmin) BNOXAdminExt(superadmin) internal {\r\n    }\r\n\r\n    /// @notice transfer BNOX token, only if not paused\r\n    /// @dev ...\r\n    /// @param to The address of the account to be transferred\r\n    /// @param value The amount of token to be transferred\r\n    /// @return true if everything is cool\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        _transfer(_msgSender(), to, value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice transferFrom BNOX token, only if not paused\r\n    /// @dev ...\r\n    /// @param from The address transferred from\r\n    /// @param to The amount transferred to\r\n    /// @param value The amount of token to be transferred\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /// @notice approve BNOX token to be moved with tranferFrom, only if not paused\r\n    /// @dev ...\r\n    /// @param spender The address to be approved\r\n    /// @param value The amount of token to be allowed to be transferred\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        require((value == 0) || (allowance(msg.sender, spender) == 0), \"approve must be set to zero first\");\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    /// @notice increase approved BNOX token, only if not paused\r\n    /// @dev ...\r\n    /// @param spender The address to be approved\r\n    /// @param addedValue The amount of token to be allowed to be transferred\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    /// @notice decrease approved BNOX token, only if not paused\r\n    /// @dev ...\r\n    /// @param spender The address to be approved\r\n    /// @param subtractedValue The amount of token to be allowed to be transferred\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n\r\n    /// @notice mint BNOX token, only Treasury admin, only if no paused\r\n    /// @dev ...\r\n    /// @param account The address of the account to be minted\r\n    /// @param amount The amount of token to be minted\r\n    /// @return true if everything is cool\r\n    function mint(address account, uint256 amount) external onlyTreasuryAdmin whenNotPaused returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice burning BNOX token from the treasury account, only if not paused\r\n    /// @dev ...\r\n    /// @param amount The amount of token to be burned\r\n    function burn(uint256 amount) external onlyTreasuryAdmin whenNotPaused {\r\n        require(getSourceAccountWL(treasuryAddress) == true, \"Treasury address is locked by the source account whitelist\");\r\n        _burnFrom(treasuryAddress, amount);\r\n    }\r\n\r\n    /// @notice killing the contract, only paused contract can be killed by the admin\r\n    /// @dev ...\r\n    /// @param toChashOut The address where the ether of the token should be sent\r\n    function kill(address payable toChashOut) external onlyBNOXAdmin {\r\n        require (paused == true, \"only paused contract can be killed\");\r\n        selfdestruct(toChashOut);\r\n    }\r\n\r\n    /// @notice mint override to consider address lock for KYC\r\n    /// @dev ...\r\n    /// @param account The address where token is mineted\r\n    /// @param amount The amount to be minted\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(getDestinationAccountWL(account) == true, \"Target account is locked by the destination account whitelist\");\r\n\r\n        super._mint(account, amount);\r\n    }\r\n\r\n    /// @notice transfer override to consider locks for KYC\r\n    /// @dev ...\r\n    /// @param sender The address from where the token sent\r\n    /// @param recipient Recipient address\r\n    /// @param amount The amount to be transferred\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(getSourceAccountWL(sender) == true, \"Sender account is not unlocked by the source account whitelist\");\r\n        require(getDestinationAccountWL(recipient) == true, \"Target account is not unlocked by the destination account whitelist\");\r\n        require(getDestinationAccountWL(feeAddress) == true, \"General fee account is not unlocked by the destination account whitelist\");\r\n        require(getDestinationAccountWL(bsopoolAddress) == true, \"Bso pool account is not unlocked by the destination account whitelist\");\r\n\r\n        // transfer to the trasuryAddress or transfer from the treasuryAddress do not cost transaction fee\r\n        if((sender == treasuryAddress) || (recipient == treasuryAddress)){\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n        else {\r\n\r\n            // three decimal in percent\r\n            // The decimalcorrection is 100.000, but to avoid rounding errors, first use 10.000 and\r\n            // where we use decimalCorrection the calculation must add 5 and divide 10 at the and\r\n            uint256 decimalCorrection = 10000;\r\n\r\n            // calculate and transfer fee\r\n            uint256 generalFee256 = generalFee;\r\n\r\n            uint256 bsoFee256 = bsoFee;\r\n\r\n            uint256 totalFee = generalFee256.add(bsoFee256);\r\n\r\n            // To avoid rounding errors add 5 and then div by 10. Read comment at decimalCorrection\r\n            uint256 amountTotal = amount.mul(totalFee).div(decimalCorrection).add(5).div(10);\r\n\r\n            // To avoid rounding errors add 5 and then div by 10. Read comment at decimalCorrection\r\n            uint256 amountBso = amount.mul(bsoFee256).div(decimalCorrection).add(5).div(10);\r\n\r\n            uint256 amountGeneral = amountTotal.sub(amountBso);\r\n\r\n            uint256 amountRest = amount.sub(amountTotal);\r\n\r\n            super._transfer(sender, recipient, amountRest);\r\n            super._transfer(sender, feeAddress, amountGeneral);\r\n            super._transfer(sender, bsopoolAddress, amountBso);\r\n        }\r\n    }\r\n}\r\n\r\n/// @author Blockben\r\n/// @title BNOXToken\r\n/// @notice BNOXToken implementation\r\ncontract BNOXToken is BNOXStandardExt, ERC20Detailed {\r\n\r\n    /// @notice Constructor: creating initial supply and setting one admin\r\n    /// @dev Not working with decimal numbers\r\n    /// @param superadmin superadmnin of the token\r\n    constructor(address superadmin) BNOXStandardExt(superadmin) ERC20Detailed(\"BlockNoteX\", \"BNOX\", 2) public {\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superadmin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"BNOXBSOFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"BNOXBSOPOOLAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lockValue\",\"type\":\"bool\"}],\"name\":\"BNOXDestinationAccountWL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"BNOXFeeAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"BNOXGeneralFeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXKYCAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXKYCAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lockValue\",\"type\":\"bool\"}],\"name\":\"BNOXSourceAccountWL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"BNOXTreasuryAddressChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXTreasuryAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXTreasuryAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BNOXUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ulr\",\"type\":\"string\"}],\"name\":\"BNOXUrlSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBNOXAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKYCAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTreasuryAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bsoFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bsopoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generalFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"getDestinationAccountWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"}],\"name\":\"getSourceAccountWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBNOXAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKYCAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTreasuryAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"toChashOut\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBNOXAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeKYCAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeTreasuryAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"setBsoFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setBsopoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lockValue\",\"type\":\"bool\"}],\"name\":\"setDestinationAccountWL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"setGeneralFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"lockValue\",\"type\":\"bool\"}],\"name\":\"setSourceAccountWL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUrl\",\"type\":\"string\"}],\"name\":\"setUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BNOXToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ed40c115447c9101cdd7c7e0c0b3880f8f743ce", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c16160d427b17e1baf0528b97fe286b3aec209a637a2ec2a48164438c56e19b9"}