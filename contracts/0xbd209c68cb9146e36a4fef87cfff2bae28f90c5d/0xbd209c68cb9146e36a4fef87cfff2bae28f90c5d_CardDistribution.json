{"SourceCode": "// TG: @BR_BIGBOSS DEV Copyrights\r\n// TG: @madapeeth\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract CardDistribution {\r\n    address public owner;\r\n    IERC20 public constant usdtToken = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address payable public constant receivingWallet = payable(0xfc4bC2A11636c9634613a693e9BBd28A5cFe144D);\r\n\r\n    enum CardLevel { NONE, LEVEL1, LEVEL2, LEVEL3, LEVEL4, LEVEL5, LEVEL6 }\r\n    mapping(CardLevel => uint256) public cardPrices;\r\n    mapping(CardLevel => uint256) public distributionPercentages;\r\n    mapping(address => CardLevel) public userCardLevels;\r\n    mapping(CardLevel => address[]) public cardHolders;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n\r\n        // Set Card Prices\r\n        cardPrices[CardLevel.LEVEL1] = 49e6;\r\n        cardPrices[CardLevel.LEVEL2] = 149e6;\r\n        cardPrices[CardLevel.LEVEL3] = 449e6;\r\n        cardPrices[CardLevel.LEVEL4] = 899e6;\r\n        cardPrices[CardLevel.LEVEL5] = 1199e6;\r\n        cardPrices[CardLevel.LEVEL6] = 1499e6;\r\n\r\n        // Set Distribution Percentages\r\n        distributionPercentages[CardLevel.LEVEL1] = 1;\r\n        distributionPercentages[CardLevel.LEVEL2] = 5;\r\n        distributionPercentages[CardLevel.LEVEL3] = 9;\r\n        distributionPercentages[CardLevel.LEVEL4] = 15;\r\n        distributionPercentages[CardLevel.LEVEL5] = 25;\r\n        distributionPercentages[CardLevel.LEVEL6] = 45;\r\n    }\r\n\r\n    function checkCardLevel(address user) external view returns (CardLevel) {\r\n        return userCardLevels[user];\r\n    }\r\n\r\n    function withdrawStuckETH(uint256 amount) external onlyOwner {\r\n        require(address(this).balance >= amount, \"Insufficient balance\");\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function buyOrUpgradeCard() external {\r\n        CardLevel currentLevel = userCardLevels[msg.sender];\r\n        require(currentLevel != CardLevel.LEVEL6, \"Already at max level\");\r\n\r\n        CardLevel nextLevel = CardLevel(uint256(currentLevel) + 1);\r\n        uint256 cardPrice = cardPrices[nextLevel];\r\n        require(usdtToken.transferFrom(msg.sender, receivingWallet, cardPrice), \"Transfer failed\");\r\n\r\n        // If user already has a card, remove them from their current level's cardHolders list\r\n        if (currentLevel != CardLevel.NONE) {\r\n            address[] storage currentHolders = cardHolders[currentLevel];\r\n            for (uint i = 0; i < currentHolders.length; i++) {\r\n                if (currentHolders[i] == msg.sender) {\r\n                    currentHolders[i] = currentHolders[currentHolders.length - 1];\r\n                    currentHolders.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update user's card level and add them to the new level's cardHolders list\r\n        userCardLevels[msg.sender] = nextLevel;\r\n        cardHolders[nextLevel].push(msg.sender);\r\n    }\r\n\r\n    function distribute(uint256 amount) external onlyOwner {\r\n        for (uint8 i = 1; i <= 6; i++) {\r\n            CardLevel level = CardLevel(i);\r\n            uint256 totalShare = (amount * distributionPercentages[level]) / 100;\r\n            address[] memory holders = cardHolders[level];\r\n\r\n            if (holders.length == 0) {\r\n                require(usdtToken.transfer(receivingWallet, totalShare), \"Transfer to owner failed\");\r\n                continue;\r\n            }\r\n\r\n            uint256 individualShare = totalShare / holders.length;\r\n            for (uint j = 0; j < holders.length; j++) {\r\n                require(usdtToken.transfer(holders[j], individualShare), \"Distribution failed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeUser(address user) external onlyOwner {\r\n        CardLevel level = userCardLevels[user];\r\n        require(level != CardLevel.NONE, \"User not found\");\r\n\r\n        address[] storage holders = cardHolders[level];\r\n        for (uint i = 0; i < holders.length; i++) {\r\n            if (holders[i] == user) {\r\n                holders[i] = holders[holders.length - 1];\r\n                holders.pop();\r\n                break;\r\n            }\r\n        }\r\n        delete userCardLevels[user];\r\n    }\r\n\r\n    function retrieveTokens(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(owner, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"buyOrUpgradeCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CardDistribution.CardLevel\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CardDistribution.CardLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"cardPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkCardLevel\",\"outputs\":[{\"internalType\":\"enum CardDistribution.CardLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CardDistribution.CardLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"distributionPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCardLevels\",\"outputs\":[{\"internalType\":\"enum CardDistribution.CardLevel\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CardDistribution", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54e497634cc948583407c8db9836a867a013d00248b6c3a2fbbf08a977719fe6"}