{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IEthRegistrarController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IPriceOracle.sol\\\";\\n\\ninterface IEthRegistrarController {\\n    function rentPrice(\\n        string memory,\\n        uint256\\n    ) external view returns (IPriceOracle.Price memory);\\n\\n    function available(string memory) external returns (bool);\\n\\n    function makeCommitment(\\n        string memory name,\\n        address owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32) external;\\n\\n    function register(\\n        string memory name,\\n        address owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) external payable;\\n\\n    function renew(string calldata, uint256) external payable;\\n}\"\r\n    },\r\n    \"contracts/interfaces/INamekitEthRegistrar.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface INamekitEthRegistrar {\\n    \\n    error WithdrawError();\\n    error Unauthorized();\\n\\n    function generateReservationNumber(\\n        string memory label,\\n        address owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) view external returns(bytes32 reservationNumber);\\n\\n    function requestPermissionToRegister(bytes32 reservationNumber) external;\\n    \\n    function completeRegistration(\\n        string memory label,\\n        address owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) external payable;\\n\\n    function extendRegistration(string calldata label, uint256 duration) external payable;\\n\\n    function withdraw() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\ninterface IPriceOracle {\\n    struct Price {\\n        uint256 base;\\n        uint256 premium;\\n    }\\n\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (Price calldata);\\n}\"\r\n    },\r\n    \"contracts/NamekitEthRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ==============================================================\\n// |  \u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557  |\\n// |  \u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d  |\\n// |  \u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2550\u255d\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591  |\\n// |  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2554\u2550\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591  |\\n// |  \u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2550\u255d\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591  |\\n// |  \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591  |\\n// ==============================================================\\n// =================== NamekitEthRegistrar ======================\\n// ==============================================================\\n// About NameKit: https://namekit.io/\\n// NameHash repos: https://github.com/namehash\\n\\nimport \\\"./interfaces/IEthRegistrarController.sol\\\";\\nimport \\\"./interfaces/INamekitEthRegistrar.sol\\\";\\n\\n/**\\n * @title NameKit .ETH Registrar\\n * @author @alextnetto - blockful.io\\n * @dev Register ENS names under .eth TLD\\n */\\ncontract NamekitEthRegistrar is INamekitEthRegistrar {\\n    /// @notice Treasury address for your NameKit deployment\\n    address public immutable treasury;\\n    /// @notice ENS EthRegistrarController smart contract address\\n    IEthRegistrarController public ethRegistrarController;\\n    /// @notice address that can set ethRegistrarController address\\n    address private temporaryAdmin;\\n\\n    /**\\n     * @dev Initialize variables for your NameKit deployment treasury and the official ENS .eth registrar\\n     */\\n    constructor(address _treasury) {\\n        treasury = _treasury;\\n        temporaryAdmin = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Enable collection of refunds\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Enable collection of refunds\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @notice Generate a unique reservation number for registering a .eth domain with the Ethereum Name Service (ENS).\\n     * @dev This wrapper function seeks to improve the UX of what a user might be asked to confirm in their wallet.\\n     * The \\\"label\\\" param is a corrected naming of the \\\"name\\\" param on EthRegistrarController, which is actually a label.\\n     * The \\\"salt\\\" param is the \\\"secret\\\" param on EthRegistrarController\\n     * The \\\"resolverRecords\\\" param is the \\\"data\\\" param on EthRegistrarController\\n     * The \\\"setPrimaryName\\\" param is the \\\"reverseRecord\\\" param on EthRegistrarController\\n     * The \\\"nameWrapperFuses\\\" param is the \\\"ownerControlledFuses\\\" param on EthRegistrarController\\n     * @param label Label to be registered under the .eth top-level name.\\n     * @param owner Address that will be the initial owner and manager of the name\\n     * @param duration The initial time in seconds the name will be registered for.\\n     * The minimum duration is 2,419,200 seconds (28 days), defined on EthRegistrarController.\\n     * @param salt A salt that will contribute \\\"randomness\\\" to the reservationNumber. This same salt must be remembered and used when calling completeRegistration.\\n     * @param resolver The initial resolver smart contract address that will be used to resolve ENS records for the name.\\n     * @param resolverRecords An array of resolver records to associate with the domain.\\n     * @param setPrimaryName A boolean indicating whether the domain should be set as the primary name.\\n     * @param nameWrapperFuses An integer specifying fuses to the name wrapper.\\n     * @return reservationNumber A unique reservation number representing the commitment for registering the ENS domain.\\n     * @dev The reservation number is used to initiate the domain registration process when calling requestPermissionToRegister.\\n     */\\n    function generateReservationNumber(\\n        string memory label,\\n        address owner,\\n        uint256 duration,\\n        bytes32 salt,\\n        address resolver,\\n        bytes[] calldata resolverRecords,\\n        bool setPrimaryName,\\n        uint16 nameWrapperFuses\\n    ) view external returns (bytes32 reservationNumber) {\\n        return ethRegistrarController.makeCommitment(\\n            label,\\n            owner,\\n            duration,\\n            salt,\\n            resolver,\\n            resolverRecords,\\n            setPrimaryName,\\n            nameWrapperFuses\\n        );\\n    }\\n\\n    /**\\n     * @notice Protect against front-running of a .eth name registration.\\n     * @dev This wrapper function seeks to improve the UX of what a user might be asked to confirm in their wallet.\\n     * A reservationNumber can be generated by calling the view function generateReservationNumber. \\n     * This reservationNumber provides a secure proof that you wanted to register a given name before publicly \\n     * revealing to the Ethereum network the name you intend to register (as is done when executing the completeRegistration function).\\n     *\\n     * To be valid, a reservationNumber (known as a \\\"commitment\\\" inside ENS smart contracts) must be \\\"consumed\\\"\\n     * by calling completeRegistration within the duration window from minCommitmentAge to maxCommitmentAge as\\n     * specified in the EthRegistrarController smart contract.\\n     *\\n     * Both of these variables specify a duration in seconds. As of the time this contract is deployed, these\\n     * values are currently defined as a minimum of 60 seconds and a maximum of 86,400 seconds (24 hours).\\n     * It should be noted that this function does not check if the name is currently available and makes\\n     * no guarantee the name will continue to be available in the future when any subsequent completeRegistration\\n     * call is executed.\\n     *\\n     * Additionally, if a reservationNumber (\\\"commitment\\\") has been created using this function at time X, it is an error to attempt to\\n     * create the exact same reservationNumber again (or extended it) until reaching time X + maxCommitmentAge.\\n     * @param reservationNumber Secure hash of the exact parameters that will later be used when calling completeRegistration.\\n     */\\n    function requestPermissionToRegister(bytes32 reservationNumber) public {\\n        ethRegistrarController.commit(reservationNumber);\\n    }\\n\\n    /**\\n     * @notice Complete the registration of a .eth domain with the Ethereum Name Service (ENS)\\n     * @dev This wrapper function seeks to improve the UX of what a user might be asked to confirm in their wallet.\\n     * The \\\"label\\\" param is a corrected naming of the \\\"name\\\" param on EthRegistrarController, which is actually a label.\\n     * The \\\"salt\\\" param is the \\\"secret\\\" param on EthRegistrarController\\n     * The \\\"resolverRecords\\\" param is the \\\"data\\\" param on EthRegistrarController\\n     * The \\\"setPrimaryName\\\" param is the \\\"reverseRecord\\\" param on EthRegistrarController\\n     * The \\\"nameWrapperFuses\\\" param is the \\\"ownerControlledFuses\\\" param on EthRegistrarController\\n     * This function requires sending an appropriate registration fee as part of the transaction.\\n     * @param label Label to be registered under the .eth top-level name.\\n     * @param owner Address that will be the initial owner and manager of the name\\n     * @param duration The initial time in seconds the name will be registered for.\\n     * The minimum duration is 2,419,200 seconds (28 days), defined on EthRegistrarController.\\n     * @param salt The same salt that contributed \u201crandomness\u201d to the reservationNumber when generateReservationNumber was called.\\n     * @param resolver The initial resolver smart contract address that will be used to resolve ENS records for the name.\\n     * @param resolverRecords An array of resolver records to associate with the domain.\\n     * @param setPrimaryName A boolean indicating whether the domain should be set as the primary name.\\n     * @param nameWrapperFuses An integer specifying fuses to the name wrapper.\\n     */\\n    function completeRegistration(\\n        string memory label,\\n        address owner,\\n        uint256 duration,\\n        bytes32 salt,\\n        address resolver,\\n        bytes[] calldata resolverRecords,\\n        bool setPrimaryName,\\n        uint16 nameWrapperFuses\\n    ) public payable {\\n        ethRegistrarController.register{ value: msg.value }(\\n            label,\\n            owner,\\n            duration,\\n            salt,\\n            resolver,\\n            resolverRecords,\\n            setPrimaryName,\\n            nameWrapperFuses\\n        );\\n    }\\n\\n    /**\\n     * @notice Extend the registered duration of a .eth name.\\n     * @dev The \\\"label\\\" param is a corrected naming of the \\\"name\\\" param on EthRegistrarController, which is actually a label.\\n     * @param label Label to extend under the .eth top-level name.\\n     * Ex.: exampleregistration would extend exampleregistration.eth\\n     * @param duration Time in seconds that the registration will be extended for.\\n     */\\n    function extendRegistration(string calldata label, uint256 duration) public payable {\\n        ethRegistrarController.renew{ value: msg.value }(label, duration);\\n    }\\n\\n    /**\\n     * @notice Withdraw any Ether balance on this contract to the treasury address defined on your NameKit deployment.\\n     */\\n    function withdraw() public {\\n        (bool success, ) = treasury.call{ value: address(this).balance }(\\\"\\\");\\n        if (!success) revert WithdrawError();\\n    }\\n\\n    /**\\n     * @notice Set the address for the ETHRegistrarController contract on the current blockchain.\\n     * @dev The address for the ETHRegistrarController is different on Mainnet and Goerli.\\n     * For this contract to have the same address across networks the constructor params need to be the same.\\n     * Therefore we initialize this param after contract deployment. The deployer can call it just one time.\\n     */\\n    function setEthRegistrarController(address _ethRegistrarController) external {\\n        if (msg.sender != temporaryAdmin) revert Unauthorized();\\n        temporaryAdmin = address(0);\\n\\n        ethRegistrarController = IEthRegistrarController(_ethRegistrarController);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawError\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"resolverRecords\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"setPrimaryName\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"nameWrapperFuses\",\"type\":\"uint16\"}],\"name\":\"completeRegistration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRegistrarController\",\"outputs\":[{\"internalType\":\"contract IEthRegistrarController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"extendRegistration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"resolverRecords\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"setPrimaryName\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"nameWrapperFuses\",\"type\":\"uint16\"}],\"name\":\"generateReservationNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"reservationNumber\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"reservationNumber\",\"type\":\"bytes32\"}],\"name\":\"requestPermissionToRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethRegistrarController\",\"type\":\"address\"}],\"name\":\"setEthRegistrarController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NamekitEthRegistrar", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c362eb2ddcde1866b263ff59778c0a6ef69ef4f3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}