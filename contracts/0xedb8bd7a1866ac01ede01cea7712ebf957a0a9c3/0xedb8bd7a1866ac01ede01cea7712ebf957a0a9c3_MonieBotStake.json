{"SourceCode": "/**\r\n * TG: https://t.me/moniebotportal\r\n * X: https://x.com/monie_bot\r\n * Website: www.moniebot.com\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MonieBotStake is Ownable {    \r\n    // store user details\r\n    // amount of token staked\r\n    // timestamp\r\n    // address of the user\r\n    // A Struct \"A struct in solidity is just a custom type that you can define. You define the struct with a name and associated properties inside of it\"\r\n    // implementations \"https://docs.soliditylang.org/en/v0.8.9/structure-of-a-contract.html?highlight=struct\"\r\n    struct UserData {\r\n        uint256 tokenQuantity;\r\n        uint256 intialTimestamp;\r\n        address user;\r\n    }\r\n    \r\n    // what mapping really is :\r\n    // Mappings act as hash tables which consist of key types and corresponding value type pairs. They are defined like any other variable type in Solidity:\r\n    // implementations \"https://docs.soliditylang.org/en/v0.8.9/style-guide.html?highlight=mapping#mappings\"\r\n    mapping(address => bool) public isAdminAddress; // updating and checking the addresses that are admins\r\n    mapping(address => UserData) public userData; // get user detatils\r\n    mapping(address => bool) public staked;\r\n    \r\n    address public TOKEN = 0xba0161322A09AbE48F06cE5656c1b66bFB01BE56;\r\n    address public feeReceiver;\r\n    uint256 public ENTRY_RATE = 0.5E18;\r\n    \r\n    // total numbers of $MONIE staked\r\n    uint256 public totalStaking;\r\n    uint256 public totalStaker;\r\n    \r\n    // minimum staked amount\r\n    uint256 public minimum;\r\n\r\n    // deposit fee\r\n    uint256 public stakingFee;\r\n    uint256 public unstakingFee;\r\n\r\n    // event manager help to update user on token staked. \r\n    // extract from \"https://docs.soliditylang.org/en/v0.8.9/structure-of-a-contract.html?highlight=event#structure-events\"\r\n    event Stake(\r\n        address indexed userAddress,\r\n        uint256 stakedAmount,\r\n        uint256 Time\r\n    );\r\n    \r\n    event UnStake(\r\n        address indexed userAddress,\r\n        uint256 unStakedAmount,\r\n        uint256 _userReward,\r\n        uint256 Time\r\n    );\r\n    \r\n    event withdrawReward(\r\n        uint256 tokenAmount,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint _time\r\n    );\r\n    \r\n    event addPreviousRewardToUserBal(\r\n        uint256 prviousrewards,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint _time\r\n    );\r\n    \r\n    event adminAdded(\r\n        address[] _admins,\r\n        bool\r\n    );\r\n    \r\n    // called once at every deployment\r\n    // A constructor is an optional function that is executed upon contract creation.\r\n    constructor() {\r\n        isAdminAddress[_msgSender()] = true;\r\n        stakingFee = 10;\r\n        unstakingFee = 50;\r\n        feeReceiver = 0xeB35Ae47269AbE3e88F274bBCF9dA9118601B6b3;\r\n    }\r\n    \r\n    // check to be sure that only License address/addresses can called a specific functions in this contract.\r\n    // A modifier allows you to control the behavior of your smart contract functions.\r\n    // implementations \"https://docs.soliditylang.org/en/v0.8.9/structure-of-a-contract.html?highlight=modifier\"\r\n    modifier onlyAdmin() {\r\n        require(isAdminAddress[_msgSender()]);\r\n        _;\r\n    }\r\n\r\n    function setRates(uint256 _apr) external onlyOwner {\r\n        ENTRY_RATE = _apr;\r\n    }\r\n\r\n    function setFeeReceive(address _newFeeReceiver) external onlyOwner {\r\n        feeReceiver = _newFeeReceiver;\r\n    }\r\n\r\n    function setFees(uint256 _stakingFee, uint256 _unstakingFee) external onlyOwner {\r\n        require(_stakingFee <= 100 && _unstakingFee <= 100, \"Should not exceed 10%\");\r\n        stakingFee = _stakingFee;\r\n        unstakingFee = _unstakingFee;\r\n    }\r\n\r\n    // where user can stake their $MONIE,\r\n    // _quantity: amount of $MONIE that user want to stake.\r\n    // user must approve the staking contract adrress before calling this function\r\n    function stake(uint256 _quantity) public {\r\n        require(_quantity >= minimum, \"amount staked is less than minimum staking amount\");\r\n        UserData storage _userData = userData[_msgSender()];\r\n        IERC20(TOKEN).transferFrom(_msgSender(), address(this), _quantity);\r\n\r\n        uint256 afterFee = (_quantity * stakingFee) / 1000;\r\n        IERC20(TOKEN).transfer(feeReceiver, afterFee);\r\n        uint256 quantity = _quantity - afterFee;\r\n        \r\n        // get user current rewards if input token quantity is 0\r\n        uint256 pendingReward = calculateRewards(_userData.user);\r\n        \r\n        // if user had previously staked then an update in user data is require\r\n        if(_userData.tokenQuantity > 0 ) {\r\n            _userData.tokenQuantity = _userData.tokenQuantity + pendingReward;\r\n            emit addPreviousRewardToUserBal( pendingReward, address(this), _msgSender(), block.timestamp);\r\n        }\r\n\r\n        if (!staked[msg.sender]) {\r\n            staked[msg.sender] = true;\r\n            totalStaker = totalStaker + 1;\r\n        }\r\n                \r\n        _userData.user = _msgSender(); // update caller to the list of stakers\r\n        _userData.tokenQuantity = _userData.tokenQuantity + quantity; // update user staked amount\r\n        _userData.intialTimestamp = block.timestamp; // update time staked\r\n        \r\n        totalStaking = totalStaking + quantity; // update total staking amount\r\n        emit Stake(_msgSender(), _quantity, block.timestamp); // emission of events to enable listening to a specific act of an address that successfully staked\r\n    }\r\n    \r\n\r\n    // use by an address that have staked there $MONIE to unstake at a desire time.    \r\n    // is _quantity is 0 it will withdraw user rewards from the contract\r\n    function unStake(uint256 _amount) public {\r\n        \r\n        UserData storage _userData = userData[_msgSender()]; // get user from the list of staked address\r\n        require(_userData.tokenQuantity >= _amount, \"MONIE: Insufficient amount\"); // requirement that input amount by the caller is less than what user staked\r\n        \r\n        uint256 pendingReward = calculateRewards(userData[_msgSender()].user); //get the current rewards of User\r\n        \r\n        // if input amount is 0 it will withdraw user current rewards\r\n        if(_amount == 0) {\r\n            require(_userData.tokenQuantity > 0, \"MONIE: NO REWARD YET.\");\r\n            safeTokenTransfer(_msgSender(), pendingReward);\r\n            _userData.tokenQuantity = _userData.tokenQuantity;\r\n            _userData.intialTimestamp = block.timestamp;\r\n            emit withdrawReward( pendingReward, address(this), _msgSender(), block.timestamp);\r\n        }\r\n        if(_amount > 0) {\r\n            \r\n            require( _amount <= _userData.tokenQuantity, \"MONIE: AMOUNT IS GREATER THAN USER STAKED TOKEN\");\r\n            _userData.tokenQuantity = _userData.tokenQuantity - _amount;\r\n            \r\n            safeTokenTransfer(_msgSender(), pendingReward);\r\n\r\n            uint256 afterFee = (_amount * unstakingFee) / 1000;\r\n            IERC20(TOKEN).transfer(feeReceiver, afterFee);\r\n            uint256 quantity = _amount - afterFee;\r\n\r\n\r\n            IERC20(TOKEN).transfer(_msgSender(), quantity);\r\n            totalStaking = totalStaking - quantity;\r\n            \r\n            _userData.intialTimestamp = block.timestamp;\r\n            \r\n            emit UnStake(_msgSender(), _amount, pendingReward, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function calculateRewards(address _stakerAddress) public view returns(uint256) {\r\n        UserData memory _userData = userData[_stakerAddress];\r\n        uint256 currentTime = block.timestamp - _userData.intialTimestamp;\r\n        uint256 perSeconds = ENTRY_RATE / (24 * 60 * 60);\r\n        uint256 rewardPerSeconds = currentTime * perSeconds;\r\n        return rewardPerSeconds;\r\n    }\r\n\r\n    function userInfo(address _addr) public view returns(address _staker, uint256 _amountStaked, uint256 _userReward, uint _timeStaked) {\r\n        UserData storage _userData = userData[_addr];\r\n        uint256 _reward = calculateRewards(_userData.user);\r\n        if(_userData.tokenQuantity > 0) {\r\n           _userReward = _userData.tokenQuantity + (_reward);\r\n        }\r\n        \r\n        return(\r\n            _userData.user, \r\n            _userData.tokenQuantity,\r\n            _userReward,\r\n            _userData.intialTimestamp\r\n            );\r\n    }\r\n    \r\n    function safeTokenTransfer(address staker, uint256 amount) internal {\r\n        IERC20(TOKEN).transfer(staker, amount);\r\n    }\r\n    \r\n    function multipleAdmin(address[] calldata _adminAddress, bool status) external onlyOwner {\r\n        if (status == true) {\r\n           for(uint256 i = 0; i < _adminAddress.length; i++) {\r\n            isAdminAddress[_adminAddress[i]] = status;\r\n            } \r\n        } else{\r\n            for(uint256 i = 0; i < _adminAddress.length; i++) {\r\n                delete(isAdminAddress[_adminAddress[i]]);\r\n            } \r\n        }\r\n    }\r\n    \r\n    // Safe withdraw function by admin\r\n    function safeWithdraw(address _to, uint256 _amount)  external onlyOwner {\r\n        uint256 Balalance = IERC20(TOKEN).balanceOf(address(this));\r\n        if (_amount > Balalance) {\r\n            IERC20(TOKEN).transfer(_to, Balalance);\r\n        } else {\r\n            IERC20(TOKEN).transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function getMinimumStakeAmount() public view returns(uint256 min) {\r\n        return minimum;\r\n    }\r\n    \r\n    function setMinimumStakeAmount(uint256 min) external onlyOwner {\r\n        minimum = min;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_userReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prviousrewards\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"addPreviousRewardToUserBal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_admins\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"adminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ENTRY_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerAddress\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdminAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adminAddress\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"multipleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakingFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intialTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MonieBotStake", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd2f37959eaa17362eca91f42f7425d29a569f3436ceaf630c08dd0f0e04f729"}