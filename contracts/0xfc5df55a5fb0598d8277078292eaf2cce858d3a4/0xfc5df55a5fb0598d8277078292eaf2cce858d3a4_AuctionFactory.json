{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Auction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAuctionFactory.sol\\\";\\n\\ncontract Auction is Ownable {\\n    address payable public seller;\\n    uint256 public auctionEndTime;\\n    uint256 public startingPrice;\\n    uint256 public deadline;\\n\\n    address public highestBidder;\\n    uint256 public highestBid;\\n    uint256 public bidCount;\\n\\n    bool public confirmed = false;\\n    bool public ended = false;\\n    bool public frozen = false;\\n\\n    IAuctionFactory public auctionFactory;\\n\\n    uint256 public sellerTax;\\n\\n    event HighestBidIncreased(address bidder, uint amount);\\n    event AuctionEnded(address winner, uint amount);\\n\\n    constructor(\\n        uint256 _duration,\\n        uint256 _startingPrice,\\n        address _seller,\\n        address admin\\n    ) Ownable(admin) {\\n        auctionFactory = IAuctionFactory(msg.sender);\\n\\n        auctionEndTime = block.timestamp + _duration;\\n        startingPrice = _startingPrice;\\n        deadline = auctionEndTime + auctionFactory.auctionDeadlineDelay();\\n        seller = payable(_seller);\\n    }\\n\\n    modifier onlyHighestBidder() {\\n        require(\\n            msg.sender == highestBidder || msg.sender == owner(),\\n            \\\"Only the highest bidder can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows users to bid on the auction.\\n     */\\n    function bid() public payable {\\n        require(block.timestamp <= auctionEndTime, \\\"Auction already ended.\\\");\\n        require(\\n            msg.sender != seller,\\n            \\\"Seller cannot bid on their own auction.\\\"\\n        );\\n\\n        if (msg.sender == highestBidder) {\\n            highestBid += msg.value;\\n        } else {\\n            require(\\n                msg.value >= startingPrice,\\n                \\\"Bid must be greater or equal than starting price.\\\"\\n            );\\n            require(msg.value > highestBid, \\\"There already is a higher bid.\\\");\\n\\n            bool tmpSuccess;\\n            (tmpSuccess, ) = highestBidder.call{value: highestBid, gas: 30000}(\\n                \\\"\\\"\\n            );\\n            require(tmpSuccess, \\\"Transfer failed.\\\");\\n            highestBidder = msg.sender;\\n            highestBid = msg.value;\\n            bidCount++;\\n        }\\n\\n        emit HighestBidIncreased(msg.sender, msg.value);\\n    }\\n\\n    /**\\n     * @dev Allows auction's winner to confirm the transaction.\\n     */\\n    function bidderConfirms() public onlyHighestBidder {\\n        require(\\n            block.timestamp >= auctionEndTime,\\n            \\\"Auction has not ended yet.\\\"\\n        );\\n        require(!confirmed, \\\"Highest bidder has already confirmed.\\\");\\n\\n        confirmed = true;\\n\\n        _auctionEnd(seller);\\n    }\\n\\n    /**\\n     * @dev Allows either the seller or the highest bidder to end the auction, depending on the situation.\\n     */\\n    function auctionEnd() public {\\n        _auctionEnd(msg.sender);\\n    }\\n\\n    function _auctionEnd(address sender) internal {\\n        require(block.timestamp >= auctionEndTime, \\\"Auction not yet ended.\\\");\\n        require(!frozen, \\\"Auction is frozen.\\\");\\n        require(!ended, \\\"Auction has already ended.\\\");\\n\\n        // If the auction has ended, highest bidder has not confirmed\\n        if (!confirmed) {\\n            require(\\n                block.timestamp > block.timestamp + deadline,\\n                \\\"Deadline not yet reached.\\\"\\n            );\\n            require(\\n                sender == highestBidder,\\n                \\\"Only the highest bidder can end the auction.\\\"\\n            );\\n\\n            bool tmpSuccess;\\n            (tmpSuccess, ) = highestBidder.call{\\n                value: highestBid,\\n                gas: 30000\\n            }(\\\"\\\");\\n            require(tmpSuccess, \\\"Transfer failed.\\\");\\n        }\\n        // If the auction has ended, the highest bidder has paid and confirmed\\n        else if (confirmed) {\\n            require(sender == seller, \\\"Only the seller can end the auction.\\\");\\n\\n            sellerTax = auctionFactory.auctionSellerTax();\\n            uint256 sellerPayment = highestBid -\\n                ((highestBid * sellerTax) / 100);\\n            uint256 toTreasury = address(this).balance - sellerPayment;\\n\\n            bool tmpSuccess;\\n            (tmpSuccess, ) = seller.call{value: sellerPayment, gas: 30000}(\\\"\\\");\\n            require(tmpSuccess, \\\"Transfer failed.\\\");\\n\\n            _toTreasury(toTreasury);\\n        }\\n\\n        ended = true;\\n\\n        emit AuctionEnded(highestBidder, highestBid);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to freeze the auction.\\n     */\\n    function freeze(bool a) public onlyOwner {\\n        frozen = a;\\n    }\\n\\n    /**\\n     * @dev Allows the owner to withdraw the funds from the contract.\\n     * @param recipient The address to send the funds to.\\n     * @notice This function is only callable by the owner, IT SHOULD NOT BE USED OTHERWISE.\\n     */\\n    function emergencyWithdraw(address recipient) public onlyOwner {\\n        _emergencyWithdraw(recipient);\\n    }\\n\\n    function _emergencyWithdraw(address recipient) internal {\\n        bool tmpSuccess;\\n        (tmpSuccess, ) = recipient.call{\\n            value: address(this).balance,\\n            gas: 30000\\n        }(\\\"\\\");\\n        require(tmpSuccess, \\\"Transfer failed.\\\");\\n    }\\n\\n    function _toTreasury(uint256 amount) internal {\\n        bool tmpSuccess;\\n        (tmpSuccess, ) = auctionFactory.treasury().call{\\n            value: amount,\\n            gas: 30000\\n        }(\\\"\\\");\\n        require(tmpSuccess, \\\"Transfer failed.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AuctionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Auction.sol\\\";\\r\\nimport \\\"./Sale.sol\\\";\\r\\n\\r\\ncontract AuctionFactory is Ownable {\\r\\n    address[] public auctions;\\r\\n    mapping(address => address[]) private userAuctions;\\r\\n    address[] public sales;\\r\\n    mapping(address => address[]) private userSales;\\r\\n\\r\\n    address public treasury;\\r\\n\\r\\n    uint256 public auctionSellerTax = 5;\\r\\n\\r\\n    uint256 public saleSellerTax = 5;\\r\\n\\r\\n    uint256 public auctionDeadlineDelay = 7 days;\\r\\n    uint256 public saleDeadlineDelay = 7 days;\\r\\n\\r\\n    event AuctionCreated(address auction, address seller);\\r\\n    event SaleCreated(address sale, address seller);\\r\\n\\r\\n    constructor(address admin, address _treasury) Ownable(admin) {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function createAuction(uint256 _duration, uint256 _startingPrice)\\r\\n        public\\r\\n        returns (address)\\r\\n    {\\r\\n        Auction newAuction = new Auction(_duration, _startingPrice, msg.sender, owner());\\r\\n        auctions.push(address(newAuction));\\r\\n        userAuctions[msg.sender].push(address(newAuction));\\r\\n\\r\\n        emit AuctionCreated(address(newAuction), msg.sender);\\r\\n\\r\\n        return address(newAuction);\\r\\n    }\\r\\n\\r\\n    function createSale(uint256 _price) public returns (address) {\\r\\n        Sale newSale = new Sale(_price, msg.sender, owner());\\r\\n        sales.push(address(newSale));\\r\\n        userSales[msg.sender].push(address(newSale));\\r\\n\\r\\n        emit SaleCreated(address(newSale), msg.sender);\\r\\n\\r\\n        return address(newSale);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function getAuctions() public view returns (address[] memory) {\\r\\n        return auctions;\\r\\n    }\\r\\n\\r\\n    function getUserAuctions(address user) public view returns (address[] memory) {\\r\\n        return userAuctions[user];\\r\\n    }\\r\\n\\r\\n    function getSales() public view returns (address[] memory) {\\r\\n        return sales;\\r\\n    }\\r\\n\\r\\n    function getUserSales(address user) public view returns (address[] memory) {\\r\\n        return userSales[user];\\r\\n    }\\r\\n\\r\\n    function setAuctionTaxes(uint256 _sellerTax) public onlyOwner {\\r\\n        auctionSellerTax = _sellerTax;\\r\\n    }\\r\\n\\r\\n    function setSaleTaxes(uint256 _sellerTax) public onlyOwner {\\r\\n        saleSellerTax = _sellerTax;\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _treasury) public onlyOwner {\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function setAuctionDeadlineDelay(uint256 _delay) public onlyOwner {\\r\\n        auctionDeadlineDelay = _delay;\\r\\n    }\\r\\n\\r\\n    function setSaleDeadlineDelay(uint256 _delay) public onlyOwner {\\r\\n        saleDeadlineDelay = _delay;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAuctionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface IAuctionFactory {\\r\\n    function auctionSellerTax() external view returns (uint256);\\r\\n    function saleSellerTax() external view returns (uint256);\\r\\n    function treasury() external view returns (address);\\r\\n    function auctionDeadlineDelay() external view returns (uint256);\\r\\n    function saleDeadlineDelay() external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/Sale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n// Uncomment this line to use console.log\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/IAuctionFactory.sol\\\";\\r\\n\\r\\ncontract Sale is Ownable {\\r\\n    address payable public seller;\\r\\n    uint256 public price;\\r\\n    uint256 public saleTime;\\r\\n    uint256 public deadline;\\r\\n\\r\\n    address public buyer;\\r\\n\\r\\n    bool public hasPaid = false;\\r\\n    bool public confirmed = false;\\r\\n    bool public ended = false;\\r\\n    bool public frozen = false;\\r\\n\\r\\n    IAuctionFactory public auctionFactory;\\r\\n\\r\\n    uint256 public sellerTax;\\r\\n\\r\\n    event Buy(address buyer, uint256 price);\\r\\n    event SaleSuccess(address buyer, address seller, uint256 price);\\r\\n    event SaleReverted(address buyer, address seller, uint256 price);\\r\\n\\r\\n    constructor(\\r\\n        uint256 _price,\\r\\n        address _seller,\\r\\n        address admin\\r\\n    ) Ownable(admin) {\\r\\n        auctionFactory = IAuctionFactory(msg.sender);\\r\\n\\r\\n        price = _price;\\r\\n        seller = payable(_seller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows any user to buy the item.\\r\\n     * @notice Funds are stored in the contract until irl transaction is complete.\\r\\n     */\\r\\n    function buy() public payable {\\r\\n        require(\\r\\n            msg.value == price,\\r\\n            \\\"You must pay the price.\\\"\\r\\n        );\\r\\n        require(!hasPaid, \\\"You have already paid.\\\");\\r\\n\\r\\n        deadline = block.timestamp + auctionFactory.saleDeadlineDelay();\\r\\n\\r\\n        hasPaid = true;\\r\\n\\r\\n        buyer = msg.sender;\\r\\n\\r\\n        emit Buy(msg.sender, price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows buyer to confirm the transaction.\\r\\n     */\\r\\n    function buyerConfirms() public {\\r\\n        require(\\r\\n            msg.sender == buyer || msg.sender == owner(),\\r\\n            \\\"Only the buyer can call this function.\\\"\\r\\n        );\\r\\n        require(hasPaid, \\\"Buyer has not paid yet.\\\");\\r\\n        require(!confirmed, \\\"Buyer has already confirmed.\\\");\\r\\n\\r\\n        confirmed = true;\\r\\n\\r\\n        _saleEnd(seller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows either the seller or the buyer to end the sale, depending on the situation.\\r\\n     */\\r\\n    function saleEnd() public {\\r\\n        _saleEnd(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _saleEnd(address sender) internal {\\r\\n        require(!frozen, \\\"Sale is frozen.\\\");\\r\\n        require(!ended, \\\"Sale has already ended.\\\");\\r\\n\\r\\n        // If buyer has not confirmed\\r\\n        if (!confirmed) {\\r\\n            require(\\r\\n                block.timestamp > block.timestamp + deadline,\\r\\n                \\\"Deadline not yet reached.\\\"\\r\\n            );\\r\\n            require(\\r\\n                sender == buyer,\\r\\n                \\\"Only the buyer can end the sale.\\\"\\r\\n            );\\r\\n\\r\\n            bool tmpSuccess;\\r\\n            (tmpSuccess, ) = buyer.call{\\r\\n                value: price,\\r\\n                gas: 30000\\r\\n            }(\\\"\\\");\\r\\n            require(tmpSuccess, \\\"Transfer failed.\\\");\\r\\n\\r\\n            emit SaleReverted(buyer, seller, price);\\r\\n        }\\r\\n        // If buyer has confirmed\\r\\n        else if (confirmed) {\\r\\n            require(sender == seller, \\\"Only the seller can end the sale.\\\");\\r\\n\\r\\n            sellerTax = auctionFactory.saleSellerTax();\\r\\n            uint256 sellerPayment = price -\\r\\n                ((price * sellerTax) / 100);\\r\\n            uint256 toTreasury = address(this).balance - sellerPayment;\\r\\n\\r\\n            bool tmpSuccess;\\r\\n            (tmpSuccess, ) = seller.call{value: sellerPayment, gas: 30000}(\\\"\\\");\\r\\n            require(tmpSuccess, \\\"Transfer failed.\\\");\\r\\n\\r\\n            _toTreasury(toTreasury);\\r\\n\\r\\n            emit SaleSuccess(buyer, seller, price);\\r\\n        }\\r\\n\\r\\n        ended = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the owner to freeze the auction.\\r\\n     */\\r\\n    function freeze(bool a) public onlyOwner {\\r\\n        frozen = a;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the owner to withdraw the funds from the contract.\\r\\n     * @param recipient The address to send the funds to.\\r\\n     * @notice This function is only callable by the owner, IT SHOULD NOT BE USED OTHERWISE.\\r\\n     */\\r\\n    function emergencyWithdraw(address recipient) public onlyOwner {\\r\\n        _emergencyWithdraw(recipient);\\r\\n    }\\r\\n\\r\\n    function _emergencyWithdraw(address recipient) internal {\\r\\n        bool tmpSuccess;\\r\\n        (tmpSuccess, ) = recipient.call{\\r\\n            value: address(this).balance,\\r\\n            gas: 30000\\r\\n        }(\\\"\\\");\\r\\n        require(tmpSuccess, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n\\r\\n    function _toTreasury(uint256 amount) internal {\\r\\n        bool tmpSuccess;\\r\\n        (tmpSuccess, ) = auctionFactory.treasury().call{\\r\\n            value: amount,\\r\\n            gas: 30000\\r\\n        }(\\\"\\\");\\r\\n        require(tmpSuccess, \\\"Transfer failed.\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auction\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"SaleCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"auctionDeadlineDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionSellerTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSales\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAuctions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSales\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleDeadlineDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleSellerTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setAuctionDeadlineDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellerTax\",\"type\":\"uint256\"}],\"name\":\"setAuctionTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setSaleDeadlineDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellerTax\",\"type\":\"uint256\"}],\"name\":\"setSaleTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AuctionFactory", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008831c15b344354bf2e36e01d9bc9f39701cdb87d0000000000000000000000004014489541393c928303c4c88acc092babf81d87", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}