{"SourceCode": "// Sources flattened with hardhat v2.9.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/utils/IOtoCoMaster.sol\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoMaster {\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev See {OtoCoMaster-baseFee}.\r\n     */\r\n    function baseFee() external view returns (uint256 fee);\r\n\r\n    receive() external payable;\r\n}\r\n\r\n\r\n// File contracts/utils/IOtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOtoCoPlugin {\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     *\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.5.0\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/OtoCoPlugin.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract OtoCoPlugin is IOtoCoPlugin, Ownable {\r\n\r\n    // Reference to the OtoCo Master to transfer plugin cost\r\n    IOtoCoMaster public otocoMaster;\r\n\r\n    /**\r\n     * Modifier to allow only series owners to change content.\r\n     * @param tokenId The plugin index to update.\r\n     */\r\n    modifier onlySeriesOwner(uint256 tokenId) {\r\n        require(otocoMaster.ownerOf(tokenId) == msg.sender, \"OtoCoPlugin: Not the entity owner.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Modifier to check if the function set the correct amount of ETH value and transfer it to master.\r\n     * If baseFee are 0 or sender is OtoCoMaster this step is jumped.\r\n     * @dev in the future add/attact/remove could be called from OtoCo Master. In those cases no transfer should be called.\r\n     */\r\n    modifier transferFees() {\r\n        if (otocoMaster.baseFee() > 0 && msg.sender != address(otocoMaster)) payable(otocoMaster).transfer(msg.value);\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _otocoMaster) Ownable() {\r\n        otocoMaster = IOtoCoMaster(_otocoMaster);\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to create a new instance of plugin.\r\n     */\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override;\r\n\r\n    /**\r\n     * Allow attach a previously deployed plugin if possible\r\n     * @dev This function should run enumerous amounts of verifications before allow the attachment.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Attach elements are not possible on this plugin.\");\r\n    }\r\n\r\n    /**\r\n     * Plugin initializer with a fuinction template to be used.\r\n     * @dev To decode initialization data use i.e.: (string memory name) = abi.decode(pluginData, (string));\r\n     * @dev Override this function to implement your elements.\r\n     * @param pluginData The parameters to remove a instance of the plugin.\r\n     */\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) external payable virtual override {\r\n        revert(\"OtoCoPlugin: Remove elements are not possible on this plugin.\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/plugins/Multisig.sol\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface GnosisSafeProxyFactory {\r\n    function createProxy(address singleton, bytes memory data) external returns (address proxy);\r\n}\r\n\r\n/**\r\n * Multisig\r\n */\r\ncontract Multisig is OtoCoPlugin {\r\n\r\n    event MultisigAdded(uint256 indexed series, address multisig);\r\n    event MultisigRemoved(uint256 indexed series, address multisig);\r\n\r\n    address public gnosisMasterCopy;\r\n    address public gnosisProxyFactory;\r\n\r\n    mapping(uint256 => uint256) public multisigPerEntity;\r\n    mapping(uint256 => address[]) public multisigDeployed;\r\n\r\n    constructor(\r\n        address payable otocoMaster,\r\n        address masterCopy,\r\n        address proxyFactory,\r\n        uint256[] memory prevIds,\r\n        address[] memory prevMultisig\r\n    ) OtoCoPlugin(otocoMaster) {\r\n        gnosisMasterCopy = masterCopy;\r\n        gnosisProxyFactory = proxyFactory;\r\n        for (uint i = 0; i < prevIds.length; i++ ) {\r\n            multisigDeployed[prevIds[i]].push(prevMultisig[i]);\r\n            multisigPerEntity[prevIds[i]]++;\r\n            emit MultisigAdded(prevIds[i], prevMultisig[i]);\r\n        }\r\n    }\r\n\r\n    function updateGnosisMasterCopy(address newAddress) public onlyOwner {\r\n        gnosisMasterCopy = newAddress;\r\n    }\r\n\r\n    function updateGnosisProxyFactory(address newAddress) public onlyOwner {\r\n        gnosisProxyFactory = newAddress;\r\n    }\r\n\r\n    function addPlugin(uint256 seriesId, bytes calldata pluginData) public onlySeriesOwner(seriesId) transferFees() payable override {\r\n        address proxy = GnosisSafeProxyFactory(gnosisProxyFactory).createProxy(gnosisMasterCopy, pluginData);\r\n        multisigDeployed[seriesId].push(proxy);\r\n        multisigPerEntity[seriesId]++;\r\n        emit MultisigAdded(seriesId, proxy);\r\n    }\r\n\r\n    /**\r\n    * Attaching a pre-existing multisig to the entity\r\n    * @dev seriesId Series to remove token from\r\n    * @dev newMultisig Multisig address to be attached\r\n    *\r\n    * @param pluginData Encoded parameters to create a new token.\r\n     */\r\n    function attachPlugin(uint256 seriesId, bytes calldata pluginData) public onlySeriesOwner(seriesId) transferFees() payable override {\r\n        (\r\n            address newMultisig\r\n        ) = abi.decode(pluginData, ( address));\r\n        multisigDeployed[seriesId].push(newMultisig);\r\n        multisigPerEntity[seriesId]++;\r\n        emit MultisigAdded(seriesId, newMultisig);\r\n    }\r\n\r\n    function removePlugin(uint256 seriesId, bytes calldata pluginData) public onlySeriesOwner(seriesId) transferFees() payable override {\r\n        (\r\n            uint256 toRemove\r\n        ) = abi.decode(pluginData, (uint256));\r\n        address multisigRemoved = multisigDeployed[seriesId][toRemove];\r\n        // Copy last token to the removed slot\r\n        multisigDeployed[seriesId][toRemove] = multisigDeployed[seriesId][multisigDeployed[seriesId].length - 1];\r\n        // Remove the last token from array\r\n        multisigDeployed[seriesId].pop();\r\n        multisigPerEntity[seriesId]--;\r\n        emit MultisigRemoved(seriesId, multisigRemoved);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"otocoMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterCopy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proxyFactory\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"prevIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"prevMultisig\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"MultisigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"series\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"MultisigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"attachPlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisMasterCopy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gnosisProxyFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multisigDeployed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multisigPerEntity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otocoMaster\",\"outputs\":[{\"internalType\":\"contract IOtoCoMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seriesId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"pluginData\",\"type\":\"bytes\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateGnosisMasterCopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateGnosisProxyFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Multisig", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb577510117fdd373d95420f9559712156ca8f32ec666b740f13aa69fcb2db4b"}