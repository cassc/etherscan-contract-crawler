{"SourceCode": "/**                                                                                  \r\n        ,--.          ,--.                 ,--.                               ,--. \r\n ,---.,-'  '-. ,--,--.|  |,-. ,---.      ,-|  |,--.  ,--. ,---.  ,---.  ,---. |  | \r\n(  .-''-.  .-'' ,-.  ||     /| .-. :    ' .-. | \\  `'  / | .-. || .-. || .-. ||  | \r\n.-'  `) |  |  \\ '-'  ||  \\  \\\\   --..--.\\ `-' | /  /.  \\ | '-' '' '-' '' '-' '|  | \r\n`----'  `--'   `--`--'`--'`--'`----''--' `---' '--'  '--'|  |-'  `---'  `---' `--' \r\n                                                         `--'                      \r\n**/\r\n\r\n//stake.dxpool.com eth2.0 batch deposit contract\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// Deposit contract interface\r\ninterface IDepositContract {\r\n    /// @notice A processed deposit event.\r\n    event DepositEvent(\r\n        bytes pubkey,\r\n        bytes withdrawal_credentials,\r\n        bytes amount,\r\n        bytes signature,\r\n        bytes index\r\n    );\r\n\r\n    /// @notice Submit a Phase 0 DepositData object.\r\n    /// @param pubkey A BLS12-381 public key.\r\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\r\n    /// @param signature A BLS12-381 signature.\r\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\r\n    /// Used as a protection against malformed input.\r\n    function deposit(\r\n        bytes calldata pubkey,\r\n        bytes calldata withdrawal_credentials,\r\n        bytes calldata signature,\r\n        bytes32 deposit_data_root\r\n    ) external payable;\r\n\r\n    /// @notice Query the current deposit root hash.\r\n    /// @return The deposit root hash.\r\n    function get_deposit_root() external view returns (bytes32);\r\n\r\n    /// @notice Query the current deposit count.\r\n    /// @return The deposit count encoded as a little endian 64-bit number.\r\n    function get_deposit_count() external view returns (bytes memory);\r\n}\r\n\r\n\r\ncontract BatchDeposit is Pausable, Ownable {\r\n\r\n    address officialDepositContract;\r\n    uint256 private _fee;\r\n    uint256 private _max_validators;\r\n    uint256 constant PUBKEY_LENGTH = 48;\r\n    uint256 constant SIGNATURE_LENGTH = 96;\r\n    uint256 constant CREDENTIALS_LENGTH = 32;\r\n    uint256 constant DEPOSIT_AMOUNT = 32 ether;\r\n\r\n    event FeeChanged(uint256 previousFee, uint256 newFee);\r\n    event Withdrawn(address indexed payee, uint256 weiAmount);\r\n    event FeeCollected(address indexed payee, uint256 weiAmount);\r\n\r\n    constructor(address officialDepositContractAddr) {\r\n        //set default _max_validators to 100\r\n        _max_validators = 100;\r\n        //set default fee to 0\r\n        _fee = 0;\r\n\r\n        officialDepositContract = officialDepositContractAddr;\r\n    }\r\n\r\n    \r\n    function batchDeposit(\r\n        bytes calldata pubkeys, \r\n        bytes calldata withdrawal_credentials, \r\n        bytes calldata signatures, \r\n        bytes32[] calldata deposit_data_roots\r\n    ) \r\n        external payable whenNotPaused \r\n    {\r\n        // deposit checks\r\n        require(msg.value >= DEPOSIT_AMOUNT, \"BatchDeposit: Amount must bigger than 32 ether\");\r\n        require(msg.value % 0.001 ether == 0, \"BatchDeposit: Deposit value not multiple of 0.001 ether\");\r\n        \r\n        uint256 count = deposit_data_roots.length;\r\n        require(count > 0, \"BatchDeposit: You should deposit at least one validator\");\r\n        \r\n        require(count <= _max_validators, \"BatchDeposit: validator count max limit reached\");\r\n\r\n        require(pubkeys.length == count * PUBKEY_LENGTH, \"BatchDeposit: Pubkey count don't match\");\r\n        require(signatures.length == count * SIGNATURE_LENGTH, \"BatchDeposit: Signatures count don't match\");\r\n        require(withdrawal_credentials.length == 1 * CREDENTIALS_LENGTH, \"BatchDeposit: Withdrawal Credentials count don't match\");\r\n\r\n        uint256 expectedAmount = (_fee + DEPOSIT_AMOUNT) * count;\r\n        require(msg.value == expectedAmount, \"BatchDeposit: Amount is not aligned with pubkeys number\");\r\n\r\n        emit FeeCollected(msg.sender, _fee * count);\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            bytes memory pubkey = bytes(pubkeys[i*PUBKEY_LENGTH:(i+1)*PUBKEY_LENGTH]);\r\n            bytes memory signature = bytes(signatures[i*SIGNATURE_LENGTH:(i+1)*SIGNATURE_LENGTH]);\r\n\r\n            IDepositContract(officialDepositContract).deposit{value: DEPOSIT_AMOUNT}(\r\n                pubkey,\r\n                withdrawal_credentials,\r\n                signature,\r\n                deposit_data_roots[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    //withdraw the fee\r\n    function withdrawFee(address payable receiver) public onlyOwner {       \r\n        require(receiver != address(0), \"You can't burn these eth directly\");\r\n\r\n        uint256 amount = address(this).balance;\r\n        emit Withdrawn(receiver, amount);\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    //change the max_validators\r\n    function changeMaxValidators(uint256 max) public onlyOwner {\r\n        require(max != _max_validators, \"max validators must be different from current one\");\r\n        require(max > 0, \"Max must bigger than 0\");\r\n        _max_validators = max;\r\n    }\r\n\r\n    function maxValidators() public view returns (uint256) {\r\n        return _max_validators;\r\n    }\r\n\r\n    //change the fee\r\n    function changeFee(uint256 newFee) public onlyOwner {\r\n        require(newFee != _fee, \"Fee must be different from current one\");\r\n        require(newFee % 0.001 ether == 0, \"Fee must be a multiple of 0.001 ether\");\r\n\r\n        emit FeeChanged(_fee, newFee);\r\n        _fee = newFee;\r\n    }\r\n\r\n    //owner can pause the contract\r\n    function pauseContract() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    //owner can unpause the contract\r\n    function unpauseContract() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    //returns the currenct fee\r\n    function fee() public view returns (uint256) {\r\n        return _fee;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"officialDepositContractAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkeys\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"deposit_data_roots\",\"type\":\"bytes32[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"changeMaxValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchDeposit", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000219ab540356cbb839cbe05303d7705fa", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7478d4f84b78100c96712ec5aa3364d0fada7de7f9065adcb74bb26712092cf5"}