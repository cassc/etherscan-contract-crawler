{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n    4096 Website: https://4096.cash\r\n    4096 App: https://app.4096.cash\r\n    Telegram: https://t.me/ERC4096\r\n    Twitter: https://twitter.com/4096ERC\r\n*/\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC4096 is IERC20 {\r\n    function sellCounter() external view returns(uint256);\r\n    function sellAmountCounter() external view returns(uint256);\r\n    function lastLpBurnTime() external view returns(uint256);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract Teleport {\r\n    IERC4096 public originalToken = IERC4096(0x4096Fc7119040175589387656F7C6073265f4096);\r\n    IUniswapV2Pair public originalTokenPair = IUniswapV2Pair(0x7C3f018376C7B97CB811cd17aA094052DBeE6dBc);\r\n    IWETH WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    address owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    struct Args {\r\n        uint256 res4096;\r\n        uint256 resWETH;\r\n        uint256 timestamp;\r\n        uint256 sellAmountCounter;\r\n        uint256 lastLpBurnTime;\r\n        uint256 needToSell;\r\n        uint256 cycleSell;\r\n        uint256 sellCycles;\r\n    }\r\n\r\n    function getData() external view returns(uint256, uint256) {\r\n        return (originalToken.sellCounter(), originalToken.balanceOf(address(originalTokenPair)));\r\n    }\r\n\r\n    function teleport(uint256 maxSpend) external payable {\r\n        uint256 lastLpBurnTime = originalToken.lastLpBurnTime();\r\n        uint256 sellAmountCounter = originalToken.sellAmountCounter();\r\n\r\n        (uint256 res4096, uint256 resWETH,) = originalTokenPair.getReserves();\r\n\r\n        {\r\n            uint256 contractBalance = originalToken.balanceOf(address(originalToken));\r\n            if (contractBalance > 1) {\r\n                uint256 amountOut = (contractBalance * 997 * resWETH) / (res4096 * 1000 + contractBalance * 997);\r\n\r\n                res4096 += contractBalance;\r\n                resWETH -= amountOut;\r\n            }\r\n        }\r\n\r\n        uint256 needToSell;\r\n        unchecked {\r\n            uint256 currentCounter = originalToken.sellCounter();\r\n\r\n            uint256 target = 15;\r\n            if (res4096 > 512) {\r\n                if (res4096 > 1024) {\r\n                    target = 3;\r\n                }\r\n                else {\r\n                    target = 7;\r\n                }\r\n            }\r\n\r\n            require(target > currentCounter, \"Nowhere to teleport\");\r\n            needToSell = target - currentCounter;\r\n        }\r\n\r\n        uint256 cycleSell = needToSell;\r\n        unchecked {\r\n            if (res4096 <= 512 && 512 - res4096 < needToSell) {\r\n                cycleSell = 512 - res4096;\r\n                require(cycleSell > 0, \"Nowhere to teleport: edge case\");\r\n            }\r\n            else if (res4096 <= 1024 && 1024 - res4096 < needToSell) {\r\n                cycleSell = 1024 - res4096;\r\n                require(cycleSell > 0, \"Nowhere to teleport: edge case\");\r\n            }\r\n        }\r\n\r\n        unchecked {\r\n            uint256 timestamp = block.timestamp - 8 hours;\r\n\r\n            if (needToSell == cycleSell) {\r\n                uint256 amountReceived;\r\n                uint256[] memory amountsOut = new uint256[](needToSell);\r\n\r\n                {\r\n                    uint256 nukedWithCounter;\r\n                    uint256 nukedWithTimeout;\r\n\r\n                    for (uint256 i = 0; i < needToSell; ++i) {\r\n                        if (res4096 > 256) {\r\n                            if (sellAmountCounter > 1023 && nukedWithCounter == 0 ) {\r\n                                --res4096;\r\n                                nukedWithCounter = 1;\r\n                            }\r\n                            else if (lastLpBurnTime <= timestamp && nukedWithTimeout == 0) {\r\n                                --res4096;\r\n                                nukedWithTimeout = 1;\r\n                            }\r\n                        }\r\n\r\n                        ++sellAmountCounter;\r\n\r\n                        uint256 amountOut = (997 * resWETH) / (res4096 * 1000 + 997);\r\n\r\n                        amountsOut[i] = amountOut;\r\n\r\n                        ++res4096;\r\n                        resWETH -= amountOut;\r\n\r\n                        amountReceived += amountOut;\r\n                    }\r\n                }\r\n\r\n                uint256 amountIn = resWETH * needToSell * 1000 / (res4096 - needToSell) / 997 + 1;\r\n\r\n                {\r\n                    uint256 additionalSpend = amountIn - amountReceived;\r\n                    require(additionalSpend < maxSpend, \"Additional WETH spend is higher than your max spend\");\r\n                    if (msg.value == 0) {\r\n                        WETH.transferFrom(msg.sender, address(this), additionalSpend);\r\n                    }\r\n                    else {\r\n                        WETH.deposit{value: additionalSpend}();\r\n                        (bool success,) = msg.sender.call{value: msg.value - additionalSpend}('');\r\n                        require(success, \"Failed to return excess ETH\");\r\n                    }\r\n\r\n                    for (uint256 i = 0; i < needToSell; ++i) {\r\n                        originalToken.transfer(address(originalTokenPair), 1);\r\n                        originalTokenPair.swap(0, amountsOut[i], address(this), '');\r\n                    }\r\n                }\r\n\r\n                WETH.transfer(address(originalTokenPair), amountIn);\r\n                originalTokenPair.swap(needToSell, 0, address(this), '');\r\n            }\r\n            else {\r\n                uint256 sellCycles = needToSell / cycleSell;\r\n                (uint256[] memory amountsInAndOut, uint256 additionalSpend, uint256 remainingSellsCount) = getAmountsInAndOut(Args(res4096, resWETH, timestamp, sellAmountCounter, lastLpBurnTime, needToSell, cycleSell, sellCycles));\r\n\r\n                require(additionalSpend < maxSpend, \"Additional WETH spend is higher than your max spend\");\r\n                if (msg.value == 0) {\r\n                    WETH.transferFrom(msg.sender, address(this), additionalSpend);\r\n                }\r\n                else {\r\n                    WETH.deposit{value: additionalSpend}();\r\n                    (bool success,) = msg.sender.call{value: msg.value - additionalSpend}('');\r\n                    require(success, \"Failed to return excess ETH\");\r\n                }\r\n\r\n                uint256 amountsIndex = 0;\r\n                for (uint256 i = 0; i < sellCycles; ++i) {\r\n                    for (uint256 j = 0; j < cycleSell; ++j) {\r\n                        originalToken.transfer(address(originalTokenPair), 1);\r\n                        originalTokenPair.swap(0, amountsInAndOut[amountsIndex], address(this), '');\r\n\r\n                        ++amountsIndex;\r\n                    }\r\n\r\n                    WETH.transfer(address(originalTokenPair), amountsInAndOut[amountsIndex]);\r\n                    originalTokenPair.swap(cycleSell, 0, address(this), '');\r\n                    ++amountsIndex;\r\n                }\r\n\r\n                if (remainingSellsCount > 0) {\r\n                    for (uint256 i = 0; i < remainingSellsCount; ++i) {\r\n                        originalToken.transfer(address(originalTokenPair), 1);\r\n                        originalTokenPair.swap(0, amountsInAndOut[amountsIndex], address(this), '');\r\n\r\n                        ++amountsIndex;\r\n                    }\r\n\r\n                    WETH.transfer(address(originalTokenPair), amountsInAndOut[amountsIndex]);\r\n                    originalTokenPair.swap(remainingSellsCount, 0, address(this), '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAmountsInAndOut(Args memory args) private pure returns(uint256[] memory, uint256, uint256) {\r\n        uint256[] memory amountsInAndOut;\r\n        {\r\n            uint256 length = args.needToSell + args.sellCycles + 1;\r\n            if (args.needToSell == args.sellCycles) {\r\n                --length;\r\n            }\r\n            amountsInAndOut = new uint256[](length);\r\n        }\r\n\r\n        uint256 amountReceived;\r\n        uint256 additionalSpend;\r\n\r\n        uint256 amountsIndex;\r\n        uint256 remainingSellsCount;\r\n\r\n        {\r\n            uint256 nukedWithCounter;\r\n            uint256 nukedWithTimeout;\r\n\r\n            for (uint256 i = 0; i < args.sellCycles; ++i) {\r\n                for (uint256 j = 0; j < args.cycleSell; ++j) {\r\n                    if (args.res4096 > 256) {\r\n                        if (args.sellAmountCounter > 1023 && nukedWithCounter == 0 ) {\r\n                            --args.res4096;\r\n                            nukedWithCounter = 1;\r\n                        }\r\n                        else if (args.lastLpBurnTime <= args.timestamp && nukedWithTimeout == 0) {\r\n                            --args.res4096;\r\n                            nukedWithTimeout = 1;\r\n                        }\r\n                    }\r\n\r\n                    ++args.sellAmountCounter;\r\n                    \r\n                    uint256 amountOut = (997 * args.resWETH) / (args.res4096 * 1000 + 997);\r\n\r\n                    amountsInAndOut[amountsIndex] = amountOut;\r\n                    ++amountsIndex;\r\n\r\n                    ++args.res4096;\r\n                    args.resWETH -= amountOut;\r\n\r\n                    amountReceived += amountOut;\r\n                }\r\n\r\n                uint256 amountIn = args.resWETH * args.cycleSell * 1000 / (args.res4096 - args.cycleSell) / 997 + 1;\r\n\r\n                args.res4096 -= args.cycleSell;\r\n                args.resWETH += amountIn;\r\n\r\n                amountsInAndOut[amountsIndex] = amountIn;\r\n                ++amountsIndex;\r\n\r\n                additionalSpend += amountIn - amountReceived;\r\n                amountReceived = 0;\r\n            }\r\n\r\n            if (args.needToSell != args.sellCycles) {\r\n                remainingSellsCount = args.needToSell - args.sellCycles * args.cycleSell;\r\n\r\n                for (uint256 i = 0; i < remainingSellsCount; ++i) {\r\n                    if (args.res4096 > 256) {\r\n                        if (args.sellAmountCounter > 1023 && nukedWithCounter == 0 ) {\r\n                            --args.res4096;\r\n                            nukedWithCounter = 1;\r\n                        }\r\n                        else if (args.lastLpBurnTime <= args.timestamp && nukedWithTimeout == 0) {\r\n                            --args.res4096;\r\n                            nukedWithTimeout = 1;\r\n                        }\r\n                    }\r\n\r\n                    ++args.sellAmountCounter;\r\n\r\n                    uint256 amountOut = (997 * args.resWETH) / (args.res4096 * 1000 + 997);\r\n\r\n                    amountsInAndOut[amountsIndex] = amountOut;\r\n                    ++amountsIndex;\r\n\r\n                    ++args.res4096;\r\n                    args.resWETH -= amountOut;\r\n\r\n                    amountReceived += amountOut;\r\n                }\r\n\r\n                uint256 remainingAmountIn = args.resWETH * args.cycleSell * 1000 / (args.res4096 - args.cycleSell) / 997 + 1;\r\n\r\n                amountsInAndOut[amountsIndex] = remainingAmountIn;\r\n\r\n                additionalSpend += remainingAmountIn - amountReceived;\r\n            }\r\n        }\r\n\r\n        return (amountsInAndOut, additionalSpend, remainingSellsCount);\r\n    }\r\n\r\n    function retrieveTokens(address tokenContract) external {\r\n        require(msg.sender == owner);\r\n        IERC20(tokenContract).transfer(owner, IERC20(tokenContract).balanceOf(address(this)));\r\n    }\r\n\r\n    function retrieveETH() external {\r\n        require(msg.sender == owner);\r\n        (bool success,) = owner.call{value: address(this).balance}('');\r\n        require(success);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalToken\",\"outputs\":[{\"internalType\":\"contract IERC4096\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalTokenPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSpend\",\"type\":\"uint256\"}],\"name\":\"teleport\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Teleport", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://507fff840c2ef60cb90a11c2e5c2df6dc66747a861c065ccf156facef1e3f929"}