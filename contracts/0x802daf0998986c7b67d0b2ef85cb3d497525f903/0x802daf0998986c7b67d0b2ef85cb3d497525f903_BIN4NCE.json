{"SourceCode": "/* They don't know about #Bin4nce\r\n\r\nhttps://t.me/cz4portal\r\nhttps://twitter.com/binance/status/1711048935031066749\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwnr\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwnr) public virtual onlyOwner {\r\n        require(\r\n            newOwnr != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwnr);\r\n        _owner = newOwnr;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract LockToken is Ownable {\r\n    bool public isOpen = false;\r\n    mapping(address => bool) private _whiteList;\r\n    modifier open(address from, address to) {\r\n        require(isOpen || _whiteList[from] || _whiteList[to], \"Not Open\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _whiteList[msg.sender] = true;\r\n        _whiteList[address(this)] = true;\r\n    }\r\n\r\n    function openTrade() external onlyOwner {\r\n        isOpen = true;\r\n    }\r\n\r\n    function includeToWhiteList(address _address) public onlyOwner {\r\n        _whiteList[_address] = true;\r\n    }\r\n}\r\n\r\ncontract BIN4NCE is Context, IERC20, LockToken {\r\n    using SafeMath for uint256;\r\n    address payable public marketingWallet =\r\n        payable(0x678749E83a347ac6cb404fbBa75851f7452c8500);\r\n    address payable public devWallet =\r\n        payable(0x678749E83a347ac6cb404fbBa75851f7452c8500);\r\n    address public newOwnr = 0x678749E83a347ac6cb404fbBa75851f7452c8500;\r\n    address public uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _feeWhitelisted;\r\n    mapping(address => bool) private _limitWhitelisted;\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    string private _name = \"BIN4NCE\";\r\n    string private _symbol = \"CZ4\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 444444444 * 10 ** 18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 public _liquidityFeeBuys = 0;\r\n    uint256 public _marketingFeeBuys = 240;\r\n    uint256 public _devFeeBuys = 0;\r\n    uint256 public _totalFeeBuys =\r\n        _liquidityFeeBuys + _marketingFeeBuys + _devFeeBuys;\r\n    uint256[] buyFeesBackup = [_liquidityFeeBuys, _marketingFeeBuys, _devFeeBuys];\r\n    uint256 public _liquidityFeeSells = 0;\r\n    uint256 public _marketingFeeSells = 240;\r\n    uint256 public _devFeeSells = 0;\r\n    uint256 public _totalFeeSells =\r\n        _liquidityFeeSells + _marketingFeeSells + _devFeeSells;\r\n\r\n    uint256 public _liquidityTokens = 0;\r\n    uint256 public _marketingTokens = 0;\r\n    uint256 public _devTokens = 0;\r\n    uint256 public transferTotalFee =\r\n        _liquidityTokens + _marketingTokens + _devTokens;\r\n\r\n    uint256 public _txLimit = _tTotal.div(100).mul(2); //2% of total supply\r\n    uint256 public _walletLimit = _tTotal.div(100).mul(2); //2% of total supply\r\n    uint256 private _minBalanceForSwapback = 10000000000000 * 10 ** 18;\r\n\r\n    IUniswapV2Router02 public immutable uniRouterContract;\r\n    address public immutable uniPair;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        _rOwned[newOwnr] = _rTotal;\r\n        IUniswapV2Router02 _uniRouterContract = IUniswapV2Router02(uniRouter);\r\n        uniPair = IUniswapV2Factory(_uniRouterContract.factory())\r\n            .createPair(address(this), _uniRouterContract.WETH());\r\n        uniRouterContract = _uniRouterContract;\r\n        _feeWhitelisted[newOwnr] = true;\r\n        _feeWhitelisted[address(this)] = true;\r\n        includeToWhiteList(newOwnr);\r\n        _limitWhitelisted[newOwnr] = true;\r\n        emit Transfer(address(0), newOwnr, _tTotal);\r\n        excludeWalletsFromWhales();\r\n\r\n        transferOwnership(newOwnr);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function _minBalanceForSwapbackAmount() public view returns (uint256) {\r\n        return _minBalanceForSwapback;\r\n    }\r\n\r\n    function tokenFromReflection(\r\n        uint256 rAmount\r\n    ) private view returns (uint256) {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private open(from, to) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (from != owner() && to != owner()) {\r\n            require(\r\n                amount <= _txLimit,\r\n                \"Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >=\r\n            _minBalanceForSwapback;\r\n\r\n        checkForWhale(from, to, amount);\r\n\r\n        if (\r\n            !inSwapAndLiquify && swapAndLiquifyEnabled && from != uniPair\r\n        ) {\r\n            if (overMinimumTokenBalance) {\r\n                contractTokenBalance = _minBalanceForSwapback;\r\n                swapTokens(contractTokenBalance);\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _feeWhitelisted account then remove the fee\r\n        if (_feeWhitelisted[from] || _feeWhitelisted[to]) {\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 ___totalFeeBuys = _liquidityFeeBuys.add(_marketingFeeBuys).add(\r\n            _devFeeBuys\r\n        );\r\n        uint256 ___totalFeeSells = _liquidityFeeSells.add(_marketingFeeSells).add(\r\n            _devFeeSells\r\n        );\r\n        uint256 totalSwapableFees = ___totalFeeBuys.add(___totalFeeSells);\r\n\r\n        uint256 halfLiquidityTokens = contractTokenBalance\r\n            .mul(_liquidityFeeBuys + _liquidityFeeSells)\r\n            .div(totalSwapableFees)\r\n            .div(2);\r\n        uint256 swapableTokens = contractTokenBalance.sub(halfLiquidityTokens);\r\n        swapTokensForEth(swapableTokens);\r\n\r\n        uint256 newBalance = address(this).balance;\r\n        uint256 ethForLiquidity = newBalance\r\n            .mul(_liquidityFeeBuys + _liquidityFeeSells)\r\n            .div(totalSwapableFees)\r\n            .div(2);\r\n\r\n        if (halfLiquidityTokens > 0 && ethForLiquidity > 0) {\r\n            addLiquidity(halfLiquidityTokens, ethForLiquidity);\r\n        }\r\n\r\n        uint256 ethForMarketing = newBalance\r\n            .mul(_marketingFeeBuys + _marketingFeeSells)\r\n            .div(totalSwapableFees);\r\n        if (ethForMarketing > 0) {\r\n            marketingWallet.transfer(ethForMarketing);\r\n        }\r\n\r\n        uint256 ethForDev = newBalance.sub(ethForLiquidity).sub(\r\n            ethForMarketing\r\n        );\r\n        if (ethForDev > 0) {\r\n            devWallet.transfer(ethForDev);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniRouterContract.WETH();\r\n        _approve(address(this), address(uniRouterContract), tokenAmount);\r\n        uniRouterContract.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniRouterContract), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniRouterContract.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) {\r\n            removeAllFee();\r\n        } else {\r\n            if (recipient == uniPair) {\r\n                setSellFee();\r\n            }\r\n\r\n            if (sender != uniPair && recipient != uniPair) {\r\n                setWalletToWalletTransferFee();\r\n            }\r\n        }\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 tTransferAmount,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if (tLiquidity > 0) {\r\n            emit Transfer(sender, address(this), tLiquidity);\r\n        }\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 tTransferAmount,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if (tLiquidity > 0) {\r\n            emit Transfer(sender, address(this), tLiquidity);\r\n        }\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 tTransferAmount,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if (tLiquidity > 0) {\r\n            emit Transfer(sender, address(this), tLiquidity);\r\n        }\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 tTransferAmount,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if (tLiquidity > 0) {\r\n            emit Transfer(sender, address(this), tLiquidity);\r\n        }\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount\r\n    ) private view returns (uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(\r\n            tAmount,\r\n            tLiquidity,\r\n            _getRate()\r\n        );\r\n        return (rAmount, rTransferAmount, tTransferAmount, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount\r\n    ) private view returns (uint256, uint256) {\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity);\r\n        return (tTransferAmount, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tLiquidity,\r\n        uint256 currentRate\r\n    ) private pure returns (uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rLiquidity);\r\n        return (rAmount, rTransferAmount);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n        }\r\n    }\r\n\r\n    function calculateLiquidityFee(\r\n        uint256 _amount\r\n    ) private view returns (uint256) {\r\n        uint256 fees = _liquidityFeeBuys.add(_marketingFeeBuys).add(_devFeeBuys);\r\n        return _amount.mul(fees).div(1000);\r\n    }\r\n\r\n    function isExcludedFromFee(\r\n        address account\r\n    ) public view onlyOwner returns (bool) {\r\n        return _feeWhitelisted[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _feeWhitelisted[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _feeWhitelisted[account] = false;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _liquidityFeeBuys = 0;\r\n        _marketingFeeBuys = 0;\r\n        _devFeeBuys = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _liquidityFeeBuys = buyFeesBackup[0];\r\n        _marketingFeeBuys = buyFeesBackup[1];\r\n        _devFeeBuys = buyFeesBackup[2];\r\n    }\r\n\r\n    function setSellFee() private {\r\n        _liquidityFeeBuys = _liquidityFeeSells;\r\n        _marketingFeeBuys = _marketingFeeSells;\r\n        _devFeeBuys = _devFeeSells;\r\n    }\r\n\r\n    function setWalletToWalletTransferFee() private {\r\n        _liquidityFeeBuys = _liquidityTokens;\r\n        _marketingFeeBuys = _marketingTokens;\r\n        _devFeeBuys = _devTokens;\r\n    }\r\n\r\n    function _setBuyFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _marketingFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        _liquidityFeeBuys = _liquidityFee;\r\n        _marketingFeeBuys = _marketingFee;\r\n        _devFeeBuys = _devFee;\r\n        buyFeesBackup = [_liquidityFeeBuys, _marketingFeeBuys, _devFeeBuys];\r\n        uint256 totalFee = _liquidityFee.add(_marketingFee).add(_devFee);\r\n        _totalFeeBuys = _liquidityFeeBuys + _marketingFeeBuys + _devFeeBuys;\r\n        require(totalFee <= 700, \"Too High Fee\");\r\n    }\r\n\r\n    function _setSellFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _marketingFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        _liquidityFeeSells = _liquidityFee;\r\n        _marketingFeeSells = _marketingFee;\r\n        _devFeeSells = _devFee;\r\n        uint256 totalFee = _liquidityFee.add(_marketingFee).add(_devFee);\r\n        _totalFeeSells = _liquidityFeeSells + _marketingFeeSells + _devFeeSells;\r\n        require(totalFee <= 700, \"Too High Fee\");\r\n    }\r\n\r\n    function _setTransferFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _marketingFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        _liquidityTokens = _liquidityFee;\r\n        _marketingTokens = _marketingFee;\r\n        _devTokens = _devFee;\r\n        transferTotalFee = _liquidityTokens + _marketingTokens + _devTokens;\r\n        uint256 totalFee = _liquidityFee.add(_marketingFee).add(_devFee);\r\n        require(totalFee <= 100, \"Too High Fee\");\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner {\r\n        _txLimit = maxTxAmount;\r\n        require(_txLimit >= _tTotal.div(5), \"Too low limit\");\r\n    }\r\n\r\n    function setMinimumTokensBeforeSwap(\r\n        uint256 __minBalanceForSwapback\r\n    ) external onlyOwner {\r\n        _minBalanceForSwapback = __minBalanceForSwapback;\r\n    }\r\n\r\n    function setMarketingWallet(address _marketingWallet) external onlyOwner {\r\n        marketingWallet = payable(_marketingWallet);\r\n    }\r\n\r\n    function setDevAWallet(address _devWallet) external onlyOwner {\r\n        devWallet = payable(_devWallet);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function excludeWalletsFromWhales() private {\r\n        _limitWhitelisted[owner()] = true;\r\n        _limitWhitelisted[address(this)] = true;\r\n        _limitWhitelisted[uniPair] = true;\r\n        _limitWhitelisted[devWallet] = true;\r\n        _limitWhitelisted[marketingWallet] = true;\r\n    }\r\n\r\n    function checkForWhale(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private view {\r\n        uint256 newBalance = balanceOf(to).add(amount);\r\n        if (!_limitWhitelisted[from] && !_limitWhitelisted[to]) {\r\n            require(\r\n                newBalance <= _walletLimit,\r\n                \"Exceeding max tokens limit in the wallet\"\r\n            );\r\n        }\r\n        if (from == uniPair && !_limitWhitelisted[to]) {\r\n            require(\r\n                newBalance <= _walletLimit,\r\n                \"Exceeding max tokens limit in the wallet\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function setExcludedFromWhale(\r\n        address account,\r\n        bool _enabled\r\n    ) public onlyOwner {\r\n        _limitWhitelisted[account] = _enabled;\r\n    }\r\n\r\n    function setWalletMaxHoldingLimit(uint256 _amount) public onlyOwner {\r\n        _walletLimit = _amount;\r\n        require(\r\n            _walletLimit > _tTotal.div(100).mul(1),\r\n            \"Too less limit\"\r\n        ); //min 1%\r\n    }\r\n\r\n    function rescueStuckBalance() public onlyOwner {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function triggerSwapback() public {\r\n        uint256 allBalance = balanceOf(address(this));\r\n        swapTokens(allBalance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwnr\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_devFeeBuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFeeSells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeBuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeSells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFeeBuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFeeSells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minBalanceForSwapbackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"_setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"_setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"_setTransferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalFeeBuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalFeeSells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"includeToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwnr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"name\":\"setDevAWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__minBalanceForSwapback\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWalletMaxHoldingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwnr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSwapback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterContract\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BIN4NCE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://98e8f57f9f0ee9341c8d8ed99bb64f278df4f8b8853203eafbcc42615478a843"}