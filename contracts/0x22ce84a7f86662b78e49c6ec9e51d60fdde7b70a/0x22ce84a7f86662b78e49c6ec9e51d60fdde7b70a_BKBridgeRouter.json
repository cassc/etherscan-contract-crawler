{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success,) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage)\\n        internal\\n        returns (bytes memory)\\n    {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage)\\n        internal\\n        returns (bytes memory)\\n    {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BKBridgeAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './libs/TransferHelper.sol';\\nimport './interfaces/IBKBridgeAccess.sol';\\nimport './interfaces/IBKBridgeErrors.sol';\\n\\ncontract BKBridgeAccess is IBKBridgeAccess, IBKBridgeErrors, Ownable, Pausable, ReentrancyGuard {\\n    using ECDSA for bytes32;\\n    using SafeERC20 for IERC20;\\n\\n    address public safe;\\n    address public operator;\\n    address public signer;\\n    address public vault;\\n    address public vaultToken;\\n    mapping(address => bool) public isRelayer;\\n    mapping(address => bool) public isRouter;\\n    mapping(uint256 => uint256) private nonceBitmap;\\n\\n    event RescueETH(address recipient, uint256 amount);\\n    event RescueERC20(address asset, address recipient, uint256 amount);\\n    event SetSafe(address newSafe);\\n    event SetOperator(address newOperator);\\n    event SetSigner(address newSigner);\\n    event SetVault(address newVault);\\n    event SetVaultToken(address newValutToken);\\n    event SetRelayers(address[] relayers, bool isTrue);\\n    event SetRouters(address[] routers, bool isTrue);\\n\\n    modifier onlyOperator() {\\n        _checkOperator();\\n        _;\\n    }\\n\\n    modifier onlySender(address _orderSender) {\\n        _checkSender(_orderSender);\\n        _;\\n    }\\n\\n    modifier onlyRelayer() {\\n        _checkRelayer();\\n        _;\\n    }\\n\\n    function setAccess(AccessType _accessType, bytes calldata _inputs) external onlyOwner {\\n        if (_accessType > AccessType.SET_ROUTERS) {\\n            revert AccessTypeNotAvailable();\\n        }\\n        if (_accessType <= AccessType.SET_VAULT_TOKEN) {\\n            address addr = abi.decode(_inputs, (address));\\n            _checkZero(addr);\\n\\n            if (_accessType == AccessType.SET_SAFE) {\\n                safe = addr;\\n                emit SetSafe(addr);\\n            } else if (_accessType == AccessType.SET_OPERATOR) {\\n                operator = addr;\\n                emit SetOperator(addr);\\n            } else if (_accessType == AccessType.SET_SINGER) {\\n                signer = addr;\\n                emit SetSigner(addr);\\n            } else if (_accessType == AccessType.SET_VAULT) {\\n                vault = addr;\\n                emit SetVault(addr);\\n            } else if (_accessType == AccessType.SET_VAULT_TOKEN) {\\n                vaultToken = addr;\\n                emit SetVaultToken(addr);\\n            }\\n        } else {\\n            (address[] memory addrs, bool isTrue) = abi.decode(_inputs, (address[], bool));\\n\\n            bool isSetRelayer = _accessType == AccessType.SET_RELAYERS;\\n            uint256 length = addrs.length;\\n            for (uint256 i = 0; i < length;) {\\n                address addr = addrs[i];\\n                _checkZero(addr);\\n\\n                if (isSetRelayer) {\\n                    isRelayer[addr] = isTrue;\\n                } else {\\n                    isRouter[addr] = isTrue;\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n            if (isSetRelayer) {\\n                emit SetRelayers(addrs, isTrue);\\n            } else {\\n                emit SetRouters(addrs, isTrue);\\n            }\\n        }\\n    }\\n\\n    function checkBridgeReady() external view returns (bool) {\\n        if (safe == address(0)) {\\n            revert NotSafe();\\n        } else if (operator == address(0)) {\\n            revert NotOperator();\\n        } else if (signer == address(0)) {\\n            revert NotSigner();\\n        } else if (vault == address(0)) {\\n            revert NotVault();\\n        } else if (vaultToken == address(0)) {\\n            revert NotVaultToken();\\n        }\\n        return true;\\n    }\\n\\n    function pause() external onlyOperator {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOperator {\\n        _unpause();\\n    }\\n\\n    function rescueERC20(address asset) external onlyOperator {\\n        _checkZero(safe);\\n        uint256 amount = IERC20(asset).balanceOf(address(this));\\n        TransferHelper.safeTransfer(asset, safe, amount);\\n        emit RescueERC20(asset, safe, amount);\\n    }\\n\\n    function rescueETH() external onlyOperator {\\n        _checkZero(safe);\\n        uint256 amount = address(this).balance;\\n        TransferHelper.safeTransferETH(safe, amount);\\n        emit RescueETH(safe, amount);\\n    }\\n\\n    function _checkOperator() internal view {\\n        if (msg.sender != operator) {\\n            revert NotOperator();\\n        }\\n    }\\n\\n    function _checkSender(address orderSender) internal view {\\n        if (msg.sender != orderSender) {\\n            revert NotSender();\\n        }\\n    }\\n\\n    function _checkRelayer() internal view {\\n        if (!isRelayer[msg.sender]) {\\n            revert NotRelayer();\\n        }\\n    }\\n\\n    function _checkZero(address _address) internal pure {\\n        if (_address == address(0)) {\\n            revert InvalidAddress();\\n        }\\n    }\\n\\n    function _checkVaultToken(address _vaultToken) internal view {\\n        if (_vaultToken != vaultToken) {\\n            revert NotVaultToken();\\n        }\\n    }\\n\\n    function _checkVaultReceiver(address _vaultReceiver) internal view {\\n        if (_vaultReceiver != vault) {\\n            revert NotVault();\\n        }\\n    }\\n\\n    function _checkSwapReceiver(address _targetReceiver, address _swapReceiver) internal pure {\\n        if (_targetReceiver != _swapReceiver) {\\n            revert SwapReceiverMisMatch();\\n        }\\n    }\\n\\n    function _checkRouter(address _router) internal view {\\n        if (!isRouter[_router]) {\\n            revert NotRouter();\\n        }\\n    }\\n\\n    function _checkSigner(uint256 _nonce, bytes calldata _signature, bytes32 _transferId, uint256 _dstChainId) internal {\\n        _useUnorderedNonce(_nonce);\\n\\n        bytes32 msgHash = keccak256(abi.encodePacked(_nonce, block.chainid, address(this), msg.sender, _transferId, _dstChainId));\\n\\n        bytes32 finalMsgHash = msgHash.toEthSignedMessageHash();\\n\\n        address signer_ = finalMsgHash.recover(_signature);\\n\\n        if (signer_ != signer) {\\n            revert NotSigner();\\n        }\\n    }\\n\\n    /// @notice Checks whether a nonce is taken and sets the bit at the bit position in the bitmap at the word position\\n    /// @param nonce The nonce to spend\\n    function _useUnorderedNonce(uint256 nonce) internal {\\n        (uint256 wordPos, uint256 bitPos) = bitmapPositions(nonce);\\n        uint256 bit = 1 << bitPos;\\n        uint256 flipped = nonceBitmap[wordPos] ^= bit;\\n\\n        if (flipped & bit == 0) revert InvalidNonce();\\n    }\\n\\n    /// @notice Returns the index of the bitmap and the bit position within the bitmap. Used for unordered nonces\\n    /// @param nonce The nonce to get the associated word and bit positions\\n    /// @return wordPos The word position or index into the nonceBitmap\\n    /// @return bitPos The bit position\\n    /// @dev The first 248 bits of the nonce value is the index of the desired bitmap\\n    /// @dev The last 8 bits of the nonce value is the position of the bit in the bitmap\\n    function bitmapPositions(uint256 nonce) internal pure returns (uint256 wordPos, uint256 bitPos) {\\n        wordPos = uint248(nonce >> 8);\\n        bitPos = uint8(nonce);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BKBridgeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport './libs/BKBridgeHandler.sol';\\nimport './interfaces/IBKBridgeRouter.sol';\\nimport './BKBridgeAccess.sol';\\n\\ncontract BKBridgeRouter is IBKBridgeRouter, BKBridgeAccess {\\n    mapping(bytes32 => uint256) public orderStatus;\\n    mapping(bytes32 => uint256) public orderAmount;\\n\\n    event BKBridge(\\n        uint256 indexed orderStatus,\\n        bytes32 indexed transferId,\\n        address vaultReceiver,\\n        address sender,\\n        address receiver,\\n        address srcToken,\\n        address dstToken,\\n        uint256 srcChainId,\\n        uint256 dstChainId,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    constructor(address _owner) BKBridgeAccess() {\\n        _checkZero(_owner);\\n        _transferOwnership(_owner);\\n    }\\n\\n    receive() external payable {}\\n\\n    function send(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        onlySender(_orderInfo.sender)\\n    {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        _checkVaultReceiver(_orderInfo.vaultReceiver);\\n        _checkVaultToken(_orderInfo.srcToken);\\n        HandlerCallBack memory _callback = BKBridgeHandler.send(_orderInfo, orderStatus, orderAmount);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function sendV1(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV1Info calldata _swapV1Info)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        onlySender(_orderInfo.sender)\\n    {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        _checkVaultReceiver(_orderInfo.vaultReceiver);\\n        _checkVaultToken(_swapV1Info.path[_swapV1Info.path.length - 1]);\\n        _checkRouter(_swapV1Info.bkSwapV1Router);\\n        _checkSwapReceiver(vault, _swapV1Info.to);\\n        HandlerCallBack memory _callback = BKBridgeHandler.sendV1(_orderInfo, _swapV1Info, orderStatus, orderAmount);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function sendV2(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV2Info calldata _swapV2Info)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        onlySender(_orderInfo.sender)\\n    {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        _checkVaultReceiver(_orderInfo.vaultReceiver);\\n        _checkVaultToken(_swapV2Info.toTokenAddress);\\n        _checkRouter(_swapV2Info.bkSwapV2Router);\\n        _checkSwapReceiver(vault, _swapV2Info.to);\\n        HandlerCallBack memory _callback = BKBridgeHandler.sendV2(_orderInfo, _swapV2Info, orderStatus, orderAmount);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function relay(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _relayAmount)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        onlyRelayer\\n    {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        _checkVaultReceiver(_orderInfo.vaultReceiver);\\n        _checkVaultToken(_orderInfo.dstToken);\\n        HandlerCallBack memory _callback = BKBridgeHandler.relay(_orderInfo, _relayAmount, orderStatus);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function relayV1(\\n        SignInfo calldata _signInfo,\\n        OrderInfo calldata _orderInfo,\\n        SwapV1Info calldata _swapV1Info,\\n        uint256 _relayAmount\\n    ) external payable whenNotPaused nonReentrant onlyRelayer {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        _checkVaultReceiver(_orderInfo.vaultReceiver);\\n        _checkVaultToken(_swapV1Info.path[0]);\\n        _checkRouter(_swapV1Info.bkSwapV1Router);\\n        _checkSwapReceiver(_orderInfo.receiver, _swapV1Info.to);\\n        HandlerCallBack memory _callback = BKBridgeHandler.relayV1(_orderInfo, _swapV1Info, _relayAmount, orderStatus);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function relayV2(\\n        SignInfo calldata _signInfo,\\n        OrderInfo calldata _orderInfo,\\n        SwapV2Info calldata _swapV2Info,\\n        uint256 _relayAmount\\n    ) external payable whenNotPaused nonReentrant onlyRelayer {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        _checkVaultReceiver(_orderInfo.vaultReceiver);\\n        _checkVaultToken(_swapV2Info.fromTokenAddress);\\n        _checkRouter(_swapV2Info.bkSwapV2Router);\\n        _checkSwapReceiver(_orderInfo.receiver, _swapV2Info.to);\\n        HandlerCallBack memory _callback = BKBridgeHandler.relayV2(_orderInfo, _swapV2Info, _relayAmount, orderStatus);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function cancel(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        onlyRelayer\\n    {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        HandlerCallBack memory _callback = BKBridgeHandler.cancel(_orderInfo, orderStatus);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function refund(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _refundAmount)\\n        external\\n        payable\\n        whenNotPaused\\n        nonReentrant\\n        onlyRelayer\\n    {\\n        _checkSigner(_signInfo.nonce, _signInfo.signature, _orderInfo.transferId, _orderInfo.dstChainId);\\n        HandlerCallBack memory _callback =\\n            BKBridgeHandler.refund(_orderInfo, _refundAmount, vaultToken, orderStatus, orderAmount);\\n        _emitEvent(_orderInfo, _callback);\\n    }\\n\\n    function _emitEvent(OrderInfo calldata _orderInfo, HandlerCallBack memory _callback) internal {\\n        emit BKBridge(\\n            _callback.status,\\n            _orderInfo.transferId,\\n            _orderInfo.vaultReceiver,\\n            _orderInfo.sender,\\n            _orderInfo.receiver,\\n            _orderInfo.srcToken,\\n            _orderInfo.dstToken,\\n            block.chainid,\\n            _orderInfo.dstChainId,\\n            _callback.amount,\\n            _orderInfo.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBKBridgeAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {AccessType} from './IBKBridgeParams.sol';\\n\\ninterface IBKBridgeAccess {\\n    function setAccess(AccessType _accessType, bytes calldata _inputs) external;\\n\\n    function checkBridgeReady() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function rescueETH() external;\\n\\n    function rescueERC20(address asset) external;\\n\\n    // function paused() external view returns(bool);\\n\\n    // function transferOwnership(address newOwner) external;\\n\\n    // function owner() external view returns(address);\\n\\n    // function safe() external view returns(address);\\n\\n    // function operator() external view returns(address);\\n\\n    // function signer() external view returns(address);\\n\\n    // function vault() external view returns(address);\\n\\n    // function vaultToken() external view returns(address);\\n\\n    // function isRelayer(address _addr) external view returns(bool);\\n\\n    // function isRouter(address _addr) external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBKBridgeErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface IBKBridgeErrors {\\n    error AccessTypeNotAvailable();\\n    error TransferFailed();\\n    error InvalidAddress();\\n    error InvalidNonce();\\n    error NotSafe();\\n    error NotOperator();\\n    error NotSigner();\\n    error NotVault();\\n    error NotVaultToken();\\n    error NotSender();\\n    error NotRelayer();\\n    error NotRouter();\\n    error OrderAlreadyExist();\\n    error OrderNotSend();\\n    error OrderAlreadySend();\\n    error EthBalanceNotEnough();\\n    error WrongVaultReceiveToken();\\n    error WrongRefundAmount();\\n    error WrongRelayAmount();\\n    error SwapInsuffenceOutPut();\\n    error SwapReceiverMisMatch();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBKBridgeParams.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nenum AccessType {\\n    SET_SAFE,\\n    SET_OPERATOR,\\n    SET_SINGER,\\n    SET_VAULT,\\n    SET_VAULT_TOKEN,\\n    SET_RELAYERS,\\n    SET_ROUTERS\\n}\\n\\nstruct SignInfo {\\n    uint256 nonce;\\n    bytes signature;\\n}\\n\\nstruct OrderInfo {\\n    address vaultReceiver;\\n    bytes32 transferId;\\n    address sender;\\n    address receiver;\\n    address srcToken;\\n    address dstToken;\\n    uint256 srcChainId;\\n    uint256 dstChainId;\\n    uint256 amount;\\n    uint256 timestamp;\\n}\\n\\nstruct SwapV1Info {\\n    address bkSwapV1Router;\\n    address handlerAddress;\\n    address router;\\n    address[] path;\\n    uint24[] poolFee;\\n    uint256 amountIn;\\n    uint256 minAmountOut;\\n    address to;\\n}\\n\\nstruct SwapV2Info {\\n    address bkSwapV2Router;\\n    address fromTokenAddress;\\n    address toTokenAddress;\\n    address to;\\n    uint256 amountInTotal;\\n    uint256 minAmountOut;\\n    bytes data;\\n}\\n\\nstruct HandlerCallBack {\\n    uint256 amount;\\n    uint256 status;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBKBridgeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {SignInfo, OrderInfo, SwapV1Info, SwapV2Info, HandlerCallBack} from './IBKBridgeParams.sol';\\n\\ninterface IBKBridgeRouter {\\n    function orderStatus(bytes32 _key) external view returns (uint256);\\n    function orderAmount(bytes32 _key) external view returns (uint256);\\n\\n    function send(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo) external payable;\\n\\n    function sendV1(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV1Info calldata _swapV1Info)\\n        external\\n        payable;\\n\\n    function sendV2(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, SwapV2Info calldata _swapV2Info)\\n        external\\n        payable;\\n\\n    function relay(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _relayAmount) external payable;\\n\\n    function relayV1(\\n        SignInfo calldata _signInfo,\\n        OrderInfo calldata _orderInfo,\\n        SwapV1Info calldata _swapV1Info,\\n        uint256 _relayAmount\\n    ) external payable;\\n\\n    function relayV2(\\n        SignInfo calldata _signInfo,\\n        OrderInfo calldata _orderInfo,\\n        SwapV2Info calldata _swapV2Info,\\n        uint256 _relayAmount\\n    ) external payable;\\n\\n    function cancel(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo) external payable;\\n\\n    function refund(SignInfo calldata _signInfo, OrderInfo calldata _orderInfo, uint256 _refundAmount)\\n        external\\n        payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IBKSwap.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.17;\\n\\ninterface IBKSwap {\\n    function swap(\\n        address payable _handlerAddress,\\n        address _router,\\n        address[] memory _path,\\n        uint24[] memory _poolFee,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _to\\n    ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/swap/IBKSwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\ninterface IBKSwapRouter {\\n    struct SwapParams {\\n        address fromTokenAddress;\\n        uint256 amountInTotal;\\n        bytes data;\\n    }\\n\\n    function swap(SwapParams calldata swapParams) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/BKBridgeHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '../interfaces/swap/IBKSwap.sol';\\nimport '../interfaces/swap/IBKSwapRouter.sol';\\nimport './TransferHelper.sol';\\nimport './BKBridgeKey.sol';\\nimport '../interfaces/IBKBridgeErrors.sol';\\nimport {OrderInfo, SignInfo, SwapV1Info, SwapV2Info, HandlerCallBack} from '../interfaces/IBKBridgeParams.sol';\\n\\nlibrary BKBridgeHandler {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant _INEXIST = 0;\\n    uint256 private constant _SEND = 1;\\n    uint256 private constant _RELAY = 2;\\n    uint256 private constant _CANCEL = 3;\\n    uint256 private constant _REFUND = 4;\\n\\n    function send(\\n        OrderInfo calldata _orderInfo,\\n        mapping(bytes32 => uint256) storage orderStatus,\\n        mapping(bytes32 => uint256) storage orderAmount\\n    ) external returns (HandlerCallBack memory callback) {\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _INEXIST) {\\n            revert IBKBridgeErrors.OrderAlreadyExist();\\n        }\\n\\n        IERC20 iVaultToken = IERC20(_orderInfo.srcToken);\\n        uint256 vaultBeforeBalance = iVaultToken.balanceOf(_orderInfo.vaultReceiver);\\n\\n        orderAmount[key] = _orderInfo.amount;\\n        orderStatus[key] = _SEND;\\n        TransferHelper.safeTransferFrom(_orderInfo.srcToken, msg.sender, _orderInfo.vaultReceiver, _orderInfo.amount);\\n\\n        if (iVaultToken.balanceOf(_orderInfo.vaultReceiver) - vaultBeforeBalance != _orderInfo.amount) {\\n            revert IBKBridgeErrors.WrongVaultReceiveToken();\\n        }\\n\\n        callback.amount = _orderInfo.amount;\\n        callback.status = _SEND;\\n    }\\n\\n    function sendV1(\\n        OrderInfo calldata _orderInfo,\\n        SwapV1Info calldata _swapV1Info,\\n        mapping(bytes32 => uint256) storage orderStatus,\\n        mapping(bytes32 => uint256) storage orderAmount\\n    ) external returns (HandlerCallBack memory callback) {\\n        address swapTokenOut = _swapV1Info.path[_swapV1Info.path.length - 1];\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _INEXIST) {\\n            revert IBKBridgeErrors.OrderAlreadyExist();\\n        }\\n\\n        IERC20 iSwapTokenOut = IERC20(swapTokenOut);\\n        uint256 vaultBeforeBalance = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver);\\n\\n        orderStatus[key] = _SEND;\\n        _bridgeForSwapV1(_swapV1Info);\\n\\n        uint256 valutTokenAmount = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver) - vaultBeforeBalance;\\n        if (valutTokenAmount < _swapV1Info.minAmountOut) {\\n            revert IBKBridgeErrors.WrongVaultReceiveToken();\\n        }\\n\\n        orderAmount[key] = valutTokenAmount;\\n\\n        callback.amount = valutTokenAmount;\\n        callback.status = _SEND;\\n    }\\n\\n    function sendV2(\\n        OrderInfo calldata _orderInfo,\\n        SwapV2Info calldata _swapV2Info,\\n        mapping(bytes32 => uint256) storage orderStatus,\\n        mapping(bytes32 => uint256) storage orderAmount\\n    ) external returns (HandlerCallBack memory callback) {\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _INEXIST) {\\n            revert IBKBridgeErrors.OrderAlreadyExist();\\n        }\\n\\n        IERC20 iSwapTokenOut = IERC20(_swapV2Info.toTokenAddress);\\n        uint256 vaultBeforeBalance = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver);\\n\\n        orderStatus[key] = _SEND;\\n        _bridgeForSwapV2(_swapV2Info);\\n\\n        uint256 valutTokenAmount = iSwapTokenOut.balanceOf(_orderInfo.vaultReceiver) - vaultBeforeBalance;\\n        if (valutTokenAmount < _swapV2Info.minAmountOut) {\\n            revert IBKBridgeErrors.WrongVaultReceiveToken();\\n        }\\n\\n        orderAmount[key] = valutTokenAmount;\\n        \\n        callback.amount = valutTokenAmount;\\n        callback.status = _SEND;\\n    }\\n\\n    function relay(OrderInfo calldata _orderInfo, uint256 _relayAmount, mapping(bytes32 => uint256) storage orderStatus)\\n        external\\n        returns (HandlerCallBack memory callback)\\n    {\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _INEXIST) {\\n            revert IBKBridgeErrors.OrderAlreadyExist();\\n        }\\n        IERC20 iVaultToken = IERC20(_orderInfo.dstToken);\\n        uint256 vaultBeforeBalance = iVaultToken.balanceOf(msg.sender);\\n\\n        orderStatus[key] = _RELAY;\\n        TransferHelper.safeTransferFrom(_orderInfo.dstToken, msg.sender, _orderInfo.receiver, _relayAmount);\\n        if (vaultBeforeBalance - iVaultToken.balanceOf(msg.sender) != _relayAmount) {\\n            revert IBKBridgeErrors.WrongRelayAmount();\\n        }\\n\\n        callback.amount = _relayAmount;\\n        callback.status = _RELAY;\\n    }\\n\\n    function relayV1(\\n        OrderInfo calldata _orderInfo,\\n        SwapV1Info calldata _swapV1Info,\\n        uint256 _relayAmount,\\n        mapping(bytes32 => uint256) storage orderStatus\\n    ) external returns (HandlerCallBack memory callback) {\\n        address swapTokenIn = _swapV1Info.path[0];\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _INEXIST) {\\n            revert IBKBridgeErrors.OrderAlreadyExist();\\n        }\\n\\n        IERC20 iSwapTokenIn = IERC20(swapTokenIn);\\n        uint256 vaultBeforeBalance = iSwapTokenIn.balanceOf(msg.sender);\\n\\n        address SwapTokenOutAddress = _swapV1Info.path[_swapV1Info.path.length - 1];\\n        uint256 receiverBeforeBalance; \\n        if(TransferHelper.isETH(SwapTokenOutAddress)) {\\n            receiverBeforeBalance = _orderInfo.receiver.balance;\\n        } else {\\n            receiverBeforeBalance = IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver);\\n        }\\n\\n        orderStatus[key] = _RELAY;\\n        _bridgeForSwapV1(_swapV1Info);\\n\\n        uint256 valutTokenAmount = vaultBeforeBalance - iSwapTokenIn.balanceOf(msg.sender);\\n        if (_relayAmount != valutTokenAmount) {\\n            revert IBKBridgeErrors.WrongRelayAmount();\\n        }\\n\\n        if(TransferHelper.isETH(SwapTokenOutAddress)) {\\n            if ((_orderInfo.receiver.balance - receiverBeforeBalance) < _swapV1Info.minAmountOut) {\\n                revert IBKBridgeErrors.SwapInsuffenceOutPut();\\n            } \\n        } else {\\n            if ((IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver) - receiverBeforeBalance) < _swapV1Info.minAmountOut) {\\n                revert IBKBridgeErrors.SwapInsuffenceOutPut();\\n            } \\n        }\\n\\n        callback.amount = _relayAmount;\\n        callback.status = _RELAY;\\n    }\\n\\n    function relayV2(\\n        OrderInfo calldata _orderInfo,\\n        SwapV2Info calldata _swapV2Info,\\n        uint256 _relayAmount,\\n        mapping(bytes32 => uint256) storage orderStatus\\n    ) external returns (HandlerCallBack memory callback) {\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _INEXIST) {\\n            revert IBKBridgeErrors.OrderAlreadyExist();\\n        }\\n\\n        IERC20 iSwapTokenIn = IERC20(_swapV2Info.fromTokenAddress);\\n        uint256 vaultBeforeBalance = iSwapTokenIn.balanceOf(msg.sender);\\n\\n        address SwapTokenOutAddress = _swapV2Info.toTokenAddress;\\n        uint256 receiverBeforeBalance; \\n        if(TransferHelper.isETH(SwapTokenOutAddress)) {\\n            receiverBeforeBalance = _orderInfo.receiver.balance;\\n        } else {\\n            receiverBeforeBalance = IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver);\\n        }\\n        \\n        orderStatus[key] = _RELAY;\\n        _bridgeForSwapV2(_swapV2Info);\\n\\n        uint256 valutTokenAmount = vaultBeforeBalance - iSwapTokenIn.balanceOf(msg.sender);\\n        if (_relayAmount != valutTokenAmount) {\\n            revert IBKBridgeErrors.WrongRelayAmount();\\n        }\\n\\n        if(TransferHelper.isETH(SwapTokenOutAddress)) {\\n            if ((_orderInfo.receiver.balance - receiverBeforeBalance) < _swapV2Info.minAmountOut) {\\n                revert IBKBridgeErrors.SwapInsuffenceOutPut();\\n            } \\n        } else {\\n            if ((IERC20(SwapTokenOutAddress).balanceOf(_orderInfo.receiver) - receiverBeforeBalance) < _swapV2Info.minAmountOut) {\\n                revert IBKBridgeErrors.SwapInsuffenceOutPut();\\n            } \\n        }\\n\\n        callback.amount = _relayAmount;\\n        callback.status = _RELAY;\\n    }\\n\\n    function cancel(OrderInfo calldata _orderInfo, mapping(bytes32 => uint256) storage orderStatus)\\n        external\\n        returns (HandlerCallBack memory callback)\\n    {\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _INEXIST) {\\n            revert IBKBridgeErrors.OrderAlreadyExist();\\n        }\\n\\n        orderStatus[key] = _CANCEL;\\n        callback.amount = 0;\\n        callback.status = _CANCEL;\\n    }\\n\\n    function refund(\\n        OrderInfo calldata _orderInfo,\\n        uint256 _refundAmount,\\n        address _vaultToken,\\n        mapping(bytes32 => uint256) storage orderStatus,\\n        mapping(bytes32 => uint256) storage orderAmount\\n    ) external returns (HandlerCallBack memory callback) {\\n        bytes32 key = BKBridgeKey.keyOf(_orderInfo);\\n        if (orderStatus[key] != _SEND) {\\n            revert IBKBridgeErrors.OrderNotSend();\\n        }\\n        if (_refundAmount > orderAmount[key]) {\\n            revert IBKBridgeErrors.WrongRefundAmount();\\n        }\\n        orderAmount[key] = 0;\\n        orderStatus[key] = _REFUND;\\n        TransferHelper.safeTransferFrom(_vaultToken, msg.sender, _orderInfo.sender, _refundAmount);\\n        callback.amount = _refundAmount;\\n        callback.status = _REFUND;\\n    }\\n\\n    function _bridgeForSwapV1(SwapV1Info calldata _swapV1Info) internal {\\n        address swapTokenIn = _swapV1Info.path[0];\\n\\n        if (TransferHelper.isETH(swapTokenIn)) {\\n            if (msg.value < _swapV1Info.amountIn) {\\n                revert IBKBridgeErrors.EthBalanceNotEnough();\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(swapTokenIn, msg.sender, address(this), _swapV1Info.amountIn);\\n            TransferHelper.approveMax(IERC20(swapTokenIn), _swapV1Info.bkSwapV1Router, _swapV1Info.amountIn);\\n        }\\n\\n        IBKSwap(_swapV1Info.bkSwapV1Router).swap{value: msg.value}(\\n            payable(_swapV1Info.handlerAddress),\\n            _swapV1Info.router,\\n            _swapV1Info.path,\\n            _swapV1Info.poolFee,\\n            _swapV1Info.amountIn,\\n            _swapV1Info.minAmountOut,\\n            _swapV1Info.to\\n        );\\n    }\\n\\n    function _bridgeForSwapV2(SwapV2Info calldata _swapV2Info) internal {\\n        address swapTokenIn = _swapV2Info.fromTokenAddress;\\n        if (TransferHelper.isETH(swapTokenIn)) {\\n            if (msg.value < _swapV2Info.amountInTotal) {\\n                revert IBKBridgeErrors.EthBalanceNotEnough();\\n            }\\n        } else {\\n            TransferHelper.safeTransferFrom(swapTokenIn, msg.sender, address(this), _swapV2Info.amountInTotal);\\n            TransferHelper.approveMax(IERC20(swapTokenIn), _swapV2Info.bkSwapV2Router, _swapV2Info.amountInTotal);\\n        }\\n\\n        IBKSwapRouter(_swapV2Info.bkSwapV2Router).swap{value: msg.value}(\\n            IBKSwapRouter.SwapParams(_swapV2Info.fromTokenAddress, _swapV2Info.amountInTotal, _swapV2Info.data)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/BKBridgeKey.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport {OrderInfo} from '../interfaces/IBKBridgeParams.sol';\\n\\nlibrary BKBridgeKey {\\n    bytes16 internal constant BRIDGE_SALT0 = 'BitKeep bridge';\\n    bytes16 internal constant BRIDGE_SALT1 = 'Version 1.0.0';\\n\\n    function keyOf(OrderInfo calldata _orderInfo) internal pure returns (bytes32 key) {\\n        key = keccak256(\\n            abi.encodePacked(\\n                _orderInfo.transferId,\\n                _orderInfo.vaultReceiver,\\n                _orderInfo.sender,\\n                _orderInfo.receiver,\\n                _orderInfo.srcToken,\\n                BRIDGE_SALT0,\\n                _orderInfo.dstToken,\\n                _orderInfo.srcChainId,\\n                _orderInfo.dstChainId,\\n                BRIDGE_SALT1,\\n                _orderInfo.amount,\\n                _orderInfo.timestamp\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nlibrary TransferHelper {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success,) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n\\n    function approveMax(IERC20 _token, address _spender, uint256 _amount) internal {\\n        uint256 allowance = _token.allowance(address(this), address(_spender));\\n        if (allowance < _amount) {\\n            if (allowance > 0) {\\n                _token.safeApprove(address(_spender), 0);\\n            }\\n            _token.safeApprove(address(_spender), type(uint256).max);\\n        }\\n    }\\n\\n    function isETH(address _tokenAddress) internal pure returns (bool) {\\n        return (_tokenAddress == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            || (_tokenAddress == 0x0000000000000000000000000000000000000000);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libs/BKBridgeHandler.sol\": {\r\n        \"BKBridgeHandler\": \"0xa5237a040ee649a4f670102fc6aab87c235b6428\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessTypeNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthBalanceNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSafe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderAlreadySend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderNotSend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapInsuffenceOutPut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapReceiverMisMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongRefundAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongRelayAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultReceiveToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderStatus\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BKBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"relayers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"}],\"name\":\"SetRelayers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrue\",\"type\":\"bool\"}],\"name\":\"SetRouters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSafe\",\"type\":\"address\"}],\"name\":\"SetSafe\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SetSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"SetVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValutToken\",\"type\":\"address\"}],\"name\":\"SetVaultToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBridgeReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_relayAmount\",\"type\":\"uint256\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bkSwapV1Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"poolFee\",\"type\":\"uint24[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct SwapV1Info\",\"name\":\"_swapV1Info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_relayAmount\",\"type\":\"uint256\"}],\"name\":\"relayV1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bkSwapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapV2Info\",\"name\":\"_swapV2Info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_relayAmount\",\"type\":\"uint256\"}],\"name\":\"relayV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bkSwapV1Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint24[]\",\"name\":\"poolFee\",\"type\":\"uint24[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct SwapV1Info\",\"name\":\"_swapV1Info\",\"type\":\"tuple\"}],\"name\":\"sendV1\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignInfo\",\"name\":\"_signInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderInfo\",\"name\":\"_orderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bkSwapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapV2Info\",\"name\":\"_swapV2Info\",\"type\":\"tuple\"}],\"name\":\"sendV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AccessType\",\"name\":\"_accessType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_inputs\",\"type\":\"bytes\"}],\"name\":\"setAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BKBridgeRouter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d96ae67955de94caac04efc8edb857557dd67c2b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}