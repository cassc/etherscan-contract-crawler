{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract SparksterToken is StandardToken, Ownable{\r\n\tusing SafeMath for uint256;\r\n\tstruct Member {\r\n\t\tmapping(uint256 => uint256) weiBalance; // How much wei has this member contributed for this group?\r\n\t}\r\n\r\n\tstruct Group {\r\n\t\tbool distributed; // Whether or not tokens in this group have been distributed.\r\n\t\tbool distributing; // This flag is set when we first enter the distribute function and is there to prevent race conditions, since distribution might take a long time.\r\n\t\tbool unlocked; // Whether or not tokens in this group have been unlocked.\r\n\t\tmapping(address => bool) exists; // If exists[address] is true, this address has made a purchase on this group before.\r\n\t\tstring name;\r\n\t\tuint256 ratio; // 1 eth:ratio tokens. This amount represents the decimal amount. ratio*10**decimal = ratio sparks.\r\n\t\tuint256 startTime; // Epoch of crowdsale start time.\r\n\t\tuint256 phase1endTime; // Epoch of phase1 end time.\r\n\t\tuint256 phase2endTime; // Epoch of phase2 end time.\r\n\t\tuint256 deadline; // No contributions allowed after this epoch.\r\n\t\tuint256 max2; // cap of phase2\r\n\t\tuint256 max3; // Total ether this group can collect in phase 3.\r\n\t\tuint256 weiTotal; // How much ether has this group collected?\r\n\t\tuint256 cap; // The hard ether cap.\r\n\t\tuint256 nextDistributionIndex; // The next index to start distributing at.\r\n\t\taddress[] addresses; // List of addresses that have made a purchase on this group.\r\n\t}\r\n\r\n\taddress oracleAddress;\r\n\tbool public transferLock = true; // A Global transfer lock. Set to lock down all tokens from all groups.\r\n\tbool public allowedToBuyBack = false;\r\n\tbool public allowedToPurchase = false;\r\n\tstring public name;\t\t\t\t\t\t\t\t\t // name for display\r\n\tstring public symbol;\t\t\t\t\t\t\t\t //An identifier\r\n\tuint8 public decimals;\t\t\t\t\t\t\t//How many decimals to show.\r\n\tuint256 public penalty;\r\n\tuint256 public maxGasPrice; // The maximum allowed gas for the purchase function.\r\n\tuint256 internal nextGroupNumber;\r\n\tuint256 public sellPrice; // sellPrice wei:1 spark token; we won't allow to sell back parts of a token.\r\n\tmapping(address => Member) internal members;\r\n\tmapping(uint256 => Group) internal groups;\r\n\tuint256 public openGroupNumber;\r\n\tevent WantsToPurchase(address walletAddress, uint256 weiAmount, uint256 groupNumber, bool inPhase1);\r\n\tevent PurchasedCallbackOnAccept(uint256 groupNumber, address[] addresses);\r\n\tevent WantsToDistribute(uint256 groupNumber);\r\n\tevent NearingHardCap(uint256 groupNumber, uint256 remainder);\r\n\tevent ReachedHardCap(uint256 groupNumber);\r\n\tevent DistributeDone(uint256 groupNumber);\r\n\tevent DistributedBatch(uint256 groupNumber, uint256 howMany);\r\n\tevent AirdroppedBatch(address[] addresses);\r\n\tevent RefundedBatch(address[] addresses);\r\n\tevent AddToGroup(address walletAddress, uint256 groupNumber);\r\n\tevent ChangedTransferLock(bool transferLock);\r\n\tevent ChangedAllowedToPurchase(bool allowedToPurchase);\r\n\tevent ChangedAllowedToBuyBack(bool allowedToBuyBack);\r\n\tevent SetSellPrice(uint256 sellPrice);\r\n\t\r\n\tmodifier onlyOwnerOrOracle() {\r\n\t\trequire(msg.sender == owner || msg.sender == oracleAddress);\r\n\t\t_;\r\n\t}\r\n\t\r\n\t// Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\r\n\tmodifier onlyPayloadSize(uint size) {\t \r\n\t\trequire(msg.data.length == size + 4);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier canTransfer() {\r\n\t\tif (msg.sender != owner) {\r\n\t\t\trequire(!transferLock);\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier canPurchase() {\r\n\t\trequire(allowedToPurchase);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier canSell() {\r\n\t\trequire(allowedToBuyBack);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction() public payable {\r\n\t\tpurchase();\r\n\t}\r\n\r\n\tconstructor() public {\r\n\t\tname = \"Sparkster\";\t\t\t\t\t\t\t\t\t// Set the name for display purposes\r\n\t\tdecimals = 18;\t\t\t\t\t // Amount of decimals for display purposes\r\n\t\tsymbol = \"SPRK\";\t\t\t\t\t\t\t// Set the symbol for display purposes\r\n\t\tsetMaximumGasPrice(40);\r\n\t\tmintTokens(435000000);\r\n\t}\r\n\t\r\n\tfunction setOracleAddress(address newAddress) public onlyOwner returns(bool success) {\r\n\t\toracleAddress = newAddress;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeOracleAddress() public onlyOwner {\r\n\t\toracleAddress = address(0);\r\n\t}\r\n\r\n\tfunction setMaximumGasPrice(uint256 gweiPrice) public onlyOwner returns(bool success) {\r\n\t\tmaxGasPrice = gweiPrice.mul(10**9); // Convert the gwei value to wei.\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction mintTokens(uint256 amount) public onlyOwner {\r\n\t\t// Here, we'll consider amount to be the full token amount, so we have to get its decimal value.\r\n\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals);\r\n\t\ttotalSupply_ = totalSupply_.add(decimalAmount);\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(decimalAmount);\r\n\t\temit Transfer(address(0), msg.sender, decimalAmount); // Per erc20 standards-compliance.\r\n\t}\r\n\r\n\tfunction purchase() public canPurchase payable returns(bool success) {\r\n\t\trequire(msg.sender != address(0)); // Don't allow the 0 address.\r\n\t\tMember storage memberRecord = members[msg.sender];\r\n\t\tGroup storage openGroup = groups[openGroupNumber];\r\n\t\trequire(openGroup.ratio > 0); // Group must be initialized.\r\n\t\tuint256 currentTimestamp = block.timestamp;\r\n\t\trequire(currentTimestamp >= openGroup.startTime && currentTimestamp <= openGroup.deadline);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //the timestamp must be greater than or equal to the start time and less than or equal to the deadline time\r\n\t\trequire(!openGroup.distributing && !openGroup.distributed); // Don't allow to purchase if we're in the middle of distributing this group; Don't let someone buy tokens on the current group if that group is already distributed.\r\n\t\trequire(tx.gasprice <= maxGasPrice); // Restrict maximum gas this transaction is allowed to consume.\r\n\t\tuint256 weiAmount = msg.value;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The amount purchased by the current member\r\n\t\trequire(weiAmount >= 0.1 ether);\r\n\t\tuint256 weiTotal = openGroup.weiTotal.add(weiAmount); // Calculate total contribution of all members in this group.\r\n\t\trequire(weiTotal <= openGroup.cap);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check to see if accepting these funds will put us above the hard ether cap.\r\n\t\tuint256 userWeiTotal = memberRecord.weiBalance[openGroupNumber].add(weiAmount);\t// Calculate the total amount purchased by the current member\r\n\t\tif (!openGroup.exists[msg.sender]) { // Has this person not purchased on this group before?\r\n\t\t\topenGroup.addresses.push(msg.sender);\r\n\t\t\topenGroup.exists[msg.sender] = true;\r\n\t\t}\r\n\t\tif(currentTimestamp <= openGroup.phase1endTime){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // whether the current timestamp is in the first phase\r\n\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, true);\r\n\t\t\treturn true;\r\n\t\t} else if (currentTimestamp <= openGroup.phase2endTime) { // Are we in phase 2?\r\n\t\t\trequire(userWeiTotal <= openGroup.max2); // Allow to contribute no more than max2 in phase 2.\r\n\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\r\n\t\t\treturn true;\r\n\t\t} else { // We've passed both phases 1 and 2.\r\n\t\t\trequire(userWeiTotal <= openGroup.max3); // Don't allow to contribute more than max3 in phase 3.\r\n\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction purchaseCallbackOnAccept(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\r\n\t\tuint256 n = addresses.length;\r\n\t\trequire(n == weiAmounts.length, \"Array lengths mismatch\");\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\tuint256 weiTotal = theGroup.weiTotal;\r\n\t\tfor (uint256 i = 0; i < n; i++) {\r\n\t\t\tMember storage memberRecord = members[addresses[i]];\r\n\t\t\tuint256 weiAmount = weiAmounts[i];\r\n\t\t\tweiTotal = weiTotal.add(weiAmount);\t\t\t\t\t\t\t\t // Calculate the total amount purchased by all members in this group.\r\n\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\r\n\t\t}\r\n\t\ttheGroup.weiTotal = weiTotal;\r\n\t\tif (getHowMuchUntilHardCap_(groupNumber) <= 100 ether) {\r\n\t\t\temit NearingHardCap(groupNumber, getHowMuchUntilHardCap_(groupNumber));\r\n\t\t\tif (weiTotal >= theGroup.cap) {\r\n\t\t\t\temit ReachedHardCap(groupNumber);\r\n\t\t\t}\r\n\t\t}\r\n\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction insertAndApprove(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\r\n\t\tuint256 n = addresses.length;\r\n\t\trequire(n == weiAmounts.length, \"Array lengtsh mismatch\");\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\tfor (uint256 i = 0; i < n; i++) {\r\n\t\t\taddress theAddress = addresses[i];\r\n\t\t\tif (!theGroup.exists[theAddress]) {\r\n\t\t\t\ttheGroup.addresses.push(theAddress);\r\n\t\t\t\ttheGroup.exists[theAddress] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn purchaseCallbackOnAccept(groupNumber, addresses, weiAmounts);\r\n\t}\r\n\r\n\tfunction callbackInsertApproveAndDistribute(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\r\n\t\tuint256 n = addresses.length;\r\n\t\trequire(n == weiAmounts.length, \"Array lengths mismatch\");\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\tif (!theGroup.distributing) {\r\n\t\t\ttheGroup.distributing = true;\r\n\t\t}\r\n\t\tuint256 newOwnerSupply = balances[owner];\r\n\t\tfor (uint256 i = 0; i < n; i++) {\r\n\t\t\taddress theAddress = addresses[i];\r\n\t\t\tMember storage memberRecord = members[theAddress];\r\n\t\t\tuint256 weiAmount = weiAmounts[i];\r\n\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\r\n\t\t\tuint256 additionalBalance = weiAmount.mul(theGroup.ratio); // Don't give cumulative tokens; one address can be distributed multiple times.\r\n\t\t\tif (additionalBalance > 0) { // No need to waste ticks if they have no tokens to distribute\r\n\t\t\t\tbalances[theAddress] = balances[theAddress].add(additionalBalance);\r\n\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(additionalBalance); // Update the available number of tokens.\r\n\t\t\t\temit Transfer(owner, theAddress, additionalBalance); // Notify exchanges of the distribution.\r\n\t\t\t}\r\n\t\t}\r\n\t\tbalances[owner] = newOwnerSupply;\r\n\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction refund(address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\r\n\t\tuint256 n = addresses.length;\r\n\t\trequire (n == weiAmounts.length, \"Array lengths mismatch\");\r\n\t\tuint256 thePenalty = penalty;\r\n\t\tfor(uint256 i = 0; i < n; i++) {\r\n\t\t\tuint256 weiAmount = weiAmounts[i];\r\n\t\t\taddress theAddress = addresses[i];\r\n\t\t\tif (thePenalty <= weiAmount) {\r\n\t\t\t\tweiAmount = weiAmount.sub(thePenalty);\r\n\t\t\t\trequire(address(this).balance >= weiAmount);\r\n\t\t\t\ttheAddress.transfer(weiAmount);\r\n\t\t\t}\r\n\t\t}\r\n\t\temit RefundedBatch(addresses);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction signalDoneDistributing(uint256 groupNumber) public onlyOwnerOrOracle {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\ttheGroup.distributed = true;\r\n\t\ttheGroup.distributing = false;\r\n\t\temit DistributeDone(groupNumber);\r\n\t}\r\n\t\r\n\tfunction drain() public onlyOwner {\r\n\t\towner.transfer(address(this).balance);\r\n\t}\r\n\t\r\n\tfunction setPenalty(uint256 newPenalty) public onlyOwner returns(bool success) {\r\n\t\tpenalty = newPenalty;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction buyback(uint256 amount) public canSell { // Can't sell unless owner has allowed it.\r\n\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals); // convert the full token value to the smallest unit possible.\r\n\t\trequire(balances[msg.sender].sub(decimalAmount) >= getLockedTokens_(msg.sender)); // Don't allow to sell locked tokens.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(decimalAmount); // Do this before transferring to avoid re-entrance attacks; will throw if result < 0.\r\n\t\t// Amount is considered to be how many full tokens the user wants to sell.\r\n\t\tuint256 totalCost = amount.mul(sellPrice); // sellPrice is the per-full-token value.\r\n\t\trequire(address(this).balance >= totalCost); // The contract must have enough funds to cover the selling.\r\n\t\tbalances[owner] = balances[owner].add(decimalAmount); // Put these tokens back into the available pile.\r\n\t\tmsg.sender.transfer(totalCost); // Pay the seller for their tokens.\r\n\t\temit Transfer(msg.sender, owner, decimalAmount); // Notify exchanges of the sell.\r\n\t}\r\n\r\n\tfunction fundContract() public onlyOwnerOrOracle payable { // For the owner to put funds into the contract.\r\n\t}\r\n\r\n\tfunction setSellPrice(uint256 thePrice) public onlyOwner {\r\n\t\tsellPrice = thePrice;\r\n\t}\r\n\t\r\n\tfunction setAllowedToBuyBack(bool value) public onlyOwner {\r\n\t\tallowedToBuyBack = value;\r\n\t\temit ChangedAllowedToBuyBack(value);\r\n\t}\r\n\r\n\tfunction setAllowedToPurchase(bool value) public onlyOwner {\r\n\t\tallowedToPurchase = value;\r\n\t\temit ChangedAllowedToPurchase(value);\r\n\t}\r\n\t\r\n\tfunction createGroup(string groupName, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success, uint256 createdGroupNumber) {\r\n\t\tcreatedGroupNumber = nextGroupNumber;\r\n\t\tGroup storage theGroup = groups[createdGroupNumber];\r\n\t\ttheGroup.name = groupName;\r\n\t\ttheGroup.startTime = startEpoch;\r\n\t\ttheGroup.phase1endTime = phase1endEpoch;\r\n\t\ttheGroup.phase2endTime = phase2endEpoch;\r\n\t\ttheGroup.deadline = deadlineEpoch;\r\n\t\ttheGroup.max2 = phase2weiCap;\r\n\t\ttheGroup.max3 = phase3weiCap;\r\n\t\ttheGroup.cap = hardWeiCap;\r\n\t\ttheGroup.ratio = ratio;\r\n\t\tnextGroupNumber++;\r\n\t\tsuccess = true;\r\n\t}\r\n\r\n\tfunction getGroup(uint256 groupNumber) public view returns(string groupName, bool distributed, bool unlocked, uint256 phase2cap, uint256 phase3cap, uint256 cap, uint256 ratio, uint256 startTime, uint256 phase1endTime, uint256 phase2endTime, uint256 deadline, uint256 weiTotal) {\r\n\t\trequire(groupNumber < nextGroupNumber);\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\tgroupName = theGroup.name;\r\n\t\tdistributed = theGroup.distributed;\r\n\t\tunlocked = theGroup.unlocked;\r\n\t\tphase2cap = theGroup.max2;\r\n\t\tphase3cap = theGroup.max3;\r\n\t\tcap = theGroup.cap;\r\n\t\tratio = theGroup.ratio;\r\n\t\tstartTime = theGroup.startTime;\r\n\t\tphase1endTime = theGroup.phase1endTime;\r\n\t\tphase2endTime = theGroup.phase2endTime;\r\n\t\tdeadline = theGroup.deadline;\r\n\t\tweiTotal = theGroup.weiTotal;\r\n\t}\r\n\t\r\n\tfunction getHowMuchUntilHardCap_(uint256 groupNumber) internal view returns(uint256 remainder) {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\tif (theGroup.weiTotal > theGroup.cap) { // calling .sub in this situation will throw.\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn theGroup.cap.sub(theGroup.weiTotal);\r\n\t}\r\n\t\r\n\tfunction getHowMuchUntilHardCap() public view returns(uint256 remainder) {\r\n\t\treturn getHowMuchUntilHardCap_(openGroupNumber);\r\n\t}\r\n\r\n\tfunction addMemberToGroup(address walletAddress, uint256 groupNumber) public onlyOwner returns(bool success) {\r\n\t\temit AddToGroup(walletAddress, groupNumber);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction instructOracleToDistribute(uint256 groupNumber) public onlyOwner {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\trequire(groupNumber < nextGroupNumber && !theGroup.distributed); // can't have already distributed\r\n\t\temit WantsToDistribute(groupNumber);\r\n\t}\r\n\t\r\n\tfunction distributeCallback(uint256 groupNumber, uint256 howMany) public onlyOwnerOrOracle returns (bool success) {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\trequire(!theGroup.distributed);\r\n\t\tif (!theGroup.distributing) {\r\n\t\t\ttheGroup.distributing = true;\r\n\t\t}\r\n\t\tuint256 n = theGroup.addresses.length;\r\n\t\tuint256 nextDistributionIndex = theGroup.nextDistributionIndex;\r\n\t\tuint256 exclusiveEndIndex = nextDistributionIndex + howMany;\r\n\t\tif (exclusiveEndIndex > n) {\r\n\t\t\texclusiveEndIndex = n;\r\n\t\t}\r\n\t\tuint256 newOwnerSupply = balances[owner];\r\n\t\tfor (uint256 i = nextDistributionIndex; i < exclusiveEndIndex; i++) {\r\n\t\t\taddress theAddress = theGroup.addresses[i];\r\n\t\t\tuint256 balance = getUndistributedBalanceOf_(theAddress, groupNumber);\r\n\t\t\tif (balance > 0) { // No need to waste ticks if they have no tokens to distribute\r\n\t\t\t\tbalances[theAddress] = balances[theAddress].add(balance);\r\n\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(balance); // Update the available number of tokens.\r\n\t\t\t\temit Transfer(owner, theAddress, balance); // Notify exchanges of the distribution.\r\n\t\t\t}\r\n\t\t}\r\n\t\tbalances[owner] = newOwnerSupply;\r\n\t\tif (exclusiveEndIndex < n) {\r\n\t\t\temit DistributedBatch(groupNumber, howMany);\r\n\t\t} else { // We've finished distributing people\r\n\t\t\tsignalDoneDistributing(groupNumber);\r\n\t\t}\r\n\t\ttheGroup.nextDistributionIndex = exclusiveEndIndex; // Usually not necessary if we've finished distribution, but if we don't update this, getHowManyLeftToDistribute will never show 0.\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getHowManyLeftToDistribute(uint256 groupNumber) public view returns(uint256 remainder) {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\treturn theGroup.addresses.length - theGroup.nextDistributionIndex;\r\n\t}\r\n\r\n\tfunction changeGroupInfo(uint256 groupNumber, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success) {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\tif (startEpoch > 0) {\r\n\t\t\ttheGroup.startTime = startEpoch;\r\n\t\t}\r\n\t\tif (phase1endEpoch > 0) {\r\n\t\t\ttheGroup.phase1endTime = phase1endEpoch;\r\n\t\t}\r\n\t\tif (phase2endEpoch > 0) {\r\n\t\t\ttheGroup.phase2endTime = phase2endEpoch;\r\n\t\t}\r\n\t\tif (deadlineEpoch > 0) {\r\n\t\t\ttheGroup.deadline = deadlineEpoch;\r\n\t\t}\r\n\t\tif (phase2weiCap > 0) {\r\n\t\t\ttheGroup.max2 = phase2weiCap;\r\n\t\t}\r\n\t\tif (phase3weiCap > 0) {\r\n\t\t\ttheGroup.max3 = phase3weiCap;\r\n\t\t}\r\n\t\tif (hardWeiCap > 0) {\r\n\t\t\ttheGroup.cap = hardWeiCap;\r\n\t\t}\r\n\t\tif (ratio > 0) {\r\n\t\t\ttheGroup.ratio = ratio;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction relockGroup(uint256 groupNumber) public onlyOwner returns(bool success) {\r\n\t\tgroups[groupNumber].unlocked = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction resetGroupInfo(uint256 groupNumber) public onlyOwner returns (bool success) {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\ttheGroup.startTime = 0;\r\n\t\ttheGroup.phase1endTime = 0;\r\n\t\ttheGroup.phase2endTime = 0;\r\n\t\ttheGroup.deadline = 0;\r\n\t\ttheGroup.max2 = 0;\r\n\t\ttheGroup.max3 = 0;\r\n\t\ttheGroup.cap = 0;\r\n\t\ttheGroup.ratio = 0;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction unlock(uint256 groupNumber) public onlyOwner returns (bool success) {\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\trequire(theGroup.distributed); // Distribution must have occurred first.\r\n\t\ttheGroup.unlocked = true;\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction setGlobalLock(bool value) public onlyOwner {\r\n\t\ttransferLock = value;\r\n\t\temit ChangedTransferLock(transferLock);\r\n\t}\r\n\t\r\n\tfunction burn(uint256 amount) public onlyOwner {\r\n\t\t// Burns tokens from the owner's supply and doesn't touch allocated tokens.\r\n\t\t// Decrease totalSupply and leftOver by the amount to burn so we can decrease the circulation.\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount); // Will throw if result < 0\r\n\t\ttotalSupply_ = totalSupply_.sub(amount); // Will throw if result < 0\r\n\t\temit Transfer(msg.sender, address(0), amount);\r\n\t}\r\n\t\r\n\tfunction splitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\r\n\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\r\n\t\tuint256 ownerBalance = balances[msg.sender];\r\n\t\tuint256 multiplier = ownerBalance.mul(splitFactor);\r\n\t\tuint256 increaseSupplyBy = multiplier.sub(ownerBalance); // We need to mint owner*splitFactor - owner additional tokens.\r\n\t\tbalances[msg.sender] = multiplier;\r\n\t\ttotalSupply_ = totalSupply_.mul(splitFactor);\r\n\t\temit Transfer(address(0), msg.sender, increaseSupplyBy); // Notify exchange that we've minted tokens.\r\n\t\t// Next, increase group ratios by splitFactor, so users will receive ratio * splitFactor tokens per ether.\r\n\t\tuint256 n = nextGroupNumber;\r\n\t\trequire(n > 0); // Must have at least one group.\r\n\t\tfor (uint256 i = 0; i < n; i++) {\r\n\t\t\tGroup storage currentGroup = groups[i];\r\n\t\t\tcurrentGroup.ratio = currentGroup.ratio.mul(splitFactor);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction reverseSplitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\r\n\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\r\n\t\tuint256 ownerBalance = balances[msg.sender];\r\n\t\tuint256 divier = ownerBalance.div(splitFactor);\r\n\t\tuint256 decreaseSupplyBy = ownerBalance.sub(divier);\r\n\t\t// We don't use burnTokens here since the amount to subtract might be more than what the owner currently holds in their unallocated supply which will cause the function to throw.\r\n\t\ttotalSupply_ = totalSupply_.div(splitFactor);\r\n\t\tbalances[msg.sender] = divier;\r\n\t\t// Notify the exchanges of how many tokens were burned.\r\n\t\temit Transfer(msg.sender, address(0), decreaseSupplyBy);\r\n\t\t// Next, decrease group ratios by splitFactor, so users will receive ratio / splitFactor tokens per ether.\r\n\t\tuint256 n = nextGroupNumber;\r\n\t\trequire(n > 0); // Must have at least one group. Groups are 0-indexed.\r\n\t\tfor (uint256 i = 0; i < n; i++) {\r\n\t\t\tGroup storage currentGroup = groups[i];\r\n\t\t\tcurrentGroup.ratio = currentGroup.ratio.div(splitFactor);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction airdrop( address[] addresses, uint256[] tokenDecimalAmounts) public onlyOwnerOrOracle returns (bool success) {\r\n\t\tuint256 n = addresses.length;\r\n\t\trequire(n == tokenDecimalAmounts.length, \"Array lengths mismatch\");\r\n\t\tuint256 newOwnerBalance = balances[owner];\r\n\t\tfor (uint256 i = 0; i < n; i++) {\r\n\t\t\taddress theAddress = addresses[i];\r\n\t\t\tuint256 airdropAmount = tokenDecimalAmounts[i];\r\n\t\t\tif (airdropAmount > 0) {\r\n\t\t\t\tuint256 currentBalance = balances[theAddress];\r\n\t\t\t\tbalances[theAddress] = currentBalance.add(airdropAmount);\r\n\t\t\t\tnewOwnerBalance = newOwnerBalance.sub(airdropAmount);\r\n\t\t\t\temit Transfer(owner, theAddress, airdropAmount);\r\n\t\t\t}\r\n\t\t}\r\n\t\tbalances[owner] = newOwnerBalance;\r\n\t\temit AirdroppedBatch(addresses);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\t\t\r\n\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\r\n\t\tif (msg.sender != owner) { // Owner can transfer anything to anyone.\r\n\t\t\trequire(balances[msg.sender].sub(_value) >= getLockedTokens_(msg.sender));\r\n\t\t}\r\n\t\treturn super.transfer(_to, _value);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) canTransfer returns (bool success) {\r\n\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\r\n\t\tif (msg.sender != owner) { // Owner not affected by locked tokens\r\n\t\t\trequire(balances[_from].sub(_value) >= getLockedTokens_(_from));\r\n\t\t}\r\n\t\treturn super.transferFrom(_from, _to, _value);\r\n\t}\r\n\r\n\tfunction setOpenGroup(uint256 groupNumber) public onlyOwner returns (bool success) {\r\n\t\trequire(groupNumber < nextGroupNumber);\r\n\t\topenGroupNumber = groupNumber;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getLockedTokensInGroup_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\r\n\t\tMember storage theMember = members[walletAddress];\r\n\t\tif (groups[groupNumber].unlocked) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn theMember.weiBalance[groupNumber].mul(groups[groupNumber].ratio);\r\n\t}\r\n\r\n\tfunction getLockedTokens_(address walletAddress) internal view returns(uint256 balance) {\r\n\t\tuint256 n = nextGroupNumber;\r\n\t\tfor (uint256 i = 0; i < n; i++) {\r\n\t\t\tbalance = balance.add(getLockedTokensInGroup_(walletAddress, i));\r\n\t\t}\r\n\t\treturn balance;\r\n\t}\r\n\r\n\tfunction getLockedTokens(address walletAddress) public view returns(uint256 balance) {\r\n\t\treturn getLockedTokens_(walletAddress);\r\n\t}\r\n\r\n\tfunction getUndistributedBalanceOf_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\r\n\t\tMember storage theMember = members[walletAddress];\r\n\t\tGroup storage theGroup = groups[groupNumber];\r\n\t\tif (theGroup.distributed) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn theMember.weiBalance[groupNumber].mul(theGroup.ratio);\r\n\t}\r\n\r\n\tfunction getUndistributedBalanceOf(address walletAddress, uint256 groupNumber) public view returns (uint256 balance) {\r\n\t\treturn getUndistributedBalanceOf_(walletAddress, groupNumber);\r\n\t}\r\n\r\n\tfunction checkMyUndistributedBalance(uint256 groupNumber) public view returns (uint256 balance) {\r\n\t\treturn getUndistributedBalanceOf_(msg.sender, groupNumber);\r\n\t}\r\n\r\n\tfunction transferRecovery(address _from, address _to, uint256 _value) public onlyOwner returns (bool success) {\r\n\t\t// Will be used if someone sends tokens to an incorrect address by accident. This way, we have the ability to recover the tokens. For example, sometimes there's a problem of lost tokens if someone sends tokens to a contract address that can't utilize the tokens.\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].add(_value); // Authorize the owner to spend on someone's behalf.\r\n\t\treturn transferFrom(_from, _to, _value);\r\n\t}\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferRecovery\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"signalDoneDistributing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"penalty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"purchaseCallbackOnAccept\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"checkMyUndistributedBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"setOpenGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"resetGroupInfo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setGlobalLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"instructOracleToDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedToPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPenalty\",\"type\":\"uint256\"}],\"name\":\"setPenalty\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"getUndistributedBalanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"splitFactor\",\"type\":\"uint256\"}],\"name\":\"reverseSplitTokensBeforeDistribution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"},{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"addMemberToGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHowMuchUntilHardCap\",\"outputs\":[{\"name\":\"remainder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"tokenDecimalAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getLockedTokens\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openGroupNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gweiPrice\",\"type\":\"uint256\"}],\"name\":\"setMaximumGasPrice\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupName\",\"type\":\"string\"},{\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"name\":\"phase1endEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2endEpoch\",\"type\":\"uint256\"},{\"name\":\"deadlineEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2weiCap\",\"type\":\"uint256\"},{\"name\":\"phase3weiCap\",\"type\":\"uint256\"},{\"name\":\"hardWeiCap\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"createGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"createdGroupNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"insertAndApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowedToBuyBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllowedToBuyBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"getHowManyLeftToDistribute\",\"outputs\":[{\"name\":\"remainder\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"getGroup\",\"outputs\":[{\"name\":\"groupName\",\"type\":\"string\"},{\"name\":\"distributed\",\"type\":\"bool\"},{\"name\":\"unlocked\",\"type\":\"bool\"},{\"name\":\"phase2cap\",\"type\":\"uint256\"},{\"name\":\"phase3cap\",\"type\":\"uint256\"},{\"name\":\"cap\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"phase1endTime\",\"type\":\"uint256\"},{\"name\":\"phase2endTime\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"weiTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeOracleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"distributeCallback\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"startEpoch\",\"type\":\"uint256\"},{\"name\":\"phase1endEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2endEpoch\",\"type\":\"uint256\"},{\"name\":\"deadlineEpoch\",\"type\":\"uint256\"},{\"name\":\"phase2weiCap\",\"type\":\"uint256\"},{\"name\":\"phase3weiCap\",\"type\":\"uint256\"},{\"name\":\"hardWeiCap\",\"type\":\"uint256\"},{\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"changeGroupInfo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllowedToPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"relockGroup\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"splitFactor\",\"type\":\"uint256\"}],\"name\":\"splitTokensBeforeDistribution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"thePrice\",\"type\":\"uint256\"}],\"name\":\"setSellPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"callbackInsertApproveAndDistribute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inPhase1\",\"type\":\"bool\"}],\"name\":\"WantsToPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"PurchasedCallbackOnAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"WantsToDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"remainder\",\"type\":\"uint256\"}],\"name\":\"NearingHardCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"ReachedHardCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"DistributeDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"howMany\",\"type\":\"uint256\"}],\"name\":\"DistributedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"AirdroppedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"RefundedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"groupNumber\",\"type\":\"uint256\"}],\"name\":\"AddToGroup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transferLock\",\"type\":\"bool\"}],\"name\":\"ChangedTransferLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allowedToPurchase\",\"type\":\"bool\"}],\"name\":\"ChangedAllowedToPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"allowedToBuyBack\",\"type\":\"bool\"}],\"name\":\"ChangedAllowedToBuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"SetSellPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "SparksterToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f5cf28df18ab1352f9c0c8aafb98cd6bfb20c77f2dfa86515ed36aeab6c93d3c"}