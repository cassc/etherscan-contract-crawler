{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n\\ncontract Staking is AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant SPONSOR = keccak256(\\\"SPONSOR\\\");\\n    uint256 public constant PERCENTS_BASE = 100;\\n    uint256 public constant MULTIPLIER = 10**19;\\n    uint256 public constant YEAR = 365 days;\\n\\n    IERC20 public immutable KON;\\n    uint256 public immutable deployTime;\\n    \\n    IERC20 public rewardToken;\\n    uint256 public maxPool = 20 * (10**6) * (10**18);\\n    uint256 public inactiveTokensInPool;\\n    uint256 public globalKoeffUSDTFW;\\n    uint256 public globalKoeffKONFW;\\n    uint256 public globalKoeffUSDTRW;\\n    uint256 public globalKoeffKONRW;\\n    uint256 public poolFullWeight;\\n    uint256 public poolReducedWeight;\\n    uint256 public penalty;\\n    uint256 public penaltyInKONAfterChange;\\n    uint256 public excessOfRewards;\\n    uint256 public capacity = 10;\\n    \\n    uint256[3] public percents = [15, 20, 25];\\n    uint256[3] public totalStaked;\\n    uint256[4] public updateIndexes;\\n    uint256[4] public lastUpdate;\\n    uint256[] public weight;\\n    DepositInfo[] public allDeposits;\\n    uint256 private _lock;\\n\\n    mapping(address => uint256[]) public indexForUser;\\n    mapping(uint256 => uint256) public weightForDeposit;\\n    mapping(address => WhiteListInfo) public whiteListForUser;\\n    mapping(uint256 => RewardPool_3) public reward3Info;\\n    mapping(uint256 => uint256) public lockOwnersDeposits; \\n\\n    struct WhiteListInfo {\\n        uint256 index;\\n        uint256 enteredAt;\\n        uint256 amount;\\n        uint256 lockUpWL;\\n    }\\n\\n    struct DepositInfo {\\n        Koeff varKoeff;\\n        address user;\\n        uint256 lockUp;\\n        uint256 sumInLock;\\n        uint256 enteredAt;\\n        uint256 pool;\\n        uint256 countHarvest;\\n        bool gotFixed;\\n    }\\n\\n    struct Koeff {\\n        uint256 koeffBeforeDepositKON;\\n        uint256 koeffBeforeDepositUSDT;\\n        uint256 unreceivedRewardKON;\\n        uint256 unreceivedRewardUSDT;\\n        uint256 receivedRewardKON;\\n        uint256 receivedRewardUSDT;\\n    }\\n\\n    struct RewardPool_3 {\\n        uint256 variableRewardTaken;\\n        uint256 part;\\n    }\\n\\n    // to prevent too deep stack\\n    struct IntVars {\\n        uint256 rewardsUSDT;\\n        uint256 rewardsKON;\\n        uint256 amountPenalty;\\n        uint256 amountKON;\\n        uint256 amountUSDT;\\n    }\\n\\n    event Deposit(address user, uint256 amount, uint256 lockUp, uint256 index);\\n    event Withdraw(address user, uint256 index);\\n    event Harvest(\\n        address user,\\n        uint256 amountKON,\\n        uint256 amountUSDT,\\n        uint256 index\\n    );\\n    event Reward(uint256 amount, uint256 time);\\n\\n    modifier update() {\\n        updatePool();\\n        _;\\n    }\\n\\n    modifier creator(uint256 index) {\\n        require(allDeposits[index].user == _msgSender(), \\\"10\\\");\\n        _;\\n    }\\n\\n    modifier depositeIndex(uint256 index) {\\n        require(index < allDeposits.length, \\\"0\\\");\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_lock != 1, \\\"1_\\\");\\n        _lock = 1;\\n        _;\\n        _lock = 0;\\n    }\\n\\n    constructor(\\n        address _kon,\\n        address _owner,\\n        address _sponsor\\n    ) {\\n        require(_kon != address(0) && _owner != address(0), \\\"1\\\");\\n        KON = IERC20(_kon);\\n        rewardToken = IERC20(_kon);\\n        weight.push(PERCENTS_BASE);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(SPONSOR, _sponsor);\\n        deployTime = block.timestamp;\\n    }\\n\\n    function indexes(address user) external view returns (uint256[] memory) {\\n        return indexForUser[user];\\n    }\\n\\n    /**\\n     * @param _maxPool set new amount for the cap of the entire pool\\n     * @param _capacity set new amount for the capacity\\n     * @param _weight set new amount for the weight\\n     */\\n    function changeInternalVariables(\\n        uint256 _maxPool,\\n        uint256 _capacity,\\n        uint256 _weight\\n    ) external update onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_maxPool != maxPool) {\\n            require(_maxPool > 0 && _maxPool >= stakedSum(), \\\"1\\\");\\n            maxPool = _maxPool;\\n        }\\n        if (_capacity != capacity) {\\n            require(_capacity > 0, \\\"2\\\");\\n            capacity = _capacity;\\n        }\\n        if (_weight != weight[weight.length - 1]) {\\n            require(_weight <= PERCENTS_BASE, \\\"3\\\");\\n            weight.push(_weight);\\n        }\\n    }\\n\\n    /**\\n     * @param reward amounts of reward for variable parts\\n     */\\n    function updateAmountsOfRewards(uint256 reward)\\n        external\\n        update\\n        onlyRole(SPONSOR)\\n        nonReentrant\\n    {\\n        require(reward > 0, \\\"1\\\");\\n        uint256 timestamp = block.timestamp;\\n        for (uint256 j = 0; j < 4; j += 1) {\\n            require(timestamp == lastUpdate[j], \\\"2\\\");\\n        }\\n        uint256 pool = stakedSum();\\n        require(pool > 0, \\\"3\\\");\\n        uint256 amount = reward;\\n        if (penalty > 0) {\\n            amount += penalty;\\n            penalty = 0;\\n        }\\n        uint256 rewardRW = (amount * poolReducedWeight) / pool;\\n        uint256 rewardFW = amount - rewardRW;\\n        if (poolFullWeight == 0 && rewardFW != 0) excessOfRewards += rewardFW;\\n        if (rewardToken == KON) {\\n            if (rewardFW > 0 && poolFullWeight != 0)\\n                globalKoeffKONFW += ((rewardFW * MULTIPLIER) / poolFullWeight);\\n            if (rewardRW > 0)\\n                globalKoeffKONRW += (rewardRW * MULTIPLIER) / poolReducedWeight;\\n        } else {\\n            if (rewardFW > 0 && poolFullWeight != 0)\\n                globalKoeffUSDTFW += (rewardFW * MULTIPLIER) / poolFullWeight;\\n            if (rewardRW > 0)\\n                globalKoeffUSDTRW +=\\n                    (rewardRW * MULTIPLIER) /\\n                    poolReducedWeight;\\n        }\\n        rewardToken.safeTransferFrom(_msgSender(), address(this), reward);\\n        emit Reward(reward, timestamp);\\n    }\\n\\n    /**\\n     * @param usdt address of new token for rewards\\n     */\\n    function setNewRewardToken(address usdt)\\n        external\\n        update\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(usdt != address(0) && rewardToken == KON, \\\"1\\\");\\n        uint256 timestamp = block.timestamp;\\n        for (uint256 j = 0; j < 4; j += 1) {\\n            require(timestamp == lastUpdate[j], \\\"2\\\");\\n        }\\n        uint256 pool = stakedSum();\\n        if (penalty > 0 && pool > 0) {\\n            uint256 rewardRW = (penalty * poolReducedWeight) / pool;\\n            uint256 rewardFW = penalty - rewardRW;\\n            if (rewardFW > 0 && poolFullWeight != 0)\\n                globalKoeffKONFW += (rewardFW * MULTIPLIER) / poolFullWeight;\\n            if (rewardRW > 0)\\n                globalKoeffKONRW += (rewardRW * MULTIPLIER) / poolReducedWeight;\\n            penalty = 0;\\n        } else if(penalty > 0 && pool == 0) {\\n            KON.safeTransfer(_msgSender(), penalty);\\n            penalty = 0;\\n        }\\n        rewardToken = IERC20(usdt);\\n    }\\n\\n    function getExcessToken()\\n        external\\n        update\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        nonReentrant\\n    {\\n        require(penaltyInKONAfterChange > 0 || excessOfRewards > 0, \\\"1\\\");\\n        if (penaltyInKONAfterChange > 0) {\\n            KON.safeTransfer(_msgSender(), penaltyInKONAfterChange);\\n            penaltyInKONAfterChange = 0;\\n        }\\n        if (excessOfRewards > 0) {\\n            rewardToken.safeTransfer(_msgSender(), excessOfRewards);\\n            excessOfRewards = 0;\\n        }\\n    }\\n\\n    /**\\n     * @param enteredAt start\\n     * @param amount deposits\\n     * @param addresses users\\n     * @param lockUp lockUp\\n     * @param isActualDeposit true if the element is deposit but not white list\\n     */\\n    function depositOrWLFromOwner(\\n        uint256[] memory enteredAt,\\n        uint256[] memory amount,\\n        address[] memory addresses,\\n        uint256[] memory lockUp,\\n        bool[] memory isActualDeposit\\n    ) external update onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        uint256 timestamp = block.timestamp;\\n        require((timestamp - deployTime) / 1 days <= 3, \\\"0\\\");\\n        uint256 len = addresses.length;\\n        require(\\n            len == amount.length &&\\n                len == lockUp.length &&\\n                len == enteredAt.length &&\\n                len == isActualDeposit.length,\\n            \\\"1\\\"\\n        );\\n        uint256 debt;\\n        uint256 previousEnteredAt_;\\n        address user;\\n        WhiteListInfo memory wl;\\n        Koeff memory koeff;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            wl = WhiteListInfo(\\n                allDeposits.length,\\n                enteredAt[i],\\n                amount[i],\\n                lockUp[i]\\n            );\\n            user = addresses[i];\\n            require(wl.amount > 0, \\\"2\\\");\\n            require(wl.lockUpWL <= 2, \\\"3\\\");\\n            require(user != address(0), \\\"4\\\");\\n            require(\\n                timestamp >= wl.enteredAt && wl.enteredAt >= previousEnteredAt_,\\n                \\\"5\\\"\\n            );\\n            previousEnteredAt_ = wl.enteredAt;\\n            indexForUser[user].push(wl.index);\\n            weightForDeposit[wl.index] = 0;\\n            if (!isActualDeposit[i]) {\\n                whiteListForUser[user] = WhiteListInfo(\\n                    wl.index,\\n                    wl.enteredAt,\\n                    wl.amount,\\n                    wl.lockUpWL\\n                );\\n                koeff = Koeff(0, 0, 0, 0, 0, 0);\\n                wl = WhiteListInfo(0, 0, 0, 0);\\n            } else {\\n                koeff = Koeff(globalKoeffKONFW, globalKoeffUSDTFW, 0, 0, 0, 0);\\n                totalStaked[wl.lockUpWL] += wl.amount;\\n                poolFullWeight += wl.amount;\\n                debt += wl.amount;\\n            }\\n            allDeposits.push(\\n                DepositInfo(\\n                    koeff,\\n                    user,\\n                    wl.lockUpWL,\\n                    wl.amount,\\n                    wl.enteredAt,\\n                    0,\\n                    0,\\n                    false\\n                )\\n            );\\n        }\\n\\n        if (debt > 0) KON.safeTransferFrom(_msgSender(), address(this), debt);\\n    }\\n\\n    function setLocks(uint256[] memory lockPeriod, uint256[] memory index) external onlyRole(DEFAULT_ADMIN_ROLE)  { \\n        require((block.timestamp - deployTime) / 1 days <= 3, \\\"0\\\");\\n        uint256 len = index.length;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            lockOwnersDeposits[index[i]] = lockPeriod[i];\\n        }\\n    }\\n\\n    /**\\n     * @param amount for deposit\\n     * @param lockUp for deposit\\n     */\\n    function deposit(uint256 amount, uint256 lockUp)\\n        external\\n        update\\n        nonReentrant\\n    {\\n        require(amount > 0, \\\"1\\\");\\n        require(lockUp < 3, \\\"2\\\");\\n        require(stakedSum() + amount <= maxPool, \\\"3\\\");\\n        address user = _msgSender();\\n        uint256 depLen = allDeposits.length;\\n        uint256 weiLen = weight.length;\\n        uint256 timestamp = block.timestamp;\\n        uint256 globKon;\\n        uint256 globUSDT;\\n\\n        WhiteListInfo memory whiteList_ = whiteListForUser[user];\\n        if (\\n            whiteList_.amount == amount &&\\n            whiteList_.lockUpWL == lockUp &&\\n            (timestamp - deployTime) / 14 days < 1\\n        ) {\\n            timestamp = whiteList_.enteredAt;\\n            depLen = whiteList_.index;\\n            weightForDeposit[depLen] = 0;\\n        } else {\\n            weightForDeposit[depLen] = weiLen - 1;\\n        }\\n\\n        if (weight[weightForDeposit[depLen]] == PERCENTS_BASE) {\\n            poolFullWeight += amount;\\n            globKon = globalKoeffKONFW;\\n            globUSDT = globalKoeffUSDTFW;\\n        } else {\\n            poolReducedWeight += ((amount * weight[weiLen - 1]) /\\n                PERCENTS_BASE);\\n            globKon = globalKoeffKONRW;\\n            globUSDT = globalKoeffUSDTRW;\\n        }\\n\\n        totalStaked[lockUp] += amount;\\n\\n        DepositInfo memory dep = DepositInfo(\\n            Koeff(globKon, globUSDT, 0, 0, 0, 0),\\n            user,\\n            lockUp,\\n            amount,\\n            timestamp,\\n            0,\\n            0,\\n            false\\n        );\\n\\n        if (depLen == allDeposits.length) {\\n            indexForUser[user].push(depLen);\\n            allDeposits.push(dep);\\n        } else {\\n            allDeposits[depLen] = dep;\\n            delete whiteListForUser[user];\\n        }\\n\\n        KON.safeTransferFrom(user, address(this), amount);\\n        emit Deposit(user, amount, lockUp, depLen);\\n    }\\n\\n    /**\\n     * @param index for deposit\\n     */\\n    function harvest(uint256 index)\\n        public\\n        update\\n        depositeIndex(index)\\n        creator(index)\\n        nonReentrant\\n    {\\n        (uint256 kon, uint256 usdt) = _harvest(index);\\n        address user = _msgSender();\\n        _transfers(user, kon, usdt);\\n        emit Harvest(user, kon, usdt, index);\\n    }\\n\\n    /**\\n     * @param index for lockUp\\n     */\\n    function withdraw(uint256 index)\\n        external\\n        update\\n        depositeIndex(index)\\n        creator(index)\\n        nonReentrant\\n    {\\n        DepositInfo storage stake = allDeposits[index];\\n        if(lockOwnersDeposits[index] != 0) {\\n            require(block.timestamp >= lockOwnersDeposits[index], \\\"00\\\");\\n        }\\n        require(stake.sumInLock > 0, \\\"1\\\");\\n        (uint256 year, uint256 months) = _amountOfYears(stake.enteredAt);\\n        IntVars memory vars;\\n        vars.rewardsKON = stake.sumInLock;\\n\\n        if (year <= stake.lockUp) {\\n            uint256 rewKON;\\n            if (\\n                (stake.lockUp < 2 && year == stake.pool) ||\\n                (stake.lockUp == 2 && year == stake.pool)\\n            ) {\\n                vars.rewardsUSDT = stake.varKoeff.unreceivedRewardUSDT;\\n                rewKON = stake.varKoeff.unreceivedRewardKON;\\n                stake.varKoeff.receivedRewardKON += stake\\n                    .varKoeff\\n                    .unreceivedRewardKON;\\n                stake.varKoeff.receivedRewardUSDT += stake\\n                    .varKoeff\\n                    .unreceivedRewardUSDT;\\n                (vars.amountKON, vars.amountUSDT) = varPart(index);\\n            } else {\\n                (rewKON, vars.rewardsUSDT) = varPart(index);\\n            }\\n\\n            vars.rewardsKON += currentFixedPart(index);\\n            vars.amountPenalty = fixedPart(index) / 2;\\n\\n            vars.rewardsKON -= vars.amountPenalty;\\n            vars.rewardsKON += rewKON;\\n\\n            if (rewardToken == KON) {\\n                penalty += vars.amountKON;\\n                penalty += vars.amountPenalty;\\n            } else {\\n                penaltyInKONAfterChange += vars.amountKON;\\n                penaltyInKONAfterChange += vars.amountPenalty;\\n                penalty += vars.amountUSDT;\\n            }\\n        } else if (\\n            (!stake.gotFixed &&\\n                (stake.lockUp < 2 ||\\n                    months >= reward3Info[index].variableRewardTaken))\\n        ) {\\n            (vars.amountKON, vars.rewardsUSDT) = _harvest(index);\\n            vars.rewardsKON += vars.amountKON;\\n        }\\n\\n        if (\\n            (stake.lockUp == 2 && stake.pool != 4) ||\\n            (stake.lockUp < 2 && stake.pool < stake.lockUp + 1)\\n        ) _updateTotalStaked(stake.sumInLock, stake.lockUp, index);\\n        else inactiveTokensInPool -= stake.sumInLock;\\n\\n        _transfers(stake.user, vars.rewardsKON, vars.rewardsUSDT);\\n\\n        emit Withdraw(stake.user, index);\\n\\n        delete allDeposits[index];\\n    }\\n\\n    function stakedSum() public view returns (uint256 amount) {\\n        for (uint256 i = 0; i < 3; i += 1) {\\n            amount += totalStaked[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev calculate fixed part for now\\n     * @param index index of deposit\\n     */\\n    function currentFixedPart(uint256 index)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        DepositInfo memory stake = allDeposits[index];\\n        (uint256 year, ) = _amountOfYears(stake.enteredAt);\\n        uint256 i;\\n        for (i; i < year && i <= stake.lockUp; i += 1) {\\n            amount += percents[i];\\n        }\\n        amount += (amount * stake.sumInLock) / PERCENTS_BASE; // \u0444\u0438\u043a\u0441 \u043d\u0430\u0433\u0440\u0430\u0434\u0430\\n        if (year < stake.lockUp + 1)\\n            amount += (((15 + (5 * i)) *\\n                stake.sumInLock * //\\n                (block.timestamp - (stake.enteredAt + YEAR * year))) / //\\n                (PERCENTS_BASE * YEAR));\\n    }\\n\\n    /**\\n     * @dev calculate fixed part for stake for the entire period\\n     * @param index index of deposit\\n     */\\n    function fixedPart(uint256 index) public view returns (uint256 amount) {\\n        DepositInfo memory stake = allDeposits[index];\\n        for (uint256 i = 0; i < 3 && i <= stake.lockUp; i += 1) {\\n            amount += percents[i];\\n        }\\n        amount = (amount * stake.sumInLock) / PERCENTS_BASE;\\n    }\\n\\n    /**\\n     * @dev calculate var part for now\\n     * @param index for deposit\\n     */\\n    function varPart(uint256 index)\\n        public\\n        view\\n        returns (uint256 inKON, uint256 inUSDT)\\n    {\\n        DepositInfo memory stake = allDeposits[index];\\n        uint256 weight_ = weight[weightForDeposit[index]];\\n        if (\\n            (stake.lockUp < 2 && stake.pool != stake.lockUp + 1) ||\\n            (stake.lockUp == 2 && stake.pool != 4)\\n        ) {\\n            if (weight_ == PERCENTS_BASE) {\\n                inKON = ((stake.sumInLock *\\n                    (globalKoeffKONFW - stake.varKoeff.koeffBeforeDepositKON)) /\\n                    MULTIPLIER -\\n                    stake.varKoeff.receivedRewardKON);\\n                if (globalKoeffUSDTFW != 0)\\n                    inUSDT = ((stake.sumInLock *\\n                        (globalKoeffUSDTFW -\\n                            stake.varKoeff.koeffBeforeDepositUSDT)) /\\n                        MULTIPLIER -\\n                        stake.varKoeff.receivedRewardUSDT);\\n            } else {\\n                uint256 amount = (stake.sumInLock * weight_) / PERCENTS_BASE;\\n                inKON = ((amount *\\n                    (globalKoeffKONRW - stake.varKoeff.koeffBeforeDepositKON)) /\\n                    MULTIPLIER -\\n                    stake.varKoeff.receivedRewardKON);\\n                if (globalKoeffUSDTRW != 0)\\n                    inUSDT = ((amount *\\n                        (globalKoeffUSDTRW -\\n                            stake.varKoeff.koeffBeforeDepositUSDT)) /\\n                        MULTIPLIER -\\n                        stake.varKoeff.receivedRewardUSDT);\\n            }\\n        } else\\n            return (\\n                stake.varKoeff.unreceivedRewardKON,\\n                stake.varKoeff.unreceivedRewardUSDT\\n            );\\n    }\\n\\n    function updatePool() public {\\n        uint256 len = allDeposits.length;\\n        uint256 year;\\n        DepositInfo storage stake;\\n\\n        uint256 i;\\n        uint256 limit;\\n        for (uint256 j = 0; j < 4; j += 1) {\\n            i = updateIndexes[j];\\n            limit = (i + capacity > len) ? len : i + capacity;\\n            for (i; i < limit; i += 1) {\\n                stake = allDeposits[i];\\n                (year, ) = _amountOfYears(stake.enteredAt);\\n                if (year > j) {\\n                    if (\\n                        stake.sumInLock > 0 &&\\n                        ((stake.lockUp < 2 && stake.pool <= stake.lockUp) ||\\n                            (stake.lockUp == 2 && stake.pool < 4))\\n                    ) {\\n                        (\\n                            stake.varKoeff.unreceivedRewardKON,\\n                            stake.varKoeff.unreceivedRewardUSDT\\n                        ) = varPart(i);\\n                        if (\\n                            (j < 2 && stake.lockUp == j) ||\\n                            (j == 3 && stake.lockUp == 2)\\n                        ) {\\n                            _updateTotalStaked(\\n                                stake.sumInLock,\\n                                stake.lockUp,\\n                                i\\n                            );\\n                            inactiveTokensInPool += stake.sumInLock;\\n                        }\\n                        stake.pool += 1;\\n                    }\\n                    updateIndexes[j] = i + 1;\\n                } else {\\n                    lastUpdate[j] = block.timestamp;\\n                    break;\\n                }\\n            }\\n            if (i == len) lastUpdate[j] = block.timestamp;\\n        }\\n    }\\n\\n    function _amountOfYears(uint256 start)\\n        private\\n        view\\n        returns (uint256 amount, uint256 months)\\n    {\\n        amount = (block.timestamp - start) / YEAR;\\n        if (amount >= 3)\\n            months = (block.timestamp - (start + (3 * YEAR))) / 30 days;\\n    }\\n\\n    function _transfers(\\n        address user,\\n        uint256 toTransferKON,\\n        uint256 toTransferUSDT\\n    ) private {\\n        require(toTransferKON > 0 || toTransferUSDT > 0, \\\"01\\\");\\n        if (toTransferKON > 0) {\\n            require(\\n                KON.balanceOf(address(this)) -\\n                    stakedSum() -\\n                    inactiveTokensInPool >=\\n                    toTransferKON,\\n                \\\"02\\\"\\n            );\\n            KON.safeTransfer(user, toTransferKON);\\n        }\\n\\n        if (toTransferUSDT > 0) {\\n            require(\\n                rewardToken.balanceOf(address(this)) >= toTransferUSDT,\\n                \\\"03\\\"\\n            );\\n            rewardToken.safeTransfer(user, toTransferUSDT);\\n        }\\n    }\\n\\n    function _updateTotalStaked(\\n        uint256 amount,\\n        uint256 lockUp,\\n        uint256 index\\n    ) private {\\n        totalStaked[lockUp] -= amount;\\n        if (weight[weightForDeposit[index]] == PERCENTS_BASE)\\n            poolFullWeight -= amount;\\n        else\\n            poolReducedWeight -= ((amount * weight[weightForDeposit[index]]) /\\n                PERCENTS_BASE);\\n    }\\n\\n    function _harvest(uint256 index) private returns (uint256, uint256) {\\n        DepositInfo storage stake = allDeposits[index];\\n        RewardPool_3 storage reward = reward3Info[index];\\n        require(stake.sumInLock != 0, \\\"1\\\");\\n        (uint256 year, uint256 months) = _amountOfYears(stake.enteredAt);\\n        IntVars memory vars;\\n        if (stake.lockUp == 2 && year >= 3) {\\n            require(months >= reward.variableRewardTaken, \\\"2\\\");\\n            if (reward.part == 0) reward.part = fixedPart(index) / 6;\\n            if (reward.variableRewardTaken < 6) {\\n                if (months > 5) {\\n                    vars.amountKON =\\n                        reward.part *\\n                        (6 - reward.variableRewardTaken);\\n                } else\\n                    vars.amountKON =\\n                        reward.part *\\n                        (months + 1 - reward.variableRewardTaken);\\n            }\\n            reward.variableRewardTaken = months + 1;\\n        }\\n        if (\\n            (stake.lockUp < 2 &&\\n                (stake.pool >= stake.lockUp + 1 || year == stake.pool)) ||\\n            (stake.lockUp == 2 &&\\n                ((year < 3 && year == stake.pool) || stake.pool == 4))\\n        ) {\\n            vars.rewardsKON += stake.varKoeff.unreceivedRewardKON;\\n            vars.rewardsUSDT += stake.varKoeff.unreceivedRewardUSDT;\\n        } else {\\n            (vars.rewardsKON, vars.rewardsUSDT) = varPart(index);\\n            if (\\n                stake.lockUp < 2 ||\\n                (stake.lockUp == 2 && months > 11 && stake.pool != 4)\\n            ) stake.pool += 1;\\n\\n            if (\\n                (stake.lockUp < 2 && stake.lockUp + 1 == stake.pool) ||\\n                (stake.lockUp == 2 && stake.pool == 4)\\n            ) {\\n                _updateTotalStaked(stake.sumInLock, stake.lockUp, index);\\n                inactiveTokensInPool += stake.sumInLock;\\n            }\\n        }\\n        if (\\n            stake.lockUp < 2 &&\\n            stake.pool >= stake.lockUp + 1 &&\\n            !stake.gotFixed\\n        ) {\\n            vars.amountKON = fixedPart(index);\\n            stake.gotFixed = true;\\n        }\\n\\n        stake.varKoeff.receivedRewardKON += vars.rewardsKON;\\n        stake.varKoeff.receivedRewardUSDT += vars.rewardsUSDT;\\n        stake.varKoeff.unreceivedRewardKON = 0;\\n        stake.varKoeff.unreceivedRewardUSDT = 0;\\n        if (year <= stake.lockUp + 1) stake.countHarvest = year;\\n        else stake.countHarvest = stake.lockUp + 1;\\n        vars.rewardsKON += vars.amountKON;\\n\\n        return (vars.rewardsKON, vars.rewardsUSDT);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockUp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountKON\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KON\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPONSOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"koeffBeforeDepositKON\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"koeffBeforeDepositUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unreceivedRewardKON\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unreceivedRewardUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedRewardKON\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedRewardUSDT\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Koeff\",\"name\":\"varKoeff\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumInLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enteredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countHarvest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gotFixed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"changeInternalVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"currentFixedPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockUp\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"enteredAt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockUp\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isActualDeposit\",\"type\":\"bool[]\"}],\"name\":\"depositOrWLFromOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessOfRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fixedPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcessToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalKoeffKONFW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalKoeffKONRW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalKoeffUSDTFW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalKoeffUSDTRW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inactiveTokensInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockOwnersDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyInKONAfterChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"percents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFullWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolReducedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reward3Info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"variableRewardTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lockPeriod\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"index\",\"type\":\"uint256[]\"}],\"name\":\"setLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"name\":\"setNewRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updateAmountsOfRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"varPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inKON\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inUSDT\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weightForDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enteredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockUpWL\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a520e593f89c908cd2bc27d928bc75913c55c42000000000000000000000000fb5b98cac6e73ccafb802471d51655ca5fe65b1f000000000000000000000000fb5b98cac6e73ccafb802471d51655ca5fe65b1f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}