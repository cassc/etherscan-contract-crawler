{"SourceCode": "pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title InstaAccount.\r\n * @dev DeFi Smart Account Wallet.\r\n */\r\n\r\ninterface IndexInterface {\r\n    function connectors(uint version) external view returns (address);\r\n    function check(uint version) external view returns (address);\r\n    function list() external view returns (address);\r\n}\r\n\r\ninterface ConnectorsInterface {\r\n    function isConnector(address[] calldata logicAddr) external view returns (bool);\r\n    function isStaticConnector(address[] calldata logicAddr) external view returns (bool);\r\n}\r\n\r\ninterface CheckInterface {\r\n    function isOk() external view returns (bool);\r\n}\r\n\r\ninterface ListInterface {\r\n    function addAuth(address user) external;\r\n    function removeAuth(address user) external;\r\n}\r\n\r\n\r\ncontract Record {\r\n\r\n    event LogEnable(address indexed user);\r\n    event LogDisable(address indexed user);\r\n    event LogSwitchShield(bool _shield);\r\n\r\n    // InstaIndex Address.\r\n    address public constant instaIndex = 0x2971AdFa57b20E5a416aE5a708A8655A9c74f723;\r\n    // The Account Module Version.\r\n    uint public constant version = 1;\r\n    // Auth Module(Address of Auth => bool).\r\n    mapping (address => bool) private auth;\r\n    // Is shield true/false.\r\n    bool public shield;\r\n\r\n    /**\r\n     * @dev Check for Auth if enabled.\r\n     * @param user address/user/owner.\r\n     */\r\n    function isAuth(address user) public view returns (bool) {\r\n        return auth[user];\r\n    }\r\n\r\n    /**\r\n     * @dev Change Shield State.\r\n    */\r\n    function switchShield(bool _shield) external {\r\n        require(auth[msg.sender], \"not-self\");\r\n        require(shield != _shield, \"shield is set\");\r\n        shield = _shield;\r\n        emit LogSwitchShield(shield);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable New User.\r\n     * @param user Owner of the Smart Account.\r\n    */\r\n    function enable(address user) public {\r\n        require(msg.sender == address(this) || msg.sender == instaIndex, \"not-self-index\");\r\n        require(user != address(0), \"not-valid\");\r\n        require(!auth[user], \"already-enabled\");\r\n        auth[user] = true;\r\n        ListInterface(IndexInterface(instaIndex).list()).addAuth(user);\r\n        emit LogEnable(user);\r\n    }\r\n\r\n    /**\r\n     * @dev Disable User.\r\n     * @param user Owner of the Smart Account.\r\n    */\r\n    function disable(address user) public {\r\n        require(msg.sender == address(this), \"not-self\");\r\n        require(user != address(0), \"not-valid\");\r\n        require(auth[user], \"already-disabled\");\r\n        delete auth[user];\r\n        ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);\r\n        emit LogDisable(user);\r\n    }\r\n\r\n}\r\n\r\ncontract InstaAccount is Record {\r\n\r\n    event LogCast(address indexed origin, address indexed sender, uint value);\r\n\r\n    receive() external payable {}\r\n\r\n     /**\r\n     * @dev Delegate the calls to Connector And this function is ran by cast().\r\n     * @param _target Target to of Connector.\r\n     * @param _data CallData of function in Connector.\r\n    */\r\n    function spell(address _target, bytes memory _data) internal {\r\n        require(_target != address(0), \"target-invalid\");\r\n        assembly {\r\n            let succeeded := delegatecall(gas(), _target, add(_data, 0x20), mload(_data), 0, 0)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    let size := returndatasize()\r\n                    returndatacopy(0x00, 0x00, size)\r\n                    revert(0x00, size)\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is the main function, Where all the different functions are called\r\n     * from Smart Account.\r\n     * @param _targets Array of Target(s) to of Connector.\r\n     * @param _datas Array of Calldata(S) of function.\r\n    */\r\n    function cast(\r\n        address[] calldata _targets,\r\n        bytes[] calldata _datas,\r\n        address _origin\r\n    )\r\n    external\r\n    payable\r\n    {\r\n        require(isAuth(msg.sender) || msg.sender == instaIndex, \"permission-denied\");\r\n        require(_targets.length == _datas.length , \"array-length-invalid\");\r\n        IndexInterface indexContract = IndexInterface(instaIndex);\r\n        bool isShield = shield;\r\n        if (!isShield) {\r\n            require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), \"not-connector\");\r\n        } else {\r\n            require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), \"not-static-connector\");\r\n        }\r\n        for (uint i = 0; i < _targets.length; i++) {\r\n            spell(_targets[i], _datas[i]);\r\n        }\r\n        address _check = indexContract.check(version);\r\n        if (_check != address(0) && !isShield) require(CheckInterface(_check).isOk(), \"not-ok\");\r\n        emit LogCast(_origin, msg.sender, msg.value);\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogDisable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_shield\",\"type\":\"bool\"}],\"name\":\"LogSwitchShield\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAuth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shield\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shield\",\"type\":\"bool\"}],\"name\":\"switchShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InstaAccount", "CompilerVersion": "v0.6.0+commit.26b70077", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7356d76ef680ea6649af388d2a518797700466c0a8ed7e5356ec7932509c8e8"}